
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 84 02 00       	call   c0028478 <_init>
c0000025:	c3                   	ret    
c0000026:	bb cc 90 02 c0       	mov    ebx,0xc00290cc
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d8 90 02 c0    	cmp    ebx,0xc00290d8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d0 02 c0       	mov    eax,0xc002d098
c0000049:	3d 98 d0 02 c0       	cmp    eax,0xc002d098
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d0 02 c0       	push   0xc002d098
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d0 02 c0       	mov    eax,0xc002d098
c0000075:	2d 98 d0 02 c0       	sub    eax,0xc002d098
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d0 02 c0       	push   0xc002d098
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb e0 90 02 c0       	mov    ebx,0xc00290e0
c00000bb:	81 eb dc 90 02 c0    	sub    ebx,0xc00290dc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be dc 90 02 c0       	mov    esi,0xc00290dc
c00000ca:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d0 02 c0       	push   0xc002d098
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 d6 02 c0       	push   0xc002d6d0
c000012c:	68 98 d0 02 c0       	push   0xc002d098
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 b9 cf 01 00       	call   c001d35c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 4e 21 01 00       	call   c0012509 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 97 cf 01 00       	call   c001d35c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 3f d4 01 00       	call   c001d823 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 55 da 01 00       	call   c001de42 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 db 02 c0 	lgdtd  ds:0xc002db10
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 b7 3e 01 00       	call   c0014499 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 d6 02 c0       	mov    ds:0xc002d6e8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 91 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f00],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 91 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f00],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 91 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f00],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 91 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f00],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d700
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 d7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd28fc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd28fc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 d7 02 c0    	mov    DWORD PTR ds:0xc002d700,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c d7 02 c0    	cmp    DWORD PTR ds:0xc002d72c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d73c
c0000e38:	c7 42 0c 34 d7 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d734
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c d7 02 c0    	mov    DWORD PTR ds:0xc002d73c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c d7 02 c0    	mov    DWORD PTR ds:0xc002d72c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 d7 02 c0 02 	test   BYTE PTR ds:0xc002d700,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d700
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd28fc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 d7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd28fc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 d7 02 c0 	lea    edx,[eax*8-0x3ffd28cc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d740
c00011ba:	81 fb 34 d7 02 c0    	cmp    ebx,0xc002d734
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 d7 02 c0       	cmp    eax,0xc002d734
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 d7 02 c0    	cmp    DWORD PTR ds:0xc002d730,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c d7 02 c0       	mov    ds:0xc002d73c,eax
c00011f6:	a3 40 d7 02 c0       	mov    ds:0xc002d740,eax
c00011fb:	a3 30 d7 02 c0       	mov    ds:0xc002d730,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d734
c0001209:	c7 40 0c 34 d7 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d734
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 d7 02 c0       	mov    ds:0xc002d740,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d734
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 d6 02 c0 	lea    ebp,[edx*4-0x3ffd2908]
c000125a:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 d7 02 c0 	lea    ecx,[edx*4-0x3ffd2900]
c0001275:	8b 14 95 00 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2900]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 da 02 c0 	or     DWORD PTR [edi*4-0x3ffd25cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 d7 02 c0 	lea    eax,[eax*8-0x3ffd28cc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c d7 02 c0    	mov    DWORD PTR ds:0xc002d73c,ecx
c000132f:	89 0d 40 d7 02 c0    	mov    DWORD PTR ds:0xc002d740,ecx
c0001335:	c7 41 08 34 d7 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d734
c000133c:	c7 41 0c 34 d7 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d734
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c d7 02 c0 	lea    edx,[ecx*8-0x3ffd28d4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd25cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd25cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c d7 02 c0 	lea    edx,[eax*4-0x3ffd28d4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 da 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd25cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c d7 02 c0    	mov    DWORD PTR ds:0xc002d73c,edi
c0001402:	89 3d 40 d7 02 c0    	mov    DWORD PTR ds:0xc002d740,edi
c0001408:	c7 47 08 34 d7 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d734
c000140f:	c7 47 0c 34 d7 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d734
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 d7 02 c0    	mov    DWORD PTR ds:0xc002d730,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c d7 02 c0    	mov    DWORD PTR ds:0xc002d72c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 d7 02 c0       	mov    edx,0xc002d700
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d700,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002da54
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da54,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 da 02 c0    	mov    DWORD PTR ds:0xc002da54,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c d7 02 c0    	cmp    DWORD PTR ds:0xc002d72c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c d7 02 c0    	mov    DWORD PTR ds:0xc002d72c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d700,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c da 02 c0    	push   DWORD PTR ds:0xc002da5c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d700,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c da 02 c0       	mov    eax,ds:0xc002da5c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d72c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd28fc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 d7 02 c0       	mov    eax,0xc002d734
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c da 02 c0       	cmp    eax,0xc002da2c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 da 02 c0       	mov    eax,ds:0xc002da68
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da50
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da64
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 da 02 c0    	mov    esi,DWORD PTR ds:0xc002da74
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 92 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6dfc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 d7 02 c0       	mov    eax,ds:0xc002d700
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 da 02 c0    	mov    DWORD PTR ds:0xc002da44,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 da 02 c0    	mov    DWORD PTR ds:0xc002da48,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c da 02 c0    	mov    DWORD PTR ds:0xc002da4c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002da54,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee40]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 80 ec 01 00       	jmp    c0020872 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee40]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 b1 ec 01 00       	jmp    c00208b9 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 11 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcee40]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 d9 ec 01 00       	jmp    c0020900 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ca 48 02 00       	call   c00267d4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ce0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ce0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 92 02 c0       	mov    edx,0xc0029220
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 93 02 c0       	mov    edx,0xc0029340
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba d4 bf 02 c0       	mov    edx,0xc002bfd4
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 93 02 c0       	mov    edx,0xc0029330
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 da 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2560]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 da 02 c0    	mov    ax,ds:0xc002da80
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 da 02 c0    	mov    ds:0xc002da80,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 c7 36 02 00       	call   c00267d4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 93 02 c0       	mov    eax,0xc0029352
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d60]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 93 02 c0       	mov    eax,0xc002935b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ce0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 92 20 02 00       	call   c00267d4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 93 02 c0       	mov    edx,0xc0029330
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 92 02 c0       	mov    edx,0xc0029220
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 da 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2560]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 da 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2560],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 59 0a 02 00       	call   c00267d4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 3f 0a 02 00       	call   c00267d4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 92 02 c0       	mov    eax,0xc0029277
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 92 02 c0       	mov    eax,0xc0029270
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2560]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 92 02 c0       	mov    esi,0xc0029260
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 82 f1 01 00       	call   c00267d4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 93 02 c0       	mov    edx,0xc0029340
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 92 02 c0       	mov    edx,0xc0029240
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 92 02 c0       	mov    edx,0xc0029250
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 93 02 c0       	mov    edx,0xc0029362
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 93 02 c0       	mov    edx,0xc002936e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 93 02 c0       	mov    edx,0xc0029382
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc00296a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc00296a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 94 02 c0       	mov    eax,0xc00294a0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 93 02 c0       	mov    eax,0xc00293e0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c60]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 d6 fa 01 00       	call   c00282a7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 99 fa 01 00       	call   c0028289 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 6d fa 01 00       	call   c00282a7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 20 f1 01 00       	call   c00279ac <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 a2 fb 01 00       	call   c0028440 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 e7 f9 01 00       	call   c00282a7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 29 f9 01 00       	call   c00282a7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 f6 f8 01 00       	call   c0028289 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 e3 f7 01 00       	call   c00282a7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 ab f7 01 00       	call   c0028289 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 b7 f5 01 00       	call   c00282a7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 7c f5 01 00       	call   c0028289 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6400]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 8c f2 01 00       	call   c002803b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 0a ec 01 00       	call   c00279d8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 c6 f4 01 00       	call   c00282ab <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 b4 f5 01 00       	call   c00283cf <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 9e eb 01 00       	call   c00279d8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 49 f4 01 00       	call   c00282a5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 2a f4 01 00       	call   c00282a9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 c0 f5 01 00       	call   c0028460 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 6a f1 01 00       	call   c002803b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 e8 ea 01 00       	call   c00279d8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 a4 f3 01 00       	call   c00282ab <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 92 f4 01 00       	call   c00283cf <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 7c ea 01 00       	call   c00279d8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 27 f3 01 00       	call   c00282a5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 07 f3 01 00       	call   c00282a9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 9c f4 01 00       	call   c0028460 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 42 f2 01 00       	call   c00282a7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 00 f2 01 00       	call   c0028289 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 e8 f1 01 00       	call   c00282a7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 5a ef 01 00       	call   c002803b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 5c e2 01 00       	call   c002735b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 bf e8 01 00       	call   c00279d8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 11 ef 01 00       	call   c002803b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 17 e2 01 00       	call   c002735b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 e6 ee 01 00       	call   c002803b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 36 f1 01 00       	call   c00282a5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 13 e8 01 00       	call   c00279ac <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 95 f2 01 00       	call   c0028440 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 bc f0 01 00       	call   c0028289 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 b7 e7 01 00       	call   c00279ac <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 35 ee 01 00       	call   c002803b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 b8 e7 01 00       	call   c00279d8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 0a ee 01 00       	call   c002803b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 71 ea 01 00       	call   c0027cbc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 f0 e0 01 00       	call   c002735b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 50 da 01 00       	call   c0026cf0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 27 f1 01 00       	call   c00283cf <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 10 e7 01 00       	call   c00279d8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 f7 f0 01 00       	call   c00283cf <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 69 e0 01 00       	call   c002735b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 a2 ef 01 00       	call   c00282ab <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 8a e9 01 00       	call   c0027cbc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 10 e0 01 00       	call   c002735b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 fe f0 01 00       	call   c0028460 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 d0 ec 01 00       	call   c002803b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 27 e6 01 00       	call   c00279ac <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 06 ef 01 00       	call   c00282a7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 9f df 01 00       	call   c002735b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 cb e5 01 00       	call   c00279ac <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 6d f0 01 00       	call   c0028460 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 1e ec 01 00       	call   c002803b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 9b e5 01 00       	call   c00279d8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 ee eb 01 00       	call   c002803b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 f4 de 01 00       	call   c002735b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 c4 eb 01 00       	call   c002803b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 16 ee 01 00       	call   c00282a7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 ed e4 01 00       	call   c00279ac <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 6f ef 01 00       	call   c0028440 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 96 ed 01 00       	call   c0028289 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 90 e4 01 00       	call   c00279ac <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 0e eb 01 00       	call   c002803b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 91 e4 01 00       	call   c00279d8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 e3 ea 01 00       	call   c002803b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 4a e7 01 00       	call   c0027cbc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 c9 dd 01 00       	call   c002735b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 19 d7 01 00       	call   c0026cf0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 f0 ed 01 00       	call   c00283cf <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 d9 e3 01 00       	call   c00279d8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 c0 ed 01 00       	call   c00283cf <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 32 dd 01 00       	call   c002735b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 6b ec 01 00       	call   c00282ab <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 52 e6 01 00       	call   c0027cbc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 d1 dc 01 00       	call   c002735b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 bf ed 01 00       	call   c0028460 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 91 e9 01 00       	call   c002803b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 e8 e2 01 00       	call   c00279ac <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 c7 eb 01 00       	call   c00282a7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 60 dc 01 00       	call   c002735b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 8c e2 01 00       	call   c00279ac <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 01 e9 01 00       	call   c002803b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 07 dc 01 00       	call   c002735b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 9c 02 c0       	mov    eax,0xc0029c60
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 9c 02 c0       	mov    eax,0xc0029c74
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 7c e7 01 00       	call   c002803b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 fa e0 01 00       	call   c00279d8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 8c d3 01 00       	call   c0026cf0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 63 ea 01 00       	call   c00283cf <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 4c e0 01 00       	call   c00279d8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 2f ea 01 00       	call   c00283cf <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 a1 d9 01 00       	call   c002735b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 01 ea 01 00       	call   c00283cf <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 f0 df 01 00       	call   c00279d8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 59 d9 01 00       	call   c002735b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 7a d2 01 00       	call   c0026cf0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 51 e9 01 00       	call   c00283cf <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 3a df 01 00       	call   c00279d8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 1d e9 01 00       	call   c00283cf <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 8f d8 01 00       	call   c002735b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 ef e8 01 00       	call   c00283cf <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 de de 01 00       	call   c00279d8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 47 d8 01 00       	call   c002735b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 25 d8 01 00       	call   c002735b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 01 d1 01 00       	call   c0026cf0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 d8 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 c1 dd 01 00       	call   c00279d8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 a4 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 16 d7 01 00       	call   c002735b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 76 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 5f dd 01 00       	call   c00279d8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 c8 d6 01 00       	call   c002735b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 28 e7 01 00       	call   c00283cf <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 11 dd 01 00       	call   c00279d8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 7a d6 01 00       	call   c002735b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 8f cf 01 00       	call   c0026cf0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 66 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 4f dc 01 00       	call   c00279d8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 36 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 a8 d5 01 00       	call   c002735b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 08 e6 01 00       	call   c00283cf <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 f1 db 01 00       	call   c00279d8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 5a d5 01 00       	call   c002735b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 ba e5 01 00       	call   c00283cf <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 a3 db 01 00       	call   c00279d8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 0c d5 01 00       	call   c002735b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 e0 d4 01 00       	call   c002735b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 3d db 01 00       	call   c00279d8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 f9 e3 01 00       	call   c00282ab <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 88 d4 01 00       	call   c002735b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 e5 da 01 00       	call   c00279d8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 a1 e3 01 00       	call   c00282ab <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 1b cd 01 00       	call   c0026cf0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 f2 e3 01 00       	call   c00283cf <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 db d9 01 00       	call   c00279d8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 be e3 01 00       	call   c00283cf <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 30 d3 01 00       	call   c002735b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 90 e3 01 00       	call   c00283cf <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 79 d9 01 00       	call   c00279d8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 e2 d2 01 00       	call   c002735b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 42 e3 01 00       	call   c00283cf <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 2b d9 01 00       	call   c00279d8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 94 d2 01 00       	call   c002735b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 f4 e2 01 00       	call   c00283cf <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 dd d8 01 00       	call   c00279d8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 46 d2 01 00       	call   c002735b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 a6 e2 01 00       	call   c00283cf <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 8f d8 01 00       	call   c00279d8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 f8 d1 01 00       	call   c002735b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 fa ca 01 00       	call   c0026cf0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 d1 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 ba d7 01 00       	call   c00279d8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 a1 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 13 d1 01 00       	call   c002735b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 73 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 5c d7 01 00       	call   c00279d8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 c5 d0 01 00       	call   c002735b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 25 e1 01 00       	call   c00283cf <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 0e d7 01 00       	call   c00279d8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 77 d0 01 00       	call   c002735b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 d7 e0 01 00       	call   c00283cf <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 c0 d6 01 00       	call   c00279d8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 29 d0 01 00       	call   c002735b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 89 e0 01 00       	call   c00283cf <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 72 d6 01 00       	call   c00279d8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 db cf 01 00       	call   c002735b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 af cf 01 00       	call   c002735b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 0c d6 01 00       	call   c00279d8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 c8 de 01 00       	call   c00282ab <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 57 cf 01 00       	call   c002735b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 b4 d5 01 00       	call   c00279d8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 70 de 01 00       	call   c00282ab <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 fe ce 01 00       	call   c002735b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 5b d5 01 00       	call   c00279d8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 17 de 01 00       	call   c00282ab <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 a5 ce 01 00       	call   c002735b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 02 d5 01 00       	call   c00279d8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 be dd 01 00       	call   c00282ab <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 1c c7 01 00       	call   c0026cf0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 f3 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 dc d3 01 00       	call   c00279d8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 bf dd 01 00       	call   c00283cf <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 31 cd 01 00       	call   c002735b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 91 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 7a d3 01 00       	call   c00279d8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 e3 cc 01 00       	call   c002735b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 43 dd 01 00       	call   c00283cf <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 2c d3 01 00       	call   c00279d8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 95 cc 01 00       	call   c002735b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 f5 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 de d2 01 00       	call   c00279d8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 47 cc 01 00       	call   c002735b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 a7 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 90 d2 01 00       	call   c00279d8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 f9 cb 01 00       	call   c002735b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 59 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 42 d2 01 00       	call   c00279d8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 a8 cb 01 00       	call   c002735b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 08 dc 01 00       	call   c00283cf <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 f1 d1 01 00       	call   c00279d8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 5a cb 01 00       	call   c002735b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 54 c4 01 00       	call   c0026cf0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 2b db 01 00       	call   c00283cf <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 14 d1 01 00       	call   c00279d8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 f4 da 01 00       	call   c00283cf <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 66 ca 01 00       	call   c002735b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 c6 da 01 00       	call   c00283cf <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 af d0 01 00       	call   c00279d8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 18 ca 01 00       	call   c002735b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 78 da 01 00       	call   c00283cf <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 61 d0 01 00       	call   c00279d8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ca c9 01 00       	call   c002735b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 2a da 01 00       	call   c00283cf <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 13 d0 01 00       	call   c00279d8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 7c c9 01 00       	call   c002735b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 dc d9 01 00       	call   c00283cf <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 c5 cf 01 00       	call   c00279d8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 2e c9 01 00       	call   c002735b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 8e d9 01 00       	call   c00283cf <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 77 cf 01 00       	call   c00279d8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 dd c8 01 00       	call   c002735b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 3d d9 01 00       	call   c00283cf <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 26 cf 01 00       	call   c00279d8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 95 c8 01 00       	call   c002735b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 6e c8 01 00       	call   c002735b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 cc ce 01 00       	call   c00279d8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 88 d7 01 00       	call   c00282ab <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 17 c8 01 00       	call   c002735b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 75 ce 01 00       	call   c00279d8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 31 d7 01 00       	call   c00282ab <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 bf c7 01 00       	call   c002735b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 1d ce 01 00       	call   c00279d8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 d9 d6 01 00       	call   c00282ab <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 67 c7 01 00       	call   c002735b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 c5 cd 01 00       	call   c00279d8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 81 d6 01 00       	call   c00282ab <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 0f c7 01 00       	call   c002735b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 6d cd 01 00       	call   c00279d8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 29 d6 01 00       	call   c00282ab <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 bd c6 01 00       	call   c002735b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 1b cd 01 00       	call   c00279d8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 d7 d5 01 00       	call   c00282ab <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 eb be 01 00       	call   c0026cf0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 c2 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 ab cb 01 00       	call   c00279d8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 92 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 04 c5 01 00       	call   c002735b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd635c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 38 d5 01 00       	call   c00283cf <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 21 cb 01 00       	call   c00279d8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 8c c4 01 00       	call   c002735b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 d9 d4 01 00       	call   c00283cf <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 c2 ca 01 00       	call   c00279d8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 2d c4 01 00       	call   c002735b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 7a d4 01 00       	call   c00283cf <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 63 ca 01 00       	call   c00279d8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ce c3 01 00       	call   c002735b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 1b d4 01 00       	call   c00283cf <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 04 ca 01 00       	call   c00279d8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 6f c3 01 00       	call   c002735b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 bc d3 01 00       	call   c00283cf <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 a5 c9 01 00       	call   c00279d8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 10 c3 01 00       	call   c002735b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 5d d3 01 00       	call   c00283cf <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 46 c9 01 00       	call   c00279d8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 b1 c2 01 00       	call   c002735b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 fe d2 01 00       	call   c00283cf <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 e7 c8 01 00       	call   c00279d8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 52 c2 01 00       	call   c002735b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 9f d2 01 00       	call   c00283cf <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 88 c8 01 00       	call   c00279d8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 f3 c1 01 00       	call   c002735b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 fd ba 01 00       	call   c0026cf0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 d4 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 bd c7 01 00       	call   c00279d8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 a4 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 16 c1 01 00       	call   c002735b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6340]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 49 d1 01 00       	call   c00283cf <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 32 c7 01 00       	call   c00279d8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 9d c0 01 00       	call   c002735b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 e9 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 d2 c6 01 00       	call   c00279d8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 3d c0 01 00       	call   c002735b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 89 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 72 c6 01 00       	call   c00279d8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 dd bf 01 00       	call   c002735b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 29 d0 01 00       	call   c00283cf <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 12 c6 01 00       	call   c00279d8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 7d bf 01 00       	call   c002735b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 c9 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 b2 c5 01 00       	call   c00279d8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 1d bf 01 00       	call   c002735b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 69 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 52 c5 01 00       	call   c00279d8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 bd be 01 00       	call   c002735b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 09 cf 01 00       	call   c00283cf <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 f2 c4 01 00       	call   c00279d8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 5d be 01 00       	call   c002735b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 a9 ce 01 00       	call   c00283cf <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 92 c4 01 00       	call   c00279d8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 fd bd 01 00       	call   c002735b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6324]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 a2 bd 01 00       	call   c002735b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 ff c3 01 00       	call   c00279d8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 bb cc 01 00       	call   c00282ab <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 45 bd 01 00       	call   c002735b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 a2 c3 01 00       	call   c00279d8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 5e cc 01 00       	call   c00282ab <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 e8 bc 01 00       	call   c002735b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 45 c3 01 00       	call   c00279d8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 01 cc 01 00       	call   c00282ab <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 8b bc 01 00       	call   c002735b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 e8 c2 01 00       	call   c00279d8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 a4 cb 01 00       	call   c00282ab <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 2e bc 01 00       	call   c002735b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 8b c2 01 00       	call   c00279d8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 47 cb 01 00       	call   c00282ab <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 d1 bb 01 00       	call   c002735b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 2e c2 01 00       	call   c00279d8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ea ca 01 00       	call   c00282ab <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 74 bb 01 00       	call   c002735b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 d1 c1 01 00       	call   c00279d8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 8d ca 01 00       	call   c00282ab <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 17 bb 01 00       	call   c002735b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 74 c1 01 00       	call   c00279d8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 30 ca 01 00       	call   c00282ab <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 2c c1 01 00       	call   c00279d8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 a4 cb 01 00       	jmp    c0028460 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 0e c8 01 00       	call   c00282a7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 cc c7 01 00       	call   c0028289 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 63 c5 01 00       	call   c002803b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 64 b8 01 00       	call   c002735b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 33 c5 01 00       	call   c002803b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 9a c1 01 00       	call   c0027cbc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 39 c7 01 00       	call   c0028289 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 3c c7 01 00       	call   c00282a7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 0f c7 01 00       	call   c00282a7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 08 c1 01 00       	call   c0027cbc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 92 c8 01 00       	call   c0028460 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 6d c8 01 00       	call   c0028460 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 3f c4 01 00       	call   c002803b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 96 bd 01 00       	call   c00279ac <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 75 c6 01 00       	call   c00282a7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 0e b7 01 00       	call   c002735b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 32 bd 01 00       	call   c00279ac <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 d4 c7 01 00       	call   c0028460 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 0c c0 01 00       	call   c0027cbc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 89 b6 01 00       	call   c002735b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 b5 c2 01 00       	call   c002803b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 b5 b5 01 00       	call   c002735b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 95 b5 01 00       	call   c002735b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 65 c2 01 00       	call   c002803b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 b5 c4 01 00       	call   c00282a5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 94 bb 01 00       	call   c00279ac <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 16 c6 01 00       	call   c0028440 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 3d c4 01 00       	call   c0028289 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 3b bb 01 00       	call   c00279ac <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 b9 c1 01 00       	call   c002803b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 3c bb 01 00       	call   c00279d8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 8e c1 01 00       	call   c002803b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 f5 bd 01 00       	call   c0027cbc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 74 b4 01 00       	call   c002735b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 3e c1 01 00       	call   c002803b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 8a c3 01 00       	call   c00282a7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 7f ba 01 00       	call   c00279d8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 51 ba 01 00       	call   c00279d8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 8a c0 01 00       	call   c002803b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 ee bc 01 00       	call   c0027cbc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 b6 bc 01 00       	call   c0027cbc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 35 b3 01 00       	call   c002735b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 22 c4 01 00       	call   c0028460 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 f4 bf 01 00       	call   c002803b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 4b b9 01 00       	call   c00279ac <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 2a c2 01 00       	call   c00282a7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 c2 b2 01 00       	call   c002735b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 e6 b8 01 00       	call   c00279ac <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 88 c3 01 00       	call   c0028460 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 49 c1 01 00       	call   c00282a7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 07 c1 01 00       	call   c0028289 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 9e be 01 00       	call   c002803b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 9f b1 01 00       	call   c002735b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 6e be 01 00       	call   c002803b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 d5 ba 01 00       	call   c0027cbc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 74 c0 01 00       	call   c0028289 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 77 c0 01 00       	call   c00282a7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 4a c0 01 00       	call   c00282a7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 43 ba 01 00       	call   c0027cbc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 cd c1 01 00       	call   c0028460 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 a8 c1 01 00       	call   c0028460 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 7a bd 01 00       	call   c002803b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 d1 b6 01 00       	call   c00279ac <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 b0 bf 01 00       	call   c00282a7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 49 b0 01 00       	call   c002735b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 6d b6 01 00       	call   c00279ac <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 0f c1 01 00       	call   c0028460 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 47 b9 01 00       	call   c0027cbc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 c4 af 01 00       	call   c002735b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 ef bb 01 00       	call   c002803b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 ef ae 01 00       	call   c002735b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 cf ae 01 00       	call   c002735b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 9f bb 01 00       	call   c002803b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 ef bd 01 00       	call   c00282a5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 cd b4 01 00       	call   c00279ac <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 4f bf 01 00       	call   c0028440 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 76 bd 01 00       	call   c0028289 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 73 b4 01 00       	call   c00279ac <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 f1 ba 01 00       	call   c002803b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 74 b4 01 00       	call   c00279d8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 c6 ba 01 00       	call   c002803b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 2d b7 01 00       	call   c0027cbc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 ac ad 01 00       	call   c002735b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 76 ba 01 00       	call   c002803b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 c2 bc 01 00       	call   c00282a7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 b7 b3 01 00       	call   c00279d8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 89 b3 01 00       	call   c00279d8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 c0 b9 01 00       	call   c002803b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 24 b6 01 00       	call   c0027cbc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 f1 b5 01 00       	call   c0027cbc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 70 ac 01 00       	call   c002735b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 5d bd 01 00       	call   c0028460 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 2f b9 01 00       	call   c002803b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 86 b2 01 00       	call   c00279ac <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 65 bb 01 00       	call   c00282a7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 fd ab 01 00       	call   c002735b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 21 b2 01 00       	call   c00279ac <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 c3 bc 01 00       	call   c0028460 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 84 ba 01 00       	call   c00282a7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 42 ba 01 00       	call   c0028289 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 d9 b7 01 00       	call   c002803b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 da aa 01 00       	call   c002735b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 a9 b7 01 00       	call   c002803b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 10 b4 01 00       	call   c0027cbc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 af b9 01 00       	call   c0028289 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 b2 b9 01 00       	call   c00282a7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 85 b9 01 00       	call   c00282a7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 7e b3 01 00       	call   c0027cbc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 08 bb 01 00       	call   c0028460 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 e3 ba 01 00       	call   c0028460 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 b5 b6 01 00       	call   c002803b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 0c b0 01 00       	call   c00279ac <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 eb b8 01 00       	call   c00282a7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 84 a9 01 00       	call   c002735b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 a8 af 01 00       	call   c00279ac <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 4a ba 01 00       	call   c0028460 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 82 b2 01 00       	call   c0027cbc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 ff a8 01 00       	call   c002735b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 2a b5 01 00       	call   c002803b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 2a a8 01 00       	call   c002735b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 0a a8 01 00       	call   c002735b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 da b4 01 00       	call   c002803b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 2a b7 01 00       	call   c00282a5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 08 ae 01 00       	call   c00279ac <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 8a b8 01 00       	call   c0028440 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 b1 b6 01 00       	call   c0028289 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ae ad 01 00       	call   c00279ac <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 2c b4 01 00       	call   c002803b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 af ad 01 00       	call   c00279d8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 01 b4 01 00       	call   c002803b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 68 b0 01 00       	call   c0027cbc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 e7 a6 01 00       	call   c002735b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 b1 b3 01 00       	call   c002803b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 fd b5 01 00       	call   c00282a7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 f2 ac 01 00       	call   c00279d8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 c4 ac 01 00       	call   c00279d8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 fb b2 01 00       	call   c002803b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 5f af 01 00       	call   c0027cbc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 2c af 01 00       	call   c0027cbc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 ab a5 01 00       	call   c002735b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 98 b6 01 00       	call   c0028460 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 6a b2 01 00       	call   c002803b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 c1 ab 01 00       	call   c00279ac <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 a0 b4 01 00       	call   c00282a7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 38 a5 01 00       	call   c002735b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 5c ab 01 00       	call   c00279ac <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 fe b5 01 00       	call   c0028460 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 bf b3 01 00       	call   c00282a7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 7d b3 01 00       	call   c0028289 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 14 b1 01 00       	call   c002803b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 15 a4 01 00       	call   c002735b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 e4 b0 01 00       	call   c002803b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 4b ad 01 00       	call   c0027cbc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ea b2 01 00       	call   c0028289 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 ed b2 01 00       	call   c00282a7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 c0 b2 01 00       	call   c00282a7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 b9 ac 01 00       	call   c0027cbc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 43 b4 01 00       	call   c0028460 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 1e b4 01 00       	call   c0028460 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 f0 af 01 00       	call   c002803b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 47 a9 01 00       	call   c00279ac <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 26 b2 01 00       	call   c00282a7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 bf a2 01 00       	call   c002735b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 e3 a8 01 00       	call   c00279ac <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 85 b3 01 00       	call   c0028460 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 bd ab 01 00       	call   c0027cbc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 3a a2 01 00       	call   c002735b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 65 ae 01 00       	call   c002803b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 65 a1 01 00       	call   c002735b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 45 a1 01 00       	call   c002735b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 15 ae 01 00       	call   c002803b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 65 b0 01 00       	call   c00282a5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 43 a7 01 00       	call   c00279ac <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 c5 b1 01 00       	call   c0028440 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 ec af 01 00       	call   c0028289 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 e9 a6 01 00       	call   c00279ac <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 67 ad 01 00       	call   c002803b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ea a6 01 00       	call   c00279d8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 3c ad 01 00       	call   c002803b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 a3 a9 01 00       	call   c0027cbc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 22 a0 01 00       	call   c002735b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 ec ac 01 00       	call   c002803b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 38 af 01 00       	call   c00282a7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 2d a6 01 00       	call   c00279d8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 ff a5 01 00       	call   c00279d8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 36 ac 01 00       	call   c002803b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 9a a8 01 00       	call   c0027cbc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 67 a8 01 00       	call   c0027cbc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 e6 9e 01 00       	call   c002735b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 d3 af 01 00       	call   c0028460 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 a5 ab 01 00       	call   c002803b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 fc a4 01 00       	call   c00279ac <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 db ad 01 00       	call   c00282a7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 73 9e 01 00       	call   c002735b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 97 a4 01 00       	call   c00279ac <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 39 af 01 00       	call   c0028460 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 f7 ac 01 00       	call   c00282a7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 b5 ac 01 00       	call   c0028289 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 4c aa 01 00       	call   c002803b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 4d 9d 01 00       	call   c002735b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 1c aa 01 00       	call   c002803b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 83 a6 01 00       	call   c0027cbc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 22 ac 01 00       	call   c0028289 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 25 ac 01 00       	call   c00282a7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 f8 ab 01 00       	call   c00282a7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 f1 a5 01 00       	call   c0027cbc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 7b ad 01 00       	call   c0028460 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 52 ad 01 00       	call   c0028460 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 24 a9 01 00       	call   c002803b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 7b a2 01 00       	call   c00279ac <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 5a ab 01 00       	call   c00282a7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 f3 9b 01 00       	call   c002735b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 1b a2 01 00       	call   c00279ac <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 bd ac 01 00       	call   c0028460 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 f6 a4 01 00       	call   c0027cbc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 73 9b 01 00       	call   c002735b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 9f a7 01 00       	call   c002803b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 9f 9a 01 00       	call   c002735b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 7f 9a 01 00       	call   c002735b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 4f a7 01 00       	call   c002803b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 83 a9 01 00       	call   c0028289 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 7a a0 01 00       	call   c00279ac <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 fc aa 01 00       	call   c0028440 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 23 a9 01 00       	call   c0028289 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 1d a0 01 00       	call   c00279ac <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 9b a6 01 00       	call   c002803b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 1e a0 01 00       	call   c00279d8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 70 a6 01 00       	call   c002803b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 d7 a2 01 00       	call   c0027cbc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 56 99 01 00       	call   c002735b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 20 a6 01 00       	call   c002803b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 6c a8 01 00       	call   c00282a7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 61 9f 01 00       	call   c00279d8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 33 9f 01 00       	call   c00279d8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 77 a5 01 00       	call   c002803b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 de a1 01 00       	call   c0027cbc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 c7 9e 01 00       	call   c00279d8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 83 a7 01 00       	call   c00282ab <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 76 a1 01 00       	call   c0027cbc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 f5 97 01 00       	call   c002735b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 e2 a8 01 00       	call   c0028460 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 b4 a4 01 00       	call   c002803b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 0b 9e 01 00       	call   c00279ac <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ea a6 01 00       	call   c00282a7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 82 97 01 00       	call   c002735b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 aa 9d 01 00       	call   c00279ac <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 4c a8 01 00       	call   c0028460 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd62fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6308]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 ff a4 01 00       	call   c00282a7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 bd a4 01 00       	call   c0028289 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 a9 a4 01 00       	call   c00282a7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 1b a2 01 00       	call   c002803b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 99 9b 01 00       	call   c00279d8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 eb a1 01 00       	call   c002803b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 f1 94 01 00       	call   c002735b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 c0 a1 01 00       	call   c002803b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 10 a4 01 00       	call   c00282a5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 f1 9a 01 00       	call   c00279ac <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 73 a5 01 00       	call   c0028440 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 9a a3 01 00       	call   c0028289 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 99 9a 01 00       	call   c00279ac <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 17 a1 01 00       	call   c002803b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 9a 9a 01 00       	call   c00279d8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 ec a0 01 00       	call   c002803b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 53 9d 01 00       	call   c0027cbc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 d2 93 01 00       	call   c002735b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 fa 9c 01 00       	call   c0027cbc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 80 93 01 00       	call   c002735b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 6e a4 01 00       	call   c0028460 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 40 a0 01 00       	call   c002803b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 97 99 01 00       	call   c00279ac <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 76 a2 01 00       	call   c00282a7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 0f 93 01 00       	call   c002735b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 3b 99 01 00       	call   c00279ac <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 dd a3 01 00       	call   c0028460 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 8a 9f 01 00       	call   c002803b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 07 99 01 00       	call   c00279d8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 58 9f 01 00       	call   c002803b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 5e 92 01 00       	call   c002735b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 2e 9f 01 00       	call   c002803b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 82 a1 01 00       	call   c00282a9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 5b 98 01 00       	call   c00279ac <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 dd a2 01 00       	call   c0028440 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 04 a1 01 00       	call   c0028289 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 02 98 01 00       	call   c00279ac <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 80 9e 01 00       	call   c002803b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 03 98 01 00       	call   c00279d8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 55 9e 01 00       	call   c002803b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 bc 9a 01 00       	call   c0027cbc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 3b 91 01 00       	call   c002735b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 57 9a 01 00       	call   c0027cbc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 d6 90 01 00       	call   c002735b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 c4 a1 01 00       	call   c0028460 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 96 9d 01 00       	call   c002803b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 ed 96 01 00       	call   c00279ac <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 cc 9f 01 00       	call   c00282a7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 65 90 01 00       	call   c002735b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 91 96 01 00       	call   c00279ac <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 02 9d 01 00       	call   c002803b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 08 90 01 00       	call   c002735b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e 9e 02 c0       	mov    eax,0xc0029e1e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f 9e 02 c0       	mov    eax,0xc0029e2f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000e4e3:	ff 05 24 10 03 c0    	inc    DWORD PTR ds:0xc0031024
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 10 03 c0 00 	cmp    DWORD PTR ds:0xc0031020,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c000e50d:	e8 7f f5 00 00       	call   c001da91 <schedule()>
c000e512:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000e517:	48                   	dec    eax
c000e518:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 9e 02 c0       	push   0xc0029e66
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 db 02 c0       	mov    eax,0xc002db08
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 d4 67 02 c0       	mov    eax,0xc00267d4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 9e 02 c0       	push   0xc0029e79
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 08 65 02 c0       	mov    eax,0xc0026508
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 9e 02 c0       	push   0xc0029e82
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 d4 68 02 c0       	mov    eax,0xc00268d4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c 9e 02 c0       	push   0xc0029e8c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 54 66 02 c0       	mov    eax,0xc0026654
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 9e 02 c0       	push   0xc0029e95
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c db 02 c0       	mov    eax,0xc002db0c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 9e 02 c0       	push   0xc0029ea2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d db 02 c0       	mov    eax,0xc002db0d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 e9 56 00 00       	call   c0013d56 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 af 9e 02 c0       	push   0xc0029eaf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c000e6be:	68 c8 9e 02 c0       	push   0xc0029ec8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 a9 ef 00 00       	call   c001d674 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 8c f1 00 00       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 50 e2 01 c0       	push   0xc001e250
c000e6e9:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c000e6ef:	e8 78 f1 00 00       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 08 10 03 c0       	mov    ds:0xc0031008,eax
c000e6fc:	68 ac 9f 02 c0       	push   0xc0029fac
c000e701:	c6 05 0d db 02 c0 01 	mov    BYTE PTR ds:0xc002db0d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 e9 fe 00 00       	call   c001e5fb <Vm::initialise8086()>
c000e712:	e8 07 44 00 00       	call   c0012b1e <Fs::initVFS()>
c000e717:	c7 04 24 d5 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ed5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 ac 9f 02 c0       	push   0xc0029fac
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 b0 d7 00 00       	call   c001befc <Sys::loadSyscalls()>
c000e74c:	e8 a5 b6 00 00       	call   c0019df6 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 ef 9e 02 c0       	push   0xc0029eef
c000e75b:	68 f8 9e 02 c0       	push   0xc0029ef8
c000e760:	e8 56 c5 00 00       	call   c001acbb <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 a1 4e 00 00       	call   c001360e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 d0 9f 02 c0 	mov    DWORD PTR [esp],0xc0029fd0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 8c 55 00 00       	call   c0013d16 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 00 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f00
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 c3 b1 00 00       	call   c001995e <Krnl::startCPUs()>
c000e79b:	c7 04 24 1a 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f1a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 2b 9f 02 c0       	push   0xc0029f2b
c000e7b6:	e8 11 e9 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 39 eb 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 96 f4 00 00       	call   c001dc67 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 47 9f 02 c0       	push   0xc0029f47
c000e7e5:	50                   	push   eax
c000e7e6:	e8 e5 55 00 00       	call   c0013dd0 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 1c a0 02 c0       	mov    edx,0xc002a01c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 21 db 02 c0 04 	test   BYTE PTR ds:0xc002db21,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 17 7b 01 00       	call   c0026496 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 36 9f 00 00       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 0f 9f 00 00       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 ed 9e 00 00       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 cb 9e 00 00       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 20 db 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002db20,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 d9 9d 00 00       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 b4 9d 00 00       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 81 79 01 00       	call   c0026450 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 3e 79 01 00       	call   c0026430 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 d0 9d 00 00       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 50 9f 02 c0       	push   0xc0029f50
c000eb62:	e8 98 b3 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 56 9f 02 c0       	push   0xc0029f56
c000eb9a:	e8 60 b3 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 f0 9f 02 c0       	push   0xc0029ff0
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 20 db 02 c0 04 	test   BYTE PTR ds:0xc002db20,0x4
c000ec03:	0f 94 05 40 ca 02 c0 	sete   BYTE PTR ds:0xc002ca40
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 4b 8f 00 00       	call   c0017b64 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 a4 4f 00 00       	call   c0013bcc <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 00 9f 02 c0 	mov    DWORD PTR [esp],0xc0029f00
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 4c 9d 00 00       	call   c00189a8 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 61 4f 00 00       	call   c0013bcc <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 dd 54 00 00       	call   c0014164 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 31 4f 00 00       	call   c0013bcc <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 5c 9f 02 c0       	push   0xc0029f5c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 c5 ec 00 00       	call   c001d98e <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 77 9f 02 c0       	push   0xc0029f77
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 7c 3a 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 88 9f 02 c0       	push   0xc0029f88
c000ed34:	e8 c6 b1 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 95 9f 02 c0       	push   0xc0029f95
c000ed49:	e8 b1 b1 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 9f 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029f9f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 9a b1 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 12 db 02 c0       	mov    ds:0xc002db12,eax
c000ee21:	66 89 15 10 db 02 c0 	mov    WORD PTR ds:0xc002db10,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000ef38:	48                   	dec    eax
c000ef39:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 51 95 01 00       	call   c00284e0 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 48 95 01 00       	call   c00284e0 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 18 db 02 c0 ff 07 	mov    WORD PTR ds:0xc002db18,0x7ff
c000f085:	a3 1a db 02 c0       	mov    ds:0xc002db1a,eax
c000f08a:	0f 01 1d 18 db 02 c0 	lidtd  ds:0xc002db18
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c000f37c:	e8 f3 27 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 c7 17 00 00       	call   c0010b66 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 f8 17 00 00       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d dc c8 02 c0    	mov    ecx,DWORD PTR ds:0xc002c8dc
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 dc c8 02 c0       	mov    eax,ds:0xc002c8dc
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 40 a0 02 c0       	push   0xc002a040
c000f455:	e8 39 33 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 dc c8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c8dc,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c000f481:	8b 2d dc c8 02 c0    	mov    ebp,DWORD PTR ds:0xc002c8dc
c000f487:	e8 09 05 00 00       	call   c000f995 <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 d9 25 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d dc c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8dc
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 70 a0 02 c0       	push   0xc002a070
c000f50d:	e8 ed a9 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 75 a0 02 c0       	push   0xc002a075
c000f523:	e8 d7 a9 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000f543:	48                   	dec    eax
c000f544:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c000f561:	e8 0e 26 00 00       	call   c0011b74 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c000f577:	e8 a2 22 00 00       	call   c001181e <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 7c a0 02 c0       	push   0xc002a07c
c000f6a4:	e8 ea 30 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 b8 09 00 00       	call   c0010066 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 e0 c8 02 c0 	movzx  eax,BYTE PTR ds:0xc002c8e0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 e0 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3720]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 16 c9 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd36ea],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 15 c9 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd36eb]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 e0 c8 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3720]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 94 a0 02 c0       	push   0xc002a094
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 20 db 02 c0       	mov    ds:0xc002db20,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 cb 03 00 00       	call   c000fb21 <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 83 1c 00 00       	call   c00113de <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 e0 1e 00 00       	call   c0011646 <VAS::VAS()>
c000f766:	89 1d 70 dc 02 c0    	mov    DWORD PTR ds:0xc002dc70,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 08 db 02 c0    	mov    DWORD PTR ds:0xc002db08,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 54 21 00 00       	call   c00118f6 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 ed                	xor    ebp,ebp
c000f7ac:	57                   	push   edi
c000f7ad:	56                   	push   esi
c000f7ae:	53                   	push   ebx
c000f7af:	31 db                	xor    ebx,ebx
c000f7b1:	83 ec 18             	sub    esp,0x18
c000f7b4:	68 b3 a0 02 c0       	push   0xc002a0b3
c000f7b9:	e8 d5 2f 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f7be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f7c2:	31 d2                	xor    edx,edx
c000f7c4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	c1 ee 0c             	shr    esi,0xc
c000f7d0:	31 c9                	xor    ecx,ecx
c000f7d2:	eb 17                	jmp    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7d4:	85 c9                	test   ecx,ecx
c000f7d6:	75 04                	jne    c000f7dc <Phys::allocateDMA(unsigned long)+0x33>
c000f7d8:	89 d5                	mov    ebp,edx
c000f7da:	89 d3                	mov    ebx,edx
c000f7dc:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7df:	39 c6                	cmp    esi,eax
c000f7e1:	74 23                	je     c000f806 <Phys::allocateDMA(unsigned long)+0x5d>
c000f7e3:	42                   	inc    edx
c000f7e4:	89 c1                	mov    ecx,eax
c000f7e6:	83 fa 2f             	cmp    edx,0x2f
c000f7e9:	7f 11                	jg     c000f7fc <Phys::allocateDMA(unsigned long)+0x53>
c000f7eb:	80 ba 60 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd24a0],0x0
c000f7f2:	74 e0                	je     c000f7d4 <Phys::allocateDMA(unsigned long)+0x2b>
c000f7f4:	31 c9                	xor    ecx,ecx
c000f7f6:	42                   	inc    edx
c000f7f7:	83 fa 2f             	cmp    edx,0x2f
c000f7fa:	7e ef                	jle    c000f7eb <Phys::allocateDMA(unsigned long)+0x42>
c000f7fc:	83 c4 0c             	add    esp,0xc
c000f7ff:	31 c0                	xor    eax,eax
c000f801:	5b                   	pop    ebx
c000f802:	5e                   	pop    esi
c000f803:	5f                   	pop    edi
c000f804:	5d                   	pop    ebp
c000f805:	c3                   	ret    
c000f806:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f809:	89 d7                	mov    edi,edx
c000f80b:	4f                   	dec    edi
c000f80c:	79 03                	jns    c000f811 <Phys::allocateDMA(unsigned long)+0x68>
c000f80e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f811:	c1 ff 04             	sar    edi,0x4
c000f814:	89 da                	mov    edx,ebx
c000f816:	c1 fa 04             	sar    edx,0x4
c000f819:	39 fa                	cmp    edx,edi
c000f81b:	75 43                	jne    c000f860 <Phys::allocateDMA(unsigned long)+0xb7>
c000f81d:	85 c0                	test   eax,eax
c000f81f:	74 1a                	je     c000f83b <Phys::allocateDMA(unsigned long)+0x92>
c000f821:	be 60 db 02 c0       	mov    esi,0xc002db60
c000f826:	8d 93 60 db 02 c0    	lea    edx,[ebx-0x3ffd24a0]
c000f82c:	f7 d6                	not    esi
c000f82e:	29 de                	sub    esi,ebx
c000f830:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f833:	42                   	inc    edx
c000f834:	8d 04 16             	lea    eax,[esi+edx*1]
c000f837:	39 c1                	cmp    ecx,eax
c000f839:	7f f5                	jg     c000f830 <Phys::allocateDMA(unsigned long)+0x87>
c000f83b:	83 ec 0c             	sub    esp,0xc
c000f83e:	68 cc a0 02 c0       	push   0xc002a0cc
c000f843:	e8 4b 2f 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f848:	83 c4 10             	add    esp,0x10
c000f84b:	85 ff                	test   edi,edi
c000f84d:	74 17                	je     c000f866 <Phys::allocateDMA(unsigned long)+0xbd>
c000f84f:	83 c4 0c             	add    esp,0xc
c000f852:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f858:	5b                   	pop    ebx
c000f859:	c1 e0 0c             	shl    eax,0xc
c000f85c:	5e                   	pop    esi
c000f85d:	5f                   	pop    edi
c000f85e:	5d                   	pop    ebp
c000f85f:	c3                   	ret    
c000f860:	89 ea                	mov    edx,ebp
c000f862:	31 c9                	xor    ecx,ecx
c000f864:	eb 90                	jmp    c000f7f6 <Phys::allocateDMA(unsigned long)+0x4d>
c000f866:	83 c4 0c             	add    esp,0xc
c000f869:	c1 e3 0c             	shl    ebx,0xc
c000f86c:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f872:	5b                   	pop    ebx
c000f873:	5e                   	pop    esi
c000f874:	5f                   	pop    edi
c000f875:	5d                   	pop    ebp
c000f876:	c3                   	ret    

c000f877 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f877:	83 ec 18             	sub    esp,0x18
c000f87a:	68 e3 a0 02 c0       	push   0xc002a0e3
c000f87f:	e8 0f 2f 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f884:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f888:	83 c4 10             	add    esp,0x10
c000f88b:	8d 88 ff 0f 00 00    	lea    ecx,[eax+0xfff]
c000f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f895:	c1 e9 0c             	shr    ecx,0xc
c000f898:	81 7c 24 10 ff ff 05 c2 	cmp    DWORD PTR [esp+0x10],0xc205ffff
c000f8a0:	76 29                	jbe    c000f8cb <Phys::freeDMA(unsigned long, unsigned long)+0x54>
c000f8a2:	8d 90 00 00 fa 3d    	lea    edx,[eax+0x3dfa0000]
c000f8a8:	c1 ea 0c             	shr    edx,0xc
c000f8ab:	83 c2 10             	add    edx,0x10
c000f8ae:	85 c9                	test   ecx,ecx
c000f8b0:	74 15                	je     c000f8c7 <Phys::freeDMA(unsigned long, unsigned long)+0x50>
c000f8b2:	8d 82 60 db 02 c0    	lea    eax,[edx-0x3ffd24a0]
c000f8b8:	8d 94 11 60 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd24a0]
c000f8bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8c2:	40                   	inc    eax
c000f8c3:	39 d0                	cmp    eax,edx
c000f8c5:	75 f8                	jne    c000f8bf <Phys::freeDMA(unsigned long, unsigned long)+0x48>
c000f8c7:	83 c4 0c             	add    esp,0xc
c000f8ca:	c3                   	ret    
c000f8cb:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8d1:	c1 ea 0c             	shr    edx,0xc
c000f8d4:	eb d8                	jmp    c000f8ae <Phys::freeDMA(unsigned long, unsigned long)+0x37>

c000f8d6 <Phys::setPageState(unsigned long, bool)>:
c000f8d6:	56                   	push   esi
c000f8d7:	ba 01 00 00 00       	mov    edx,0x1
c000f8dc:	53                   	push   ebx
c000f8dd:	8b 35 24 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002ca24
c000f8e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8e7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8eb:	89 c8                	mov    eax,ecx
c000f8ed:	83 e1 07             	and    ecx,0x7
c000f8f0:	c1 e8 03             	shr    eax,0x3
c000f8f3:	d3 e3                	shl    ebx,cl
c000f8f5:	01 c6                	add    esi,eax
c000f8f7:	d3 e2                	shl    edx,cl
c000f8f9:	f7 d2                	not    edx
c000f8fb:	20 16                	and    BYTE PTR [esi],dl
c000f8fd:	03 05 24 ca 02 c0    	add    eax,DWORD PTR ds:0xc002ca24
c000f903:	08 18                	or     BYTE PTR [eax],bl
c000f905:	5b                   	pop    ebx
c000f906:	5e                   	pop    esi
c000f907:	c3                   	ret    

c000f908 <Phys::getPageState(unsigned long)>:
c000f908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f90c:	8b 15 24 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca24
c000f912:	89 c8                	mov    eax,ecx
c000f914:	83 e1 07             	and    ecx,0x7
c000f917:	c1 e8 03             	shr    eax,0x3
c000f91a:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f91e:	d3 f8                	sar    eax,cl
c000f920:	83 e0 01             	and    eax,0x1
c000f923:	c3                   	ret    

c000f924 <Phys::freePage(unsigned long)>:
c000f924:	53                   	push   ebx
c000f925:	83 ec 10             	sub    esp,0x10
c000f928:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f92c:	53                   	push   ebx
c000f92d:	68 f9 a0 02 c0       	push   0xc002a0f9
c000f932:	e8 5c 2e 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f940:	76 3d                	jbe    c000f97f <Phys::freePage(unsigned long)+0x5b>
c000f942:	83 ec 0c             	sub    esp,0xc
c000f945:	c1 eb 0c             	shr    ebx,0xc
c000f948:	53                   	push   ebx
c000f949:	e8 ba ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f94e:	83 c4 10             	add    esp,0x10
c000f951:	84 c0                	test   al,al
c000f953:	74 19                	je     c000f96e <Phys::freePage(unsigned long)+0x4a>
c000f955:	83 ec 08             	sub    esp,0x8
c000f958:	ff 0d 50 db 02 c0    	dec    DWORD PTR ds:0xc002db50
c000f95e:	6a 00                	push   0x0
c000f960:	53                   	push   ebx
c000f961:	e8 70 ff ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	83 c4 08             	add    esp,0x8
c000f96c:	5b                   	pop    ebx
c000f96d:	c3                   	ret    
c000f96e:	c7 44 24 10 0c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a10c
c000f976:	83 c4 08             	add    esp,0x8
c000f979:	5b                   	pop    ebx
c000f97a:	e9 80 a5 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c000f97f:	83 ec 08             	sub    esp,0x8
c000f982:	68 00 10 00 00       	push   0x1000
c000f987:	53                   	push   ebx
c000f988:	e8 ea fe ff ff       	call   c000f877 <Phys::freeDMA(unsigned long, unsigned long)>
c000f98d:	83 c4 10             	add    esp,0x10
c000f990:	83 c4 08             	add    esp,0x8
c000f993:	5b                   	pop    ebx
c000f994:	c3                   	ret    

c000f995 <Phys::allocatePage()>:
c000f995:	56                   	push   esi
c000f996:	53                   	push   ebx
c000f997:	83 ec 14             	sub    esp,0x14
c000f99a:	8b 35 44 db 02 c0    	mov    esi,DWORD PTR ds:0xc002db44
c000f9a0:	89 f3                	mov    ebx,esi
c000f9a2:	eb 0a                	jmp    c000f9ae <Phys::allocatePage()+0x19>
c000f9a4:	89 1d 44 db 02 c0    	mov    DWORD PTR ds:0xc002db44,ebx
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	74 24                	je     c000f9d2 <Phys::allocatePage()+0x3d>
c000f9ae:	53                   	push   ebx
c000f9af:	e8 54 ff ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000f9b4:	5a                   	pop    edx
c000f9b5:	84 c0                	test   al,al
c000f9b7:	74 76                	je     c000fa2f <Phys::allocatePage()+0x9a>
c000f9b9:	43                   	inc    ebx
c000f9ba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f9c0:	75 e2                	jne    c000f9a4 <Phys::allocatePage()+0xf>
c000f9c2:	31 db                	xor    ebx,ebx
c000f9c4:	c7 05 44 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db44,0x0
c000f9ce:	39 de                	cmp    esi,ebx
c000f9d0:	75 dc                	jne    c000f9ae <Phys::allocatePage()+0x19>
c000f9d2:	83 ec 0c             	sub    esp,0xc
c000f9d5:	68 40 a1 02 c0       	push   0xc002a140
c000f9da:	e8 b4 2d 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000f9df:	58                   	pop    eax
c000f9e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9e8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ee:	e8 1f 2a 00 00       	call   c0012412 <VAS::scanForEviction()>
c000f9f3:	83 c4 10             	add    esp,0x10
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 76                	jne    c000fa70 <Phys::allocatePage()+0xdb>
c000f9fa:	83 ec 0c             	sub    esp,0xc
c000f9fd:	68 00 10 00 00       	push   0x1000
c000fa02:	e8 a2 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000fa07:	83 c4 10             	add    esp,0x10
c000fa0a:	85 c0                	test   eax,eax
c000fa0c:	75 5c                	jne    c000fa6a <Phys::allocatePage()+0xd5>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 58 a1 02 c0       	push   0xc002a158
c000fa16:	e8 e4 a4 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000fa1b:	83 c4 10             	add    esp,0x10
c000fa1e:	8b 1d 44 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db44
c000fa24:	53                   	push   ebx
c000fa25:	e8 de fe ff ff       	call   c000f908 <Phys::getPageState(unsigned long)>
c000fa2a:	5a                   	pop    edx
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 8a                	jne    c000f9b9 <Phys::allocatePage()+0x24>
c000fa2f:	6a 01                	push   0x1
c000fa31:	53                   	push   ebx
c000fa32:	e8 9f fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa37:	5a                   	pop    edx
c000fa38:	a1 50 db 02 c0       	mov    eax,ds:0xc002db50
c000fa3d:	59                   	pop    ecx
c000fa3e:	40                   	inc    eax
c000fa3f:	8b 15 44 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db44
c000fa45:	a3 50 db 02 c0       	mov    ds:0xc002db50,eax
c000fa4a:	c1 e2 0c             	shl    edx,0xc
c000fa4d:	52                   	push   edx
c000fa4e:	ff 35 54 db 02 c0    	push   DWORD PTR ds:0xc002db54
c000fa54:	50                   	push   eax
c000fa55:	68 22 a1 02 c0       	push   0xc002a122
c000fa5a:	e8 34 2d 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000fa5f:	a1 44 db 02 c0       	mov    eax,ds:0xc002db44
c000fa64:	83 c4 10             	add    esp,0x10
c000fa67:	c1 e0 0c             	shl    eax,0xc
c000fa6a:	83 c4 14             	add    esp,0x14
c000fa6d:	5b                   	pop    ebx
c000fa6e:	5e                   	pop    esi
c000fa6f:	c3                   	ret    
c000fa70:	83 ec 08             	sub    esp,0x8
c000fa73:	89 c2                	mov    edx,eax
c000fa75:	6a 01                	push   0x1
c000fa77:	c1 ea 0c             	shr    edx,0xc
c000fa7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa7e:	52                   	push   edx
c000fa7f:	e8 52 fe ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8b:	eb dd                	jmp    c000fa6a <Phys::allocatePage()+0xd5>

c000fa8d <Phys::allocateContiguousPages(int)>:
c000fa8d:	57                   	push   edi
c000fa8e:	56                   	push   esi
c000fa8f:	53                   	push   ebx
c000fa90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa94:	fa                   	cli    
c000fa95:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000fa9b:	31 db                	xor    ebx,ebx
c000fa9d:	85 db                	test   ebx,ebx
c000fa9f:	75 11                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000faa1:	e8 ef fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000faa6:	83 fe 01             	cmp    esi,0x1
c000faa9:	89 c7                	mov    edi,eax
c000faab:	74 21                	je     c000face <Phys::allocateContiguousPages(int)+0x41>
c000faad:	bb 01 00 00 00       	mov    ebx,0x1
c000fab2:	e8 de fe ff ff       	call   c000f995 <Phys::allocatePage()>
c000fab7:	89 da                	mov    edx,ebx
c000fab9:	c1 e2 0c             	shl    edx,0xc
c000fabc:	01 fa                	add    edx,edi
c000fabe:	39 c2                	cmp    edx,eax
c000fac0:	74 20                	je     c000fae2 <Phys::allocateContiguousPages(int)+0x55>
c000fac2:	bb 01 00 00 00       	mov    ebx,0x1
c000fac7:	89 c7                	mov    edi,eax
c000fac9:	83 fe 01             	cmp    esi,0x1
c000facc:	75 e4                	jne    c000fab2 <Phys::allocateContiguousPages(int)+0x25>
c000face:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000fad3:	48                   	dec    eax
c000fad4:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000fad9:	75 01                	jne    c000fadc <Phys::allocateContiguousPages(int)+0x4f>
c000fadb:	fb                   	sti    
c000fadc:	89 f8                	mov    eax,edi
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	c3                   	ret    
c000fae2:	43                   	inc    ebx
c000fae3:	39 f3                	cmp    ebx,esi
c000fae5:	75 b6                	jne    c000fa9d <Phys::allocateContiguousPages(int)+0x10>
c000fae7:	eb e5                	jmp    c000face <Phys::allocateContiguousPages(int)+0x41>

c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fae9:	56                   	push   esi
c000faea:	53                   	push   ebx
c000faeb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faef:	39 1d 48 db 02 c0    	cmp    DWORD PTR ds:0xc002db48,ebx
c000faf5:	73 06                	jae    c000fafd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000faf7:	89 1d 48 db 02 c0    	mov    DWORD PTR ds:0xc002db48,ebx
c000fafd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb01:	c1 eb 0c             	shr    ebx,0xc
c000fb04:	c1 e8 0c             	shr    eax,0xc
c000fb07:	39 d8                	cmp    eax,ebx
c000fb09:	73 13                	jae    c000fb1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fb0b:	6a 00                	push   0x0
c000fb0d:	8d 70 01             	lea    esi,[eax+0x1]
c000fb10:	50                   	push   eax
c000fb11:	e8 c0 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb16:	5a                   	pop    edx
c000fb17:	89 f0                	mov    eax,esi
c000fb19:	59                   	pop    ecx
c000fb1a:	39 f3                	cmp    ebx,esi
c000fb1c:	75 ed                	jne    c000fb0b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fb1e:	5b                   	pop    ebx
c000fb1f:	5e                   	pop    esi
c000fb20:	c3                   	ret    

c000fb21 <Phys::physicalMemorySetup(unsigned int)>:
c000fb21:	55                   	push   ebp
c000fb22:	57                   	push   edi
c000fb23:	56                   	push   esi
c000fb24:	53                   	push   ebx
c000fb25:	83 ec 40             	sub    esp,0x40
c000fb28:	6a 30                	push   0x30
c000fb2a:	6a 00                	push   0x0
c000fb2c:	68 60 db 02 c0       	push   0xc002db60
c000fb31:	e8 1a 0c ff ff       	call   c0000750 <memset>
c000fb36:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb3a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb3f:	05 00 10 00 00       	add    eax,0x1000
c000fb44:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb48:	5b                   	pop    ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	5e                   	pop    esi
c000fb4c:	50                   	push   eax
c000fb4d:	68 66 a1 02 c0       	push   0xc002a166
c000fb52:	e8 3c 2c 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000fb57:	83 c4 10             	add    esp,0x10
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	6a 01                	push   0x1
c000fb5f:	53                   	push   ebx
c000fb60:	43                   	inc    ebx
c000fb61:	e8 70 fd ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb6f:	75 e9                	jne    c000fb5a <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb71:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb78:	66 85 c0             	test   ax,ax
c000fb7b:	0f 84 8e 01 00 00    	je     c000fd0f <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb85:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb91:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb96:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb9a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fba2:	eb 15                	jmp    c000fbb9 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fba4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fba8:	83 c3 18             	add    ebx,0x18
c000fbab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fbaf:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fbb3:	0f 84 66 01 00 00    	je     c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbb9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fbbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fbbf:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbca:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fbcc:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbcf:	01 f0                	add    eax,esi
c000fbd1:	55                   	push   ebp
c000fbd2:	11 fa                	adc    edx,edi
c000fbd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbe0:	56                   	push   esi
c000fbe1:	68 a8 a1 02 c0       	push   0xc002a1a8
c000fbe6:	e8 a8 2b 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000fbeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbef:	83 c4 10             	add    esp,0x10
c000fbf2:	09 f8                	or     eax,edi
c000fbf4:	0f 85 25 01 00 00    	jne    c000fd1f <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbfa:	4d                   	dec    ebp
c000fbfb:	75 a7                	jne    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbfd:	ba 00 00 08 00       	mov    edx,0x80000
c000fc02:	89 c1                	mov    ecx,eax
c000fc04:	39 f2                	cmp    edx,esi
c000fc06:	19 f9                	sbb    ecx,edi
c000fc08:	0f 82 a7 00 00 00    	jb     c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc0e:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fc12:	89 c1                	mov    ecx,eax
c000fc14:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fc18:	0f 83 97 00 00 00    	jae    c000fcb5 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fc1e:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fc23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc27:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc2b:	39 fa                	cmp    edx,edi
c000fc2d:	19 e8                	sbb    eax,ebp
c000fc2f:	0f 82 14 01 00 00    	jb     c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x228>
c000fc35:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc39:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc3d:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc43:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc48:	83 d5 ff             	adc    ebp,0xffffffff
c000fc4b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc4f:	31 c0                	xor    eax,eax
c000fc51:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc55:	39 fa                	cmp    edx,edi
c000fc57:	89 c1                	mov    ecx,eax
c000fc59:	19 e9                	sbb    ecx,ebp
c000fc5b:	0f 83 43 ff ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc61:	be 00 00 08 00       	mov    esi,0x80000
c000fc66:	50                   	push   eax
c000fc67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc6b:	57                   	push   edi
c000fc6c:	56                   	push   esi
c000fc6d:	68 cc a1 02 c0       	push   0xc002a1cc
c000fc72:	e8 1c 2b 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000fc77:	5a                   	pop    edx
c000fc78:	59                   	pop    ecx
c000fc79:	57                   	push   edi
c000fc7a:	56                   	push   esi
c000fc7b:	e8 69 fe ff ff       	call   c000fae9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc80:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc88:	83 c4 0c             	add    esp,0xc
c000fc8b:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc8f:	03 05 54 db 02 c0    	add    eax,DWORD PTR ds:0xc002db54
c000fc95:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc9c:	a3 54 db 02 c0       	mov    ds:0xc002db54,eax
c000fca1:	52                   	push   edx
c000fca2:	50                   	push   eax
c000fca3:	68 8c a1 02 c0       	push   0xc002a18c
c000fca8:	e8 e6 2a 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	e9 ef fe ff ff       	jmp    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcb5:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fcb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fcbd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fcc1:	39 ea                	cmp    edx,ebp
c000fcc3:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fcc7:	0f 82 d7 fe ff ff    	jb     c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fccd:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcd2:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcd6:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcda:	0f 83 c4 fe ff ff    	jae    c000fba4 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fce0:	39 ee                	cmp    esi,ebp
c000fce2:	89 f8                	mov    eax,edi
c000fce4:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fce8:	0f 83 78 ff ff ff    	jae    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcf2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcfa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcfe:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fd02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd0a:	e9 57 ff ff ff       	jmp    c000fc66 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	68 7e a1 02 c0       	push   0xc002a17e
c000fd17:	e8 e3 a1 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000fd1c:	83 c4 10             	add    esp,0x10
c000fd1f:	bb 40 01 00 00       	mov    ebx,0x140
c000fd24:	83 ec 08             	sub    esp,0x8
c000fd27:	6a 00                	push   0x0
c000fd29:	53                   	push   ebx
c000fd2a:	43                   	inc    ebx
c000fd2b:	e8 a6 fb ff ff       	call   c000f8d6 <Phys::setPageState(unsigned long, bool)>
c000fd30:	ff 05 54 db 02 c0    	inc    DWORD PTR ds:0xc002db54
c000fd36:	83 c4 10             	add    esp,0x10
c000fd39:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd3f:	75 e3                	jne    c000fd24 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd41:	83 c4 3c             	add    esp,0x3c
c000fd44:	5b                   	pop    ebx
c000fd45:	5e                   	pop    esi
c000fd46:	5f                   	pop    edi
c000fd47:	5d                   	pop    ebp
c000fd48:	c3                   	ret    
c000fd49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd59:	e9 d7 fe ff ff       	jmp    c000fc35 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000fd5e <Pipe::isAtty()>:
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <Pipe::~Pipe()>:
c000fd62:	83 ec 0c             	sub    esp,0xc
c000fd65:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c000fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd6e:	89 10                	mov    DWORD PTR [eax],edx
c000fd70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd74:	83 ec 0c             	sub    esp,0xc
c000fd77:	50                   	push   eax
c000fd78:	e8 41 12 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fd7d:	83 c4 10             	add    esp,0x10
c000fd80:	90                   	nop
c000fd81:	83 c4 0c             	add    esp,0xc
c000fd84:	c3                   	ret    
c000fd85:	90                   	nop

c000fd86 <Pipe::~Pipe()>:
c000fd86:	83 ec 0c             	sub    esp,0xc
c000fd89:	83 ec 0c             	sub    esp,0xc
c000fd8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd90:	e8 cd ff ff ff       	call   c000fd62 <Pipe::~Pipe()>
c000fd95:	83 c4 10             	add    esp,0x10
c000fd98:	83 ec 08             	sub    esp,0x8
c000fd9b:	6a 20                	push   0x20
c000fd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fda1:	e8 15 29 00 00       	call   c00126bb <operator delete(void*, unsigned long)>
c000fda6:	83 c4 10             	add    esp,0x10
c000fda9:	83 c4 0c             	add    esp,0xc
c000fdac:	c3                   	ret    
c000fdad:	90                   	nop

c000fdae <Pipe::read(unsigned long long, void*, int*)>:
c000fdae:	55                   	push   ebp
c000fdaf:	57                   	push   edi
c000fdb0:	56                   	push   esi
c000fdb1:	53                   	push   ebx
c000fdb2:	83 ec 1c             	sub    esp,0x1c
c000fdb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fdbd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdc1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdc4:	89 c8                	mov    eax,ecx
c000fdc6:	99                   	cdq    
c000fdc7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdcb:	74 24                	je     c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdcd:	39 f9                	cmp    ecx,edi
c000fdcf:	89 d1                	mov    ecx,edx
c000fdd1:	19 f1                	sbb    ecx,esi
c000fdd3:	73 1c                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdd5:	fa                   	cli    
c000fdd6:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c000fddc:	e8 b0 dc 00 00       	call   c001da91 <schedule()>
c000fde1:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c000fde6:	48                   	dec    eax
c000fde7:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c000fdec:	75 d3                	jne    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdee:	fb                   	sti    
c000fdef:	eb d0                	jmp    c000fdc1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdf1:	39 f8                	cmp    eax,edi
c000fdf3:	89 d1                	mov    ecx,edx
c000fdf5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fdf8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fdfc:	19 f1                	sbb    ecx,esi
c000fdfe:	73 07                	jae    c000fe07 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fe00:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe03:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe07:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe0a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe0d:	29 f7                	sub    edi,esi
c000fe0f:	89 f8                	mov    eax,edi
c000fe11:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe15:	99                   	cdq    
c000fe16:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe1d:	19 d0                	sbb    eax,edx
c000fe1f:	73 07                	jae    c000fe28 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe28:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe2b:	89 ea                	mov    edx,ebp
c000fe2d:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe36:	74 0d                	je     c000fe45 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe38:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe3b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe45:	85 d2                	test   edx,edx
c000fe47:	74 11                	je     c000fe5a <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe4d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe50:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe54:	89 d1                	mov    ecx,edx
c000fe56:	89 c7                	mov    edi,eax
c000fe58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe5d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe60:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe63:	99                   	cdq    
c000fe64:	89 f7                	mov    edi,esi
c000fe66:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe6d:	c1 ff 1f             	sar    edi,0x1f
c000fe70:	57                   	push   edi
c000fe71:	56                   	push   esi
c000fe72:	52                   	push   edx
c000fe73:	50                   	push   eax
c000fe74:	e8 5b 6a 01 00       	call   c00268d4 <__umoddi3>
c000fe79:	83 c4 10             	add    esp,0x10
c000fe7c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe7f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe84:	75 10                	jne    c000fe96 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe86:	83 ec 0c             	sub    esp,0xc
c000fe89:	68 f5 a1 02 c0       	push   0xc002a1f5
c000fe8e:	e8 6c a0 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe9a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe9d:	89 10                	mov    DWORD PTR [eax],edx
c000fe9f:	83 c4 1c             	add    esp,0x1c
c000fea2:	31 c0                	xor    eax,eax
c000fea4:	5b                   	pop    ebx
c000fea5:	5e                   	pop    esi
c000fea6:	5f                   	pop    edi
c000fea7:	5d                   	pop    ebp
c000fea8:	c3                   	ret    
c000fea9:	90                   	nop

c000feaa <Pipe::write(unsigned long long, void*, int*)>:
c000feaa:	55                   	push   ebp
c000feab:	57                   	push   edi
c000feac:	56                   	push   esi
c000fead:	53                   	push   ebx
c000feae:	83 ec 1c             	sub    esp,0x1c
c000feb1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000feb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000feb9:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000febc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fec3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fec7:	89 d8                	mov    eax,ebx
c000fec9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fecc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fed0:	89 d6                	mov    esi,edx
c000fed2:	89 d7                	mov    edi,edx
c000fed4:	c1 ff 1f             	sar    edi,0x1f
c000fed7:	03 34 24             	add    esi,DWORD PTR [esp]
c000feda:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fede:	c1 f8 1f             	sar    eax,0x1f
c000fee1:	39 f3                	cmp    ebx,esi
c000fee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000feeb:	19 f8                	sbb    eax,edi
c000feed:	b8 01 00 00 00       	mov    eax,0x1
c000fef2:	72 6e                	jb     c000ff62 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fef4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fef7:	01 d0                	add    eax,edx
c000fef9:	99                   	cdq    
c000fefa:	f7 fb                	idiv   ebx
c000fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff00:	29 d3                	sub    ebx,edx
c000ff02:	89 d7                	mov    edi,edx
c000ff04:	89 de                	mov    esi,ebx
c000ff06:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000ff09:	c1 fb 1f             	sar    ebx,0x1f
c000ff0c:	39 f2                	cmp    edx,esi
c000ff0e:	19 d8                	sbb    eax,ebx
c000ff10:	b8 00 00 00 00       	mov    eax,0x0
c000ff15:	72 04                	jb     c000ff1b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff17:	89 d0                	mov    eax,edx
c000ff19:	29 f0                	sub    eax,esi
c000ff1b:	89 d3                	mov    ebx,edx
c000ff1d:	29 c3                	sub    ebx,eax
c000ff1f:	74 0b                	je     c000ff2c <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff21:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff24:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff28:	89 d9                	mov    ecx,ebx
c000ff2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff2c:	85 c0                	test   eax,eax
c000ff2e:	74 0d                	je     c000ff3d <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff30:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff34:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff37:	89 de                	mov    esi,ebx
c000ff39:	89 c1                	mov    ecx,eax
c000ff3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff3d:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff40:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff45:	75 10                	jne    c000ff57 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	68 11 a2 02 c0       	push   0xc002a211
c000ff4f:	e8 ab 9f 00 00       	call   c0019eff <Krnl::panic(char const*)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff5b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff5e:	89 08                	mov    DWORD PTR [eax],ecx
c000ff60:	31 c0                	xor    eax,eax
c000ff62:	83 c4 1c             	add    esp,0x1c
c000ff65:	5b                   	pop    ebx
c000ff66:	5e                   	pop    esi
c000ff67:	5f                   	pop    edi
c000ff68:	5d                   	pop    ebp
c000ff69:	c3                   	ret    

c000ff6a <Pipe::Pipe(int)>:
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff71:	83 ec 08             	sub    esp,0x8
c000ff74:	6a 00                	push   0x0
c000ff76:	50                   	push   eax
c000ff77:	e8 60 0e 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	ba 38 a2 02 c0       	mov    edx,0xc002a238
c000ff84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff88:	89 10                	mov    DWORD PTR [eax],edx
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff99:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ffab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffaf:	83 ec 0c             	sub    esp,0xc
c000ffb2:	50                   	push   eax
c000ffb3:	e8 e1 f5 ff ff       	call   c000f599 <malloc>
c000ffb8:	83 c4 10             	add    esp,0x10
c000ffbb:	89 c2                	mov    edx,eax
c000ffbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffcc:	90                   	nop
c000ffcd:	83 c4 0c             	add    esp,0xc
c000ffd0:	c3                   	ret    
c000ffd1:	90                   	nop

c000ffd2 <VgaText::isAtty()>:
c000ffd2:	b0 01                	mov    al,0x1
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::~VgaText()>:
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c000ffde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe2:	89 10                	mov    DWORD PTR [eax],edx
c000ffe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe8:	83 ec 0c             	sub    esp,0xc
c000ffeb:	50                   	push   eax
c000ffec:	e8 cd 0f 00 00       	call   c0010fbe <UnixFile::~UnixFile()>
c000fff1:	83 c4 10             	add    esp,0x10
c000fff4:	90                   	nop
c000fff5:	83 c4 0c             	add    esp,0xc
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <VgaText::~VgaText()>:
c000fffa:	83 ec 0c             	sub    esp,0xc
c000fffd:	83 ec 0c             	sub    esp,0xc
c0010000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010004:	e8 cd ff ff ff       	call   c000ffd6 <VgaText::~VgaText()>
c0010009:	83 c4 10             	add    esp,0x10
c001000c:	83 ec 08             	sub    esp,0x8
c001000f:	68 c4 02 00 00       	push   0x2c4
c0010014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010018:	e8 9e 26 00 00       	call   c00126bb <operator delete(void*, unsigned long)>
c001001d:	83 c4 10             	add    esp,0x10
c0010020:	83 c4 0c             	add    esp,0xc
c0010023:	c3                   	ret    

c0010024 <VgaText::read(unsigned long long, void*, int*)>:
c0010024:	83 ec 10             	sub    esp,0x10
c0010027:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001002b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001002f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010033:	e8 22 5c 00 00       	call   c0015c5a <readKeyboard(VgaText*, char*, unsigned long)>
c0010038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001003c:	89 02                	mov    DWORD PTR [edx],eax
c001003e:	31 c0                	xor    eax,eax
c0010040:	83 c4 1c             	add    esp,0x1c
c0010043:	c3                   	ret    

c0010044 <setTerminalScrollLock(bool)>:
c0010044:	c3                   	ret    

c0010045 <addToTerminalCycle(VgaText*)>:
c0010045:	8b 15 c0 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dbc0
c001004b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001004f:	85 d2                	test   edx,edx
c0010051:	75 09                	jne    c001005c <addToTerminalCycle(VgaText*)+0x17>
c0010053:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010056:	a3 c0 db 02 c0       	mov    ds:0xc002dbc0,eax
c001005b:	c3                   	ret    
c001005c:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001005f:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010062:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010065:	c3                   	ret    

c0010066 <installVgaTextImplementation()>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	6a 20                	push   0x20
c001006b:	6a 00                	push   0x0
c001006d:	68 a0 db 02 c0       	push   0xc002dba0
c0010072:	e8 d9 06 ff ff       	call   c0000750 <memset>
c0010077:	83 c4 1c             	add    esp,0x1c
c001007a:	c3                   	ret    

c001007b <scrollTerminalScrollLock(int)>:
c001007b:	c3                   	ret    

c001007c <VgaText::updateTitle()>:
c001007c:	53                   	push   ebx
c001007d:	31 c0                	xor    eax,eax
c001007f:	83 ec 58             	sub    esp,0x58
c0010082:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010086:	89 e1                	mov    ecx,esp
c0010088:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001008c:	40                   	inc    eax
c001008d:	83 f8 50             	cmp    eax,0x50
c0010090:	75 f6                	jne    c0010088 <VgaText::updateTitle()+0xc>
c0010092:	31 c0                	xor    eax,eax
c0010094:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001009b:	84 db                	test   bl,bl
c001009d:	74 06                	je     c00100a5 <VgaText::updateTitle()+0x29>
c001009f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00100a2:	40                   	inc    eax
c00100a3:	eb ef                	jmp    c0010094 <VgaText::updateTitle()+0x18>
c00100a5:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c00100a8:	85 c0                	test   eax,eax
c00100aa:	74 09                	je     c00100b5 <VgaText::updateTitle()+0x39>
c00100ac:	53                   	push   ebx
c00100ad:	53                   	push   ebx
c00100ae:	51                   	push   ecx
c00100af:	52                   	push   edx
c00100b0:	ff d0                	call   eax
c00100b2:	83 c4 10             	add    esp,0x10
c00100b5:	83 c4 58             	add    esp,0x58
c00100b8:	5b                   	pop    ebx
c00100b9:	c3                   	ret    

c00100ba <VgaText::load()>:
c00100ba:	53                   	push   ebx
c00100bb:	31 c0                	xor    eax,eax
c00100bd:	83 ec 58             	sub    esp,0x58
c00100c0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100c4:	89 e2                	mov    edx,esp
c00100c6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100ca:	40                   	inc    eax
c00100cb:	83 f8 50             	cmp    eax,0x50
c00100ce:	75 f6                	jne    c00100c6 <VgaText::load()+0xc>
c00100d0:	31 c0                	xor    eax,eax
c00100d2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100d9:	84 c9                	test   cl,cl
c00100db:	74 06                	je     c00100e3 <VgaText::load()+0x29>
c00100dd:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100e0:	40                   	inc    eax
c00100e1:	eb ef                	jmp    c00100d2 <VgaText::load()+0x18>
c00100e3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100e6:	85 c0                	test   eax,eax
c00100e8:	74 09                	je     c00100f3 <VgaText::load()+0x39>
c00100ea:	51                   	push   ecx
c00100eb:	51                   	push   ecx
c00100ec:	52                   	push   edx
c00100ed:	53                   	push   ebx
c00100ee:	ff d0                	call   eax
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100f6:	85 c0                	test   eax,eax
c00100f8:	74 09                	je     c0010103 <VgaText::load()+0x49>
c00100fa:	83 ec 0c             	sub    esp,0xc
c00100fd:	53                   	push   ebx
c00100fe:	ff d0                	call   eax
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	83 c4 58             	add    esp,0x58
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <VgaText::updateCursor()>:
c0010108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010c:	39 05 c4 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc4,eax
c0010112:	75 09                	jne    c001011d <VgaText::updateCursor()+0x15>
c0010114:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010117:	85 c0                	test   eax,eax
c0010119:	74 02                	je     c001011d <VgaText::updateCursor()+0x15>
c001011b:	ff e0                	jmp    eax
c001011d:	c3                   	ret    

c001011e <VgaText::doANSI_SGR(int)>:
c001011e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	85 d2                	test   edx,edx
c0010128:	75 0b                	jne    c0010135 <VgaText::doANSI_SGR(int)+0x17>
c001012a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010133:	eb 59                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010135:	83 fa 07             	cmp    edx,0x7
c0010138:	75 0b                	jne    c0010145 <VgaText::doANSI_SGR(int)+0x27>
c001013a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001013d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010140:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010143:	eb 49                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c0010145:	83 fa 1b             	cmp    edx,0x1b
c0010148:	74 e0                	je     c001012a <VgaText::doANSI_SGR(int)+0xc>
c001014a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001014d:	83 f9 07             	cmp    ecx,0x7
c0010150:	77 09                	ja     c001015b <VgaText::doANSI_SGR(int)+0x3d>
c0010152:	8b 14 8d 60 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35a0]
c0010159:	eb 20                	jmp    c001017b <VgaText::doANSI_SGR(int)+0x5d>
c001015b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001015e:	83 f9 07             	cmp    ecx,0x7
c0010161:	77 09                	ja     c001016c <VgaText::doANSI_SGR(int)+0x4e>
c0010163:	8b 14 8d 60 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd35a0]
c001016a:	eb 22                	jmp    c001018e <VgaText::doANSI_SGR(int)+0x70>
c001016c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001016f:	83 f9 07             	cmp    ecx,0x7
c0010172:	77 0b                	ja     c001017f <VgaText::doANSI_SGR(int)+0x61>
c0010174:	8b 14 95 18 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd36e8]
c001017b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001017e:	c3                   	ret    
c001017f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010182:	83 f9 07             	cmp    ecx,0x7
c0010185:	77 0a                	ja     c0010191 <VgaText::doANSI_SGR(int)+0x73>
c0010187:	8b 14 95 f0 c8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3710]
c001018e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010191:	c3                   	ret    

c0010192 <VgaText::setDefaultBgColour(VgaColour)>:
c0010192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001019a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001019d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <VgaText::setDefaultFgColour(VgaColour)>:
c00101a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101aa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00101ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00101b0:	c3                   	ret    
c00101b1:	90                   	nop

c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00101b2:	53                   	push   ebx
c00101b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101bb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101bf:	51                   	push   ecx
c00101c0:	e8 cd ff ff ff       	call   c0010192 <VgaText::setDefaultBgColour(VgaColour)>
c00101c5:	58                   	pop    eax
c00101c6:	5a                   	pop    edx
c00101c7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101cf:	5b                   	pop    ebx
c00101d0:	eb d0                	jmp    c00101a2 <VgaText::setDefaultFgColour(VgaColour)>

c00101d2 <VgaText::setTitleTextColour(VgaColour)>:
c00101d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101da:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101dd:	e9 9a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101e2 <VgaText::setTitleColour(VgaColour)>:
c00101e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101ed:	e9 8a fe ff ff       	jmp    c001007c <VgaText::updateTitle()>

c00101f2 <VgaText::setTitle(char*)>:
c00101f2:	53                   	push   ebx
c00101f3:	83 ec 10             	sub    esp,0x10
c00101f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fe:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010204:	50                   	push   eax
c0010205:	e8 02 06 ff ff       	call   c000080c <strcpy>
c001020a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001020e:	83 c4 18             	add    esp,0x18
c0010211:	5b                   	pop    ebx
c0010212:	e9 65 fe ff ff       	jmp    c001007c <VgaText::updateTitle()>
c0010217:	90                   	nop

c0010218 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010218:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001021c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010221:	83 e0 0f             	and    eax,0xf
c0010224:	c1 e2 04             	shl    edx,0x4
c0010227:	09 d0                	or     eax,edx
c0010229:	c3                   	ret    

c001022a <VgaText::scrollScreen()>:
c001022a:	55                   	push   ebp
c001022b:	b9 01 00 00 00       	mov    ecx,0x1
c0010230:	57                   	push   edi
c0010231:	56                   	push   esi
c0010232:	53                   	push   ebx
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001023a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010240:	31 ff                	xor    edi,edi
c0010242:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010245:	83 f9 17             	cmp    ecx,0x17
c0010248:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001024b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010252:	75 27                	jne    c001027b <VgaText::scrollScreen()+0x51>
c0010254:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010257:	01 f5                	add    ebp,esi
c0010259:	f7 c7 01 00 00 00    	test   edi,0x1
c001025f:	74 16                	je     c0010277 <VgaText::scrollScreen()+0x4d>
c0010261:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010265:	50                   	push   eax
c0010266:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001026a:	50                   	push   eax
c001026b:	e8 a8 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010270:	5a                   	pop    edx
c0010271:	5a                   	pop    edx
c0010272:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010275:	eb 04                	jmp    c001027b <VgaText::scrollScreen()+0x51>
c0010277:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001027b:	47                   	inc    edi
c001027c:	46                   	inc    esi
c001027d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010283:	75 bd                	jne    c0010242 <VgaText::scrollScreen()+0x18>
c0010285:	41                   	inc    ecx
c0010286:	83 f9 18             	cmp    ecx,0x18
c0010289:	75 af                	jne    c001023a <VgaText::scrollScreen()+0x10>
c001028b:	39 1d c4 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc4,ebx
c0010291:	75 1b                	jne    c00102ae <VgaText::scrollScreen()+0x84>
c0010293:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010297:	74 05                	je     c001029e <VgaText::scrollScreen()+0x74>
c0010299:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001029c:	eb 10                	jmp    c00102ae <VgaText::scrollScreen()+0x84>
c001029e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00102a1:	85 c0                	test   eax,eax
c00102a3:	74 09                	je     c00102ae <VgaText::scrollScreen()+0x84>
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	53                   	push   ebx
c00102a9:	ff d0                	call   eax
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00102b2:	83 c4 0c             	add    esp,0xc
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	5f                   	pop    edi
c00102b8:	5d                   	pop    ebp
c00102b9:	e9 4a fe ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c00102be <VgaText::combineCharAndColour(char, unsigned char)>:
c00102be:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102c3:	c1 e0 08             	shl    eax,0x8
c00102c6:	89 c2                	mov    edx,eax
c00102c8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102cd:	09 d0                	or     eax,edx
c00102cf:	c3                   	ret    

c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102d0:	56                   	push   esi
c00102d1:	53                   	push   ebx
c00102d2:	51                   	push   ecx
c00102d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102d7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102dc:	50                   	push   eax
c00102dd:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102e2:	50                   	push   eax
c00102e3:	e8 30 ff ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e8:	5b                   	pop    ebx
c00102e9:	0f b6 c0             	movzx  eax,al
c00102ec:	5e                   	pop    esi
c00102ed:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102f2:	50                   	push   eax
c00102f3:	53                   	push   ebx
c00102f4:	e8 c5 ff ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c00102f9:	5a                   	pop    edx
c00102fa:	5e                   	pop    esi
c00102fb:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102fe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010304:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010308:	0f b7 d2             	movzx  edx,dx
c001030b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001030f:	39 0d c4 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc4,ecx
c0010315:	75 10                	jne    c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010317:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001031a:	85 c0                	test   eax,eax
c001031c:	74 09                	je     c0010327 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001031e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010322:	5a                   	pop    edx
c0010323:	5b                   	pop    ebx
c0010324:	5e                   	pop    esi
c0010325:	ff e0                	jmp    eax
c0010327:	58                   	pop    eax
c0010328:	5b                   	pop    ebx
c0010329:	5e                   	pop    esi
c001032a:	c3                   	ret    
c001032b:	90                   	nop

c001032c <VgaText::getCursorX()>:
c001032c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010330:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010333:	c3                   	ret    

c0010334 <VgaText::getCursorY()>:
c0010334:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010338:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001033b:	c3                   	ret    

c001033c <VgaText::setCursor(int, int)>:
c001033c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010340:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010344:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010347:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001034b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001034e:	e9 b5 fd ff ff       	jmp    c0010108 <VgaText::updateCursor()>

c0010353 <setActiveTerminal(VgaText*)>:
c0010353:	53                   	push   ebx
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035b:	85 db                	test   ebx,ebx
c001035d:	75 11                	jne    c0010370 <setActiveTerminal(VgaText*)+0x1d>
c001035f:	c7 44 24 10 4c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a24c
c0010367:	83 c4 08             	add    esp,0x8
c001036a:	5b                   	pop    ebx
c001036b:	e9 8f 9b 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c0010370:	a1 c4 db 02 c0       	mov    eax,ds:0xc002dbc4
c0010375:	85 c0                	test   eax,eax
c0010377:	74 0c                	je     c0010385 <setActiveTerminal(VgaText*)+0x32>
c0010379:	83 ec 0c             	sub    esp,0xc
c001037c:	50                   	push   eax
c001037d:	e8 86 fd ff ff       	call   c0010108 <VgaText::updateCursor()>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	89 1d c4 db 02 c0    	mov    DWORD PTR ds:0xc002dbc4,ebx
c001038b:	51                   	push   ecx
c001038c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001038f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010392:	53                   	push   ebx
c0010393:	e8 a4 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c0010398:	83 c4 10             	add    esp,0x10
c001039b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001039f:	75 07                	jne    c00103a8 <setActiveTerminal(VgaText*)+0x55>
c00103a1:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00103a8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103ac:	83 c4 08             	add    esp,0x8
c00103af:	5b                   	pop    ebx
c00103b0:	e9 05 fd ff ff       	jmp    c00100ba <VgaText::load()>

c00103b5 <doTerminalCycle()>:
c00103b5:	83 ec 18             	sub    esp,0x18
c00103b8:	a1 c0 db 02 c0       	mov    eax,ds:0xc002dbc0
c00103bd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103c0:	50                   	push   eax
c00103c1:	a3 c0 db 02 c0       	mov    ds:0xc002dbc0,eax
c00103c6:	e8 88 ff ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c00103cb:	83 c4 1c             	add    esp,0x1c
c00103ce:	c3                   	ret    
c00103cf:	90                   	nop

c00103d0 <VgaText::setCursorX(int)>:
c00103d0:	83 ec 10             	sub    esp,0x10
c00103d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103de:	50                   	push   eax
c00103df:	e8 58 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103e4:	83 c4 1c             	add    esp,0x1c
c00103e7:	c3                   	ret    

c00103e8 <VgaText::setCursorY(int)>:
c00103e8:	83 ec 10             	sub    esp,0x10
c00103eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103f3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103f6:	50                   	push   eax
c00103f7:	e8 40 ff ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00103fc:	83 c4 1c             	add    esp,0x1c
c00103ff:	c3                   	ret    

c0010400 <VgaText::incrementCursor(bool)>:
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	51                   	push   ecx
c0010403:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010407:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001040b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001040e:	40                   	inc    eax
c001040f:	83 f8 50             	cmp    eax,0x50
c0010412:	74 05                	je     c0010419 <VgaText::incrementCursor(bool)+0x19>
c0010414:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010417:	eb 24                	jmp    c001043d <VgaText::incrementCursor(bool)+0x3d>
c0010419:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001041c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010423:	8d 50 01             	lea    edx,[eax+0x1]
c0010426:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010429:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001042c:	75 0f                	jne    c001043d <VgaText::incrementCursor(bool)+0x3d>
c001042e:	83 ec 0c             	sub    esp,0xc
c0010431:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010434:	53                   	push   ebx
c0010435:	e8 f0 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c001043a:	83 c4 10             	add    esp,0x10
c001043d:	89 f0                	mov    eax,esi
c001043f:	84 c0                	test   al,al
c0010441:	74 0c                	je     c001044f <VgaText::incrementCursor(bool)+0x4f>
c0010443:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010447:	5a                   	pop    edx
c0010448:	5b                   	pop    ebx
c0010449:	5e                   	pop    esi
c001044a:	e9 b9 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c001044f:	58                   	pop    eax
c0010450:	5b                   	pop    ebx
c0010451:	5e                   	pop    esi
c0010452:	c3                   	ret    
c0010453:	90                   	nop

c0010454 <VgaText::decrementCursor(bool)>:
c0010454:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010458:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001045c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001045f:	85 c0                	test   eax,eax
c0010461:	74 04                	je     c0010467 <VgaText::decrementCursor(bool)+0x13>
c0010463:	48                   	dec    eax
c0010464:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010467:	84 c9                	test   cl,cl
c0010469:	74 09                	je     c0010474 <VgaText::decrementCursor(bool)+0x20>
c001046b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001046f:	e9 94 fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c0010474:	c3                   	ret    
c0010475:	90                   	nop

c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010476:	53                   	push   ebx
c0010477:	83 ec 08             	sub    esp,0x8
c001047a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001047e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010482:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010486:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001048a:	3c 07                	cmp    al,0x7
c001048c:	75 2a                	jne    c00104b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001048e:	a1 78 dc 02 c0       	mov    eax,ds:0xc002dc78
c0010493:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001049b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00104a3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00104ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00104af:	83 c4 08             	add    esp,0x8
c00104b2:	5b                   	pop    ebx
c00104b3:	e9 e8 30 00 00       	jmp    c00135a0 <Buzzer::beep(int, int, bool)>
c00104b8:	3c 0d                	cmp    al,0xd
c00104ba:	75 09                	jne    c00104c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104bc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104c3:	eb 2c                	jmp    c00104f1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104c5:	3c 0a                	cmp    al,0xa
c00104c7:	75 31                	jne    c00104fa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104c9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104cc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104d3:	8d 50 01             	lea    edx,[eax+0x1]
c00104d6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104d9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104dc:	75 0f                	jne    c00104ed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104e4:	53                   	push   ebx
c00104e5:	e8 40 fd ff ff       	call   c001022a <VgaText::scrollScreen()>
c00104ea:	83 c4 10             	add    esp,0x10
c00104ed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104f1:	83 c4 08             	add    esp,0x8
c00104f4:	5b                   	pop    ebx
c00104f5:	e9 0e fc ff ff       	jmp    c0010108 <VgaText::updateCursor()>
c00104fa:	3c 08                	cmp    al,0x8
c00104fc:	75 25                	jne    c0010523 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104fe:	50                   	push   eax
c00104ff:	50                   	push   eax
c0010500:	6a 01                	push   0x1
c0010502:	53                   	push   ebx
c0010503:	e8 4c ff ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010508:	5a                   	pop    edx
c0010509:	59                   	pop    ecx
c001050a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001050d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010510:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010513:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010516:	6a 20                	push   0x20
c0010518:	53                   	push   ebx
c0010519:	e8 b2 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001051e:	83 c4 28             	add    esp,0x28
c0010521:	5b                   	pop    ebx
c0010522:	c3                   	ret    
c0010523:	83 ec 08             	sub    esp,0x8
c0010526:	0f be c0             	movsx  eax,al
c0010529:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001052c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001052f:	51                   	push   ecx
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	53                   	push   ebx
c0010533:	e8 98 fd ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010538:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001053c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010544:	83 c4 28             	add    esp,0x28
c0010547:	5b                   	pop    ebx
c0010548:	e9 b3 fe ff ff       	jmp    c0010400 <VgaText::incrementCursor(bool)>
c001054d:	90                   	nop

c001054e <VgaText::doUpdate()>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010555:	85 c0                	test   eax,eax
c0010557:	74 02                	je     c001055b <VgaText::doUpdate()+0xd>
c0010559:	ff e0                	jmp    eax
c001055b:	c3                   	ret    

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	31 ed                	xor    ebp,ebp
c001055f:	57                   	push   edi
c0010560:	56                   	push   esi
c0010561:	53                   	push   ebx
c0010562:	83 ec 1c             	sub    esp,0x1c
c0010565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010569:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010575:	50                   	push   eax
c0010576:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057b:	50                   	push   eax
c001057c:	e8 97 fc ff ff       	call   c0010218 <VgaText::combineColours(unsigned char, unsigned char)>
c0010581:	59                   	pop    ecx
c0010582:	0f b6 c0             	movzx  eax,al
c0010585:	5e                   	pop    esi
c0010586:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001058b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001058f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010596:	0f b7 f6             	movzx  esi,si
c0010599:	01 f6                	add    esi,esi
c001059b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001059e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00105a1:	84 c0                	test   al,al
c00105a3:	0f 84 fd 00 00 00    	je     c00106a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00105a9:	3c 0d                	cmp    al,0xd
c00105ab:	75 0c                	jne    c00105b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00105ad:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b4:	e9 e7 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105b9:	3c 0a                	cmp    al,0xa
c00105bb:	75 47                	jne    c0010604 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105bd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00105ca:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105cd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105d0:	75 0f                	jne    c00105e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105d8:	53                   	push   ebx
c00105d9:	e8 4c fc ff ff       	call   c001022a <VgaText::scrollScreen()>
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	83 ec 0c             	sub    esp,0xc
c00105e4:	31 ed                	xor    ebp,ebp
c00105e6:	53                   	push   ebx
c00105e7:	e8 1c fb ff ff       	call   c0010108 <VgaText::updateCursor()>
c00105ec:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105f1:	83 c4 10             	add    esp,0x10
c00105f4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105f7:	0f b7 f6             	movzx  esi,si
c00105fa:	01 f6                	add    esi,esi
c00105fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105ff:	e9 9c 00 00 00       	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010604:	3c 08                	cmp    al,0x8
c0010606:	75 35                	jne    c001063d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010608:	56                   	push   esi
c0010609:	56                   	push   esi
c001060a:	6a 01                	push   0x1
c001060c:	53                   	push   ebx
c001060d:	e8 42 fe ff ff       	call   c0010454 <VgaText::decrementCursor(bool)>
c0010612:	58                   	pop    eax
c0010613:	5a                   	pop    edx
c0010614:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010617:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001061a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001061d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010620:	6a 20                	push   0x20
c0010622:	53                   	push   ebx
c0010623:	e8 a8 fc ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010628:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001062d:	83 c4 20             	add    esp,0x20
c0010630:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010633:	0f b7 f6             	movzx  esi,si
c0010636:	01 f6                	add    esi,esi
c0010638:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001063b:	eb 63                	jmp    c00106a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001063d:	51                   	push   ecx
c001063e:	51                   	push   ecx
c001063f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010643:	50                   	push   eax
c0010644:	e8 75 fc ff ff       	call   c00102be <VgaText::combineCharAndColour(char, unsigned char)>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	66 89 06             	mov    WORD PTR [esi],ax
c001064f:	39 1d c4 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc4,ebx
c0010655:	75 21                	jne    c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010657:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 1a                	je     c0010678 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001065e:	52                   	push   edx
c001065f:	52                   	push   edx
c0010660:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010663:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010666:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001066e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010671:	51                   	push   ecx
c0010672:	53                   	push   ebx
c0010673:	ff d0                	call   eax
c0010675:	83 c4 20             	add    esp,0x20
c0010678:	83 c6 02             	add    esi,0x2
c001067b:	50                   	push   eax
c001067c:	50                   	push   eax
c001067d:	6a 00                	push   0x0
c001067f:	53                   	push   ebx
c0010680:	e8 7b fd ff ff       	call   c0010400 <VgaText::incrementCursor(bool)>
c0010685:	83 c4 10             	add    esp,0x10
c0010688:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001068c:	75 0d                	jne    c001069b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001068e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010693:	0f b7 f6             	movzx  esi,si
c0010696:	01 f6                	add    esi,esi
c0010698:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001069b:	bd 01 00 00 00       	mov    ebp,0x1
c00106a0:	47                   	inc    edi
c00106a1:	e9 f8 fe ff ff       	jmp    c001059e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00106a6:	83 ec 0c             	sub    esp,0xc
c00106a9:	53                   	push   ebx
c00106aa:	e8 59 fa ff ff       	call   c0010108 <VgaText::updateCursor()>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	89 e8                	mov    eax,ebp
c00106b4:	84 c0                	test   al,al
c00106b6:	74 0c                	je     c00106c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	53                   	push   ebx
c00106bc:	e8 8d fe ff ff       	call   c001054e <VgaText::doUpdate()>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106cb:	83 c4 1c             	add    esp,0x1c
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	5f                   	pop    edi
c00106d1:	5d                   	pop    ebp
c00106d2:	c3                   	ret    
c00106d3:	90                   	nop

c00106d4 <VgaText::clearScreen()>:
c00106d4:	57                   	push   edi
c00106d5:	56                   	push   esi
c00106d6:	31 f6                	xor    esi,esi
c00106d8:	53                   	push   ebx
c00106d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106dd:	52                   	push   edx
c00106de:	6a 00                	push   0x0
c00106e0:	6a 00                	push   0x0
c00106e2:	53                   	push   ebx
c00106e3:	e8 54 fc ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00106e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106ef:	83 c4 10             	add    esp,0x10
c00106f2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106f5:	7e 20                	jle    c0010717 <VgaText::clearScreen()+0x43>
c00106f7:	31 ff                	xor    edi,edi
c00106f9:	50                   	push   eax
c00106fa:	50                   	push   eax
c00106fb:	56                   	push   esi
c00106fc:	57                   	push   edi
c00106fd:	47                   	inc    edi
c00106fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010701:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010704:	6a 20                	push   0x20
c0010706:	53                   	push   ebx
c0010707:	e8 c4 fb ff ff       	call   c00102d0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001070c:	83 c4 20             	add    esp,0x20
c001070f:	83 ff 50             	cmp    edi,0x50
c0010712:	75 e5                	jne    c00106f9 <VgaText::clearScreen()+0x25>
c0010714:	46                   	inc    esi
c0010715:	eb db                	jmp    c00106f2 <VgaText::clearScreen()+0x1e>
c0010717:	83 ec 0c             	sub    esp,0xc
c001071a:	53                   	push   ebx
c001071b:	e8 2e fe ff ff       	call   c001054e <VgaText::doUpdate()>
c0010720:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	5b                   	pop    ebx
c001072b:	5e                   	pop    esi
c001072c:	5f                   	pop    edi
c001072d:	c3                   	ret    

c001072e <VgaText::putchar(char)>:
c001072e:	56                   	push   esi
c001072f:	53                   	push   ebx
c0010730:	83 ec 14             	sub    esp,0x14
c0010733:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010737:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001073b:	3c 5b                	cmp    al,0x5b
c001073d:	75 18                	jne    c0010757 <VgaText::putchar(char)+0x29>
c001073f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010743:	74 1f                	je     c0010764 <VgaText::putchar(char)+0x36>
c0010745:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001074b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010752:	e9 bd 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010757:	3c 1b                	cmp    al,0x1b
c0010759:	75 09                	jne    c0010764 <VgaText::putchar(char)+0x36>
c001075b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001075f:	e9 b0 00 00 00       	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010764:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010767:	84 c9                	test   cl,cl
c0010769:	0f 84 92 00 00 00    	je     c0010801 <VgaText::putchar(char)+0xd3>
c001076f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010772:	80 fa 3e             	cmp    dl,0x3e
c0010775:	77 76                	ja     c00107ed <VgaText::putchar(char)+0xbf>
c0010777:	3c 6d                	cmp    al,0x6d
c0010779:	75 47                	jne    c00107c2 <VgaText::putchar(char)+0x94>
c001077b:	31 f6                	xor    esi,esi
c001077d:	31 d2                	xor    edx,edx
c001077f:	31 c0                	xor    eax,eax
c0010781:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010784:	7e 2d                	jle    c00107b3 <VgaText::putchar(char)+0x85>
c0010786:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001078b:	80 fa 3b             	cmp    dl,0x3b
c001078e:	75 17                	jne    c00107a7 <VgaText::putchar(char)+0x79>
c0010790:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010794:	50                   	push   eax
c0010795:	53                   	push   ebx
c0010796:	e8 83 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c001079b:	59                   	pop    ecx
c001079c:	31 d2                	xor    edx,edx
c001079e:	58                   	pop    eax
c001079f:	31 c0                	xor    eax,eax
c00107a1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00107a5:	eb 09                	jmp    c00107b0 <VgaText::putchar(char)+0x82>
c00107a7:	6b c0 0a             	imul   eax,eax,0xa
c00107aa:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00107ae:	88 ca                	mov    dl,cl
c00107b0:	46                   	inc    esi
c00107b1:	eb ce                	jmp    c0010781 <VgaText::putchar(char)+0x53>
c00107b3:	84 d2                	test   dl,dl
c00107b5:	74 2e                	je     c00107e5 <VgaText::putchar(char)+0xb7>
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 60 f9 ff ff       	call   c001011e <VgaText::doANSI_SGR(int)>
c00107be:	58                   	pop    eax
c00107bf:	5a                   	pop    edx
c00107c0:	eb 23                	jmp    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c2:	3c 4a                	cmp    al,0x4a
c00107c4:	75 1f                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107c6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107ca:	75 19                	jne    c00107e5 <VgaText::putchar(char)+0xb7>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	53                   	push   ebx
c00107d0:	e8 ff fe ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00107d5:	83 c4 0c             	add    esp,0xc
c00107d8:	6a 00                	push   0x0
c00107da:	6a 00                	push   0x0
c00107dc:	53                   	push   ebx
c00107dd:	e8 5a fb ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00107e2:	83 c4 10             	add    esp,0x10
c00107e5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107eb:	eb 27                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c00107ed:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107f0:	83 fa 0e             	cmp    edx,0xe
c00107f3:	7f 1f                	jg     c0010814 <VgaText::putchar(char)+0xe6>
c00107f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107f8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107fb:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107ff:	eb 13                	jmp    c0010814 <VgaText::putchar(char)+0xe6>
c0010801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010804:	0f be c0             	movsx  eax,al
c0010807:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001080a:	50                   	push   eax
c001080b:	53                   	push   ebx
c001080c:	e8 65 fc ff ff       	call   c0010476 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	83 c4 14             	add    esp,0x14
c0010817:	5b                   	pop    ebx
c0010818:	5e                   	pop    esi
c0010819:	c3                   	ret    

c001081a <VgaText::putx(unsigned int)>:
c001081a:	57                   	push   edi
c001081b:	b9 11 00 00 00       	mov    ecx,0x11
c0010820:	56                   	push   esi
c0010821:	be 5a a2 02 c0       	mov    esi,0xc002a25a
c0010826:	53                   	push   ebx
c0010827:	83 ec 20             	sub    esp,0x20
c001082a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001082e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010832:	fc                   	cld    
c0010833:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010835:	be 08 00 00 00       	mov    esi,0x8
c001083a:	50                   	push   eax
c001083b:	50                   	push   eax
c001083c:	89 d8                	mov    eax,ebx
c001083e:	c1 e3 04             	shl    ebx,0x4
c0010841:	c1 e8 1c             	shr    eax,0x1c
c0010844:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010849:	50                   	push   eax
c001084a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001084e:	e8 db fe ff ff       	call   c001072e <VgaText::putchar(char)>
c0010853:	83 c4 10             	add    esp,0x10
c0010856:	4e                   	dec    esi
c0010857:	75 e1                	jne    c001083a <VgaText::putx(unsigned int)+0x20>
c0010859:	83 c4 20             	add    esp,0x20
c001085c:	5b                   	pop    ebx
c001085d:	5e                   	pop    esi
c001085e:	5f                   	pop    edi
c001085f:	c3                   	ret    

c0010860 <VgaText::puts(char const*)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010868:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001086b:	84 c0                	test   al,al
c001086d:	74 12                	je     c0010881 <VgaText::puts(char const*)+0x21>
c001086f:	43                   	inc    ebx
c0010870:	51                   	push   ecx
c0010871:	51                   	push   ecx
c0010872:	50                   	push   eax
c0010873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010877:	e8 b2 fe ff ff       	call   c001072e <VgaText::putchar(char)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	eb e7                	jmp    c0010868 <VgaText::puts(char const*)+0x8>
c0010881:	83 c4 08             	add    esp,0x8
c0010884:	5b                   	pop    ebx
c0010885:	c3                   	ret    

c0010886 <VgaText::VgaText(char const*)>:
c0010886:	57                   	push   edi
c0010887:	56                   	push   esi
c0010888:	53                   	push   ebx
c0010889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088d:	83 ec 08             	sub    esp,0x8
c0010890:	6a 00                	push   0x0
c0010892:	50                   	push   eax
c0010893:	e8 44 05 00 00       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	ba c0 a2 02 c0       	mov    edx,0xc002a2c0
c00108a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a4:	89 10                	mov    DWORD PTR [eax],edx
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00108b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108fc:	8d 50 60             	lea    edx,[eax+0x60]
c00108ff:	bb a0 db 02 c0       	mov    ebx,0xc002dba0
c0010904:	b8 08 00 00 00       	mov    eax,0x8
c0010909:	fc                   	cld    
c001090a:	89 d7                	mov    edi,edx
c001090c:	89 de                	mov    esi,ebx
c001090e:	89 c1                	mov    ecx,eax
c0010910:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	05 82 00 00 00       	add    eax,0x82
c001091b:	83 ec 08             	sub    esp,0x8
c001091e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010922:	50                   	push   eax
c0010923:	e8 e4 fe fe ff       	call   c000080c <strcpy>
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010936:	83 ec 0c             	sub    esp,0xc
c0010939:	6a 01                	push   0x1
c001093b:	e8 df 08 00 00       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0010940:	83 c4 10             	add    esp,0x10
c0010943:	89 c2                	mov    edx,eax
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001094c:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c0010952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010956:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010959:	89 c6                	mov    esi,eax
c001095b:	e8 35 f0 ff ff       	call   c000f995 <Phys::allocatePage()>
c0010960:	68 05 0c 00 00       	push   0xc05
c0010965:	56                   	push   esi
c0010966:	50                   	push   eax
c0010967:	53                   	push   ebx
c0010968:	e8 05 11 00 00       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010974:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010977:	83 ec 04             	sub    esp,0x4
c001097a:	68 00 0f 00 00       	push   0xf00
c001097f:	6a 00                	push   0x0
c0010981:	50                   	push   eax
c0010982:	e8 c9 fd fe ff       	call   c0000750 <memset>
c0010987:	83 c4 10             	add    esp,0x10
c001098a:	83 ec 04             	sub    esp,0x4
c001098d:	6a 00                	push   0x0
c001098f:	6a 07                	push   0x7
c0010991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010995:	e8 18 f8 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001099a:	83 c4 10             	add    esp,0x10
c001099d:	83 ec 04             	sub    esp,0x4
c00109a0:	6a 00                	push   0x0
c00109a2:	6a 00                	push   0x0
c00109a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a8:	e8 8f f9 ff ff       	call   c001033c <VgaText::setCursor(int, int)>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	83 ec 0c             	sub    esp,0xc
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	e8 18 fd ff ff       	call   c00106d4 <VgaText::clearScreen()>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cb:	05 02 01 00 00       	add    eax,0x102
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	68 96 00 00 00       	push   0x96
c00109d8:	6a 00                	push   0x0
c00109da:	50                   	push   eax
c00109db:	e8 70 fd fe ff       	call   c0000750 <memset>
c00109e0:	83 c4 10             	add    esp,0x10
c00109e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e7:	05 98 01 00 00       	add    eax,0x198
c00109ec:	83 ec 04             	sub    esp,0x4
c00109ef:	68 2c 01 00 00       	push   0x12c
c00109f4:	6a 00                	push   0x0
c00109f6:	50                   	push   eax
c00109f7:	e8 54 fd fe ff       	call   c0000750 <memset>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	90                   	nop
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	5f                   	pop    edi
c0010a03:	c3                   	ret    

c0010a04 <VgaText::receiveKey(unsigned char)>:
c0010a04:	55                   	push   ebp
c0010a05:	57                   	push   edi
c0010a06:	56                   	push   esi
c0010a07:	53                   	push   ebx
c0010a08:	83 ec 1c             	sub    esp,0x1c
c0010a0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010a13:	84 db                	test   bl,bl
c0010a15:	0f 84 c9 00 00 00    	je     c0010ae4 <VgaText::receiveKey(unsigned char)+0xe0>
c0010a1b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a21:	80 fb 08             	cmp    bl,0x8
c0010a24:	75 2c                	jne    c0010a52 <VgaText::receiveKey(unsigned char)+0x4e>
c0010a26:	83 ec 0c             	sub    esp,0xc
c0010a29:	57                   	push   edi
c0010a2a:	e8 3d fd fe ff       	call   c000076c <strlen>
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	85 c0                	test   eax,eax
c0010a34:	74 41                	je     c0010a77 <VgaText::receiveKey(unsigned char)+0x73>
c0010a36:	50                   	push   eax
c0010a37:	50                   	push   eax
c0010a38:	6a 08                	push   0x8
c0010a3a:	56                   	push   esi
c0010a3b:	e8 ee fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a40:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a43:	e8 24 fd fe ff       	call   c000076c <strlen>
c0010a48:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a50:	eb 22                	jmp    c0010a74 <VgaText::receiveKey(unsigned char)+0x70>
c0010a52:	0f be c3             	movsx  eax,bl
c0010a55:	52                   	push   edx
c0010a56:	52                   	push   edx
c0010a57:	50                   	push   eax
c0010a58:	56                   	push   esi
c0010a59:	e8 d0 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010a5e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a62:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a67:	59                   	pop    ecx
c0010a68:	5d                   	pop    ebp
c0010a69:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a6d:	50                   	push   eax
c0010a6e:	57                   	push   edi
c0010a6f:	e8 d8 fe fe ff       	call   c000094c <strcat>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a7e:	75 05                	jne    c0010a85 <VgaText::receiveKey(unsigned char)+0x81>
c0010a80:	80 fb 0a             	cmp    bl,0xa
c0010a83:	75 53                	jne    c0010ad8 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a85:	83 ec 0c             	sub    esp,0xc
c0010a88:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a8e:	53                   	push   ebx
c0010a8f:	e8 d8 fc fe ff       	call   c000076c <strlen>
c0010a94:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a97:	89 c5                	mov    ebp,eax
c0010a99:	e8 ce fc fe ff       	call   c000076c <strlen>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010aa5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010aaa:	76 10                	jbe    c0010abc <VgaText::receiveKey(unsigned char)+0xb8>
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	68 6b a2 02 c0       	push   0xc002a26b
c0010ab4:	e8 46 94 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	50                   	push   eax
c0010abd:	50                   	push   eax
c0010abe:	57                   	push   edi
c0010abf:	53                   	push   ebx
c0010ac0:	e8 87 fe fe ff       	call   c000094c <strcat>
c0010ac5:	83 c4 0c             	add    esp,0xc
c0010ac8:	68 96 00 00 00       	push   0x96
c0010acd:	6a 00                	push   0x0
c0010acf:	57                   	push   edi
c0010ad0:	e8 7b fc fe ff       	call   c0000750 <memset>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	56                   	push   esi
c0010adc:	e8 6d fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010ae1:	83 c4 10             	add    esp,0x10
c0010ae4:	83 c4 1c             	add    esp,0x1c
c0010ae7:	5b                   	pop    ebx
c0010ae8:	5e                   	pop    esi
c0010ae9:	5f                   	pop    edi
c0010aea:	5d                   	pop    ebp
c0010aeb:	c3                   	ret    

c0010aec <VgaText::write(unsigned long long, void*, int*)>:
c0010aec:	55                   	push   ebp
c0010aed:	57                   	push   edi
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	83 ec 0c             	sub    esp,0xc
c0010af3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010af7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010afb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010aff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010b06:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b09:	39 eb                	cmp    ebx,ebp
c0010b0b:	74 13                	je     c0010b20 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010b0d:	43                   	inc    ebx
c0010b0e:	50                   	push   eax
c0010b0f:	50                   	push   eax
c0010b10:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010b14:	50                   	push   eax
c0010b15:	56                   	push   esi
c0010b16:	e8 13 fc ff ff       	call   c001072e <VgaText::putchar(char)>
c0010b1b:	83 c4 10             	add    esp,0x10
c0010b1e:	eb e9                	jmp    c0010b09 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b20:	83 ec 0c             	sub    esp,0xc
c0010b23:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b2a:	56                   	push   esi
c0010b2b:	e8 1e fa ff ff       	call   c001054e <VgaText::doUpdate()>
c0010b30:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b34:	89 38                	mov    DWORD PTR [eax],edi
c0010b36:	83 c4 1c             	add    esp,0x1c
c0010b39:	31 c0                	xor    eax,eax
c0010b3b:	5b                   	pop    ebx
c0010b3c:	5e                   	pop    esi
c0010b3d:	5f                   	pop    edi
c0010b3e:	5d                   	pop    ebp
c0010b3f:	c3                   	ret    

c0010b40 <newTerminal(char*)>:
c0010b40:	83 ec 28             	sub    esp,0x28
c0010b43:	68 c4 02 00 00       	push   0x2c4
c0010b48:	e8 4c ea ff ff       	call   c000f599 <malloc>
c0010b4d:	5a                   	pop    edx
c0010b4e:	59                   	pop    ecx
c0010b4f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b53:	50                   	push   eax
c0010b54:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b58:	e8 29 fd ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c0010b5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b61:	83 c4 2c             	add    esp,0x2c
c0010b64:	c3                   	ret    
c0010b65:	90                   	nop

c0010b66 <TSS::TSS()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b71:	90                   	nop
c0010b72:	c3                   	ret    
c0010b73:	90                   	nop

c0010b74 <TSS::setESP(unsigned long)>:
c0010b74:	55                   	push   ebp
c0010b75:	89 e5                	mov    ebp,esp
c0010b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b83:	90                   	nop
c0010b84:	5d                   	pop    ebp
c0010b85:	c3                   	ret    

c0010b86 <TSS::flush()>:
c0010b86:	55                   	push   ebp
c0010b87:	89 e5                	mov    ebp,esp
c0010b89:	83 ec 10             	sub    esp,0x10
c0010b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b91:	83 c8 03             	or     eax,0x3
c0010b94:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b98:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b9c:	66 89 d0             	mov    ax,dx
c0010b9f:	0f 00 d8             	ltr    ax
c0010ba2:	90                   	nop
c0010ba3:	c9                   	leave  
c0010ba4:	c3                   	ret    
c0010ba5:	90                   	nop

c0010ba6 <TSS::setup(unsigned long, unsigned long)>:
c0010ba6:	55                   	push   ebp
c0010ba7:	89 e5                	mov    ebp,esp
c0010ba9:	83 ec 18             	sub    esp,0x18
c0010bac:	83 ec 0c             	sub    esp,0xc
c0010baf:	6a 68                	push   0x68
c0010bb1:	e8 e3 e9 ff ff       	call   c000f599 <malloc>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	89 c2                	mov    edx,eax
c0010bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bbe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	83 ec 04             	sub    esp,0x4
c0010bca:	6a 68                	push   0x68
c0010bcc:	6a 00                	push   0x0
c0010bce:	50                   	push   eax
c0010bcf:	e8 7c fb fe ff       	call   c0000750 <memset>
c0010bd4:	83 c4 10             	add    esp,0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bf8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c4c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c55:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c61:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c6e:	0f 20 da             	mov    edx,cr3
c0010c71:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c74:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c77:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c80:	83 ec 08             	sub    esp,0x8
c0010c83:	50                   	push   eax
c0010c84:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c87:	50                   	push   eax
c0010c88:	e8 05 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c8d:	83 c4 10             	add    esp,0x10
c0010c90:	83 ec 08             	sub    esp,0x8
c0010c93:	6a 68                	push   0x68
c0010c95:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c98:	50                   	push   eax
c0010c99:	e8 10 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ca5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ca8:	83 e0 0f             	and    eax,0xf
c0010cab:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cae:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010cb1:	83 c8 40             	or     eax,0x40
c0010cb4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010cb7:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0010cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cc2:	05 78 01 00 00       	add    eax,0x178
c0010cc7:	83 ec 04             	sub    esp,0x4
c0010cca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010ccd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cd0:	50                   	push   eax
c0010cd1:	e8 0c e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cd6:	83 c4 10             	add    esp,0x10
c0010cd9:	89 c2                	mov    edx,eax
c0010cdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cde:	89 10                	mov    DWORD PTR [eax],edx
c0010ce0:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0010ce5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ceb:	05 78 01 00 00       	add    eax,0x178
c0010cf0:	83 ec 0c             	sub    esp,0xc
c0010cf3:	50                   	push   eax
c0010cf4:	e8 13 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cff:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d01:	c9                   	leave  
c0010d02:	c3                   	ret    
c0010d03:	90                   	nop

c0010d04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d08:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d0f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d14:	75 08                	jne    c0010d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010d16:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d1c:	eb 38                	jmp    c0010d56 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d23:	75 17                	jne    c0010d3c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d2d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d33:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d35:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d39:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d3c:	89 c1                	mov    ecx,eax
c0010d3e:	83 e1 fd             	and    ecx,0xfffffffd
c0010d41:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d47:	74 cd                	je     c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d49:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d4e:	83 e0 ef             	and    eax,0xffffffef
c0010d51:	83 f8 08             	cmp    eax,0x8
c0010d54:	76 c0                	jbe    c0010d16 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d56:	31 c0                	xor    eax,eax
c0010d58:	c3                   	ret    
c0010d59:	90                   	nop

c0010d5a <ReservedFilename::isAtty()>:
c0010d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d5e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d69:	74 09                	je     c0010d74 <ReservedFilename::isAtty()+0x1a>
c0010d6b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d71:	0f 94 c0             	sete   al
c0010d74:	c3                   	ret    
c0010d75:	90                   	nop

c0010d76 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d8a:	75 08                	jne    c0010d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d92:	eb 3d                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d99:	75 17                	jne    c0010db2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010da0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010da3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010daf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010db2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010db7:	75 04                	jne    c0010dbd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010db9:	89 0a                	mov    DWORD PTR [edx],ecx
c0010dbb:	eb 14                	jmp    c0010dd1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010dbd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010dc2:	74 c8                	je     c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dc4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dc9:	83 e0 ef             	and    eax,0xffffffef
c0010dcc:	83 f8 08             	cmp    eax,0x8
c0010dcf:	76 bb                	jbe    c0010d8c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dd1:	31 c0                	xor    eax,eax
c0010dd3:	c3                   	ret    

c0010dd4 <UnixFile::getFileDescriptor()>:
c0010dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ddb:	c3                   	ret    

c0010ddc <UnixFile::UnixFile(int)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 28             	sub    esp,0x28
c0010de0:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c0010de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010de9:	89 10                	mov    DWORD PTR [eax],edx
c0010deb:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010df3:	0f 8f 8c 01 00 00    	jg     c0010f85 <UnixFile::UnixFile(int)+0x1a9>
c0010df9:	a1 a0 ca 02 c0       	mov    eax,ds:0xc002caa0
c0010dfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010e01:	89 15 a0 ca 02 c0    	mov    DWORD PTR ds:0xc002caa0,edx
c0010e07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010e0e:	83 ec 08             	sub    esp,0x8
c0010e11:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010e15:	68 58 dc 02 c0       	push   0xc002dc58
c0010e1a:	e8 27 77 01 00       	call   c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	a0 54 dc 02 c0       	mov    al,ds:0xc002dc54
c0010e27:	83 f0 01             	xor    eax,0x1
c0010e2a:	84 c0                	test   al,al
c0010e2c:	0f 84 54 01 00 00    	je     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010e32:	c6 05 54 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc54,0x1
c0010e39:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e41:	83 ec 0c             	sub    esp,0xc
c0010e44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e48:	e8 4c e7 ff ff       	call   c000f599 <malloc>
c0010e4d:	83 c4 10             	add    esp,0x10
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	83 ec 08             	sub    esp,0x8
c0010e55:	68 03 ff ff 0f       	push   0xfffff03
c0010e5a:	53                   	push   ebx
c0010e5b:	e8 2c 01 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	89 1d 4c dc 02 c0    	mov    DWORD PTR ds:0xc002dc4c,ebx
c0010e69:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e78:	e8 1c e7 ff ff       	call   c000f599 <malloc>
c0010e7d:	83 c4 10             	add    esp,0x10
c0010e80:	89 c3                	mov    ebx,eax
c0010e82:	83 ec 08             	sub    esp,0x8
c0010e85:	68 01 ff ff 0f       	push   0xfffff01
c0010e8a:	53                   	push   ebx
c0010e8b:	e8 fc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	89 1d 50 dc 02 c0    	mov    DWORD PTR ds:0xc002dc50,ebx
c0010e99:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ea8:	e8 ec e6 ff ff       	call   c000f599 <malloc>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	89 c3                	mov    ebx,eax
c0010eb2:	83 ec 08             	sub    esp,0x8
c0010eb5:	68 00 ff ff 0f       	push   0xfffff00
c0010eba:	53                   	push   ebx
c0010ebb:	e8 cc 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ec0:	83 c4 10             	add    esp,0x10
c0010ec3:	89 1d 44 dc 02 c0    	mov    DWORD PTR ds:0xc002dc44,ebx
c0010ec9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010ed1:	83 ec 0c             	sub    esp,0xc
c0010ed4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed8:	e8 bc e6 ff ff       	call   c000f599 <malloc>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	89 c3                	mov    ebx,eax
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	68 02 ff ff 0f       	push   0xfffff02
c0010eea:	53                   	push   ebx
c0010eeb:	e8 9c 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	89 1d 48 dc 02 c0    	mov    DWORD PTR ds:0xc002dc48,ebx
c0010ef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010f01:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010f06:	7f 7e                	jg     c0010f86 <UnixFile::UnixFile(int)+0x1aa>
c0010f08:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010f10:	83 ec 0c             	sub    esp,0xc
c0010f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f17:	e8 7d e6 ff ff       	call   c000f599 <malloc>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	89 c3                	mov    ebx,eax
c0010f21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f25:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f2a:	83 ec 08             	sub    esp,0x8
c0010f2d:	50                   	push   eax
c0010f2e:	53                   	push   ebx
c0010f2f:	e8 58 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3b:	89 1c 85 20 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23e0],ebx
c0010f42:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f51:	e8 43 e6 ff ff       	call   c000f599 <malloc>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	89 c3                	mov    ebx,eax
c0010f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f64:	83 ec 08             	sub    esp,0x8
c0010f67:	50                   	push   eax
c0010f68:	53                   	push   ebx
c0010f69:	e8 1e 00 00 00       	call   c0010f8c <ReservedFilename::ReservedFilename(int)>
c0010f6e:	83 c4 10             	add    esp,0x10
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	89 1c 85 e0 db 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2420],ebx
c0010f7c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f80:	e9 7c ff ff ff       	jmp    c0010f01 <UnixFile::UnixFile(int)+0x125>
c0010f85:	90                   	nop
c0010f86:	83 c4 28             	add    esp,0x28
c0010f89:	5b                   	pop    ebx
c0010f8a:	c3                   	ret    
c0010f8b:	90                   	nop

c0010f8c <ReservedFilename::ReservedFilename(int)>:
c0010f8c:	83 ec 0c             	sub    esp,0xc
c0010f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 3c fe ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	ba a4 a3 02 c0       	mov    edx,0xc002a3a4
c0010fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fac:	89 10                	mov    DWORD PTR [eax],edx
c0010fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fb9:	90                   	nop
c0010fba:	83 c4 0c             	add    esp,0xc
c0010fbd:	c3                   	ret    

c0010fbe <UnixFile::~UnixFile()>:
c0010fbe:	83 ec 1c             	sub    esp,0x1c
c0010fc1:	ba 88 a3 02 c0       	mov    edx,0xc002a388
c0010fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fca:	89 10                	mov    DWORD PTR [eax],edx
c0010fcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fd8:	7f 73                	jg     c001104d <UnixFile::~UnixFile()+0x8f>
c0010fda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fe2:	83 ec 0c             	sub    esp,0xc
c0010fe5:	68 58 dc 02 c0       	push   0xc002dc58
c0010fea:	e8 2b 76 01 00       	call   c002861a <LinkedList<UnixFile>::getFirstElement()>
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ff6:	83 ec 0c             	sub    esp,0xc
c0010ff9:	68 58 dc 02 c0       	push   0xc002dc58
c0010ffe:	e8 1f 76 01 00       	call   c0028622 <LinkedList<UnixFile>::removeFirst()>
c0011003:	83 c4 10             	add    esp,0x10
c0011006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001100a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001100e:	74 40                	je     c0011050 <UnixFile::~UnixFile()+0x92>
c0011010:	83 ec 08             	sub    esp,0x8
c0011013:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011017:	68 58 dc 02 c0       	push   0xc002dc58
c001101c:	e8 25 75 01 00       	call   c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011028:	8d 50 01             	lea    edx,[eax+0x1]
c001102b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001102f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011034:	0f 94 c0             	sete   al
c0011037:	84 c0                	test   al,al
c0011039:	74 a7                	je     c0010fe2 <UnixFile::~UnixFile()+0x24>
c001103b:	83 ec 0c             	sub    esp,0xc
c001103e:	68 60 a3 02 c0       	push   0xc002a360
c0011043:	e8 b7 8e 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	eb 95                	jmp    c0010fe2 <UnixFile::~UnixFile()+0x24>
c001104d:	90                   	nop
c001104e:	eb 01                	jmp    c0011051 <UnixFile::~UnixFile()+0x93>
c0011050:	90                   	nop
c0011051:	90                   	nop
c0011052:	83 c4 1c             	add    esp,0x1c
c0011055:	c3                   	ret    

c0011056 <UnixFile::~UnixFile()>:
c0011056:	83 ec 0c             	sub    esp,0xc
c0011059:	83 ec 0c             	sub    esp,0xc
c001105c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011060:	e8 59 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011065:	83 c4 10             	add    esp,0x10
c0011068:	83 ec 08             	sub    esp,0x8
c001106b:	6a 0c                	push   0xc
c001106d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011071:	e8 45 16 00 00       	call   c00126bb <operator delete(void*, unsigned long)>
c0011076:	83 c4 10             	add    esp,0x10
c0011079:	83 c4 0c             	add    esp,0xc
c001107c:	c3                   	ret    
c001107d:	90                   	nop

c001107e <ReservedFilename::~ReservedFilename()>:
c001107e:	83 ec 0c             	sub    esp,0xc
c0011081:	ba a4 a3 02 c0       	mov    edx,0xc002a3a4
c0011086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108a:	89 10                	mov    DWORD PTR [eax],edx
c001108c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011090:	83 ec 0c             	sub    esp,0xc
c0011093:	50                   	push   eax
c0011094:	e8 25 ff ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	90                   	nop
c001109d:	83 c4 0c             	add    esp,0xc
c00110a0:	c3                   	ret    
c00110a1:	90                   	nop

c00110a2 <ReservedFilename::~ReservedFilename()>:
c00110a2:	83 ec 0c             	sub    esp,0xc
c00110a5:	83 ec 0c             	sub    esp,0xc
c00110a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ac:	e8 cd ff ff ff       	call   c001107e <ReservedFilename::~ReservedFilename()>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	83 ec 08             	sub    esp,0x8
c00110b7:	6a 0c                	push   0xc
c00110b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110bd:	e8 f9 15 00 00       	call   c00126bb <operator delete(void*, unsigned long)>
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	c3                   	ret    

c00110c9 <getFromFileDescriptor(int)>:
c00110c9:	53                   	push   ebx
c00110ca:	83 ec 08             	sub    esp,0x8
c00110cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110d7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110dd:	7f 2c                	jg     c001110b <getFromFileDescriptor(int)+0x42>
c00110df:	83 ec 0c             	sub    esp,0xc
c00110e2:	68 58 dc 02 c0       	push   0xc002dc58
c00110e7:	e8 2e 75 01 00       	call   c002861a <LinkedList<UnixFile>::getFirstElement()>
c00110ec:	83 c4 10             	add    esp,0x10
c00110ef:	85 c0                	test   eax,eax
c00110f1:	75 04                	jne    c00110f7 <getFromFileDescriptor(int)+0x2e>
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb 6e                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c00110f7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110fa:	74 69                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c00110fc:	52                   	push   edx
c00110fd:	52                   	push   edx
c00110fe:	50                   	push   eax
c00110ff:	68 58 dc 02 c0       	push   0xc002dc58
c0011104:	e8 bb 75 01 00       	call   c00286c4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011109:	eb e1                	jmp    c00110ec <getFromFileDescriptor(int)+0x23>
c001110b:	a1 4c dc 02 c0       	mov    eax,ds:0xc002dc4c
c0011110:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011116:	74 4d                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011118:	a1 50 dc 02 c0       	mov    eax,ds:0xc002dc50
c001111d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011123:	74 40                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011125:	a1 48 dc 02 c0       	mov    eax,ds:0xc002dc48
c001112a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011130:	74 33                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c0011132:	a1 44 dc 02 c0       	mov    eax,ds:0xc002dc44
c0011137:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001113d:	74 26                	je     c0011165 <getFromFileDescriptor(int)+0x9c>
c001113f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011145:	83 f8 08             	cmp    eax,0x8
c0011148:	77 09                	ja     c0011153 <getFromFileDescriptor(int)+0x8a>
c001114a:	8b 04 85 20 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd23e0]
c0011151:	eb 12                	jmp    c0011165 <getFromFileDescriptor(int)+0x9c>
c0011153:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011159:	83 fb 08             	cmp    ebx,0x8
c001115c:	77 95                	ja     c00110f3 <getFromFileDescriptor(int)+0x2a>
c001115e:	8b 04 9d e0 db 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2420]
c0011165:	83 c4 08             	add    esp,0x8
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    

c001116a <__static_initialization_and_destruction_0(int, int)>:
c001116a:	83 ec 0c             	sub    esp,0xc
c001116d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011172:	75 34                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011174:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001117c:	75 2a                	jne    c00111a8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001117e:	83 ec 0c             	sub    esp,0xc
c0011181:	68 58 dc 02 c0       	push   0xc002dc58
c0011186:	e8 79 73 01 00       	call   c0028504 <LinkedList<UnixFile>::LinkedList()>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 04             	sub    esp,0x4
c0011191:	68 d8 c8 02 c0       	push   0xc002c8d8
c0011196:	68 58 dc 02 c0       	push   0xc002dc58
c001119b:	68 02 85 02 c0       	push   0xc0028502
c00111a0:	e8 90 14 00 00       	call   c0012635 <__cxa_atexit>
c00111a5:	83 c4 10             	add    esp,0x10
c00111a8:	90                   	nop
c00111a9:	83 c4 0c             	add    esp,0xc
c00111ac:	c3                   	ret    

c00111ad <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00111ad:	83 ec 0c             	sub    esp,0xc
c00111b0:	83 ec 08             	sub    esp,0x8
c00111b3:	68 ff ff 00 00       	push   0xffff
c00111b8:	6a 01                	push   0x1
c00111ba:	e8 ab ff ff ff       	call   c001116a <__static_initialization_and_destruction_0(int, int)>
c00111bf:	83 c4 10             	add    esp,0x10
c00111c2:	83 c4 0c             	add    esp,0xc
c00111c5:	c3                   	ret    

c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111c6:	53                   	push   ebx
c00111c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111cf:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111d5:	89 c8                	mov    eax,ecx
c00111d7:	d1 e8                	shr    eax,1
c00111d9:	03 05 a8 ca 02 c0    	add    eax,DWORD PTR ds:0xc002caa8
c00111df:	83 e1 01             	and    ecx,0x1
c00111e2:	8a 10                	mov    dl,BYTE PTR [eax]
c00111e4:	75 09                	jne    c00111ef <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111e6:	83 e2 f0             	and    edx,0xfffffff0
c00111e9:	09 da                	or     edx,ebx
c00111eb:	88 10                	mov    BYTE PTR [eax],dl
c00111ed:	5b                   	pop    ebx
c00111ee:	c3                   	ret    
c00111ef:	c1 e3 04             	shl    ebx,0x4
c00111f2:	83 e2 0f             	and    edx,0xf
c00111f5:	09 da                	or     edx,ebx
c00111f7:	88 10                	mov    BYTE PTR [eax],dl
c00111f9:	5b                   	pop    ebx
c00111fa:	c3                   	ret    

c00111fb <Virt::getPageState(unsigned long)>:
c00111fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ff:	8b 0d a8 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002caa8
c0011205:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001120b:	89 d0                	mov    eax,edx
c001120d:	d1 e8                	shr    eax,1
c001120f:	83 e2 01             	and    edx,0x1
c0011212:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011215:	75 04                	jne    c001121b <Virt::getPageState(unsigned long)+0x20>
c0011217:	83 e0 0f             	and    eax,0xf
c001121a:	c3                   	ret    
c001121b:	c0 e8 04             	shr    al,0x4
c001121e:	c3                   	ret    

c001121f <Virt::allocateKernelVirtualPages(int)>:
c001121f:	55                   	push   ebp
c0011220:	31 ed                	xor    ebp,ebp
c0011222:	57                   	push   edi
c0011223:	56                   	push   esi
c0011224:	53                   	push   ebx
c0011225:	31 db                	xor    ebx,ebx
c0011227:	83 ec 1c             	sub    esp,0x1c
c001122a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122e:	8b 3d a4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002caa4
c0011234:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011239:	57                   	push   edi
c001123a:	e8 bc ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c001123f:	5a                   	pop    edx
c0011240:	84 c0                	test   al,al
c0011242:	75 3a                	jne    c001127e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011244:	85 db                	test   ebx,ebx
c0011246:	75 02                	jne    c001124a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011248:	89 fd                	mov    ebp,edi
c001124a:	43                   	inc    ebx
c001124b:	39 f3                	cmp    ebx,esi
c001124d:	74 5a                	je     c00112a9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001124f:	47                   	inc    edi
c0011250:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011256:	76 31                	jbe    c0011289 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011258:	c7 05 a4 ca 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002caa4,0xc8000
c0011262:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011267:	75 28                	jne    c0011291 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011269:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001126e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011273:	57                   	push   edi
c0011274:	e8 82 ff ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011279:	5a                   	pop    edx
c001127a:	84 c0                	test   al,al
c001127c:	74 c6                	je     c0011244 <Virt::allocateKernelVirtualPages(int)+0x25>
c001127e:	31 db                	xor    ebx,ebx
c0011280:	47                   	inc    edi
c0011281:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011287:	77 cf                	ja     c0011258 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011289:	89 3d a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edi
c001128f:	eb a8                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 b8 a3 02 c0       	push   0xc002a3b8
c0011299:	e8 61 8c 00 00       	call   c0019eff <Krnl::panic(char const*)>
c001129e:	8b 3d a4 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002caa4
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	eb 90                	jmp    c0011239 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112a9:	89 2d a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,ebp
c00112af:	4b                   	dec    ebx
c00112b0:	74 5f                	je     c0011311 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00112b2:	85 f6                	test   esi,esi
c00112b4:	74 3d                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	89 e8                	mov    eax,ebp
c00112b8:	31 db                	xor    ebx,ebx
c00112ba:	8d 7e ff             	lea    edi,[esi-0x1]
c00112bd:	eb 14                	jmp    c00112d3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112bf:	6a 01                	push   0x1
c00112c1:	43                   	inc    ebx
c00112c2:	50                   	push   eax
c00112c3:	e8 fe fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112c8:	58                   	pop    eax
c00112c9:	39 f3                	cmp    ebx,esi
c00112cb:	5a                   	pop    edx
c00112cc:	74 25                	je     c00112f3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112ce:	a1 a4 ca 02 c0       	mov    eax,ds:0xc002caa4
c00112d3:	8d 50 01             	lea    edx,[eax+0x1]
c00112d6:	85 db                	test   ebx,ebx
c00112d8:	89 15 a4 ca 02 c0    	mov    DWORD PTR ds:0xc002caa4,edx
c00112de:	74 20                	je     c0011300 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112e0:	39 df                	cmp    edi,ebx
c00112e2:	75 db                	jne    c00112bf <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112e4:	6a 03                	push   0x3
c00112e6:	43                   	inc    ebx
c00112e7:	50                   	push   eax
c00112e8:	e8 d9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112ed:	59                   	pop    ecx
c00112ee:	39 f3                	cmp    ebx,esi
c00112f0:	58                   	pop    eax
c00112f1:	75 db                	jne    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f3:	83 c4 1c             	add    esp,0x1c
c00112f6:	89 e8                	mov    eax,ebp
c00112f8:	5b                   	pop    ebx
c00112f9:	c1 e0 0c             	shl    eax,0xc
c00112fc:	5e                   	pop    esi
c00112fd:	5f                   	pop    edi
c00112fe:	5d                   	pop    ebp
c00112ff:	c3                   	ret    
c0011300:	6a 02                	push   0x2
c0011302:	bb 01 00 00 00       	mov    ebx,0x1
c0011307:	50                   	push   eax
c0011308:	e8 b9 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001130d:	58                   	pop    eax
c001130e:	5a                   	pop    edx
c001130f:	eb bd                	jmp    c00112ce <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011311:	6a 04                	push   0x4
c0011313:	8d 45 01             	lea    eax,[ebp+0x1]
c0011316:	55                   	push   ebp
c0011317:	a3 a4 ca 02 c0       	mov    ds:0xc002caa4,eax
c001131c:	e8 a5 fe ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011321:	59                   	pop    ecx
c0011322:	89 e8                	mov    eax,ebp
c0011324:	5b                   	pop    ebx
c0011325:	c1 e0 0c             	shl    eax,0xc
c0011328:	83 c4 1c             	add    esp,0x1c
c001132b:	5b                   	pop    ebx
c001132c:	5e                   	pop    esi
c001132d:	5f                   	pop    edi
c001132e:	5d                   	pop    ebp
c001132f:	c3                   	ret    

c0011330 <Virt::freeSwapfilePage(unsigned long)>:
c0011330:	53                   	push   ebx
c0011331:	8b 15 6c dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc6c
c0011337:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	89 cb                	mov    ebx,ecx
c0011342:	d3 e0                	shl    eax,cl
c0011344:	c1 eb 05             	shr    ebx,0x5
c0011347:	f7 d0                	not    eax
c0011349:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001134c:	5b                   	pop    ebx
c001134d:	c3                   	ret    

c001134e <Virt::swapIDToSector(unsigned long)>:
c001134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011352:	0f af 05 ac ca 02 c0 	imul   eax,DWORD PTR ds:0xc002caac
c0011359:	03 05 b4 ca 02 c0    	add    eax,DWORD PTR ds:0xc002cab4
c001135f:	c3                   	ret    

c0011360 <Virt::allocateSwapfilePage()>:
c0011360:	55                   	push   ebp
c0011361:	31 d2                	xor    edx,edx
c0011363:	57                   	push   edi
c0011364:	56                   	push   esi
c0011365:	53                   	push   ebx
c0011366:	83 ec 0c             	sub    esp,0xc
c0011369:	8b 0d ac ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002caac
c001136f:	a1 b0 ca 02 c0       	mov    eax,ds:0xc002cab0
c0011374:	f7 f1                	div    ecx
c0011376:	39 0d b0 ca 02 c0    	cmp    DWORD PTR ds:0xc002cab0,ecx
c001137c:	72 2d                	jb     c00113ab <Virt::allocateSwapfilePage()+0x4b>
c001137e:	8b 35 6c dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc6c
c0011384:	8b 16                	mov    edx,DWORD PTR [esi]
c0011386:	f6 c2 01             	test   dl,0x1
c0011389:	74 3c                	je     c00113c7 <Virt::allocateSwapfilePage()+0x67>
c001138b:	31 c9                	xor    ecx,ecx
c001138d:	bf 01 00 00 00       	mov    edi,0x1
c0011392:	eb 12                	jmp    c00113a6 <Virt::allocateSwapfilePage()+0x46>
c0011394:	89 fd                	mov    ebp,edi
c0011396:	89 ca                	mov    edx,ecx
c0011398:	d3 e5                	shl    ebp,cl
c001139a:	c1 ea 05             	shr    edx,0x5
c001139d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00113a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113a2:	85 ea                	test   edx,ebp
c00113a4:	74 2a                	je     c00113d0 <Virt::allocateSwapfilePage()+0x70>
c00113a6:	41                   	inc    ecx
c00113a7:	39 c8                	cmp    eax,ecx
c00113a9:	77 e9                	ja     c0011394 <Virt::allocateSwapfilePage()+0x34>
c00113ab:	83 ec 0c             	sub    esp,0xc
c00113ae:	68 fc a5 02 c0       	push   0xc002a5fc
c00113b3:	e8 47 8b 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	31 c9                	xor    ecx,ecx
c00113bd:	83 c4 0c             	add    esp,0xc
c00113c0:	89 c8                	mov    eax,ecx
c00113c2:	5b                   	pop    ebx
c00113c3:	5e                   	pop    esi
c00113c4:	5f                   	pop    edi
c00113c5:	5d                   	pop    ebp
c00113c6:	c3                   	ret    
c00113c7:	89 f3                	mov    ebx,esi
c00113c9:	bd 01 00 00 00       	mov    ebp,0x1
c00113ce:	31 c9                	xor    ecx,ecx
c00113d0:	09 ea                	or     edx,ebp
c00113d2:	89 c8                	mov    eax,ecx
c00113d4:	89 13                	mov    DWORD PTR [ebx],edx
c00113d6:	83 c4 0c             	add    esp,0xc
c00113d9:	5b                   	pop    ebx
c00113da:	5e                   	pop    esi
c00113db:	5f                   	pop    edi
c00113dc:	5d                   	pop    ebp
c00113dd:	c3                   	ret    

c00113de <Virt::virtualMemorySetup()>:
c00113de:	53                   	push   ebx
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 0f                	push   0xf
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 d9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	58                   	pop    eax
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	5a                   	pop    edx
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x6>
c00113f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113fc:	6a 00                	push   0x0
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 c1 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	59                   	pop    ecx
c0011406:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001140c:	58                   	pop    eax
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x1e>
c001140f:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011414:	6a 0f                	push   0xf
c0011416:	53                   	push   ebx
c0011417:	43                   	inc    ebx
c0011418:	e8 a9 fd ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001141d:	58                   	pop    eax
c001141e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011424:	5a                   	pop    edx
c0011425:	75 ed                	jne    c0011414 <Virt::virtualMemorySetup()+0x36>
c0011427:	5b                   	pop    ebx
c0011428:	c3                   	ret    

c0011429 <Virt::setupPageSwapping(int)>:
c0011429:	55                   	push   ebp
c001142a:	57                   	push   edi
c001142b:	56                   	push   esi
c001142c:	53                   	push   ebx
c001142d:	83 ec 28             	sub    esp,0x28
c0011430:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0011434:	68 14 01 00 00       	push   0x114
c0011439:	e8 5b e1 ff ff       	call   c000f599 <malloc>
c001143e:	83 c4 0c             	add    esp,0xc
c0011441:	89 c3                	mov    ebx,eax
c0011443:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c0011449:	68 13 a6 02 c0       	push   0xc002a613
c001144e:	50                   	push   eax
c001144f:	e8 9e 18 00 00       	call   c0012cf2 <File::File(char const*, Process*)>
c0011454:	59                   	pop    ecx
c0011455:	5e                   	pop    esi
c0011456:	6a 01                	push   0x1
c0011458:	53                   	push   ebx
c0011459:	e8 f8 18 00 00       	call   c0012d56 <File::open(FileOpenMode)>
c001145e:	83 c4 10             	add    esp,0x10
c0011461:	85 c0                	test   eax,eax
c0011463:	0f 85 88 01 00 00    	jne    c00115f1 <Virt::setupPageSwapping(int)+0x1c8>
c0011469:	51                   	push   ecx
c001146a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001146e:	50                   	push   eax
c001146f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011473:	50                   	push   eax
c0011474:	53                   	push   ebx
c0011475:	e8 88 1b 00 00       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001147a:	5e                   	pop    esi
c001147b:	5d                   	pop    ebp
c001147c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011480:	68 f8 a3 02 c0       	push   0xc002a3f8
c0011485:	e8 09 13 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001148a:	83 c4 10             	add    esp,0x10
c001148d:	89 f9                	mov    ecx,edi
c001148f:	c1 e1 14             	shl    ecx,0x14
c0011492:	89 c8                	mov    eax,ecx
c0011494:	33 4c 24 08          	xor    ecx,DWORD PTR [esp+0x8]
c0011498:	99                   	cdq    
c0011499:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001149d:	31 d0                	xor    eax,edx
c001149f:	09 c8                	or     eax,ecx
c00114a1:	0f 85 8a 00 00 00    	jne    c0011531 <Virt::setupPageSwapping(int)+0x108>
c00114a7:	83 ec 0c             	sub    esp,0xc
c00114aa:	53                   	push   ebx
c00114ab:	e8 04 19 00 00       	call   c0012db4 <File::close()>
c00114b0:	83 c4 10             	add    esp,0x10
c00114b3:	85 db                	test   ebx,ebx
c00114b5:	74 0c                	je     c00114c3 <Virt::setupPageSwapping(int)+0x9a>
c00114b7:	83 ec 0c             	sub    esp,0xc
c00114ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bc:	53                   	push   ebx
c00114bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	83 ec 08             	sub    esp,0x8
c00114c6:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c00114cb:	c1 e7 0b             	shl    edi,0xb
c00114ce:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00114d6:	68 13 a6 02 c0       	push   0xc002a613
c00114db:	50                   	push   eax
c00114dc:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114df:	89 3d b0 ca 02 c0    	mov    DWORD PTR ds:0xc002cab0,edi
c00114e5:	c6 05 b8 ca 02 c0 43 	mov    BYTE PTR ds:0xc002cab8,0x43
c00114ec:	c1 ef 08             	shr    edi,0x8
c00114ef:	a3 b4 ca 02 c0       	mov    ds:0xc002cab4,eax
c00114f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114f7:	c7 05 ac ca 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002caac,0x8
c0011501:	e8 93 e0 ff ff       	call   c000f599 <malloc>
c0011506:	83 c4 0c             	add    esp,0xc
c0011509:	89 c1                	mov    ecx,eax
c001150b:	a3 6c dc 02 c0       	mov    ds:0xc002dc6c,eax
c0011510:	31 d2                	xor    edx,edx
c0011512:	a1 b0 ca 02 c0       	mov    eax,ds:0xc002cab0
c0011517:	f7 35 ac ca 02 c0    	div    DWORD PTR ds:0xc002caac
c001151d:	c1 e8 05             	shr    eax,0x5
c0011520:	50                   	push   eax
c0011521:	6a 00                	push   0x0
c0011523:	51                   	push   ecx
c0011524:	e8 27 f2 fe ff       	call   c0000750 <memset>
c0011529:	83 c4 2c             	add    esp,0x2c
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	5f                   	pop    edi
c001152f:	5d                   	pop    ebp
c0011530:	c3                   	ret    
c0011531:	83 ec 0c             	sub    esp,0xc
c0011534:	53                   	push   ebx
c0011535:	e8 7a 18 00 00       	call   c0012db4 <File::close()>
c001153a:	58                   	pop    eax
c001153b:	5a                   	pop    edx
c001153c:	6a 12                	push   0x12
c001153e:	53                   	push   ebx
c001153f:	e8 12 18 00 00       	call   c0012d56 <File::open(FileOpenMode)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	85 c0                	test   eax,eax
c0011549:	0f 85 e1 00 00 00    	jne    c0011630 <Virt::setupPageSwapping(int)+0x207>
c001154f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011557:	89 fe                	mov    esi,edi
c0011559:	83 ec 0c             	sub    esp,0xc
c001155c:	c1 e6 08             	shl    esi,0x8
c001155f:	68 00 00 01 00       	push   0x10000
c0011564:	e8 30 e0 ff ff       	call   c000f599 <malloc>
c0011569:	83 c4 0c             	add    esp,0xc
c001156c:	89 c5                	mov    ebp,eax
c001156e:	68 00 00 01 00       	push   0x10000
c0011573:	68 ee 00 00 00       	push   0xee
c0011578:	50                   	push   eax
c0011579:	e8 d2 f1 fe ff       	call   c0000750 <memset>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	85 f6                	test   esi,esi
c0011583:	79 03                	jns    c0011588 <Virt::setupPageSwapping(int)+0x15f>
c0011585:	83 c6 0f             	add    esi,0xf
c0011588:	c1 fe 04             	sar    esi,0x4
c001158b:	4e                   	dec    esi
c001158c:	83 fe ff             	cmp    esi,0xffffffff
c001158f:	74 3d                	je     c00115ce <Virt::setupPageSwapping(int)+0x1a5>
c0011591:	83 ec 0c             	sub    esp,0xc
c0011594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011596:	8d 54 24 10          	lea    edx,[esp+0x10]
c001159a:	52                   	push   edx
c001159b:	55                   	push   ebp
c001159c:	6a 00                	push   0x0
c001159e:	68 00 00 01 00       	push   0x10000
c00115a3:	53                   	push   ebx
c00115a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00115a7:	83 c4 20             	add    esp,0x20
c00115aa:	85 c0                	test   eax,eax
c00115ac:	75 31                	jne    c00115df <Virt::setupPageSwapping(int)+0x1b6>
c00115ae:	81 7c 24 04 00 00 01 00 	cmp    DWORD PTR [esp+0x4],0x10000
c00115b6:	74 d3                	je     c001158b <Virt::setupPageSwapping(int)+0x162>
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	4e                   	dec    esi
c00115bc:	68 45 a6 02 c0       	push   0xc002a645
c00115c1:	e8 39 89 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	83 fe ff             	cmp    esi,0xffffffff
c00115cc:	75 c3                	jne    c0011591 <Virt::setupPageSwapping(int)+0x168>
c00115ce:	83 ec 0c             	sub    esp,0xc
c00115d1:	55                   	push   ebp
c00115d2:	e8 e2 df ff ff       	call   c000f5b9 <rfree>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	e9 c8 fe ff ff       	jmp    c00114a7 <Virt::setupPageSwapping(int)+0x7e>
c00115df:	83 ec 0c             	sub    esp,0xc
c00115e2:	68 45 a6 02 c0       	push   0xc002a645
c00115e7:	e8 13 89 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00115ec:	83 c4 10             	add    esp,0x10
c00115ef:	eb bd                	jmp    c00115ae <Virt::setupPageSwapping(int)+0x185>
c00115f1:	83 ec 0c             	sub    esp,0xc
c00115f4:	68 d8 a3 02 c0       	push   0xc002a3d8
c00115f9:	e8 95 11 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00115fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011601:	e8 c8 18 00 00       	call   c0012ece <File::unlink()>
c0011606:	58                   	pop    eax
c0011607:	5a                   	pop    edx
c0011608:	6a 12                	push   0x12
c001160a:	53                   	push   ebx
c001160b:	e8 46 17 00 00       	call   c0012d56 <File::open(FileOpenMode)>
c0011610:	83 c4 10             	add    esp,0x10
c0011613:	85 c0                	test   eax,eax
c0011615:	0f 84 4e fe ff ff    	je     c0011469 <Virt::setupPageSwapping(int)+0x40>
c001161b:	83 ec 0c             	sub    esp,0xc
c001161e:	68 2a a6 02 c0       	push   0xc002a62a
c0011623:	e8 d7 88 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	e9 39 fe ff ff       	jmp    c0011469 <Virt::setupPageSwapping(int)+0x40>
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	68 2a a6 02 c0       	push   0xc002a62a
c0011638:	e8 c2 88 00 00       	call   c0019eff <Krnl::panic(char const*)>
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	e9 0a ff ff ff       	jmp    c001154f <Virt::setupPageSwapping(int)+0x126>
c0011645:	90                   	nop

c0011646 <VAS::VAS()>:
c0011646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001164a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011655:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	a3 70 dc 02 c0       	mov    ds:0xc002dc70,eax
c0011665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011669:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c001166d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011671:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011678:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001167f:	90                   	nop
c0011680:	c3                   	ret    
c0011681:	90                   	nop

c0011682 <VAS::VAS(VAS*)>:
c0011682:	83 ec 0c             	sub    esp,0xc
c0011685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011689:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011694:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001169b:	83 ec 0c             	sub    esp,0xc
c001169e:	68 1c a4 02 c0       	push   0xc002a41c
c00116a3:	e8 57 88 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	90                   	nop
c00116ac:	83 c4 0c             	add    esp,0xc
c00116af:	c3                   	ret    

c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00116b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116b4:	89 c2                	mov    edx,eax
c00116b6:	c1 e8 0a             	shr    eax,0xa
c00116b9:	c1 ea 16             	shr    edx,0x16
c00116bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00116c1:	19 c9                	sbb    ecx,ecx
c00116c3:	c1 e2 0c             	shl    edx,0xc
c00116c6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00116cc:	25 fc 0f 00 00       	and    eax,0xffc
c00116d1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00116d8:	01 d0                	add    eax,edx
c00116da:	c3                   	ret    
c00116db:	90                   	nop

c00116dc <VAS::getPageTableEntry(unsigned long)>:
c00116dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116e0:	89 ca                	mov    edx,ecx
c00116e2:	c1 e9 0a             	shr    ecx,0xa
c00116e5:	c1 ea 16             	shr    edx,0x16
c00116e8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00116ee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00116f4:	c1 e0 0c             	shl    eax,0xc
c00116f7:	8d 04 08             	lea    eax,[eax+ecx*1]
c00116fa:	c3                   	ret    

c00116fb <Virt::freeKernelVirtualPages(unsigned long)>:
c00116fb:	57                   	push   edi
c00116fc:	56                   	push   esi
c00116fd:	be 01 00 00 00       	mov    esi,0x1
c0011702:	53                   	push   ebx
c0011703:	83 ec 10             	sub    esp,0x10
c0011706:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001170a:	c1 eb 0c             	shr    ebx,0xc
c001170d:	eb 3f                	jmp    c001174e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001170f:	83 ec 08             	sub    esp,0x8
c0011712:	57                   	push   edi
c0011713:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c0011719:	e8 be ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001171e:	83 c4 10             	add    esp,0x10
c0011721:	8b 00                	mov    eax,DWORD PTR [eax]
c0011723:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011727:	f6 c4 04             	test   ah,0x4
c001172a:	75 5f                	jne    c001178b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001172c:	80 fa 04             	cmp    dl,0x4
c001172f:	74 78                	je     c00117a9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011731:	80 fa 02             	cmp    dl,0x2
c0011734:	0f 84 88 00 00 00    	je     c00117c2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001173a:	80 fa 03             	cmp    dl,0x3
c001173d:	0f 84 ad 00 00 00    	je     c00117f0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011743:	fe ca                	dec    dl
c0011745:	0f 84 92 00 00 00    	je     c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001174b:	43                   	inc    ebx
c001174c:	31 f6                	xor    esi,esi
c001174e:	53                   	push   ebx
c001174f:	89 df                	mov    edi,ebx
c0011751:	e8 a5 fa ff ff       	call   c00111fb <Virt::getPageState(unsigned long)>
c0011756:	c1 e7 0c             	shl    edi,0xc
c0011759:	59                   	pop    ecx
c001175a:	84 c0                	test   al,al
c001175c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011760:	75 ad                	jne    c001170f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011762:	83 ec 0c             	sub    esp,0xc
c0011765:	68 4b a6 02 c0       	push   0xc002a64b
c001176a:	e8 90 87 00 00       	call   c0019eff <Krnl::panic(char const*)>
c001176f:	58                   	pop    eax
c0011770:	5a                   	pop    edx
c0011771:	57                   	push   edi
c0011772:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c0011778:	e8 5f ff ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001177d:	83 c4 10             	add    esp,0x10
c0011780:	8b 00                	mov    eax,DWORD PTR [eax]
c0011782:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011786:	f6 c4 04             	test   ah,0x4
c0011789:	74 c0                	je     c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001178b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001178f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011794:	83 ec 0c             	sub    esp,0xc
c0011797:	50                   	push   eax
c0011798:	e8 87 e1 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00117a4:	80 fa 04             	cmp    dl,0x4
c00117a7:	75 88                	jne    c0011731 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00117a9:	89 f0                	mov    eax,esi
c00117ab:	84 c0                	test   al,al
c00117ad:	75 47                	jne    c00117f6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00117af:	c7 44 24 20 40 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a440
c00117b7:	83 c4 10             	add    esp,0x10
c00117ba:	5b                   	pop    ebx
c00117bb:	5e                   	pop    esi
c00117bc:	5f                   	pop    edi
c00117bd:	e9 3d 87 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c00117c2:	89 f0                	mov    eax,esi
c00117c4:	84 c0                	test   al,al
c00117c6:	75 15                	jne    c00117dd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00117c8:	83 ec 0c             	sub    esp,0xc
c00117cb:	68 67 a6 02 c0       	push   0xc002a667
c00117d0:	e8 2a 87 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	e9 6e ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117dd:	83 ec 08             	sub    esp,0x8
c00117e0:	6a 00                	push   0x0
c00117e2:	53                   	push   ebx
c00117e3:	e8 de f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	e9 5b ff ff ff       	jmp    c001174b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00117f0:	89 f0                	mov    eax,esi
c00117f2:	84 c0                	test   al,al
c00117f4:	75 15                	jne    c001180b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00117f6:	83 ec 08             	sub    esp,0x8
c00117f9:	6a 00                	push   0x0
c00117fb:	53                   	push   ebx
c00117fc:	e8 c5 f9 ff ff       	call   c00111c6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011801:	83 c4 10             	add    esp,0x10
c0011804:	83 c4 10             	add    esp,0x10
c0011807:	5b                   	pop    ebx
c0011808:	5e                   	pop    esi
c0011809:	5f                   	pop    edi
c001180a:	c3                   	ret    
c001180b:	c7 44 24 20 83 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a683
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	5b                   	pop    ebx
c0011817:	5e                   	pop    esi
c0011818:	5f                   	pop    edi
c0011819:	e9 e1 86 00 00       	jmp    c0019eff <Krnl::panic(char const*)>

c001181e <VAS::freeAllocatedPages(unsigned long)>:
c001181e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011822:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011826:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001182a:	74 09                	je     c0011835 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001182c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011830:	e9 c6 fe ff ff       	jmp    c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011835:	c7 44 24 04 64 a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a464
c001183d:	e9 51 0f 00 00       	jmp    c0012793 <Dbg::kprintf(char const*, ...)>

c0011842 <VAS::virtualToPhysical(unsigned long)>:
c0011842:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011846:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001184a:	e8 8d fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001184f:	5a                   	pop    edx
c0011850:	8b 00                	mov    eax,DWORD PTR [eax]
c0011852:	59                   	pop    ecx
c0011853:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011858:	c3                   	ret    
c0011859:	90                   	nop

c001185a <VAS::reflagRange(unsigned long, int, int, int)>:
c001185a:	55                   	push   ebp
c001185b:	57                   	push   edi
c001185c:	56                   	push   esi
c001185d:	53                   	push   ebx
c001185e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011862:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011866:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001186a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001186e:	85 db                	test   ebx,ebx
c0011870:	7e 22                	jle    c0011894 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011872:	c1 e3 0c             	shl    ebx,0xc
c0011875:	01 f3                	add    ebx,esi
c0011877:	56                   	push   esi
c0011878:	81 c6 00 10 00 00    	add    esi,0x1000
c001187e:	55                   	push   ebp
c001187f:	e8 58 fe ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0011884:	5a                   	pop    edx
c0011885:	59                   	pop    ecx
c0011886:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011888:	21 f9                	and    ecx,edi
c001188a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001188e:	39 f3                	cmp    ebx,esi
c0011890:	89 08                	mov    DWORD PTR [eax],ecx
c0011892:	75 e3                	jne    c0011877 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011894:	5b                   	pop    ebx
c0011895:	5e                   	pop    esi
c0011896:	5f                   	pop    edi
c0011897:	5d                   	pop    ebp
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <VAS::setToWriteCombining(unsigned long, int)>:
c001189a:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001189f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00118a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00118ac:	75 01                	jne    c00118af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00118ae:	c3                   	ret    
c00118af:	68 80 00 00 00       	push   0x80
c00118b4:	6a ff                	push   0xffffffff
c00118b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118c2:	e8 93 ff ff ff       	call   c001185a <VAS::reflagRange(unsigned long, int, int, int)>
c00118c7:	83 c4 14             	add    esp,0x14
c00118ca:	c3                   	ret    
c00118cb:	90                   	nop

c00118cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00118cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00118d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00118df:	19 c0                	sbb    eax,eax
c00118e1:	83 ca 03             	or     edx,0x3
c00118e4:	83 e0 fc             	and    eax,0xfffffffc
c00118e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00118ee:	0f 20 d8             	mov    eax,cr3
c00118f1:	0f 22 d8             	mov    cr3,eax
c00118f4:	c3                   	ret    
c00118f5:	90                   	nop

c00118f6 <VAS::~VAS()>:
c00118f6:	83 ec 2c             	sub    esp,0x2c
c00118f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011901:	fa                   	cli    
c0011902:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0011907:	40                   	inc    eax
c0011908:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001190d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011912:	8b 00                	mov    eax,DWORD PTR [eax]
c0011914:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011917:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001191d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011921:	6a 01                	push   0x1
c0011923:	50                   	push   eax
c0011924:	e8 a3 ff ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c0011929:	83 c4 0c             	add    esp,0xc
c001192c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011934:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001193c:	0f 8f d4 00 00 00    	jg     c0011a16 <VAS::~VAS()+0x120>
c0011942:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011946:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001194d:	c1 e2 02             	shl    edx,0x2
c0011950:	01 d0                	add    eax,edx
c0011952:	8b 00                	mov    eax,DWORD PTR [eax]
c0011954:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195c:	83 e0 01             	and    eax,0x1
c001195f:	0f 84 a8 00 00 00    	je     c0011a0d <VAS::~VAS()+0x117>
c0011965:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001196d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011975:	7f 72                	jg     c00119e9 <VAS::~VAS()+0xf3>
c0011977:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197b:	c1 e0 0a             	shl    eax,0xa
c001197e:	89 c2                	mov    edx,eax
c0011980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011984:	01 d0                	add    eax,edx
c0011986:	c1 e0 0c             	shl    eax,0xc
c0011989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001198d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011992:	8b 00                	mov    eax,DWORD PTR [eax]
c0011994:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011997:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001199d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00119a1:	6a 01                	push   0x1
c00119a3:	50                   	push   eax
c00119a4:	e8 07 fd ff ff       	call   c00116b0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00119a9:	83 c4 0c             	add    esp,0xc
c00119ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00119ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119be:	25 01 04 00 00       	and    eax,0x401
c00119c3:	3d 01 04 00 00       	cmp    eax,0x401
c00119c8:	75 19                	jne    c00119e3 <VAS::~VAS()+0xed>
c00119ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	50                   	push   eax
c00119d7:	e8 48 df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00119e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00119e7:	eb 84                	jmp    c001196d <VAS::~VAS()+0x77>
c00119e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ed:	25 00 04 00 00       	and    eax,0x400
c00119f2:	74 19                	je     c0011a0d <VAS::~VAS()+0x117>
c00119f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	50                   	push   eax
c0011a01:	e8 1e df ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a06:	83 c4 10             	add    esp,0x10
c0011a09:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a0d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011a11:	e9 1e ff ff ff       	jmp    c0011934 <VAS::~VAS()+0x3e>
c0011a16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	50                   	push   eax
c0011a21:	e8 d5 fc ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011a26:	83 c4 10             	add    esp,0x10
c0011a29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	50                   	push   eax
c0011a34:	e8 eb de ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c0011a39:	83 c4 10             	add    esp,0x10
c0011a3c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a44:	c1 e0 02             	shl    eax,0x2
c0011a47:	83 ec 08             	sub    esp,0x8
c0011a4a:	50                   	push   eax
c0011a4b:	68 88 a4 02 c0       	push   0xc002a488
c0011a50:	e8 3e 0d 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0011a5d:	48                   	dec    eax
c0011a5e:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0011a63:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0011a68:	85 c0                	test   eax,eax
c0011a6a:	75 01                	jne    c0011a6d <VAS::~VAS()+0x177>
c0011a6c:	fb                   	sti    
c0011a6d:	90                   	nop
c0011a6e:	83 c4 2c             	add    esp,0x2c
c0011a71:	c3                   	ret    

c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011a72:	55                   	push   ebp
c0011a73:	57                   	push   edi
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	83 ec 1c             	sub    esp,0x1c
c0011a79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a81:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011a87:	77 08                	ja     c0011a91 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011a89:	0f 20 d8             	mov    eax,cr3
c0011a8c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011a8f:	75 47                	jne    c0011ad8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011a91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a95:	09 d8                	or     eax,ebx
c0011a97:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a9c:	75 57                	jne    c0011af5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011a9e:	89 de                	mov    esi,ebx
c0011aa0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aa3:	c1 ee 16             	shr    esi,0x16
c0011aa6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011aad:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ab1:	74 54                	je     c0011b07 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ab3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ab7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011abd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011ac1:	c1 e6 0c             	shl    esi,0xc
c0011ac4:	c1 eb 0a             	shr    ebx,0xa
c0011ac7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011acd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011ad0:	83 c4 1c             	add    esp,0x1c
c0011ad3:	5b                   	pop    ebx
c0011ad4:	5e                   	pop    esi
c0011ad5:	5f                   	pop    edi
c0011ad6:	5d                   	pop    ebp
c0011ad7:	c3                   	ret    
c0011ad8:	83 ec 0c             	sub    esp,0xc
c0011adb:	68 a8 a4 02 c0       	push   0xc002a4a8
c0011ae0:	e8 ae 0c 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0011ae5:	83 c4 10             	add    esp,0x10
c0011ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aec:	09 d8                	or     eax,ebx
c0011aee:	a9 ff 0f 00 00       	test   eax,0xfff
c0011af3:	74 a9                	je     c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011af5:	83 ec 0c             	sub    esp,0xc
c0011af8:	68 10 a5 02 c0       	push   0xc002a510
c0011afd:	e8 fd 83 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	eb 97                	jmp    c0011a9e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011b07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011b0b:	e8 85 de ff ff       	call   c000f995 <Phys::allocatePage()>
c0011b10:	83 ec 0c             	sub    esp,0xc
c0011b13:	89 c5                	mov    ebp,eax
c0011b15:	8b 0d 70 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc70
c0011b1b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011b1f:	6a 01                	push   0x1
c0011b21:	e8 f9 f6 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011b26:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011b2d:	6a 01                	push   0x1
c0011b2f:	50                   	push   eax
c0011b30:	55                   	push   ebp
c0011b31:	81 cd 07 04 00 00    	or     ebp,0x407
c0011b37:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b3b:	51                   	push   ecx
c0011b3c:	e8 27 02 00 00       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b41:	83 c4 1c             	add    esp,0x1c
c0011b44:	68 00 10 00 00       	push   0x1000
c0011b49:	6a 00                	push   0x0
c0011b4b:	50                   	push   eax
c0011b4c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011b50:	e8 fb eb fe ff       	call   c0000750 <memset>
c0011b55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011b59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011b5c:	e8 9a fb ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011b61:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011b65:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011b68:	83 c4 10             	add    esp,0x10
c0011b6b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011b6e:	e9 40 ff ff ff       	jmp    c0011ab3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011b73:	90                   	nop

c0011b74 <VAS::allocatePages(int, int)>:
c0011b74:	55                   	push   ebp
c0011b75:	57                   	push   edi
c0011b76:	56                   	push   esi
c0011b77:	53                   	push   ebx
c0011b78:	83 ec 1c             	sub    esp,0x1c
c0011b7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011b7f:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0011b84:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b8a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011b90:	83 e0 01             	and    eax,0x1
c0011b93:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011b97:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b9b:	0f 85 cc 00 00 00    	jne    c0011c6d <VAS::allocatePages(int, int)+0xf9>
c0011ba1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ba8:	85 c0                	test   eax,eax
c0011baa:	0f 84 a1 00 00 00    	je     c0011c51 <VAS::allocatePages(int, int)+0xdd>
c0011bb0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bb8:	c1 e6 0c             	shl    esi,0xc
c0011bbb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011bbf:	85 c0                	test   eax,eax
c0011bc1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011bc4:	7e 33                	jle    c0011bf9 <VAS::allocatePages(int, int)+0x85>
c0011bc6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011bca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bce:	81 cd 00 04 00 00    	or     ebp,0x400
c0011bd4:	e8 bc dd ff ff       	call   c000f995 <Phys::allocatePage()>
c0011bd9:	55                   	push   ebp
c0011bda:	53                   	push   ebx
c0011bdb:	50                   	push   eax
c0011bdc:	57                   	push   edi
c0011bdd:	e8 90 fe ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011be2:	83 c4 10             	add    esp,0x10
c0011be5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bea:	74 03                	je     c0011bef <VAS::allocatePages(int, int)+0x7b>
c0011bec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bef:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf5:	39 de                	cmp    esi,ebx
c0011bf7:	75 db                	jne    c0011bd4 <VAS::allocatePages(int, int)+0x60>
c0011bf9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bfe:	75 12                	jne    c0011c12 <VAS::allocatePages(int, int)+0x9e>
c0011c00:	0f 20 d8             	mov    eax,cr3
c0011c03:	0f 22 d8             	mov    cr3,eax
c0011c06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0a:	83 c4 1c             	add    esp,0x1c
c0011c0d:	5b                   	pop    ebx
c0011c0e:	5e                   	pop    esi
c0011c0f:	5f                   	pop    edi
c0011c10:	5d                   	pop    ebp
c0011c11:	c3                   	ret    
c0011c12:	c1 ee 0a             	shr    esi,0xa
c0011c15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c19:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011c1f:	c1 eb 0a             	shr    ebx,0xa
c0011c22:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011c28:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c2e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c34:	39 c3                	cmp    ebx,eax
c0011c36:	77 ce                	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011c38:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c41:	39 d8                	cmp    eax,ebx
c0011c43:	73 f3                	jae    c0011c38 <VAS::allocatePages(int, int)+0xc4>
c0011c45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c49:	83 c4 1c             	add    esp,0x1c
c0011c4c:	5b                   	pop    ebx
c0011c4d:	5e                   	pop    esi
c0011c4e:	5f                   	pop    edi
c0011c4f:	5d                   	pop    ebp
c0011c50:	c3                   	ret    
c0011c51:	83 ec 0c             	sub    esp,0xc
c0011c54:	68 34 a5 02 c0       	push   0xc002a534
c0011c59:	e8 a1 82 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0011c5e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c65:	83 c4 10             	add    esp,0x10
c0011c68:	e9 43 ff ff ff       	jmp    c0011bb0 <VAS::allocatePages(int, int)+0x3c>
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011c74:	e8 a6 f5 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011c79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011c85:	0f 87 9b 00 00 00    	ja     c0011d26 <VAS::allocatePages(int, int)+0x1b2>
c0011c8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011c8f:	85 d2                	test   edx,edx
c0011c91:	7e 3c                	jle    c0011ccf <VAS::allocatePages(int, int)+0x15b>
c0011c93:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c97:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011c9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011c9f:	c1 e5 0c             	shl    ebp,0xc
c0011ca2:	81 ce 00 04 00 00    	or     esi,0x400
c0011ca8:	01 dd                	add    ebp,ebx
c0011caa:	e8 e6 dc ff ff       	call   c000f995 <Phys::allocatePage()>
c0011caf:	56                   	push   esi
c0011cb0:	53                   	push   ebx
c0011cb1:	50                   	push   eax
c0011cb2:	57                   	push   edi
c0011cb3:	e8 ba fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc0:	74 03                	je     c0011cc5 <VAS::allocatePages(int, int)+0x151>
c0011cc2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cc5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ccb:	39 dd                	cmp    ebp,ebx
c0011ccd:	75 db                	jne    c0011caa <VAS::allocatePages(int, int)+0x136>
c0011ccf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cd4:	0f 84 26 ff ff ff    	je     c0011c00 <VAS::allocatePages(int, int)+0x8c>
c0011cda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011cde:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ce2:	89 d3                	mov    ebx,edx
c0011ce4:	c1 e0 0c             	shl    eax,0xc
c0011ce7:	c1 eb 0a             	shr    ebx,0xa
c0011cea:	01 d0                	add    eax,edx
c0011cec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cf2:	c1 e8 0a             	shr    eax,0xa
c0011cf5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cfb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d00:	2d 00 00 40 00       	sub    eax,0x400000
c0011d05:	39 c3                	cmp    ebx,eax
c0011d07:	0f 87 f9 fe ff ff    	ja     c0011c06 <VAS::allocatePages(int, int)+0x92>
c0011d0d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d10:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d16:	39 d8                	cmp    eax,ebx
c0011d18:	73 f3                	jae    c0011d0d <VAS::allocatePages(int, int)+0x199>
c0011d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1e:	83 c4 1c             	add    esp,0x1c
c0011d21:	5b                   	pop    ebx
c0011d22:	5e                   	pop    esi
c0011d23:	5f                   	pop    edi
c0011d24:	5d                   	pop    ebp
c0011d25:	c3                   	ret    
c0011d26:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0011d2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d31:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011d38:	0f 84 4d ff ff ff    	je     c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d3e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011d46:	e9 40 ff ff ff       	jmp    c0011c8b <VAS::allocatePages(int, int)+0x117>
c0011d4b:	90                   	nop

c0011d4c <VAS::setCPUSpecific(unsigned long)>:
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	6a 05                	push   0x5
c0011d51:	68 00 00 40 c2       	push   0xc2400000
c0011d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011d5e:	e8 0f fd ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d63:	83 c4 1c             	add    esp,0x1c
c0011d66:	c3                   	ret    
c0011d67:	90                   	nop

c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011d68:	55                   	push   ebp
c0011d69:	57                   	push   edi
c0011d6a:	56                   	push   esi
c0011d6b:	53                   	push   ebx
c0011d6c:	83 ec 1c             	sub    esp,0x1c
c0011d6f:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0011d74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011d7e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011d82:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011d88:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011d8c:	83 e0 01             	and    eax,0x1
c0011d8f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d97:	85 c0                	test   eax,eax
c0011d99:	7e 39                	jle    c0011dd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011d9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d9f:	89 f3                	mov    ebx,esi
c0011da1:	c1 e0 0c             	shl    eax,0xc
c0011da4:	01 f0                	add    eax,esi
c0011da6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011daa:	55                   	push   ebp
c0011dab:	53                   	push   ebx
c0011dac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011db0:	29 f0                	sub    eax,esi
c0011db2:	01 d8                	add    eax,ebx
c0011db4:	50                   	push   eax
c0011db5:	57                   	push   edi
c0011db6:	e8 b7 fc ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011dbb:	83 c4 10             	add    esp,0x10
c0011dbe:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dc3:	74 03                	je     c0011dc8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011dc5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011dc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011dce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011dd2:	75 d6                	jne    c0011daa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011dd4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011dd9:	75 10                	jne    c0011deb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011ddb:	0f 20 d8             	mov    eax,cr3
c0011dde:	0f 22 d8             	mov    cr3,eax
c0011de1:	83 c4 1c             	add    esp,0x1c
c0011de4:	89 f0                	mov    eax,esi
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	5d                   	pop    ebp
c0011dea:	c3                   	ret    
c0011deb:	89 f3                	mov    ebx,esi
c0011ded:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011df1:	c1 eb 0a             	shr    ebx,0xa
c0011df4:	c1 e0 0c             	shl    eax,0xc
c0011df7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011dfd:	01 f0                	add    eax,esi
c0011dff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e05:	c1 e8 0a             	shr    eax,0xa
c0011e08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0d:	2d 00 00 40 00       	sub    eax,0x400000
c0011e12:	39 c3                	cmp    ebx,eax
c0011e14:	77 cb                	ja     c0011de1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011e16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e19:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e1f:	39 d8                	cmp    eax,ebx
c0011e21:	73 f3                	jae    c0011e16 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011e23:	83 c4 1c             	add    esp,0x1c
c0011e26:	89 f0                	mov    eax,esi
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	5d                   	pop    ebp
c0011e2c:	c3                   	ret    
c0011e2d:	90                   	nop

c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011e2e:	55                   	push   ebp
c0011e2f:	57                   	push   edi
c0011e30:	56                   	push   esi
c0011e31:	53                   	push   ebx
c0011e32:	83 ec 1c             	sub    esp,0x1c
c0011e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e39:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011e3d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011e41:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011e45:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e4a:	75 4a                	jne    c0011e96 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011e4c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011e50:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e53:	c1 eb 16             	shr    ebx,0x16
c0011e56:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011e5d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011e61:	74 4d                	je     c0011eb0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011e63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e67:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011e6b:	c1 e8 0a             	shr    eax,0xa
c0011e6e:	80 fa 01             	cmp    dl,0x1
c0011e71:	19 d2                	sbb    edx,edx
c0011e73:	c1 e3 0c             	shl    ebx,0xc
c0011e76:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011e7a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011e80:	25 fc 0f 00 00       	and    eax,0xffc
c0011e85:	01 d8                	add    eax,ebx
c0011e87:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011e8e:	83 c4 1c             	add    esp,0x1c
c0011e91:	5b                   	pop    ebx
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	5d                   	pop    ebp
c0011e95:	c3                   	ret    
c0011e96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e9a:	83 ec 0c             	sub    esp,0xc
c0011e9d:	68 60 a5 02 c0       	push   0xc002a560
c0011ea2:	e8 58 80 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011eae:	eb 9c                	jmp    c0011e4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011eb0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eb4:	e8 dc da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	89 c5                	mov    ebp,eax
c0011ebe:	8b 0d 70 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc70
c0011ec4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ec8:	6a 01                	push   0x1
c0011eca:	e8 50 f3 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011ecf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ed6:	6a 01                	push   0x1
c0011ed8:	50                   	push   eax
c0011ed9:	55                   	push   ebp
c0011eda:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ee0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011ee4:	51                   	push   ecx
c0011ee5:	e8 7e fe ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011eea:	83 c4 1c             	add    esp,0x1c
c0011eed:	68 00 10 00 00       	push   0x1000
c0011ef2:	6a 00                	push   0x0
c0011ef4:	50                   	push   eax
c0011ef5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ef9:	e8 52 e8 fe ff       	call   c0000750 <memset>
c0011efe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f02:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f05:	e8 f1 f7 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0011f0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011f13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f17:	e9 47 ff ff ff       	jmp    c0011e63 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011f1c <VAS::VAS(bool)>:
c0011f1c:	53                   	push   ebx
c0011f1d:	83 ec 28             	sub    esp,0x28
c0011f20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011f28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f42:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011f46:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011f49:	e8 47 da ff ff       	call   c000f995 <Phys::allocatePage()>
c0011f4e:	89 c2                	mov    edx,eax
c0011f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f54:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011f57:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c0011f5d:	83 ec 0c             	sub    esp,0xc
c0011f60:	6a 01                	push   0x1
c0011f62:	e8 b8 f2 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	89 c2                	mov    edx,eax
c0011f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011f73:	83 ec 0c             	sub    esp,0xc
c0011f76:	6a 03                	push   0x3
c0011f78:	6a 01                	push   0x1
c0011f7a:	52                   	push   edx
c0011f7b:	50                   	push   eax
c0011f7c:	53                   	push   ebx
c0011f7d:	e8 e6 fd ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f82:	83 c4 20             	add    esp,0x20
c0011f85:	89 c2                	mov    edx,eax
c0011f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011f8e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011f96:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011f9e:	7f 1c                	jg     c0011fbc <VAS::VAS(bool)+0xa0>
c0011fa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fa7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011fab:	c1 e2 02             	shl    edx,0x2
c0011fae:	01 d0                	add    eax,edx
c0011fb0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011fb6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011fba:	eb da                	jmp    c0011f96 <VAS::VAS(bool)+0x7a>
c0011fbc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011fc4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011fcc:	7f 7a                	jg     c0012048 <VAS::VAS(bool)+0x12c>
c0011fce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fd2:	2d 00 02 00 00       	sub    eax,0x200
c0011fd7:	c1 e0 0c             	shl    eax,0xc
c0011fda:	83 c8 03             	or     eax,0x3
c0011fdd:	89 c2                	mov    edx,eax
c0011fdf:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0011fe4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ff0:	83 e0 10             	and    eax,0x10
c0011ff3:	84 c0                	test   al,al
c0011ff5:	74 07                	je     c0011ffe <VAS::VAS(bool)+0xe2>
c0011ff7:	b8 00 01 00 00       	mov    eax,0x100
c0011ffc:	eb 05                	jmp    c0012003 <VAS::VAS(bool)+0xe7>
c0011ffe:	b8 00 00 00 00       	mov    eax,0x0
c0012003:	09 d0                	or     eax,edx
c0012005:	89 c1                	mov    ecx,eax
c0012007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001200b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001200e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012012:	c1 e2 02             	shl    edx,0x2
c0012015:	01 d0                	add    eax,edx
c0012017:	89 ca                	mov    edx,ecx
c0012019:	89 10                	mov    DWORD PTR [eax],edx
c001201b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001201f:	2d 40 03 00 00       	sub    eax,0x340
c0012024:	83 f8 7f             	cmp    eax,0x7f
c0012027:	77 16                	ja     c001203f <VAS::VAS(bool)+0x123>
c0012029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001202d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012034:	c1 e2 02             	shl    edx,0x2
c0012037:	01 d0                	add    eax,edx
c0012039:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001203f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012043:	e9 7c ff ff ff       	jmp    c0011fc4 <VAS::VAS(bool)+0xa8>
c0012048:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001204d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012053:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012059:	83 e0 10             	and    eax,0x10
c001205c:	84 c0                	test   al,al
c001205e:	74 07                	je     c0012067 <VAS::VAS(bool)+0x14b>
c0012060:	b8 03 41 00 00       	mov    eax,0x4103
c0012065:	eb 05                	jmp    c001206c <VAS::VAS(bool)+0x150>
c0012067:	b8 03 40 00 00       	mov    eax,0x4003
c001206c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012070:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012073:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012079:	89 02                	mov    DWORD PTR [edx],eax
c001207b:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0012080:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001208c:	83 ec 08             	sub    esp,0x8
c001208f:	50                   	push   eax
c0012090:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012094:	e8 b3 fc ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120a3:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00120a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00120b4:	83 e0 10             	and    eax,0x10
c00120b7:	84 c0                	test   al,al
c00120b9:	74 07                	je     c00120c2 <VAS::VAS(bool)+0x1a6>
c00120bb:	b8 00 01 00 00       	mov    eax,0x100
c00120c0:	eb 05                	jmp    c00120c7 <VAS::VAS(bool)+0x1ab>
c00120c2:	b8 00 00 00 00       	mov    eax,0x0
c00120c7:	09 c2                	or     edx,eax
c00120c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120d0:	05 fc 0f 00 00       	add    eax,0xffc
c00120d5:	83 ca 03             	or     edx,0x3
c00120d8:	89 10                	mov    DWORD PTR [eax],edx
c00120da:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00120df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120e5:	83 ec 0c             	sub    esp,0xc
c00120e8:	50                   	push   eax
c00120e9:	e8 de 1d 00 00       	call   c0013ecc <Device::getName()>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	83 ec 08             	sub    esp,0x8
c00120f4:	68 9d a6 02 c0       	push   0xc002a69d
c00120f9:	50                   	push   eax
c00120fa:	e8 99 e7 fe ff       	call   c0000898 <strcmp>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	85 c0                	test   eax,eax
c0012104:	0f 94 c0             	sete   al
c0012107:	84 c0                	test   al,al
c0012109:	0f 84 87 00 00 00    	je     c0012196 <VAS::VAS(bool)+0x27a>
c001210f:	fa                   	cli    
c0012110:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0012115:	40                   	inc    eax
c0012116:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001211b:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0012120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012126:	05 7c 09 00 00       	add    eax,0x97c
c001212b:	83 ec 0c             	sub    esp,0xc
c001212e:	50                   	push   eax
c001212f:	e8 ea ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012134:	83 c4 10             	add    esp,0x10
c0012137:	25 00 f0 ff ff       	and    eax,0xfffff000
c001213c:	89 c3                	mov    ebx,eax
c001213e:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0012143:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012149:	05 7c 09 00 00       	add    eax,0x97c
c001214e:	83 ec 0c             	sub    esp,0xc
c0012151:	50                   	push   eax
c0012152:	e8 c7 ce ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	83 ec 08             	sub    esp,0x8
c001215d:	50                   	push   eax
c001215e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012162:	e8 75 f5 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012167:	83 c4 10             	add    esp,0x10
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012171:	6a 11                	push   0x11
c0012173:	53                   	push   ebx
c0012174:	50                   	push   eax
c0012175:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012179:	e8 f4 f8 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001217e:	83 c4 10             	add    esp,0x10
c0012181:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0012186:	48                   	dec    eax
c0012187:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001218c:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0012191:	85 c0                	test   eax,eax
c0012193:	75 01                	jne    c0012196 <VAS::VAS(bool)+0x27a>
c0012195:	fb                   	sti    
c0012196:	90                   	nop
c0012197:	83 c4 28             	add    esp,0x28
c001219a:	5b                   	pop    ebx
c001219b:	c3                   	ret    

c001219c <VAS::evict(unsigned long)>:
c001219c:	55                   	push   ebp
c001219d:	57                   	push   edi
c001219e:	56                   	push   esi
c001219f:	53                   	push   ebx
c00121a0:	83 ec 1c             	sub    esp,0x1c
c00121a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121af:	e8 ac f1 ff ff       	call   c0011360 <Virt::allocateSwapfilePage()>
c00121b4:	89 c7                	mov    edi,eax
c00121b6:	a1 ac ca 02 c0       	mov    eax,ds:0xc002caac
c00121bb:	85 c0                	test   eax,eax
c00121bd:	7e 3d                	jle    c00121fc <VAS::evict(unsigned long)+0x60>
c00121bf:	89 ee                	mov    esi,ebp
c00121c1:	31 db                	xor    ebx,ebx
c00121c3:	83 ec 0c             	sub    esp,0xc
c00121c6:	57                   	push   edi
c00121c7:	e8 82 f1 ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c00121cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00121cf:	01 d8                	add    eax,ebx
c00121d1:	6a 01                	push   0x1
c00121d3:	31 d2                	xor    edx,edx
c00121d5:	43                   	inc    ebx
c00121d6:	52                   	push   edx
c00121d7:	81 c6 00 02 00 00    	add    esi,0x200
c00121dd:	50                   	push   eax
c00121de:	0f be 05 b8 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002cab8
c00121e5:	ff 34 85 fc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2004]
c00121ec:	e8 63 3f 00 00       	call   c0016154 <LogicalDisk::write(unsigned long long, int, void*)>
c00121f1:	83 c4 20             	add    esp,0x20
c00121f4:	39 1d ac ca 02 c0    	cmp    DWORD PTR ds:0xc002caac,ebx
c00121fa:	7f c7                	jg     c00121c3 <VAS::evict(unsigned long)+0x27>
c00121fc:	83 ec 08             	sub    esp,0x8
c00121ff:	c1 e7 0b             	shl    edi,0xb
c0012202:	55                   	push   ebp
c0012203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012207:	e8 d0 f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001220c:	5a                   	pop    edx
c001220d:	89 c6                	mov    esi,eax
c001220f:	59                   	pop    ecx
c0012210:	ff 30                	push   DWORD PTR [eax]
c0012212:	68 ab a6 02 c0       	push   0xc002a6ab
c0012217:	e8 77 05 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001221c:	8b 16                	mov    edx,DWORD PTR [esi]
c001221e:	89 d3                	mov    ebx,edx
c0012220:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012226:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001222c:	09 d7                	or     edi,edx
c001222e:	89 3e                	mov    DWORD PTR [esi],edi
c0012230:	5e                   	pop    esi
c0012231:	58                   	pop    eax
c0012232:	57                   	push   edi
c0012233:	68 c4 a6 02 c0       	push   0xc002a6c4
c0012238:	e8 56 05 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001223d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012240:	ff 05 68 dc 02 c0    	inc    DWORD PTR ds:0xc002dc68
c0012246:	e8 d9 d6 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001224b:	0f 20 d8             	mov    eax,cr3
c001224e:	0f 22 d8             	mov    cr3,eax
c0012251:	ff 35 68 dc 02 c0    	push   DWORD PTR ds:0xc002dc68
c0012257:	55                   	push   ebp
c0012258:	53                   	push   ebx
c0012259:	68 84 a5 02 c0       	push   0xc002a584
c001225e:	e8 30 05 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012263:	a1 64 dc 02 c0       	mov    eax,ds:0xc002dc64
c0012268:	c7 44 24 50 dd a6 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a6dd
c0012270:	8d 50 01             	lea    edx,[eax+0x1]
c0012273:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012277:	89 15 64 dc 02 c0    	mov    DWORD PTR ds:0xc002dc64,edx
c001227d:	83 c4 3c             	add    esp,0x3c
c0012280:	5b                   	pop    ebx
c0012281:	5e                   	pop    esi
c0012282:	5f                   	pop    edi
c0012283:	5d                   	pop    ebp
c0012284:	e9 0a 05 00 00       	jmp    c0012793 <Dbg::kprintf(char const*, ...)>
c0012289:	90                   	nop

c001228a <VAS::tryLoadBackOffDisk(unsigned long)>:
c001228a:	55                   	push   ebp
c001228b:	57                   	push   edi
c001228c:	56                   	push   esi
c001228d:	53                   	push   ebx
c001228e:	83 ec 24             	sub    esp,0x24
c0012291:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012295:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012299:	68 ee a6 02 c0       	push   0xc002a6ee
c001229e:	e8 f0 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00122a3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00122a7:	58                   	pop    eax
c00122a8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c00122ae:	5a                   	pop    edx
c00122af:	57                   	push   edi
c00122b0:	53                   	push   ebx
c00122b1:	e8 26 f4 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00122b6:	59                   	pop    ecx
c00122b7:	5e                   	pop    esi
c00122b8:	89 c6                	mov    esi,eax
c00122ba:	ff 30                	push   DWORD PTR [eax]
c00122bc:	68 01 a7 02 c0       	push   0xc002a701
c00122c1:	e8 cd 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	85 ff                	test   edi,edi
c00122cb:	74 0a                	je     c00122d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c00122cd:	8b 2e                	mov    ebp,DWORD PTR [esi]
c00122cf:	f7 c5 01 00 00 00    	test   ebp,0x1
c00122d5:	74 0a                	je     c00122e1 <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c00122d7:	83 c4 1c             	add    esp,0x1c
c00122da:	31 c0                	xor    eax,eax
c00122dc:	5b                   	pop    ebx
c00122dd:	5e                   	pop    esi
c00122de:	5f                   	pop    edi
c00122df:	5d                   	pop    ebp
c00122e0:	c3                   	ret    
c00122e1:	83 ec 08             	sub    esp,0x8
c00122e4:	c1 ed 0b             	shr    ebp,0xb
c00122e7:	55                   	push   ebp
c00122e8:	68 0f a7 02 c0       	push   0xc002a70f
c00122ed:	e8 a1 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00122f2:	e8 9e d6 ff ff       	call   c000f995 <Phys::allocatePage()>
c00122f7:	59                   	pop    ecx
c00122f8:	5a                   	pop    edx
c00122f9:	50                   	push   eax
c00122fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122fe:	68 1a a7 02 c0       	push   0xc002a71a
c0012303:	e8 8b 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012308:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001230c:	8b 16                	mov    edx,DWORD PTR [esi]
c001230e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012314:	09 d0                	or     eax,edx
c0012316:	0d 01 08 00 00       	or     eax,0x801
c001231b:	89 06                	mov    DWORD PTR [esi],eax
c001231d:	59                   	pop    ecx
c001231e:	5e                   	pop    esi
c001231f:	50                   	push   eax
c0012320:	68 2f a7 02 c0       	push   0xc002a72f
c0012325:	e8 69 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001232a:	0f 20 d8             	mov    eax,cr3
c001232d:	83 c4 0c             	add    esp,0xc
c0012330:	53                   	push   ebx
c0012331:	50                   	push   eax
c0012332:	68 47 a7 02 c0       	push   0xc002a747
c0012337:	e8 57 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001233c:	c7 04 24 5f a7 02 c0 	mov    DWORD PTR [esp],0xc002a75f
c0012343:	e8 4b 04 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012348:	83 c4 10             	add    esp,0x10
c001234b:	a1 ac ca 02 c0       	mov    eax,ds:0xc002caac
c0012350:	85 c0                	test   eax,eax
c0012352:	7e 3d                	jle    c0012391 <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c0012354:	89 fe                	mov    esi,edi
c0012356:	31 db                	xor    ebx,ebx
c0012358:	83 ec 0c             	sub    esp,0xc
c001235b:	55                   	push   ebp
c001235c:	e8 ed ef ff ff       	call   c001134e <Virt::swapIDToSector(unsigned long)>
c0012361:	89 34 24             	mov    DWORD PTR [esp],esi
c0012364:	01 d8                	add    eax,ebx
c0012366:	6a 01                	push   0x1
c0012368:	31 d2                	xor    edx,edx
c001236a:	43                   	inc    ebx
c001236b:	52                   	push   edx
c001236c:	81 c6 00 02 00 00    	add    esi,0x200
c0012372:	50                   	push   eax
c0012373:	0f be 05 b8 ca 02 c0 	movsx  eax,BYTE PTR ds:0xc002cab8
c001237a:	ff 34 85 fc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2004]
c0012381:	e8 62 3d 00 00       	call   c00160e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012386:	83 c4 20             	add    esp,0x20
c0012389:	39 1d ac ca 02 c0    	cmp    DWORD PTR ds:0xc002caac,ebx
c001238f:	7f c7                	jg     c0012358 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c0012391:	a1 68 dc 02 c0       	mov    eax,ds:0xc002dc68
c0012396:	48                   	dec    eax
c0012397:	52                   	push   edx
c0012398:	a3 68 dc 02 c0       	mov    ds:0xc002dc68,eax
c001239d:	50                   	push   eax
c001239e:	57                   	push   edi
c001239f:	68 6f a7 02 c0       	push   0xc002a76f
c00123a4:	e8 ea 03 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00123a9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123ac:	e8 7f ef ff ff       	call   c0011330 <Virt::freeSwapfilePage(unsigned long)>
c00123b1:	c7 04 24 84 a7 02 c0 	mov    DWORD PTR [esp],0xc002a784
c00123b8:	e8 d6 03 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00123bd:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	48                   	dec    eax
c00123c6:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00123cb:	85 c0                	test   eax,eax
c00123cd:	75 01                	jne    c00123d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c00123cf:	fb                   	sti    
c00123d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123d4:	25 ff 0f 00 00       	and    eax,0xfff
c00123d9:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00123de:	77 20                	ja     c0012400 <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c00123e0:	0f 20 d8             	mov    eax,cr3
c00123e3:	0f 22 d8             	mov    cr3,eax
c00123e6:	83 ec 0c             	sub    esp,0xc
c00123e9:	68 aa a7 02 c0       	push   0xc002a7aa
c00123ee:	e8 a0 03 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	b0 01                	mov    al,0x1
c00123f8:	83 c4 1c             	add    esp,0x1c
c00123fb:	5b                   	pop    ebx
c00123fc:	5e                   	pop    esi
c00123fd:	5f                   	pop    edi
c00123fe:	5d                   	pop    ebp
c00123ff:	c3                   	ret    
c0012400:	83 ec 0c             	sub    esp,0xc
c0012403:	68 9a a7 02 c0       	push   0xc002a79a
c0012408:	e8 86 03 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	eb ce                	jmp    c00123e0 <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c0012412 <VAS::scanForEviction()>:
c0012412:	55                   	push   ebp
c0012413:	57                   	push   edi
c0012414:	31 ff                	xor    edi,edi
c0012416:	56                   	push   esi
c0012417:	53                   	push   ebx
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001241f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0012422:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012427:	75 0e                	jne    c0012437 <VAS::scanForEviction()+0x25>
c0012429:	89 c1                	mov    ecx,eax
c001242b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001242e:	c1 e9 16             	shr    ecx,0x16
c0012431:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012435:	74 60                	je     c0012497 <VAS::scanForEviction()+0x85>
c0012437:	83 ec 08             	sub    esp,0x8
c001243a:	50                   	push   eax
c001243b:	68 b4 a5 02 c0       	push   0xc002a5b4
c0012440:	e8 4e 03 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012445:	5d                   	pop    ebp
c0012446:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012449:	58                   	pop    eax
c001244a:	53                   	push   ebx
c001244b:	56                   	push   esi
c001244c:	e8 8b f2 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c0012451:	83 c4 10             	add    esp,0x10
c0012454:	8b 28                	mov    ebp,DWORD PTR [eax]
c0012456:	89 ea                	mov    edx,ebp
c0012458:	81 e2 01 08 00 00    	and    edx,0x801
c001245e:	81 fa 01 08 00 00    	cmp    edx,0x801
c0012464:	74 3b                	je     c00124a1 <VAS::scanForEviction()+0x8f>
c0012466:	8d 83 00 10 00 00    	lea    eax,[ebx+0x1000]
c001246c:	3d ff ff ff fe       	cmp    eax,0xfeffffff
c0012471:	76 29                	jbe    c001249c <VAS::scanForEviction()+0x8a>
c0012473:	47                   	inc    edi
c0012474:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001247b:	83 ff 04             	cmp    edi,0x4
c001247e:	74 33                	je     c00124b3 <VAS::scanForEviction()+0xa1>
c0012480:	31 c0                	xor    eax,eax
c0012482:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012487:	75 ae                	jne    c0012437 <VAS::scanForEviction()+0x25>
c0012489:	89 c1                	mov    ecx,eax
c001248b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001248e:	c1 e9 16             	shr    ecx,0x16
c0012491:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012495:	75 a0                	jne    c0012437 <VAS::scanForEviction()+0x25>
c0012497:	05 00 00 40 00       	add    eax,0x400000
c001249c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001249f:	eb 81                	jmp    c0012422 <VAS::scanForEviction()+0x10>
c00124a1:	f7 c5 20 00 00 00    	test   ebp,0x20
c00124a7:	74 22                	je     c00124cb <VAS::scanForEviction()+0xb9>
c00124a9:	83 e5 df             	and    ebp,0xffffffdf
c00124ac:	89 28                	mov    DWORD PTR [eax],ebp
c00124ae:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00124b1:	eb b3                	jmp    c0012466 <VAS::scanForEviction()+0x54>
c00124b3:	83 ec 0c             	sub    esp,0xc
c00124b6:	68 d4 a5 02 c0       	push   0xc002a5d4
c00124bb:	e8 3f 7a 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00124c0:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00124c3:	83 c4 10             	add    esp,0x10
c00124c6:	e9 57 ff ff ff       	jmp    c0012422 <VAS::scanForEviction()+0x10>
c00124cb:	83 ec 08             	sub    esp,0x8
c00124ce:	53                   	push   ebx
c00124cf:	68 b8 a7 02 c0       	push   0xc002a7b8
c00124d4:	e8 ba 02 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00124d9:	58                   	pop    eax
c00124da:	5a                   	pop    edx
c00124db:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124de:	56                   	push   esi
c00124df:	e8 b8 fc ff ff       	call   c001219c <VAS::evict(unsigned long)>
c00124e4:	59                   	pop    ecx
c00124e5:	5b                   	pop    ebx
c00124e6:	ff 76 08             	push   DWORD PTR [esi+0x8]
c00124e9:	68 cc a7 02 c0       	push   0xc002a7cc
c00124ee:	e8 a0 02 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00124f3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00124fa:	89 e8                	mov    eax,ebp
c00124fc:	83 c4 1c             	add    esp,0x1c
c00124ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012504:	5b                   	pop    ebx
c0012505:	5e                   	pop    esi
c0012506:	5f                   	pop    edi
c0012507:	5d                   	pop    ebp
c0012508:	c3                   	ret    

c0012509 <mapVASFirstTime>:
c0012509:	55                   	push   ebp
c001250a:	57                   	push   edi
c001250b:	56                   	push   esi
c001250c:	53                   	push   ebx
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012515:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012518:	4a                   	dec    edx
c0012519:	0f 84 fe 00 00 00    	je     c001261d <mapVASFirstTime+0x114>
c001251f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012522:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012525:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001252a:	c1 e5 15             	shl    ebp,0x15
c001252d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012532:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012538:	29 eb                	sub    ebx,ebp
c001253a:	29 ef                	sub    edi,ebp
c001253c:	83 ec 08             	sub    esp,0x8
c001253f:	53                   	push   ebx
c0012540:	68 f8 a7 02 c0       	push   0xc002a7f8
c0012545:	e8 49 02 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001254a:	e8 46 d4 ff ff       	call   c000f995 <Phys::allocatePage()>
c001254f:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012556:	6a 01                	push   0x1
c0012558:	53                   	push   ebx
c0012559:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001255f:	50                   	push   eax
c0012560:	56                   	push   esi
c0012561:	e8 02 f8 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012566:	83 c4 20             	add    esp,0x20
c0012569:	39 fb                	cmp    ebx,edi
c001256b:	75 cf                	jne    c001253c <mapVASFirstTime+0x33>
c001256d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012572:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012577:	29 eb                	sub    ebx,ebp
c0012579:	29 ef                	sub    edi,ebp
c001257b:	83 ec 08             	sub    esp,0x8
c001257e:	53                   	push   ebx
c001257f:	68 14 a8 02 c0       	push   0xc002a814
c0012584:	e8 0a 02 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012589:	58                   	pop    eax
c001258a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c001258e:	5a                   	pop    edx
c001258f:	19 c0                	sbb    eax,eax
c0012591:	83 e0 04             	and    eax,0x4
c0012594:	05 03 04 00 00       	add    eax,0x403
c0012599:	50                   	push   eax
c001259a:	68 39 a7 02 c0       	push   0xc002a739
c001259f:	e8 ef 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00125a4:	e8 ec d3 ff ff       	call   c000f995 <Phys::allocatePage()>
c00125a9:	59                   	pop    ecx
c00125aa:	89 c5                	mov    ebp,eax
c00125ac:	58                   	pop    eax
c00125ad:	55                   	push   ebp
c00125ae:	68 28 a8 02 c0       	push   0xc002a828
c00125b3:	e8 db 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00125b8:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00125bc:	19 d2                	sbb    edx,edx
c00125be:	83 e2 04             	and    edx,0x4
c00125c1:	81 c2 03 04 00 00    	add    edx,0x403
c00125c7:	89 14 24             	mov    DWORD PTR [esp],edx
c00125ca:	6a 01                	push   0x1
c00125cc:	53                   	push   ebx
c00125cd:	55                   	push   ebp
c00125ce:	56                   	push   esi
c00125cf:	e8 94 f7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125d4:	83 c4 18             	add    esp,0x18
c00125d7:	53                   	push   ebx
c00125d8:	56                   	push   esi
c00125d9:	e8 fe f0 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c00125de:	5a                   	pop    edx
c00125df:	59                   	pop    ecx
c00125e0:	ff 30                	push   DWORD PTR [eax]
c00125e2:	68 44 a8 02 c0       	push   0xc002a844
c00125e7:	e8 a7 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00125ec:	0f 20 d8             	mov    eax,cr3
c00125ef:	83 c4 0c             	add    esp,0xc
c00125f2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125f8:	56                   	push   esi
c00125f9:	50                   	push   eax
c00125fa:	68 47 a7 02 c0       	push   0xc002a747
c00125ff:	e8 8f 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	39 df                	cmp    edi,ebx
c0012609:	0f 85 6c ff ff ff    	jne    c001257b <mapVASFirstTime+0x72>
c001260f:	0f 20 d8             	mov    eax,cr3
c0012612:	0f 22 d8             	mov    cr3,eax
c0012615:	83 c4 0c             	add    esp,0xc
c0012618:	5b                   	pop    ebx
c0012619:	5e                   	pop    esi
c001261a:	5f                   	pop    edi
c001261b:	5d                   	pop    ebp
c001261c:	c3                   	ret    
c001261d:	83 ec 0c             	sub    esp,0xc
c0012620:	68 df a7 02 c0       	push   0xc002a7df
c0012625:	e8 69 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001262a:	83 c4 10             	add    esp,0x10
c001262d:	83 c4 0c             	add    esp,0xc
c0012630:	5b                   	pop    ebx
c0012631:	5e                   	pop    esi
c0012632:	5f                   	pop    edi
c0012633:	5d                   	pop    ebp
c0012634:	c3                   	ret    

c0012635 <__cxa_atexit>:
c0012635:	31 c0                	xor    eax,eax
c0012637:	c3                   	ret    

c0012638 <__cxa_finalize>:
c0012638:	c3                   	ret    

c0012639 <__stack_chk_fail>:
c0012639:	55                   	push   ebp
c001263a:	89 e5                	mov    ebp,esp
c001263c:	83 ec 14             	sub    esp,0x14
c001263f:	68 4f a8 02 c0       	push   0xc002a84f
c0012644:	e8 4a 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012649:	58                   	pop    eax
c001264a:	5a                   	pop    edx
c001264b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001264e:	68 9f a8 02 c0       	push   0xc002a89f
c0012653:	e8 3b 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012658:	59                   	pop    ecx
c0012659:	58                   	pop    eax
c001265a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001265d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012660:	68 9f a8 02 c0       	push   0xc002a89f
c0012665:	e8 29 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001266a:	5a                   	pop    edx
c001266b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001266e:	59                   	pop    ecx
c001266f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012671:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012674:	68 9f a8 02 c0       	push   0xc002a89f
c0012679:	e8 15 01 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001267e:	5a                   	pop    edx
c001267f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012682:	59                   	pop    ecx
c0012683:	8b 00                	mov    eax,DWORD PTR [eax]
c0012685:	8b 00                	mov    eax,DWORD PTR [eax]
c0012687:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001268a:	68 9f a8 02 c0       	push   0xc002a89f
c001268f:	e8 ff 00 00 00       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0012694:	c7 04 24 a7 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8a7
c001269b:	e8 5f 78 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	c9                   	leave  
c00126a4:	c3                   	ret    

c00126a5 <__cxa_pure_virtual>:
c00126a5:	83 ec 18             	sub    esp,0x18
c00126a8:	68 bf a8 02 c0       	push   0xc002a8bf
c00126ad:	e8 4d 78 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00126b2:	83 c4 1c             	add    esp,0x1c
c00126b5:	c3                   	ret    

c00126b6 <operator new[](unsigned long)>:
c00126b6:	e9 de ce ff ff       	jmp    c000f599 <malloc>

c00126bb <operator delete(void*, unsigned long)>:
c00126bb:	e9 f9 ce ff ff       	jmp    c000f5b9 <rfree>

c00126c0 <operator delete[](void*)>:
c00126c0:	e9 f4 ce ff ff       	jmp    c000f5b9 <rfree>

c00126c5 <operator delete[](void*, unsigned long)>:
c00126c5:	e9 ef ce ff ff       	jmp    c000f5b9 <rfree>

c00126ca <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126ca:	55                   	push   ebp
c00126cb:	b9 11 00 00 00       	mov    ecx,0x11
c00126d0:	57                   	push   edi
c00126d1:	56                   	push   esi
c00126d2:	be 5a a2 02 c0       	mov    esi,0xc002a25a
c00126d7:	53                   	push   ebx
c00126d8:	83 ec 20             	sub    esp,0x20
c00126db:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00126df:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00126e3:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00126e7:	fc                   	cld    
c00126e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00126ea:	89 ee                	mov    esi,ebp
c00126ec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00126f0:	eb 02                	jmp    c00126f4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c00126f2:	89 c6                	mov    esi,eax
c00126f4:	31 d2                	xor    edx,edx
c00126f6:	41                   	inc    ecx
c00126f7:	89 f0                	mov    eax,esi
c00126f9:	f7 f3                	div    ebx
c00126fb:	39 de                	cmp    esi,ebx
c00126fd:	73 f3                	jae    c00126f2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00126ff:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012702:	eb 02                	jmp    c0012706 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012704:	89 c5                	mov    ebp,eax
c0012706:	31 d2                	xor    edx,edx
c0012708:	49                   	dec    ecx
c0012709:	89 e8                	mov    eax,ebp
c001270b:	f7 f3                	div    ebx
c001270d:	39 dd                	cmp    ebp,ebx
c001270f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012713:	88 11                	mov    BYTE PTR [ecx],dl
c0012715:	73 ed                	jae    c0012704 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001271b:	83 c4 20             	add    esp,0x20
c001271e:	5b                   	pop    ebx
c001271f:	5e                   	pop    esi
c0012720:	5f                   	pop    edi
c0012721:	5d                   	pop    ebp
c0012722:	c3                   	ret    

c0012723 <Dbg::logc(char)>:
c0012723:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012727:	ba fd 03 00 00       	mov    edx,0x3fd
c001272c:	ec                   	in     al,dx
c001272d:	a8 20                	test   al,0x20
c001272f:	74 fb                	je     c001272c <Dbg::logc(char)+0x9>
c0012731:	ba f8 03 00 00       	mov    edx,0x3f8
c0012736:	88 c8                	mov    al,cl
c0012738:	ee                   	out    dx,al
c0012739:	c3                   	ret    

c001273a <Dbg::logs(char*)>:
c001273a:	53                   	push   ebx
c001273b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001273f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012742:	84 c0                	test   al,al
c0012744:	74 0f                	je     c0012755 <Dbg::logs(char*)+0x1b>
c0012746:	50                   	push   eax
c0012747:	43                   	inc    ebx
c0012748:	e8 d6 ff ff ff       	call   c0012723 <Dbg::logc(char)>
c001274d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012750:	5a                   	pop    edx
c0012751:	84 c0                	test   al,al
c0012753:	75 f1                	jne    c0012746 <Dbg::logs(char*)+0xc>
c0012755:	5b                   	pop    ebx
c0012756:	c3                   	ret    

c0012757 <Dbg::logWriteInt(unsigned int)>:
c0012757:	83 ec 10             	sub    esp,0x10
c001275a:	6a 0a                	push   0xa
c001275c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012760:	50                   	push   eax
c0012761:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012765:	e8 60 ff ff ff       	call   c00126ca <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001276a:	50                   	push   eax
c001276b:	e8 ca ff ff ff       	call   c001273a <Dbg::logs(char*)>
c0012770:	83 c4 20             	add    esp,0x20
c0012773:	c3                   	ret    

c0012774 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012774:	83 ec 10             	sub    esp,0x10
c0012777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001277b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001277f:	50                   	push   eax
c0012780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012784:	e8 41 ff ff ff       	call   c00126ca <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012789:	50                   	push   eax
c001278a:	e8 ab ff ff ff       	call   c001273a <Dbg::logs(char*)>
c001278f:	83 c4 20             	add    esp,0x20
c0012792:	c3                   	ret    

c0012793 <Dbg::kprintf(char const*, ...)>:
c0012793:	55                   	push   ebp
c0012794:	57                   	push   edi
c0012795:	56                   	push   esi
c0012796:	53                   	push   ebx
c0012797:	83 ec 0c             	sub    esp,0xc
c001279a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001279e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00127a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127a9:	84 c0                	test   al,al
c00127ab:	74 4a                	je     c00127f7 <Dbg::kprintf(char const*, ...)+0x64>
c00127ad:	31 db                	xor    ebx,ebx
c00127af:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127b2:	3c 25                	cmp    al,0x25
c00127b4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127b7:	0f 85 e4 00 00 00    	jne    c00128a1 <Dbg::kprintf(char const*, ...)+0x10e>
c00127bd:	83 c3 02             	add    ebx,0x2
c00127c0:	8a 07                	mov    al,BYTE PTR [edi]
c00127c2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127c5:	83 e8 25             	sub    eax,0x25
c00127c8:	3c 53                	cmp    al,0x53
c00127ca:	0f 87 ba 00 00 00    	ja     c001288a <Dbg::kprintf(char const*, ...)+0xf7>
c00127d0:	0f b6 c0             	movzx  eax,al
c00127d3:	ff 24 85 d4 a8 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd572c]
c00127da:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00127de:	89 c8                	mov    eax,ecx
c00127e0:	83 c1 04             	add    ecx,0x4
c00127e3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00127e7:	ff 30                	push   DWORD PTR [eax]
c00127e9:	e8 69 ff ff ff       	call   c0012757 <Dbg::logWriteInt(unsigned int)>
c00127ee:	5f                   	pop    edi
c00127ef:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00127f3:	84 c0                	test   al,al
c00127f5:	75 b8                	jne    c00127af <Dbg::kprintf(char const*, ...)+0x1c>
c00127f7:	83 c4 0c             	add    esp,0xc
c00127fa:	5b                   	pop    ebx
c00127fb:	5e                   	pop    esi
c00127fc:	5f                   	pop    edi
c00127fd:	5d                   	pop    ebp
c00127fe:	c3                   	ret    
c00127ff:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012803:	89 c8                	mov    eax,ecx
c0012805:	83 c1 04             	add    ecx,0x4
c0012808:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001280c:	ff 30                	push   DWORD PTR [eax]
c001280e:	e8 27 ff ff ff       	call   c001273a <Dbg::logs(char*)>
c0012813:	58                   	pop    eax
c0012814:	eb d9                	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c0012816:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001281a:	89 d0                	mov    eax,edx
c001281c:	83 c2 04             	add    edx,0x4
c001281f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012823:	ff 30                	push   DWORD PTR [eax]
c0012825:	e8 2d ff ff ff       	call   c0012757 <Dbg::logWriteInt(unsigned int)>
c001282a:	58                   	pop    eax
c001282b:	eb c2                	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c001282d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012831:	89 d0                	mov    eax,edx
c0012833:	83 c2 04             	add    edx,0x4
c0012836:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012839:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001283d:	50                   	push   eax
c001283e:	e8 e0 fe ff ff       	call   c0012723 <Dbg::logc(char)>
c0012843:	58                   	pop    eax
c0012844:	eb a9                	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c0012846:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001284a:	89 c8                	mov    eax,ecx
c001284c:	83 c1 04             	add    ecx,0x4
c001284f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012853:	6a 10                	push   0x10
c0012855:	ff 30                	push   DWORD PTR [eax]
c0012857:	e8 18 ff ff ff       	call   c0012774 <Dbg::logWriteIntBase(unsigned int, int)>
c001285c:	59                   	pop    ecx
c001285d:	5f                   	pop    edi
c001285e:	eb 8f                	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c0012860:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012864:	89 d0                	mov    eax,edx
c0012866:	83 c2 08             	add    edx,0x8
c0012869:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001286d:	6a 10                	push   0x10
c001286f:	ff 30                	push   DWORD PTR [eax]
c0012871:	e8 fe fe ff ff       	call   c0012774 <Dbg::logWriteIntBase(unsigned int, int)>
c0012876:	58                   	pop    eax
c0012877:	5a                   	pop    edx
c0012878:	e9 72 ff ff ff       	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c001287d:	6a 25                	push   0x25
c001287f:	e8 9f fe ff ff       	call   c0012723 <Dbg::logc(char)>
c0012884:	58                   	pop    eax
c0012885:	e9 65 ff ff ff       	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c001288a:	6a 25                	push   0x25
c001288c:	e8 92 fe ff ff       	call   c0012723 <Dbg::logc(char)>
c0012891:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012894:	50                   	push   eax
c0012895:	e8 89 fe ff ff       	call   c0012723 <Dbg::logc(char)>
c001289a:	5a                   	pop    edx
c001289b:	59                   	pop    ecx
c001289c:	e9 4e ff ff ff       	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c00128a1:	50                   	push   eax
c00128a2:	89 eb                	mov    ebx,ebp
c00128a4:	e8 7a fe ff ff       	call   c0012723 <Dbg::logc(char)>
c00128a9:	89 fd                	mov    ebp,edi
c00128ab:	58                   	pop    eax
c00128ac:	e9 3e ff ff ff       	jmp    c00127ef <Dbg::kprintf(char const*, ...)+0x5c>
c00128b1:	90                   	nop

c00128b2 <File::read(unsigned long long, void*, int*)>:
c00128b2:	53                   	push   ebx
c00128b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128b7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128bb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128c2:	3c 19                	cmp    al,0x19
c00128c4:	77 35                	ja     c00128fb <File::read(unsigned long long, void*, int*)+0x49>
c00128c6:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c00128cd:	85 c0                	test   eax,eax
c00128cf:	74 2a                	je     c00128fb <File::read(unsigned long long, void*, int*)+0x49>
c00128d1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128d7:	85 c0                	test   eax,eax
c00128d9:	74 20                	je     c00128fb <File::read(unsigned long long, void*, int*)+0x49>
c00128db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128df:	74 21                	je     c0012902 <File::read(unsigned long long, void*, int*)+0x50>
c00128e1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128e7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128f5:	5b                   	pop    ebx
c00128f6:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00128f9:	ff e0                	jmp    eax
c00128fb:	b8 0b 00 00 00       	mov    eax,0xb
c0012900:	eb 05                	jmp    c0012907 <File::read(unsigned long long, void*, int*)+0x55>
c0012902:	b8 05 00 00 00       	mov    eax,0x5
c0012907:	5b                   	pop    ebx
c0012908:	c3                   	ret    
c0012909:	90                   	nop

c001290a <File::write(unsigned long long, void*, int*)>:
c001290a:	53                   	push   ebx
c001290b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001290f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012913:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001291a:	3c 19                	cmp    al,0x19
c001291c:	77 35                	ja     c0012953 <File::write(unsigned long long, void*, int*)+0x49>
c001291e:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c0012925:	85 c0                	test   eax,eax
c0012927:	74 2a                	je     c0012953 <File::write(unsigned long long, void*, int*)+0x49>
c0012929:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001292f:	85 c0                	test   eax,eax
c0012931:	74 20                	je     c0012953 <File::write(unsigned long long, void*, int*)+0x49>
c0012933:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012937:	74 21                	je     c001295a <File::write(unsigned long long, void*, int*)+0x50>
c0012939:	8b 08                	mov    ecx,DWORD PTR [eax]
c001293b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001293f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012945:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012949:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001294d:	5b                   	pop    ebx
c001294e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012951:	ff e0                	jmp    eax
c0012953:	b8 0b 00 00 00       	mov    eax,0xb
c0012958:	eb 05                	jmp    c001295f <File::write(unsigned long long, void*, int*)+0x55>
c001295a:	b8 05 00 00 00       	mov    eax,0x5
c001295f:	5b                   	pop    ebx
c0012960:	c3                   	ret    
c0012961:	90                   	nop

c0012962 <Directory::read(unsigned long long, void*, int*)>:
c0012962:	53                   	push   ebx
c0012963:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012967:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001296b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012972:	3c 19                	cmp    al,0x19
c0012974:	77 35                	ja     c00129ab <Directory::read(unsigned long long, void*, int*)+0x49>
c0012976:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c001297d:	85 c0                	test   eax,eax
c001297f:	74 2a                	je     c00129ab <Directory::read(unsigned long long, void*, int*)+0x49>
c0012981:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012987:	85 c0                	test   eax,eax
c0012989:	74 20                	je     c00129ab <Directory::read(unsigned long long, void*, int*)+0x49>
c001298b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001298f:	74 21                	je     c00129b2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012991:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012993:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012997:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001299d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129a5:	5b                   	pop    ebx
c00129a6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129a9:	ff e0                	jmp    eax
c00129ab:	b8 0b 00 00 00       	mov    eax,0xb
c00129b0:	eb 05                	jmp    c00129b7 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129b2:	b8 05 00 00 00       	mov    eax,0x5
c00129b7:	5b                   	pop    ebx
c00129b8:	c3                   	ret    
c00129b9:	90                   	nop

c00129ba <Directory::write(unsigned long long, void*, int*)>:
c00129ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129be:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129c5:	b8 0b 00 00 00       	mov    eax,0xb
c00129ca:	80 fa 19             	cmp    dl,0x19
c00129cd:	77 18                	ja     c00129e7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129cf:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c00129d6:	85 d2                	test   edx,edx
c00129d8:	74 0d                	je     c00129e7 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129da:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00129e1:	19 c0                	sbb    eax,eax
c00129e3:	83 e0 0a             	and    eax,0xa
c00129e6:	40                   	inc    eax
c00129e7:	c3                   	ret    

c00129e8 <File::isAtty()>:
c00129e8:	31 c0                	xor    eax,eax
c00129ea:	c3                   	ret    
c00129eb:	90                   	nop

c00129ec <Directory::isAtty()>:
c00129ec:	31 c0                	xor    eax,eax
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop

c00129f0 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00129f0:	b8 0a 00 00 00       	mov    eax,0xa
c00129f5:	c3                   	ret    

c00129f6 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00129f6:	b8 0a 00 00 00       	mov    eax,0xa
c00129fb:	c3                   	ret    

c00129fc <Filesystem::getFileFirstSector(char const*)>:
c00129fc:	31 c0                	xor    eax,eax
c00129fe:	31 d2                	xor    edx,edx
c0012a00:	c3                   	ret    
c0012a01:	90                   	nop

c0012a02 <File::~File()>:
c0012a02:	83 ec 0c             	sub    esp,0xc
c0012a05:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0012a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a0e:	89 10                	mov    DWORD PTR [eax],edx
c0012a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a14:	83 ec 0c             	sub    esp,0xc
c0012a17:	50                   	push   eax
c0012a18:	e8 a1 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a1d:	83 c4 10             	add    esp,0x10
c0012a20:	90                   	nop
c0012a21:	83 c4 0c             	add    esp,0xc
c0012a24:	c3                   	ret    
c0012a25:	90                   	nop

c0012a26 <File::~File()>:
c0012a26:	83 ec 0c             	sub    esp,0xc
c0012a29:	83 ec 0c             	sub    esp,0xc
c0012a2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a30:	e8 cd ff ff ff       	call   c0012a02 <File::~File()>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	83 ec 08             	sub    esp,0x8
c0012a3b:	68 14 01 00 00       	push   0x114
c0012a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a44:	e8 72 fc ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0012a49:	83 c4 10             	add    esp,0x10
c0012a4c:	83 c4 0c             	add    esp,0xc
c0012a4f:	c3                   	ret    

c0012a50 <Directory::~Directory()>:
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0012a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a5c:	89 10                	mov    DWORD PTR [eax],edx
c0012a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	50                   	push   eax
c0012a66:	e8 53 e5 ff ff       	call   c0010fbe <UnixFile::~UnixFile()>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	90                   	nop
c0012a6f:	83 c4 0c             	add    esp,0xc
c0012a72:	c3                   	ret    
c0012a73:	90                   	nop

c0012a74 <Directory::~Directory()>:
c0012a74:	83 ec 0c             	sub    esp,0xc
c0012a77:	83 ec 0c             	sub    esp,0xc
c0012a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a7e:	e8 cd ff ff ff       	call   c0012a50 <Directory::~Directory()>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	83 ec 08             	sub    esp,0x8
c0012a89:	68 14 01 00 00       	push   0x114
c0012a8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a92:	e8 24 fc ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	83 c4 0c             	add    esp,0xc
c0012a9d:	c3                   	ret    

c0012a9e <Filesystem::Filesystem()>:
c0012a9e:	ba 2c aa 02 c0       	mov    edx,0xc002aa2c
c0012aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa7:	89 10                	mov    DWORD PTR [eax],edx
c0012aa9:	8b 15 74 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc74
c0012aaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ab3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aba:	a3 74 dc 02 c0       	mov    ds:0xc002dc74,eax
c0012abf:	90                   	nop
c0012ac0:	c3                   	ret    
c0012ac1:	90                   	nop

c0012ac2 <Filesystem::~Filesystem()>:
c0012ac2:	ba 2c aa 02 c0       	mov    edx,0xc002aa2c
c0012ac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012acb:	89 10                	mov    DWORD PTR [eax],edx
c0012acd:	90                   	nop
c0012ace:	c3                   	ret    
c0012acf:	90                   	nop

c0012ad0 <Filesystem::~Filesystem()>:
c0012ad0:	83 ec 0c             	sub    esp,0xc
c0012ad3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ad7:	e8 e6 ff ff ff       	call   c0012ac2 <Filesystem::~Filesystem()>
c0012adc:	83 c4 04             	add    esp,0x4
c0012adf:	83 ec 08             	sub    esp,0x8
c0012ae2:	6a 08                	push   0x8
c0012ae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae8:	e8 ce fb ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	83 c4 0c             	add    esp,0xc
c0012af3:	c3                   	ret    

c0012af4 <Fs::getcwd(Process*, char*, int)>:
c0012af4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af8:	31 c0                	xor    eax,eax
c0012afa:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012afd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012b01:	7d 15                	jge    c0012b18 <Fs::getcwd(Process*, char*, int)+0x24>
c0012b03:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b07:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b0e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b11:	84 c9                	test   cl,cl
c0012b13:	74 06                	je     c0012b1b <Fs::getcwd(Process*, char*, int)+0x27>
c0012b15:	40                   	inc    eax
c0012b16:	eb e2                	jmp    c0012afa <Fs::getcwd(Process*, char*, int)+0x6>
c0012b18:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b1b:	31 c0                	xor    eax,eax
c0012b1d:	c3                   	ret    

c0012b1e <Fs::initVFS()>:
c0012b1e:	83 ec 18             	sub    esp,0x18
c0012b21:	6a 08                	push   0x8
c0012b23:	e8 71 ca ff ff       	call   c000f599 <malloc>
c0012b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b2b:	e8 d4 de 00 00       	call   c0020a04 <FAT::FAT()>
c0012b30:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b37:	e8 5d ca ff ff       	call   c000f599 <malloc>
c0012b3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b3f:	e8 cc f0 00 00       	call   c0021c10 <ISO9660::ISO9660()>
c0012b44:	83 c4 1c             	add    esp,0x1c
c0012b47:	c3                   	ret    

c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012b48:	55                   	push   ebp
c0012b49:	57                   	push   edi
c0012b4a:	56                   	push   esi
c0012b4b:	53                   	push   ebx
c0012b4c:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b52:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b59:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b60:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b67:	68 00 04 00 00       	push   0x400
c0012b6c:	6a 00                	push   0x0
c0012b6e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b72:	56                   	push   esi
c0012b73:	e8 d8 db fe ff       	call   c0000750 <memset>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b7f:	75 0b                	jne    c0012b8c <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012b81:	50                   	push   eax
c0012b82:	50                   	push   eax
c0012b83:	57                   	push   edi
c0012b84:	56                   	push   esi
c0012b85:	e8 82 dc fe ff       	call   c000080c <strcpy>
c0012b8a:	eb 41                	jmp    c0012bcd <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012b8c:	8a 07                	mov    al,BYTE PTR [edi]
c0012b8e:	3c 5c                	cmp    al,0x5c
c0012b90:	74 04                	je     c0012b96 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b92:	3c 2f                	cmp    al,0x2f
c0012b94:	75 18                	jne    c0012bae <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012b96:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b99:	3c 60                	cmp    al,0x60
c0012b9b:	7e 03                	jle    c0012ba0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012b9d:	83 e8 20             	sub    eax,0x20
c0012ba0:	88 04 24             	mov    BYTE PTR [esp],al
c0012ba3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012baa:	50                   	push   eax
c0012bab:	50                   	push   eax
c0012bac:	eb 18                	jmp    c0012bc6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012bae:	50                   	push   eax
c0012baf:	50                   	push   eax
c0012bb0:	55                   	push   ebp
c0012bb1:	56                   	push   esi
c0012bb2:	e8 55 dc fe ff       	call   c000080c <strcpy>
c0012bb7:	5a                   	pop    edx
c0012bb8:	59                   	pop    ecx
c0012bb9:	68 0a bd 02 c0       	push   0xc002bd0a
c0012bbe:	56                   	push   esi
c0012bbf:	e8 88 dd fe ff       	call   c000094c <strcat>
c0012bc4:	5d                   	pop    ebp
c0012bc5:	58                   	pop    eax
c0012bc6:	57                   	push   edi
c0012bc7:	56                   	push   esi
c0012bc8:	e8 7f dd fe ff       	call   c000094c <strcat>
c0012bcd:	83 c4 10             	add    esp,0x10
c0012bd0:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bd3:	3c 60                	cmp    al,0x60
c0012bd5:	7e 03                	jle    c0012bda <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012bd7:	83 e8 20             	sub    eax,0x20
c0012bda:	88 04 24             	mov    BYTE PTR [esp],al
c0012bdd:	88 03                	mov    BYTE PTR [ebx],al
c0012bdf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012be6:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bf0:	bf 03 00 00 00       	mov    edi,0x3
c0012bf5:	b8 03 00 00 00       	mov    eax,0x3
c0012bfa:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bfd:	84 d2                	test   dl,dl
c0012bff:	0f 84 91 00 00 00    	je     c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c05:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c08:	80 fa 5c             	cmp    dl,0x5c
c0012c0b:	74 05                	je     c0012c12 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012c0d:	80 fa 2f             	cmp    dl,0x2f
c0012c10:	75 12                	jne    c0012c24 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c12:	89 c5                	mov    ebp,eax
c0012c14:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c19:	74 09                	je     c0012c24 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c1b:	40                   	inc    eax
c0012c1c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c20:	89 cf                	mov    edi,ecx
c0012c22:	eb d6                	jmp    c0012bfa <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c24:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c29:	75 5b                	jne    c0012c86 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c2b:	80 fa 2e             	cmp    dl,0x2e
c0012c2e:	75 56                	jne    c0012c86 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c30:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c34:	74 19                	je     c0012c4f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012c36:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c3b:	74 53                	je     c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c3d:	89 f9                	mov    ecx,edi
c0012c3f:	41                   	inc    ecx
c0012c40:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c43:	80 fa 2f             	cmp    dl,0x2f
c0012c46:	74 f7                	je     c0012c3f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c48:	80 fa 5c             	cmp    dl,0x5c
c0012c4b:	74 f2                	je     c0012c3f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c4d:	eb d1                	jmp    c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c54:	74 3a                	je     c0012c90 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012c56:	83 f8 03             	cmp    eax,0x3
c0012c59:	74 c5                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c5b:	41                   	inc    ecx
c0012c5c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c5f:	80 fa 2f             	cmp    dl,0x2f
c0012c62:	74 f7                	je     c0012c5b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c64:	80 fa 5c             	cmp    dl,0x5c
c0012c67:	74 f2                	je     c0012c5b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012c69:	48                   	dec    eax
c0012c6a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c6e:	75 06                	jne    c0012c76 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c70:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c74:	eb f3                	jmp    c0012c69 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012c76:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c7a:	74 07                	je     c0012c83 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c7c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c80:	48                   	dec    eax
c0012c81:	eb f3                	jmp    c0012c76 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c83:	40                   	inc    eax
c0012c84:	eb 9a                	jmp    c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c86:	80 fa 2f             	cmp    dl,0x2f
c0012c89:	74 95                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c8b:	80 fa 5c             	cmp    dl,0x5c
c0012c8e:	74 90                	je     c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c90:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c93:	40                   	inc    eax
c0012c94:	eb 8a                	jmp    c0012c20 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c96:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	53                   	push   ebx
c0012c9e:	e8 c9 da fe ff       	call   c000076c <strlen>
c0012ca3:	83 c4 10             	add    esp,0x10
c0012ca6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012cab:	75 26                	jne    c0012cd3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012cad:	83 ec 0c             	sub    esp,0xc
c0012cb0:	53                   	push   ebx
c0012cb1:	e8 b6 da fe ff       	call   c000076c <strlen>
c0012cb6:	83 c4 10             	add    esp,0x10
c0012cb9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012cbe:	74 26                	je     c0012ce6 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012cc0:	83 ec 0c             	sub    esp,0xc
c0012cc3:	53                   	push   ebx
c0012cc4:	e8 a3 da fe ff       	call   c000076c <strlen>
c0012cc9:	83 c4 10             	add    esp,0x10
c0012ccc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012cd1:	eb c7                	jmp    c0012c9a <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012cd3:	83 ec 0c             	sub    esp,0xc
c0012cd6:	53                   	push   ebx
c0012cd7:	e8 90 da fe ff       	call   c000076c <strlen>
c0012cdc:	83 c4 10             	add    esp,0x10
c0012cdf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ce4:	74 c7                	je     c0012cad <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012ce6:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cec:	5b                   	pop    ebx
c0012ced:	5e                   	pop    esi
c0012cee:	5f                   	pop    edi
c0012cef:	5d                   	pop    ebp
c0012cf0:	c3                   	ret    
c0012cf1:	90                   	nop

c0012cf2 <File::File(char const*, Process*)>:
c0012cf2:	83 ec 0c             	sub    esp,0xc
c0012cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf9:	83 ec 08             	sub    esp,0x8
c0012cfc:	6a 00                	push   0x0
c0012cfe:	50                   	push   eax
c0012cff:	e8 d8 e0 ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c0012d04:	83 c4 10             	add    esp,0x10
c0012d07:	ba 94 aa 02 c0       	mov    edx,0xc002aa94
c0012d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d10:	89 10                	mov    DWORD PTR [eax],edx
c0012d12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d16:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d20:	83 c0 0d             	add    eax,0xd
c0012d23:	83 ec 04             	sub    esp,0x4
c0012d26:	52                   	push   edx
c0012d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d2b:	50                   	push   eax
c0012d2c:	e8 17 fe ff ff       	call   c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d38:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d3b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d42:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d50:	90                   	nop
c0012d51:	83 c4 0c             	add    esp,0xc
c0012d54:	c3                   	ret    
c0012d55:	90                   	nop

c0012d56 <File::open(FileOpenMode)>:
c0012d56:	53                   	push   ebx
c0012d57:	b8 0b 00 00 00       	mov    eax,0xb
c0012d5c:	83 ec 08             	sub    esp,0x8
c0012d5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d63:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d6a:	80 fa 19             	cmp    dl,0x19
c0012d6d:	77 40                	ja     c0012daf <File::open(FileOpenMode)+0x59>
c0012d6f:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c0012d76:	85 d2                	test   edx,edx
c0012d78:	74 35                	je     c0012daf <File::open(FileOpenMode)+0x59>
c0012d7a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d80:	85 d2                	test   edx,edx
c0012d82:	74 2b                	je     c0012daf <File::open(FileOpenMode)+0x59>
c0012d84:	b8 06 00 00 00       	mov    eax,0x6
c0012d89:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d8d:	75 20                	jne    c0012daf <File::open(FileOpenMode)+0x59>
c0012d8f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d91:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d9b:	51                   	push   ecx
c0012d9c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d9f:	51                   	push   ecx
c0012da0:	52                   	push   edx
c0012da1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	85 c0                	test   eax,eax
c0012da9:	75 04                	jne    c0012daf <File::open(FileOpenMode)+0x59>
c0012dab:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012daf:	83 c4 08             	add    esp,0x8
c0012db2:	5b                   	pop    ebx
c0012db3:	c3                   	ret    

c0012db4 <File::close()>:
c0012db4:	53                   	push   ebx
c0012db5:	b8 0b 00 00 00       	mov    eax,0xb
c0012dba:	83 ec 08             	sub    esp,0x8
c0012dbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dc1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dc8:	80 fa 19             	cmp    dl,0x19
c0012dcb:	77 41                	ja     c0012e0e <File::close()+0x5a>
c0012dcd:	8b 1c 95 00 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f00]
c0012dd4:	85 db                	test   ebx,ebx
c0012dd6:	74 36                	je     c0012e0e <File::close()+0x5a>
c0012dd8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ddf:	74 2d                	je     c0012e0e <File::close()+0x5a>
c0012de1:	b8 05 00 00 00       	mov    eax,0x5
c0012de6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dea:	74 22                	je     c0012e0e <File::close()+0x5a>
c0012dec:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012df0:	8b 04 95 00 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f00]
c0012df7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dfd:	53                   	push   ebx
c0012dfe:	53                   	push   ebx
c0012dff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e01:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e07:	50                   	push   eax
c0012e08:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e0b:	83 c4 10             	add    esp,0x10
c0012e0e:	83 c4 08             	add    esp,0x8
c0012e11:	5b                   	pop    ebx
c0012e12:	c3                   	ret    
c0012e13:	90                   	nop

c0012e14 <File::seek(unsigned long long)>:
c0012e14:	56                   	push   esi
c0012e15:	53                   	push   ebx
c0012e16:	b8 0b 00 00 00       	mov    eax,0xb
c0012e1b:	51                   	push   ecx
c0012e1c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e20:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e24:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e2f:	80 fa 19             	cmp    dl,0x19
c0012e32:	77 31                	ja     c0012e65 <File::seek(unsigned long long)+0x51>
c0012e34:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c0012e3b:	85 d2                	test   edx,edx
c0012e3d:	74 26                	je     c0012e65 <File::seek(unsigned long long)+0x51>
c0012e3f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e45:	85 d2                	test   edx,edx
c0012e47:	74 1c                	je     c0012e65 <File::seek(unsigned long long)+0x51>
c0012e49:	b8 05 00 00 00       	mov    eax,0x5
c0012e4e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e52:	74 11                	je     c0012e65 <File::seek(unsigned long long)+0x51>
c0012e54:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e56:	53                   	push   ebx
c0012e57:	51                   	push   ecx
c0012e58:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e5e:	52                   	push   edx
c0012e5f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e62:	83 c4 10             	add    esp,0x10
c0012e65:	5a                   	pop    edx
c0012e66:	5b                   	pop    ebx
c0012e67:	5e                   	pop    esi
c0012e68:	c3                   	ret    
c0012e69:	90                   	nop

c0012e6a <File::tell(unsigned long long*)>:
c0012e6a:	83 ec 0c             	sub    esp,0xc
c0012e6d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e72:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e76:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e7d:	80 fa 19             	cmp    dl,0x19
c0012e80:	77 34                	ja     c0012eb6 <File::tell(unsigned long long*)+0x4c>
c0012e82:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c0012e89:	85 d2                	test   edx,edx
c0012e8b:	74 29                	je     c0012eb6 <File::tell(unsigned long long*)+0x4c>
c0012e8d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e93:	85 d2                	test   edx,edx
c0012e95:	74 1f                	je     c0012eb6 <File::tell(unsigned long long*)+0x4c>
c0012e97:	b8 05 00 00 00       	mov    eax,0x5
c0012e9c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ea0:	74 14                	je     c0012eb6 <File::tell(unsigned long long*)+0x4c>
c0012ea2:	50                   	push   eax
c0012ea3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ea9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eaf:	52                   	push   edx
c0012eb0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012eb3:	83 c4 10             	add    esp,0x10
c0012eb6:	83 c4 0c             	add    esp,0xc
c0012eb9:	c3                   	ret    

c0012eba <File::rewind()>:
c0012eba:	83 ec 10             	sub    esp,0x10
c0012ebd:	6a 00                	push   0x0
c0012ebf:	6a 00                	push   0x0
c0012ec1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec5:	e8 4a ff ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c0012eca:	83 c4 1c             	add    esp,0x1c
c0012ecd:	c3                   	ret    

c0012ece <File::unlink()>:
c0012ece:	83 ec 0c             	sub    esp,0xc
c0012ed1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ee1:	80 f9 19             	cmp    cl,0x19
c0012ee4:	77 2f                	ja     c0012f15 <File::unlink()+0x47>
c0012ee6:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0012eed:	85 c9                	test   ecx,ecx
c0012eef:	74 24                	je     c0012f15 <File::unlink()+0x47>
c0012ef1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef7:	85 c9                	test   ecx,ecx
c0012ef9:	74 1a                	je     c0012f15 <File::unlink()+0x47>
c0012efb:	b8 06 00 00 00       	mov    eax,0x6
c0012f00:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f04:	75 0f                	jne    c0012f15 <File::unlink()+0x47>
c0012f06:	83 c2 0d             	add    edx,0xd
c0012f09:	50                   	push   eax
c0012f0a:	50                   	push   eax
c0012f0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0d:	52                   	push   edx
c0012f0e:	51                   	push   ecx
c0012f0f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f12:	83 c4 10             	add    esp,0x10
c0012f15:	83 c4 0c             	add    esp,0xc
c0012f18:	c3                   	ret    
c0012f19:	90                   	nop

c0012f1a <File::rename(char const*)>:
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	b8 0b 00 00 00       	mov    eax,0xb
c0012f22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f26:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f2d:	80 f9 19             	cmp    cl,0x19
c0012f30:	77 32                	ja     c0012f64 <File::rename(char const*)+0x4a>
c0012f32:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0012f39:	85 c9                	test   ecx,ecx
c0012f3b:	74 27                	je     c0012f64 <File::rename(char const*)+0x4a>
c0012f3d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f43:	85 c9                	test   ecx,ecx
c0012f45:	74 1d                	je     c0012f64 <File::rename(char const*)+0x4a>
c0012f47:	b8 06 00 00 00       	mov    eax,0x6
c0012f4c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f50:	75 12                	jne    c0012f64 <File::rename(char const*)+0x4a>
c0012f52:	83 c2 0d             	add    edx,0xd
c0012f55:	50                   	push   eax
c0012f56:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f5c:	52                   	push   edx
c0012f5d:	51                   	push   ecx
c0012f5e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f61:	83 c4 10             	add    esp,0x10
c0012f64:	83 c4 0c             	add    esp,0xc
c0012f67:	c3                   	ret    

c0012f68 <File::chfatattr(unsigned char, unsigned char)>:
c0012f68:	57                   	push   edi
c0012f69:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6e:	56                   	push   esi
c0012f6f:	53                   	push   ebx
c0012f70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f83:	80 f9 19             	cmp    cl,0x19
c0012f86:	77 37                	ja     c0012fbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f88:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0012f8f:	85 c9                	test   ecx,ecx
c0012f91:	74 2c                	je     c0012fbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f99:	85 c9                	test   ecx,ecx
c0012f9b:	74 22                	je     c0012fbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f9d:	b8 06 00 00 00       	mov    eax,0x6
c0012fa2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fa6:	75 17                	jne    c0012fbf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fa8:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012faa:	89 f0                	mov    eax,esi
c0012fac:	83 c2 0d             	add    edx,0xd
c0012faf:	0f b6 f0             	movzx  esi,al
c0012fb2:	0f b6 db             	movzx  ebx,bl
c0012fb5:	56                   	push   esi
c0012fb6:	53                   	push   ebx
c0012fb7:	52                   	push   edx
c0012fb8:	51                   	push   ecx
c0012fb9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fbc:	83 c4 10             	add    esp,0x10
c0012fbf:	5b                   	pop    ebx
c0012fc0:	5e                   	pop    esi
c0012fc1:	5f                   	pop    edi
c0012fc2:	c3                   	ret    
c0012fc3:	90                   	nop

c0012fc4 <File::exists()>:
c0012fc4:	83 ec 0c             	sub    esp,0xc
c0012fc7:	31 c0                	xor    eax,eax
c0012fc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fcd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd4:	80 f9 19             	cmp    cl,0x19
c0012fd7:	77 24                	ja     c0012ffd <File::exists()+0x39>
c0012fd9:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0012fe0:	85 c9                	test   ecx,ecx
c0012fe2:	74 19                	je     c0012ffd <File::exists()+0x39>
c0012fe4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fea:	85 c9                	test   ecx,ecx
c0012fec:	74 0f                	je     c0012ffd <File::exists()+0x39>
c0012fee:	83 c2 0d             	add    edx,0xd
c0012ff1:	50                   	push   eax
c0012ff2:	50                   	push   eax
c0012ff3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ff5:	52                   	push   edx
c0012ff6:	51                   	push   ecx
c0012ff7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ffa:	83 c4 10             	add    esp,0x10
c0012ffd:	83 c4 0c             	add    esp,0xc
c0013000:	c3                   	ret    
c0013001:	90                   	nop

c0013002 <File::stat(unsigned long long*, bool*)>:
c0013002:	56                   	push   esi
c0013003:	53                   	push   ebx
c0013004:	50                   	push   eax
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001300e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013012:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013019:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001301d:	80 f9 19             	cmp    cl,0x19
c0013020:	77 3d                	ja     c001305f <File::stat(unsigned long long*, bool*)+0x5d>
c0013022:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0013029:	85 c9                	test   ecx,ecx
c001302b:	74 32                	je     c001305f <File::stat(unsigned long long*, bool*)+0x5d>
c001302d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 28                	je     c001305f <File::stat(unsigned long long*, bool*)+0x5d>
c0013037:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013039:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303d:	74 13                	je     c0013052 <File::stat(unsigned long long*, bool*)+0x50>
c001303f:	83 ec 04             	sub    esp,0x4
c0013042:	56                   	push   esi
c0013043:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013049:	51                   	push   ecx
c001304a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001304d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013050:	eb 0a                	jmp    c001305c <File::stat(unsigned long long*, bool*)+0x5a>
c0013052:	53                   	push   ebx
c0013053:	83 c2 0d             	add    edx,0xd
c0013056:	56                   	push   esi
c0013057:	52                   	push   edx
c0013058:	51                   	push   ecx
c0013059:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	5a                   	pop    edx
c0013060:	5b                   	pop    ebx
c0013061:	5e                   	pop    esi
c0013062:	c3                   	ret    

c0013063 <Fs::setcwd(Process*, char*)>:
c0013063:	55                   	push   ebp
c0013064:	57                   	push   edi
c0013065:	56                   	push   esi
c0013066:	53                   	push   ebx
c0013067:	81 ec 20 02 00 00    	sub    esp,0x220
c001306d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013074:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001307a:	57                   	push   edi
c001307b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013082:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013086:	56                   	push   esi
c0013087:	e8 bc fa ff ff       	call   c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>
c001308c:	89 34 24             	mov    DWORD PTR [esp],esi
c001308f:	e8 d8 d6 fe ff       	call   c000076c <strlen>
c0013094:	83 c4 10             	add    esp,0x10
c0013097:	83 f8 02             	cmp    eax,0x2
c001309a:	77 17                	ja     c00130b3 <Fs::setcwd(Process*, char*)+0x50>
c001309c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00130a1:	83 e8 41             	sub    eax,0x41
c00130a4:	83 f8 19             	cmp    eax,0x19
c00130a7:	76 24                	jbe    c00130cd <Fs::setcwd(Process*, char*)+0x6a>
c00130a9:	b8 03 00 00 00       	mov    eax,0x3
c00130ae:	e9 e0 00 00 00       	jmp    c0013193 <Fs::setcwd(Process*, char*)+0x130>
c00130b3:	83 ec 0c             	sub    esp,0xc
c00130b6:	56                   	push   esi
c00130b7:	e8 b0 d6 fe ff       	call   c000076c <strlen>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	83 f8 03             	cmp    eax,0x3
c00130c2:	75 34                	jne    c00130f8 <Fs::setcwd(Process*, char*)+0x95>
c00130c4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130c9:	75 2d                	jne    c00130f8 <Fs::setcwd(Process*, char*)+0x95>
c00130cb:	eb cf                	jmp    c001309c <Fs::setcwd(Process*, char*)+0x39>
c00130cd:	8b 14 85 00 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1f00]
c00130d4:	b8 05 00 00 00       	mov    eax,0x5
c00130d9:	85 d2                	test   edx,edx
c00130db:	0f 84 b2 00 00 00    	je     c0013193 <Fs::setcwd(Process*, char*)+0x130>
c00130e1:	b8 06 00 00 00       	mov    eax,0x6
c00130e6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00130ed:	0f 85 92 00 00 00    	jne    c0013185 <Fs::setcwd(Process*, char*)+0x122>
c00130f3:	e9 9b 00 00 00       	jmp    c0013193 <Fs::setcwd(Process*, char*)+0x130>
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	68 14 01 00 00       	push   0x114
c0013100:	e8 94 c4 ff ff       	call   c000f599 <malloc>
c0013105:	83 c4 0c             	add    esp,0xc
c0013108:	89 c3                	mov    ebx,eax
c001310a:	55                   	push   ebp
c001310b:	56                   	push   esi
c001310c:	50                   	push   eax
c001310d:	e8 e0 fb ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0013112:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013117:	83 c4 0c             	add    esp,0xc
c001311a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001311e:	50                   	push   eax
c001311f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013123:	50                   	push   eax
c0013124:	53                   	push   ebx
c0013125:	e8 d8 fe ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001312a:	83 c4 10             	add    esp,0x10
c001312d:	83 f8 02             	cmp    eax,0x2
c0013130:	74 04                	je     c0013136 <Fs::setcwd(Process*, char*)+0xd3>
c0013132:	85 c0                	test   eax,eax
c0013134:	74 1c                	je     c0013152 <Fs::setcwd(Process*, char*)+0xef>
c0013136:	b8 01 00 00 00       	mov    eax,0x1
c001313b:	85 db                	test   ebx,ebx
c001313d:	74 54                	je     c0013193 <Fs::setcwd(Process*, char*)+0x130>
c001313f:	83 ec 0c             	sub    esp,0xc
c0013142:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013144:	53                   	push   ebx
c0013145:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013148:	83 c4 10             	add    esp,0x10
c001314b:	b8 01 00 00 00       	mov    eax,0x1
c0013150:	eb 41                	jmp    c0013193 <Fs::setcwd(Process*, char*)+0x130>
c0013152:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013157:	75 1c                	jne    c0013175 <Fs::setcwd(Process*, char*)+0x112>
c0013159:	b8 02 00 00 00       	mov    eax,0x2
c001315e:	85 db                	test   ebx,ebx
c0013160:	74 31                	je     c0013193 <Fs::setcwd(Process*, char*)+0x130>
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013167:	53                   	push   ebx
c0013168:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001316b:	83 c4 10             	add    esp,0x10
c001316e:	b8 02 00 00 00       	mov    eax,0x2
c0013173:	eb 1e                	jmp    c0013193 <Fs::setcwd(Process*, char*)+0x130>
c0013175:	85 db                	test   ebx,ebx
c0013177:	74 0c                	je     c0013185 <Fs::setcwd(Process*, char*)+0x122>
c0013179:	83 ec 0c             	sub    esp,0xc
c001317c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001317e:	53                   	push   ebx
c001317f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013182:	83 c4 10             	add    esp,0x10
c0013185:	50                   	push   eax
c0013186:	50                   	push   eax
c0013187:	56                   	push   esi
c0013188:	57                   	push   edi
c0013189:	e8 7e d6 fe ff       	call   c000080c <strcpy>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	31 c0                	xor    eax,eax
c0013193:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013199:	5b                   	pop    ebx
c001319a:	5e                   	pop    esi
c001319b:	5f                   	pop    edi
c001319c:	5d                   	pop    ebp
c001319d:	c3                   	ret    

c001319e <Directory::Directory(char const*, Process*)>:
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131a5:	83 ec 08             	sub    esp,0x8
c00131a8:	6a 00                	push   0x0
c00131aa:	50                   	push   eax
c00131ab:	e8 2c dc ff ff       	call   c0010ddc <UnixFile::UnixFile(int)>
c00131b0:	83 c4 10             	add    esp,0x10
c00131b3:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c00131b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131bc:	89 10                	mov    DWORD PTR [eax],edx
c00131be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131c2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cc:	83 c0 0d             	add    eax,0xd
c00131cf:	83 ec 04             	sub    esp,0x4
c00131d2:	52                   	push   edx
c00131d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d7:	50                   	push   eax
c00131d8:	e8 6b f9 ff ff       	call   c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131dd:	83 c4 10             	add    esp,0x10
c00131e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00131e7:	8d 50 bf             	lea    edx,[eax-0x41]
c00131ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00131f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00131fc:	90                   	nop
c00131fd:	83 c4 0c             	add    esp,0xc
c0013200:	c3                   	ret    
c0013201:	90                   	nop

c0013202 <Directory::open()>:
c0013202:	53                   	push   ebx
c0013203:	b8 0b 00 00 00       	mov    eax,0xb
c0013208:	83 ec 08             	sub    esp,0x8
c001320b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001320f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013216:	80 fa 19             	cmp    dl,0x19
c0013219:	77 3d                	ja     c0013258 <Directory::open()+0x56>
c001321b:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c0013222:	85 d2                	test   edx,edx
c0013224:	74 32                	je     c0013258 <Directory::open()+0x56>
c0013226:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001322c:	85 d2                	test   edx,edx
c001322e:	74 28                	je     c0013258 <Directory::open()+0x56>
c0013230:	b8 06 00 00 00       	mov    eax,0x6
c0013235:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013239:	75 1d                	jne    c0013258 <Directory::open()+0x56>
c001323b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013241:	50                   	push   eax
c0013242:	8b 02                	mov    eax,DWORD PTR [edx]
c0013244:	51                   	push   ecx
c0013245:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013248:	51                   	push   ecx
c0013249:	52                   	push   edx
c001324a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001324d:	83 c4 10             	add    esp,0x10
c0013250:	85 c0                	test   eax,eax
c0013252:	75 04                	jne    c0013258 <Directory::open()+0x56>
c0013254:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013258:	83 c4 08             	add    esp,0x8
c001325b:	5b                   	pop    ebx
c001325c:	c3                   	ret    
c001325d:	90                   	nop

c001325e <Directory::close()>:
c001325e:	53                   	push   ebx
c001325f:	b8 0b 00 00 00       	mov    eax,0xb
c0013264:	83 ec 08             	sub    esp,0x8
c0013267:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001326b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013272:	80 fa 19             	cmp    dl,0x19
c0013275:	77 41                	ja     c00132b8 <Directory::close()+0x5a>
c0013277:	8b 1c 95 00 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1f00]
c001327e:	85 db                	test   ebx,ebx
c0013280:	74 36                	je     c00132b8 <Directory::close()+0x5a>
c0013282:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013289:	74 2d                	je     c00132b8 <Directory::close()+0x5a>
c001328b:	b8 05 00 00 00       	mov    eax,0x5
c0013290:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013294:	74 22                	je     c00132b8 <Directory::close()+0x5a>
c0013296:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001329a:	8b 04 95 00 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1f00]
c00132a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132a7:	53                   	push   ebx
c00132a8:	53                   	push   ebx
c00132a9:	8b 10                	mov    edx,DWORD PTR [eax]
c00132ab:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132b1:	50                   	push   eax
c00132b2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132b5:	83 c4 10             	add    esp,0x10
c00132b8:	83 c4 08             	add    esp,0x8
c00132bb:	5b                   	pop    ebx
c00132bc:	c3                   	ret    
c00132bd:	90                   	nop

c00132be <Directory::unlink()>:
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	b8 0b 00 00 00       	mov    eax,0xb
c00132c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132d1:	80 f9 19             	cmp    cl,0x19
c00132d4:	77 2f                	ja     c0013305 <Directory::unlink()+0x47>
c00132d6:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c00132dd:	85 c9                	test   ecx,ecx
c00132df:	74 24                	je     c0013305 <Directory::unlink()+0x47>
c00132e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132e7:	85 c9                	test   ecx,ecx
c00132e9:	74 1a                	je     c0013305 <Directory::unlink()+0x47>
c00132eb:	b8 06 00 00 00       	mov    eax,0x6
c00132f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132f4:	75 0f                	jne    c0013305 <Directory::unlink()+0x47>
c00132f6:	83 c2 0d             	add    edx,0xd
c00132f9:	50                   	push   eax
c00132fa:	50                   	push   eax
c00132fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132fd:	52                   	push   edx
c00132fe:	51                   	push   ecx
c00132ff:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013302:	83 c4 10             	add    esp,0x10
c0013305:	83 c4 0c             	add    esp,0xc
c0013308:	c3                   	ret    
c0013309:	90                   	nop

c001330a <Directory::rename(char const*)>:
c001330a:	83 ec 0c             	sub    esp,0xc
c001330d:	b8 0b 00 00 00       	mov    eax,0xb
c0013312:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013316:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001331d:	80 f9 19             	cmp    cl,0x19
c0013320:	77 32                	ja     c0013354 <Directory::rename(char const*)+0x4a>
c0013322:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0013329:	85 c9                	test   ecx,ecx
c001332b:	74 27                	je     c0013354 <Directory::rename(char const*)+0x4a>
c001332d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013333:	85 c9                	test   ecx,ecx
c0013335:	74 1d                	je     c0013354 <Directory::rename(char const*)+0x4a>
c0013337:	b8 06 00 00 00       	mov    eax,0x6
c001333c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013340:	75 12                	jne    c0013354 <Directory::rename(char const*)+0x4a>
c0013342:	83 c2 0d             	add    edx,0xd
c0013345:	50                   	push   eax
c0013346:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013348:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001334c:	52                   	push   edx
c001334d:	51                   	push   ecx
c001334e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013351:	83 c4 10             	add    esp,0x10
c0013354:	83 c4 0c             	add    esp,0xc
c0013357:	c3                   	ret    

c0013358 <Directory::exists()>:
c0013358:	83 ec 0c             	sub    esp,0xc
c001335b:	31 c0                	xor    eax,eax
c001335d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013361:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013368:	80 f9 19             	cmp    cl,0x19
c001336b:	77 24                	ja     c0013391 <Directory::exists()+0x39>
c001336d:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0013374:	85 c9                	test   ecx,ecx
c0013376:	74 19                	je     c0013391 <Directory::exists()+0x39>
c0013378:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001337e:	85 c9                	test   ecx,ecx
c0013380:	74 0f                	je     c0013391 <Directory::exists()+0x39>
c0013382:	83 c2 0d             	add    edx,0xd
c0013385:	50                   	push   eax
c0013386:	50                   	push   eax
c0013387:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013389:	52                   	push   edx
c001338a:	51                   	push   ecx
c001338b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	83 c4 0c             	add    esp,0xc
c0013394:	c3                   	ret    
c0013395:	90                   	nop

c0013396 <Directory::read(dirent*)>:
c0013396:	83 ec 1c             	sub    esp,0x1c
c0013399:	b8 0b 00 00 00       	mov    eax,0xb
c001339e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133a2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133a9:	80 fa 19             	cmp    dl,0x19
c00133ac:	77 30                	ja     c00133de <Directory::read(dirent*)+0x48>
c00133ae:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c00133b5:	85 d2                	test   edx,edx
c00133b7:	74 25                	je     c00133de <Directory::read(dirent*)+0x48>
c00133b9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133c0:	74 1c                	je     c00133de <Directory::read(dirent*)+0x48>
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133cb:	52                   	push   edx
c00133cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133d0:	6a 00                	push   0x0
c00133d2:	68 10 01 00 00       	push   0x110
c00133d7:	51                   	push   ecx
c00133d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00133db:	83 c4 20             	add    esp,0x20
c00133de:	83 c4 1c             	add    esp,0x1c
c00133e1:	c3                   	ret    

c00133e2 <Directory::create()>:
c00133e2:	83 ec 0c             	sub    esp,0xc
c00133e5:	b8 0b 00 00 00       	mov    eax,0xb
c00133ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133f5:	80 f9 19             	cmp    cl,0x19
c00133f8:	77 2f                	ja     c0013429 <Directory::create()+0x47>
c00133fa:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0013401:	85 c9                	test   ecx,ecx
c0013403:	74 24                	je     c0013429 <Directory::create()+0x47>
c0013405:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001340b:	85 c9                	test   ecx,ecx
c001340d:	74 1a                	je     c0013429 <Directory::create()+0x47>
c001340f:	b8 06 00 00 00       	mov    eax,0x6
c0013414:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013418:	75 0f                	jne    c0013429 <Directory::create()+0x47>
c001341a:	83 c2 0d             	add    edx,0xd
c001341d:	50                   	push   eax
c001341e:	50                   	push   eax
c001341f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013421:	52                   	push   edx
c0013422:	51                   	push   ecx
c0013423:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013426:	83 c4 10             	add    esp,0x10
c0013429:	83 c4 0c             	add    esp,0xc
c001342c:	c3                   	ret    
c001342d:	90                   	nop

c001342e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001342e:	b8 0a 00 00 00       	mov    eax,0xa
c0013433:	c3                   	ret    

c0013434 <Bus::Bus(char const*)>:
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001343b:	83 ec 08             	sub    esp,0x8
c001343e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013442:	50                   	push   eax
c0013443:	e8 88 09 00 00       	call   c0013dd0 <Device::Device(char const*)>
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	ba cc aa 02 c0       	mov    edx,0xc002aacc
c0013450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013454:	89 10                	mov    DWORD PTR [eax],edx
c0013456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013464:	90                   	nop
c0013465:	83 c4 0c             	add    esp,0xc
c0013468:	c3                   	ret    
c0013469:	90                   	nop

c001346a <Bus::~Bus()>:
c001346a:	83 ec 0c             	sub    esp,0xc
c001346d:	ba cc aa 02 c0       	mov    edx,0xc002aacc
c0013472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013476:	89 10                	mov    DWORD PTR [eax],edx
c0013478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347c:	83 ec 0c             	sub    esp,0xc
c001347f:	50                   	push   eax
c0013480:	e8 15 06 00 00       	call   c0013a9a <Device::~Device()>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	90                   	nop
c0013489:	83 c4 0c             	add    esp,0xc
c001348c:	c3                   	ret    
c001348d:	90                   	nop

c001348e <Bus::~Bus()>:
c001348e:	83 ec 0c             	sub    esp,0xc
c0013491:	83 ec 0c             	sub    esp,0xc
c0013494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013498:	e8 cd ff ff ff       	call   c001346a <Bus::~Bus()>
c001349d:	83 c4 10             	add    esp,0x10
c00134a0:	83 ec 08             	sub    esp,0x8
c00134a3:	68 58 01 00 00       	push   0x158
c00134a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ac:	e8 0a f2 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00134b1:	83 c4 10             	add    esp,0x10
c00134b4:	83 c4 0c             	add    esp,0xc
c00134b7:	c3                   	ret    

c00134b8 <Buzzer::Buzzer(char const*)>:
c00134b8:	83 ec 0c             	sub    esp,0xc
c00134bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134bf:	83 ec 08             	sub    esp,0x8
c00134c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c6:	50                   	push   eax
c00134c7:	e8 04 09 00 00       	call   c0013dd0 <Device::Device(char const*)>
c00134cc:	83 c4 10             	add    esp,0x10
c00134cf:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c00134d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134d8:	89 10                	mov    DWORD PTR [eax],edx
c00134da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134de:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00134e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ec:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00134f6:	90                   	nop
c00134f7:	83 c4 0c             	add    esp,0xc
c00134fa:	c3                   	ret    
c00134fb:	90                   	nop

c00134fc <Buzzer::~Buzzer()>:
c00134fc:	83 ec 0c             	sub    esp,0xc
c00134ff:	ba f8 aa 02 c0       	mov    edx,0xc002aaf8
c0013504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013508:	89 10                	mov    DWORD PTR [eax],edx
c001350a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001350e:	83 ec 0c             	sub    esp,0xc
c0013511:	50                   	push   eax
c0013512:	e8 83 05 00 00       	call   c0013a9a <Device::~Device()>
c0013517:	83 c4 10             	add    esp,0x10
c001351a:	90                   	nop
c001351b:	83 c4 0c             	add    esp,0xc
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <Buzzer::~Buzzer()>:
c0013520:	83 ec 0c             	sub    esp,0xc
c0013523:	83 ec 0c             	sub    esp,0xc
c0013526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352a:	e8 cd ff ff ff       	call   c00134fc <Buzzer::~Buzzer()>
c001352f:	83 c4 10             	add    esp,0x10
c0013532:	83 ec 08             	sub    esp,0x8
c0013535:	68 5c 01 00 00       	push   0x15c
c001353a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001353e:	e8 78 f1 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	83 c4 0c             	add    esp,0xc
c0013549:	c3                   	ret    

c001354a <Buzzer::stop()>:
c001354a:	83 ec 14             	sub    esp,0x14
c001354d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013551:	8b 10                	mov    edx,DWORD PTR [eax]
c0013553:	6a 00                	push   0x0
c0013555:	50                   	push   eax
c0013556:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013559:	83 c4 1c             	add    esp,0x1c
c001355c:	c3                   	ret    

c001355d <beepThread(void*)>:
c001355d:	53                   	push   ebx
c001355e:	83 ec 08             	sub    esp,0x8
c0013561:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0013566:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001356a:	48                   	dec    eax
c001356b:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0013570:	75 01                	jne    c0013573 <beepThread(void*)+0x16>
c0013572:	fb                   	sti    
c0013573:	50                   	push   eax
c0013574:	50                   	push   eax
c0013575:	b8 40 42 0f 00       	mov    eax,0xf4240
c001357a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013580:	52                   	push   edx
c0013581:	50                   	push   eax
c0013582:	e8 e4 a7 00 00       	call   c001dd6b <nanoSleep(unsigned long long)>
c0013587:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001358a:	e8 bb ff ff ff       	call   c001354a <Buzzer::stop()>
c001358f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013597:	83 c4 18             	add    esp,0x18
c001359a:	5b                   	pop    ebx
c001359b:	e9 c7 a6 00 00       	jmp    c001dc67 <blockTask(TaskState)>

c00135a0 <Buzzer::beep(int, int, bool)>:
c00135a0:	57                   	push   edi
c00135a1:	56                   	push   esi
c00135a2:	53                   	push   ebx
c00135a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135af:	52                   	push   edx
c00135b0:	52                   	push   edx
c00135b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00135b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b7:	56                   	push   esi
c00135b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135bb:	83 c4 10             	add    esp,0x10
c00135be:	89 f8                	mov    eax,edi
c00135c0:	84 c0                	test   al,al
c00135c2:	74 1f                	je     c00135e3 <Buzzer::beep(int, int, bool)+0x43>
c00135c4:	50                   	push   eax
c00135c5:	50                   	push   eax
c00135c6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135cc:	99                   	cdq    
c00135cd:	52                   	push   edx
c00135ce:	50                   	push   eax
c00135cf:	e8 97 a7 00 00       	call   c001dd6b <nanoSleep(unsigned long long)>
c00135d4:	83 c4 10             	add    esp,0x10
c00135d7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135db:	5b                   	pop    ebx
c00135dc:	5e                   	pop    esi
c00135dd:	5f                   	pop    edi
c00135de:	e9 67 ff ff ff       	jmp    c001354a <Buzzer::stop()>
c00135e3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00135e9:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00135ee:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00135f6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00135fa:	c7 44 24 14 5d 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc001355d
c0013602:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013606:	5b                   	pop    ebx
c0013607:	5e                   	pop    esi
c0013608:	5f                   	pop    edi
c0013609:	e9 5e a2 00 00       	jmp    c001d86c <Process::createThread(void (*)(void*), void*, int)>

c001360e <User::loadClockSettings(int)>:
c001360e:	53                   	push   ebx
c001360f:	83 ec 14             	sub    esp,0x14
c0013612:	68 14 01 00 00       	push   0x114
c0013617:	e8 7d bf ff ff       	call   c000f599 <malloc>
c001361c:	83 c4 0c             	add    esp,0xc
c001361f:	89 c3                	mov    ebx,eax
c0013621:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c0013627:	68 20 ab 02 c0       	push   0xc002ab20
c001362c:	50                   	push   eax
c001362d:	e8 c0 f6 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0013632:	58                   	pop    eax
c0013633:	5a                   	pop    edx
c0013634:	6a 01                	push   0x1
c0013636:	53                   	push   ebx
c0013637:	e8 1a f7 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001363c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001363f:	e8 70 f7 ff ff       	call   c0012db4 <File::close()>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	85 db                	test   ebx,ebx
c0013649:	74 0f                	je     c001365a <User::loadClockSettings(int)+0x4c>
c001364b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001364d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013651:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013654:	83 c4 08             	add    esp,0x8
c0013657:	5b                   	pop    ebx
c0013658:	ff e0                	jmp    eax
c001365a:	83 c4 08             	add    esp,0x8
c001365d:	5b                   	pop    ebx
c001365e:	c3                   	ret    
c001365f:	90                   	nop

c0013660 <Clock::Clock(char const*)>:
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013667:	83 ec 08             	sub    esp,0x8
c001366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001366e:	50                   	push   eax
c001366f:	e8 5c 07 00 00       	call   c0013dd0 <Device::Device(char const*)>
c0013674:	83 c4 10             	add    esp,0x10
c0013677:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c001367c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013680:	89 10                	mov    DWORD PTR [eax],edx
c0013682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013686:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013690:	90                   	nop
c0013691:	83 c4 0c             	add    esp,0xc
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <Clock::~Clock()>:
c0013696:	83 ec 0c             	sub    esp,0xc
c0013699:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c001369e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a2:	89 10                	mov    DWORD PTR [eax],edx
c00136a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	50                   	push   eax
c00136ac:	e8 e9 03 00 00       	call   c0013a9a <Device::~Device()>
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	90                   	nop
c00136b5:	83 c4 0c             	add    esp,0xc
c00136b8:	c3                   	ret    
c00136b9:	90                   	nop

c00136ba <Clock::~Clock()>:
c00136ba:	83 ec 0c             	sub    esp,0xc
c00136bd:	83 ec 0c             	sub    esp,0xc
c00136c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c4:	e8 cd ff ff ff       	call   c0013696 <Clock::~Clock()>
c00136c9:	83 c4 10             	add    esp,0x10
c00136cc:	83 ec 08             	sub    esp,0x8
c00136cf:	68 58 01 00 00       	push   0x158
c00136d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136d8:	e8 de ef ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00136dd:	83 c4 10             	add    esp,0x10
c00136e0:	83 c4 0c             	add    esp,0xc
c00136e3:	c3                   	ret    

c00136e4 <Clock::timeInSecondsLocal()>:
c00136e4:	53                   	push   ebx
c00136e5:	83 ec 14             	sub    esp,0x14
c00136e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00136ee:	50                   	push   eax
c00136ef:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136f2:	0f b6 0d 7c dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc7c
c00136f9:	03 0d 80 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc80
c00136ff:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013705:	89 cb                	mov    ebx,ecx
c0013707:	c1 fb 1f             	sar    ebx,0x1f
c001370a:	01 c8                	add    eax,ecx
c001370c:	11 da                	adc    edx,ebx
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	31 c9                	xor    ecx,ecx
c0013713:	80 3d 7d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc7d,0x0
c001371a:	74 05                	je     c0013721 <Clock::timeInSecondsLocal()+0x3d>
c001371c:	b9 08 07 00 00       	mov    ecx,0x708
c0013721:	31 db                	xor    ebx,ebx
c0013723:	01 c8                	add    eax,ecx
c0013725:	11 da                	adc    edx,ebx
c0013727:	83 c4 08             	add    esp,0x8
c001372a:	5b                   	pop    ebx
c001372b:	c3                   	ret    

c001372c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001372c:	57                   	push   edi
c001372d:	56                   	push   esi
c001372e:	53                   	push   ebx
c001372f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013733:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013737:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013739:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001373d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013740:	0f b6 05 7c dc 02 c0 	movzx  eax,BYTE PTR ds:0xc002dc7c
c0013747:	03 05 80 dc 02 c0    	add    eax,DWORD PTR ds:0xc002dc80
c001374d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013753:	99                   	cdq    
c0013754:	29 c6                	sub    esi,eax
c0013756:	19 d7                	sbb    edi,edx
c0013758:	89 f0                	mov    eax,esi
c001375a:	89 fa                	mov    edx,edi
c001375c:	31 f6                	xor    esi,esi
c001375e:	80 3d 7d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc7d,0x0
c0013765:	74 05                	je     c001376c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013767:	be 08 07 00 00       	mov    esi,0x708
c001376c:	31 ff                	xor    edi,edi
c001376e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013772:	29 f0                	sub    eax,esi
c0013774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013778:	19 fa                	sbb    edx,edi
c001377a:	89 d8                	mov    eax,ebx
c001377c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013780:	5b                   	pop    ebx
c0013781:	5e                   	pop    esi
c0013782:	5f                   	pop    edi
c0013783:	ff e0                	jmp    eax

c0013785 <datetimeToSeconds(datetime_t)>:
c0013785:	55                   	push   ebp
c0013786:	57                   	push   edi
c0013787:	56                   	push   esi
c0013788:	53                   	push   ebx
c0013789:	83 ec 14             	sub    esp,0x14
c001378c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013790:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013794:	89 d3                	mov    ebx,edx
c0013796:	0f b6 c6             	movzx  eax,dh
c0013799:	c1 eb 10             	shr    ebx,0x10
c001379c:	48                   	dec    eax
c001379d:	66 81 eb 6c 07       	sub    bx,0x76c
c00137a2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00137a6:	0f b6 f5             	movzx  esi,ch
c00137a9:	89 cf                	mov    edi,ecx
c00137ab:	6b f6 3c             	imul   esi,esi,0x3c
c00137ae:	c1 ef 10             	shr    edi,0x10
c00137b1:	0f b6 c9             	movzx  ecx,cl
c00137b4:	89 f8                	mov    eax,edi
c00137b6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137bc:	0f b6 f8             	movzx  edi,al
c00137bf:	0f b6 d2             	movzx  edx,dl
c00137c2:	01 fe                	add    esi,edi
c00137c4:	01 f1                	add    ecx,esi
c00137c6:	0f b7 f3             	movzx  esi,bx
c00137c9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137cd:	c1 f9 1f             	sar    ecx,0x1f
c00137d0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137d9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137de:	8b 0c 8d 80 ab 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5480]
c00137e5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137e9:	76 29                	jbe    c0013814 <datetimeToSeconds(datetime_t)+0x8f>
c00137eb:	f6 c3 03             	test   bl,0x3
c00137ee:	75 24                	jne    c0013814 <datetimeToSeconds(datetime_t)+0x8f>
c00137f0:	31 d2                	xor    edx,edx
c00137f2:	bf 64 00 00 00       	mov    edi,0x64
c00137f7:	89 d8                	mov    eax,ebx
c00137f9:	66 f7 f7             	div    di
c00137fc:	66 85 d2             	test   dx,dx
c00137ff:	75 12                	jne    c0013813 <datetimeToSeconds(datetime_t)+0x8e>
c0013801:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013807:	bf 90 01 00 00       	mov    edi,0x190
c001380c:	99                   	cdq    
c001380d:	f7 ff                	idiv   edi
c001380f:	85 d2                	test   edx,edx
c0013811:	75 01                	jne    c0013814 <datetimeToSeconds(datetime_t)+0x8f>
c0013813:	41                   	inc    ecx
c0013814:	66 83 fb 46          	cmp    bx,0x46
c0013818:	76 45                	jbe    c001385f <datetimeToSeconds(datetime_t)+0xda>
c001381a:	bb 46 00 00 00       	mov    ebx,0x46
c001381f:	bf 64 00 00 00       	mov    edi,0x64
c0013824:	bd 90 01 00 00       	mov    ebp,0x190
c0013829:	b8 6d 01 00 00       	mov    eax,0x16d
c001382e:	f6 c3 03             	test   bl,0x3
c0013831:	75 23                	jne    c0013856 <datetimeToSeconds(datetime_t)+0xd1>
c0013833:	89 d8                	mov    eax,ebx
c0013835:	99                   	cdq    
c0013836:	f7 ff                	idiv   edi
c0013838:	b8 6e 01 00 00       	mov    eax,0x16e
c001383d:	85 d2                	test   edx,edx
c001383f:	75 15                	jne    c0013856 <datetimeToSeconds(datetime_t)+0xd1>
c0013841:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013847:	99                   	cdq    
c0013848:	f7 fd                	idiv   ebp
c001384a:	83 fa 01             	cmp    edx,0x1
c001384d:	19 c0                	sbb    eax,eax
c001384f:	f7 d0                	not    eax
c0013851:	05 6e 01 00 00       	add    eax,0x16e
c0013856:	01 c1                	add    ecx,eax
c0013858:	43                   	inc    ebx
c0013859:	39 f3                	cmp    ebx,esi
c001385b:	7c cc                	jl     c0013829 <datetimeToSeconds(datetime_t)+0xa4>
c001385d:	eb 35                	jmp    c0013894 <datetimeToSeconds(datetime_t)+0x10f>
c001385f:	74 33                	je     c0013894 <datetimeToSeconds(datetime_t)+0x10f>
c0013861:	b8 45 00 00 00       	mov    eax,0x45
c0013866:	89 c2                	mov    edx,eax
c0013868:	83 e2 03             	and    edx,0x3
c001386b:	39 f0                	cmp    eax,esi
c001386d:	7e 0f                	jle    c001387e <datetimeToSeconds(datetime_t)+0xf9>
c001386f:	83 fa 01             	cmp    edx,0x1
c0013872:	19 d2                	sbb    edx,edx
c0013874:	48                   	dec    eax
c0013875:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001387c:	eb e8                	jmp    c0013866 <datetimeToSeconds(datetime_t)+0xe1>
c001387e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013883:	85 d2                	test   edx,edx
c0013885:	75 0b                	jne    c0013892 <datetimeToSeconds(datetime_t)+0x10d>
c0013887:	66 83 fb 01          	cmp    bx,0x1
c001388b:	19 c0                	sbb    eax,eax
c001388d:	05 6e 01 00 00       	add    eax,0x16e
c0013892:	29 c1                	sub    ecx,eax
c0013894:	b8 80 51 01 00       	mov    eax,0x15180
c0013899:	f7 e9                	imul   ecx
c001389b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001389f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00138a3:	83 c4 14             	add    esp,0x14
c00138a6:	5b                   	pop    ebx
c00138a7:	5e                   	pop    esi
c00138a8:	5f                   	pop    edi
c00138a9:	5d                   	pop    ebp
c00138aa:	c3                   	ret    
c00138ab:	90                   	nop

c00138ac <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00138ac:	57                   	push   edi
c00138ad:	56                   	push   esi
c00138ae:	53                   	push   ebx
c00138af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00138b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00138b5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00138b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138c0:	e8 c0 fe ff ff       	call   c0013785 <datetimeToSeconds(datetime_t)>
c00138c5:	59                   	pop    ecx
c00138c6:	0f b6 0d 7c dc 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dc7c
c00138cd:	5b                   	pop    ebx
c00138ce:	03 0d 80 dc 02 c0    	add    ecx,DWORD PTR ds:0xc002dc80
c00138d4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138da:	89 cb                	mov    ebx,ecx
c00138dc:	c1 fb 1f             	sar    ebx,0x1f
c00138df:	29 c8                	sub    eax,ecx
c00138e1:	19 da                	sbb    edx,ebx
c00138e3:	31 c9                	xor    ecx,ecx
c00138e5:	80 3d 7d dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc7d,0x0
c00138ec:	74 05                	je     c00138f3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138ee:	b9 08 07 00 00       	mov    ecx,0x708
c00138f3:	31 db                	xor    ebx,ebx
c00138f5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138f9:	29 c8                	sub    eax,ecx
c00138fb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ff:	19 da                	sbb    edx,ebx
c0013901:	89 f8                	mov    eax,edi
c0013903:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013907:	5b                   	pop    ebx
c0013908:	5e                   	pop    esi
c0013909:	5f                   	pop    edi
c001390a:	ff e0                	jmp    eax

c001390c <secondsToDatetime(unsigned long long)>:
c001390c:	55                   	push   ebp
c001390d:	57                   	push   edi
c001390e:	56                   	push   esi
c001390f:	53                   	push   ebx
c0013910:	83 ec 1c             	sub    esp,0x1c
c0013913:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013917:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001391b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001391f:	6a 00                	push   0x0
c0013921:	68 80 51 01 00       	push   0x15180
c0013926:	55                   	push   ebp
c0013927:	57                   	push   edi
c0013928:	e8 a7 2e 01 00       	call   c00267d4 <__udivdi3>
c001392d:	83 c4 10             	add    esp,0x10
c0013930:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013936:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001393a:	6a 00                	push   0x0
c001393c:	68 80 51 01 00       	push   0x15180
c0013941:	55                   	push   ebp
c0013942:	57                   	push   edi
c0013943:	bf 10 0e 00 00       	mov    edi,0xe10
c0013948:	e8 87 2f 01 00       	call   c00268d4 <__umoddi3>
c001394d:	83 c4 10             	add    esp,0x10
c0013950:	99                   	cdq    
c0013951:	f7 ff                	idiv   edi
c0013953:	bf 3c 00 00 00       	mov    edi,0x3c
c0013958:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001395b:	89 d0                	mov    eax,edx
c001395d:	99                   	cdq    
c001395e:	f7 ff                	idiv   edi
c0013960:	85 db                	test   ebx,ebx
c0013962:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013965:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013968:	79 11                	jns    c001397b <secondsToDatetime(unsigned long long)+0x6f>
c001396a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001396e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013974:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013979:	eb 07                	jmp    c0013982 <secondsToDatetime(unsigned long long)+0x76>
c001397b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013980:	89 d8                	mov    eax,ebx
c0013982:	bf b4 05 00 00       	mov    edi,0x5b4
c0013987:	99                   	cdq    
c0013988:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001398d:	f7 f9                	idiv   ecx
c001398f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013998:	31 d2                	xor    edx,edx
c001399a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00139a2:	01 c3                	add    ebx,eax
c00139a4:	89 d8                	mov    eax,ebx
c00139a6:	f7 f1                	div    ecx
c00139a8:	31 d2                	xor    edx,edx
c00139aa:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00139ad:	89 d8                	mov    eax,ebx
c00139af:	f7 f7                	div    edi
c00139b1:	31 d2                	xor    edx,edx
c00139b3:	29 c1                	sub    ecx,eax
c00139b5:	89 d8                	mov    eax,ebx
c00139b7:	f7 f5                	div    ebp
c00139b9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00139be:	29 c1                	sub    ecx,eax
c00139c0:	31 d2                	xor    edx,edx
c00139c2:	89 c8                	mov    eax,ecx
c00139c4:	f7 f5                	div    ebp
c00139c6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139cf:	31 d2                	xor    edx,edx
c00139d1:	89 c8                	mov    eax,ecx
c00139d3:	f7 f5                	div    ebp
c00139d5:	31 d2                	xor    edx,edx
c00139d7:	01 c3                	add    ebx,eax
c00139d9:	89 c8                	mov    eax,ecx
c00139db:	f7 f7                	div    edi
c00139dd:	bf 99 00 00 00       	mov    edi,0x99
c00139e2:	29 c3                	sub    ebx,eax
c00139e4:	31 d2                	xor    edx,edx
c00139e6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139ee:	29 c3                	sub    ebx,eax
c00139f0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139f3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139f6:	bb 05 00 00 00       	mov    ebx,0x5
c00139fb:	83 c1 02             	add    ecx,0x2
c00139fe:	89 c8                	mov    eax,ecx
c0013a00:	f7 f7                	div    edi
c0013a02:	31 d2                	xor    edx,edx
c0013a04:	89 c7                	mov    edi,eax
c0013a06:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013a0c:	83 c0 02             	add    eax,0x2
c0013a0f:	f7 f3                	div    ebx
c0013a11:	89 eb                	mov    ebx,ebp
c0013a13:	29 c3                	sub    ebx,eax
c0013a15:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a1b:	88 1e                	mov    BYTE PTR [esi],bl
c0013a1d:	19 c0                	sbb    eax,eax
c0013a1f:	31 d2                	xor    edx,edx
c0013a21:	83 e0 0c             	and    eax,0xc
c0013a24:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a28:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a30:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a34:	83 f9 01             	cmp    ecx,0x1
c0013a37:	0f 96 c2             	setbe  dl
c0013a3a:	41                   	inc    ecx
c0013a3b:	01 d0                	add    eax,edx
c0013a3d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a40:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a44:	83 c4 1c             	add    esp,0x1c
c0013a47:	89 f0                	mov    eax,esi
c0013a49:	5b                   	pop    ebx
c0013a4a:	5e                   	pop    esi
c0013a4b:	5f                   	pop    edi
c0013a4c:	5d                   	pop    ebp
c0013a4d:	c2 04 00             	ret    0x4

c0013a50 <Clock::timeInDatetimeLocal()>:
c0013a50:	53                   	push   ebx
c0013a51:	83 ec 14             	sub    esp,0x14
c0013a54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a5c:	e8 83 fc ff ff       	call   c00136e4 <Clock::timeInSecondsLocal()>
c0013a61:	83 c4 0c             	add    esp,0xc
c0013a64:	52                   	push   edx
c0013a65:	50                   	push   eax
c0013a66:	53                   	push   ebx
c0013a67:	e8 a0 fe ff ff       	call   c001390c <secondsToDatetime(unsigned long long)>
c0013a6c:	89 d8                	mov    eax,ebx
c0013a6e:	83 c4 14             	add    esp,0x14
c0013a71:	5b                   	pop    ebx
c0013a72:	c2 04 00             	ret    0x4
c0013a75:	90                   	nop

c0013a76 <Device::hibernate()>:
c0013a76:	c3                   	ret    
c0013a77:	90                   	nop

c0013a78 <Device::wake()>:
c0013a78:	c3                   	ret    
c0013a79:	90                   	nop

c0013a7a <Device::detect()>:
c0013a7a:	c3                   	ret    
c0013a7b:	90                   	nop

c0013a7c <Device::disableLegacy()>:
c0013a7c:	c3                   	ret    
c0013a7d:	90                   	nop

c0013a7e <Device::powerSaving(PowerSavingLevel)>:
c0013a7e:	c3                   	ret    
c0013a7f:	90                   	nop

c0013a80 <DriverlessDevice::close(int, int, void*)>:
c0013a80:	31 c0                	xor    eax,eax
c0013a82:	c3                   	ret    
c0013a83:	90                   	nop

c0013a84 <DriverlessDevice::detect()>:
c0013a84:	c3                   	ret    
c0013a85:	90                   	nop

c0013a86 <DriverlessDevice::open(int, int, void*)>:
c0013a86:	83 ec 18             	sub    esp,0x18
c0013a89:	68 b0 ab 02 c0       	push   0xc002abb0
c0013a8e:	e8 6c 64 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0013a93:	83 c8 ff             	or     eax,0xffffffff
c0013a96:	83 c4 1c             	add    esp,0x1c
c0013a99:	c3                   	ret    

c0013a9a <Device::~Device()>:
c0013a9a:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c0013a9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aa3:	89 10                	mov    DWORD PTR [eax],edx
c0013aa5:	90                   	nop
c0013aa6:	c3                   	ret    
c0013aa7:	90                   	nop

c0013aa8 <Device::~Device()>:
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013aaf:	e8 e6 ff ff ff       	call   c0013a9a <Device::~Device()>
c0013ab4:	83 c4 04             	add    esp,0x4
c0013ab7:	83 ec 08             	sub    esp,0x8
c0013aba:	68 58 01 00 00       	push   0x158
c0013abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ac3:	e8 f3 eb ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Device::findAndLoadDriver()>:
c0013ad0:	c7 44 24 04 ce ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002abce
c0013ad8:	e9 b6 ec ff ff       	jmp    c0012793 <Dbg::kprintf(char const*, ...)>
c0013add:	90                   	nop

c0013ade <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ade:	57                   	push   edi
c0013adf:	b9 09 00 00 00       	mov    ecx,0x9
c0013ae4:	56                   	push   esi
c0013ae5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ae9:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013aed:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013af7:	81 c7 18 01 00 00    	add    edi,0x118
c0013afd:	fc                   	cld    
c0013afe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013b00:	5e                   	pop    esi
c0013b01:	5f                   	pop    edi
c0013b02:	c3                   	ret    
c0013b03:	90                   	nop

c0013b04 <Device::preOpenACPI(void*, char*, char*)>:
c0013b04:	57                   	push   edi
c0013b05:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013b0a:	56                   	push   esi
c0013b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013b0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b13:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013b1d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013b23:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013b29:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b2f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013b34:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013b3a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013b3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b40:	5e                   	pop    esi
c0013b41:	5f                   	pop    edi
c0013b42:	c3                   	ret    
c0013b43:	90                   	nop

c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b48:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b4d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b54:	75 0b                	jne    c0013b61 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b56:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b5c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b5f:	eb 1e                	jmp    c0013b7f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b61:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0013b66:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b6c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b72:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b74:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b7c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b7f:	ff e0                	jmp    eax
c0013b81:	90                   	nop

c0013b82 <Device::getParent()>:
c0013b82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b86:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013b8c:	c3                   	ret    
c0013b8d:	90                   	nop

c0013b8e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b92:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b97:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b9e:	75 0b                	jne    c0013bab <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ba6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ba9:	eb 1e                	jmp    c0013bc9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013bab:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0013bb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013bb6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013bbc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013bbe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013bc2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bc6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013bc9:	ff e0                	jmp    eax
c0013bcb:	90                   	nop

c0013bcc <Device::addChild(Device*)>:
c0013bcc:	53                   	push   ebx
c0013bcd:	83 ec 08             	sub    esp,0x8
c0013bd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bd8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013bde:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013be4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013be6:	85 d2                	test   edx,edx
c0013be8:	74 04                	je     c0013bee <Device::addChild(Device*)+0x22>
c0013bea:	89 d3                	mov    ebx,edx
c0013bec:	eb f6                	jmp    c0013be4 <Device::addChild(Device*)+0x18>
c0013bee:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bf1:	83 ec 0c             	sub    esp,0xc
c0013bf4:	6a 08                	push   0x8
c0013bf6:	e8 9e b9 ff ff       	call   c000f599 <malloc>
c0013bfb:	89 03                	mov    DWORD PTR [ebx],eax
c0013bfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c0a:	83 c4 18             	add    esp,0x18
c0013c0d:	5b                   	pop    ebx
c0013c0e:	c3                   	ret    
c0013c0f:	90                   	nop

c0013c10 <Device::removeAllChildren()>:
c0013c10:	56                   	push   esi
c0013c11:	53                   	push   ebx
c0013c12:	52                   	push   edx
c0013c13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c17:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c20:	74 17                	je     c0013c39 <Device::removeAllChildren()+0x29>
c0013c22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c25:	85 c0                	test   eax,eax
c0013c27:	74 0c                	je     c0013c35 <Device::removeAllChildren()+0x25>
c0013c29:	83 ec 0c             	sub    esp,0xc
c0013c2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c2e:	50                   	push   eax
c0013c2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c32:	83 c4 10             	add    esp,0x10
c0013c35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c37:	eb e4                	jmp    c0013c1d <Device::removeAllChildren()+0xd>
c0013c39:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c3f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c45:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c52:	58                   	pop    eax
c0013c53:	5b                   	pop    ebx
c0013c54:	5e                   	pop    esi
c0013c55:	c3                   	ret    

c0013c56 <Device::hibernateAll()>:
c0013c56:	53                   	push   ebx
c0013c57:	83 ec 14             	sub    esp,0x14
c0013c5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c60:	53                   	push   ebx
c0013c61:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c64:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c6a:	83 c4 10             	add    esp,0x10
c0013c6d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c70:	74 0f                	je     c0013c81 <Device::hibernateAll()+0x2b>
c0013c72:	83 ec 0c             	sub    esp,0xc
c0013c75:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c78:	e8 d9 ff ff ff       	call   c0013c56 <Device::hibernateAll()>
c0013c7d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c7f:	eb e9                	jmp    c0013c6a <Device::hibernateAll()+0x14>
c0013c81:	83 c4 08             	add    esp,0x8
c0013c84:	5b                   	pop    ebx
c0013c85:	c3                   	ret    

c0013c86 <Device::wakeAll()>:
c0013c86:	53                   	push   ebx
c0013c87:	83 ec 14             	sub    esp,0x14
c0013c8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c90:	53                   	push   ebx
c0013c91:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ca0:	74 0f                	je     c0013cb1 <Device::wakeAll()+0x2b>
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ca8:	e8 d9 ff ff ff       	call   c0013c86 <Device::wakeAll()>
c0013cad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013caf:	eb e9                	jmp    c0013c9a <Device::wakeAll()+0x14>
c0013cb1:	83 c4 08             	add    esp,0x8
c0013cb4:	5b                   	pop    ebx
c0013cb5:	c3                   	ret    

c0013cb6 <Device::detectAll()>:
c0013cb6:	53                   	push   ebx
c0013cb7:	83 ec 14             	sub    esp,0x14
c0013cba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cc0:	53                   	push   ebx
c0013cc1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013cc4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cca:	83 c4 10             	add    esp,0x10
c0013ccd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cd0:	74 0f                	je     c0013ce1 <Device::detectAll()+0x2b>
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd8:	e8 d9 ff ff ff       	call   c0013cb6 <Device::detectAll()>
c0013cdd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdf:	eb e9                	jmp    c0013cca <Device::detectAll()+0x14>
c0013ce1:	83 c4 08             	add    esp,0x8
c0013ce4:	5b                   	pop    ebx
c0013ce5:	c3                   	ret    

c0013ce6 <Device::disableLegacyAll()>:
c0013ce6:	53                   	push   ebx
c0013ce7:	83 ec 14             	sub    esp,0x14
c0013cea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cf0:	53                   	push   ebx
c0013cf1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cf4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cfa:	83 c4 10             	add    esp,0x10
c0013cfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d00:	74 0f                	je     c0013d11 <Device::disableLegacyAll()+0x2b>
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d08:	e8 d9 ff ff ff       	call   c0013ce6 <Device::disableLegacyAll()>
c0013d0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d0f:	eb e9                	jmp    c0013cfa <Device::disableLegacyAll()+0x14>
c0013d11:	83 c4 08             	add    esp,0x8
c0013d14:	5b                   	pop    ebx
c0013d15:	c3                   	ret    

c0013d16 <Device::loadDriversForAll()>:
c0013d16:	53                   	push   ebx
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d1e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013d25:	75 0c                	jne    c0013d33 <Device::loadDriversForAll()+0x1d>
c0013d27:	83 ec 0c             	sub    esp,0xc
c0013d2a:	53                   	push   ebx
c0013d2b:	e8 a0 fd ff ff       	call   c0013ad0 <Device::findAndLoadDriver()>
c0013d30:	83 c4 10             	add    esp,0x10
c0013d33:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d3c:	74 12                	je     c0013d50 <Device::loadDriversForAll()+0x3a>
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d44:	e8 cd ff ff ff       	call   c0013d16 <Device::loadDriversForAll()>
c0013d49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d4b:	83 c4 10             	add    esp,0x10
c0013d4e:	eb e9                	jmp    c0013d39 <Device::loadDriversForAll()+0x23>
c0013d50:	83 c4 08             	add    esp,0x8
c0013d53:	5b                   	pop    ebx
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <Device::closeAll()>:
c0013d56:	53                   	push   ebx
c0013d57:	83 ec 08             	sub    esp,0x8
c0013d5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d60:	6a 00                	push   0x0
c0013d62:	6a 00                	push   0x0
c0013d64:	6a 00                	push   0x0
c0013d66:	53                   	push   ebx
c0013d67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d70:	83 c4 10             	add    esp,0x10
c0013d73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d76:	74 0f                	je     c0013d87 <Device::closeAll()+0x31>
c0013d78:	83 ec 0c             	sub    esp,0xc
c0013d7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d7e:	e8 d3 ff ff ff       	call   c0013d56 <Device::closeAll()>
c0013d83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d85:	eb e9                	jmp    c0013d70 <Device::closeAll()+0x1a>
c0013d87:	83 c4 08             	add    esp,0x8
c0013d8a:	5b                   	pop    ebx
c0013d8b:	c3                   	ret    

c0013d8c <Device::powerSavingAll(PowerSavingLevel)>:
c0013d8c:	56                   	push   esi
c0013d8d:	53                   	push   ebx
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9b:	56                   	push   esi
c0013d9c:	53                   	push   ebx
c0013d9d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013da0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dac:	74 0f                	je     c0013dbd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013dae:	52                   	push   edx
c0013daf:	52                   	push   edx
c0013db0:	56                   	push   esi
c0013db1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013db4:	e8 d3 ff ff ff       	call   c0013d8c <Device::powerSavingAll(PowerSavingLevel)>
c0013db9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dbb:	eb e9                	jmp    c0013da6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013dbd:	58                   	pop    eax
c0013dbe:	5b                   	pop    ebx
c0013dbf:	5e                   	pop    esi
c0013dc0:	c3                   	ret    
c0013dc1:	90                   	nop

c0013dc2 <Device::setName(char const*)>:
c0013dc2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013dca:	e9 3d ca fe ff       	jmp    c000080c <strcpy>
c0013dcf:	90                   	nop

c0013dd0 <Device::Device(char const*)>:
c0013dd0:	83 ec 1c             	sub    esp,0x1c
c0013dd3:	ba 10 ac 02 c0       	mov    edx,0xc002ac10
c0013dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddc:	89 10                	mov    DWORD PTR [eax],edx
c0013dde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013de2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013df0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e0c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e16:	83 ec 08             	sub    esp,0x8
c0013e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e21:	e8 9c ff ff ff       	call   c0013dc2 <Device::setName(char const*)>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e31:	83 ec 0c             	sub    esp,0xc
c0013e34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e38:	e8 5c b7 ff ff       	call   c000f599 <malloc>
c0013e3d:	83 c4 10             	add    esp,0x10
c0013e40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e51:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e87:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ea0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013eb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ebc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013ec6:	90                   	nop
c0013ec7:	83 c4 1c             	add    esp,0x1c
c0013eca:	c3                   	ret    
c0013ecb:	90                   	nop

c0013ecc <Device::getName()>:
c0013ecc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ed0:	05 d0 00 00 00       	add    eax,0xd0
c0013ed5:	c3                   	ret    

c0013ed6 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ed6:	83 ec 0c             	sub    esp,0xc
c0013ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edd:	83 ec 08             	sub    esp,0x8
c0013ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ee4:	50                   	push   eax
c0013ee5:	e8 e6 fe ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0013eea:	83 c4 10             	add    esp,0x10
c0013eed:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	89 10                	mov    DWORD PTR [eax],edx
c0013ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efc:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013f06:	90                   	nop
c0013f07:	83 c4 0c             	add    esp,0xc
c0013f0a:	c3                   	ret    
c0013f0b:	90                   	nop

c0013f0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013f0c:	57                   	push   edi
c0013f0d:	56                   	push   esi
c0013f0e:	53                   	push   ebx
c0013f0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f1b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013f21:	75 0c                	jne    c0013f2f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013f23:	52                   	push   edx
c0013f24:	52                   	push   edx
c0013f25:	53                   	push   ebx
c0013f26:	56                   	push   esi
c0013f27:	e8 e4 47 01 00       	call   c0028710 <LinkedList<Device>::addElement(Device*)>
c0013f2c:	83 c4 10             	add    esp,0x10
c0013f2f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f38:	74 12                	je     c0013f4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013f3a:	50                   	push   eax
c0013f3b:	57                   	push   edi
c0013f3c:	56                   	push   esi
c0013f3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f40:	e8 c7 ff ff ff       	call   c0013f0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	eb e9                	jmp    c0013f35 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f4c:	5b                   	pop    ebx
c0013f4d:	5e                   	pop    esi
c0013f4e:	5f                   	pop    edi
c0013f4f:	c3                   	ret    

c0013f50 <getDevicesOfType(DeviceType)>:
c0013f50:	53                   	push   ebx
c0013f51:	83 ec 14             	sub    esp,0x14
c0013f54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f58:	53                   	push   ebx
c0013f59:	e8 8e 48 01 00       	call   c00287ec <LinkedList<Device>::LinkedList()>
c0013f5e:	83 c4 0c             	add    esp,0xc
c0013f61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f65:	53                   	push   ebx
c0013f66:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c0013f6c:	e8 9b ff ff ff       	call   c0013f0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f71:	89 d8                	mov    eax,ebx
c0013f73:	83 c4 18             	add    esp,0x18
c0013f76:	5b                   	pop    ebx
c0013f77:	c2 04 00             	ret    0x4

c0013f7a <HardDiskController::HardDiskController(char const*)>:
c0013f7a:	83 ec 0c             	sub    esp,0xc
c0013f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f81:	83 ec 08             	sub    esp,0x8
c0013f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f88:	50                   	push   eax
c0013f89:	e8 42 fe ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0013f8e:	83 c4 10             	add    esp,0x10
c0013f91:	ba 68 ac 02 c0       	mov    edx,0xc002ac68
c0013f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9a:	89 10                	mov    DWORD PTR [eax],edx
c0013f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013faa:	90                   	nop
c0013fab:	83 c4 0c             	add    esp,0xc
c0013fae:	c3                   	ret    
c0013faf:	90                   	nop

c0013fb0 <HardDiskController::~HardDiskController()>:
c0013fb0:	83 ec 0c             	sub    esp,0xc
c0013fb3:	ba 68 ac 02 c0       	mov    edx,0xc002ac68
c0013fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbc:	89 10                	mov    DWORD PTR [eax],edx
c0013fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc2:	83 ec 0c             	sub    esp,0xc
c0013fc5:	50                   	push   eax
c0013fc6:	e8 cf fa ff ff       	call   c0013a9a <Device::~Device()>
c0013fcb:	83 c4 10             	add    esp,0x10
c0013fce:	90                   	nop
c0013fcf:	83 c4 0c             	add    esp,0xc
c0013fd2:	c3                   	ret    
c0013fd3:	90                   	nop

c0013fd4 <HardDiskController::~HardDiskController()>:
c0013fd4:	83 ec 0c             	sub    esp,0xc
c0013fd7:	83 ec 0c             	sub    esp,0xc
c0013fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fde:	e8 cd ff ff ff       	call   c0013fb0 <HardDiskController::~HardDiskController()>
c0013fe3:	83 c4 10             	add    esp,0x10
c0013fe6:	83 ec 08             	sub    esp,0x8
c0013fe9:	68 58 01 00 00       	push   0x158
c0013fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff2:	e8 c4 e6 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0013ff7:	83 c4 10             	add    esp,0x10
c0013ffa:	83 c4 0c             	add    esp,0xc
c0013ffd:	c3                   	ret    

c0013ffe <PhysicalDisk::eject()>:
c0013ffe:	83 c8 ff             	or     eax,0xffffffff
c0014001:	c3                   	ret    

c0014002 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014002:	83 ec 0c             	sub    esp,0xc
c0014005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014009:	83 ec 08             	sub    esp,0x8
c001400c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014010:	50                   	push   eax
c0014011:	e8 ba fd ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0014016:	83 c4 10             	add    esp,0x10
c0014019:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c001401e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014022:	89 10                	mov    DWORD PTR [eax],edx
c0014024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014028:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001402f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014033:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001403a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001403e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001404c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014050:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014064:	90                   	nop
c0014065:	83 c4 0c             	add    esp,0xc
c0014068:	c3                   	ret    
c0014069:	90                   	nop

c001406a <PhysicalDisk::startCache()>:
c001406a:	56                   	push   esi
c001406b:	53                   	push   ebx
c001406c:	83 ec 10             	sub    esp,0x10
c001406f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014073:	6a 44                	push   0x44
c0014075:	e8 1f b5 ff ff       	call   c000f599 <malloc>
c001407a:	89 c6                	mov    esi,eax
c001407c:	58                   	pop    eax
c001407d:	5a                   	pop    edx
c001407e:	53                   	push   ebx
c001407f:	56                   	push   esi
c0014080:	e8 71 28 00 00       	call   c00168f6 <VCache::VCache(PhysicalDisk*)>
c0014085:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001408b:	83 c4 14             	add    esp,0x14
c001408e:	5b                   	pop    ebx
c001408f:	5e                   	pop    esi
c0014090:	c3                   	ret    
c0014091:	90                   	nop

c0014092 <PhysicalDisk::~PhysicalDisk()>:
c0014092:	83 ec 0c             	sub    esp,0xc
c0014095:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c001409a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001409e:	89 10                	mov    DWORD PTR [eax],edx
c00140a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a4:	83 ec 0c             	sub    esp,0xc
c00140a7:	50                   	push   eax
c00140a8:	e8 ed f9 ff ff       	call   c0013a9a <Device::~Device()>
c00140ad:	83 c4 10             	add    esp,0x10
c00140b0:	90                   	nop
c00140b1:	83 c4 0c             	add    esp,0xc
c00140b4:	c3                   	ret    
c00140b5:	90                   	nop

c00140b6 <PhysicalDisk::~PhysicalDisk()>:
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	83 ec 0c             	sub    esp,0xc
c00140bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c0:	e8 cd ff ff ff       	call   c0014092 <PhysicalDisk::~PhysicalDisk()>
c00140c5:	83 c4 10             	add    esp,0x10
c00140c8:	83 ec 08             	sub    esp,0x8
c00140cb:	68 6c 01 00 00       	push   0x16c
c00140d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140d4:	e8 e2 e5 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	83 c4 0c             	add    esp,0xc
c00140df:	c3                   	ret    

c00140e0 <FPU::FPU(char const*)>:
c00140e0:	83 ec 0c             	sub    esp,0xc
c00140e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e7:	83 ec 08             	sub    esp,0x8
c00140ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ee:	50                   	push   eax
c00140ef:	e8 dc fc ff ff       	call   c0013dd0 <Device::Device(char const*)>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c00140fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014100:	89 10                	mov    DWORD PTR [eax],edx
c0014102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014106:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014110:	90                   	nop
c0014111:	83 c4 0c             	add    esp,0xc
c0014114:	c3                   	ret    
c0014115:	90                   	nop

c0014116 <FPU::~FPU()>:
c0014116:	83 ec 0c             	sub    esp,0xc
c0014119:	ba d8 ac 02 c0       	mov    edx,0xc002acd8
c001411e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014122:	89 10                	mov    DWORD PTR [eax],edx
c0014124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014128:	83 ec 0c             	sub    esp,0xc
c001412b:	50                   	push   eax
c001412c:	e8 69 f9 ff ff       	call   c0013a9a <Device::~Device()>
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	90                   	nop
c0014135:	83 c4 0c             	add    esp,0xc
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <FPU::~FPU()>:
c001413a:	83 ec 0c             	sub    esp,0xc
c001413d:	83 ec 0c             	sub    esp,0xc
c0014140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014144:	e8 cd ff ff ff       	call   c0014116 <FPU::~FPU()>
c0014149:	83 c4 10             	add    esp,0x10
c001414c:	83 ec 08             	sub    esp,0x8
c001414f:	68 58 01 00 00       	push   0x158
c0014154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014158:	e8 5e e5 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001415d:	83 c4 10             	add    esp,0x10
c0014160:	83 c4 0c             	add    esp,0xc
c0014163:	c3                   	ret    

c0014164 <setupFPU()>:
c0014164:	53                   	push   ebx
c0014165:	83 ec 08             	sub    esp,0x8
c0014168:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c001416e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014175:	74 19                	je     c0014190 <setupFPU()+0x2c>
c0014177:	83 ec 0c             	sub    esp,0xc
c001417a:	68 58 01 00 00       	push   0x158
c001417f:	e8 15 b4 ff ff       	call   c000f599 <malloc>
c0014184:	89 c3                	mov    ebx,eax
c0014186:	89 04 24             	mov    DWORD PTR [esp],eax
c0014189:	e8 ce 11 01 00       	call   c002535c <AVX::AVX()>
c001418e:	eb 5b                	jmp    c00141eb <setupFPU()+0x87>
c0014190:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014196:	84 c0                	test   al,al
c0014198:	79 19                	jns    c00141b3 <setupFPU()+0x4f>
c001419a:	83 ec 0c             	sub    esp,0xc
c001419d:	68 58 01 00 00       	push   0x158
c00141a2:	e8 f2 b3 ff ff       	call   c000f599 <malloc>
c00141a7:	89 c3                	mov    ebx,eax
c00141a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00141ac:	e8 d1 12 01 00       	call   c0025482 <SSE::SSE()>
c00141b1:	eb 38                	jmp    c00141eb <setupFPU()+0x87>
c00141b3:	a8 20                	test   al,0x20
c00141b5:	74 19                	je     c00141d0 <setupFPU()+0x6c>
c00141b7:	83 ec 0c             	sub    esp,0xc
c00141ba:	68 58 01 00 00       	push   0x158
c00141bf:	e8 d5 b3 ff ff       	call   c000f599 <malloc>
c00141c4:	89 c3                	mov    ebx,eax
c00141c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00141c9:	e8 1e 12 01 00       	call   c00253ec <MMX::MMX()>
c00141ce:	eb 1b                	jmp    c00141eb <setupFPU()+0x87>
c00141d0:	a8 10                	test   al,0x10
c00141d2:	74 1c                	je     c00141f0 <setupFPU()+0x8c>
c00141d4:	83 ec 0c             	sub    esp,0xc
c00141d7:	68 58 01 00 00       	push   0x158
c00141dc:	e8 b8 b3 ff ff       	call   c000f599 <malloc>
c00141e1:	89 c3                	mov    ebx,eax
c00141e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00141e6:	e8 25 13 01 00       	call   c0025510 <x87::x87()>
c00141eb:	83 c4 10             	add    esp,0x10
c00141ee:	eb 24                	jmp    c0014214 <setupFPU()+0xb0>
c00141f0:	83 e0 ef             	and    eax,0xffffffef
c00141f3:	83 ec 0c             	sub    esp,0xc
c00141f6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141fc:	68 c4 ac 02 c0       	push   0xc002acc4
c0014201:	e8 8d e5 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014206:	0f 20 c0             	mov    eax,cr0
c0014209:	83 c8 04             	or     eax,0x4
c001420c:	0f 22 c0             	mov    cr0,eax
c001420f:	31 db                	xor    ebx,ebx
c0014211:	83 c4 10             	add    esp,0x10
c0014214:	89 d8                	mov    eax,ebx
c0014216:	83 c4 08             	add    esp,0x8
c0014219:	5b                   	pop    ebx
c001421a:	c3                   	ret    
c001421b:	90                   	nop

c001421c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001421c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014220:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014224:	c1 e0 04             	shl    eax,0x4
c0014227:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001422b:	8d 50 10             	lea    edx,[eax+0x10]
c001422e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014234:	74 08                	je     c001423e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014236:	83 c0 04             	add    eax,0x4
c0014239:	39 d0                	cmp    eax,edx
c001423b:	75 f1                	jne    c001422e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001423d:	c3                   	ret    
c001423e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014248:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014252:	eb e2                	jmp    c0014236 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014254 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014254:	57                   	push   edi
c0014255:	31 c0                	xor    eax,eax
c0014257:	56                   	push   esi
c0014258:	53                   	push   ebx
c0014259:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001425d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014261:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014265:	89 da                	mov    edx,ebx
c0014267:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001426b:	c1 e2 04             	shl    edx,0x4
c001426e:	01 ca                	add    edx,ecx
c0014270:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014278:	74 16                	je     c0014290 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001427a:	40                   	inc    eax
c001427b:	83 f8 04             	cmp    eax,0x4
c001427e:	75 f0                	jne    c0014270 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014280:	c7 44 24 10 08 ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad08
c0014288:	5b                   	pop    ebx
c0014289:	5e                   	pop    esi
c001428a:	5f                   	pop    edi
c001428b:	e9 6f 5c 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c0014290:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014293:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014296:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001429c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00142a2:	5b                   	pop    ebx
c00142a3:	5e                   	pop    esi
c00142a4:	5f                   	pop    edi
c00142a5:	c3                   	ret    

c00142a6 <doubleFault(regs*, void*)>:
c00142a6:	55                   	push   ebp
c00142a7:	89 e5                	mov    ebp,esp
c00142a9:	83 ec 08             	sub    esp,0x8
c00142ac:	83 ec 0c             	sub    esp,0xc
c00142af:	68 15 ad 02 c0       	push   0xc002ad15
c00142b4:	e8 46 5c 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00142b9:	83 c4 10             	add    esp,0x10
c00142bc:	90                   	nop
c00142bd:	c9                   	leave  
c00142be:	c3                   	ret    
c00142bf:	90                   	nop

c00142c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00142c0:	56                   	push   esi
c00142c1:	53                   	push   ebx
c00142c2:	50                   	push   eax
c00142c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142cb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00142d0:	75 35                	jne    c0014307 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00142d2:	8d 43 20             	lea    eax,[ebx+0x20]
c00142d5:	31 d2                	xor    edx,edx
c00142d7:	89 c1                	mov    ecx,eax
c00142d9:	c1 e1 04             	shl    ecx,0x4
c00142dc:	01 f1                	add    ecx,esi
c00142de:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142e6:	74 3e                	je     c0014326 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142e8:	42                   	inc    edx
c00142e9:	83 fa 04             	cmp    edx,0x4
c00142ec:	75 f0                	jne    c00142de <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142ee:	83 ec 0c             	sub    esp,0xc
c00142f1:	68 2f ad 02 c0       	push   0xc002ad2f
c00142f6:	e8 04 5c 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00142fb:	83 c4 10             	add    esp,0x10
c00142fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014303:	5a                   	pop    edx
c0014304:	5b                   	pop    ebx
c0014305:	5e                   	pop    esi
c0014306:	c3                   	ret    
c0014307:	83 ec 0c             	sub    esp,0xc
c001430a:	56                   	push   esi
c001430b:	e8 bc fb ff ff       	call   c0013ecc <Device::getName()>
c0014310:	83 c4 10             	add    esp,0x10
c0014313:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014316:	75 ba                	jne    c00142d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014318:	83 fb 0f             	cmp    ebx,0xf
c001431b:	7f 29                	jg     c0014346 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001431d:	0f b6 9b 60 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd32a0]
c0014324:	eb ac                	jmp    c00142d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014326:	8d 04 82             	lea    eax,[edx+eax*4]
c0014329:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001432d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014330:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014336:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001433a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014340:	89 d8                	mov    eax,ebx
c0014342:	5a                   	pop    edx
c0014343:	5b                   	pop    ebx
c0014344:	5e                   	pop    esi
c0014345:	c3                   	ret    
c0014346:	83 ec 0c             	sub    esp,0xc
c0014349:	68 22 ad 02 c0       	push   0xc002ad22
c001434e:	e8 ac 5b 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0014353:	83 c4 10             	add    esp,0x10
c0014356:	e9 77 ff ff ff       	jmp    c00142d2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001435b:	90                   	nop

c001435c <InterruptController::clearAllHandlers(int, bool)>:
c001435c:	56                   	push   esi
c001435d:	53                   	push   ebx
c001435e:	52                   	push   edx
c001435f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014363:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014367:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001436c:	75 61                	jne    c00143cf <InterruptController::clearAllHandlers(int, bool)+0x73>
c001436e:	8d 46 20             	lea    eax,[esi+0x20]
c0014371:	c1 e6 04             	shl    esi,0x4
c0014374:	c1 e0 04             	shl    eax,0x4
c0014377:	01 de                	add    esi,ebx
c0014379:	01 d8                	add    eax,ebx
c001437b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014385:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001438f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014399:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00143a3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00143ad:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00143b7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00143c1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00143cb:	58                   	pop    eax
c00143cc:	5b                   	pop    ebx
c00143cd:	5e                   	pop    esi
c00143ce:	c3                   	ret    
c00143cf:	83 ec 0c             	sub    esp,0xc
c00143d2:	53                   	push   ebx
c00143d3:	e8 f4 fa ff ff       	call   c0013ecc <Device::getName()>
c00143d8:	83 c4 10             	add    esp,0x10
c00143db:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00143de:	75 8e                	jne    c001436e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143e0:	83 fe 0f             	cmp    esi,0xf
c00143e3:	7f 09                	jg     c00143ee <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143e5:	0f b6 b6 60 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd32a0]
c00143ec:	eb 80                	jmp    c001436e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ee:	83 ec 0c             	sub    esp,0xc
c00143f1:	68 3c ad 02 c0       	push   0xc002ad3c
c00143f6:	e8 04 5b 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00143fb:	83 c4 10             	add    esp,0x10
c00143fe:	e9 6b ff ff ff       	jmp    c001436e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014403:	90                   	nop

c0014404 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014404:	56                   	push   esi
c0014405:	53                   	push   ebx
c0014406:	52                   	push   edx
c0014407:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001440b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001440f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014414:	75 3a                	jne    c0014450 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014416:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001441a:	8d 50 20             	lea    edx,[eax+0x20]
c001441d:	c1 e2 04             	shl    edx,0x4
c0014420:	8d 04 16             	lea    eax,[esi+edx*1]
c0014423:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014427:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001442d:	74 0b                	je     c001443a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001442f:	83 c0 04             	add    eax,0x4
c0014432:	39 d0                	cmp    eax,edx
c0014434:	75 f1                	jne    c0014427 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014436:	58                   	pop    eax
c0014437:	5b                   	pop    ebx
c0014438:	5e                   	pop    esi
c0014439:	c3                   	ret    
c001443a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014444:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001444e:	eb df                	jmp    c001442f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	56                   	push   esi
c0014454:	e8 73 fa ff ff       	call   c0013ecc <Device::getName()>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001445f:	75 b5                	jne    c0014416 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014461:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014466:	7f 11                	jg     c0014479 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014468:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001446c:	0f b6 80 60 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd32a0]
c0014473:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014477:	eb 9d                	jmp    c0014416 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014479:	83 ec 0c             	sub    esp,0xc
c001447c:	68 49 ad 02 c0       	push   0xc002ad49
c0014481:	e8 79 5a 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0014486:	83 c4 10             	add    esp,0x10
c0014489:	eb 8b                	jmp    c0014416 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001448b <nmiHandler(regs*, void*)>:
c001448b:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0014490:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014494:	e9 67 a8 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c0014499 <int_handler>:
c0014499:	55                   	push   ebp
c001449a:	57                   	push   edi
c001449b:	56                   	push   esi
c001449c:	53                   	push   ebx
c001449d:	83 ec 0c             	sub    esp,0xc
c00144a0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00144a4:	80 3d 44 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030644,0x0
c00144ab:	74 0b                	je     c00144b8 <int_handler+0x1f>
c00144ad:	fa                   	cli    
c00144ae:	f4                   	hlt    
c00144af:	80 3d 44 06 03 c0 00 	cmp    BYTE PTR ds:0xc0030644,0x0
c00144b6:	75 f5                	jne    c00144ad <int_handler+0x14>
c00144b8:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00144bd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00144c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00144c6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00144cc:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144cf:	83 f8 17             	cmp    eax,0x17
c00144d2:	77 13                	ja     c00144e7 <int_handler+0x4e>
c00144d4:	83 ec 08             	sub    esp,0x8
c00144d7:	8b 17                	mov    edx,DWORD PTR [edi]
c00144d9:	8d 43 e0             	lea    eax,[ebx-0x20]
c00144dc:	0f b6 c0             	movzx  eax,al
c00144df:	50                   	push   eax
c00144e0:	57                   	push   edi
c00144e1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	83 c3 15             	add    ebx,0x15
c00144ea:	c1 e3 04             	shl    ebx,0x4
c00144ed:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144f1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00144f8:	31 db                	xor    ebx,ebx
c00144fa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00144fe:	85 c0                	test   eax,eax
c0014500:	74 13                	je     c0014515 <int_handler+0x7c>
c0014502:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014505:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014509:	74 1c                	je     c0014527 <int_handler+0x8e>
c001450b:	83 ec 08             	sub    esp,0x8
c001450e:	52                   	push   edx
c001450f:	56                   	push   esi
c0014510:	ff d0                	call   eax
c0014512:	83 c4 10             	add    esp,0x10
c0014515:	43                   	inc    ebx
c0014516:	83 fb 04             	cmp    ebx,0x4
c0014519:	75 df                	jne    c00144fa <int_handler+0x61>
c001451b:	83 c4 0c             	add    esp,0xc
c001451e:	31 c0                	xor    eax,eax
c0014520:	5b                   	pop    ebx
c0014521:	31 d2                	xor    edx,edx
c0014523:	5e                   	pop    esi
c0014524:	5f                   	pop    edi
c0014525:	5d                   	pop    ebp
c0014526:	c3                   	ret    
c0014527:	83 ec 08             	sub    esp,0x8
c001452a:	52                   	push   edx
c001452b:	56                   	push   esi
c001452c:	ff d0                	call   eax
c001452e:	83 c4 10             	add    esp,0x10
c0014531:	83 c4 0c             	add    esp,0xc
c0014534:	5b                   	pop    ebx
c0014535:	5e                   	pop    esi
c0014536:	5f                   	pop    edi
c0014537:	5d                   	pop    ebp
c0014538:	c3                   	ret    
c0014539:	90                   	nop

c001453a <InterruptController::InterruptController(char const*)>:
c001453a:	83 ec 1c             	sub    esp,0x1c
c001453d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014541:	83 ec 08             	sub    esp,0x8
c0014544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014548:	50                   	push   eax
c0014549:	e8 82 f8 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c001454e:	83 c4 10             	add    esp,0x10
c0014551:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c0014556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455a:	89 10                	mov    DWORD PTR [eax],edx
c001455c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014560:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001456a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014572:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001457a:	7f 5e                	jg     c00145da <InterruptController::InterruptController(char const*)+0xa0>
c001457c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014584:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014589:	7f 49                	jg     c00145d4 <InterruptController::InterruptController(char const*)+0x9a>
c001458b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001458f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014593:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001459a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001459e:	01 ca                	add    edx,ecx
c00145a0:	83 c2 54             	add    edx,0x54
c00145a3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00145b3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00145ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145be:	01 ca                	add    edx,ecx
c00145c0:	81 c2 54 04 00 00    	add    edx,0x454
c00145c6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00145ce:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00145d2:	eb b0                	jmp    c0014584 <InterruptController::InterruptController(char const*)+0x4a>
c00145d4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00145d8:	eb 98                	jmp    c0014572 <InterruptController::InterruptController(char const*)+0x38>
c00145da:	90                   	nop
c00145db:	83 c4 1c             	add    esp,0x1c
c00145de:	c3                   	ret    
c00145df:	90                   	nop

c00145e0 <InterruptController::~InterruptController()>:
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	ba 04 b0 02 c0       	mov    edx,0xc002b004
c00145e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ec:	89 10                	mov    DWORD PTR [eax],edx
c00145ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f2:	83 ec 0c             	sub    esp,0xc
c00145f5:	50                   	push   eax
c00145f6:	e8 9f f4 ff ff       	call   c0013a9a <Device::~Device()>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	90                   	nop
c00145ff:	83 c4 0c             	add    esp,0xc
c0014602:	c3                   	ret    
c0014603:	90                   	nop

c0014604 <InterruptController::~InterruptController()>:
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	83 ec 0c             	sub    esp,0xc
c001460a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460e:	e8 cd ff ff ff       	call   c00145e0 <InterruptController::~InterruptController()>
c0014613:	83 c4 10             	add    esp,0x10
c0014616:	83 ec 08             	sub    esp,0x8
c0014619:	68 58 21 00 00       	push   0x2158
c001461e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014622:	e8 94 e0 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	83 c4 0c             	add    esp,0xc
c001462d:	c3                   	ret    

c001462e <displayDebugInfo(regs*)>:
c001462e:	55                   	push   ebp
c001462f:	57                   	push   edi
c0014630:	56                   	push   esi
c0014631:	53                   	push   ebx
c0014632:	83 ec 24             	sub    esp,0x24
c0014635:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014639:	0f 20 c2             	mov    edx,cr0
c001463c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014640:	0f 20 d7             	mov    edi,cr2
c0014643:	0f 20 de             	mov    esi,cr3
c0014646:	0f 20 e5             	mov    ebp,cr4
c0014649:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001464c:	68 56 ad 02 c0       	push   0xc002ad56
c0014651:	e8 3d e1 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014656:	59                   	pop    ecx
c0014657:	58                   	pop    eax
c0014658:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001465b:	68 61 ad 02 c0       	push   0xc002ad61
c0014660:	e8 2e e1 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014665:	58                   	pop    eax
c0014666:	5a                   	pop    edx
c0014667:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001466a:	68 6c ad 02 c0       	push   0xc002ad6c
c001466f:	e8 1f e1 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014674:	59                   	pop    ecx
c0014675:	58                   	pop    eax
c0014676:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014679:	68 77 ad 02 c0       	push   0xc002ad77
c001467e:	e8 10 e1 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014683:	58                   	pop    eax
c0014684:	5a                   	pop    edx
c0014685:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014688:	68 82 ad 02 c0       	push   0xc002ad82
c001468d:	e8 01 e1 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014692:	59                   	pop    ecx
c0014693:	58                   	pop    eax
c0014694:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014697:	68 8d ad 02 c0       	push   0xc002ad8d
c001469c:	e8 f2 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146a1:	58                   	pop    eax
c00146a2:	5a                   	pop    edx
c00146a3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146a6:	68 98 ad 02 c0       	push   0xc002ad98
c00146ab:	e8 e3 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146b0:	59                   	pop    ecx
c00146b1:	58                   	pop    eax
c00146b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00146b5:	68 a3 ad 02 c0       	push   0xc002ada3
c00146ba:	e8 d4 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146bf:	58                   	pop    eax
c00146c0:	5a                   	pop    edx
c00146c1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00146c4:	68 ae ad 02 c0       	push   0xc002adae
c00146c9:	e8 c5 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146ce:	59                   	pop    ecx
c00146cf:	58                   	pop    eax
c00146d0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146d3:	68 bd ad 02 c0       	push   0xc002adbd
c00146d8:	e8 b6 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146dd:	58                   	pop    eax
c00146de:	5a                   	pop    edx
c00146df:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146e2:	68 c8 ad 02 c0       	push   0xc002adc8
c00146e7:	e8 a7 e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146ec:	59                   	pop    ecx
c00146ed:	58                   	pop    eax
c00146ee:	57                   	push   edi
c00146ef:	68 d3 ad 02 c0       	push   0xc002add3
c00146f4:	e8 9a e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00146f9:	58                   	pop    eax
c00146fa:	5a                   	pop    edx
c00146fb:	56                   	push   esi
c00146fc:	68 de ad 02 c0       	push   0xc002adde
c0014701:	e8 8d e0 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014706:	59                   	pop    ecx
c0014707:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001470c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014712:	e8 3c bc ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0014717:	58                   	pop    eax
c0014718:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001471b:	5a                   	pop    edx
c001471c:	c1 e0 05             	shl    eax,0x5
c001471f:	05 c0 ca 02 c0       	add    eax,0xc002cac0
c0014724:	50                   	push   eax
c0014725:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001472a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014730:	e8 2b c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014735:	59                   	pop    ecx
c0014736:	58                   	pop    eax
c0014737:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001473c:	68 e9 ad 02 c0       	push   0xc002ade9
c0014741:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014747:	e8 14 c1 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001474c:	58                   	pop    eax
c001474d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014752:	5a                   	pop    edx
c0014753:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014756:	83 c0 0c             	add    eax,0xc
c0014759:	50                   	push   eax
c001475a:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001475f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014765:	e8 f6 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001476a:	59                   	pop    ecx
c001476b:	58                   	pop    eax
c001476c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014771:	68 f2 ad 02 c0       	push   0xc002adf2
c0014776:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477c:	e8 df c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014781:	58                   	pop    eax
c0014782:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014787:	5a                   	pop    edx
c0014788:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001478b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014791:	e8 84 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014796:	59                   	pop    ecx
c0014797:	58                   	pop    eax
c0014798:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001479d:	68 fa ad 02 c0       	push   0xc002adfa
c00147a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a8:	e8 b3 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147ad:	58                   	pop    eax
c00147ae:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00147b3:	5a                   	pop    edx
c00147b4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bd:	e8 58 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147c2:	59                   	pop    ecx
c00147c3:	58                   	pop    eax
c00147c4:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00147c9:	68 02 ae 02 c0       	push   0xc002ae02
c00147ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d4:	e8 87 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00147d9:	58                   	pop    eax
c00147da:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00147df:	5a                   	pop    edx
c00147e0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e9:	e8 2c c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00147ee:	59                   	pop    ecx
c00147ef:	58                   	pop    eax
c00147f0:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00147f5:	68 0a ae 02 c0       	push   0xc002ae0a
c00147fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014800:	e8 5b c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014805:	58                   	pop    eax
c0014806:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001480b:	5a                   	pop    edx
c001480c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001480f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014815:	e8 00 c0 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001481a:	59                   	pop    ecx
c001481b:	58                   	pop    eax
c001481c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014821:	68 12 ae 02 c0       	push   0xc002ae12
c0014826:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482c:	e8 2f c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014831:	58                   	pop    eax
c0014832:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014837:	5a                   	pop    edx
c0014838:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001483b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014841:	e8 d4 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014846:	59                   	pop    ecx
c0014847:	58                   	pop    eax
c0014848:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001484d:	68 1a ae 02 c0       	push   0xc002ae1a
c0014852:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014858:	e8 03 c0 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001485d:	58                   	pop    eax
c001485e:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014863:	5a                   	pop    edx
c0014864:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014867:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486d:	e8 a8 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014872:	59                   	pop    ecx
c0014873:	58                   	pop    eax
c0014874:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014879:	68 22 ae 02 c0       	push   0xc002ae22
c001487e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014884:	e8 d7 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014889:	58                   	pop    eax
c001488a:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001488f:	5a                   	pop    edx
c0014890:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014894:	52                   	push   edx
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 7a bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148a0:	59                   	pop    ecx
c00148a1:	58                   	pop    eax
c00148a2:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00148a7:	68 2b ae 02 c0       	push   0xc002ae2b
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 a9 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148b7:	58                   	pop    eax
c00148b8:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00148bd:	5a                   	pop    edx
c00148be:	57                   	push   edi
c00148bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c5:	e8 50 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148ca:	59                   	pop    ecx
c00148cb:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00148d0:	5f                   	pop    edi
c00148d1:	68 33 ae 02 c0       	push   0xc002ae33
c00148d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dc:	e8 7f bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00148e1:	58                   	pop    eax
c00148e2:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00148e7:	5a                   	pop    edx
c00148e8:	56                   	push   esi
c00148e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ef:	e8 26 bf ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00148f4:	59                   	pop    ecx
c00148f5:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00148fa:	5e                   	pop    esi
c00148fb:	68 3b ae 02 c0       	push   0xc002ae3b
c0014900:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014906:	e8 55 bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001490b:	5f                   	pop    edi
c001490c:	58                   	pop    eax
c001490d:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014912:	55                   	push   ebp
c0014913:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014919:	e8 fc be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001491e:	58                   	pop    eax
c001491f:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014924:	5a                   	pop    edx
c0014925:	68 43 ae 02 c0       	push   0xc002ae43
c001492a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014930:	e8 2b bf ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014935:	0f 21 c0             	mov    eax,db0
c0014938:	59                   	pop    ecx
c0014939:	5e                   	pop    esi
c001493a:	50                   	push   eax
c001493b:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014940:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014946:	e8 cf be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001494b:	5f                   	pop    edi
c001494c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014951:	5d                   	pop    ebp
c0014952:	68 4c ae 02 c0       	push   0xc002ae4c
c0014957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495d:	e8 fe be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014962:	0f 21 c8             	mov    eax,db1
c0014965:	5a                   	pop    edx
c0014966:	59                   	pop    ecx
c0014967:	50                   	push   eax
c0014968:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001496d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014973:	e8 a2 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014978:	5e                   	pop    esi
c0014979:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001497e:	5f                   	pop    edi
c001497f:	68 54 ae 02 c0       	push   0xc002ae54
c0014984:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498a:	e8 d1 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001498f:	0f 21 d0             	mov    eax,db2
c0014992:	5d                   	pop    ebp
c0014993:	5a                   	pop    edx
c0014994:	50                   	push   eax
c0014995:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001499a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a0:	e8 75 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149a5:	59                   	pop    ecx
c00149a6:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00149ab:	5e                   	pop    esi
c00149ac:	68 5c ae 02 c0       	push   0xc002ae5c
c00149b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b7:	e8 a4 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149bc:	0f 21 d8             	mov    eax,db3
c00149bf:	5f                   	pop    edi
c00149c0:	5d                   	pop    ebp
c00149c1:	50                   	push   eax
c00149c2:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00149c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cd:	e8 48 be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149d2:	58                   	pop    eax
c00149d3:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00149d8:	5a                   	pop    edx
c00149d9:	68 64 ae 02 c0       	push   0xc002ae64
c00149de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e4:	e8 77 be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c00149e9:	0f 21 f0             	mov    eax,db6
c00149ec:	59                   	pop    ecx
c00149ed:	5e                   	pop    esi
c00149ee:	50                   	push   eax
c00149ef:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00149f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fa:	e8 1b be ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c00149ff:	5f                   	pop    edi
c0014a00:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a05:	5d                   	pop    ebp
c0014a06:	68 6c ae 02 c0       	push   0xc002ae6c
c0014a0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a11:	e8 4a be ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a16:	0f 21 f8             	mov    eax,db7
c0014a19:	5a                   	pop    edx
c0014a1a:	59                   	pop    ecx
c0014a1b:	50                   	push   eax
c0014a1c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a27:	e8 ee bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014a2c:	5e                   	pop    esi
c0014a2d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a30:	e8 46 86 00 00       	call   c001d07b <Thr::getDriverNameFromAddress(unsigned long)>
c0014a35:	83 c4 10             	add    esp,0x10
c0014a38:	85 c0                	test   eax,eax
c0014a3a:	74 7d                	je     c0014ab9 <displayDebugInfo(regs*)+0x48b>
c0014a3c:	89 c6                	mov    esi,eax
c0014a3e:	50                   	push   eax
c0014a3f:	50                   	push   eax
c0014a40:	56                   	push   esi
c0014a41:	68 74 ae 02 c0       	push   0xc002ae74
c0014a46:	e8 48 dd ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014a4b:	5a                   	pop    edx
c0014a4c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a51:	59                   	pop    ecx
c0014a52:	68 82 ae 02 c0       	push   0xc002ae82
c0014a57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a5d:	e8 fe bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a62:	5f                   	pop    edi
c0014a63:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a68:	5d                   	pop    ebp
c0014a69:	56                   	push   esi
c0014a6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a70:	e8 eb bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a75:	58                   	pop    eax
c0014a76:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a7b:	5a                   	pop    edx
c0014a7c:	68 8e ae 02 c0       	push   0xc002ae8e
c0014a81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a87:	e8 d4 bd ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0014a8c:	59                   	pop    ecx
c0014a8d:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0014a92:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014a98:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a9b:	e8 12 86 00 00       	call   c001d0b2 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014aa0:	5b                   	pop    ebx
c0014aa1:	5d                   	pop    ebp
c0014aa2:	50                   	push   eax
c0014aa3:	57                   	push   edi
c0014aa4:	e8 71 bd ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c0014aa9:	58                   	pop    eax
c0014aaa:	5a                   	pop    edx
c0014aab:	56                   	push   esi
c0014aac:	68 9a ae 02 c0       	push   0xc002ae9a
c0014ab1:	e8 dd dc ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014ab6:	83 c4 10             	add    esp,0x10
c0014ab9:	fa                   	cli    
c0014aba:	f4                   	hlt    
c0014abb:	eb fe                	jmp    c0014abb <displayDebugInfo(regs*)+0x48d>

c0014abd <x87EmulHandler(regs*, void*)>:
c0014abd:	83 ec 0c             	sub    esp,0xc
c0014ac0:	0f 20 c2             	mov    edx,cr0
c0014ac3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014acc:	75 4b                	jne    c0014b19 <x87EmulHandler(regs*, void*)+0x5c>
c0014ace:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0014ad3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014ad9:	85 c0                	test   eax,eax
c0014adb:	74 05                	je     c0014ae2 <x87EmulHandler(regs*, void*)+0x25>
c0014add:	83 e2 08             	and    edx,0x8
c0014ae0:	75 17                	jne    c0014af9 <x87EmulHandler(regs*, void*)+0x3c>
c0014ae2:	83 ec 0c             	sub    esp,0xc
c0014ae5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ae9:	e8 63 a9 00 00       	call   c001f451 <Vm::x87Handler(regs*)>
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	84 c0                	test   al,al
c0014af3:	74 24                	je     c0014b19 <x87EmulHandler(regs*, void*)+0x5c>
c0014af5:	83 c4 0c             	add    esp,0xc
c0014af8:	c3                   	ret    
c0014af9:	83 ec 0c             	sub    esp,0xc
c0014afc:	68 c0 ae 02 c0       	push   0xc002aec0
c0014b01:	e8 8d dc ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014b06:	0f 06                	clts   
c0014b08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b0d:	83 c4 10             	add    esp,0x10
c0014b10:	a3 88 dc 02 c0       	mov    ds:0xc002dc88,eax
c0014b15:	83 c4 0c             	add    esp,0xc
c0014b18:	c3                   	ret    
c0014b19:	83 ec 0c             	sub    esp,0xc
c0014b1c:	68 aa ae 02 c0       	push   0xc002aeaa
c0014b21:	e8 6d dc ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014b26:	5a                   	pop    edx
c0014b27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b2b:	e8 fe fa ff ff       	call   c001462e <displayDebugInfo(regs*)>

c0014b30 <gpFault(regs*, void*)>:
c0014b30:	53                   	push   ebx
c0014b31:	83 ec 14             	sub    esp,0x14
c0014b34:	c7 05 84 dc 02 c0 2a e9 01 c0 	mov    DWORD PTR ds:0xc002dc84,0xc001e92a
c0014b3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b42:	53                   	push   ebx
c0014b43:	e8 e2 9d 00 00       	call   c001e92a <Vm::faultHandler(regs*)>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	84 c0                	test   al,al
c0014b4d:	74 05                	je     c0014b54 <gpFault(regs*, void*)+0x24>
c0014b4f:	83 c4 08             	add    esp,0x8
c0014b52:	5b                   	pop    ebx
c0014b53:	c3                   	ret    
c0014b54:	83 ec 0c             	sub    esp,0xc
c0014b57:	68 cd ae 02 c0       	push   0xc002aecd
c0014b5c:	e8 32 dc ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014b61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b64:	e8 c5 fa ff ff       	call   c001462e <displayDebugInfo(regs*)>

c0014b69 <pgFault(regs*, void*)>:
c0014b69:	83 ec 18             	sub    esp,0x18
c0014b6c:	68 e8 ae 02 c0       	push   0xc002aee8
c0014b71:	e8 1d dc ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014b76:	0f 20 d0             	mov    eax,cr2
c0014b79:	5a                   	pop    edx
c0014b7a:	59                   	pop    ecx
c0014b7b:	50                   	push   eax
c0014b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b81:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b84:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014b8a:	e8 fb d6 ff ff       	call   c001228a <VAS::tryLoadBackOffDisk(unsigned long)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	84 c0                	test   al,al
c0014b94:	74 04                	je     c0014b9a <pgFault(regs*, void*)+0x31>
c0014b96:	83 c4 0c             	add    esp,0xc
c0014b99:	c3                   	ret    
c0014b9a:	83 ec 0c             	sub    esp,0xc
c0014b9d:	68 f2 ae 02 c0       	push   0xc002aef2
c0014ba2:	e8 ec db ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014ba7:	58                   	pop    eax
c0014ba8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bac:	e8 7d fa ff ff       	call   c001462e <displayDebugInfo(regs*)>

c0014bb1 <otherISRHandler(regs*, void*)>:
c0014bb1:	53                   	push   ebx
c0014bb2:	83 ec 0c             	sub    esp,0xc
c0014bb5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bb9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bbc:	50                   	push   eax
c0014bbd:	50                   	push   eax
c0014bbe:	68 ff ae 02 c0       	push   0xc002aeff
c0014bc3:	e8 cb db ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014bc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bcb:	e8 5e fa ff ff       	call   c001462e <displayDebugInfo(regs*)>

c0014bd0 <opcodeFault(regs*, void*)>:
c0014bd0:	55                   	push   ebp
c0014bd1:	89 e5                	mov    ebp,esp
c0014bd3:	56                   	push   esi
c0014bd4:	53                   	push   ebx
c0014bd5:	83 ec 40             	sub    esp,0x40
c0014bd8:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0014bdd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014be3:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014be9:	84 c0                	test   al,al
c0014beb:	74 24                	je     c0014c11 <opcodeFault(regs*, void*)+0x41>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	68 1c af 02 c0       	push   0xc002af1c
c0014bf5:	e8 99 db ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014bfa:	83 c4 10             	add    esp,0x10
c0014bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c00:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c03:	8d 50 19             	lea    edx,[eax+0x19]
c0014c06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c09:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c0c:	e9 d5 05 00 00       	jmp    c00151e6 <opcodeFault(regs*, void*)+0x616>
c0014c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c14:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c17:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c1a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c1e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c28:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c30:	3c f0                	cmp    al,0xf0
c0014c32:	75 17                	jne    c0014c4b <opcodeFault(regs*, void*)+0x7b>
c0014c34:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c3d:	8d 50 01             	lea    edx,[eax+0x1]
c0014c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c43:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c46:	e9 da 00 00 00       	jmp    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014c4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c50:	3c f2                	cmp    al,0xf2
c0014c52:	74 09                	je     c0014c5d <opcodeFault(regs*, void*)+0x8d>
c0014c54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c57:	8a 00                	mov    al,BYTE PTR [eax]
c0014c59:	3c f3                	cmp    al,0xf3
c0014c5b:	75 1b                	jne    c0014c78 <opcodeFault(regs*, void*)+0xa8>
c0014c5d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c61:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c67:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0014c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c70:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c73:	e9 ad 00 00 00       	jmp    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014c78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c7b:	8a 00                	mov    al,BYTE PTR [eax]
c0014c7d:	3c 66                	cmp    al,0x66
c0014c7f:	75 1f                	jne    c0014ca0 <opcodeFault(regs*, void*)+0xd0>
c0014c81:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c85:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c89:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c92:	8d 50 01             	lea    edx,[eax+0x1]
c0014c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c98:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c9b:	e9 85 00 00 00       	jmp    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014ca0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca5:	3c 67                	cmp    al,0x67
c0014ca7:	75 18                	jne    c0014cc1 <opcodeFault(regs*, void*)+0xf1>
c0014ca9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb6:	8d 50 01             	lea    edx,[eax+0x1]
c0014cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cbf:	eb 64                	jmp    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014cc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc4:	8a 00                	mov    al,BYTE PTR [eax]
c0014cc6:	3c 2e                	cmp    al,0x2e
c0014cc8:	74 09                	je     c0014cd3 <opcodeFault(regs*, void*)+0x103>
c0014cca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccd:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccf:	3c 3e                	cmp    al,0x3e
c0014cd1:	75 18                	jne    c0014ceb <opcodeFault(regs*, void*)+0x11b>
c0014cd3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cd7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ce0:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ce9:	eb 3a                	jmp    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cee:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf0:	3c 36                	cmp    al,0x36
c0014cf2:	74 1b                	je     c0014d0f <opcodeFault(regs*, void*)+0x13f>
c0014cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf7:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf9:	3c 26                	cmp    al,0x26
c0014cfb:	74 12                	je     c0014d0f <opcodeFault(regs*, void*)+0x13f>
c0014cfd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d00:	8a 00                	mov    al,BYTE PTR [eax]
c0014d02:	3c 64                	cmp    al,0x64
c0014d04:	74 09                	je     c0014d0f <opcodeFault(regs*, void*)+0x13f>
c0014d06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d09:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0b:	3c 65                	cmp    al,0x65
c0014d0d:	75 16                	jne    c0014d25 <opcodeFault(regs*, void*)+0x155>
c0014d0f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d13:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d1c:	8d 50 01             	lea    edx,[eax+0x1]
c0014d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d22:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d28:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2a:	3c 0f                	cmp    al,0xf
c0014d2c:	0f 85 ad 00 00 00    	jne    c0014ddf <opcodeFault(regs*, void*)+0x20f>
c0014d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d35:	40                   	inc    eax
c0014d36:	8a 00                	mov    al,BYTE PTR [eax]
c0014d38:	3c c2                	cmp    al,0xc2
c0014d3a:	74 0e                	je     c0014d4a <opcodeFault(regs*, void*)+0x17a>
c0014d3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d3f:	40                   	inc    eax
c0014d40:	8a 00                	mov    al,BYTE PTR [eax]
c0014d42:	3c c3                	cmp    al,0xc3
c0014d44:	0f 85 95 00 00 00    	jne    c0014ddf <opcodeFault(regs*, void*)+0x20f>
c0014d4a:	83 ec 0c             	sub    esp,0xc
c0014d4d:	68 3f af 02 c0       	push   0xc002af3f
c0014d52:	e8 3c da ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0014d57:	83 c4 10             	add    esp,0x10
c0014d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d60:	8d 50 01             	lea    edx,[eax+0x1]
c0014d63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d66:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d69:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6f:	8a 00                	mov    al,BYTE PTR [eax]
c0014d71:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d77:	88 10                	mov    BYTE PTR [eax],dl
c0014d79:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d7c:	50                   	push   eax
c0014d7d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d80:	50                   	push   eax
c0014d81:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d84:	50                   	push   eax
c0014d85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d88:	e8 8b 48 00 00       	call   c0019618 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d93:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d96:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014d99:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014d9c:	01 d0                	add    eax,edx
c0014d9e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014daa:	48                   	dec    eax
c0014dab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db1:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014db4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dba:	83 ec 04             	sub    esp,0x4
c0014dbd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dc0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dc3:	50                   	push   eax
c0014dc4:	e8 eb b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014dcf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014dd2:	01 c2                	add    edx,eax
c0014dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dda:	e9 07 04 00 00       	jmp    c00151e6 <opcodeFault(regs*, void*)+0x616>
c0014ddf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de2:	8a 00                	mov    al,BYTE PTR [eax]
c0014de4:	3c 0f                	cmp    al,0xf
c0014de6:	0f 85 8b 01 00 00    	jne    c0014f77 <opcodeFault(regs*, void*)+0x3a7>
c0014dec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014def:	40                   	inc    eax
c0014df0:	8a 00                	mov    al,BYTE PTR [eax]
c0014df2:	3c c7                	cmp    al,0xc7
c0014df4:	0f 86 7d 01 00 00    	jbe    c0014f77 <opcodeFault(regs*, void*)+0x3a7>
c0014dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfd:	40                   	inc    eax
c0014dfe:	8a 00                	mov    al,BYTE PTR [eax]
c0014e00:	3c cf                	cmp    al,0xcf
c0014e02:	0f 87 6f 01 00 00    	ja     c0014f77 <opcodeFault(regs*, void*)+0x3a7>
c0014e08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e0b:	40                   	inc    eax
c0014e0c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0e:	83 c0 38             	add    eax,0x38
c0014e11:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e14:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e18:	75 0b                	jne    c0014e25 <opcodeFault(regs*, void*)+0x255>
c0014e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e20:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e23:	eb 75                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e25:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e29:	75 0b                	jne    c0014e36 <opcodeFault(regs*, void*)+0x266>
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e31:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e34:	eb 64                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e36:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e3a:	75 0b                	jne    c0014e47 <opcodeFault(regs*, void*)+0x277>
c0014e3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e42:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e45:	eb 53                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e47:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e4b:	75 0b                	jne    c0014e58 <opcodeFault(regs*, void*)+0x288>
c0014e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e50:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e56:	eb 42                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e58:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e5c:	75 0b                	jne    c0014e69 <opcodeFault(regs*, void*)+0x299>
c0014e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e61:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e64:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e67:	eb 31                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e69:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e6d:	75 0b                	jne    c0014e7a <opcodeFault(regs*, void*)+0x2aa>
c0014e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e72:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e78:	eb 20                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e7a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e7e:	75 0b                	jne    c0014e8b <opcodeFault(regs*, void*)+0x2bb>
c0014e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e83:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e86:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e89:	eb 0f                	jmp    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e8b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e8f:	75 09                	jne    c0014e9a <opcodeFault(regs*, void*)+0x2ca>
c0014e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e9a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014e9e:	74 10                	je     c0014eb0 <opcodeFault(regs*, void*)+0x2e0>
c0014ea0:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014ea7:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014eae:	eb 2d                	jmp    c0014edd <opcodeFault(regs*, void*)+0x30d>
c0014eb0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014eb3:	c1 e0 18             	shl    eax,0x18
c0014eb6:	89 c2                	mov    edx,eax
c0014eb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ebb:	c1 e0 08             	shl    eax,0x8
c0014ebe:	25 00 00 ff 00       	and    eax,0xff0000
c0014ec3:	09 c2                	or     edx,eax
c0014ec5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec8:	c1 e8 08             	shr    eax,0x8
c0014ecb:	25 00 ff 00 00       	and    eax,0xff00
c0014ed0:	09 c2                	or     edx,eax
c0014ed2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed5:	c1 e8 18             	shr    eax,0x18
c0014ed8:	09 d0                	or     eax,edx
c0014eda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014edd:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ee1:	75 0b                	jne    c0014eee <opcodeFault(regs*, void*)+0x31e>
c0014ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ee9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014eec:	eb 75                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014eee:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ef2:	75 0b                	jne    c0014eff <opcodeFault(regs*, void*)+0x32f>
c0014ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014efa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014efd:	eb 64                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014eff:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f03:	75 0b                	jne    c0014f10 <opcodeFault(regs*, void*)+0x340>
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f0b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f0e:	eb 53                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f10:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f14:	75 0b                	jne    c0014f21 <opcodeFault(regs*, void*)+0x351>
c0014f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f19:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f1f:	eb 42                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f21:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f25:	75 0b                	jne    c0014f32 <opcodeFault(regs*, void*)+0x362>
c0014f27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f2d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f30:	eb 31                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f32:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f36:	75 0b                	jne    c0014f43 <opcodeFault(regs*, void*)+0x373>
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f41:	eb 20                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f43:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f47:	75 0b                	jne    c0014f54 <opcodeFault(regs*, void*)+0x384>
c0014f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f4f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f52:	eb 0f                	jmp    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f54:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f58:	75 09                	jne    c0014f63 <opcodeFault(regs*, void*)+0x393>
c0014f5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f60:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f66:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f69:	8d 50 02             	lea    edx,[eax+0x2]
c0014f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f72:	e9 6f 02 00 00       	jmp    c00151e6 <opcodeFault(regs*, void*)+0x616>
c0014f77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f7c:	3c 0f                	cmp    al,0xf
c0014f7e:	0f 85 8d 01 00 00    	jne    c0015111 <opcodeFault(regs*, void*)+0x541>
c0014f84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f87:	40                   	inc    eax
c0014f88:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8a:	3c c7                	cmp    al,0xc7
c0014f8c:	0f 85 7f 01 00 00    	jne    c0015111 <opcodeFault(regs*, void*)+0x541>
c0014f92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa4:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fa7:	50                   	push   eax
c0014fa8:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fab:	50                   	push   eax
c0014fac:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014faf:	50                   	push   eax
c0014fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fb3:	e8 60 46 00 00       	call   c0019618 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fb8:	83 c4 10             	add    esp,0x10
c0014fbb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fbe:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fc1:	83 f0 01             	xor    eax,0x1
c0014fc4:	84 c0                	test   al,al
c0014fc6:	0f 84 45 01 00 00    	je     c0015111 <opcodeFault(regs*, void*)+0x541>
c0014fcc:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fcf:	3c 01                	cmp    al,0x1
c0014fd1:	0f 85 3a 01 00 00    	jne    c0015111 <opcodeFault(regs*, void*)+0x541>
c0014fd7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014fda:	83 f0 01             	xor    eax,0x1
c0014fdd:	84 c0                	test   al,al
c0014fdf:	0f 84 2c 01 00 00    	je     c0015111 <opcodeFault(regs*, void*)+0x541>
c0014fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014feb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fee:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014ff5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014ff8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014ffb:	89 c2                	mov    edx,eax
c0014ffd:	b8 00 00 00 00       	mov    eax,0x0
c0015002:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015005:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001500e:	ba 00 00 00 00       	mov    edx,0x0
c0015013:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015016:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001501f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015022:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015029:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001502c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001502f:	89 c2                	mov    edx,eax
c0015031:	b8 00 00 00 00       	mov    eax,0x0
c0015036:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015039:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001503c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015042:	ba 00 00 00 00       	mov    edx,0x0
c0015047:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001504a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001504d:	fa                   	cli    
c001504e:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0015053:	40                   	inc    eax
c0015054:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0015059:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001505c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001505f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015061:	89 c1                	mov    ecx,eax
c0015063:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015066:	89 cb                	mov    ebx,ecx
c0015068:	89 d0                	mov    eax,edx
c001506a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001506d:	89 c6                	mov    esi,eax
c001506f:	89 f0                	mov    eax,esi
c0015071:	09 d8                	or     eax,ebx
c0015073:	85 c0                	test   eax,eax
c0015075:	75 21                	jne    c0015098 <opcodeFault(regs*, void*)+0x4c8>
c0015077:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001507a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001507d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015080:	89 01                	mov    DWORD PTR [ecx],eax
c0015082:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015088:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001508b:	83 c8 40             	or     eax,0x40
c001508e:	89 c2                	mov    edx,eax
c0015090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015093:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015096:	eb 3e                	jmp    c00150d6 <opcodeFault(regs*, void*)+0x506>
c0015098:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001509b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001509e:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150a3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150a6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150af:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150b2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150b5:	89 d0                	mov    eax,edx
c00150b7:	31 d2                	xor    edx,edx
c00150b9:	89 c3                	mov    ebx,eax
c00150bb:	89 d6                	mov    esi,edx
c00150bd:	89 da                	mov    edx,ebx
c00150bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150cb:	83 e0 bf             	and    eax,0xffffffbf
c00150ce:	89 c2                	mov    edx,eax
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150d6:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00150db:	48                   	dec    eax
c00150dc:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00150e1:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00150e6:	85 c0                	test   eax,eax
c00150e8:	75 01                	jne    c00150eb <opcodeFault(regs*, void*)+0x51b>
c00150ea:	fb                   	sti    
c00150eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150f1:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150f4:	01 c2                	add    edx,eax
c00150f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150fc:	83 ec 0c             	sub    esp,0xc
c00150ff:	68 4e af 02 c0       	push   0xc002af4e
c0015104:	e8 8a d6 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	e9 d5 00 00 00       	jmp    c00151e6 <opcodeFault(regs*, void*)+0x616>
c0015111:	83 ec 0c             	sub    esp,0xc
c0015114:	68 61 af 02 c0       	push   0xc002af61
c0015119:	e8 75 d6 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001511e:	83 c4 10             	add    esp,0x10
c0015121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015124:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001512d:	c1 e0 04             	shl    eax,0x4
c0015130:	01 d0                	add    eax,edx
c0015132:	83 c0 03             	add    eax,0x3
c0015135:	8a 00                	mov    al,BYTE PTR [eax]
c0015137:	0f b6 d8             	movzx  ebx,al
c001513a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001513d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015143:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015146:	c1 e0 04             	shl    eax,0x4
c0015149:	01 d0                	add    eax,edx
c001514b:	83 c0 02             	add    eax,0x2
c001514e:	8a 00                	mov    al,BYTE PTR [eax]
c0015150:	0f b6 c8             	movzx  ecx,al
c0015153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015156:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001515f:	c1 e0 04             	shl    eax,0x4
c0015162:	01 d0                	add    eax,edx
c0015164:	40                   	inc    eax
c0015165:	8a 00                	mov    al,BYTE PTR [eax]
c0015167:	0f b6 d0             	movzx  edx,al
c001516a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015173:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015176:	c1 e0 04             	shl    eax,0x4
c0015179:	01 f0                	add    eax,esi
c001517b:	8a 00                	mov    al,BYTE PTR [eax]
c001517d:	0f b6 c0             	movzx  eax,al
c0015180:	83 ec 0c             	sub    esp,0xc
c0015183:	53                   	push   ebx
c0015184:	51                   	push   ecx
c0015185:	52                   	push   edx
c0015186:	50                   	push   eax
c0015187:	68 74 af 02 c0       	push   0xc002af74
c001518c:	e8 02 d6 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0015191:	83 c4 20             	add    esp,0x20
c0015194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015197:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001519a:	83 c0 03             	add    eax,0x3
c001519d:	8a 00                	mov    al,BYTE PTR [eax]
c001519f:	0f b6 d8             	movzx  ebx,al
c00151a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151a8:	83 c0 02             	add    eax,0x2
c00151ab:	8a 00                	mov    al,BYTE PTR [eax]
c00151ad:	0f b6 c8             	movzx  ecx,al
c00151b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b6:	40                   	inc    eax
c00151b7:	8a 00                	mov    al,BYTE PTR [eax]
c00151b9:	0f b6 d0             	movzx  edx,al
c00151bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151c2:	8a 00                	mov    al,BYTE PTR [eax]
c00151c4:	0f b6 c0             	movzx  eax,al
c00151c7:	83 ec 0c             	sub    esp,0xc
c00151ca:	53                   	push   ebx
c00151cb:	51                   	push   ecx
c00151cc:	52                   	push   edx
c00151cd:	50                   	push   eax
c00151ce:	68 9c af 02 c0       	push   0xc002af9c
c00151d3:	e8 bb d5 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00151d8:	83 c4 20             	add    esp,0x20
c00151db:	83 ec 0c             	sub    esp,0xc
c00151de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151e1:	e8 48 f4 ff ff       	call   c001462e <displayDebugInfo(regs*)>
c00151e6:	8d 65 f8             	lea    esp,[ebp-0x8]
c00151e9:	5b                   	pop    ebx
c00151ea:	5e                   	pop    esi
c00151eb:	5d                   	pop    ebp
c00151ec:	c3                   	ret    

c00151ed <displayProgramFault(char const*)>:
c00151ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151f5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151fb:	85 c0                	test   eax,eax
c00151fd:	74 15                	je     c0015214 <displayProgramFault(char const*)+0x27>
c00151ff:	83 ec 0c             	sub    esp,0xc
c0015202:	6a 04                	push   0x4
c0015204:	6a 0f                	push   0xf
c0015206:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001520a:	50                   	push   eax
c001520b:	e8 4c b3 ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015210:	83 c4 1c             	add    esp,0x1c
c0015213:	c3                   	ret    
c0015214:	c3                   	ret    

c0015215 <setupInterruptController()>:
c0015215:	55                   	push   ebp
c0015216:	89 e5                	mov    ebp,esp
c0015218:	53                   	push   ebx
c0015219:	83 ec 24             	sub    esp,0x24
c001521c:	b8 00 00 00 00       	mov    eax,0x0
c0015221:	85 c0                	test   eax,eax
c0015223:	0f 95 c0             	setne  al
c0015226:	84 c0                	test   al,al
c0015228:	74 5b                	je     c0015285 <setupInterruptController()+0x70>
c001522a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015231:	83 ec 0c             	sub    esp,0xc
c0015234:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015237:	e8 5d a3 ff ff       	call   c000f599 <malloc>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	89 c3                	mov    ebx,eax
c0015241:	83 ec 0c             	sub    esp,0xc
c0015244:	53                   	push   ebx
c0015245:	e8 04 05 01 00       	call   c002574e <APIC::APIC()>
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015250:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015253:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015256:	8b 00                	mov    eax,DWORD PTR [eax]
c0015258:	83 c0 08             	add    eax,0x8
c001525b:	8b 00                	mov    eax,DWORD PTR [eax]
c001525d:	6a 00                	push   0x0
c001525f:	6a 00                	push   0x0
c0015261:	6a 00                	push   0x0
c0015263:	52                   	push   edx
c0015264:	ff d0                	call   eax
c0015266:	83 c4 10             	add    esp,0x10
c0015269:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001526e:	83 ec 08             	sub    esp,0x8
c0015271:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015274:	50                   	push   eax
c0015275:	e8 52 e9 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c001527a:	83 c4 10             	add    esp,0x10
c001527d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015280:	e9 79 03 00 00       	jmp    c00155fe <setupInterruptController()+0x3e9>
c0015285:	a0 80 04 03 c0       	mov    al,ds:0xc0030480
c001528a:	84 c0                	test   al,al
c001528c:	75 14                	jne    c00152a2 <setupInterruptController()+0x8d>
c001528e:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0015293:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015299:	83 e2 fe             	and    edx,0xfffffffe
c001529c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00152a2:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00152a7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00152ad:	83 e0 01             	and    eax,0x1
c00152b0:	84 c0                	test   al,al
c00152b2:	0f 95 c0             	setne  al
c00152b5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00152b8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00152bf:	83 ec 0c             	sub    esp,0xc
c00152c2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00152c5:	e8 cf a2 ff ff       	call   c000f599 <malloc>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	89 c3                	mov    ebx,eax
c00152cf:	83 ec 0c             	sub    esp,0xc
c00152d2:	53                   	push   ebx
c00152d3:	e8 ce 09 01 00       	call   c0025ca6 <PIC::PIC()>
c00152d8:	83 c4 10             	add    esp,0x10
c00152db:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e6:	83 c0 08             	add    eax,0x8
c00152e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152eb:	6a 00                	push   0x0
c00152ed:	6a 00                	push   0x0
c00152ef:	6a 00                	push   0x0
c00152f1:	52                   	push   edx
c00152f2:	ff d0                	call   eax
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00152fb:	74 73                	je     c0015370 <setupInterruptController()+0x15b>
c00152fd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015300:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015303:	8b 00                	mov    eax,DWORD PTR [eax]
c0015305:	83 c0 0c             	add    eax,0xc
c0015308:	8b 00                	mov    eax,DWORD PTR [eax]
c001530a:	6a 00                	push   0x0
c001530c:	6a 00                	push   0x0
c001530e:	6a 00                	push   0x0
c0015310:	52                   	push   edx
c0015311:	ff d0                	call   eax
c0015313:	83 c4 10             	add    esp,0x10
c0015316:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001531a:	74 15                	je     c0015331 <setupInterruptController()+0x11c>
c001531c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015321:	83 c0 04             	add    eax,0x4
c0015324:	8b 00                	mov    eax,DWORD PTR [eax]
c0015326:	83 ec 0c             	sub    esp,0xc
c0015329:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532c:	ff d0                	call   eax
c001532e:	83 c4 10             	add    esp,0x10
c0015331:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015338:	83 ec 0c             	sub    esp,0xc
c001533b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001533e:	e8 56 a2 ff ff       	call   c000f599 <malloc>
c0015343:	83 c4 10             	add    esp,0x10
c0015346:	89 c3                	mov    ebx,eax
c0015348:	83 ec 0c             	sub    esp,0xc
c001534b:	53                   	push   ebx
c001534c:	e8 fd 03 01 00       	call   c002574e <APIC::APIC()>
c0015351:	83 c4 10             	add    esp,0x10
c0015354:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015357:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535d:	8b 00                	mov    eax,DWORD PTR [eax]
c001535f:	83 c0 08             	add    eax,0x8
c0015362:	8b 00                	mov    eax,DWORD PTR [eax]
c0015364:	6a 00                	push   0x0
c0015366:	6a 00                	push   0x0
c0015368:	6a 00                	push   0x0
c001536a:	52                   	push   edx
c001536b:	ff d0                	call   eax
c001536d:	83 c4 10             	add    esp,0x10
c0015370:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0015375:	83 ec 08             	sub    esp,0x8
c0015378:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537b:	50                   	push   eax
c001537c:	e8 4b e8 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	c7 05 88 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dc88,0x0
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	8b 00                	mov    eax,DWORD PTR [eax]
c0015393:	83 c0 24             	add    eax,0x24
c0015396:	8b 00                	mov    eax,DWORD PTR [eax]
c0015398:	6a 00                	push   0x0
c001539a:	68 b1 4b 01 c0       	push   0xc0014bb1
c001539f:	6a 00                	push   0x0
c00153a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a4:	ff d0                	call   eax
c00153a6:	83 c4 10             	add    esp,0x10
c00153a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ae:	83 c0 24             	add    eax,0x24
c00153b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b3:	6a 00                	push   0x0
c00153b5:	68 b1 4b 01 c0       	push   0xc0014bb1
c00153ba:	6a 01                	push   0x1
c00153bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153bf:	ff d0                	call   eax
c00153c1:	83 c4 10             	add    esp,0x10
c00153c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c9:	83 c0 24             	add    eax,0x24
c00153cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ce:	6a 00                	push   0x0
c00153d0:	68 8b 44 01 c0       	push   0xc001448b
c00153d5:	6a 02                	push   0x2
c00153d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153da:	ff d0                	call   eax
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e4:	83 c0 24             	add    eax,0x24
c00153e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e9:	6a 00                	push   0x0
c00153eb:	68 b1 4b 01 c0       	push   0xc0014bb1
c00153f0:	6a 03                	push   0x3
c00153f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153f5:	ff d0                	call   eax
c00153f7:	83 c4 10             	add    esp,0x10
c00153fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ff:	83 c0 24             	add    eax,0x24
c0015402:	8b 00                	mov    eax,DWORD PTR [eax]
c0015404:	6a 00                	push   0x0
c0015406:	68 b1 4b 01 c0       	push   0xc0014bb1
c001540b:	6a 04                	push   0x4
c001540d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015410:	ff d0                	call   eax
c0015412:	83 c4 10             	add    esp,0x10
c0015415:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015418:	8b 00                	mov    eax,DWORD PTR [eax]
c001541a:	83 c0 24             	add    eax,0x24
c001541d:	8b 00                	mov    eax,DWORD PTR [eax]
c001541f:	6a 00                	push   0x0
c0015421:	68 b1 4b 01 c0       	push   0xc0014bb1
c0015426:	6a 05                	push   0x5
c0015428:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001542b:	ff d0                	call   eax
c001542d:	83 c4 10             	add    esp,0x10
c0015430:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015433:	8b 00                	mov    eax,DWORD PTR [eax]
c0015435:	83 c0 24             	add    eax,0x24
c0015438:	8b 00                	mov    eax,DWORD PTR [eax]
c001543a:	6a 00                	push   0x0
c001543c:	68 d0 4b 01 c0       	push   0xc0014bd0
c0015441:	6a 06                	push   0x6
c0015443:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015446:	ff d0                	call   eax
c0015448:	83 c4 10             	add    esp,0x10
c001544b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015450:	83 c0 24             	add    eax,0x24
c0015453:	8b 00                	mov    eax,DWORD PTR [eax]
c0015455:	6a 00                	push   0x0
c0015457:	68 bd 4a 01 c0       	push   0xc0014abd
c001545c:	6a 07                	push   0x7
c001545e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015461:	ff d0                	call   eax
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015469:	8b 00                	mov    eax,DWORD PTR [eax]
c001546b:	83 c0 24             	add    eax,0x24
c001546e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015470:	6a 00                	push   0x0
c0015472:	68 a6 42 01 c0       	push   0xc00142a6
c0015477:	6a 08                	push   0x8
c0015479:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547c:	ff d0                	call   eax
c001547e:	83 c4 10             	add    esp,0x10
c0015481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015484:	8b 00                	mov    eax,DWORD PTR [eax]
c0015486:	83 c0 24             	add    eax,0x24
c0015489:	8b 00                	mov    eax,DWORD PTR [eax]
c001548b:	6a 00                	push   0x0
c001548d:	68 b1 4b 01 c0       	push   0xc0014bb1
c0015492:	6a 09                	push   0x9
c0015494:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015497:	ff d0                	call   eax
c0015499:	83 c4 10             	add    esp,0x10
c001549c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549f:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a1:	83 c0 24             	add    eax,0x24
c00154a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a6:	6a 00                	push   0x0
c00154a8:	68 b1 4b 01 c0       	push   0xc0014bb1
c00154ad:	6a 0a                	push   0xa
c00154af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b2:	ff d0                	call   eax
c00154b4:	83 c4 10             	add    esp,0x10
c00154b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bc:	83 c0 24             	add    eax,0x24
c00154bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c1:	6a 00                	push   0x0
c00154c3:	68 b1 4b 01 c0       	push   0xc0014bb1
c00154c8:	6a 0b                	push   0xb
c00154ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cd:	ff d0                	call   eax
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d7:	83 c0 24             	add    eax,0x24
c00154da:	8b 00                	mov    eax,DWORD PTR [eax]
c00154dc:	6a 00                	push   0x0
c00154de:	68 b1 4b 01 c0       	push   0xc0014bb1
c00154e3:	6a 0c                	push   0xc
c00154e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e8:	ff d0                	call   eax
c00154ea:	83 c4 10             	add    esp,0x10
c00154ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f2:	83 c0 24             	add    eax,0x24
c00154f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f7:	6a 00                	push   0x0
c00154f9:	68 30 4b 01 c0       	push   0xc0014b30
c00154fe:	6a 0d                	push   0xd
c0015500:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015503:	ff d0                	call   eax
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550b:	8b 00                	mov    eax,DWORD PTR [eax]
c001550d:	83 c0 24             	add    eax,0x24
c0015510:	8b 00                	mov    eax,DWORD PTR [eax]
c0015512:	6a 00                	push   0x0
c0015514:	68 69 4b 01 c0       	push   0xc0014b69
c0015519:	6a 0e                	push   0xe
c001551b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551e:	ff d0                	call   eax
c0015520:	83 c4 10             	add    esp,0x10
c0015523:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015526:	8b 00                	mov    eax,DWORD PTR [eax]
c0015528:	83 c0 24             	add    eax,0x24
c001552b:	8b 00                	mov    eax,DWORD PTR [eax]
c001552d:	6a 00                	push   0x0
c001552f:	68 b1 4b 01 c0       	push   0xc0014bb1
c0015534:	6a 0f                	push   0xf
c0015536:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015539:	ff d0                	call   eax
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015541:	8b 00                	mov    eax,DWORD PTR [eax]
c0015543:	83 c0 24             	add    eax,0x24
c0015546:	8b 00                	mov    eax,DWORD PTR [eax]
c0015548:	6a 00                	push   0x0
c001554a:	68 b1 4b 01 c0       	push   0xc0014bb1
c001554f:	6a 10                	push   0x10
c0015551:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015554:	ff d0                	call   eax
c0015556:	83 c4 10             	add    esp,0x10
c0015559:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555c:	8b 00                	mov    eax,DWORD PTR [eax]
c001555e:	83 c0 24             	add    eax,0x24
c0015561:	8b 00                	mov    eax,DWORD PTR [eax]
c0015563:	6a 00                	push   0x0
c0015565:	68 b1 4b 01 c0       	push   0xc0014bb1
c001556a:	6a 11                	push   0x11
c001556c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556f:	ff d0                	call   eax
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015577:	8b 00                	mov    eax,DWORD PTR [eax]
c0015579:	83 c0 24             	add    eax,0x24
c001557c:	8b 00                	mov    eax,DWORD PTR [eax]
c001557e:	6a 00                	push   0x0
c0015580:	68 b1 4b 01 c0       	push   0xc0014bb1
c0015585:	6a 12                	push   0x12
c0015587:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558a:	ff d0                	call   eax
c001558c:	83 c4 10             	add    esp,0x10
c001558f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015592:	8b 00                	mov    eax,DWORD PTR [eax]
c0015594:	83 c0 24             	add    eax,0x24
c0015597:	8b 00                	mov    eax,DWORD PTR [eax]
c0015599:	6a 00                	push   0x0
c001559b:	68 b1 4b 01 c0       	push   0xc0014bb1
c00155a0:	6a 13                	push   0x13
c00155a2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a5:	ff d0                	call   eax
c00155a7:	83 c4 10             	add    esp,0x10
c00155aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00155af:	83 c0 24             	add    eax,0x24
c00155b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b4:	6a 00                	push   0x0
c00155b6:	68 b1 4b 01 c0       	push   0xc0014bb1
c00155bb:	6a 14                	push   0x14
c00155bd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c0:	ff d0                	call   eax
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ca:	83 c0 24             	add    eax,0x24
c00155cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cf:	6a 00                	push   0x0
c00155d1:	68 b1 4b 01 c0       	push   0xc0014bb1
c00155d6:	6a 1e                	push   0x1e
c00155d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155db:	ff d0                	call   eax
c00155dd:	83 c4 10             	add    esp,0x10
c00155e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e5:	83 c0 24             	add    eax,0x24
c00155e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ea:	6a 00                	push   0x0
c00155ec:	68 f1 c0 01 c0       	push   0xc001c0f1
c00155f1:	6a 60                	push   0x60
c00155f3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f6:	ff d0                	call   eax
c00155f8:	83 c4 10             	add    esp,0x10
c00155fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015601:	c9                   	leave  
c0015602:	c3                   	ret    
c0015603:	90                   	nop

c0015604 <InterruptController::convertLegacyIRQNumber(int)>:
c0015604:	55                   	push   ebp
c0015605:	89 e5                	mov    ebp,esp
c0015607:	83 ec 08             	sub    esp,0x8
c001560a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	50                   	push   eax
c0015611:	e8 b6 e8 ff ff       	call   c0013ecc <Device::getName()>
c0015616:	83 c4 10             	add    esp,0x10
c0015619:	8a 00                	mov    al,BYTE PTR [eax]
c001561b:	3c 41                	cmp    al,0x41
c001561d:	0f 94 c0             	sete   al
c0015620:	84 c0                	test   al,al
c0015622:	74 28                	je     c001564c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015624:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015628:	7f 12                	jg     c001563c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001562a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001562d:	05 60 cd 02 c0       	add    eax,0xc002cd60
c0015632:	8a 00                	mov    al,BYTE PTR [eax]
c0015634:	0f b6 c0             	movzx  eax,al
c0015637:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001563a:	eb 10                	jmp    c001564c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001563c:	83 ec 0c             	sub    esp,0xc
c001563f:	68 c4 af 02 c0       	push   0xc002afc4
c0015644:	e8 b6 48 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0015649:	83 c4 10             	add    esp,0x10
c001564c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001564f:	c9                   	leave  
c0015650:	c3                   	ret    
c0015651:	90                   	nop

c0015652 <startGUI(void*)>:
c0015652:	55                   	push   ebp
c0015653:	89 e5                	mov    ebp,esp
c0015655:	53                   	push   ebx
c0015656:	83 ec 04             	sub    esp,0x4
c0015659:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001565e:	48                   	dec    eax
c001565f:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0015664:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0015669:	85 c0                	test   eax,eax
c001566b:	75 01                	jne    c001566e <startGUI(void*)+0x1c>
c001566d:	fb                   	sti    
c001566e:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0015674:	83 ec 08             	sub    esp,0x8
c0015677:	6a 01                	push   0x1
c0015679:	68 44 b0 02 c0       	push   0xc002b044
c001567e:	e8 49 7a 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c0015683:	83 c4 10             	add    esp,0x10
c0015686:	83 ec 08             	sub    esp,0x8
c0015689:	53                   	push   ebx
c001568a:	50                   	push   eax
c001568b:	e8 6d 7c 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c0015690:	83 c4 10             	add    esp,0x10
c0015693:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0015699:	83 ec 08             	sub    esp,0x8
c001569c:	6a 01                	push   0x1
c001569e:	68 5e b0 02 c0       	push   0xc002b05e
c00156a3:	e8 24 7a 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	83 ec 08             	sub    esp,0x8
c00156ae:	53                   	push   ebx
c00156af:	50                   	push   eax
c00156b0:	e8 48 7c 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c00156b5:	83 c4 10             	add    esp,0x10
c00156b8:	90                   	nop
c00156b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156bc:	c9                   	leave  
c00156bd:	c3                   	ret    

c00156be <startGUIVESA(void*)>:
c00156be:	55                   	push   ebp
c00156bf:	89 e5                	mov    ebp,esp
c00156c1:	53                   	push   ebx
c00156c2:	83 ec 04             	sub    esp,0x4
c00156c5:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00156ca:	48                   	dec    eax
c00156cb:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00156d0:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00156d5:	85 c0                	test   eax,eax
c00156d7:	75 01                	jne    c00156da <startGUIVESA(void*)+0x1c>
c00156d9:	fb                   	sti    
c00156da:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c00156e0:	83 ec 08             	sub    esp,0x8
c00156e3:	6a 01                	push   0x1
c00156e5:	68 78 b0 02 c0       	push   0xc002b078
c00156ea:	e8 dd 79 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	83 ec 08             	sub    esp,0x8
c00156f5:	53                   	push   ebx
c00156f6:	50                   	push   eax
c00156f7:	e8 01 7c 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c00156fc:	83 c4 10             	add    esp,0x10
c00156ff:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0015705:	83 ec 08             	sub    esp,0x8
c0015708:	6a 01                	push   0x1
c001570a:	68 5e b0 02 c0       	push   0xc002b05e
c001570f:	e8 b8 79 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	83 ec 08             	sub    esp,0x8
c001571a:	53                   	push   ebx
c001571b:	50                   	push   eax
c001571c:	e8 dc 7b 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	90                   	nop
c0015725:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015728:	c9                   	leave  
c0015729:	c3                   	ret    

c001572a <sendKeyToTerminal(unsigned char)>:
c001572a:	55                   	push   ebp
c001572b:	89 e5                	mov    ebp,esp
c001572d:	83 ec 28             	sub    esp,0x28
c0015730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015733:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015736:	a1 c4 db 02 c0       	mov    eax,ds:0xc002dbc4
c001573b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001573f:	83 ec 08             	sub    esp,0x8
c0015742:	52                   	push   edx
c0015743:	50                   	push   eax
c0015744:	e8 bb b2 ff ff       	call   c0010a04 <VgaText::receiveKey(unsigned char)>
c0015749:	83 c4 10             	add    esp,0x10
c001574c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015750:	0f 85 8f 00 00 00    	jne    c00157e5 <sendKeyToTerminal(unsigned char)+0xbb>
c0015756:	fa                   	cli    
c0015757:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001575c:	40                   	inc    eax
c001575d:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0015762:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c0015767:	40                   	inc    eax
c0015768:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001576d:	a1 a0 dc 02 c0       	mov    eax,ds:0xc002dca0
c0015772:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015775:	c7 05 a0 dc 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dca0,0x0
c001577f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015783:	74 1f                	je     c00157a4 <sendKeyToTerminal(unsigned char)+0x7a>
c0015785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015788:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001578b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001578e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015791:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015794:	83 ec 0c             	sub    esp,0xc
c0015797:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001579a:	e8 75 87 00 00       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	eb db                	jmp    c001577f <sendKeyToTerminal(unsigned char)+0x55>
c00157a4:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c00157a9:	48                   	dec    eax
c00157aa:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c00157af:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c00157b4:	85 c0                	test   eax,eax
c00157b6:	75 18                	jne    c00157d0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157b8:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c00157bd:	85 c0                	test   eax,eax
c00157bf:	74 0f                	je     c00157d0 <sendKeyToTerminal(unsigned char)+0xa6>
c00157c1:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c00157cb:	e8 c1 82 00 00       	call   c001da91 <schedule()>
c00157d0:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00157d5:	48                   	dec    eax
c00157d6:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00157db:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00157e0:	85 c0                	test   eax,eax
c00157e2:	75 01                	jne    c00157e5 <sendKeyToTerminal(unsigned char)+0xbb>
c00157e4:	fb                   	sti    
c00157e5:	90                   	nop
c00157e6:	c9                   	leave  
c00157e7:	c3                   	ret    

c00157e8 <sendKeyboardToken(KeyboardToken)>:
c00157e8:	55                   	push   ebp
c00157e9:	89 e5                	mov    ebp,esp
c00157eb:	83 ec 18             	sub    esp,0x18
c00157ee:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	0f b7 c0             	movzx  eax,ax
c00157f7:	83 f2 01             	xor    edx,0x1
c00157fa:	88 90 c0 dc 02 c0    	mov    BYTE PTR [eax-0x3ffd2340],dl
c0015800:	a1 a8 dc 02 c0       	mov    eax,ds:0xc002dca8
c0015805:	85 c0                	test   eax,eax
c0015807:	74 24                	je     c001582d <sendKeyboardToken(KeyboardToken)+0x45>
c0015809:	8b 0d a8 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dca8
c001580f:	83 ec 04             	sub    esp,0x4
c0015812:	68 c0 dc 02 c0       	push   0xc002dcc0
c0015817:	83 ec 08             	sub    esp,0x8
c001581a:	89 e2                	mov    edx,esp
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	89 02                	mov    DWORD PTR [edx],eax
c0015821:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015824:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015828:	ff d1                	call   ecx
c001582a:	83 c4 10             	add    esp,0x10
c001582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015830:	66 3d 03 02          	cmp    ax,0x203
c0015834:	75 07                	jne    c001583d <sendKeyboardToken(KeyboardToken)+0x55>
c0015836:	a0 c0 dd 02 c0       	mov    al,ds:0xc002ddc0
c001583b:	84 c0                	test   al,al
c001583d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015841:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015844:	a0 c8 e0 02 c0       	mov    al,ds:0xc002e0c8
c0015849:	38 c2                	cmp    dl,al
c001584b:	74 1c                	je     c0015869 <sendKeyboardToken(KeyboardToken)+0x81>
c001584d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015850:	a2 c8 e0 02 c0       	mov    ds:0xc002e0c8,al
c0015855:	a0 c8 e0 02 c0       	mov    al,ds:0xc002e0c8
c001585a:	0f b6 c0             	movzx  eax,al
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	50                   	push   eax
c0015861:	e8 de a7 ff ff       	call   c0010044 <setTerminalScrollLock(bool)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001586c:	84 c0                	test   al,al
c001586e:	0f 84 ae 00 00 00    	je     c0015922 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015877:	66 3d 10 03          	cmp    ax,0x310
c001587b:	75 06                	jne    c0015883 <sendKeyboardToken(KeyboardToken)+0x9b>
c001587d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015886:	66 3d 11 03          	cmp    ax,0x311
c001588a:	75 06                	jne    c0015892 <sendKeyboardToken(KeyboardToken)+0xaa>
c001588c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015895:	66 3d 12 03          	cmp    ax,0x312
c0015899:	75 06                	jne    c00158a1 <sendKeyboardToken(KeyboardToken)+0xb9>
c001589b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	66 3d 13 03          	cmp    ax,0x313
c00158a8:	75 06                	jne    c00158b0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00158aa:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00158b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b3:	66 3d 14 03          	cmp    ax,0x314
c00158b7:	75 06                	jne    c00158bf <sendKeyboardToken(KeyboardToken)+0xd7>
c00158b9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00158bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c2:	66 3d 15 03          	cmp    ax,0x315
c00158c6:	75 06                	jne    c00158ce <sendKeyboardToken(KeyboardToken)+0xe6>
c00158c8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	66 3d 16 03          	cmp    ax,0x316
c00158d5:	75 06                	jne    c00158dd <sendKeyboardToken(KeyboardToken)+0xf5>
c00158d7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00158dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e0:	66 3d 17 03          	cmp    ax,0x317
c00158e4:	75 06                	jne    c00158ec <sendKeyboardToken(KeyboardToken)+0x104>
c00158e6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00158ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ef:	66 3d 18 03          	cmp    ax,0x318
c00158f3:	75 06                	jne    c00158fb <sendKeyboardToken(KeyboardToken)+0x113>
c00158f5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00158fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fe:	66 3d 19 03          	cmp    ax,0x319
c0015902:	75 06                	jne    c001590a <sendKeyboardToken(KeyboardToken)+0x122>
c0015904:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001590a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001590d:	66 3d 1a 03          	cmp    ax,0x31a
c0015911:	0f 85 c9 00 00 00    	jne    c00159e0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015917:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001591d:	e9 be 00 00 00       	jmp    c00159e0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015925:	66 3d 10 03          	cmp    ax,0x310
c0015929:	75 0a                	jne    c0015935 <sendKeyboardToken(KeyboardToken)+0x14d>
c001592b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015931:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	66 3d 11 03          	cmp    ax,0x311
c001593c:	75 0a                	jne    c0015948 <sendKeyboardToken(KeyboardToken)+0x160>
c001593e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015944:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594b:	66 3d 12 03          	cmp    ax,0x312
c001594f:	75 0a                	jne    c001595b <sendKeyboardToken(KeyboardToken)+0x173>
c0015951:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015957:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001595b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595e:	66 3d 13 03          	cmp    ax,0x313
c0015962:	75 0a                	jne    c001596e <sendKeyboardToken(KeyboardToken)+0x186>
c0015964:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001596a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001596e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015971:	66 3d 14 03          	cmp    ax,0x314
c0015975:	75 0a                	jne    c0015981 <sendKeyboardToken(KeyboardToken)+0x199>
c0015977:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001597d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015984:	66 3d 15 03          	cmp    ax,0x315
c0015988:	75 0a                	jne    c0015994 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001598a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015990:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015997:	66 3d 16 03          	cmp    ax,0x316
c001599b:	75 0a                	jne    c00159a7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001599d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00159a3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159aa:	66 3d 17 03          	cmp    ax,0x317
c00159ae:	75 0a                	jne    c00159ba <sendKeyboardToken(KeyboardToken)+0x1d2>
c00159b0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00159b6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	66 3d 18 03          	cmp    ax,0x318
c00159c1:	75 0a                	jne    c00159cd <sendKeyboardToken(KeyboardToken)+0x1e5>
c00159c3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00159c9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d0:	66 3d 19 03          	cmp    ax,0x319
c00159d4:	75 0a                	jne    c00159e0 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159d6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00159dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00159e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e3:	66 3d 00 02          	cmp    ax,0x200
c00159e7:	75 2c                	jne    c0015a15 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159e9:	a0 c0 e0 02 c0       	mov    al,ds:0xc002e0c0
c00159ee:	83 f0 01             	xor    eax,0x1
c00159f1:	84 c0                	test   al,al
c00159f3:	74 20                	je     c0015a15 <sendKeyboardToken(KeyboardToken)+0x22d>
c00159f5:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00159fa:	6a 01                	push   0x1
c00159fc:	6a 00                	push   0x0
c00159fe:	68 52 56 01 c0       	push   0xc0015652
c0015a03:	50                   	push   eax
c0015a04:	e8 63 7e 00 00       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c0015a09:	83 c4 10             	add    esp,0x10
c0015a0c:	c6 05 c0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0c0,0x1
c0015a13:	eb 33                	jmp    c0015a48 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a18:	66 3d 01 02          	cmp    ax,0x201
c0015a1c:	75 2a                	jne    c0015a48 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a1e:	a0 c0 e0 02 c0       	mov    al,ds:0xc002e0c0
c0015a23:	83 f0 01             	xor    eax,0x1
c0015a26:	84 c0                	test   al,al
c0015a28:	74 1e                	je     c0015a48 <sendKeyboardToken(KeyboardToken)+0x260>
c0015a2a:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0015a2f:	6a 01                	push   0x1
c0015a31:	6a 00                	push   0x0
c0015a33:	68 be 56 01 c0       	push   0xc00156be
c0015a38:	50                   	push   eax
c0015a39:	e8 2e 7e 00 00       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	c6 05 c0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0c0,0x1
c0015a48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4b:	66 3d 1d 03          	cmp    ax,0x31d
c0015a4f:	75 06                	jne    c0015a57 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015a51:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5a:	66 3d 1c 03          	cmp    ax,0x31c
c0015a5e:	75 06                	jne    c0015a66 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015a60:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015a66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a69:	66 3d 1b 03          	cmp    ax,0x31b
c0015a6d:	75 06                	jne    c0015a75 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015a6f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a78:	66 3d 1e 03          	cmp    ax,0x31e
c0015a7c:	75 06                	jne    c0015a84 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015a7e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a87:	66 3d 1f 03          	cmp    ax,0x31f
c0015a8b:	75 06                	jne    c0015a93 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015a8d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a96:	66 3d 1a 03          	cmp    ax,0x31a
c0015a9a:	75 06                	jne    c0015aa2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015a9c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015aa2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015aa6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa9:	83 f0 01             	xor    eax,0x1
c0015aac:	84 c0                	test   al,al
c0015aae:	74 77                	je     c0015b27 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015ab0:	a0 c1 dd 02 c0       	mov    al,ds:0xc002ddc1
c0015ab5:	84 c0                	test   al,al
c0015ab7:	74 41                	je     c0015afa <sendKeyboardToken(KeyboardToken)+0x312>
c0015ab9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015abd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ac1:	74 2b                	je     c0015aee <sendKeyboardToken(KeyboardToken)+0x306>
c0015ac3:	8b 15 c4 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0c4
c0015ac9:	89 d0                	mov    eax,edx
c0015acb:	c1 e0 02             	shl    eax,0x2
c0015ace:	01 d0                	add    eax,edx
c0015ad0:	01 c0                	add    eax,eax
c0015ad2:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c0015ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ada:	0f b7 c0             	movzx  eax,ax
c0015add:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ae0:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c0015ae5:	01 d0                	add    eax,edx
c0015ae7:	a3 c4 e0 02 c0       	mov    ds:0xc002e0c4,eax
c0015aec:	eb 6d                	jmp    c0015b5b <sendKeyboardToken(KeyboardToken)+0x373>
c0015aee:	c7 05 c4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0c4,0x0
c0015af8:	eb 61                	jmp    c0015b5b <sendKeyboardToken(KeyboardToken)+0x373>
c0015afa:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c0015aff:	85 c0                	test   eax,eax
c0015b01:	74 18                	je     c0015b1b <sendKeyboardToken(KeyboardToken)+0x333>
c0015b03:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c0015b08:	0f b6 c0             	movzx  eax,al
c0015b0b:	83 ec 0c             	sub    esp,0xc
c0015b0e:	50                   	push   eax
c0015b0f:	e8 16 fc ff ff       	call   c001572a <sendKeyToTerminal(unsigned char)>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b1b:	c7 05 c4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0c4,0x0
c0015b25:	eb 34                	jmp    c0015b5b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2a:	66 3d 01 01          	cmp    ax,0x101
c0015b2e:	75 2b                	jne    c0015b5b <sendKeyboardToken(KeyboardToken)+0x373>
c0015b30:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c0015b35:	85 c0                	test   eax,eax
c0015b37:	74 18                	je     c0015b51 <sendKeyboardToken(KeyboardToken)+0x369>
c0015b39:	a1 c4 e0 02 c0       	mov    eax,ds:0xc002e0c4
c0015b3e:	0f b6 c0             	movzx  eax,al
c0015b41:	83 ec 0c             	sub    esp,0xc
c0015b44:	50                   	push   eax
c0015b45:	e8 e0 fb ff ff       	call   c001572a <sendKeyToTerminal(unsigned char)>
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b51:	c7 05 c4 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e0c4,0x0
c0015b5b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015b5e:	83 f0 01             	xor    eax,0x1
c0015b61:	84 c0                	test   al,al
c0015b63:	74 4c                	je     c0015bb1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b65:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b68:	83 f0 01             	xor    eax,0x1
c0015b6b:	84 c0                	test   al,al
c0015b6d:	74 42                	je     c0015bb1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b6f:	a0 c0 dd 02 c0       	mov    al,ds:0xc002ddc0
c0015b74:	83 f0 01             	xor    eax,0x1
c0015b77:	84 c0                	test   al,al
c0015b79:	74 36                	je     c0015bb1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7e:	66 83 f8 1f          	cmp    ax,0x1f
c0015b82:	76 09                	jbe    c0015b8d <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b87:	66 83 f8 7e          	cmp    ax,0x7e
c0015b8b:	76 12                	jbe    c0015b9f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b90:	66 83 f8 0a          	cmp    ax,0xa
c0015b94:	74 09                	je     c0015b9f <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b99:	66 83 f8 08          	cmp    ax,0x8
c0015b9d:	75 12                	jne    c0015bb1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba2:	0f b6 c0             	movzx  eax,al
c0015ba5:	83 ec 0c             	sub    esp,0xc
c0015ba8:	50                   	push   eax
c0015ba9:	e8 7c fb ff ff       	call   c001572a <sendKeyToTerminal(unsigned char)>
c0015bae:	83 c4 10             	add    esp,0x10
c0015bb1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015bb4:	83 f0 01             	xor    eax,0x1
c0015bb7:	84 c0                	test   al,al
c0015bb9:	74 4f                	je     c0015c0a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bbb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bbe:	83 f0 01             	xor    eax,0x1
c0015bc1:	84 c0                	test   al,al
c0015bc3:	74 45                	je     c0015c0a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bc5:	a0 c0 dd 02 c0       	mov    al,ds:0xc002ddc0
c0015bca:	84 c0                	test   al,al
c0015bcc:	74 3c                	je     c0015c0a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd1:	66 83 f8 3f          	cmp    ax,0x3f
c0015bd5:	76 33                	jbe    c0015c0a <sendKeyboardToken(KeyboardToken)+0x422>
c0015bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bda:	66 83 f8 7f          	cmp    ax,0x7f
c0015bde:	77 2a                	ja     c0015c0a <sendKeyboardToken(KeyboardToken)+0x422>
c0015be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be3:	88 c2                	mov    dl,al
c0015be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be8:	66 83 f8 5f          	cmp    ax,0x5f
c0015bec:	76 04                	jbe    c0015bf2 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015bee:	b0 20                	mov    al,0x20
c0015bf0:	eb 02                	jmp    c0015bf4 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015bf2:	b0 00                	mov    al,0x0
c0015bf4:	29 c2                	sub    edx,eax
c0015bf6:	88 d0                	mov    al,dl
c0015bf8:	83 e8 40             	sub    eax,0x40
c0015bfb:	0f b6 c0             	movzx  eax,al
c0015bfe:	83 ec 0c             	sub    esp,0xc
c0015c01:	50                   	push   eax
c0015c02:	e8 23 fb ff ff       	call   c001572a <sendKeyToTerminal(unsigned char)>
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c0d:	66 3d 00 03          	cmp    ax,0x300
c0015c11:	75 0f                	jne    c0015c22 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c13:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c16:	83 f0 01             	xor    eax,0x1
c0015c19:	84 c0                	test   al,al
c0015c1b:	74 05                	je     c0015c22 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015c1d:	e8 93 a7 ff ff       	call   c00103b5 <doTerminalCycle()>
c0015c22:	90                   	nop
c0015c23:	c9                   	leave  
c0015c24:	c3                   	ret    

c0015c25 <clearInternalKeybuffer(VgaText*)>:
c0015c25:	55                   	push   ebp
c0015c26:	89 e5                	mov    ebp,esp
c0015c28:	83 ec 08             	sub    esp,0x8
c0015c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2e:	05 98 01 00 00       	add    eax,0x198
c0015c33:	83 ec 0c             	sub    esp,0xc
c0015c36:	50                   	push   eax
c0015c37:	e8 30 ab fe ff       	call   c000076c <strlen>
c0015c3c:	83 c4 10             	add    esp,0x10
c0015c3f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c42:	81 c2 98 01 00 00    	add    edx,0x198
c0015c48:	83 ec 04             	sub    esp,0x4
c0015c4b:	50                   	push   eax
c0015c4c:	6a 00                	push   0x0
c0015c4e:	52                   	push   edx
c0015c4f:	e8 fc aa fe ff       	call   c0000750 <memset>
c0015c54:	83 c4 10             	add    esp,0x10
c0015c57:	90                   	nop
c0015c58:	c9                   	leave  
c0015c59:	c3                   	ret    

c0015c5a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015c5a:	55                   	push   ebp
c0015c5b:	89 e5                	mov    ebp,esp
c0015c5d:	83 ec 18             	sub    esp,0x18
c0015c60:	a1 a8 dc 02 c0       	mov    eax,ds:0xc002dca8
c0015c65:	85 c0                	test   eax,eax
c0015c67:	74 2a                	je     c0015c93 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015c69:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015c6f:	8b 0d a8 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dca8
c0015c75:	83 ec 04             	sub    esp,0x4
c0015c78:	68 c0 dc 02 c0       	push   0xc002dcc0
c0015c7d:	83 ec 08             	sub    esp,0x8
c0015c80:	89 e2                	mov    edx,esp
c0015c82:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015c85:	89 02                	mov    DWORD PTR [edx],eax
c0015c87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015c8a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015c8e:	ff d1                	call   ecx
c0015c90:	83 c4 10             	add    esp,0x10
c0015c93:	fb                   	sti    
c0015c94:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015c9b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015c9f:	0f 84 a1 00 00 00    	je     c0015d46 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cae:	84 c0                	test   al,al
c0015cb0:	75 28                	jne    c0015cda <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015cb2:	fa                   	cli    
c0015cb3:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0015cb8:	40                   	inc    eax
c0015cb9:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0015cbe:	e8 ce 7d 00 00       	call   c001da91 <schedule()>
c0015cc3:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0015cc8:	48                   	dec    eax
c0015cc9:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c0015cce:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c0015cd3:	85 c0                	test   eax,eax
c0015cd5:	75 ce                	jne    c0015ca5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cd7:	fb                   	sti    
c0015cd8:	eb cb                	jmp    c0015ca5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015cda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cdd:	8d 50 01             	lea    edx,[eax+0x1]
c0015ce0:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ce3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ce6:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015cec:	88 10                	mov    BYTE PTR [eax],dl
c0015cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf1:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015cf7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfd:	05 98 01 00 00       	add    eax,0x198
c0015d02:	83 ec 0c             	sub    esp,0xc
c0015d05:	50                   	push   eax
c0015d06:	e8 61 aa fe ff       	call   c000076c <strlen>
c0015d0b:	83 c4 10             	add    esp,0x10
c0015d0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d11:	81 c2 98 01 00 00    	add    edx,0x198
c0015d17:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015d1a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d1d:	81 c2 98 01 00 00    	add    edx,0x198
c0015d23:	83 ec 04             	sub    esp,0x4
c0015d26:	50                   	push   eax
c0015d27:	51                   	push   ecx
c0015d28:	52                   	push   edx
c0015d29:	e8 5a a9 fe ff       	call   c0000688 <memmove>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015d34:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015d37:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015d3b:	0f 85 5a ff ff ff    	jne    c0015c9b <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015d41:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d44:	eb 03                	jmp    c0015d49 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d49:	c9                   	leave  
c0015d4a:	c3                   	ret    
c0015d4b:	90                   	nop

c0015d4c <Keyboard::Keyboard(char const*)>:
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d53:	83 ec 08             	sub    esp,0x8
c0015d56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d5a:	50                   	push   eax
c0015d5b:	e8 70 e0 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c0015d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d6c:	89 10                	mov    DWORD PTR [eax],edx
c0015d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d72:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015d7c:	c6 05 a4 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dca4,0x1
c0015d83:	90                   	nop
c0015d84:	83 c4 0c             	add    esp,0xc
c0015d87:	c3                   	ret    

c0015d88 <Keyboard::~Keyboard()>:
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	ba 9c b0 02 c0       	mov    edx,0xc002b09c
c0015d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d94:	89 10                	mov    DWORD PTR [eax],edx
c0015d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	50                   	push   eax
c0015d9e:	e8 f7 dc ff ff       	call   c0013a9a <Device::~Device()>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	90                   	nop
c0015da7:	83 c4 0c             	add    esp,0xc
c0015daa:	c3                   	ret    
c0015dab:	90                   	nop

c0015dac <Keyboard::~Keyboard()>:
c0015dac:	83 ec 0c             	sub    esp,0xc
c0015daf:	83 ec 0c             	sub    esp,0xc
c0015db2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015db6:	e8 cd ff ff ff       	call   c0015d88 <Keyboard::~Keyboard()>
c0015dbb:	83 c4 10             	add    esp,0x10
c0015dbe:	83 ec 08             	sub    esp,0x8
c0015dc1:	68 5c 01 00 00       	push   0x15c
c0015dc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015dca:	e8 ec c8 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0015dcf:	83 c4 10             	add    esp,0x10
c0015dd2:	83 c4 0c             	add    esp,0xc
c0015dd5:	c3                   	ret    

c0015dd6 <LogicalDisk::close(int, int, void*)>:
c0015dd6:	83 c8 ff             	or     eax,0xffffffff
c0015dd9:	c3                   	ret    

c0015dda <LogicalDisk::~LogicalDisk()>:
c0015dda:	83 ec 0c             	sub    esp,0xc
c0015ddd:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0015de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015de6:	89 10                	mov    DWORD PTR [eax],edx
c0015de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dec:	83 ec 0c             	sub    esp,0xc
c0015def:	50                   	push   eax
c0015df0:	e8 a5 dc ff ff       	call   c0013a9a <Device::~Device()>
c0015df5:	83 c4 10             	add    esp,0x10
c0015df8:	90                   	nop
c0015df9:	83 c4 0c             	add    esp,0xc
c0015dfc:	c3                   	ret    
c0015dfd:	90                   	nop

c0015dfe <LogicalDisk::~LogicalDisk()>:
c0015dfe:	83 ec 0c             	sub    esp,0xc
c0015e01:	83 ec 0c             	sub    esp,0xc
c0015e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e08:	e8 cd ff ff ff       	call   c0015dda <LogicalDisk::~LogicalDisk()>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	83 ec 08             	sub    esp,0x8
c0015e13:	68 74 01 00 00       	push   0x174
c0015e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e1c:	e8 9a c8 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0015e21:	83 c4 10             	add    esp,0x10
c0015e24:	83 c4 0c             	add    esp,0xc
c0015e27:	c3                   	ret    

c0015e28 <LogicalDisk::open(int, int, void*)>:
c0015e28:	83 ec 18             	sub    esp,0x18
c0015e2b:	68 c8 b0 02 c0       	push   0xc002b0c8
c0015e30:	e8 ca 40 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0015e35:	83 c8 ff             	or     eax,0xffffffff
c0015e38:	83 c4 1c             	add    esp,0x1c
c0015e3b:	c3                   	ret    

c0015e3c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015e3c:	53                   	push   ebx
c0015e3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015e41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e49:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015e4f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015e55:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015e5b:	77 10                	ja     c0015e6d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015e5d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015e63:	89 d3                	mov    ebx,edx
c0015e65:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015e6b:	72 05                	jb     c0015e72 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015e6d:	83 c8 ff             	or     eax,0xffffffff
c0015e70:	89 c2                	mov    edx,eax
c0015e72:	5b                   	pop    ebx
c0015e73:	c3                   	ret    

c0015e74 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015e74:	56                   	push   esi
c0015e75:	83 c8 ff             	or     eax,0xffffffff
c0015e78:	53                   	push   ebx
c0015e79:	89 c2                	mov    edx,eax
c0015e7b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015e7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015e83:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015e87:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e8d:	77 27                	ja     c0015eb6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015e8f:	89 d8                	mov    eax,ebx
c0015e91:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015e97:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015e9d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ea2:	89 c2                	mov    edx,eax
c0015ea4:	73 10                	jae    c0015eb6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ea6:	89 c8                	mov    eax,ecx
c0015ea8:	89 da                	mov    edx,ebx
c0015eaa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015eb0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015eb6:	5b                   	pop    ebx
c0015eb7:	5e                   	pop    esi
c0015eb8:	c3                   	ret    
c0015eb9:	90                   	nop

c0015eba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015eba:	83 ec 1c             	sub    esp,0x1c
c0015ebd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ec1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ecd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015ed1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ed4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015ed8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee0:	83 ec 08             	sub    esp,0x8
c0015ee3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ee7:	50                   	push   eax
c0015ee8:	e8 e3 de ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0015eed:	83 c4 10             	add    esp,0x10
c0015ef0:	ba 14 b1 02 c0       	mov    edx,0xc002b114
c0015ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ef9:	89 10                	mov    DWORD PTR [eax],edx
c0015efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015eff:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f0a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015f11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f15:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015f1f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f2b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015f31:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015f37:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015f3b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015f3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f42:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015f48:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015f4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f56:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015f5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f60:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f6a:	90                   	nop
c0015f6b:	83 c4 1c             	add    esp,0x1c
c0015f6e:	c3                   	ret    
c0015f6f:	90                   	nop

c0015f70 <LogicalDisk::assignDriveLetter()>:
c0015f70:	55                   	push   ebp
c0015f71:	57                   	push   edi
c0015f72:	56                   	push   esi
c0015f73:	53                   	push   ebx
c0015f74:	83 ec 14             	sub    esp,0x14
c0015f77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f7b:	8b 3d e0 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0e0
c0015f81:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015f87:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015f8b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015f91:	8b 3d e4 e0 02 c0    	mov    edi,DWORD PTR ds:0xc002e0e4
c0015f97:	3c 01                	cmp    al,0x1
c0015f99:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015f9d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015fa1:	19 c0                	sbb    eax,eax
c0015fa3:	83 e0 02             	and    eax,0x2
c0015fa6:	83 c0 41             	add    eax,0x41
c0015fa9:	0f be e8             	movsx  ebp,al
c0015fac:	3c 43                	cmp    al,0x43
c0015fae:	75 10                	jne    c0015fc0 <LogicalDisk::assignDriveLetter()+0x50>
c0015fb0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015fb7:	75 5d                	jne    c0016016 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fb9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015fbe:	75 56                	jne    c0016016 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fc0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015fc3:	ba 01 00 00 00       	mov    edx,0x1
c0015fc8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015fcc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015fd0:	d3 e2                	shl    edx,cl
c0015fd2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fd6:	89 d7                	mov    edi,edx
c0015fd8:	89 d6                	mov    esi,edx
c0015fda:	c1 ff 1f             	sar    edi,0x1f
c0015fdd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015fe1:	21 f9                	and    ecx,edi
c0015fe3:	09 d1                	or     ecx,edx
c0015fe5:	75 2f                	jne    c0016016 <LogicalDisk::assignDriveLetter()+0xa6>
c0015fe7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015feb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fef:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015ff5:	09 f2                	or     edx,esi
c0015ff7:	89 15 e0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e0,edx
c0015ffd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016001:	09 fa                	or     edx,edi
c0016003:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016007:	89 15 e4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e4,edx
c001600d:	89 1c bd 00 e1 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f00],ebx
c0016014:	eb 08                	jmp    c001601e <LogicalDisk::assignDriveLetter()+0xae>
c0016016:	45                   	inc    ebp
c0016017:	40                   	inc    eax
c0016018:	3c 5b                	cmp    al,0x5b
c001601a:	75 90                	jne    c0015fac <LogicalDisk::assignDriveLetter()+0x3c>
c001601c:	31 c0                	xor    eax,eax
c001601e:	83 c4 14             	add    esp,0x14
c0016021:	5b                   	pop    ebx
c0016022:	5e                   	pop    esi
c0016023:	5f                   	pop    edi
c0016024:	5d                   	pop    ebp
c0016025:	c3                   	ret    

c0016026 <LogicalDisk::mount()>:
c0016026:	56                   	push   esi
c0016027:	53                   	push   ebx
c0016028:	53                   	push   ebx
c0016029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001602d:	8b 1d 74 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc74
c0016033:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001603d:	85 db                	test   ebx,ebx
c001603f:	74 27                	je     c0016068 <LogicalDisk::mount()+0x42>
c0016041:	51                   	push   ecx
c0016042:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016049:	8b 13                	mov    edx,DWORD PTR [ebx]
c001604b:	83 e8 41             	sub    eax,0x41
c001604e:	50                   	push   eax
c001604f:	56                   	push   esi
c0016050:	53                   	push   ebx
c0016051:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	84 c0                	test   al,al
c0016059:	74 08                	je     c0016063 <LogicalDisk::mount()+0x3d>
c001605b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016061:	eb 07                	jmp    c001606a <LogicalDisk::mount()+0x44>
c0016063:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016066:	eb d5                	jmp    c001603d <LogicalDisk::mount()+0x17>
c0016068:	31 c0                	xor    eax,eax
c001606a:	5a                   	pop    edx
c001606b:	5b                   	pop    ebx
c001606c:	5e                   	pop    esi
c001606d:	c3                   	ret    

c001606e <LogicalDisk::unmount()>:
c001606e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016072:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001607c:	c3                   	ret    
c001607d:	90                   	nop

c001607e <LogicalDisk::eject()>:
c001607e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016088:	8b 10                	mov    edx,DWORD PTR [eax]
c001608a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001608e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016091:	90                   	nop

c0016092 <LogicalDisk::unassignDriveLetter()>:
c0016092:	57                   	push   edi
c0016093:	56                   	push   esi
c0016094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016098:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001609f:	84 c9                	test   cl,cl
c00160a1:	75 0f                	jne    c00160b2 <LogicalDisk::unassignDriveLetter()+0x20>
c00160a3:	c7 44 24 0c ec b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b0ec
c00160ab:	5e                   	pop    esi
c00160ac:	5f                   	pop    edi
c00160ad:	e9 4d 3e 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c00160b2:	83 e9 41             	sub    ecx,0x41
c00160b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00160bc:	b8 01 00 00 00       	mov    eax,0x1
c00160c1:	c7 04 8d 00 e1 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1f00],0x0
c00160cc:	d3 e0                	shl    eax,cl
c00160ce:	89 c7                	mov    edi,eax
c00160d0:	f7 d0                	not    eax
c00160d2:	c1 ff 1f             	sar    edi,0x1f
c00160d5:	21 05 e0 e0 02 c0    	and    DWORD PTR ds:0xc002e0e0,eax
c00160db:	89 fe                	mov    esi,edi
c00160dd:	f7 d6                	not    esi
c00160df:	21 35 e4 e0 02 c0    	and    DWORD PTR ds:0xc002e0e4,esi
c00160e5:	5e                   	pop    esi
c00160e6:	5f                   	pop    edi
c00160e7:	c3                   	ret    

c00160e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00160e8:	57                   	push   edi
c00160e9:	56                   	push   esi
c00160ea:	53                   	push   ebx
c00160eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00160ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00160f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00160f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00160fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016101:	77 41                	ja     c0016144 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016103:	99                   	cdq    
c0016104:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001610a:	01 c8                	add    eax,ecx
c001610c:	11 da                	adc    edx,ebx
c001610e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016114:	19 d7                	sbb    edi,edx
c0016116:	72 33                	jb     c001614b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016118:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001611e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016128:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001612c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001613c:	5b                   	pop    ebx
c001613d:	5e                   	pop    esi
c001613e:	5f                   	pop    edi
c001613f:	e9 cc 0a 00 00       	jmp    c0016c10 <VCache::read(unsigned long long, int, void*)>
c0016144:	b8 05 00 00 00       	mov    eax,0x5
c0016149:	eb 05                	jmp    c0016150 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001614b:	b8 07 00 00 00       	mov    eax,0x7
c0016150:	5b                   	pop    ebx
c0016151:	5e                   	pop    esi
c0016152:	5f                   	pop    edi
c0016153:	c3                   	ret    

c0016154 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016154:	57                   	push   edi
c0016155:	56                   	push   esi
c0016156:	53                   	push   ebx
c0016157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001615b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001615f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016167:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001616d:	77 41                	ja     c00161b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001616f:	99                   	cdq    
c0016170:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016176:	01 c8                	add    eax,ecx
c0016178:	11 da                	adc    edx,ebx
c001617a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016180:	19 d7                	sbb    edi,edx
c0016182:	72 33                	jb     c00161b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016184:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001618a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016190:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016194:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016198:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001619e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00161a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161a8:	5b                   	pop    ebx
c00161a9:	5e                   	pop    esi
c00161aa:	5f                   	pop    edi
c00161ab:	e9 76 09 00 00       	jmp    c0016b26 <VCache::write(unsigned long long, int, void*)>
c00161b0:	b8 05 00 00 00       	mov    eax,0x5
c00161b5:	eb 05                	jmp    c00161bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00161b7:	b8 07 00 00 00       	mov    eax,0x7
c00161bc:	5b                   	pop    ebx
c00161bd:	5e                   	pop    esi
c00161be:	5f                   	pop    edi
c00161bf:	c3                   	ret    

c00161c0 <Mouse::Mouse(char const*)>:
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161c7:	83 ec 08             	sub    esp,0x8
c00161ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ce:	50                   	push   eax
c00161cf:	e8 fc db ff ff       	call   c0013dd0 <Device::Device(char const*)>
c00161d4:	83 c4 10             	add    esp,0x10
c00161d7:	ba 40 b1 02 c0       	mov    edx,0xc002b140
c00161dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e0:	89 10                	mov    DWORD PTR [eax],edx
c00161e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00161f0:	90                   	nop
c00161f1:	83 c4 0c             	add    esp,0xc
c00161f4:	c3                   	ret    
c00161f5:	90                   	nop

c00161f6 <Mouse::~Mouse()>:
c00161f6:	83 ec 0c             	sub    esp,0xc
c00161f9:	ba 40 b1 02 c0       	mov    edx,0xc002b140
c00161fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016202:	89 10                	mov    DWORD PTR [eax],edx
c0016204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	50                   	push   eax
c001620c:	e8 89 d8 ff ff       	call   c0013a9a <Device::~Device()>
c0016211:	83 c4 10             	add    esp,0x10
c0016214:	90                   	nop
c0016215:	83 c4 0c             	add    esp,0xc
c0016218:	c3                   	ret    
c0016219:	90                   	nop

c001621a <Mouse::~Mouse()>:
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	83 ec 0c             	sub    esp,0xc
c0016220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016224:	e8 cd ff ff ff       	call   c00161f6 <Mouse::~Mouse()>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	83 ec 08             	sub    esp,0x8
c001622f:	68 58 01 00 00       	push   0x158
c0016234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016238:	e8 7e c4 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001623d:	83 c4 10             	add    esp,0x10
c0016240:	83 c4 0c             	add    esp,0xc
c0016243:	c3                   	ret    

c0016244 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016244:	55                   	push   ebp
c0016245:	57                   	push   edi
c0016246:	56                   	push   esi
c0016247:	53                   	push   ebx
c0016248:	81 ec 28 01 00 00    	sub    esp,0x128
c001624e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016255:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001625c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016263:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001626a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001626e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016272:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016279:	e8 4e dc ff ff       	call   c0013ecc <Device::getName()>
c001627e:	5a                   	pop    edx
c001627f:	59                   	pop    ecx
c0016280:	50                   	push   eax
c0016281:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016285:	55                   	push   ebp
c0016286:	e8 81 a5 fe ff       	call   c000080c <strcpy>
c001628b:	5b                   	pop    ebx
c001628c:	58                   	pop    eax
c001628d:	68 64 b1 02 c0       	push   0xc002b164
c0016292:	55                   	push   ebp
c0016293:	e8 b4 a6 fe ff       	call   c000094c <strcat>
c0016298:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001629f:	e8 f5 92 ff ff       	call   c000f599 <malloc>
c00162a4:	83 c4 0c             	add    esp,0xc
c00162a7:	89 c3                	mov    ebx,eax
c00162a9:	57                   	push   edi
c00162aa:	56                   	push   esi
c00162ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162b3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00162ba:	55                   	push   ebp
c00162bb:	50                   	push   eax
c00162bc:	e8 f9 fb ff ff       	call   c0015eba <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00162c1:	83 c4 14             	add    esp,0x14
c00162c4:	53                   	push   ebx
c00162c5:	e8 a6 fc ff ff       	call   c0015f70 <LogicalDisk::assignDriveLetter()>
c00162ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162cd:	e8 54 fd ff ff       	call   c0016026 <LogicalDisk::mount()>
c00162d2:	58                   	pop    eax
c00162d3:	5a                   	pop    edx
c00162d4:	53                   	push   ebx
c00162d5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00162dc:	e8 eb d8 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c00162e1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162e7:	5b                   	pop    ebx
c00162e8:	5e                   	pop    esi
c00162e9:	5f                   	pop    edi
c00162ea:	5d                   	pop    ebp
c00162eb:	c3                   	ret    

c00162ec <createPartitionsForDisk(PhysicalDisk*)>:
c00162ec:	55                   	push   ebp
c00162ed:	57                   	push   edi
c00162ee:	56                   	push   esi
c00162ef:	53                   	push   ebx
c00162f0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00162f6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00162fd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016303:	3d 00 02 00 00       	cmp    eax,0x200
c0016308:	74 27                	je     c0016331 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001630a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016310:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016316:	83 ec 10             	sub    esp,0x10
c0016319:	0f a4 f7 0a          	shld   edi,esi,0xa
c001631d:	99                   	cdq    
c001631e:	c1 e6 0a             	shl    esi,0xa
c0016321:	52                   	push   edx
c0016322:	89 fd                	mov    ebp,edi
c0016324:	50                   	push   eax
c0016325:	55                   	push   ebp
c0016326:	56                   	push   esi
c0016327:	e8 a8 04 01 00       	call   c00267d4 <__udivdi3>
c001632c:	e9 b1 00 00 00       	jmp    c00163e2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016331:	83 ec 0c             	sub    esp,0xc
c0016334:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016336:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001633a:	56                   	push   esi
c001633b:	6a 01                	push   0x1
c001633d:	6a 00                	push   0x0
c001633f:	6a 00                	push   0x0
c0016341:	53                   	push   ebx
c0016342:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016345:	83 c4 20             	add    esp,0x20
c0016348:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016350:	75 0a                	jne    c001635c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016352:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001635a:	74 2c                	je     c0016388 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001635c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016362:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016368:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001636e:	83 ec 10             	sub    esp,0x10
c0016371:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016375:	89 f7                	mov    edi,esi
c0016377:	c1 e0 0a             	shl    eax,0xa
c001637a:	c1 ff 1f             	sar    edi,0x1f
c001637d:	57                   	push   edi
c001637e:	56                   	push   esi
c001637f:	52                   	push   edx
c0016380:	50                   	push   eax
c0016381:	e8 4e 04 01 00       	call   c00267d4 <__udivdi3>
c0016386:	eb 5a                	jmp    c00163e2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016388:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001638f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016396:	83 e1 7f             	and    ecx,0x7f
c0016399:	83 e0 7f             	and    eax,0x7f
c001639c:	01 c1                	add    ecx,eax
c001639e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00163a5:	83 e0 7f             	and    eax,0x7f
c00163a8:	01 c1                	add    ecx,eax
c00163aa:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00163b1:	83 e0 7f             	and    eax,0x7f
c00163b4:	00 c1                	add    cl,al
c00163b6:	74 41                	je     c00163f9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00163b8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163be:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163c4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163ca:	83 ec 10             	sub    esp,0x10
c00163cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163d1:	89 f7                	mov    edi,esi
c00163d3:	c1 e0 0a             	shl    eax,0xa
c00163d6:	c1 ff 1f             	sar    edi,0x1f
c00163d9:	57                   	push   edi
c00163da:	56                   	push   esi
c00163db:	52                   	push   edx
c00163dc:	50                   	push   eax
c00163dd:	e8 f2 03 01 00       	call   c00267d4 <__udivdi3>
c00163e2:	83 c4 14             	add    esp,0x14
c00163e5:	52                   	push   edx
c00163e6:	50                   	push   eax
c00163e7:	6a 00                	push   0x0
c00163e9:	6a 00                	push   0x0
c00163eb:	53                   	push   ebx
c00163ec:	e8 53 fe ff ff       	call   c0016244 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00163f1:	83 c4 20             	add    esp,0x20
c00163f4:	e9 79 01 00 00       	jmp    c0016572 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00163f9:	89 f0                	mov    eax,esi
c00163fb:	31 f6                	xor    esi,esi
c00163fd:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016404:	75 02                	jne    c0016408 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016406:	89 f1                	mov    ecx,esi
c0016408:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001640f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016416:	c1 e2 08             	shl    edx,0x8
c0016419:	c1 e7 10             	shl    edi,0x10
c001641c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016424:	09 fa                	or     edx,edi
c0016426:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001642e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016435:	83 c0 10             	add    eax,0x10
c0016438:	09 fa                	or     edx,edi
c001643a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016441:	c1 e7 18             	shl    edi,0x18
c0016444:	09 fa                	or     edx,edi
c0016446:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001644d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016451:	c1 e7 10             	shl    edi,0x10
c0016454:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001645b:	c1 e2 08             	shl    edx,0x8
c001645e:	09 fa                	or     edx,edi
c0016460:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016467:	09 fa                	or     edx,edi
c0016469:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016470:	c1 e7 18             	shl    edi,0x18
c0016473:	09 fa                	or     edx,edi
c0016475:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016479:	46                   	inc    esi
c001647a:	83 fe 04             	cmp    esi,0x4
c001647d:	0f 85 7a ff ff ff    	jne    c00163fd <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016487:	83 f0 01             	xor    eax,0x1
c001648a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001648e:	75 57                	jne    c00164e7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016490:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016494:	83 f0 01             	xor    eax,0x1
c0016497:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001649b:	75 4a                	jne    c00164e7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001649d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00164a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00164a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00164b1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164b7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164bd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164c7:	89 f7                	mov    edi,esi
c00164c9:	c1 e0 0a             	shl    eax,0xa
c00164cc:	c1 ff 1f             	sar    edi,0x1f
c00164cf:	57                   	push   edi
c00164d0:	56                   	push   esi
c00164d1:	52                   	push   edx
c00164d2:	50                   	push   eax
c00164d3:	e8 fc 02 01 00       	call   c00267d4 <__udivdi3>
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00164df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00164e3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00164e7:	84 c9                	test   cl,cl
c00164e9:	74 53                	je     c001653e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00164eb:	0f b6 c9             	movzx  ecx,cl
c00164ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00164f6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00164fa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00164fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016502:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016506:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001650a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001650e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016512:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001651a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001651e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016522:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016526:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001652a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001652e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016532:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016536:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001653a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001653e:	31 ed                	xor    ebp,ebp
c0016540:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016544:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016548:	89 f8                	mov    eax,edi
c001654a:	09 f0                	or     eax,esi
c001654c:	74 1e                	je     c001656c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001654e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016552:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016556:	89 d1                	mov    ecx,edx
c0016558:	09 c1                	or     ecx,eax
c001655a:	74 10                	je     c001656c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001655c:	83 ec 0c             	sub    esp,0xc
c001655f:	57                   	push   edi
c0016560:	56                   	push   esi
c0016561:	52                   	push   edx
c0016562:	50                   	push   eax
c0016563:	53                   	push   ebx
c0016564:	e8 db fc ff ff       	call   c0016244 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016569:	83 c4 20             	add    esp,0x20
c001656c:	45                   	inc    ebp
c001656d:	83 fd 04             	cmp    ebp,0x4
c0016570:	75 ce                	jne    c0016540 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016572:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016578:	5b                   	pop    ebx
c0016579:	5e                   	pop    esi
c001657a:	5f                   	pop    edi
c001657b:	5d                   	pop    ebp
c001657c:	c3                   	ret    
c001657d:	90                   	nop

c001657e <Serial::Serial(char const*)>:
c001657e:	83 ec 0c             	sub    esp,0xc
c0016581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016585:	83 ec 08             	sub    esp,0x8
c0016588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001658c:	50                   	push   eax
c001658d:	e8 3e d8 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0016592:	83 c4 10             	add    esp,0x10
c0016595:	ba 78 b1 02 c0       	mov    edx,0xc002b178
c001659a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001659e:	89 10                	mov    DWORD PTR [eax],edx
c00165a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00165ae:	90                   	nop
c00165af:	83 c4 0c             	add    esp,0xc
c00165b2:	c3                   	ret    
c00165b3:	90                   	nop

c00165b4 <Serial::~Serial()>:
c00165b4:	83 ec 0c             	sub    esp,0xc
c00165b7:	ba 78 b1 02 c0       	mov    edx,0xc002b178
c00165bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165c0:	89 10                	mov    DWORD PTR [eax],edx
c00165c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165c6:	83 ec 0c             	sub    esp,0xc
c00165c9:	50                   	push   eax
c00165ca:	e8 cb d4 ff ff       	call   c0013a9a <Device::~Device()>
c00165cf:	83 c4 10             	add    esp,0x10
c00165d2:	90                   	nop
c00165d3:	83 c4 0c             	add    esp,0xc
c00165d6:	c3                   	ret    
c00165d7:	90                   	nop

c00165d8 <Serial::~Serial()>:
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	83 ec 0c             	sub    esp,0xc
c00165de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165e2:	e8 cd ff ff ff       	call   c00165b4 <Serial::~Serial()>
c00165e7:	83 c4 10             	add    esp,0x10
c00165ea:	83 ec 08             	sub    esp,0x8
c00165ed:	68 58 01 00 00       	push   0x158
c00165f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165f6:	e8 c0 c0 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00165fb:	83 c4 10             	add    esp,0x10
c00165fe:	83 c4 0c             	add    esp,0xc
c0016601:	c3                   	ret    

c0016602 <Timer::Timer(char const*)>:
c0016602:	83 ec 0c             	sub    esp,0xc
c0016605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016609:	83 ec 08             	sub    esp,0x8
c001660c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016610:	50                   	push   eax
c0016611:	e8 ba d7 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0016616:	83 c4 10             	add    esp,0x10
c0016619:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c001661e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016622:	89 10                	mov    DWORD PTR [eax],edx
c0016624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016628:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016632:	90                   	nop
c0016633:	83 c4 0c             	add    esp,0xc
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <Timer::~Timer()>:
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	ba bc b1 02 c0       	mov    edx,0xc002b1bc
c0016640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016644:	89 10                	mov    DWORD PTR [eax],edx
c0016646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001664a:	83 ec 0c             	sub    esp,0xc
c001664d:	50                   	push   eax
c001664e:	e8 47 d4 ff ff       	call   c0013a9a <Device::~Device()>
c0016653:	83 c4 10             	add    esp,0x10
c0016656:	90                   	nop
c0016657:	83 c4 0c             	add    esp,0xc
c001665a:	c3                   	ret    
c001665b:	90                   	nop

c001665c <Timer::~Timer()>:
c001665c:	83 ec 0c             	sub    esp,0xc
c001665f:	83 ec 0c             	sub    esp,0xc
c0016662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016666:	e8 cd ff ff ff       	call   c0016638 <Timer::~Timer()>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	83 ec 08             	sub    esp,0x8
c0016671:	68 5c 01 00 00       	push   0x15c
c0016676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667a:	e8 3c c0 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001667f:	83 c4 10             	add    esp,0x10
c0016682:	83 c4 0c             	add    esp,0xc
c0016685:	c3                   	ret    

c0016686 <Timer::read()>:
c0016686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001668a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016690:	c3                   	ret    

c0016691 <timerHandler(unsigned long long)>:
c0016691:	55                   	push   ebp
c0016692:	57                   	push   edi
c0016693:	56                   	push   esi
c0016694:	53                   	push   ebx
c0016695:	83 ec 0c             	sub    esp,0xc
c0016698:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001669c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00166a0:	01 35 70 e1 02 c0    	add    DWORD PTR ds:0xc002e170,esi
c00166a6:	11 3d 74 e1 02 c0    	adc    DWORD PTR ds:0xc002e174,edi
c00166ac:	80 3d 0d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db0d,0x0
c00166b3:	0f 84 42 01 00 00    	je     c00167fb <timerHandler(unsigned long long)+0x16a>
c00166b9:	fa                   	cli    
c00166ba:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	ff 05 24 10 03 c0    	inc    DWORD PTR ds:0xc0031024
c00166c9:	68 38 10 03 c0       	push   0xc0031038
c00166ce:	e8 5b 21 01 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	84 c0                	test   al,al
c00166d8:	0f 85 a2 00 00 00    	jne    c0016780 <timerHandler(unsigned long long)+0xef>
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	68 38 10 03 c0       	push   0xc0031038
c00166e6:	e8 5f 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166eb:	83 c4 10             	add    esp,0x10
c00166ee:	89 c3                	mov    ebx,eax
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	68 38 10 03 c0       	push   0xc0031038
c00166f8:	e8 4d 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00166fd:	c7 04 24 38 10 03 c0 	mov    DWORD PTR [esp],0xc0031038
c0016704:	89 c5                	mov    ebp,eax
c0016706:	e8 47 21 01 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001670b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016714:	39 15 70 e1 02 c0    	cmp    DWORD PTR ds:0xc002e170,edx
c001671a:	a1 74 e1 02 c0       	mov    eax,ds:0xc002e174
c001671f:	19 c8                	sbb    eax,ecx
c0016721:	72 21                	jb     c0016744 <timerHandler(unsigned long long)+0xb3>
c0016723:	83 ec 0c             	sub    esp,0xc
c0016726:	55                   	push   ebp
c0016727:	e8 e8 77 00 00       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001672c:	83 c4 10             	add    esp,0x10
c001672f:	39 eb                	cmp    ebx,ebp
c0016731:	75 21                	jne    c0016754 <timerHandler(unsigned long long)+0xc3>
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	68 38 10 03 c0       	push   0xc0031038
c001673b:	e8 0a 21 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016740:	89 c3                	mov    ebx,eax
c0016742:	eb 0d                	jmp    c0016751 <timerHandler(unsigned long long)+0xc0>
c0016744:	50                   	push   eax
c0016745:	50                   	push   eax
c0016746:	55                   	push   ebp
c0016747:	68 38 10 03 c0       	push   0xc0031038
c001674c:	e8 af 21 01 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016751:	83 c4 10             	add    esp,0x10
c0016754:	83 ec 0c             	sub    esp,0xc
c0016757:	68 38 10 03 c0       	push   0xc0031038
c001675c:	e8 cd 20 01 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016761:	83 c4 10             	add    esp,0x10
c0016764:	84 c0                	test   al,al
c0016766:	75 18                	jne    c0016780 <timerHandler(unsigned long long)+0xef>
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	68 38 10 03 c0       	push   0xc0031038
c0016770:	e8 d5 20 01 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016775:	83 c4 10             	add    esp,0x10
c0016778:	39 d8                	cmp    eax,ebx
c001677a:	0f 85 70 ff ff ff    	jne    c00166f0 <timerHandler(unsigned long long)+0x5f>
c0016780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016785:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016789:	74 3d                	je     c00167c8 <timerHandler(unsigned long long)+0x137>
c001678b:	80 3d 0c db 02 c0 00 	cmp    BYTE PTR ds:0xc002db0c,0x0
c0016792:	74 34                	je     c00167c8 <timerHandler(unsigned long long)+0x137>
c0016794:	fa                   	cli    
c0016795:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001679b:	31 d2                	xor    edx,edx
c001679d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a2:	89 f9                	mov    ecx,edi
c00167a4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00167a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167af:	39 c6                	cmp    esi,eax
c00167b1:	19 d1                	sbb    ecx,edx
c00167b3:	72 05                	jb     c00167ba <timerHandler(unsigned long long)+0x129>
c00167b5:	e8 d7 72 00 00       	call   c001da91 <schedule()>
c00167ba:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00167bf:	48                   	dec    eax
c00167c0:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00167c5:	75 01                	jne    c00167c8 <timerHandler(unsigned long long)+0x137>
c00167c7:	fb                   	sti    
c00167c8:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c00167cd:	48                   	dec    eax
c00167ce:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c00167d3:	75 18                	jne    c00167ed <timerHandler(unsigned long long)+0x15c>
c00167d5:	83 3d 20 10 03 c0 00 	cmp    DWORD PTR ds:0xc0031020,0x0
c00167dc:	74 0f                	je     c00167ed <timerHandler(unsigned long long)+0x15c>
c00167de:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c00167e8:	e8 a4 72 00 00       	call   c001da91 <schedule()>
c00167ed:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00167f2:	48                   	dec    eax
c00167f3:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00167f8:	75 01                	jne    c00167fb <timerHandler(unsigned long long)+0x16a>
c00167fa:	fb                   	sti    
c00167fb:	83 c4 0c             	add    esp,0xc
c00167fe:	5b                   	pop    ebx
c00167ff:	5e                   	pop    esi
c0016800:	5f                   	pop    edi
c0016801:	5d                   	pop    ebp
c0016802:	c3                   	ret    

c0016803 <setupTimer(int)>:
c0016803:	57                   	push   edi
c0016804:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0016809:	56                   	push   esi
c001680a:	53                   	push   ebx
c001680b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001680f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016815:	83 ec 0c             	sub    esp,0xc
c0016818:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001681e:	e8 a9 d6 ff ff       	call   c0013ecc <Device::getName()>
c0016823:	83 c4 10             	add    esp,0x10
c0016826:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016829:	0f 85 8d 00 00 00    	jne    c00168bc <setupTimer(int)+0xb9>
c001682f:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0016834:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001683b:	74 7f                	je     c00168bc <setupTimer(int)+0xb9>
c001683d:	83 ec 0c             	sub    esp,0xc
c0016840:	68 5c 01 00 00       	push   0x15c
c0016845:	e8 4f 8d ff ff       	call   c000f599 <malloc>
c001684a:	89 04 24             	mov    DWORD PTR [esp],eax
c001684d:	89 c3                	mov    ebx,eax
c001684f:	e8 5c fb 00 00       	call   c00263b0 <PIT::PIT()>
c0016854:	59                   	pop    ecx
c0016855:	5f                   	pop    edi
c0016856:	53                   	push   ebx
c0016857:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c001685d:	e8 6a d3 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0016862:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016864:	6a 00                	push   0x0
c0016866:	6a 00                	push   0x0
c0016868:	56                   	push   esi
c0016869:	53                   	push   ebx
c001686a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001686d:	83 c4 14             	add    esp,0x14
c0016870:	68 60 01 00 00       	push   0x160
c0016875:	e8 1f 8d ff ff       	call   c000f599 <malloc>
c001687a:	89 04 24             	mov    DWORD PTR [esp],eax
c001687d:	89 c7                	mov    edi,eax
c001687f:	e8 dc f9 00 00       	call   c0026260 <APICTimer::APICTimer()>
c0016884:	6a 00                	push   0x0
c0016886:	6a 00                	push   0x0
c0016888:	56                   	push   esi
c0016889:	57                   	push   edi
c001688a:	e8 d3 f8 00 00       	call   c0026162 <APICTimer::open(int, int, void*)>
c001688f:	83 c4 20             	add    esp,0x20
c0016892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016894:	6a 00                	push   0x0
c0016896:	6a 00                	push   0x0
c0016898:	6a 00                	push   0x0
c001689a:	53                   	push   ebx
c001689b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001689e:	58                   	pop    eax
c001689f:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00168a4:	5a                   	pop    edx
c00168a5:	57                   	push   edi
c00168a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00168ac:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00168b2:	e8 15 d3 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	eb 33                	jmp    c00168ef <setupTimer(int)+0xec>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	68 5c 01 00 00       	push   0x15c
c00168c4:	e8 d0 8c ff ff       	call   c000f599 <malloc>
c00168c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00168cc:	89 c3                	mov    ebx,eax
c00168ce:	e8 dd fa 00 00       	call   c00263b0 <PIT::PIT()>
c00168d3:	58                   	pop    eax
c00168d4:	5a                   	pop    edx
c00168d5:	53                   	push   ebx
c00168d6:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c00168dc:	e8 eb d2 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c00168e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00168e3:	6a 00                	push   0x0
c00168e5:	6a 00                	push   0x0
c00168e7:	56                   	push   esi
c00168e8:	53                   	push   ebx
c00168e9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00168ec:	83 c4 20             	add    esp,0x20
c00168ef:	89 d8                	mov    eax,ebx
c00168f1:	5b                   	pop    ebx
c00168f2:	5e                   	pop    esi
c00168f3:	5f                   	pop    edi
c00168f4:	c3                   	ret    
c00168f5:	90                   	nop

c00168f6 <VCache::VCache(PhysicalDisk*)>:
c00168f6:	53                   	push   ebx
c00168f7:	83 ec 18             	sub    esp,0x18
c00168fa:	ba ec b1 02 c0       	mov    edx,0xc002b1ec
c00168ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016903:	89 10                	mov    DWORD PTR [eax],edx
c0016905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016909:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016914:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001691b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001691f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016926:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001692d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016931:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016938:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001693f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016943:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001694a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016956:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001695d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016968:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001696c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016970:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016978:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001697c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016980:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016987:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001698f:	83 ec 0c             	sub    esp,0xc
c0016992:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016996:	e8 fe 8b ff ff       	call   c000f599 <malloc>
c001699b:	83 c4 10             	add    esp,0x10
c001699e:	89 c3                	mov    ebx,eax
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	53                   	push   ebx
c00169a4:	e8 b1 6e 00 00       	call   c001d85a <Mutex::Mutex()>
c00169a9:	83 c4 10             	add    esp,0x10
c00169ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00169b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169b7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00169be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169c2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00169c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169cd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00169d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00169da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00169de:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00169e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00169ee:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00169f1:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00169f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169f8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00169fc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a06:	05 00 01 00 00       	add    eax,0x100
c0016a0b:	c1 e0 04             	shl    eax,0x4
c0016a0e:	83 ec 0c             	sub    esp,0xc
c0016a11:	50                   	push   eax
c0016a12:	e8 82 8b ff ff       	call   c000f599 <malloc>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	89 c2                	mov    edx,eax
c0016a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a20:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a27:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a32:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016a40:	c1 e0 07             	shl    eax,0x7
c0016a43:	83 ec 0c             	sub    esp,0xc
c0016a46:	50                   	push   eax
c0016a47:	e8 4d 8b ff ff       	call   c000f599 <malloc>
c0016a4c:	83 c4 10             	add    esp,0x10
c0016a4f:	89 c2                	mov    edx,eax
c0016a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a55:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016a58:	90                   	nop
c0016a59:	83 c4 18             	add    esp,0x18
c0016a5c:	5b                   	pop    ebx
c0016a5d:	c3                   	ret    

c0016a5e <VCache::invalidateReadBuffer()>:
c0016a5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016a62:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016a68:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016a6c:	c3                   	ret    
c0016a6d:	90                   	nop

c0016a6e <VCache::writeWriteBuffer()>:
c0016a6e:	53                   	push   ebx
c0016a6f:	83 ec 14             	sub    esp,0x14
c0016a72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016a76:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a79:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a7b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a81:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016a84:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016a87:	50                   	push   eax
c0016a88:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016a8b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016a92:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016a99:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016a9d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016aa4:	83 c4 28             	add    esp,0x28
c0016aa7:	5b                   	pop    ebx
c0016aa8:	c3                   	ret    
c0016aa9:	90                   	nop

c0016aaa <VCache::~VCache()>:
c0016aaa:	83 ec 0c             	sub    esp,0xc
c0016aad:	ba ec b1 02 c0       	mov    edx,0xc002b1ec
c0016ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab6:	89 10                	mov    DWORD PTR [eax],edx
c0016ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016abc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016abf:	84 c0                	test   al,al
c0016ac1:	74 0f                	je     c0016ad2 <VCache::~VCache()+0x28>
c0016ac3:	83 ec 0c             	sub    esp,0xc
c0016ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aca:	e8 9f ff ff ff       	call   c0016a6e <VCache::writeWriteBuffer()>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016ad9:	83 ec 0c             	sub    esp,0xc
c0016adc:	50                   	push   eax
c0016add:	e8 c7 8a ff ff       	call   c000f5a9 <free>
c0016ae2:	83 c4 10             	add    esp,0x10
c0016ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ae9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	50                   	push   eax
c0016af0:	e8 b4 8a ff ff       	call   c000f5a9 <free>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	90                   	nop
c0016af9:	83 c4 0c             	add    esp,0xc
c0016afc:	c3                   	ret    
c0016afd:	90                   	nop

c0016afe <VCache::~VCache()>:
c0016afe:	83 ec 0c             	sub    esp,0xc
c0016b01:	83 ec 0c             	sub    esp,0xc
c0016b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b08:	e8 9d ff ff ff       	call   c0016aaa <VCache::~VCache()>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	83 ec 08             	sub    esp,0x8
c0016b13:	6a 44                	push   0x44
c0016b15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b19:	e8 9d bb ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0016b1e:	83 c4 10             	add    esp,0x10
c0016b21:	83 c4 0c             	add    esp,0xc
c0016b24:	c3                   	ret    
c0016b25:	90                   	nop

c0016b26 <VCache::write(unsigned long long, int, void*)>:
c0016b26:	55                   	push   ebp
c0016b27:	57                   	push   edi
c0016b28:	56                   	push   esi
c0016b29:	53                   	push   ebx
c0016b2a:	83 ec 18             	sub    esp,0x18
c0016b2d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b3c:	e8 5f 72 00 00       	call   c001dda0 <Semaphore::acquire()>
c0016b41:	83 c4 10             	add    esp,0x10
c0016b44:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b48:	74 0c                	je     c0016b56 <VCache::write(unsigned long long, int, void*)+0x30>
c0016b4a:	83 ec 0c             	sub    esp,0xc
c0016b4d:	53                   	push   ebx
c0016b4e:	e8 0b ff ff ff       	call   c0016a5e <VCache::invalidateReadBuffer()>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b5a:	74 5c                	je     c0016bb8 <VCache::write(unsigned long long, int, void*)+0x92>
c0016b5c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016b5f:	89 e8                	mov    eax,ebp
c0016b61:	99                   	cdq    
c0016b62:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016b65:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016b68:	89 c1                	mov    ecx,eax
c0016b6a:	89 d0                	mov    eax,edx
c0016b6c:	31 f1                	xor    ecx,esi
c0016b6e:	31 f8                	xor    eax,edi
c0016b70:	09 c1                	or     ecx,eax
c0016b72:	75 38                	jne    c0016bac <VCache::write(unsigned long long, int, void*)+0x86>
c0016b74:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016b79:	75 31                	jne    c0016bac <VCache::write(unsigned long long, int, void*)+0x86>
c0016b7b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b7e:	89 ef                	mov    edi,ebp
c0016b80:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016b86:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b8a:	0f af f9             	imul   edi,ecx
c0016b8d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016b90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b95:	40                   	inc    eax
c0016b96:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016b99:	83 c0 80             	add    eax,0xffffff80
c0016b9c:	75 5c                	jne    c0016bfa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b9e:	83 ec 0c             	sub    esp,0xc
c0016ba1:	53                   	push   ebx
c0016ba2:	e8 c7 fe ff ff       	call   c0016a6e <VCache::writeWriteBuffer()>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	eb 4e                	jmp    c0016bfa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016bac:	83 ec 0c             	sub    esp,0xc
c0016baf:	53                   	push   ebx
c0016bb0:	e8 b9 fe ff ff       	call   c0016a6e <VCache::writeWriteBuffer()>
c0016bb5:	83 c4 10             	add    esp,0x10
c0016bb8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bbb:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016bc0:	7f 22                	jg     c0016be4 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016bc2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016bc5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016bc8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bcc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016bd0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016bd3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016bd6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bdc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016be0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016be2:	eb 16                	jmp    c0016bfa <VCache::write(unsigned long long, int, void*)+0xd4>
c0016be4:	83 ec 0c             	sub    esp,0xc
c0016be7:	8b 10                	mov    edx,DWORD PTR [eax]
c0016be9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016bf1:	57                   	push   edi
c0016bf2:	56                   	push   esi
c0016bf3:	50                   	push   eax
c0016bf4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bf7:	83 c4 20             	add    esp,0x20
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c00:	e8 f7 77 00 00       	call   c001e3fc <Semaphore::release()>
c0016c05:	83 c4 1c             	add    esp,0x1c
c0016c08:	31 c0                	xor    eax,eax
c0016c0a:	5b                   	pop    ebx
c0016c0b:	5e                   	pop    esi
c0016c0c:	5f                   	pop    edi
c0016c0d:	5d                   	pop    ebp
c0016c0e:	c3                   	ret    
c0016c0f:	90                   	nop

c0016c10 <VCache::read(unsigned long long, int, void*)>:
c0016c10:	55                   	push   ebp
c0016c11:	57                   	push   edi
c0016c12:	56                   	push   esi
c0016c13:	53                   	push   ebx
c0016c14:	83 ec 28             	sub    esp,0x28
c0016c17:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016c1b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c1f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016c23:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016c27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c2a:	e8 71 71 00 00       	call   c001dda0 <Semaphore::acquire()>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c36:	74 0c                	je     c0016c44 <VCache::read(unsigned long long, int, void*)+0x34>
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	53                   	push   ebx
c0016c3c:	e8 2d fe ff ff       	call   c0016a6e <VCache::writeWriteBuffer()>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 fd 01             	cmp    ebp,0x1
c0016c47:	0f 85 80 00 00 00    	jne    c0016ccd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c54:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016c5b:	75 70                	jne    c0016ccd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016c5d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016c60:	89 e9                	mov    ecx,ebp
c0016c62:	f7 d9                	neg    ecx
c0016c64:	89 c8                	mov    eax,ecx
c0016c66:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016c6a:	c1 f8 1f             	sar    eax,0x1f
c0016c6d:	21 f1                	and    ecx,esi
c0016c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c73:	89 c8                	mov    eax,ecx
c0016c75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c79:	21 f9                	and    ecx,edi
c0016c7b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c7f:	89 ca                	mov    edx,ecx
c0016c81:	74 0a                	je     c0016c8d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c83:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016c86:	75 05                	jne    c0016c8d <VCache::read(unsigned long long, int, void*)+0x7d>
c0016c88:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016c8b:	74 23                	je     c0016cb0 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016c8d:	83 ec 0c             	sub    esp,0xc
c0016c90:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016c94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016c98:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016c9b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016c9e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ca0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016ca3:	55                   	push   ebp
c0016ca4:	52                   	push   edx
c0016ca5:	50                   	push   eax
c0016ca6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016caa:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016cad:	83 c4 20             	add    esp,0x20
c0016cb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cb3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016cb7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cbd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016cc0:	48                   	dec    eax
c0016cc1:	21 c6                	and    esi,eax
c0016cc3:	0f af f1             	imul   esi,ecx
c0016cc6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016cc9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ccb:	eb 1d                	jmp    c0016cea <VCache::read(unsigned long long, int, void*)+0xda>
c0016ccd:	83 ec 0c             	sub    esp,0xc
c0016cd0:	53                   	push   ebx
c0016cd1:	e8 88 fd ff ff       	call   c0016a5e <VCache::invalidateReadBuffer()>
c0016cd6:	5a                   	pop    edx
c0016cd7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cda:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cdc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016ce0:	55                   	push   ebp
c0016ce1:	57                   	push   edi
c0016ce2:	56                   	push   esi
c0016ce3:	50                   	push   eax
c0016ce4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ce7:	83 c4 20             	add    esp,0x20
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cf0:	e8 07 77 00 00       	call   c001e3fc <Semaphore::release()>
c0016cf5:	83 c4 2c             	add    esp,0x2c
c0016cf8:	31 c0                	xor    eax,eax
c0016cfa:	5b                   	pop    ebx
c0016cfb:	5e                   	pop    esi
c0016cfc:	5f                   	pop    edi
c0016cfd:	5d                   	pop    ebp
c0016cfe:	c3                   	ret    
c0016cff:	90                   	nop

c0016d00 <Video::putrect(int, int, int, int, unsigned int)>:
c0016d00:	55                   	push   ebp
c0016d01:	57                   	push   edi
c0016d02:	56                   	push   esi
c0016d03:	53                   	push   ebx
c0016d04:	83 ec 1c             	sub    esp,0x1c
c0016d07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016d13:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016d17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d1f:	01 df                	add    edi,ebx
c0016d21:	39 fb                	cmp    ebx,edi
c0016d23:	7d 1f                	jge    c0016d44 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016d25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d29:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016d2d:	7d 12                	jge    c0016d41 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016d2f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016d31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016d35:	53                   	push   ebx
c0016d36:	55                   	push   ebp
c0016d37:	45                   	inc    ebp
c0016d38:	56                   	push   esi
c0016d39:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016d3c:	83 c4 10             	add    esp,0x10
c0016d3f:	eb e8                	jmp    c0016d29 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016d41:	43                   	inc    ebx
c0016d42:	eb dd                	jmp    c0016d21 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016d44:	83 c4 1c             	add    esp,0x1c
c0016d47:	5b                   	pop    ebx
c0016d48:	5e                   	pop    esi
c0016d49:	5f                   	pop    edi
c0016d4a:	5d                   	pop    ebp
c0016d4b:	c3                   	ret    

c0016d4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016d4c:	55                   	push   ebp
c0016d4d:	57                   	push   edi
c0016d4e:	31 ff                	xor    edi,edi
c0016d50:	56                   	push   esi
c0016d51:	53                   	push   ebx
c0016d52:	83 ec 1c             	sub    esp,0x1c
c0016d55:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016d59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016d5d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016d64:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016d69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d6d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016d71:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016d75:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016d78:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d7c:	01 f9                	add    ecx,edi
c0016d7e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016d82:	7d 2f                	jge    c0016db3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016d84:	31 f6                	xor    esi,esi
c0016d86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016d8a:	01 f2                	add    edx,esi
c0016d8c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016d90:	7d 1a                	jge    c0016dac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016d92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016d95:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016d98:	46                   	inc    esi
c0016d99:	51                   	push   ecx
c0016d9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016d9e:	52                   	push   edx
c0016d9f:	55                   	push   ebp
c0016da0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016daa:	eb da                	jmp    c0016d86 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016dac:	47                   	inc    edi
c0016dad:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016db1:	eb c5                	jmp    c0016d78 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016db3:	83 c4 1c             	add    esp,0x1c
c0016db6:	5b                   	pop    ebx
c0016db7:	5e                   	pop    esi
c0016db8:	5f                   	pop    edi
c0016db9:	5d                   	pop    ebp
c0016dba:	c3                   	ret    
c0016dbb:	90                   	nop

c0016dbc <Video::blit(unsigned int*, int, int, int, int)>:
c0016dbc:	55                   	push   ebp
c0016dbd:	57                   	push   edi
c0016dbe:	56                   	push   esi
c0016dbf:	53                   	push   ebx
c0016dc0:	83 ec 1c             	sub    esp,0x1c
c0016dc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016dc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016dcb:	85 c0                	test   eax,eax
c0016dcd:	79 02                	jns    c0016dd1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016dcf:	31 c0                	xor    eax,eax
c0016dd1:	c1 e0 02             	shl    eax,0x2
c0016dd4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ddc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016de0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016de4:	39 d8                	cmp    eax,ebx
c0016de6:	7e 49                	jle    c0016e31 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016de8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016dee:	7c 41                	jl     c0016e31 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016df0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016df4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016df8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016dfc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016e00:	39 f9                	cmp    ecx,edi
c0016e02:	7e 22                	jle    c0016e26 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016e04:	83 c5 04             	add    ebp,0x4
c0016e07:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e0d:	7c 14                	jl     c0016e23 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016e0f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e11:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016e14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016e1c:	56                   	push   esi
c0016e1d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016e20:	83 c4 10             	add    esp,0x10
c0016e23:	47                   	inc    edi
c0016e24:	eb d2                	jmp    c0016df8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016e26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e2a:	43                   	inc    ebx
c0016e2b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016e2f:	eb ab                	jmp    c0016ddc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016e31:	83 c4 1c             	add    esp,0x1c
c0016e34:	5b                   	pop    ebx
c0016e35:	5e                   	pop    esi
c0016e36:	5f                   	pop    edi
c0016e37:	5d                   	pop    ebp
c0016e38:	c3                   	ret    
c0016e39:	90                   	nop

c0016e3a <Video::clearScreen(unsigned int)>:
c0016e3a:	57                   	push   edi
c0016e3b:	56                   	push   esi
c0016e3c:	53                   	push   ebx
c0016e3d:	31 db                	xor    ebx,ebx
c0016e3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e43:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016e49:	7e 1f                	jle    c0016e6a <Video::clearScreen(unsigned int)+0x30>
c0016e4b:	31 ff                	xor    edi,edi
c0016e4d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016e53:	7e 12                	jle    c0016e67 <Video::clearScreen(unsigned int)+0x2d>
c0016e55:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016e5b:	53                   	push   ebx
c0016e5c:	57                   	push   edi
c0016e5d:	47                   	inc    edi
c0016e5e:	56                   	push   esi
c0016e5f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016e62:	83 c4 10             	add    esp,0x10
c0016e65:	eb e6                	jmp    c0016e4d <Video::clearScreen(unsigned int)+0x13>
c0016e67:	43                   	inc    ebx
c0016e68:	eb d9                	jmp    c0016e43 <Video::clearScreen(unsigned int)+0x9>
c0016e6a:	5b                   	pop    ebx
c0016e6b:	5e                   	pop    esi
c0016e6c:	5f                   	pop    edi
c0016e6d:	c3                   	ret    

c0016e6e <Video::putpixel(int, int, unsigned int)>:
c0016e6e:	c7 44 24 04 f4 b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b1f4
c0016e76:	e9 84 30 00 00       	jmp    c0019eff <Krnl::panic(char const*)>
c0016e7b:	90                   	nop

c0016e7c <Video::Video(char const*)>:
c0016e7c:	83 ec 0c             	sub    esp,0xc
c0016e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e83:	83 ec 08             	sub    esp,0x8
c0016e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e8a:	50                   	push   eax
c0016e8b:	e8 40 cf ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0016e90:	83 c4 10             	add    esp,0x10
c0016e93:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0016e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e9c:	89 10                	mov    DWORD PTR [eax],edx
c0016e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ea2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016eac:	90                   	nop
c0016ead:	83 c4 0c             	add    esp,0xc
c0016eb0:	c3                   	ret    
c0016eb1:	90                   	nop

c0016eb2 <Video::~Video()>:
c0016eb2:	83 ec 0c             	sub    esp,0xc
c0016eb5:	ba 64 b2 02 c0       	mov    edx,0xc002b264
c0016eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ebe:	89 10                	mov    DWORD PTR [eax],edx
c0016ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ec4:	83 ec 0c             	sub    esp,0xc
c0016ec7:	50                   	push   eax
c0016ec8:	e8 cd cb ff ff       	call   c0013a9a <Device::~Device()>
c0016ecd:	83 c4 10             	add    esp,0x10
c0016ed0:	90                   	nop
c0016ed1:	83 c4 0c             	add    esp,0xc
c0016ed4:	c3                   	ret    
c0016ed5:	90                   	nop

c0016ed6 <Video::~Video()>:
c0016ed6:	83 ec 0c             	sub    esp,0xc
c0016ed9:	83 ec 0c             	sub    esp,0xc
c0016edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ee0:	e8 cd ff ff ff       	call   c0016eb2 <Video::~Video()>
c0016ee5:	83 c4 10             	add    esp,0x10
c0016ee8:	83 ec 08             	sub    esp,0x8
c0016eeb:	68 64 01 00 00       	push   0x164
c0016ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ef4:	e8 c2 b7 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0016ef9:	83 c4 10             	add    esp,0x10
c0016efc:	83 c4 0c             	add    esp,0xc
c0016eff:	c3                   	ret    

c0016f00 <Video::isMonochrome()>:
c0016f00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f04:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016f0a:	c3                   	ret    
c0016f0b:	90                   	nop

c0016f0c <Video::getWidth()>:
c0016f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f10:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f16:	c3                   	ret    
c0016f17:	90                   	nop

c0016f18 <Video::getHeight()>:
c0016f18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f1c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f22:	c3                   	ret    
c0016f23:	90                   	nop

c0016f24 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016f24:	55                   	push   ebp
c0016f25:	57                   	push   edi
c0016f26:	56                   	push   esi
c0016f27:	53                   	push   ebx
c0016f28:	83 ec 2c             	sub    esp,0x2c
c0016f2b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f2f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f33:	83 f8 01             	cmp    eax,0x1
c0016f36:	19 c9                	sbb    ecx,ecx
c0016f38:	31 db                	xor    ebx,ebx
c0016f3a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016f3e:	89 cd                	mov    ebp,ecx
c0016f40:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016f48:	f7 d5                	not    ebp
c0016f4a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016f50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016f54:	01 d8                	add    eax,ebx
c0016f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5a:	56                   	push   esi
c0016f5b:	e8 b8 ff ff ff       	call   c0016f18 <Video::getHeight()>
c0016f60:	59                   	pop    ecx
c0016f61:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016f65:	7e 70                	jle    c0016fd7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016f67:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f6b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f6f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016f72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016f76:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016f7a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f85:	89 f8                	mov    eax,edi
c0016f87:	83 c0 20             	add    eax,0x20
c0016f8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f8e:	56                   	push   esi
c0016f8f:	e8 78 ff ff ff       	call   c0016f0c <Video::getWidth()>
c0016f94:	5a                   	pop    edx
c0016f95:	39 c7                	cmp    edi,eax
c0016f97:	7d 34                	jge    c0016fcd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016f99:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016f9e:	74 05                	je     c0016fa5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016fa0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fa2:	55                   	push   ebp
c0016fa3:	eb 0d                	jmp    c0016fb2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016fa5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016faa:	74 12                	je     c0016fbe <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016fac:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016fb6:	57                   	push   edi
c0016fb7:	56                   	push   esi
c0016fb8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016fc2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016fc6:	47                   	inc    edi
c0016fc7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016fcb:	75 c1                	jne    c0016f8e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016fcd:	43                   	inc    ebx
c0016fce:	83 fb 20             	cmp    ebx,0x20
c0016fd1:	0f 85 79 ff ff ff    	jne    c0016f50 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016fd7:	83 c4 2c             	add    esp,0x2c
c0016fda:	5b                   	pop    ebx
c0016fdb:	5e                   	pop    esi
c0016fdc:	5f                   	pop    edi
c0016fdd:	5d                   	pop    ebp
c0016fde:	c3                   	ret    
c0016fdf:	90                   	nop

c0016fe0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016fe0:	55                   	push   ebp
c0016fe1:	57                   	push   edi
c0016fe2:	56                   	push   esi
c0016fe3:	53                   	push   ebx
c0016fe4:	83 ec 28             	sub    esp,0x28
c0016fe7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016feb:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016fef:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016ff3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016ff7:	c1 e6 08             	shl    esi,0x8
c0016ffa:	01 c6                	add    esi,eax
c0016ffc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017000:	c1 e0 08             	shl    eax,0x8
c0017003:	01 d0                	add    eax,edx
c0017005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017009:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001700d:	0f af c6             	imul   eax,esi
c0017010:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017017:	50                   	push   eax
c0017018:	e8 7c 85 ff ff       	call   c000f599 <malloc>
c001701d:	83 c4 10             	add    esp,0x10
c0017020:	89 c7                	mov    edi,eax
c0017022:	85 c0                	test   eax,eax
c0017024:	75 10                	jne    c0017036 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	68 15 b2 02 c0       	push   0xc002b215
c001702e:	e8 cc 2e 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0017039:	ba 12 00 00 00       	mov    edx,0x12
c001703e:	84 c0                	test   al,al
c0017040:	74 11                	je     c0017053 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0017042:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0017046:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001704a:	c1 fa 03             	sar    edx,0x3
c001704d:	0f af d1             	imul   edx,ecx
c0017050:	83 c2 12             	add    edx,0x12
c0017053:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017057:	74 04                	je     c001705d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0017059:	85 f6                	test   esi,esi
c001705b:	75 12                	jne    c001706f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	68 25 b2 02 c0       	push   0xc002b225
c0017065:	e8 29 b7 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001706a:	e9 b8 00 00 00       	jmp    c0017127 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001706f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0017073:	80 f9 02             	cmp    cl,0x2
c0017076:	0f 85 96 00 00 00    	jne    c0017112 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001707c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017081:	75 0e                	jne    c0017091 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017083:	84 c0                	test   al,al
c0017085:	75 0a                	jne    c0017091 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0017087:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001708a:	83 e8 18             	sub    eax,0x18
c001708d:	a8 f7                	test   al,0xf7
c001708f:	74 0a                	je     c001709b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0017091:	83 ec 0c             	sub    esp,0xc
c0017094:	68 3a b2 02 c0       	push   0xc002b23a
c0017099:	eb 7f                	jmp    c001711a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001709b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00170ab:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00170af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00170b7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00170bb:	75 0c                	jne    c00170c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00170bd:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00170c2:	c1 e0 18             	shl    eax,0x18
c00170c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170c9:	45                   	inc    ebp
c00170ca:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00170cf:	c1 e1 10             	shl    ecx,0x10
c00170d2:	89 c8                	mov    eax,ecx
c00170d4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00170d9:	c1 e1 08             	shl    ecx,0x8
c00170dc:	09 c1                	or     ecx,eax
c00170de:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00170e2:	09 c1                	or     ecx,eax
c00170e4:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00170e8:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00170ec:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00170f0:	c1 f8 03             	sar    eax,0x3
c00170f3:	01 c2                	add    edx,eax
c00170f5:	89 e8                	mov    eax,ebp
c00170f7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00170fb:	39 c6                	cmp    esi,eax
c00170fd:	7f b0                	jg     c00170af <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c00170ff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017103:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017107:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001710a:	7e 22                	jle    c001712e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001710c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017110:	eb 99                	jmp    c00170ab <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017112:	50                   	push   eax
c0017113:	50                   	push   eax
c0017114:	51                   	push   ecx
c0017115:	68 48 b2 02 c0       	push   0xc002b248
c001711a:	e8 74 b6 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001711f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017122:	e8 82 84 ff ff       	call   c000f5a9 <free>
c0017127:	83 c4 10             	add    esp,0x10
c001712a:	31 ff                	xor    edi,edi
c001712c:	eb 0f                	jmp    c001713d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001712e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017132:	89 30                	mov    DWORD PTR [eax],esi
c0017134:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017138:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001713b:	89 30                	mov    DWORD PTR [eax],esi
c001713d:	83 c4 1c             	add    esp,0x1c
c0017140:	89 f8                	mov    eax,edi
c0017142:	5b                   	pop    ebx
c0017143:	5e                   	pop    esi
c0017144:	5f                   	pop    edi
c0017145:	5d                   	pop    ebp
c0017146:	c3                   	ret    
c0017147:	90                   	nop

c0017148 <Video::putTGA(int, int, unsigned char*, int)>:
c0017148:	55                   	push   ebp
c0017149:	57                   	push   edi
c001714a:	56                   	push   esi
c001714b:	53                   	push   ebx
c001714c:	83 ec 28             	sub    esp,0x28
c001714f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017153:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017157:	50                   	push   eax
c0017158:	8d 44 24 18          	lea    eax,[esp+0x18]
c001715c:	50                   	push   eax
c001715d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017165:	56                   	push   esi
c0017166:	e8 75 fe ff ff       	call   c0016fe0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001716b:	83 c4 20             	add    esp,0x20
c001716e:	85 c0                	test   eax,eax
c0017170:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017174:	74 35                	je     c00171ab <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017176:	89 c7                	mov    edi,eax
c0017178:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001717c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017180:	39 d8                	cmp    eax,ebx
c0017182:	7e 27                	jle    c00171ab <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017184:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017188:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001718c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017190:	39 e8                	cmp    eax,ebp
c0017192:	7e 14                	jle    c00171a8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017194:	8b 06                	mov    eax,DWORD PTR [esi]
c0017196:	83 c7 04             	add    edi,0x4
c0017199:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001719c:	53                   	push   ebx
c001719d:	55                   	push   ebp
c001719e:	45                   	inc    ebp
c001719f:	56                   	push   esi
c00171a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00171a3:	83 c4 10             	add    esp,0x10
c00171a6:	eb e0                	jmp    c0017188 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00171a8:	43                   	inc    ebx
c00171a9:	eb cd                	jmp    c0017178 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00171ab:	83 c4 1c             	add    esp,0x1c
c00171ae:	5b                   	pop    ebx
c00171af:	5e                   	pop    esi
c00171b0:	5f                   	pop    edi
c00171b1:	5d                   	pop    ebp
c00171b2:	c3                   	ret    
c00171b3:	90                   	nop

c00171b4 <ACPI::close(int, int, void*)>:
c00171b4:	83 ec 1c             	sub    esp,0x1c
c00171b7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00171bf:	74 0a                	je     c00171cb <ACPI::close(int, int, void*)+0x17>
c00171c1:	b8 00 00 00 00       	mov    eax,0x0
c00171c6:	e9 8a 00 00 00       	jmp    c0017255 <ACPI::close(int, int, void*)+0xa1>
c00171cb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00171d0:	75 27                	jne    c00171f9 <ACPI::close(int, int, void*)+0x45>
c00171d2:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c00171d7:	85 c0                	test   eax,eax
c00171d9:	74 07                	je     c00171e2 <ACPI::close(int, int, void*)+0x2e>
c00171db:	a1 a8 01 03 c0       	mov    eax,ds:0xc00301a8
c00171e0:	ff d0                	call   eax
c00171e2:	83 ec 0c             	sub    esp,0xc
c00171e5:	68 a4 b2 02 c0       	push   0xc002b2a4
c00171ea:	e8 10 2d 00 00       	call   c0019eff <Krnl::panic(char const*)>
c00171ef:	83 c4 10             	add    esp,0x10
c00171f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00171f7:	eb 5c                	jmp    c0017255 <ACPI::close(int, int, void*)+0xa1>
c00171f9:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00171fe:	75 50                	jne    c0017250 <ACPI::close(int, int, void*)+0x9c>
c0017200:	a1 a4 01 03 c0       	mov    eax,ds:0xc00301a4
c0017205:	85 c0                	test   eax,eax
c0017207:	74 07                	je     c0017210 <ACPI::close(int, int, void*)+0x5c>
c0017209:	a1 a4 01 03 c0       	mov    eax,ds:0xc00301a4
c001720e:	ff d0                	call   eax
c0017210:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017215:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001721a:	83 e0 02             	and    eax,0x2
c001721d:	74 1c                	je     c001723b <ACPI::close(int, int, void*)+0x87>
c001721f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722a:	89 c2                	mov    edx,eax
c001722c:	ec                   	in     al,dx
c001722d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017231:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017235:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017239:	eb da                	jmp    c0017215 <ACPI::close(int, int, void*)+0x61>
c001723b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017242:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017247:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001724b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001724f:	ee                   	out    dx,al
c0017250:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017255:	83 c4 1c             	add    esp,0x1c
c0017258:	c3                   	ret    

c0017259 <findRSDP()>:
c0017259:	83 ec 1c             	sub    esp,0x1c
c001725c:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017261:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017267:	83 e0 04             	and    eax,0x4
c001726a:	84 c0                	test   al,al
c001726c:	75 07                	jne    c0017275 <findRSDP()+0x1c>
c001726e:	b8 00 00 00 00       	mov    eax,0x0
c0017273:	eb 6a                	jmp    c00172df <findRSDP()+0x86>
c0017275:	a1 54 db 02 c0       	mov    eax,ds:0xc002db54
c001727a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001727f:	7f 1b                	jg     c001729c <findRSDP()+0x43>
c0017281:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017286:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001728c:	83 e2 fb             	and    edx,0xfffffffb
c001728f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017295:	b8 00 00 00 00       	mov    eax,0x0
c001729a:	eb 43                	jmp    c00172df <findRSDP()+0x86>
c001729c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00172a4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00172ac:	77 2c                	ja     c00172da <findRSDP()+0x81>
c00172ae:	83 ec 04             	sub    esp,0x4
c00172b1:	6a 08                	push   0x8
c00172b3:	68 3f b3 02 c0       	push   0xc002b33f
c00172b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172bc:	e8 8b 93 fe ff       	call   c000064c <memcmp>
c00172c1:	83 c4 10             	add    esp,0x10
c00172c4:	85 c0                	test   eax,eax
c00172c6:	0f 94 c0             	sete   al
c00172c9:	84 c0                	test   al,al
c00172cb:	74 06                	je     c00172d3 <findRSDP()+0x7a>
c00172cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172d1:	eb 0c                	jmp    c00172df <findRSDP()+0x86>
c00172d3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00172d8:	eb ca                	jmp    c00172a4 <findRSDP()+0x4b>
c00172da:	b8 00 00 00 00       	mov    eax,0x0
c00172df:	83 c4 1c             	add    esp,0x1c
c00172e2:	c3                   	ret    

c00172e3 <loadACPITables(unsigned char*)>:
c00172e3:	57                   	push   edi
c00172e4:	56                   	push   esi
c00172e5:	53                   	push   ebx
c00172e6:	83 ec 60             	sub    esp,0x60
c00172e9:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00172ee:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172f4:	83 e0 04             	and    eax,0x4
c00172f7:	84 c0                	test   al,al
c00172f9:	0f 84 33 02 00 00    	je     c0017532 <loadACPITables(unsigned char*)+0x24f>
c00172ff:	a0 c0 03 03 c0       	mov    al,ds:0xc00303c0
c0017304:	84 c0                	test   al,al
c0017306:	74 75                	je     c001737d <loadACPITables(unsigned char*)+0x9a>
c0017308:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001730c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017310:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017314:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017317:	83 e8 24             	sub    eax,0x24
c001731a:	c1 e8 03             	shr    eax,0x3
c001731d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017321:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017329:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001732d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017331:	0f 8d b2 00 00 00    	jge    c00173e9 <loadACPITables(unsigned char*)+0x106>
c0017337:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001733b:	83 c0 24             	add    eax,0x24
c001733e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017342:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017346:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001734a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001734e:	c1 e0 03             	shl    eax,0x3
c0017351:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017355:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017359:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001735c:	8b 00                	mov    eax,DWORD PTR [eax]
c001735e:	89 c1                	mov    ecx,eax
c0017360:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c0017365:	8d 50 01             	lea    edx,[eax+0x1]
c0017368:	89 15 ac 01 03 c0    	mov    DWORD PTR ds:0xc00301ac,edx
c001736e:	89 ca                	mov    edx,ecx
c0017370:	89 14 c5 c4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe3c],edx
c0017377:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001737b:	eb ac                	jmp    c0017329 <loadACPITables(unsigned char*)+0x46>
c001737d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017381:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017389:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001738c:	83 e8 24             	sub    eax,0x24
c001738f:	c1 e8 02             	shr    eax,0x2
c0017392:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017396:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001739e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00173a2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00173a6:	7d 41                	jge    c00173e9 <loadACPITables(unsigned char*)+0x106>
c00173a8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00173ac:	83 c0 24             	add    eax,0x24
c00173af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00173b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173b7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00173bb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00173bf:	c1 e0 02             	shl    eax,0x2
c00173c2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00173c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173cc:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c00173d1:	8d 50 01             	lea    edx,[eax+0x1]
c00173d4:	89 15 ac 01 03 c0    	mov    DWORD PTR ds:0xc00301ac,edx
c00173da:	89 ca                	mov    edx,ecx
c00173dc:	89 14 c5 c4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe3c],edx
c00173e3:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00173e7:	eb b5                	jmp    c001739e <loadACPITables(unsigned char*)+0xbb>
c00173e9:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00173f1:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c00173f6:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00173fa:	0f 8d 33 01 00 00    	jge    c0017533 <loadACPITables(unsigned char*)+0x250>
c0017400:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017404:	8b 04 c5 c4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe3c]
c001740b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001740f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017413:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017417:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001741b:	25 ff 0f 00 00       	and    eax,0xfff
c0017420:	89 c6                	mov    esi,eax
c0017422:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	6a 01                	push   0x1
c001742d:	e8 ed 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017439:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001743f:	83 ec 0c             	sub    esp,0xc
c0017442:	6a 01                	push   0x1
c0017444:	6a 01                	push   0x1
c0017446:	50                   	push   eax
c0017447:	52                   	push   edx
c0017448:	53                   	push   ebx
c0017449:	e8 1a a9 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001744e:	83 c4 20             	add    esp,0x20
c0017451:	09 f0                	or     eax,esi
c0017453:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017457:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001745b:	c1 e0 03             	shl    eax,0x3
c001745e:	05 c0 01 03 c0       	add    eax,0xc00301c0
c0017463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001746b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001746f:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001747b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001747f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017483:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001748b:	89 c6                	mov    esi,eax
c001748d:	89 d7                	mov    edi,edx
c001748f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017491:	89 c8                	mov    eax,ecx
c0017493:	89 fa                	mov    edx,edi
c0017495:	89 f3                	mov    ebx,esi
c0017497:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001749b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001749f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174b2:	05 00 10 00 00       	add    eax,0x1000
c00174b7:	c1 e8 0c             	shr    eax,0xc
c00174ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00174c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174ca:	25 ff 0f 00 00       	and    eax,0xfff
c00174cf:	89 c6                	mov    esi,eax
c00174d1:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c00174d7:	83 ec 0c             	sub    esp,0xc
c00174da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00174de:	e8 3c 9d ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00174ea:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	6a 01                	push   0x1
c00174f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00174f9:	50                   	push   eax
c00174fa:	52                   	push   edx
c00174fb:	53                   	push   ebx
c00174fc:	e8 67 a8 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017501:	83 c4 20             	add    esp,0x20
c0017504:	09 f0                	or     eax,esi
c0017506:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001750a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001750e:	83 ec 0c             	sub    esp,0xc
c0017511:	50                   	push   eax
c0017512:	e8 e4 a1 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001751e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017522:	89 14 c5 c4 01 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfe3c],edx
c0017529:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001752d:	e9 bf fe ff ff       	jmp    c00173f1 <loadACPITables(unsigned char*)+0x10e>
c0017532:	90                   	nop
c0017533:	83 c4 60             	add    esp,0x60
c0017536:	5b                   	pop    ebx
c0017537:	5e                   	pop    esi
c0017538:	5f                   	pop    edi
c0017539:	c3                   	ret    

c001753a <findRSDT(unsigned char*)>:
c001753a:	57                   	push   edi
c001753b:	56                   	push   esi
c001753c:	53                   	push   ebx
c001753d:	83 ec 50             	sub    esp,0x50
c0017540:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017545:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001754b:	83 e0 04             	and    eax,0x4
c001754e:	84 c0                	test   al,al
c0017550:	75 0a                	jne    c001755c <findRSDT(unsigned char*)+0x22>
c0017552:	b8 00 00 00 00       	mov    eax,0x0
c0017557:	e9 21 01 00 00       	jmp    c001767d <findRSDT(unsigned char*)+0x143>
c001755c:	89 e0                	mov    eax,esp
c001755e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017562:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017566:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001756a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017572:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017576:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001757a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001757e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017582:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017586:	89 c6                	mov    esi,eax
c0017588:	89 d7                	mov    edi,edx
c001758a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001758c:	89 c8                	mov    eax,ecx
c001758e:	89 fa                	mov    edx,edi
c0017590:	89 f3                	mov    ebx,esi
c0017592:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017596:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001759a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001759e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00175a2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00175a6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00175ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175be:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00175c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00175c6:	25 ff 0f 00 00       	and    eax,0xfff
c00175cb:	89 c6                	mov    esi,eax
c00175cd:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c00175d3:	83 ec 0c             	sub    esp,0xc
c00175d6:	6a 02                	push   0x2
c00175d8:	e8 42 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c00175dd:	83 c4 10             	add    esp,0x10
c00175e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00175e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175ea:	83 ec 0c             	sub    esp,0xc
c00175ed:	6a 01                	push   0x1
c00175ef:	6a 02                	push   0x2
c00175f1:	50                   	push   eax
c00175f2:	52                   	push   edx
c00175f3:	53                   	push   ebx
c00175f4:	e8 6f a7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175f9:	83 c4 20             	add    esp,0x20
c00175fc:	09 f0                	or     eax,esi
c00175fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017602:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017606:	25 ff 0f 00 00       	and    eax,0xfff
c001760b:	89 c6                	mov    esi,eax
c001760d:	8b 1d 70 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc70
c0017613:	83 ec 0c             	sub    esp,0xc
c0017616:	6a 02                	push   0x2
c0017618:	e8 02 9c ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001761d:	83 c4 10             	add    esp,0x10
c0017620:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017624:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001762a:	83 ec 0c             	sub    esp,0xc
c001762d:	6a 01                	push   0x1
c001762f:	6a 02                	push   0x2
c0017631:	50                   	push   eax
c0017632:	52                   	push   edx
c0017633:	53                   	push   ebx
c0017634:	e8 2f a7 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017639:	83 c4 20             	add    esp,0x20
c001763c:	09 f0                	or     eax,esi
c001763e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017642:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017647:	75 11                	jne    c001765a <findRSDT(unsigned char*)+0x120>
c0017649:	c6 05 c0 03 03 c0 00 	mov    BYTE PTR ds:0xc00303c0,0x0
c0017650:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017654:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017658:	eb 1f                	jmp    c0017679 <findRSDT(unsigned char*)+0x13f>
c001765a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001765f:	75 11                	jne    c0017672 <findRSDT(unsigned char*)+0x138>
c0017661:	c6 05 c0 03 03 c0 01 	mov    BYTE PTR ds:0xc00303c0,0x1
c0017668:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001766c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017670:	eb 07                	jmp    c0017679 <findRSDT(unsigned char*)+0x13f>
c0017672:	b8 00 00 00 00       	mov    eax,0x0
c0017677:	eb 04                	jmp    c001767d <findRSDT(unsigned char*)+0x143>
c0017679:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001767d:	83 c4 50             	add    esp,0x50
c0017680:	5b                   	pop    ebx
c0017681:	5e                   	pop    esi
c0017682:	5f                   	pop    edi
c0017683:	c3                   	ret    

c0017684 <findDataTable(unsigned char*, char*)>:
c0017684:	83 ec 1c             	sub    esp,0x1c
c0017687:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001768c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017692:	83 e0 04             	and    eax,0x4
c0017695:	84 c0                	test   al,al
c0017697:	75 07                	jne    c00176a0 <findDataTable(unsigned char*, char*)+0x1c>
c0017699:	b8 00 00 00 00       	mov    eax,0x0
c001769e:	eb 52                	jmp    c00176f2 <findDataTable(unsigned char*, char*)+0x6e>
c00176a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00176a8:	a1 ac 01 03 c0       	mov    eax,ds:0xc00301ac
c00176ad:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00176b1:	7d 3a                	jge    c00176ed <findDataTable(unsigned char*, char*)+0x69>
c00176b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b7:	c1 e0 03             	shl    eax,0x3
c00176ba:	05 c0 01 03 c0       	add    eax,0xc00301c0
c00176bf:	83 ec 04             	sub    esp,0x4
c00176c2:	6a 04                	push   0x4
c00176c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00176c8:	50                   	push   eax
c00176c9:	e8 7e 8f fe ff       	call   c000064c <memcmp>
c00176ce:	83 c4 10             	add    esp,0x10
c00176d1:	85 c0                	test   eax,eax
c00176d3:	0f 94 c0             	sete   al
c00176d6:	84 c0                	test   al,al
c00176d8:	74 0d                	je     c00176e7 <findDataTable(unsigned char*, char*)+0x63>
c00176da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176de:	8b 04 c5 c4 01 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfe3c]
c00176e5:	eb 0b                	jmp    c00176f2 <findDataTable(unsigned char*, char*)+0x6e>
c00176e7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00176eb:	eb bb                	jmp    c00176a8 <findDataTable(unsigned char*, char*)+0x24>
c00176ed:	b8 00 00 00 00       	mov    eax,0x0
c00176f2:	83 c4 1c             	add    esp,0x1c
c00176f5:	c3                   	ret    

c00176f6 <scanMADT()>:
c00176f6:	53                   	push   ebx
c00176f7:	83 ec 38             	sub    esp,0x38
c00176fa:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00176ff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017705:	83 e0 04             	and    eax,0x4
c0017708:	84 c0                	test   al,al
c001770a:	0f 84 4a 04 00 00    	je     c0017b5a <scanMADT()+0x464>
c0017710:	e8 44 fb ff ff       	call   c0017259 <findRSDP()>
c0017715:	a3 cc 03 03 c0       	mov    ds:0xc00303cc,eax
c001771a:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c001771f:	85 c0                	test   eax,eax
c0017721:	75 19                	jne    c001773c <scanMADT()+0x46>
c0017723:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017728:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001772e:	83 e2 fb             	and    edx,0xfffffffb
c0017731:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017737:	e9 22 04 00 00       	jmp    c0017b5e <scanMADT()+0x468>
c001773c:	a1 cc 03 03 c0       	mov    eax,ds:0xc00303cc
c0017741:	83 ec 0c             	sub    esp,0xc
c0017744:	50                   	push   eax
c0017745:	e8 f0 fd ff ff       	call   c001753a <findRSDT(unsigned char*)>
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	a3 c8 03 03 c0       	mov    ds:0xc00303c8,eax
c0017752:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c0017757:	85 c0                	test   eax,eax
c0017759:	75 19                	jne    c0017774 <scanMADT()+0x7e>
c001775b:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017760:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017766:	83 e2 fb             	and    edx,0xfffffffb
c0017769:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001776f:	e9 ea 03 00 00       	jmp    c0017b5e <scanMADT()+0x468>
c0017774:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	50                   	push   eax
c001777d:	e8 61 fb ff ff       	call   c00172e3 <loadACPITables(unsigned char*)>
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c001778a:	83 ec 08             	sub    esp,0x8
c001778d:	68 48 b3 02 c0       	push   0xc002b348
c0017792:	50                   	push   eax
c0017793:	e8 ec fe ff ff       	call   c0017684 <findDataTable(unsigned char*, char*)>
c0017798:	83 c4 10             	add    esp,0x10
c001779b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001779f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00177a4:	75 19                	jne    c00177bf <scanMADT()+0xc9>
c00177a6:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00177ab:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177b1:	83 e2 fe             	and    edx,0xfffffffe
c00177b4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177ba:	e9 9f 03 00 00       	jmp    c0017b5e <scanMADT()+0x468>
c00177bf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00177c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177ce:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00177d2:	0f 87 86 03 00 00    	ja     c0017b5e <scanMADT()+0x468>
c00177d8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00177e0:	0f 87 78 03 00 00    	ja     c0017b5e <scanMADT()+0x468>
c00177e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00177ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177f2:	8d 50 01             	lea    edx,[eax+0x1]
c00177f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017801:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017805:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017809:	8d 50 01             	lea    edx,[eax+0x1]
c001780c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017810:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017814:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017818:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001781c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017821:	0f 86 36 03 00 00    	jbe    c0017b5d <scanMADT()+0x467>
c0017827:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001782c:	75 57                	jne    c0017885 <scanMADT()+0x18f>
c001782e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017832:	8d 50 01             	lea    edx,[eax+0x1]
c0017835:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017839:	8a 15 c0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305c0
c001783f:	0f b6 d2             	movzx  edx,dl
c0017842:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017846:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001784a:	88 82 00 06 03 c0    	mov    BYTE PTR [edx-0x3ffcfa00],al
c0017850:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017854:	8d 50 01             	lea    edx,[eax+0x1]
c0017857:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001785b:	8a 15 c0 05 03 c0    	mov    dl,BYTE PTR ds:0xc00305c0
c0017861:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017864:	88 0d c0 05 03 c0    	mov    BYTE PTR ds:0xc00305c0,cl
c001786a:	0f b6 d2             	movzx  edx,dl
c001786d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017871:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017875:	88 82 e0 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfa20],al
c001787b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017880:	e9 c1 02 00 00       	jmp    c0017b46 <scanMADT()+0x450>
c0017885:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001788a:	0f 85 14 01 00 00    	jne    c00179a4 <scanMADT()+0x2ae>
c0017890:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017894:	8d 50 01             	lea    edx,[eax+0x1]
c0017897:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001789b:	8a 15 80 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030480
c00178a1:	0f b6 d2             	movzx  edx,dl
c00178a4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178a8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00178ac:	88 82 a0 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfb60],al
c00178b2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00178b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178be:	01 d0                	add    eax,edx
c00178c0:	83 c0 2c             	add    eax,0x2c
c00178c3:	8a 00                	mov    al,BYTE PTR [eax]
c00178c5:	0f b6 d0             	movzx  edx,al
c00178c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178cc:	8d 48 01             	lea    ecx,[eax+0x1]
c00178cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00178d7:	0f b6 c0             	movzx  eax,al
c00178da:	c1 e0 08             	shl    eax,0x8
c00178dd:	89 d1                	mov    ecx,edx
c00178df:	09 c1                	or     ecx,eax
c00178e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178e5:	8d 50 02             	lea    edx,[eax+0x2]
c00178e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00178f0:	0f b6 c0             	movzx  eax,al
c00178f3:	c1 e0 10             	shl    eax,0x10
c00178f6:	09 c1                	or     ecx,eax
c00178f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178fc:	8d 50 03             	lea    edx,[eax+0x3]
c00178ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017903:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017907:	0f b6 c0             	movzx  eax,al
c001790a:	c1 e0 18             	shl    eax,0x18
c001790d:	09 c1                	or     ecx,eax
c001790f:	89 ca                	mov    edx,ecx
c0017911:	a0 80 04 03 c0       	mov    al,ds:0xc0030480
c0017916:	0f b6 c0             	movzx  eax,al
c0017919:	89 14 85 c0 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb40],edx
c0017920:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017925:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017929:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792d:	01 d0                	add    eax,edx
c001792f:	83 c0 2c             	add    eax,0x2c
c0017932:	8a 00                	mov    al,BYTE PTR [eax]
c0017934:	0f b6 d0             	movzx  edx,al
c0017937:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001793b:	8d 48 01             	lea    ecx,[eax+0x1]
c001793e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017942:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017946:	0f b6 c0             	movzx  eax,al
c0017949:	c1 e0 08             	shl    eax,0x8
c001794c:	89 d1                	mov    ecx,edx
c001794e:	09 c1                	or     ecx,eax
c0017950:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017954:	8d 50 02             	lea    edx,[eax+0x2]
c0017957:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001795f:	0f b6 c0             	movzx  eax,al
c0017962:	c1 e0 10             	shl    eax,0x10
c0017965:	09 c1                	or     ecx,eax
c0017967:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001796b:	8d 50 03             	lea    edx,[eax+0x3]
c001796e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017972:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017976:	0f b6 c0             	movzx  eax,al
c0017979:	c1 e0 18             	shl    eax,0x18
c001797c:	09 c1                	or     ecx,eax
c001797e:	89 ca                	mov    edx,ecx
c0017980:	a0 80 04 03 c0       	mov    al,ds:0xc0030480
c0017985:	0f b6 c0             	movzx  eax,al
c0017988:	89 14 85 40 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfac0],edx
c001798f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017994:	a0 80 04 03 c0       	mov    al,ds:0xc0030480
c0017999:	40                   	inc    eax
c001799a:	a2 80 04 03 c0       	mov    ds:0xc0030480,al
c001799f:	e9 a2 01 00 00       	jmp    c0017b46 <scanMADT()+0x450>
c00179a4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00179a9:	0f 85 e9 00 00 00    	jne    c0017a98 <scanMADT()+0x3a2>
c00179af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179b3:	8d 50 01             	lea    edx,[eax+0x1]
c00179b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179c2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00179c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179ca:	8d 50 01             	lea    edx,[eax+0x1]
c00179cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00179dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e5:	01 d0                	add    eax,edx
c00179e7:	83 c0 2c             	add    eax,0x2c
c00179ea:	8a 00                	mov    al,BYTE PTR [eax]
c00179ec:	0f b6 d0             	movzx  edx,al
c00179ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00179f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179fe:	0f b6 c0             	movzx  eax,al
c0017a01:	c1 e0 08             	shl    eax,0x8
c0017a04:	89 d1                	mov    ecx,edx
c0017a06:	09 c1                	or     ecx,eax
c0017a08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a0c:	8d 50 02             	lea    edx,[eax+0x2]
c0017a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a13:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a17:	0f b6 c0             	movzx  eax,al
c0017a1a:	c1 e0 10             	shl    eax,0x10
c0017a1d:	09 c1                	or     ecx,eax
c0017a1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a23:	8d 50 03             	lea    edx,[eax+0x3]
c0017a26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a2e:	0f b6 c0             	movzx  eax,al
c0017a31:	c1 e0 18             	shl    eax,0x18
c0017a34:	09 c8                	or     eax,ecx
c0017a36:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a3a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a47:	01 d0                	add    eax,edx
c0017a49:	83 c0 2c             	add    eax,0x2c
c0017a4c:	8a 00                	mov    al,BYTE PTR [eax]
c0017a4e:	0f b6 c0             	movzx  eax,al
c0017a51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017a55:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a5c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017a60:	0f b6 d2             	movzx  edx,dl
c0017a63:	c1 e2 08             	shl    edx,0x8
c0017a66:	09 d0                	or     eax,edx
c0017a68:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017a6d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a72:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017a77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a7b:	88 90 60 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd32a0],dl
c0017a81:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017a86:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017a8b:	66 89 84 12 60 04 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfba0],ax
c0017a93:	e9 ae 00 00 00       	jmp    c0017b46 <scanMADT()+0x450>
c0017a98:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017a9d:	0f 85 97 00 00 00    	jne    c0017b3a <scanMADT()+0x444>
c0017aa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0017aaa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ab2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ab6:	0f b6 c0             	movzx  eax,al
c0017ab9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017abd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ac1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac5:	01 d0                	add    eax,edx
c0017ac7:	83 c0 2c             	add    eax,0x2c
c0017aca:	8a 00                	mov    al,BYTE PTR [eax]
c0017acc:	0f b6 d0             	movzx  edx,al
c0017acf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ad6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ada:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ade:	0f b6 c0             	movzx  eax,al
c0017ae1:	c1 e0 08             	shl    eax,0x8
c0017ae4:	09 d0                	or     eax,edx
c0017ae6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017aea:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017aef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af3:	8d 50 01             	lea    edx,[eax+0x1]
c0017af6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017afa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017afe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b02:	0f b6 c0             	movzx  eax,al
c0017b05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b0d:	c1 e0 08             	shl    eax,0x8
c0017b10:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017b14:	89 c1                	mov    ecx,eax
c0017b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b1a:	c1 e0 18             	shl    eax,0x18
c0017b1d:	89 c3                	mov    ebx,eax
c0017b1f:	a1 d0 03 03 c0       	mov    eax,ds:0xc00303d0
c0017b24:	8d 50 01             	lea    edx,[eax+0x1]
c0017b27:	89 15 d0 03 03 c0    	mov    DWORD PTR ds:0xc00303d0,edx
c0017b2d:	09 d9                	or     ecx,ebx
c0017b2f:	89 ca                	mov    edx,ecx
c0017b31:	89 14 85 e0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc20],edx
c0017b38:	eb 0c                	jmp    c0017b46 <scanMADT()+0x450>
c0017b3a:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017b3f:	75 05                	jne    c0017b46 <scanMADT()+0x450>
c0017b41:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017b46:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017b4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b4f:	01 d0                	add    eax,edx
c0017b51:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b55:	e9 6d fc ff ff       	jmp    c00177c7 <scanMADT()+0xd1>
c0017b5a:	90                   	nop
c0017b5b:	eb 01                	jmp    c0017b5e <scanMADT()+0x468>
c0017b5d:	90                   	nop
c0017b5e:	83 c4 38             	add    esp,0x38
c0017b61:	5b                   	pop    ebx
c0017b62:	c3                   	ret    
c0017b63:	90                   	nop

c0017b64 <ACPI::ACPI()>:
c0017b64:	83 ec 0c             	sub    esp,0xc
c0017b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b6b:	83 ec 08             	sub    esp,0x8
c0017b6e:	68 4d b3 02 c0       	push   0xc002b34d
c0017b73:	50                   	push   eax
c0017b74:	e8 57 c2 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c0017b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b85:	89 10                	mov    DWORD PTR [eax],edx
c0017b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b96:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017bae:	e8 43 fb ff ff       	call   c00176f6 <scanMADT()>
c0017bb3:	90                   	nop
c0017bb4:	83 c4 0c             	add    esp,0xc
c0017bb7:	c3                   	ret    

c0017bb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017bb8:	83 ec 2c             	sub    esp,0x2c
c0017bbb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017bbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017bc3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017bc7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017bcb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017bd0:	88 d0                	mov    al,dl
c0017bd2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bd6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017bdb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017be3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017be7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bed:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017bf1:	0f 8d 97 00 00 00    	jge    c0017c8e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017bf7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bff:	83 c2 2a             	add    edx,0x2a
c0017c02:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017c06:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017c0b:	75 78                	jne    c0017c85 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c15:	83 c2 2a             	add    edx,0x2a
c0017c18:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017c1c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017c20:	75 63                	jne    c0017c85 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017c22:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c27:	74 3a                	je     c0017c63 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017c29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c31:	83 c2 2a             	add    edx,0x2a
c0017c34:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017c38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c3f:	39 c2                	cmp    edx,eax
c0017c41:	74 10                	je     c0017c53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017c43:	83 ec 0c             	sub    esp,0xc
c0017c46:	68 c8 b2 02 c0       	push   0xc002b2c8
c0017c4b:	e8 af 22 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017c50:	83 c4 10             	add    esp,0x10
c0017c53:	83 ec 0c             	sub    esp,0xc
c0017c56:	68 52 b3 02 c0       	push   0xc002b352
c0017c5b:	e8 9f 22 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017c60:	83 c4 10             	add    esp,0x10
c0017c63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017c67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c6f:	83 c2 2a             	add    edx,0x2a
c0017c72:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017c76:	8b 02                	mov    eax,DWORD PTR [edx]
c0017c78:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017c7b:	89 01                	mov    DWORD PTR [ecx],eax
c0017c7d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017c80:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017c85:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017c89:	e9 55 ff ff ff       	jmp    c0017be3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017c8e:	90                   	nop
c0017c8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c93:	83 c4 2c             	add    esp,0x2c
c0017c96:	c2 04 00             	ret    0x4
c0017c99:	90                   	nop

c0017c9a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017c9a:	83 ec 1c             	sub    esp,0x1c
c0017c9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ca1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ca5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ca9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017cae:	88 c8                	mov    al,cl
c0017cb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017cb4:	88 d0                	mov    al,dl
c0017cb6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cbe:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ccb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ccf:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cd7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017cdd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ce1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ce8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cf1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017cf7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017cfb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d02:	83 c2 2a             	add    edx,0x2a
c0017d05:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d0d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d17:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017d1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017d1e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d26:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d33:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017d39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d3d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d43:	3d 00 02 00 00       	cmp    eax,0x200
c0017d48:	75 10                	jne    c0017d5a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	68 61 b3 02 c0       	push   0xc002b361
c0017d52:	e8 a8 21 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017d57:	83 c4 10             	add    esp,0x10
c0017d5a:	90                   	nop
c0017d5b:	83 c4 1c             	add    esp,0x1c
c0017d5e:	c3                   	ret    
c0017d5f:	90                   	nop

c0017d60 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017d60:	b8 00 00 00 00       	mov    eax,0x0
c0017d65:	c3                   	ret    

c0017d66 <ACPI::detectPCI()>:
c0017d66:	53                   	push   ebx
c0017d67:	83 ec 28             	sub    esp,0x28
c0017d6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017d6f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017d74:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017d79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d7f:	83 e0 04             	and    eax,0x4
c0017d82:	84 c0                	test   al,al
c0017d84:	74 2b                	je     c0017db1 <ACPI::detectPCI()+0x4b>
c0017d86:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c0017d8b:	83 ec 08             	sub    esp,0x8
c0017d8e:	68 7e b3 02 c0       	push   0xc002b37e
c0017d93:	50                   	push   eax
c0017d94:	e8 eb f8 ff ff       	call   c0017684 <findDataTable(unsigned char*, char*)>
c0017d99:	83 c4 10             	add    esp,0x10
c0017d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017da0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017da5:	74 0a                	je     c0017db1 <ACPI::detectPCI()+0x4b>
c0017da7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017dac:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017db1:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017db9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017dbd:	8a 00                	mov    al,BYTE PTR [eax]
c0017dbf:	3c 01                	cmp    al,0x1
c0017dc1:	75 0c                	jne    c0017dcf <ACPI::detectPCI()+0x69>
c0017dc3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017dc8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017dcd:	eb 26                	jmp    c0017df5 <ACPI::detectPCI()+0x8f>
c0017dcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017dd3:	8a 00                	mov    al,BYTE PTR [eax]
c0017dd5:	3c 02                	cmp    al,0x2
c0017dd7:	75 1c                	jne    c0017df5 <ACPI::detectPCI()+0x8f>
c0017dd9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017dde:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017de3:	74 10                	je     c0017df5 <ACPI::detectPCI()+0x8f>
c0017de5:	83 ec 0c             	sub    esp,0xc
c0017de8:	68 f8 b2 02 c0       	push   0xc002b2f8
c0017ded:	e8 0d 21 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017df9:	83 f0 01             	xor    eax,0x1
c0017dfc:	84 c0                	test   al,al
c0017dfe:	74 3f                	je     c0017e3f <ACPI::detectPCI()+0xd9>
c0017e00:	e8 4b 83 fe ff       	call   c0000150 <manualPCIProbe>
c0017e05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017e09:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e0e:	75 0c                	jne    c0017e1c <ACPI::detectPCI()+0xb6>
c0017e10:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e15:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017e1a:	eb 23                	jmp    c0017e3f <ACPI::detectPCI()+0xd9>
c0017e1c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017e21:	75 1c                	jne    c0017e3f <ACPI::detectPCI()+0xd9>
c0017e23:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e28:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017e2d:	74 10                	je     c0017e3f <ACPI::detectPCI()+0xd9>
c0017e2f:	83 ec 0c             	sub    esp,0xc
c0017e32:	68 f8 b2 02 c0       	push   0xc002b2f8
c0017e37:	e8 c3 20 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0017e3c:	83 c4 10             	add    esp,0x10
c0017e3f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e44:	74 7e                	je     c0017ec4 <ACPI::detectPCI()+0x15e>
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	68 83 b3 02 c0       	push   0xc002b383
c0017e4e:	e8 a0 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017e5e:	83 ec 0c             	sub    esp,0xc
c0017e61:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e65:	e8 2f 77 ff ff       	call   c000f599 <malloc>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	89 c3                	mov    ebx,eax
c0017e6f:	83 ec 0c             	sub    esp,0xc
c0017e72:	53                   	push   ebx
c0017e73:	e8 b2 a5 00 00       	call   c002242a <PCI::PCI()>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017e7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e83:	83 ec 08             	sub    esp,0x8
c0017e86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e8a:	50                   	push   eax
c0017e8b:	e8 3c bd ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e99:	83 c0 08             	add    eax,0x8
c0017e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e9e:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017ea3:	74 07                	je     c0017eac <ACPI::detectPCI()+0x146>
c0017ea5:	ba 01 00 00 00       	mov    edx,0x1
c0017eaa:	eb 05                	jmp    c0017eb1 <ACPI::detectPCI()+0x14b>
c0017eac:	ba 02 00 00 00       	mov    edx,0x2
c0017eb1:	6a 00                	push   0x0
c0017eb3:	6a 00                	push   0x0
c0017eb5:	52                   	push   edx
c0017eb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017eba:	ff d0                	call   eax
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	e9 9e 00 00 00       	jmp    c0017f62 <ACPI::detectPCI()+0x1fc>
c0017ec4:	83 ec 0c             	sub    esp,0xc
c0017ec7:	68 9b b3 02 c0       	push   0xc002b39b
c0017ecc:	e8 c2 a8 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0017ed1:	83 c4 10             	add    esp,0x10
c0017ed4:	83 ec 0c             	sub    esp,0xc
c0017ed7:	68 a6 b3 02 c0       	push   0xc002b3a6
c0017edc:	e8 12 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ee1:	83 c4 10             	add    esp,0x10
c0017ee4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017eeb:	83 ec 0c             	sub    esp,0xc
c0017eee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ef2:	e8 a2 76 ff ff       	call   c000f599 <malloc>
c0017ef7:	83 c4 10             	add    esp,0x10
c0017efa:	89 c3                	mov    ebx,eax
c0017efc:	83 ec 0c             	sub    esp,0xc
c0017eff:	53                   	push   ebx
c0017f00:	e8 8f b0 00 00       	call   c0022f94 <IDE::IDE()>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017f0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f10:	83 ec 08             	sub    esp,0x8
c0017f13:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f17:	50                   	push   eax
c0017f18:	e8 af bc ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f24:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017f2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f32:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017f3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f3f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017f48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f4e:	83 c0 08             	add    eax,0x8
c0017f51:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f53:	6a 00                	push   0x0
c0017f55:	6a 00                	push   0x0
c0017f57:	6a 00                	push   0x0
c0017f59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017f5d:	ff d0                	call   eax
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	90                   	nop
c0017f63:	83 c4 28             	add    esp,0x28
c0017f66:	5b                   	pop    ebx
c0017f67:	c3                   	ret    

c0017f68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f68:	83 ec 1c             	sub    esp,0x1c
c0017f6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f6f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f72:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f76:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017f7b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f80:	83 ec 08             	sub    esp,0x8
c0017f83:	52                   	push   edx
c0017f84:	50                   	push   eax
c0017f85:	e8 26 6c ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f91:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0017f96:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f9b:	83 ec 04             	sub    esp,0x4
c0017f9e:	6a 01                	push   0x1
c0017fa0:	52                   	push   edx
c0017fa1:	50                   	push   eax
c0017fa2:	e8 3b 6d ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fa7:	83 c4 10             	add    esp,0x10
c0017faa:	90                   	nop
c0017fab:	83 c4 1c             	add    esp,0x1c
c0017fae:	c3                   	ret    
c0017faf:	90                   	nop

c0017fb0 <ACPI::sleep()>:
c0017fb0:	83 ec 0c             	sub    esp,0xc
c0017fb3:	a1 a0 01 03 c0       	mov    eax,ds:0xc00301a0
c0017fb8:	85 c0                	test   eax,eax
c0017fba:	74 07                	je     c0017fc3 <ACPI::sleep()+0x13>
c0017fbc:	a1 a0 01 03 c0       	mov    eax,ds:0xc00301a0
c0017fc1:	ff d0                	call   eax
c0017fc3:	90                   	nop
c0017fc4:	83 c4 0c             	add    esp,0xc
c0017fc7:	c3                   	ret    

c0017fc8 <ACPI::open(int, int, void*)>:
c0017fc8:	57                   	push   edi
c0017fc9:	56                   	push   esi
c0017fca:	53                   	push   ebx
c0017fcb:	81 ec 60 01 00 00    	sub    esp,0x160
c0017fd1:	83 ec 0c             	sub    esp,0xc
c0017fd4:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017fdb:	e8 86 fd ff ff       	call   c0017d66 <ACPI::detectPCI()>
c0017fe0:	83 c4 10             	add    esp,0x10
c0017fe3:	83 ec 0c             	sub    esp,0xc
c0017fe6:	68 20 b3 02 c0       	push   0xc002b320
c0017feb:	e8 03 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017ff0:	83 c4 10             	add    esp,0x10
c0017ff3:	83 ec 0c             	sub    esp,0xc
c0017ff6:	68 bb b3 02 c0       	push   0xc002b3bb
c0017ffb:	e8 55 46 00 00       	call   c001c655 <Thr::loadKernelSymbolTable(char const*)>
c0018000:	83 c4 10             	add    esp,0x10
c0018003:	83 ec 0c             	sub    esp,0xc
c0018006:	68 d9 b3 02 c0       	push   0xc002b3d9
c001800b:	e8 e3 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	83 ec 04             	sub    esp,0x4
c0018016:	6a 0c                	push   0xc
c0018018:	68 f4 b3 02 c0       	push   0xc002b3f4
c001801d:	68 05 b4 02 c0       	push   0xc002b405
c0018022:	e8 94 2c 00 00       	call   c001acbb <Reg::readIntWithDefault(char*, char*, int)>
c0018027:	83 c4 10             	add    esp,0x10
c001802a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018031:	83 ec 0c             	sub    esp,0xc
c0018034:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001803b:	e8 e9 93 ff ff       	call   c0011429 <Virt::setupPageSwapping(int)>
c0018040:	83 c4 10             	add    esp,0x10
c0018043:	83 ec 0c             	sub    esp,0xc
c0018046:	68 d5 9e 02 c0       	push   0xc0029ed5
c001804b:	e8 a3 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018050:	83 c4 10             	add    esp,0x10
c0018053:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0018059:	83 ec 08             	sub    esp,0x8
c001805c:	6a 01                	push   0x1
c001805e:	68 0c b4 02 c0       	push   0xc002b40c
c0018063:	e8 64 50 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	83 ec 08             	sub    esp,0x8
c001806e:	53                   	push   ebx
c001806f:	50                   	push   eax
c0018070:	e8 88 52 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c0018075:	83 c4 10             	add    esp,0x10
c0018078:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001807f:	83 ec 08             	sub    esp,0x8
c0018082:	6a 12                	push   0x12
c0018084:	50                   	push   eax
c0018085:	e8 c6 be ff ff       	call   c0013f50 <getDevicesOfType(DeviceType)>
c001808a:	83 c4 0c             	add    esp,0xc
c001808d:	83 ec 0c             	sub    esp,0xc
c0018090:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018097:	50                   	push   eax
c0018098:	e8 87 09 01 00       	call   c0028a24 <LinkedList<Device>::isEmpty()>
c001809d:	83 c4 10             	add    esp,0x10
c00180a0:	83 f0 01             	xor    eax,0x1
c00180a3:	84 c0                	test   al,al
c00180a5:	0f 84 43 01 00 00    	je     c00181ee <ACPI::open(int, int, void*)+0x226>
c00180ab:	83 ec 0c             	sub    esp,0xc
c00180ae:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180b5:	50                   	push   eax
c00180b6:	e8 85 09 01 00       	call   c0028a40 <LinkedList<Device>::getFirstElement()>
c00180bb:	83 c4 10             	add    esp,0x10
c00180be:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00180c5:	83 ec 0c             	sub    esp,0xc
c00180c8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00180cf:	50                   	push   eax
c00180d0:	e8 73 09 01 00       	call   c0028a48 <LinkedList<Device>::removeFirst()>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00180df:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00180e6:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00180ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00180f1:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00180f7:	ba 09 00 00 00       	mov    edx,0x9
c00180fc:	fc                   	cld    
c00180fd:	89 c7                	mov    edi,eax
c00180ff:	89 de                	mov    esi,ebx
c0018101:	89 d1                	mov    ecx,edx
c0018103:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	8d 44 24 38          	lea    eax,[esp+0x38]
c001810c:	50                   	push   eax
c001810d:	83 ec 24             	sub    esp,0x24
c0018110:	89 e0                	mov    eax,esp
c0018112:	89 c3                	mov    ebx,eax
c0018114:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018118:	ba 09 00 00 00       	mov    edx,0x9
c001811d:	89 df                	mov    edi,ebx
c001811f:	89 c6                	mov    esi,eax
c0018121:	89 d1                	mov    ecx,edx
c0018123:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018125:	e8 de a7 00 00       	call   c0022908 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001812a:	83 c4 30             	add    esp,0x30
c001812d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018134:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001813c:	0f 84 4b ff ff ff    	je     c001808d <ACPI::open(int, int, void*)+0xc5>
c0018142:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001814d:	83 ec 0c             	sub    esp,0xc
c0018150:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018157:	e8 3d 74 ff ff       	call   c000f599 <malloc>
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	89 c3                	mov    ebx,eax
c0018161:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0018166:	83 ec 04             	sub    esp,0x4
c0018169:	50                   	push   eax
c001816a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018171:	53                   	push   ebx
c0018172:	e8 7b ab ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001818b:	e8 34 ae ff ff       	call   c0012fc4 <File::exists()>
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	84 c0                	test   al,al
c0018195:	74 27                	je     c00181be <ACPI::open(int, int, void*)+0x1f6>
c0018197:	83 ec 08             	sub    esp,0x8
c001819a:	6a 01                	push   0x1
c001819c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00181a3:	e8 24 4f 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	83 ec 08             	sub    esp,0x8
c00181ae:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00181b5:	50                   	push   eax
c00181b6:	e8 42 51 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c00181bb:	83 c4 10             	add    esp,0x10
c00181be:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00181c6:	0f 84 c1 fe ff ff    	je     c001808d <ACPI::open(int, int, void*)+0xc5>
c00181cc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00181d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00181d5:	83 c0 08             	add    eax,0x8
c00181d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00181da:	83 ec 0c             	sub    esp,0xc
c00181dd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00181e4:	ff d0                	call   eax
c00181e6:	83 c4 10             	add    esp,0x10
c00181e9:	e9 9f fe ff ff       	jmp    c001808d <ACPI::open(int, int, void*)+0xc5>
c00181ee:	83 ec 0c             	sub    esp,0xc
c00181f1:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181f8:	50                   	push   eax
c00181f9:	e8 24 08 01 00       	call   c0028a22 <LinkedList<Device>::~LinkedList()>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c0018207:	83 ec 08             	sub    esp,0x8
c001820a:	6a 01                	push   0x1
c001820c:	68 27 b4 02 c0       	push   0xc002b427
c0018211:	e8 b6 4e 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c0018216:	83 c4 10             	add    esp,0x10
c0018219:	83 ec 08             	sub    esp,0x8
c001821c:	53                   	push   ebx
c001821d:	50                   	push   eax
c001821e:	e8 da 50 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c0018223:	83 c4 10             	add    esp,0x10
c0018226:	8b 1d 08 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db08
c001822c:	83 ec 08             	sub    esp,0x8
c001822f:	6a 01                	push   0x1
c0018231:	68 44 b4 02 c0       	push   0xc002b444
c0018236:	e8 91 4e 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c001823b:	83 c4 10             	add    esp,0x10
c001823e:	83 ec 08             	sub    esp,0x8
c0018241:	53                   	push   ebx
c0018242:	50                   	push   eax
c0018243:	e8 b5 50 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0018250:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018256:	83 e0 04             	and    eax,0x4
c0018259:	84 c0                	test   al,al
c001825b:	0f 84 0d 01 00 00    	je     c001836e <ACPI::open(int, int, void*)+0x3a6>
c0018261:	83 ec 0c             	sub    esp,0xc
c0018264:	68 61 b4 02 c0       	push   0xc002b461
c0018269:	e8 85 73 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001826e:	83 c4 10             	add    esp,0x10
c0018271:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001827c:	83 ec 0c             	sub    esp,0xc
c001827f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0018286:	e8 0e 73 ff ff       	call   c000f599 <malloc>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	89 c3                	mov    ebx,eax
c0018290:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0018295:	83 ec 04             	sub    esp,0x4
c0018298:	50                   	push   eax
c0018299:	68 7e b4 02 c0       	push   0xc002b47e
c001829e:	53                   	push   ebx
c001829f:	e8 4e aa ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00182ae:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00182b6:	74 1a                	je     c00182d2 <ACPI::open(int, int, void*)+0x30a>
c00182b8:	83 ec 0c             	sub    esp,0xc
c00182bb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00182c2:	e8 fd ac ff ff       	call   c0012fc4 <File::exists()>
c00182c7:	83 c4 10             	add    esp,0x10
c00182ca:	84 c0                	test   al,al
c00182cc:	74 04                	je     c00182d2 <ACPI::open(int, int, void*)+0x30a>
c00182ce:	b0 01                	mov    al,0x1
c00182d0:	eb 02                	jmp    c00182d4 <ACPI::open(int, int, void*)+0x30c>
c00182d2:	b0 00                	mov    al,0x0
c00182d4:	84 c0                	test   al,al
c00182d6:	74 25                	je     c00182fd <ACPI::open(int, int, void*)+0x335>
c00182d8:	83 ec 08             	sub    esp,0x8
c00182db:	6a 01                	push   0x1
c00182dd:	68 7e b4 02 c0       	push   0xc002b47e
c00182e2:	e8 e5 4d 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	83 ec 08             	sub    esp,0x8
c00182ed:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00182f4:	50                   	push   eax
c00182f5:	e8 03 50 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018305:	74 27                	je     c001832e <ACPI::open(int, int, void*)+0x366>
c0018307:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001830f:	74 1d                	je     c001832e <ACPI::open(int, int, void*)+0x366>
c0018311:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018318:	8b 00                	mov    eax,DWORD PTR [eax]
c001831a:	83 c0 08             	add    eax,0x8
c001831d:	8b 00                	mov    eax,DWORD PTR [eax]
c001831f:	83 ec 0c             	sub    esp,0xc
c0018322:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018329:	ff d0                	call   eax
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	a1 c8 03 03 c0       	mov    eax,ds:0xc00303c8
c0018333:	83 ec 08             	sub    esp,0x8
c0018336:	68 9b b4 02 c0       	push   0xc002b49b
c001833b:	50                   	push   eax
c001833c:	e8 43 f3 ff ff       	call   c0017684 <findDataTable(unsigned char*, char*)>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001834b:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018353:	74 19                	je     c001836e <ACPI::open(int, int, void*)+0x3a6>
c0018355:	83 ec 08             	sub    esp,0x8
c0018358:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001835f:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018366:	e8 fd fb ff ff       	call   c0017f68 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	b8 00 00 00 00       	mov    eax,0x0
c0018373:	81 c4 60 01 00 00    	add    esp,0x160
c0018379:	5b                   	pop    ebx
c001837a:	5e                   	pop    esi
c001837b:	5f                   	pop    edi
c001837c:	c3                   	ret    
c001837d:	90                   	nop

c001837e <CPU::close(int, int, void*)>:
c001837e:	31 c0                	xor    eax,eax
c0018380:	c3                   	ret    
c0018381:	90                   	nop

c0018382 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018382:	55                   	push   ebp
c0018383:	57                   	push   edi
c0018384:	56                   	push   esi
c0018385:	53                   	push   ebx
c0018386:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001838a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001838e:	89 ce                	mov    esi,ecx
c0018390:	89 d5                	mov    ebp,edx
c0018392:	80 f9 04             	cmp    cl,0x4
c0018395:	75 28                	jne    c00183bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018397:	8d 42 f9             	lea    eax,[edx-0x7]
c001839a:	3c 03                	cmp    al,0x3
c001839c:	0f 86 63 01 00 00    	jbe    c0018505 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183a2:	80 fa 03             	cmp    dl,0x3
c00183a5:	0f 84 5a 01 00 00    	je     c0018505 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183ab:	8d 7a f2             	lea    edi,[edx-0xe]
c00183ae:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00183b3:	89 fb                	mov    ebx,edi
c00183b5:	80 fb 01             	cmp    bl,0x1
c00183b8:	77 4e                	ja     c0018408 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00183ba:	e9 52 01 00 00       	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183bf:	80 f9 05             	cmp    cl,0x5
c00183c2:	75 4d                	jne    c0018411 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00183c4:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c00183c9:	80 fa 03             	cmp    dl,0x3
c00183cc:	0f 86 3f 01 00 00    	jbe    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183d2:	8d 7a fa             	lea    edi,[edx-0x6]
c00183d5:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c00183da:	89 fb                	mov    ebx,edi
c00183dc:	80 fb 01             	cmp    bl,0x1
c00183df:	0f 86 2c 01 00 00    	jbe    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e5:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c00183ea:	80 fa 08             	cmp    dl,0x8
c00183ed:	0f 84 1e 01 00 00    	je     c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f3:	89 d7                	mov    edi,edx
c00183f5:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c00183fa:	83 e7 fb             	and    edi,0xfffffffb
c00183fd:	89 fb                	mov    ebx,edi
c00183ff:	80 fb 09             	cmp    bl,0x9
c0018402:	0f 84 09 01 00 00    	je     c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018408:	31 c0                	xor    eax,eax
c001840a:	89 eb                	mov    ebx,ebp
c001840c:	0f b6 fb             	movzx  edi,bl
c001840f:	eb 30                	jmp    c0018441 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018411:	31 c0                	xor    eax,eax
c0018413:	80 f9 06             	cmp    cl,0x6
c0018416:	75 f2                	jne    c001840a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018418:	80 fa 0a             	cmp    dl,0xa
c001841b:	77 ed                	ja     c001840a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001841d:	bf de 05 00 00       	mov    edi,0x5de
c0018422:	0f a3 d7             	bt     edi,edx
c0018425:	73 e3                	jae    c001840a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018427:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c001842c:	e9 e0 00 00 00       	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018431:	39 c7                	cmp    edi,eax
c0018433:	0f 84 d3 00 00 00    	je     c001850c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018439:	40                   	inc    eax
c001843a:	3d d0 00 00 00       	cmp    eax,0xd0
c001843f:	74 09                	je     c001844a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018441:	89 f3                	mov    ebx,esi
c0018443:	80 fb 0f             	cmp    bl,0xf
c0018446:	75 f1                	jne    c0018439 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018448:	eb e7                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001844a:	80 f9 10             	cmp    cl,0x10
c001844d:	75 14                	jne    c0018463 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001844f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018452:	83 e0 fb             	and    eax,0xfffffffb
c0018455:	3c 02                	cmp    al,0x2
c0018457:	76 34                	jbe    c001848d <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018459:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001845e:	80 fa 02             	cmp    dl,0x2
c0018461:	eb 24                	jmp    c0018487 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018463:	80 f9 11             	cmp    cl,0x11
c0018466:	75 13                	jne    c001847b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018468:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001846d:	80 fa 03             	cmp    dl,0x3
c0018470:	0f 85 9b 00 00 00    	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018476:	e9 91 00 00 00       	jmp    c001850c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001847b:	80 f9 12             	cmp    cl,0x12
c001847e:	75 14                	jne    c0018494 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018480:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c0018485:	fe ca                	dec    dl
c0018487:	0f 85 84 00 00 00    	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001848d:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c0018492:	eb 7d                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018494:	80 f9 14             	cmp    cl,0x14
c0018497:	75 12                	jne    c00184ab <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018499:	4a                   	dec    edx
c001849a:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001849f:	80 fa 01             	cmp    dl,0x1
c00184a2:	77 6d                	ja     c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a4:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c00184a9:	eb 66                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ab:	80 f9 15             	cmp    cl,0x15
c00184ae:	75 31                	jne    c00184e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00184b0:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c00184b5:	80 fa 01             	cmp    dl,0x1
c00184b8:	74 57                	je     c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ba:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c00184bf:	80 fa 13             	cmp    dl,0x13
c00184c2:	76 0c                	jbe    c00184d0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00184c4:	80 fa 30             	cmp    dl,0x30
c00184c7:	75 48                	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c9:	b8 e0 cf 02 c0       	mov    eax,0xc002cfe0
c00184ce:	eb 41                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d0:	b9 04 00 09 00       	mov    ecx,0x90004
c00184d5:	0f a3 d1             	bt     ecx,edx
c00184d8:	73 37                	jae    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184da:	b8 d0 cf 02 c0       	mov    eax,0xc002cfd0
c00184df:	eb 30                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184e1:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c00184e6:	80 f9 16             	cmp    cl,0x16
c00184e9:	75 26                	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184eb:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c00184f0:	84 d2                	test   dl,dl
c00184f2:	74 1d                	je     c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f4:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c00184f9:	80 fa 30             	cmp    dl,0x30
c00184fc:	75 13                	jne    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fe:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c0018503:	eb 0c                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018505:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c001850a:	eb 05                	jmp    c0018511 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001850c:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c0018511:	5b                   	pop    ebx
c0018512:	5e                   	pop    esi
c0018513:	5f                   	pop    edi
c0018514:	5d                   	pop    ebp
c0018515:	c3                   	ret    

c0018516 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018516:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001851a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001851e:	80 f9 04             	cmp    cl,0x4
c0018521:	75 6b                	jne    c001858e <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018523:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c0018528:	80 fa 01             	cmp    dl,0x1
c001852b:	0f 86 92 02 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018531:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c0018536:	80 fa 02             	cmp    dl,0x2
c0018539:	0f 84 84 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001853f:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c0018544:	80 fa 03             	cmp    dl,0x3
c0018547:	0f 84 76 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854d:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c0018552:	80 fa 04             	cmp    dl,0x4
c0018555:	0f 84 68 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855b:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c0018560:	80 fa 05             	cmp    dl,0x5
c0018563:	0f 84 5a 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018569:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c001856e:	80 fa 07             	cmp    dl,0x7
c0018571:	0f 84 4c 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018577:	83 ea 08             	sub    edx,0x8
c001857a:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001857f:	80 fa 01             	cmp    dl,0x1
c0018582:	0f 87 3b 02 00 00    	ja     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018588:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c001858d:	c3                   	ret    
c001858e:	80 f9 05             	cmp    cl,0x5
c0018591:	75 45                	jne    c00185d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018593:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018596:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001859b:	80 f9 02             	cmp    cl,0x2
c001859e:	0f 86 1f 02 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a4:	80 fa 04             	cmp    dl,0x4
c00185a7:	0f 84 f3 01 00 00    	je     c00187a0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00185ad:	80 fa 07             	cmp    dl,0x7
c00185b0:	0f 84 0d 02 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185b6:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00185bb:	80 fa 08             	cmp    dl,0x8
c00185be:	0f 84 ff 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c4:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c00185c9:	80 fa 09             	cmp    dl,0x9
c00185cc:	0f 85 f1 01 00 00    	jne    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d2:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00185d7:	c3                   	ret    
c00185d8:	80 f9 06             	cmp    cl,0x6
c00185db:	0f 85 85 01 00 00    	jne    c0018766 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00185e1:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00185e6:	80 fa 01             	cmp    dl,0x1
c00185e9:	0f 84 d4 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ef:	8d 42 fb             	lea    eax,[edx-0x5]
c00185f2:	3c 01                	cmp    al,0x1
c00185f4:	0f 86 ac 01 00 00    	jbe    c00187a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00185fa:	80 fa 03             	cmp    dl,0x3
c00185fd:	0f 84 a3 01 00 00    	je     c00187a6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018603:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018606:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c001860b:	80 f9 01             	cmp    cl,0x1
c001860e:	0f 86 af 01 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018614:	80 fa 09             	cmp    dl,0x9
c0018617:	0f 84 8f 01 00 00    	je     c00187ac <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001861d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018620:	80 f9 01             	cmp    cl,0x1
c0018623:	0f 86 9a 01 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018629:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c001862e:	80 fa 0d             	cmp    dl,0xd
c0018631:	0f 84 8c 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018637:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001863c:	80 fa 0e             	cmp    dl,0xe
c001863f:	0f 84 7e 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018645:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001864a:	80 fa 0f             	cmp    dl,0xf
c001864d:	0f 84 70 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c0018658:	80 fa 15             	cmp    dl,0x15
c001865b:	0f 84 62 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018661:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018664:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018669:	80 f9 01             	cmp    cl,0x1
c001866c:	0f 86 51 01 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018672:	80 fa 1a             	cmp    dl,0x1a
c0018675:	0f 84 37 01 00 00    	je     c00187b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001867b:	80 fa 1c             	cmp    dl,0x1c
c001867e:	0f 84 34 01 00 00    	je     c00187b8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018684:	80 fa 1d             	cmp    dl,0x1d
c0018687:	0f 84 36 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868d:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018692:	80 fa 25             	cmp    dl,0x25
c0018695:	0f 84 28 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869b:	8d 4a da             	lea    ecx,[edx-0x26]
c001869e:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00186a3:	80 f9 01             	cmp    cl,0x1
c00186a6:	0f 86 17 01 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ac:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00186b1:	80 fa 2a             	cmp    dl,0x2a
c00186b4:	0f 84 09 01 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ba:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00186bf:	80 fa 2c             	cmp    dl,0x2c
c00186c2:	0f 84 fb 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c8:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c00186cd:	80 fa 2d             	cmp    dl,0x2d
c00186d0:	0f 84 ed 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d6:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00186db:	80 fa 2e             	cmp    dl,0x2e
c00186de:	0f 84 df 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e4:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c00186e9:	80 fa 2f             	cmp    dl,0x2f
c00186ec:	0f 84 d1 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f2:	8d 4a cb             	lea    ecx,[edx-0x35]
c00186f5:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00186fa:	80 f9 01             	cmp    cl,0x1
c00186fd:	0f 86 c0 00 00 00    	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018703:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018708:	80 fa 37             	cmp    dl,0x37
c001870b:	0f 84 b2 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018711:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018716:	80 fa 3a             	cmp    dl,0x3a
c0018719:	0f 84 a4 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871f:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c0018724:	80 fa 3c             	cmp    dl,0x3c
c0018727:	0f 84 96 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872d:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c0018732:	80 fa 3d             	cmp    dl,0x3d
c0018735:	0f 84 88 00 00 00    	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873b:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018740:	80 fa 3e             	cmp    dl,0x3e
c0018743:	74 7e                	je     c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018745:	8d 42 bb             	lea    eax,[edx-0x45]
c0018748:	3c 01                	cmp    al,0x1
c001874a:	76 72                	jbe    c00187be <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001874c:	80 fa 3f             	cmp    dl,0x3f
c001874f:	74 6d                	je     c00187be <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018751:	80 fa 4a             	cmp    dl,0x4a
c0018754:	74 0a                	je     c0018760 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018756:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001875b:	80 fa 4d             	cmp    dl,0x4d
c001875e:	75 63                	jne    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018760:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c0018765:	c3                   	ret    
c0018766:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c001876b:	80 f9 0b             	cmp    cl,0xb
c001876e:	75 0a                	jne    c001877a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018770:	fe ca                	dec    dl
c0018772:	75 4f                	jne    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018774:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018779:	c3                   	ret    
c001877a:	80 f9 0f             	cmp    cl,0xf
c001877d:	75 44                	jne    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877f:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018784:	80 fa 02             	cmp    dl,0x2
c0018787:	76 3a                	jbe    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018789:	8d 42 fd             	lea    eax,[edx-0x3]
c001878c:	3c 01                	cmp    al,0x1
c001878e:	76 0a                	jbe    c001879a <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018790:	b8 21 b6 02 c0       	mov    eax,0xc002b621
c0018795:	80 fa 06             	cmp    dl,0x6
c0018798:	75 29                	jne    c00187c3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879a:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c001879f:	c3                   	ret    
c00187a0:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c00187a5:	c3                   	ret    
c00187a6:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00187ab:	c3                   	ret    
c00187ac:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00187b1:	c3                   	ret    
c00187b2:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c00187b7:	c3                   	ret    
c00187b8:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c00187bd:	c3                   	ret    
c00187be:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c00187c3:	c3                   	ret    

c00187c4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00187c4:	60                   	pusha  
c00187c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187d1:	9c                   	pushf  
c00187d2:	fa                   	cli    
c00187d3:	0f 09                	wbinvd 
c00187d5:	0f 30                	wrmsr  
c00187d7:	9d                   	popf   
c00187d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187dc:	89 02                	mov    DWORD PTR [edx],eax
c00187de:	61                   	popa   
c00187df:	c3                   	ret    

c00187e0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00187e0:	60                   	pusha  
c00187e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187e5:	9c                   	pushf  
c00187e6:	fa                   	cli    
c00187e7:	0f 09                	wbinvd 
c00187e9:	31 c0                	xor    eax,eax
c00187eb:	31 d2                	xor    edx,edx
c00187ed:	0f 32                	rdmsr  
c00187ef:	9d                   	popf   
c00187f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187f4:	89 02                	mov    DWORD PTR [edx],eax
c00187f6:	61                   	popa   
c00187f7:	c3                   	ret    

c00187f8 <CPU::AMD_K6_writeback(int, int, int)>:
c00187f8:	56                   	push   esi
c00187f9:	53                   	push   ebx
c00187fa:	83 ec 10             	sub    esp,0x10
c00187fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018801:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018806:	75 5d                	jne    c0018865 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018808:	83 f8 08             	cmp    eax,0x8
c001880b:	75 09                	jne    c0018816 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001880d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018812:	7e 13                	jle    c0018827 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018814:	eb 30                	jmp    c0018846 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018816:	83 f8 06             	cmp    eax,0x6
c0018819:	7c 4a                	jl     c0018865 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001881b:	83 f8 07             	cmp    eax,0x7
c001881e:	7e 07                	jle    c0018827 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018820:	83 f8 09             	cmp    eax,0x9
c0018823:	74 21                	je     c0018846 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018825:	eb 3e                	jmp    c0018865 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018827:	89 e6                	mov    esi,esp
c0018829:	8b 1d 48 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db48
c001882f:	56                   	push   esi
c0018830:	c1 eb 15             	shr    ebx,0x15
c0018833:	68 82 00 00 c0       	push   0xc0000082
c0018838:	83 e3 7e             	and    ebx,0x7e
c001883b:	e8 a0 ff ff ff       	call   c00187e0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018840:	56                   	push   esi
c0018841:	6a 00                	push   0x0
c0018843:	53                   	push   ebx
c0018844:	eb 12                	jmp    c0018858 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018846:	89 e3                	mov    ebx,esp
c0018848:	53                   	push   ebx
c0018849:	68 82 00 00 c0       	push   0xc0000082
c001884e:	e8 8d ff ff ff       	call   c00187e0 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018853:	53                   	push   ebx
c0018854:	6a 00                	push   0x0
c0018856:	6a 00                	push   0x0
c0018858:	68 82 00 00 c0       	push   0xc0000082
c001885d:	e8 62 ff ff ff       	call   c00187c4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018862:	83 c4 18             	add    esp,0x18
c0018865:	83 c4 10             	add    esp,0x10
c0018868:	5b                   	pop    ebx
c0018869:	5e                   	pop    esi
c001886a:	c3                   	ret    
c001886b:	90                   	nop

c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001886c:	55                   	push   ebp
c001886d:	57                   	push   edi
c001886e:	56                   	push   esi
c001886f:	53                   	push   ebx
c0018870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018874:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018878:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001887c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018880:	39 05 20 d0 02 c0    	cmp    DWORD PTR ds:0xc002d020,eax
c0018886:	75 23                	jne    c00188ab <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018888:	a1 2c 06 03 c0       	mov    eax,ds:0xc003062c
c001888d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018891:	89 06                	mov    DWORD PTR [esi],eax
c0018893:	a1 28 06 03 c0       	mov    eax,ds:0xc0030628
c0018898:	89 07                	mov    DWORD PTR [edi],eax
c001889a:	a1 24 06 03 c0       	mov    eax,ds:0xc0030624
c001889f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00188a2:	a1 20 06 03 c0       	mov    eax,ds:0xc0030620
c00188a7:	89 02                	mov    DWORD PTR [edx],eax
c00188a9:	eb 3f                	jmp    c00188ea <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00188ab:	31 c9                	xor    ecx,ecx
c00188ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188b1:	0f a2                	cpuid  
c00188b3:	89 06                	mov    DWORD PTR [esi],eax
c00188b5:	89 1f                	mov    DWORD PTR [edi],ebx
c00188b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00188be:	89 10                	mov    DWORD PTR [eax],edx
c00188c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188c4:	a3 20 d0 02 c0       	mov    ds:0xc002d020,eax
c00188c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00188cb:	a3 2c 06 03 c0       	mov    ds:0xc003062c,eax
c00188d0:	8b 07                	mov    eax,DWORD PTR [edi]
c00188d2:	a3 28 06 03 c0       	mov    ds:0xc0030628,eax
c00188d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188da:	a3 24 06 03 c0       	mov    ds:0xc0030624,eax
c00188df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00188e5:	a3 20 06 03 c0       	mov    ds:0xc0030620,eax
c00188ea:	5b                   	pop    ebx
c00188eb:	5e                   	pop    esi
c00188ec:	5f                   	pop    edi
c00188ed:	5d                   	pop    ebp
c00188ee:	c3                   	ret    
c00188ef:	90                   	nop

c00188f0 <CPU::cpuidCheckEDX(unsigned int)>:
c00188f0:	83 ec 10             	sub    esp,0x10
c00188f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f7:	50                   	push   eax
c00188f8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188fc:	50                   	push   eax
c00188fd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018901:	50                   	push   eax
c0018902:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018906:	50                   	push   eax
c0018907:	6a 01                	push   0x1
c0018909:	e8 5e ff ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001890e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018912:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018916:	0f 95 c0             	setne  al
c0018919:	83 c4 24             	add    esp,0x24
c001891c:	c3                   	ret    
c001891d:	90                   	nop

c001891e <CPU::cpuidCheckECX(unsigned int)>:
c001891e:	83 ec 10             	sub    esp,0x10
c0018921:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018925:	50                   	push   eax
c0018926:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001892a:	50                   	push   eax
c001892b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001892f:	50                   	push   eax
c0018930:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018934:	50                   	push   eax
c0018935:	6a 01                	push   0x1
c0018937:	e8 30 ff ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001893c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018940:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018944:	0f 95 c0             	setne  al
c0018947:	83 c4 24             	add    esp,0x24
c001894a:	c3                   	ret    
c001894b:	90                   	nop

c001894c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001894c:	83 ec 10             	sub    esp,0x10
c001894f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018953:	50                   	push   eax
c0018954:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018958:	50                   	push   eax
c0018959:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001895d:	50                   	push   eax
c001895e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018962:	50                   	push   eax
c0018963:	6a 07                	push   0x7
c0018965:	e8 02 ff ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001896a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018972:	0f 95 c0             	setne  al
c0018975:	83 c4 24             	add    esp,0x24
c0018978:	c3                   	ret    
c0018979:	90                   	nop

c001897a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001897a:	83 ec 10             	sub    esp,0x10
c001897d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018981:	50                   	push   eax
c0018982:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018986:	50                   	push   eax
c0018987:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001898b:	50                   	push   eax
c001898c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018990:	50                   	push   eax
c0018991:	6a 07                	push   0x7
c0018993:	e8 d4 fe ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018998:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001899c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189a0:	0f 95 c0             	setne  al
c00189a3:	83 c4 24             	add    esp,0x24
c00189a6:	c3                   	ret    
c00189a7:	90                   	nop

c00189a8 <CPU::CPU()>:
c00189a8:	83 ec 0c             	sub    esp,0xc
c00189ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189af:	83 ec 08             	sub    esp,0x8
c00189b2:	68 21 b6 02 c0       	push   0xc002b621
c00189b7:	50                   	push   eax
c00189b8:	e8 13 b4 ff ff       	call   c0013dd0 <Device::Device(char const*)>
c00189bd:	83 c4 10             	add    esp,0x10
c00189c0:	ba f8 b6 02 c0       	mov    edx,0xc002b6f8
c00189c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189c9:	89 10                	mov    DWORD PTR [eax],edx
c00189cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189cf:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00189d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189dd:	05 78 01 00 00       	add    eax,0x178
c00189e2:	83 ec 0c             	sub    esp,0xc
c00189e5:	50                   	push   eax
c00189e6:	e8 e1 63 ff ff       	call   c000edcc <GDT::GDT()>
c00189eb:	83 c4 10             	add    esp,0x10
c00189ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189f2:	05 7c 09 00 00       	add    eax,0x97c
c00189f7:	83 ec 0c             	sub    esp,0xc
c00189fa:	50                   	push   eax
c00189fb:	e8 1c 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018a00:	83 c4 10             	add    esp,0x10
c0018a03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a07:	05 7c 11 00 00       	add    eax,0x117c
c0018a0c:	83 ec 0c             	sub    esp,0xc
c0018a0f:	50                   	push   eax
c0018a10:	e8 51 81 ff ff       	call   c0010b66 <TSS::TSS()>
c0018a15:	83 c4 10             	add    esp,0x10
c0018a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a1c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a27:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018a31:	90                   	nop
c0018a32:	83 c4 0c             	add    esp,0xc
c0018a35:	c3                   	ret    

c0018a36 <CPU::displayFeatures()>:
c0018a36:	c3                   	ret    
c0018a37:	90                   	nop

c0018a38 <CPU::detectFeatures()>:
c0018a38:	55                   	push   ebp
c0018a39:	57                   	push   edi
c0018a3a:	56                   	push   esi
c0018a3b:	53                   	push   ebx
c0018a3c:	83 ec 50             	sub    esp,0x50
c0018a3f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018a43:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018a4d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018a54:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018a5a:	6a 0d                	push   0xd
c0018a5c:	6a 00                	push   0x0
c0018a5e:	55                   	push   ebp
c0018a5f:	e8 ec 7c fe ff       	call   c0000750 <memset>
c0018a64:	83 c4 10             	add    esp,0x10
c0018a67:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0018a6c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018a73:	0f 84 22 09 00 00    	je     c001939b <CPU::detectFeatures()+0x963>
c0018a79:	83 ec 0c             	sub    esp,0xc
c0018a7c:	89 ef                	mov    edi,ebp
c0018a7e:	6a 10                	push   0x10
c0018a80:	e8 6b fe ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018a85:	83 e0 01             	and    eax,0x1
c0018a88:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a91:	83 e0 fd             	and    eax,0xfffffffd
c0018a94:	09 d0                	or     eax,edx
c0018a96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a9c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018aa3:	e8 48 fe ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018aa8:	83 e0 01             	and    eax,0x1
c0018aab:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ab2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ab8:	83 e0 fb             	and    eax,0xfffffffb
c0018abb:	09 d0                	or     eax,edx
c0018abd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ac3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018aca:	e8 21 fe ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018acf:	83 e0 01             	and    eax,0x1
c0018ad2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ad9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018adf:	83 e0 f7             	and    eax,0xfffffff7
c0018ae2:	09 d0                	or     eax,edx
c0018ae4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018aea:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018af1:	e8 fa fd ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018af6:	83 e0 01             	and    eax,0x1
c0018af9:	c1 e0 04             	shl    eax,0x4
c0018afc:	88 c2                	mov    dl,al
c0018afe:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b04:	83 e0 ef             	and    eax,0xffffffef
c0018b07:	09 d0                	or     eax,edx
c0018b09:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b0f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018b16:	e8 d5 fd ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018b1b:	83 e0 01             	and    eax,0x1
c0018b1e:	c1 e0 05             	shl    eax,0x5
c0018b21:	88 c2                	mov    dl,al
c0018b23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018b29:	83 e0 df             	and    eax,0xffffffdf
c0018b2c:	09 d0                	or     eax,edx
c0018b2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018b34:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018b3b:	e8 b0 fd ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018b40:	83 e0 01             	and    eax,0x1
c0018b43:	8d 14 00             	lea    edx,[eax+eax*1]
c0018b46:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018b4c:	83 e0 fd             	and    eax,0xfffffffd
c0018b4f:	09 d0                	or     eax,edx
c0018b51:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018b57:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018b5e:	e8 8d fd ff ff       	call   c00188f0 <CPU::cpuidCheckEDX(unsigned int)>
c0018b63:	83 e0 01             	and    eax,0x1
c0018b66:	c1 e0 06             	shl    eax,0x6
c0018b69:	88 c2                	mov    dl,al
c0018b6b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018b71:	83 e0 bf             	and    eax,0xffffffbf
c0018b74:	09 d0                	or     eax,edx
c0018b76:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018b7c:	58                   	pop    eax
c0018b7d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b81:	50                   	push   eax
c0018b82:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b86:	50                   	push   eax
c0018b87:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018b8b:	56                   	push   esi
c0018b8c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b90:	50                   	push   eax
c0018b91:	6a 00                	push   0x0
c0018b93:	e8 d4 fc ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b98:	b8 04 00 00 00       	mov    eax,0x4
c0018b9d:	89 c1                	mov    ecx,eax
c0018b9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ba1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ba7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018bab:	89 c1                	mov    ecx,eax
c0018bad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018baf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018bb5:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018bb9:	89 c1                	mov    ecx,eax
c0018bbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018bbd:	83 c4 18             	add    esp,0x18
c0018bc0:	68 cc b4 02 c0       	push   0xc002b4cc
c0018bc5:	55                   	push   ebp
c0018bc6:	e8 cd 7c fe ff       	call   c0000898 <strcmp>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	85 c0                	test   eax,eax
c0018bd0:	75 0f                	jne    c0018be1 <CPU::detectFeatures()+0x1a9>
c0018bd2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018bdc:	e9 22 02 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018be1:	50                   	push   eax
c0018be2:	50                   	push   eax
c0018be3:	68 d9 b4 02 c0       	push   0xc002b4d9
c0018be8:	55                   	push   ebp
c0018be9:	e8 aa 7c fe ff       	call   c0000898 <strcmp>
c0018bee:	83 c4 10             	add    esp,0x10
c0018bf1:	85 c0                	test   eax,eax
c0018bf3:	74 dd                	je     c0018bd2 <CPU::detectFeatures()+0x19a>
c0018bf5:	50                   	push   eax
c0018bf6:	50                   	push   eax
c0018bf7:	68 e6 b4 02 c0       	push   0xc002b4e6
c0018bfc:	55                   	push   ebp
c0018bfd:	e8 96 7c fe ff       	call   c0000898 <strcmp>
c0018c02:	83 c4 10             	add    esp,0x10
c0018c05:	85 c0                	test   eax,eax
c0018c07:	74 2a                	je     c0018c33 <CPU::detectFeatures()+0x1fb>
c0018c09:	50                   	push   eax
c0018c0a:	50                   	push   eax
c0018c0b:	68 f3 b4 02 c0       	push   0xc002b4f3
c0018c10:	55                   	push   ebp
c0018c11:	e8 82 7c fe ff       	call   c0000898 <strcmp>
c0018c16:	83 c4 10             	add    esp,0x10
c0018c19:	85 c0                	test   eax,eax
c0018c1b:	74 16                	je     c0018c33 <CPU::detectFeatures()+0x1fb>
c0018c1d:	50                   	push   eax
c0018c1e:	50                   	push   eax
c0018c1f:	68 00 b5 02 c0       	push   0xc002b500
c0018c24:	55                   	push   ebp
c0018c25:	e8 6e 7c fe ff       	call   c0000898 <strcmp>
c0018c2a:	83 c4 10             	add    esp,0x10
c0018c2d:	85 c0                	test   eax,eax
c0018c2f:	74 48                	je     c0018c79 <CPU::detectFeatures()+0x241>
c0018c31:	eb 0f                	jmp    c0018c42 <CPU::detectFeatures()+0x20a>
c0018c33:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018c3d:	e9 c1 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018c42:	50                   	push   eax
c0018c43:	50                   	push   eax
c0018c44:	68 0d b5 02 c0       	push   0xc002b50d
c0018c49:	55                   	push   ebp
c0018c4a:	e8 49 7c fe ff       	call   c0000898 <strcmp>
c0018c4f:	83 c4 10             	add    esp,0x10
c0018c52:	85 c0                	test   eax,eax
c0018c54:	74 23                	je     c0018c79 <CPU::detectFeatures()+0x241>
c0018c56:	57                   	push   edi
c0018c57:	57                   	push   edi
c0018c58:	68 1a b5 02 c0       	push   0xc002b51a
c0018c5d:	55                   	push   ebp
c0018c5e:	e8 35 7c fe ff       	call   c0000898 <strcmp>
c0018c63:	83 c4 10             	add    esp,0x10
c0018c66:	85 c0                	test   eax,eax
c0018c68:	75 1e                	jne    c0018c88 <CPU::detectFeatures()+0x250>
c0018c6a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018c74:	e9 8a 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018c79:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018c83:	e9 7b 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018c88:	56                   	push   esi
c0018c89:	56                   	push   esi
c0018c8a:	68 27 b5 02 c0       	push   0xc002b527
c0018c8f:	55                   	push   ebp
c0018c90:	e8 03 7c fe ff       	call   c0000898 <strcmp>
c0018c95:	83 c4 10             	add    esp,0x10
c0018c98:	85 c0                	test   eax,eax
c0018c9a:	75 0f                	jne    c0018cab <CPU::detectFeatures()+0x273>
c0018c9c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ca6:	e9 58 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018cab:	51                   	push   ecx
c0018cac:	51                   	push   ecx
c0018cad:	68 e6 b4 02 c0       	push   0xc002b4e6
c0018cb2:	55                   	push   ebp
c0018cb3:	e8 e0 7b fe ff       	call   c0000898 <strcmp>
c0018cb8:	83 c4 10             	add    esp,0x10
c0018cbb:	85 c0                	test   eax,eax
c0018cbd:	75 0f                	jne    c0018cce <CPU::detectFeatures()+0x296>
c0018cbf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018cc9:	e9 35 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018cce:	52                   	push   edx
c0018ccf:	52                   	push   edx
c0018cd0:	68 34 b5 02 c0       	push   0xc002b534
c0018cd5:	55                   	push   ebp
c0018cd6:	e8 bd 7b fe ff       	call   c0000898 <strcmp>
c0018cdb:	83 c4 10             	add    esp,0x10
c0018cde:	85 c0                	test   eax,eax
c0018ce0:	75 0f                	jne    c0018cf1 <CPU::detectFeatures()+0x2b9>
c0018ce2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018cec:	e9 12 01 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018cf1:	50                   	push   eax
c0018cf2:	50                   	push   eax
c0018cf3:	68 41 b5 02 c0       	push   0xc002b541
c0018cf8:	55                   	push   ebp
c0018cf9:	e8 9a 7b fe ff       	call   c0000898 <strcmp>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	85 c0                	test   eax,eax
c0018d03:	75 0f                	jne    c0018d14 <CPU::detectFeatures()+0x2dc>
c0018d05:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018d0f:	e9 ef 00 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018d14:	50                   	push   eax
c0018d15:	50                   	push   eax
c0018d16:	68 4e b5 02 c0       	push   0xc002b54e
c0018d1b:	55                   	push   ebp
c0018d1c:	e8 77 7b fe ff       	call   c0000898 <strcmp>
c0018d21:	83 c4 10             	add    esp,0x10
c0018d24:	85 c0                	test   eax,eax
c0018d26:	75 0f                	jne    c0018d37 <CPU::detectFeatures()+0x2ff>
c0018d28:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018d32:	e9 cc 00 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018d37:	50                   	push   eax
c0018d38:	50                   	push   eax
c0018d39:	68 5b b5 02 c0       	push   0xc002b55b
c0018d3e:	55                   	push   ebp
c0018d3f:	e8 54 7b fe ff       	call   c0000898 <strcmp>
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	85 c0                	test   eax,eax
c0018d49:	75 0f                	jne    c0018d5a <CPU::detectFeatures()+0x322>
c0018d4b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018d55:	e9 a9 00 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018d5a:	50                   	push   eax
c0018d5b:	50                   	push   eax
c0018d5c:	68 68 b5 02 c0       	push   0xc002b568
c0018d61:	55                   	push   ebp
c0018d62:	e8 31 7b fe ff       	call   c0000898 <strcmp>
c0018d67:	83 c4 10             	add    esp,0x10
c0018d6a:	85 c0                	test   eax,eax
c0018d6c:	75 0f                	jne    c0018d7d <CPU::detectFeatures()+0x345>
c0018d6e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018d78:	e9 86 00 00 00       	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018d7d:	50                   	push   eax
c0018d7e:	50                   	push   eax
c0018d7f:	68 75 b5 02 c0       	push   0xc002b575
c0018d84:	55                   	push   ebp
c0018d85:	e8 0e 7b fe ff       	call   c0000898 <strcmp>
c0018d8a:	83 c4 10             	add    esp,0x10
c0018d8d:	85 c0                	test   eax,eax
c0018d8f:	75 0c                	jne    c0018d9d <CPU::detectFeatures()+0x365>
c0018d91:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018d9b:	eb 66                	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018d9d:	50                   	push   eax
c0018d9e:	50                   	push   eax
c0018d9f:	68 82 b5 02 c0       	push   0xc002b582
c0018da4:	55                   	push   ebp
c0018da5:	e8 ee 7a fe ff       	call   c0000898 <strcmp>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	85 c0                	test   eax,eax
c0018daf:	75 0c                	jne    c0018dbd <CPU::detectFeatures()+0x385>
c0018db1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018dbb:	eb 46                	jmp    c0018e03 <CPU::detectFeatures()+0x3cb>
c0018dbd:	57                   	push   edi
c0018dbe:	57                   	push   edi
c0018dbf:	68 8f b5 02 c0       	push   0xc002b58f
c0018dc4:	55                   	push   ebp
c0018dc5:	e8 ce 7a fe ff       	call   c0000898 <strcmp>
c0018dca:	83 c4 10             	add    esp,0x10
c0018dcd:	85 c0                	test   eax,eax
c0018dcf:	74 e0                	je     c0018db1 <CPU::detectFeatures()+0x379>
c0018dd1:	56                   	push   esi
c0018dd2:	56                   	push   esi
c0018dd3:	68 9c b5 02 c0       	push   0xc002b59c
c0018dd8:	55                   	push   ebp
c0018dd9:	e8 ba 7a fe ff       	call   c0000898 <strcmp>
c0018dde:	83 c4 10             	add    esp,0x10
c0018de1:	85 c0                	test   eax,eax
c0018de3:	74 cc                	je     c0018db1 <CPU::detectFeatures()+0x379>
c0018de5:	51                   	push   ecx
c0018de6:	51                   	push   ecx
c0018de7:	68 a9 b5 02 c0       	push   0xc002b5a9
c0018dec:	55                   	push   ebp
c0018ded:	e8 a6 7a fe ff       	call   c0000898 <strcmp>
c0018df2:	83 c4 10             	add    esp,0x10
c0018df5:	85 c0                	test   eax,eax
c0018df7:	74 b8                	je     c0018db1 <CPU::detectFeatures()+0x379>
c0018df9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018e03:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018e08:	0f 86 be 00 00 00    	jbe    c0018ecc <CPU::detectFeatures()+0x494>
c0018e0e:	83 ec 0c             	sub    esp,0xc
c0018e11:	68 80 00 00 00       	push   0x80
c0018e16:	e8 31 fb ff ff       	call   c001894c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e1b:	83 e0 01             	and    eax,0x1
c0018e1e:	c1 e0 06             	shl    eax,0x6
c0018e21:	88 c2                	mov    dl,al
c0018e23:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e29:	83 e0 bf             	and    eax,0xffffffbf
c0018e2c:	09 d0                	or     eax,edx
c0018e2e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e34:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018e3b:	e8 0c fb ff ff       	call   c001894c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e40:	83 e0 01             	and    eax,0x1
c0018e43:	c1 e0 04             	shl    eax,0x4
c0018e46:	88 c2                	mov    dl,al
c0018e48:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e4e:	83 e0 ef             	and    eax,0xffffffef
c0018e51:	09 d0                	or     eax,edx
c0018e53:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e59:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018e60:	e8 e7 fa ff ff       	call   c001894c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018e65:	c1 e0 07             	shl    eax,0x7
c0018e68:	88 c2                	mov    dl,al
c0018e6a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e70:	83 e0 7f             	and    eax,0x7f
c0018e73:	09 d0                	or     eax,edx
c0018e75:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e7b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018e82:	e8 f3 fa ff ff       	call   c001897a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018e87:	83 e0 01             	and    eax,0x1
c0018e8a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e91:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e97:	83 e0 f7             	and    eax,0xfffffff7
c0018e9a:	09 d0                	or     eax,edx
c0018e9c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018ea2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018ea9:	e8 cc fa ff ff       	call   c001897a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018eae:	83 c4 10             	add    esp,0x10
c0018eb1:	83 e0 01             	and    eax,0x1
c0018eb4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ebb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ec1:	83 e0 fb             	and    eax,0xfffffffb
c0018ec4:	09 d0                	or     eax,edx
c0018ec6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ecc:	83 ec 0c             	sub    esp,0xc
c0018ecf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ed3:	50                   	push   eax
c0018ed4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ed8:	50                   	push   eax
c0018ed9:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018edd:	56                   	push   esi
c0018ede:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ee2:	50                   	push   eax
c0018ee3:	6a 01                	push   0x1
c0018ee5:	e8 82 f9 ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018eea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018eee:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018ef4:	88 ca                	mov    dl,cl
c0018ef6:	83 e0 f0             	and    eax,0xfffffff0
c0018ef9:	83 e2 0f             	and    edx,0xf
c0018efc:	09 d0                	or     eax,edx
c0018efe:	88 ca                	mov    dl,cl
c0018f00:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018f06:	c0 ea 04             	shr    dl,0x4
c0018f09:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018f0d:	0f b6 c2             	movzx  eax,dl
c0018f10:	83 c4 20             	add    esp,0x20
c0018f13:	c1 e0 06             	shl    eax,0x6
c0018f16:	89 c7                	mov    edi,eax
c0018f18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f1e:	66 25 3f c0          	and    ax,0xc03f
c0018f22:	09 f8                	or     eax,edi
c0018f24:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f2b:	89 c8                	mov    eax,ecx
c0018f2d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018f34:	c1 e8 08             	shr    eax,0x8
c0018f37:	83 e5 3f             	and    ebp,0x3f
c0018f3a:	83 e0 0f             	and    eax,0xf
c0018f3d:	89 c7                	mov    edi,eax
c0018f3f:	c1 e7 06             	shl    edi,0x6
c0018f42:	09 ef                	or     edi,ebp
c0018f44:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018f4b:	89 fa                	mov    edx,edi
c0018f4d:	83 e5 c0             	and    ebp,0xffffffc0
c0018f50:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018f56:	88 c2                	mov    dl,al
c0018f58:	c0 ea 02             	shr    dl,0x2
c0018f5b:	89 d7                	mov    edi,edx
c0018f5d:	09 ef                	or     edi,ebp
c0018f5f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018f65:	89 fa                	mov    edx,edi
c0018f67:	83 e5 cf             	and    ebp,0xffffffcf
c0018f6a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018f70:	89 cf                	mov    edi,ecx
c0018f72:	c1 ef 0c             	shr    edi,0xc
c0018f75:	83 e7 03             	and    edi,0x3
c0018f78:	c1 e7 04             	shl    edi,0x4
c0018f7b:	09 ef                	or     edi,ebp
c0018f7d:	3c 06                	cmp    al,0x6
c0018f7f:	89 fa                	mov    edx,edi
c0018f81:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018f87:	74 04                	je     c0018f8d <CPU::detectFeatures()+0x555>
c0018f89:	3c 0f                	cmp    al,0xf
c0018f8b:	75 5c                	jne    c0018fe9 <CPU::detectFeatures()+0x5b1>
c0018f8d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018f91:	89 cf                	mov    edi,ecx
c0018f93:	c1 ef 10             	shr    edi,0x10
c0018f96:	c1 e7 04             	shl    edi,0x4
c0018f99:	09 fa                	or     edx,edi
c0018f9b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018fa1:	0f b6 d2             	movzx  edx,dl
c0018fa4:	66 81 e7 3f c0       	and    di,0xc03f
c0018fa9:	c1 e2 06             	shl    edx,0x6
c0018fac:	09 fa                	or     edx,edi
c0018fae:	3c 0f                	cmp    al,0xf
c0018fb0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018fb7:	75 30                	jne    c0018fe9 <CPU::detectFeatures()+0x5b1>
c0018fb9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018fbf:	c1 e9 14             	shr    ecx,0x14
c0018fc2:	83 e0 3f             	and    eax,0x3f
c0018fc5:	83 c1 0f             	add    ecx,0xf
c0018fc8:	88 ca                	mov    dl,cl
c0018fca:	c0 e9 02             	shr    cl,0x2
c0018fcd:	c1 e2 06             	shl    edx,0x6
c0018fd0:	09 d0                	or     eax,edx
c0018fd2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018fd8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018fde:	83 e0 c0             	and    eax,0xffffffc0
c0018fe1:	09 c1                	or     ecx,eax
c0018fe3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018fe9:	83 ec 0c             	sub    esp,0xc
c0018fec:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ff3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ff7:	50                   	push   eax
c0018ff8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018ffc:	55                   	push   ebp
c0018ffd:	56                   	push   esi
c0018ffe:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019002:	57                   	push   edi
c0019003:	68 00 00 00 80       	push   0x80000000
c0019008:	e8 5f f8 ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001900d:	83 c4 20             	add    esp,0x20
c0019010:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019018:	76 22                	jbe    c001903c <CPU::detectFeatures()+0x604>
c001901a:	83 ec 0c             	sub    esp,0xc
c001901d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019021:	50                   	push   eax
c0019022:	55                   	push   ebp
c0019023:	56                   	push   esi
c0019024:	57                   	push   edi
c0019025:	68 01 00 00 80       	push   0x80000001
c001902a:	e8 3d f8 ff ff       	call   c001886c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001902f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019039:	83 c4 20             	add    esp,0x20
c001903c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019042:	83 f8 01             	cmp    eax,0x1
c0019045:	75 6f                	jne    c00190b6 <CPU::detectFeatures()+0x67e>
c0019047:	51                   	push   ecx
c0019048:	51                   	push   ecx
c0019049:	68 b5 b5 02 c0       	push   0xc002b5b5
c001904e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019052:	56                   	push   esi
c0019053:	e8 b4 77 fe ff       	call   c000080c <strcpy>
c0019058:	5f                   	pop    edi
c0019059:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001905f:	5d                   	pop    ebp
c0019060:	66 c1 e8 06          	shr    ax,0x6
c0019064:	0f b6 c0             	movzx  eax,al
c0019067:	50                   	push   eax
c0019068:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001906e:	c1 e8 0e             	shr    eax,0xe
c0019071:	0f b6 c0             	movzx  eax,al
c0019074:	50                   	push   eax
c0019075:	e8 9c f4 ff ff       	call   c0018516 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001907a:	5a                   	pop    edx
c001907b:	59                   	pop    ecx
c001907c:	50                   	push   eax
c001907d:	56                   	push   esi
c001907e:	e8 c9 78 fe ff       	call   c000094c <strcat>
c0019083:	5f                   	pop    edi
c0019084:	5d                   	pop    ebp
c0019085:	56                   	push   esi
c0019086:	53                   	push   ebx
c0019087:	e8 36 ad ff ff       	call   c0013dc2 <Device::setName(char const*)>
c001908c:	58                   	pop    eax
c001908d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019093:	5a                   	pop    edx
c0019094:	68 bc b5 02 c0       	push   0xc002b5bc
c0019099:	50                   	push   eax
c001909a:	e8 f9 77 fe ff       	call   c0000898 <strcmp>
c001909f:	83 c4 10             	add    esp,0x10
c00190a2:	85 c0                	test   eax,eax
c00190a4:	0f 85 71 03 00 00    	jne    c001941b <CPU::detectFeatures()+0x9e3>
c00190aa:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00190b1:	e9 65 03 00 00       	jmp    c001941b <CPU::detectFeatures()+0x9e3>
c00190b6:	83 f8 02             	cmp    eax,0x2
c00190b9:	0f 85 b5 00 00 00    	jne    c0019174 <CPU::detectFeatures()+0x73c>
c00190bf:	57                   	push   edi
c00190c0:	57                   	push   edi
c00190c1:	68 ce b5 02 c0       	push   0xc002b5ce
c00190c6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00190ca:	56                   	push   esi
c00190cb:	e8 3c 77 fe ff       	call   c000080c <strcpy>
c00190d0:	5d                   	pop    ebp
c00190d1:	58                   	pop    eax
c00190d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190d8:	66 c1 e8 06          	shr    ax,0x6
c00190dc:	0f b6 c0             	movzx  eax,al
c00190df:	50                   	push   eax
c00190e0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190e6:	c1 e8 0e             	shr    eax,0xe
c00190e9:	0f b6 c0             	movzx  eax,al
c00190ec:	50                   	push   eax
c00190ed:	e8 90 f2 ff ff       	call   c0018382 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00190f2:	5a                   	pop    edx
c00190f3:	59                   	pop    ecx
c00190f4:	50                   	push   eax
c00190f5:	56                   	push   esi
c00190f6:	e8 51 78 fe ff       	call   c000094c <strcat>
c00190fb:	5f                   	pop    edi
c00190fc:	5d                   	pop    ebp
c00190fd:	56                   	push   esi
c00190fe:	53                   	push   ebx
c00190ff:	e8 be ac ff ff       	call   c0013dc2 <Device::setName(char const*)>
c0019104:	58                   	pop    eax
c0019105:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001910b:	5a                   	pop    edx
c001910c:	68 d3 b5 02 c0       	push   0xc002b5d3
c0019111:	50                   	push   eax
c0019112:	e8 81 77 fe ff       	call   c0000898 <strcmp>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	85 c0                	test   eax,eax
c001911c:	75 20                	jne    c001913e <CPU::detectFeatures()+0x706>
c001911e:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c0019124:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001912a:	a8 01                	test   al,0x1
c001912c:	74 10                	je     c001913e <CPU::detectFeatures()+0x706>
c001912e:	83 e0 fe             	and    eax,0xfffffffe
c0019131:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019137:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001913e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019144:	c1 e8 0e             	shr    eax,0xe
c0019147:	3c 05                	cmp    al,0x5
c0019149:	0f 85 cc 02 00 00    	jne    c001941b <CPU::detectFeatures()+0x9e3>
c001914f:	56                   	push   esi
c0019150:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019156:	83 e0 0f             	and    eax,0xf
c0019159:	50                   	push   eax
c001915a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019160:	66 c1 e8 06          	shr    ax,0x6
c0019164:	0f b6 c0             	movzx  eax,al
c0019167:	50                   	push   eax
c0019168:	6a 05                	push   0x5
c001916a:	e8 89 f6 ff ff       	call   c00187f8 <CPU::AMD_K6_writeback(int, int, int)>
c001916f:	e9 1f 02 00 00       	jmp    c0019393 <CPU::detectFeatures()+0x95b>
c0019174:	8d 50 fd             	lea    edx,[eax-0x3]
c0019177:	83 fa 01             	cmp    edx,0x1
c001917a:	76 09                	jbe    c0019185 <CPU::detectFeatures()+0x74d>
c001917c:	83 f8 06             	cmp    eax,0x6
c001917f:	0f 85 91 01 00 00    	jne    c0019316 <CPU::detectFeatures()+0x8de>
c0019185:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001918b:	c1 ea 0e             	shr    edx,0xe
c001918e:	80 fa 05             	cmp    dl,0x5
c0019191:	75 7b                	jne    c001920e <CPU::detectFeatures()+0x7d6>
c0019193:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019199:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001919e:	66 81 fa 00 01       	cmp    dx,0x100
c00191a3:	75 0c                	jne    c00191b1 <CPU::detectFeatures()+0x779>
c00191a5:	51                   	push   ecx
c00191a6:	51                   	push   ecx
c00191a7:	68 da b5 02 c0       	push   0xc002b5da
c00191ac:	e9 dc 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c00191b1:	66 81 fa 00 02       	cmp    dx,0x200
c00191b6:	75 0c                	jne    c00191c4 <CPU::detectFeatures()+0x78c>
c00191b8:	52                   	push   edx
c00191b9:	52                   	push   edx
c00191ba:	68 ed b5 02 c0       	push   0xc002b5ed
c00191bf:	e9 c9 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c00191c4:	66 81 fa 40 02       	cmp    dx,0x240
c00191c9:	75 0c                	jne    c00191d7 <CPU::detectFeatures()+0x79f>
c00191cb:	50                   	push   eax
c00191cc:	50                   	push   eax
c00191cd:	68 ff b5 02 c0       	push   0xc002b5ff
c00191d2:	e9 b6 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c00191d7:	83 f8 06             	cmp    eax,0x6
c00191da:	75 0c                	jne    c00191e8 <CPU::detectFeatures()+0x7b0>
c00191dc:	50                   	push   eax
c00191dd:	50                   	push   eax
c00191de:	68 11 b6 02 c0       	push   0xc002b611
c00191e3:	e9 a5 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c00191e8:	83 f8 04             	cmp    eax,0x4
c00191eb:	75 0c                	jne    c00191f9 <CPU::detectFeatures()+0x7c1>
c00191ed:	50                   	push   eax
c00191ee:	50                   	push   eax
c00191ef:	68 1d b6 02 c0       	push   0xc002b61d
c00191f4:	e9 94 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c00191f9:	83 f8 03             	cmp    eax,0x3
c00191fc:	0f 85 19 02 00 00    	jne    c001941b <CPU::detectFeatures()+0x9e3>
c0019202:	50                   	push   eax
c0019203:	50                   	push   eax
c0019204:	68 25 b6 02 c0       	push   0xc002b625
c0019209:	e9 7f 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c001920e:	80 fa 06             	cmp    dl,0x6
c0019211:	0f 85 db 00 00 00    	jne    c00192f2 <CPU::detectFeatures()+0x8ba>
c0019217:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001921d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019222:	66 81 fa 80 01       	cmp    dx,0x180
c0019227:	75 0c                	jne    c0019235 <CPU::detectFeatures()+0x7fd>
c0019229:	50                   	push   eax
c001922a:	50                   	push   eax
c001922b:	68 30 b6 02 c0       	push   0xc002b630
c0019230:	e9 58 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019235:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001923b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019240:	75 0c                	jne    c001924e <CPU::detectFeatures()+0x816>
c0019242:	50                   	push   eax
c0019243:	50                   	push   eax
c0019244:	68 40 b6 02 c0       	push   0xc002b640
c0019249:	e9 3f 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c001924e:	66 81 fa 40 02       	cmp    dx,0x240
c0019253:	75 0c                	jne    c0019261 <CPU::detectFeatures()+0x829>
c0019255:	55                   	push   ebp
c0019256:	55                   	push   ebp
c0019257:	68 47 b6 02 c0       	push   0xc002b647
c001925c:	e9 2c 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019261:	66 81 fa 80 02       	cmp    dx,0x280
c0019266:	75 0c                	jne    c0019274 <CPU::detectFeatures()+0x83c>
c0019268:	57                   	push   edi
c0019269:	57                   	push   edi
c001926a:	68 50 b6 02 c0       	push   0xc002b650
c001926f:	e9 19 01 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019274:	66 81 fa 40 03       	cmp    dx,0x340
c0019279:	74 ed                	je     c0019268 <CPU::detectFeatures()+0x830>
c001927b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019280:	75 0c                	jne    c001928e <CPU::detectFeatures()+0x856>
c0019282:	56                   	push   esi
c0019283:	56                   	push   esi
c0019284:	68 57 b6 02 c0       	push   0xc002b657
c0019289:	e9 ff 00 00 00       	jmp    c001938d <CPU::detectFeatures()+0x955>
c001928e:	83 f8 06             	cmp    eax,0x6
c0019291:	0f 84 45 ff ff ff    	je     c00191dc <CPU::detectFeatures()+0x7a4>
c0019297:	83 f8 04             	cmp    eax,0x4
c001929a:	0f 84 4d ff ff ff    	je     c00191ed <CPU::detectFeatures()+0x7b5>
c00192a0:	83 f8 03             	cmp    eax,0x3
c00192a3:	0f 85 72 01 00 00    	jne    c001941b <CPU::detectFeatures()+0x9e3>
c00192a9:	51                   	push   ecx
c00192aa:	51                   	push   ecx
c00192ab:	68 60 b6 02 c0       	push   0xc002b660
c00192b0:	53                   	push   ebx
c00192b1:	e8 0c ab ff ff       	call   c0013dc2 <Device::setName(char const*)>
c00192b6:	b1 c1                	mov    cl,0xc1
c00192b8:	88 c8                	mov    al,cl
c00192ba:	e6 22                	out    0x22,al
c00192bc:	e4 23                	in     al,0x23
c00192be:	88 c2                	mov    dl,al
c00192c0:	88 c8                	mov    al,cl
c00192c2:	e6 22                	out    0x22,al
c00192c4:	88 d0                	mov    al,dl
c00192c6:	83 c8 10             	or     eax,0x10
c00192c9:	e6 23                	out    0x23,al
c00192cb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00192d2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00192d5:	89 d0                	mov    eax,edx
c00192d7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00192dd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00192e1:	40                   	inc    eax
c00192e2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00192e8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00192ed:	e9 a1 00 00 00       	jmp    c0019393 <CPU::detectFeatures()+0x95b>
c00192f2:	83 f8 06             	cmp    eax,0x6
c00192f5:	0f 84 e1 fe ff ff    	je     c00191dc <CPU::detectFeatures()+0x7a4>
c00192fb:	83 f8 04             	cmp    eax,0x4
c00192fe:	0f 84 e9 fe ff ff    	je     c00191ed <CPU::detectFeatures()+0x7b5>
c0019304:	83 f8 03             	cmp    eax,0x3
c0019307:	0f 85 0e 01 00 00    	jne    c001941b <CPU::detectFeatures()+0x9e3>
c001930d:	52                   	push   edx
c001930e:	52                   	push   edx
c001930f:	68 6b b6 02 c0       	push   0xc002b66b
c0019314:	eb 77                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019316:	83 f8 07             	cmp    eax,0x7
c0019319:	75 09                	jne    c0019324 <CPU::detectFeatures()+0x8ec>
c001931b:	50                   	push   eax
c001931c:	50                   	push   eax
c001931d:	68 75 b6 02 c0       	push   0xc002b675
c0019322:	eb 69                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019324:	83 f8 0a             	cmp    eax,0xa
c0019327:	75 09                	jne    c0019332 <CPU::detectFeatures()+0x8fa>
c0019329:	50                   	push   eax
c001932a:	50                   	push   eax
c001932b:	68 80 b6 02 c0       	push   0xc002b680
c0019330:	eb 5b                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019332:	83 f8 0b             	cmp    eax,0xb
c0019335:	75 09                	jne    c0019340 <CPU::detectFeatures()+0x908>
c0019337:	50                   	push   eax
c0019338:	50                   	push   eax
c0019339:	68 88 b6 02 c0       	push   0xc002b688
c001933e:	eb 4d                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019340:	83 f8 08             	cmp    eax,0x8
c0019343:	75 09                	jne    c001934e <CPU::detectFeatures()+0x916>
c0019345:	50                   	push   eax
c0019346:	50                   	push   eax
c0019347:	68 91 b6 02 c0       	push   0xc002b691
c001934c:	eb 3f                	jmp    c001938d <CPU::detectFeatures()+0x955>
c001934e:	83 f8 09             	cmp    eax,0x9
c0019351:	75 09                	jne    c001935c <CPU::detectFeatures()+0x924>
c0019353:	50                   	push   eax
c0019354:	50                   	push   eax
c0019355:	68 99 b6 02 c0       	push   0xc002b699
c001935a:	eb 31                	jmp    c001938d <CPU::detectFeatures()+0x955>
c001935c:	83 f8 05             	cmp    eax,0x5
c001935f:	75 09                	jne    c001936a <CPU::detectFeatures()+0x932>
c0019361:	50                   	push   eax
c0019362:	50                   	push   eax
c0019363:	68 a1 b6 02 c0       	push   0xc002b6a1
c0019368:	eb 23                	jmp    c001938d <CPU::detectFeatures()+0x955>
c001936a:	83 f8 0c             	cmp    eax,0xc
c001936d:	75 09                	jne    c0019378 <CPU::detectFeatures()+0x940>
c001936f:	55                   	push   ebp
c0019370:	55                   	push   ebp
c0019371:	68 af b6 02 c0       	push   0xc002b6af
c0019376:	eb 15                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019378:	83 f8 0d             	cmp    eax,0xd
c001937b:	75 09                	jne    c0019386 <CPU::detectFeatures()+0x94e>
c001937d:	57                   	push   edi
c001937e:	57                   	push   edi
c001937f:	68 ba b6 02 c0       	push   0xc002b6ba
c0019384:	eb 07                	jmp    c001938d <CPU::detectFeatures()+0x955>
c0019386:	56                   	push   esi
c0019387:	56                   	push   esi
c0019388:	68 ce b6 02 c0       	push   0xc002b6ce
c001938d:	53                   	push   ebx
c001938e:	e8 2f aa ff ff       	call   c0013dc2 <Device::setName(char const*)>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	e9 80 00 00 00       	jmp    c001941b <CPU::detectFeatures()+0x9e3>
c001939b:	51                   	push   ecx
c001939c:	51                   	push   ecx
c001939d:	68 1a b5 02 c0       	push   0xc002b51a
c00193a2:	55                   	push   ebp
c00193a3:	e8 64 74 fe ff       	call   c000080c <strcpy>
c00193a8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193b2:	e8 f7 6e fe ff       	call   c00002ae <is486>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	85 c0                	test   eax,eax
c00193bc:	74 2b                	je     c00193e9 <CPU::detectFeatures()+0x9b1>
c00193be:	52                   	push   edx
c00193bf:	52                   	push   edx
c00193c0:	68 da b6 02 c0       	push   0xc002b6da
c00193c5:	53                   	push   ebx
c00193c6:	e8 f7 a9 ff ff       	call   c0013dc2 <Device::setName(char const*)>
c00193cb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193d2:	0f 20 c0             	mov    eax,cr0
c00193d5:	83 e0 14             	and    eax,0x14
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	83 f8 04             	cmp    eax,0x4
c00193de:	75 1f                	jne    c00193ff <CPU::detectFeatures()+0x9c7>
c00193e0:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00193e7:	eb 32                	jmp    c001941b <CPU::detectFeatures()+0x9e3>
c00193e9:	50                   	push   eax
c00193ea:	50                   	push   eax
c00193eb:	68 e5 b6 02 c0       	push   0xc002b6e5
c00193f0:	53                   	push   ebx
c00193f1:	e8 cc a9 ff ff       	call   c0013dc2 <Device::setName(char const*)>
c00193f6:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00193fd:	eb d3                	jmp    c00193d2 <CPU::detectFeatures()+0x99a>
c00193ff:	e8 85 6e fe ff       	call   c0000289 <hasLegacyFPU>
c0019404:	83 e0 01             	and    eax,0x1
c0019407:	8d 14 00             	lea    edx,[eax+eax*1]
c001940a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019410:	83 e0 fd             	and    eax,0xfffffffd
c0019413:	09 d0                	or     eax,edx
c0019415:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001941b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019422:	83 c4 4c             	add    esp,0x4c
c0019425:	5b                   	pop    ebx
c0019426:	5e                   	pop    esi
c0019427:	5f                   	pop    edi
c0019428:	5d                   	pop    ebp
c0019429:	c3                   	ret    

c001942a <CPU::setupSMEP()>:
c001942a:	0f 20 e0             	mov    eax,cr4
c001942d:	0d 00 00 10 00       	or     eax,0x100000
c0019432:	0f 22 e0             	mov    cr4,eax
c0019435:	c3                   	ret    

c0019436 <CPU::setupUMIP()>:
c0019436:	0f 20 e0             	mov    eax,cr4
c0019439:	80 cc 08             	or     ah,0x8
c001943c:	0f 22 e0             	mov    cr4,eax
c001943f:	c3                   	ret    

c0019440 <CPU::setupTSC()>:
c0019440:	0f 20 e0             	mov    eax,cr4
c0019443:	83 c8 04             	or     eax,0x4
c0019446:	0f 22 e0             	mov    cr4,eax
c0019449:	c3                   	ret    

c001944a <CPU::setupLargePages()>:
c001944a:	0f 20 e0             	mov    eax,cr4
c001944d:	83 c8 10             	or     eax,0x10
c0019450:	0f 22 e0             	mov    cr4,eax
c0019453:	c3                   	ret    

c0019454 <CPU::setupPAT()>:
c0019454:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0019459:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019460:	74 2c                	je     c001948e <CPU::setupPAT()+0x3a>
c0019462:	53                   	push   ebx
c0019463:	83 ec 10             	sub    esp,0x10
c0019466:	68 77 02 00 00       	push   0x277
c001946b:	50                   	push   eax
c001946c:	e8 cf 56 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019471:	83 e2 f8             	and    edx,0xfffffff8
c0019474:	83 ca 01             	or     edx,0x1
c0019477:	52                   	push   edx
c0019478:	50                   	push   eax
c0019479:	68 77 02 00 00       	push   0x277
c001947e:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c0019484:	e8 e3 56 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c0019489:	83 c4 28             	add    esp,0x28
c001948c:	5b                   	pop    ebx
c001948d:	c3                   	ret    
c001948e:	c3                   	ret    
c001948f:	90                   	nop

c0019490 <CPU::setupMTRR()>:
c0019490:	c3                   	ret    
c0019491:	90                   	nop

c0019492 <CPU::setupGlobalPages()>:
c0019492:	0f 20 e0             	mov    eax,cr4
c0019495:	0c 80                	or     al,0x80
c0019497:	0f 22 e0             	mov    cr4,eax
c001949a:	c3                   	ret    
c001949b:	90                   	nop

c001949c <CPU::allowUsermodeDataAccess()>:
c001949c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194a0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00194a7:	74 03                	je     c00194ac <CPU::allowUsermodeDataAccess()+0x10>
c00194a9:	0f 01 cb             	stac   
c00194ac:	c3                   	ret    
c00194ad:	90                   	nop

c00194ae <CPU::prohibitUsermodeDataAccess()>:
c00194ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194b2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00194b9:	74 03                	je     c00194be <CPU::prohibitUsermodeDataAccess()+0x10>
c00194bb:	0f 01 ca             	clac   
c00194be:	c3                   	ret    
c00194bf:	90                   	nop

c00194c0 <CPU::setupSMAP()>:
c00194c0:	0f 20 e0             	mov    eax,cr4
c00194c3:	0d 00 00 20 00       	or     eax,0x200000
c00194c8:	0f 22 e0             	mov    cr4,eax
c00194cb:	eb e1                	jmp    c00194ae <CPU::prohibitUsermodeDataAccess()>
c00194cd:	90                   	nop

c00194ce <CPU::setupFeatures()>:
c00194ce:	83 ec 0c             	sub    esp,0xc
c00194d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194d5:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00194dc:	74 07                	je     c00194e5 <CPU::setupFeatures()+0x17>
c00194de:	52                   	push   edx
c00194df:	e8 46 ff ff ff       	call   c001942a <CPU::setupSMEP()>
c00194e4:	58                   	pop    eax
c00194e5:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00194ec:	74 07                	je     c00194f5 <CPU::setupFeatures()+0x27>
c00194ee:	52                   	push   edx
c00194ef:	e8 cc ff ff ff       	call   c00194c0 <CPU::setupSMAP()>
c00194f4:	58                   	pop    eax
c00194f5:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00194fc:	74 07                	je     c0019505 <CPU::setupFeatures()+0x37>
c00194fe:	52                   	push   edx
c00194ff:	e8 32 ff ff ff       	call   c0019436 <CPU::setupUMIP()>
c0019504:	58                   	pop    eax
c0019505:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001950c:	74 07                	je     c0019515 <CPU::setupFeatures()+0x47>
c001950e:	52                   	push   edx
c001950f:	e8 2c ff ff ff       	call   c0019440 <CPU::setupTSC()>
c0019514:	58                   	pop    eax
c0019515:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001951c:	74 07                	je     c0019525 <CPU::setupFeatures()+0x57>
c001951e:	52                   	push   edx
c001951f:	e8 26 ff ff ff       	call   c001944a <CPU::setupLargePages()>
c0019524:	59                   	pop    ecx
c0019525:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001952c:	74 07                	je     c0019535 <CPU::setupFeatures()+0x67>
c001952e:	52                   	push   edx
c001952f:	e8 5e ff ff ff       	call   c0019492 <CPU::setupGlobalPages()>
c0019534:	58                   	pop    eax
c0019535:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001953c:	74 0c                	je     c001954a <CPU::setupFeatures()+0x7c>
c001953e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019542:	83 c4 0c             	add    esp,0xc
c0019545:	e9 0a ff ff ff       	jmp    c0019454 <CPU::setupPAT()>
c001954a:	83 c4 0c             	add    esp,0xc
c001954d:	c3                   	ret    

c001954e <CPU::open(int, int, void*)>:
c001954e:	57                   	push   edi
c001954f:	56                   	push   esi
c0019550:	53                   	push   ebx
c0019551:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019555:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019559:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019568:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001956e:	50                   	push   eax
c001956f:	e8 ba 58 ff ff       	call   c000ee2e <GDT::setup()>
c0019574:	83 c4 0c             	add    esp,0xc
c0019577:	6a 00                	push   0x0
c0019579:	68 ef be ad de       	push   0xdeadbeef
c001957e:	57                   	push   edi
c001957f:	e8 22 76 ff ff       	call   c0010ba6 <TSS::setup(unsigned long, unsigned long)>
c0019584:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019587:	e8 fa 75 ff ff       	call   c0010b86 <TSS::flush()>
c001958c:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019592:	89 04 24             	mov    DWORD PTR [esp],eax
c0019595:	e8 f8 5a ff ff       	call   c000f092 <IDT::setup()>
c001959a:	b8 00 04 00 00       	mov    eax,0x400
c001959f:	0f 23 f8             	mov    db7,eax
c00195a2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00195ac:	e8 e4 63 ff ff       	call   c000f995 <Phys::allocatePage()>
c00195b1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00195b7:	89 30                	mov    DWORD PTR [eax],esi
c00195b9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00195bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00195c2:	58                   	pop    eax
c00195c3:	5a                   	pop    edx
c00195c4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00195ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00195ce:	e8 79 87 ff ff       	call   c0011d4c <VAS::setCPUSpecific(unsigned long)>
c00195d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00195d6:	e8 5d f4 ff ff       	call   c0018a38 <CPU::detectFeatures()>
c00195db:	e8 35 bc ff ff       	call   c0015215 <setupInterruptController()>
c00195e0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00195e6:	a1 20 db 02 c0       	mov    eax,ds:0xc002db20
c00195eb:	83 e0 10             	and    eax,0x10
c00195ee:	83 f8 01             	cmp    eax,0x1
c00195f1:	19 c0                	sbb    eax,eax
c00195f3:	83 e0 46             	and    eax,0x46
c00195f6:	83 c0 1e             	add    eax,0x1e
c00195f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00195fc:	e8 02 d2 ff ff       	call   c0016803 <setupTimer(int)>
c0019601:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019607:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001960a:	e8 bf fe ff ff       	call   c00194ce <CPU::setupFeatures()>
c001960f:	83 c4 10             	add    esp,0x10
c0019612:	31 c0                	xor    eax,eax
c0019614:	5b                   	pop    ebx
c0019615:	5e                   	pop    esi
c0019616:	5f                   	pop    edi
c0019617:	c3                   	ret    

c0019618 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019618:	57                   	push   edi
c0019619:	56                   	push   esi
c001961a:	53                   	push   ebx
c001961b:	51                   	push   ecx
c001961c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019620:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019623:	0f 02 c0             	lar    eax,ax
c0019626:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019629:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001962d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019630:	88 ca                	mov    dl,cl
c0019632:	c0 ea 06             	shr    dl,0x6
c0019635:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019639:	89 ca                	mov    edx,ecx
c001963b:	66 c1 ea 03          	shr    dx,0x3
c001963f:	83 e2 07             	and    edx,0x7
c0019642:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019647:	88 17                	mov    BYTE PTR [edi],dl
c0019649:	0f 84 a6 01 00 00    	je     c00197f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001964f:	83 e1 07             	and    ecx,0x7
c0019652:	80 f9 04             	cmp    cl,0x4
c0019655:	0f 84 98 00 00 00    	je     c00196f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001965b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019660:	0f 95 c0             	setne  al
c0019663:	80 f9 05             	cmp    cl,0x5
c0019666:	0f 95 c2             	setne  dl
c0019669:	08 c2                	or     dl,al
c001966b:	74 79                	je     c00196e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001966d:	84 c9                	test   cl,cl
c001966f:	75 05                	jne    c0019676 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019671:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019674:	eb 3c                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019676:	80 f9 01             	cmp    cl,0x1
c0019679:	75 05                	jne    c0019680 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001967b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001967e:	eb 32                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019680:	80 f9 02             	cmp    cl,0x2
c0019683:	75 05                	jne    c001968a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019685:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019688:	eb 28                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001968a:	31 c0                	xor    eax,eax
c001968c:	80 f9 03             	cmp    cl,0x3
c001968f:	75 05                	jne    c0019696 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019691:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019694:	eb 1c                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019696:	80 f9 05             	cmp    cl,0x5
c0019699:	75 05                	jne    c00196a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001969b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001969e:	eb 12                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196a0:	80 f9 06             	cmp    cl,0x6
c00196a3:	75 05                	jne    c00196aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00196a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196a8:	eb 08                	jmp    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196aa:	80 f9 07             	cmp    cl,0x7
c00196ad:	75 03                	jne    c00196b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00196af:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196b2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196b7:	75 10                	jne    c00196c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00196b9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00196bd:	b9 03 00 00 00       	mov    ecx,0x3
c00196c2:	01 d0                	add    eax,edx
c00196c4:	e9 37 01 00 00       	jmp    c0019800 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196c9:	b9 02 00 00 00       	mov    ecx,0x2
c00196ce:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00196d3:	0f 85 27 01 00 00    	jne    c0019800 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196d9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00196dc:	b9 06 00 00 00       	mov    ecx,0x6
c00196e1:	e9 1a 01 00 00       	jmp    c0019800 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196e6:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00196e9:	b9 06 00 00 00       	mov    ecx,0x6
c00196ee:	e9 0f 01 00 00       	jmp    c0019802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196f3:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00196f6:	88 ca                	mov    dl,cl
c00196f8:	c0 ea 06             	shr    dl,0x6
c00196fb:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00196ff:	89 ca                	mov    edx,ecx
c0019701:	66 c1 ea 03          	shr    dx,0x3
c0019705:	83 e2 07             	and    edx,0x7
c0019708:	80 e1 07             	and    cl,0x7
c001970b:	75 05                	jne    c0019712 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001970d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019710:	eb 4c                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019712:	80 f9 01             	cmp    cl,0x1
c0019715:	75 05                	jne    c001971c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019717:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001971a:	eb 42                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001971c:	80 f9 02             	cmp    cl,0x2
c001971f:	75 05                	jne    c0019726 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019721:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019724:	eb 38                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019726:	80 f9 03             	cmp    cl,0x3
c0019729:	75 05                	jne    c0019730 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001972b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001972e:	eb 2e                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019730:	80 f9 04             	cmp    cl,0x4
c0019733:	75 12                	jne    c0019747 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019735:	f6 c4 60             	test   ah,0x60
c0019738:	75 08                	jne    c0019742 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001973a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001973d:	8d 78 14             	lea    edi,[eax+0x14]
c0019740:	eb 1c                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019742:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019745:	eb 17                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019747:	80 f9 05             	cmp    cl,0x5
c001974a:	75 05                	jne    c0019751 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001974c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001974f:	eb 0d                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019751:	80 f9 06             	cmp    cl,0x6
c0019754:	75 05                	jne    c001975b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019756:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019759:	eb 03                	jmp    c001975e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001975b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001975e:	84 d2                	test   dl,dl
c0019760:	75 05                	jne    c0019767 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019762:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019765:	eb 3c                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019767:	80 fa 01             	cmp    dl,0x1
c001976a:	75 05                	jne    c0019771 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001976c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001976f:	eb 32                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019771:	80 fa 02             	cmp    dl,0x2
c0019774:	75 05                	jne    c001977b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019776:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019779:	eb 28                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001977b:	80 fa 03             	cmp    dl,0x3
c001977e:	75 05                	jne    c0019785 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019780:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019783:	eb 1e                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019785:	31 c0                	xor    eax,eax
c0019787:	80 fa 04             	cmp    dl,0x4
c001978a:	74 17                	je     c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001978c:	80 fa 05             	cmp    dl,0x5
c001978f:	75 05                	jne    c0019796 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019791:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019794:	eb 0d                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019796:	80 fa 06             	cmp    dl,0x6
c0019799:	75 05                	jne    c00197a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001979b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001979e:	eb 03                	jmp    c00197a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00197a0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00197a3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00197a8:	0f 94 c2             	sete   dl
c00197ab:	80 f9 05             	cmp    cl,0x5
c00197ae:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00197b2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00197b7:	d3 e0                	shl    eax,cl
c00197b9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00197bd:	74 0a                	je     c00197c9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00197bf:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00197c2:	b9 07 00 00 00       	mov    ecx,0x7
c00197c7:	eb 37                	jmp    c0019800 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00197c9:	01 f8                	add    eax,edi
c00197cb:	b9 03 00 00 00       	mov    ecx,0x3
c00197d0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00197d5:	74 2b                	je     c0019802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197d7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00197dc:	75 0d                	jne    c00197eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00197de:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00197e2:	01 c8                	add    eax,ecx
c00197e4:	b9 04 00 00 00       	mov    ecx,0x4
c00197e9:	eb 17                	jmp    c0019802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197eb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00197ee:	b9 07 00 00 00       	mov    ecx,0x7
c00197f3:	eb 0d                	jmp    c0019802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00197f5:	b9 02 00 00 00       	mov    ecx,0x2
c00197fa:	b2 01                	mov    dl,0x1
c00197fc:	31 c0                	xor    eax,eax
c00197fe:	eb 02                	jmp    c0019802 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019800:	31 d2                	xor    edx,edx
c0019802:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019806:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019808:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001980c:	88 11                	mov    BYTE PTR [ecx],dl
c001980e:	5a                   	pop    edx
c001980f:	5b                   	pop    ebx
c0019810:	5e                   	pop    esi
c0019811:	5f                   	pop    edi
c0019812:	c3                   	ret    

c0019813 <Krnl::smpEntry()>:
c0019813:	eb fe                	jmp    c0019813 <Krnl::smpEntry()>

c0019815 <Krnl::startCPU(int)>:
c0019815:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001981a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019821:	0f 84 36 01 00 00    	je     c001995d <Krnl::startCPU(int)+0x148>
c0019827:	53                   	push   ebx
c0019828:	83 ec 10             	sub    esp,0x10
c001982b:	fa                   	cli    
c001982c:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c0019832:	6a 1b                	push   0x1b
c0019834:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c001983a:	e8 01 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001983f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019844:	89 c3                	mov    ebx,eax
c0019846:	58                   	pop    eax
c0019847:	5a                   	pop    edx
c0019848:	53                   	push   ebx
c0019849:	68 1c b7 02 c0       	push   0xc002b71c
c001984e:	e8 40 8f ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0019853:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001985d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019861:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001986b:	c1 e0 18             	shl    eax,0x18
c001986e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019874:	83 c4 10             	add    esp,0x10
c0019877:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001987d:	09 c2                	or     edx,eax
c001987f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019885:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001988b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019891:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019897:	80 cd c5             	or     ch,0xc5
c001989a:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00198a0:	f3 90                	pause  
c00198a2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198a4:	0f ba e1 0c          	bt     ecx,0xc
c00198a8:	72 f6                	jb     c00198a0 <Krnl::startCPU(int)+0x8b>
c00198aa:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198b0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198b6:	09 c1                	or     ecx,eax
c00198b8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00198be:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00198c4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00198ca:	80 cd 85             	or     ch,0x85
c00198cd:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00198d3:	f3 90                	pause  
c00198d5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00198d7:	0f ba e1 0c          	bt     ecx,0xc
c00198db:	72 f6                	jb     c00198d3 <Krnl::startCPU(int)+0xbe>
c00198dd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00198e7:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00198ed:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00198f3:	09 c1                	or     ecx,eax
c00198f5:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00198fb:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019901:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019907:	81 c9 02 06 00 00    	or     ecx,0x602
c001990d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019913:	f3 90                	pause  
c0019915:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019917:	0f ba e1 0c          	bt     ecx,0xc
c001991b:	72 f6                	jb     c0019913 <Krnl::startCPU(int)+0xfe>
c001991d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019927:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001992d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019933:	09 c8                	or     eax,ecx
c0019935:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001993b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019941:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019946:	0d 02 06 00 00       	or     eax,0x602
c001994b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019951:	f3 90                	pause  
c0019953:	8b 02                	mov    eax,DWORD PTR [edx]
c0019955:	0f ba e0 0c          	bt     eax,0xc
c0019959:	72 f6                	jb     c0019951 <Krnl::startCPU(int)+0x13c>
c001995b:	eb fe                	jmp    c001995b <Krnl::startCPU(int)+0x146>
c001995d:	c3                   	ret    

c001995e <Krnl::startCPUs()>:
c001995e:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0019963:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019969:	88 c2                	mov    dl,al
c001996b:	83 e2 0a             	and    edx,0xa
c001996e:	80 fa 0a             	cmp    dl,0xa
c0019971:	75 09                	jne    c001997c <Krnl::startCPUs()+0x1e>
c0019973:	a8 01                	test   al,0x1
c0019975:	74 05                	je     c001997c <Krnl::startCPUs()+0x1e>
c0019977:	e9 1f 68 fe ff       	jmp    c000019b <prepareTramp>
c001997c:	c3                   	ret    
c001997d:	90                   	nop

c001997e <EnvVarContainer::getEnv(char const*)>:
c001997e:	57                   	push   edi
c001997f:	56                   	push   esi
c0019980:	53                   	push   ebx
c0019981:	31 db                	xor    ebx,ebx
c0019983:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019987:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019989:	7e 2b                	jle    c00199b6 <EnvVarContainer::getEnv(char const*)+0x38>
c001998b:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019992:	50                   	push   eax
c0019993:	50                   	push   eax
c0019994:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019997:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001999a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001999e:	e8 f5 6e fe ff       	call   c0000898 <strcmp>
c00199a3:	83 c4 10             	add    esp,0x10
c00199a6:	85 c0                	test   eax,eax
c00199a8:	75 09                	jne    c00199b3 <EnvVarContainer::getEnv(char const*)+0x35>
c00199aa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00199ad:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00199b1:	eb 05                	jmp    c00199b8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00199b3:	43                   	inc    ebx
c00199b4:	eb d1                	jmp    c0019987 <EnvVarContainer::getEnv(char const*)+0x9>
c00199b6:	31 c0                	xor    eax,eax
c00199b8:	5b                   	pop    ebx
c00199b9:	5e                   	pop    esi
c00199ba:	5f                   	pop    edi
c00199bb:	c3                   	ret    

c00199bc <EnvVarContainer::setEnv(char const*, char const*)>:
c00199bc:	55                   	push   ebp
c00199bd:	57                   	push   edi
c00199be:	56                   	push   esi
c00199bf:	53                   	push   ebx
c00199c0:	83 ec 28             	sub    esp,0x28
c00199c3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00199c7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00199cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00199cf:	56                   	push   esi
c00199d0:	e8 97 6d fe ff       	call   c000076c <strlen>
c00199d5:	40                   	inc    eax
c00199d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d9:	e8 bb 5b ff ff       	call   c000f599 <malloc>
c00199de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199e5:	e8 82 6d fe ff       	call   c000076c <strlen>
c00199ea:	40                   	inc    eax
c00199eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ee:	e8 a6 5b ff ff       	call   c000f599 <malloc>
c00199f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199fa:	e8 6d 6d fe ff       	call   c000076c <strlen>
c00199ff:	83 c4 0c             	add    esp,0xc
c0019a02:	40                   	inc    eax
c0019a03:	50                   	push   eax
c0019a04:	6a 00                	push   0x0
c0019a06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019a0a:	e8 41 6d fe ff       	call   c0000750 <memset>
c0019a0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019a12:	e8 55 6d fe ff       	call   c000076c <strlen>
c0019a17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019a1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a23:	89 de                	mov    esi,ebx
c0019a25:	e8 42 6d fe ff       	call   c000076c <strlen>
c0019a2a:	83 c4 0c             	add    esp,0xc
c0019a2d:	40                   	inc    eax
c0019a2e:	50                   	push   eax
c0019a2f:	6a 00                	push   0x0
c0019a31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a35:	e8 16 6d fe ff       	call   c0000750 <memset>
c0019a3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a3d:	e8 2a 6d fe ff       	call   c000076c <strlen>
c0019a42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019a46:	8d 48 01             	lea    ecx,[eax+0x1]
c0019a49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a4e:	40                   	inc    eax
c0019a4f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019a52:	c1 e0 03             	shl    eax,0x3
c0019a55:	5a                   	pop    edx
c0019a56:	59                   	pop    ecx
c0019a57:	50                   	push   eax
c0019a58:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a5b:	e8 25 5b ff ff       	call   c000f585 <realloc>
c0019a60:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019a64:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019a67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019a6a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019a6e:	b9 08 00 00 00       	mov    ecx,0x8
c0019a73:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019a75:	83 c4 2c             	add    esp,0x2c
c0019a78:	5b                   	pop    ebx
c0019a79:	5e                   	pop    esi
c0019a7a:	5f                   	pop    edi
c0019a7b:	5d                   	pop    ebp
c0019a7c:	c3                   	ret    
c0019a7d:	90                   	nop

c0019a7e <EnvVarContainer::deleteEnv(char const*)>:
c0019a7e:	c3                   	ret    
c0019a7f:	90                   	nop

c0019a80 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019a80:	55                   	push   ebp
c0019a81:	57                   	push   edi
c0019a82:	56                   	push   esi
c0019a83:	53                   	push   ebx
c0019a84:	81 ec 38 01 00 00    	sub    esp,0x138
c0019a8a:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019a91:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019a98:	68 14 01 00 00       	push   0x114
c0019a9d:	e8 f7 5a ff ff       	call   c000f599 <malloc>
c0019aa2:	83 c4 0c             	add    esp,0xc
c0019aa5:	89 c3                	mov    ebx,eax
c0019aa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019aaa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019ab1:	50                   	push   eax
c0019ab2:	e8 3b 92 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0019ab7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aba:	e8 05 95 ff ff       	call   c0012fc4 <File::exists()>
c0019abf:	83 c4 10             	add    esp,0x10
c0019ac2:	84 c0                	test   al,al
c0019ac4:	75 31                	jne    c0019af7 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019ac6:	50                   	push   eax
c0019ac7:	50                   	push   eax
c0019ac8:	6a 12                	push   0x12
c0019aca:	53                   	push   ebx
c0019acb:	e8 86 92 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c0019ad0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ad2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019ad5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ad8:	e8 8f 6c fe ff       	call   c000076c <strlen>
c0019add:	5a                   	pop    edx
c0019ade:	31 d2                	xor    edx,edx
c0019ae0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ae4:	51                   	push   ecx
c0019ae5:	56                   	push   esi
c0019ae6:	52                   	push   edx
c0019ae7:	50                   	push   eax
c0019ae8:	53                   	push   ebx
c0019ae9:	ff d7                	call   edi
c0019aeb:	83 c4 14             	add    esp,0x14
c0019aee:	53                   	push   ebx
c0019aef:	e8 c0 92 ff ff       	call   c0012db4 <File::close()>
c0019af4:	83 c4 10             	add    esp,0x10
c0019af7:	56                   	push   esi
c0019af8:	31 f6                	xor    esi,esi
c0019afa:	68 00 01 00 00       	push   0x100
c0019aff:	6a 00                	push   0x0
c0019b01:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b05:	50                   	push   eax
c0019b06:	e8 45 6c fe ff       	call   c0000750 <memset>
c0019b0b:	5f                   	pop    edi
c0019b0c:	58                   	pop    eax
c0019b0d:	6a 01                	push   0x1
c0019b0f:	53                   	push   ebx
c0019b10:	e8 41 92 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b25:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019b29:	51                   	push   ecx
c0019b2a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019b2e:	52                   	push   edx
c0019b2f:	6a 00                	push   0x0
c0019b31:	6a 01                	push   0x1
c0019b33:	53                   	push   ebx
c0019b34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b37:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019b3b:	83 c4 20             	add    esp,0x20
c0019b3e:	3c 0d                	cmp    al,0xd
c0019b40:	0f 84 09 01 00 00    	je     c0019c4f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019b4b:	0f 84 ef 00 00 00    	je     c0019c40 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b51:	3c 0a                	cmp    al,0xa
c0019b53:	74 13                	je     c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b55:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b5a:	74 0c                	je     c0019b68 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019b5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019b62:	0f 8e d8 00 00 00    	jle    c0019c40 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019b68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b6c:	83 ec 0c             	sub    esp,0xc
c0019b6f:	8d 78 01             	lea    edi,[eax+0x1]
c0019b72:	57                   	push   edi
c0019b73:	e8 21 5a ff ff       	call   c000f599 <malloc>
c0019b78:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019b7c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b80:	8d 56 04             	lea    edx,[esi+0x4]
c0019b83:	89 14 24             	mov    DWORD PTR [esp],edx
c0019b86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019b8a:	e8 0a 5a ff ff       	call   c000f599 <malloc>
c0019b8f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b93:	83 c4 0c             	add    esp,0xc
c0019b96:	57                   	push   edi
c0019b97:	6a 00                	push   0x0
c0019b99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019b9d:	e8 ae 6b fe ff       	call   c0000750 <memset>
c0019ba2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ba6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019baa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019bae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bb0:	83 c4 0c             	add    esp,0xc
c0019bb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb7:	52                   	push   edx
c0019bb8:	6a 00                	push   0x0
c0019bba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019bbe:	e8 8d 6b fe ff       	call   c0000750 <memset>
c0019bc3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019bc7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019bcb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019bce:	e8 99 6b fe ff       	call   c000076c <strlen>
c0019bd3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019bd7:	89 c1                	mov    ecx,eax
c0019bd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019bdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019bde:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019be1:	40                   	inc    eax
c0019be2:	83 c4 10             	add    esp,0x10
c0019be5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019be8:	85 d2                	test   edx,edx
c0019bea:	75 0c                	jne    c0019bf8 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019bec:	83 ec 0c             	sub    esp,0xc
c0019bef:	6a 08                	push   0x8
c0019bf1:	e8 a3 59 ff ff       	call   c000f599 <malloc>
c0019bf6:	eb 0c                	jmp    c0019c04 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019bf8:	c1 e0 03             	shl    eax,0x3
c0019bfb:	51                   	push   ecx
c0019bfc:	51                   	push   ecx
c0019bfd:	50                   	push   eax
c0019bfe:	52                   	push   edx
c0019bff:	e8 81 59 ff ff       	call   c000f585 <realloc>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019c0a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019c0d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019c10:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c14:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019c18:	b9 08 00 00 00       	mov    ecx,0x8
c0019c1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c1f:	31 f6                	xor    esi,esi
c0019c21:	50                   	push   eax
c0019c22:	68 00 01 00 00       	push   0x100
c0019c27:	6a 00                	push   0x0
c0019c29:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019c2d:	50                   	push   eax
c0019c2e:	e8 1d 6b fe ff       	call   c0000750 <memset>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c3e:	eb 0f                	jmp    c0019c4f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c40:	3c 3d                	cmp    al,0x3d
c0019c42:	74 07                	je     c0019c4b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019c44:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019c48:	46                   	inc    esi
c0019c49:	eb 04                	jmp    c0019c4f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019c4b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019c4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c54:	0f 85 c6 fe ff ff    	jne    c0019b20 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019c5a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c60:	5b                   	pop    ebx
c0019c61:	5e                   	pop    esi
c0019c62:	5f                   	pop    edi
c0019c63:	5d                   	pop    ebp
c0019c64:	c3                   	ret    
c0019c65:	90                   	nop

c0019c66 <EnvVarContainer::__loadSystem()>:
c0019c66:	83 ec 10             	sub    esp,0x10
c0019c69:	68 40 d0 02 c0       	push   0xc002d040
c0019c6e:	68 2d b7 02 c0       	push   0xc002b72d
c0019c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c77:	e8 04 fe ff ff       	call   c0019a80 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019c7c:	83 c4 1c             	add    esp,0x1c
c0019c7f:	c3                   	ret    

c0019c80 <EnvVarContainer::__loadUser()>:
c0019c80:	c3                   	ret    
c0019c81:	90                   	nop

c0019c82 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c94:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c9b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019ca2:	90                   	nop
c0019ca3:	c3                   	ret    

c0019ca4 <EnvVarContainer::~EnvVarContainer()>:
c0019ca4:	83 ec 0c             	sub    esp,0xc
c0019ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019cae:	85 c0                	test   eax,eax
c0019cb0:	74 1d                	je     c0019ccf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019cb8:	85 c0                	test   eax,eax
c0019cba:	74 13                	je     c0019ccf <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019cc3:	83 ec 0c             	sub    esp,0xc
c0019cc6:	50                   	push   eax
c0019cc7:	e8 dd 58 ff ff       	call   c000f5a9 <free>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	90                   	nop
c0019cd0:	83 c4 0c             	add    esp,0xc
c0019cd3:	c3                   	ret    

c0019cd4 <Krnl::getEnv(Process*, char const*)>:
c0019cd4:	53                   	push   ebx
c0019cd5:	83 ec 08             	sub    esp,0x8
c0019cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cdc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ce0:	39 05 50 10 03 c0    	cmp    DWORD PTR ds:0xc0031050,eax
c0019ce6:	74 04                	je     c0019cec <Krnl::getEnv(Process*, char const*)+0x18>
c0019ce8:	85 c0                	test   eax,eax
c0019cea:	75 0b                	jne    c0019cf7 <Krnl::getEnv(Process*, char const*)+0x23>
c0019cec:	a1 34 06 03 c0       	mov    eax,ds:0xc0030634
c0019cf1:	85 c0                	test   eax,eax
c0019cf3:	75 19                	jne    c0019d0e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019cf5:	eb 27                	jmp    c0019d1e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019cf7:	52                   	push   edx
c0019cf8:	52                   	push   edx
c0019cf9:	53                   	push   ebx
c0019cfa:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019d00:	e8 79 fc ff ff       	call   c001997e <EnvVarContainer::getEnv(char const*)>
c0019d05:	83 c4 10             	add    esp,0x10
c0019d08:	85 c0                	test   eax,eax
c0019d0a:	75 28                	jne    c0019d34 <Krnl::getEnv(Process*, char const*)+0x60>
c0019d0c:	eb de                	jmp    c0019cec <Krnl::getEnv(Process*, char const*)+0x18>
c0019d0e:	52                   	push   edx
c0019d0f:	52                   	push   edx
c0019d10:	53                   	push   ebx
c0019d11:	50                   	push   eax
c0019d12:	e8 67 fc ff ff       	call   c001997e <EnvVarContainer::getEnv(char const*)>
c0019d17:	83 c4 10             	add    esp,0x10
c0019d1a:	85 c0                	test   eax,eax
c0019d1c:	75 16                	jne    c0019d34 <Krnl::getEnv(Process*, char const*)+0x60>
c0019d1e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019d22:	a1 38 06 03 c0       	mov    eax,ds:0xc0030638
c0019d27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019d2b:	83 c4 08             	add    esp,0x8
c0019d2e:	5b                   	pop    ebx
c0019d2f:	e9 4a fc ff ff       	jmp    c001997e <EnvVarContainer::getEnv(char const*)>
c0019d34:	83 c4 08             	add    esp,0x8
c0019d37:	5b                   	pop    ebx
c0019d38:	c3                   	ret    

c0019d39 <Krnl::setEnvSystem(char const*, char const*)>:
c0019d39:	83 ec 10             	sub    esp,0x10
c0019d3c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d44:	ff 35 38 06 03 c0    	push   DWORD PTR ds:0xc0030638
c0019d4a:	e8 6d fc ff ff       	call   c00199bc <EnvVarContainer::setEnv(char const*, char const*)>
c0019d4f:	83 c4 1c             	add    esp,0x1c
c0019d52:	c3                   	ret    

c0019d53 <Krnl::setEnvUser(char const*, char const*)>:
c0019d53:	a1 34 06 03 c0       	mov    eax,ds:0xc0030634
c0019d58:	85 c0                	test   eax,eax
c0019d5a:	74 15                	je     c0019d71 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019d5c:	83 ec 10             	sub    esp,0x10
c0019d5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d67:	50                   	push   eax
c0019d68:	e8 4f fc ff ff       	call   c00199bc <EnvVarContainer::setEnv(char const*, char const*)>
c0019d6d:	83 c4 1c             	add    esp,0x1c
c0019d70:	c3                   	ret    
c0019d71:	c3                   	ret    

c0019d72 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d76:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019d7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019d80:	e9 37 fc ff ff       	jmp    c00199bc <EnvVarContainer::setEnv(char const*, char const*)>

c0019d85 <Krnl::deleteEnvSystem(char const*)>:
c0019d85:	c3                   	ret    

c0019d86 <Krnl::deleteEnvUser(char const*)>:
c0019d86:	c3                   	ret    

c0019d87 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019d87:	c3                   	ret    

c0019d88 <Krnl::newProcessEnv(Process*)>:
c0019d88:	83 ec 28             	sub    esp,0x28
c0019d8b:	6a 0c                	push   0xc
c0019d8d:	e8 07 58 ff ff       	call   c000f599 <malloc>
c0019d92:	5a                   	pop    edx
c0019d93:	59                   	pop    ecx
c0019d94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d98:	50                   	push   eax
c0019d99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d9d:	e8 e0 fe ff ff       	call   c0019c82 <EnvVarContainer::EnvVarContainer(Process*)>
c0019da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019da6:	83 c4 2c             	add    esp,0x2c
c0019da9:	c3                   	ret    

c0019daa <Krnl::copyProcessEnv(Process*, Process*)>:
c0019daa:	57                   	push   edi
c0019dab:	56                   	push   esi
c0019dac:	53                   	push   ebx
c0019dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db1:	83 ec 0c             	sub    esp,0xc
c0019db4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019dba:	6a 0c                	push   0xc
c0019dbc:	e8 d8 57 ff ff       	call   c000f599 <malloc>
c0019dc1:	89 c3                	mov    ebx,eax
c0019dc3:	58                   	pop    eax
c0019dc4:	5a                   	pop    edx
c0019dc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dc9:	53                   	push   ebx
c0019dca:	e8 b3 fe ff ff       	call   c0019c82 <EnvVarContainer::EnvVarContainer(Process*)>
c0019dcf:	8b 07                	mov    eax,DWORD PTR [edi]
c0019dd1:	89 03                	mov    DWORD PTR [ebx],eax
c0019dd3:	c1 e0 03             	shl    eax,0x3
c0019dd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd9:	e8 bb 57 ff ff       	call   c000f599 <malloc>
c0019dde:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019de1:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019de3:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019de6:	c1 e1 03             	shl    ecx,0x3
c0019de9:	89 c7                	mov    edi,eax
c0019deb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ded:	83 c4 10             	add    esp,0x10
c0019df0:	89 d8                	mov    eax,ebx
c0019df2:	5b                   	pop    ebx
c0019df3:	5e                   	pop    esi
c0019df4:	5f                   	pop    edi
c0019df5:	c3                   	ret    

c0019df6 <Krnl::loadSystemEnv()>:
c0019df6:	53                   	push   ebx
c0019df7:	83 ec 14             	sub    esp,0x14
c0019dfa:	6a 0c                	push   0xc
c0019dfc:	e8 98 57 ff ff       	call   c000f599 <malloc>
c0019e01:	89 c3                	mov    ebx,eax
c0019e03:	58                   	pop    eax
c0019e04:	5a                   	pop    edx
c0019e05:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c0019e0b:	53                   	push   ebx
c0019e0c:	e8 71 fe ff ff       	call   c0019c82 <EnvVarContainer::EnvVarContainer(Process*)>
c0019e11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e14:	89 1d 38 06 03 c0    	mov    DWORD PTR ds:0xc0030638,ebx
c0019e1a:	e8 47 fe ff ff       	call   c0019c66 <EnvVarContainer::__loadSystem()>
c0019e1f:	83 c4 18             	add    esp,0x18
c0019e22:	5b                   	pop    ebx
c0019e23:	c3                   	ret    

c0019e24 <Krnl::loadUserEnv()>:
c0019e24:	53                   	push   ebx
c0019e25:	83 ec 14             	sub    esp,0x14
c0019e28:	6a 0c                	push   0xc
c0019e2a:	e8 6a 57 ff ff       	call   c000f599 <malloc>
c0019e2f:	89 c3                	mov    ebx,eax
c0019e31:	58                   	pop    eax
c0019e32:	5a                   	pop    edx
c0019e33:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c0019e39:	53                   	push   ebx
c0019e3a:	e8 43 fe ff ff       	call   c0019c82 <EnvVarContainer::EnvVarContainer(Process*)>
c0019e3f:	89 1d 34 06 03 c0    	mov    DWORD PTR ds:0xc0030634,ebx
c0019e45:	83 c4 18             	add    esp,0x18
c0019e48:	5b                   	pop    ebx
c0019e49:	c3                   	ret    

c0019e4a <Krnl::flushEnv()>:
c0019e4a:	c3                   	ret    

c0019e4b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019e4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e4f:	8b 15 34 06 03 c0    	mov    edx,DWORD PTR ds:0xc0030634
c0019e55:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e5b:	a1 38 06 03 c0       	mov    eax,ds:0xc0030638
c0019e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e62:	03 01                	add    eax,DWORD PTR [ecx]
c0019e64:	85 d2                	test   edx,edx
c0019e66:	74 02                	je     c0019e6a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019e68:	03 02                	add    eax,DWORD PTR [edx]
c0019e6a:	c3                   	ret    

c0019e6b <Krnl::getProcessEnvPair(Process*, int)>:
c0019e6b:	57                   	push   edi
c0019e6c:	56                   	push   esi
c0019e6d:	8b 35 34 06 03 c0    	mov    esi,DWORD PTR ds:0xc0030634
c0019e73:	53                   	push   ebx
c0019e74:	85 f6                	test   esi,esi
c0019e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019e7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e7e:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019e84:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019e88:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019e8a:	75 16                	jne    c0019ea2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019e8c:	39 c2                	cmp    edx,eax
c0019e8e:	7c 16                	jl     c0019ea6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019e90:	8b 0d 38 06 03 c0    	mov    ecx,DWORD PTR ds:0xc0030638
c0019e96:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019e98:	01 c6                	add    esi,eax
c0019e9a:	39 d6                	cmp    esi,edx
c0019e9c:	7e 3c                	jle    c0019eda <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019e9e:	29 c2                	sub    edx,eax
c0019ea0:	eb 04                	jmp    c0019ea6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019ea2:	39 c2                	cmp    edx,eax
c0019ea4:	7d 05                	jge    c0019eab <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019ea6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019ea9:	eb 20                	jmp    c0019ecb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019eab:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019ead:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019eb0:	39 d1                	cmp    ecx,edx
c0019eb2:	7e 04                	jle    c0019eb8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019eb4:	29 c2                	sub    edx,eax
c0019eb6:	eb 10                	jmp    c0019ec8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019eb8:	8b 35 38 06 03 c0    	mov    esi,DWORD PTR ds:0xc0030638
c0019ebe:	03 0e                	add    ecx,DWORD PTR [esi]
c0019ec0:	39 d1                	cmp    ecx,edx
c0019ec2:	7e 16                	jle    c0019eda <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019ec4:	29 c2                	sub    edx,eax
c0019ec6:	29 fa                	sub    edx,edi
c0019ec8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ecb:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019ece:	8b 02                	mov    eax,DWORD PTR [edx]
c0019ed0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019ed3:	89 03                	mov    DWORD PTR [ebx],eax
c0019ed5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019ed8:	eb 1d                	jmp    c0019ef7 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019eda:	83 ec 0c             	sub    esp,0xc
c0019edd:	68 4f b7 02 c0       	push   0xc002b74f
c0019ee2:	e8 18 00 00 00       	call   c0019eff <Krnl::panic(char const*)>
c0019ee7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019eed:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019ef4:	83 c4 10             	add    esp,0x10
c0019ef7:	89 d8                	mov    eax,ebx
c0019ef9:	5b                   	pop    ebx
c0019efa:	5e                   	pop    esi
c0019efb:	5f                   	pop    edi
c0019efc:	c2 04 00             	ret    0x4

c0019eff <Krnl::panic(char const*)>:
c0019eff:	55                   	push   ebp
c0019f00:	89 e5                	mov    ebp,esp
c0019f02:	53                   	push   ebx
c0019f03:	83 ec 10             	sub    esp,0x10
c0019f06:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019f09:	fa                   	cli    
c0019f0a:	c6 05 44 06 03 c0 01 	mov    BYTE PTR ds:0xc0030644,0x1
c0019f11:	53                   	push   ebx
c0019f12:	e8 dc 56 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019f17:	58                   	pop    eax
c0019f18:	c6 05 40 ca 02 c0 00 	mov    BYTE PTR ds:0xc002ca40,0x0
c0019f1f:	5a                   	pop    edx
c0019f20:	53                   	push   ebx
c0019f21:	68 69 b7 02 c0       	push   0xc002b769
c0019f26:	e8 68 88 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0019f2b:	59                   	pop    ecx
c0019f2c:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f31:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f37:	e8 17 64 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c0019f3c:	83 c4 0c             	add    esp,0xc
c0019f3f:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f44:	6a 01                	push   0x1
c0019f46:	6a 0f                	push   0xf
c0019f48:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f4e:	e8 5f 62 ff ff       	call   c00101b2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019f53:	58                   	pop    eax
c0019f54:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f5f:	e8 70 67 ff ff       	call   c00106d4 <VgaText::clearScreen()>
c0019f64:	58                   	pop    eax
c0019f65:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f6a:	5a                   	pop    edx
c0019f6b:	68 82 b7 02 c0       	push   0xc002b782
c0019f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f76:	e8 e5 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f7b:	59                   	pop    ecx
c0019f7c:	58                   	pop    eax
c0019f7d:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f82:	68 28 b8 02 c0       	push   0xc002b828
c0019f87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f8d:	e8 ce 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019f92:	58                   	pop    eax
c0019f93:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019f98:	5a                   	pop    edx
c0019f99:	68 9e b7 02 c0       	push   0xc002b79e
c0019f9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa4:	e8 b7 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fa9:	59                   	pop    ecx
c0019faa:	58                   	pop    eax
c0019fab:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019fb0:	53                   	push   ebx
c0019fb1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb7:	e8 a4 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fbc:	58                   	pop    eax
c0019fbd:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c0019fc2:	5a                   	pop    edx
c0019fc3:	68 be b7 02 c0       	push   0xc002b7be
c0019fc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fce:	e8 8d 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c0019fd3:	a1 40 06 03 c0       	mov    eax,ds:0xc0030640
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	85 c0                	test   eax,eax
c0019fdd:	74 02                	je     c0019fe1 <Krnl::panic(char const*)+0xe2>
c0019fdf:	ff d0                	call   eax
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fe7:	e8 8f 30 00 00       	call   c001d07b <Thr::getDriverNameFromAddress(unsigned long)>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	89 c3                	mov    ebx,eax
c0019ff1:	85 c0                	test   eax,eax
c0019ff3:	0f 84 4e 02 00 00    	je     c001a247 <Krnl::panic(char const*)+0x348>
c0019ff9:	83 ec 08             	sub    esp,0x8
c0019ffc:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a001:	68 64 b8 02 c0       	push   0xc002b864
c001a006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a00c:	e8 4f 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a011:	58                   	pop    eax
c001a012:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a017:	5a                   	pop    edx
c001a018:	68 9e b7 02 c0       	push   0xc002b79e
c001a01d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a023:	e8 38 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a028:	59                   	pop    ecx
c001a029:	58                   	pop    eax
c001a02a:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a02f:	53                   	push   ebx
c001a030:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a036:	e8 25 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a03b:	83 c4 10             	add    esp,0x10
c001a03e:	83 ec 08             	sub    esp,0x8
c001a041:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a046:	68 bd b7 02 c0       	push   0xc002b7bd
c001a04b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a051:	e8 0a 68 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a056:	58                   	pop    eax
c001a057:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a05c:	5a                   	pop    edx
c001a05d:	68 bc b8 02 c0       	push   0xc002b8bc
c001a062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a068:	e8 f3 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a06d:	59                   	pop    ecx
c001a06e:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a073:	5b                   	pop    ebx
c001a074:	68 fc b8 02 c0       	push   0xc002b8fc
c001a079:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a07f:	e8 dc 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a084:	58                   	pop    eax
c001a085:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a08a:	5a                   	pop    edx
c001a08b:	68 a9 b7 02 c0       	push   0xc002b7a9
c001a090:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a096:	e8 c5 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a09b:	59                   	pop    ecx
c001a09c:	5b                   	pop    ebx
c001a09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0a0:	68 c1 b7 02 c0       	push   0xc002b7c1
c001a0a5:	e8 e9 86 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001a0aa:	58                   	pop    eax
c001a0ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0ae:	5a                   	pop    edx
c001a0af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a0b2:	68 ca b7 02 c0       	push   0xc002b7ca
c001a0b7:	e8 d7 86 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001a0bc:	59                   	pop    ecx
c001a0bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a0c0:	5b                   	pop    ebx
c001a0c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a0c6:	68 d3 b7 02 c0       	push   0xc002b7d3
c001a0cb:	e8 c3 86 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001a0d0:	58                   	pop    eax
c001a0d1:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a0d6:	5a                   	pop    edx
c001a0d7:	68 40 b9 02 c0       	push   0xc002b940
c001a0dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0e2:	e8 79 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0e7:	59                   	pop    ecx
c001a0e8:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a0ed:	5b                   	pop    ebx
c001a0ee:	68 dc b7 02 c0       	push   0xc002b7dc
c001a0f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0f9:	e8 62 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a0fe:	0f 20 c0             	mov    eax,cr0
c001a101:	5a                   	pop    edx
c001a102:	59                   	pop    ecx
c001a103:	50                   	push   eax
c001a104:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a109:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a10f:	e8 06 67 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a114:	5b                   	pop    ebx
c001a115:	58                   	pop    eax
c001a116:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a11b:	68 e6 b7 02 c0       	push   0xc002b7e6
c001a120:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a126:	e8 35 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a12b:	0f 20 d0             	mov    eax,cr2
c001a12e:	5a                   	pop    edx
c001a12f:	59                   	pop    ecx
c001a130:	50                   	push   eax
c001a131:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a13c:	e8 d9 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a141:	5b                   	pop    ebx
c001a142:	58                   	pop    eax
c001a143:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a148:	68 f0 b7 02 c0       	push   0xc002b7f0
c001a14d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a153:	e8 08 67 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a158:	0f 20 d8             	mov    eax,cr3
c001a15b:	5a                   	pop    edx
c001a15c:	59                   	pop    ecx
c001a15d:	50                   	push   eax
c001a15e:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a163:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a169:	e8 ac 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a16e:	5b                   	pop    ebx
c001a16f:	58                   	pop    eax
c001a170:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a175:	68 03 b8 02 c0       	push   0xc002b803
c001a17a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a180:	e8 db 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a185:	0f 20 e0             	mov    eax,cr4
c001a188:	5a                   	pop    edx
c001a189:	59                   	pop    ecx
c001a18a:	50                   	push   eax
c001a18b:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a190:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a196:	e8 7f 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a19b:	5b                   	pop    ebx
c001a19c:	58                   	pop    eax
c001a19d:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a1a2:	68 0d b8 02 c0       	push   0xc002b80d
c001a1a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ad:	e8 ae 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1b2:	5a                   	pop    edx
c001a1b3:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a1b8:	59                   	pop    ecx
c001a1b9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1c2:	50                   	push   eax
c001a1c3:	e8 52 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1c8:	5b                   	pop    ebx
c001a1c9:	58                   	pop    eax
c001a1ca:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a1cf:	68 24 b8 02 c0       	push   0xc002b824
c001a1d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1da:	e8 81 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a1df:	5a                   	pop    edx
c001a1e0:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a1e5:	59                   	pop    ecx
c001a1e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a1ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a1ef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a1f2:	50                   	push   eax
c001a1f3:	e8 22 66 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a1f8:	5b                   	pop    ebx
c001a1f9:	58                   	pop    eax
c001a1fa:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a1ff:	68 24 b8 02 c0       	push   0xc002b824
c001a204:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a20a:	e8 51 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a20f:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a214:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a217:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a21d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a21f:	59                   	pop    ecx
c001a220:	5b                   	pop    ebx
c001a221:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a224:	50                   	push   eax
c001a225:	e8 f0 65 ff ff       	call   c001081a <VgaText::putx(unsigned int)>
c001a22a:	83 c4 10             	add    esp,0x10
c001a22d:	b2 fe                	mov    dl,0xfe
c001a22f:	e4 60                	in     al,0x60
c001a231:	3c 1c                	cmp    al,0x1c
c001a233:	74 04                	je     c001a239 <Krnl::panic(char const*)+0x33a>
c001a235:	3c 5a                	cmp    al,0x5a
c001a237:	75 f6                	jne    c001a22f <Krnl::panic(char const*)+0x330>
c001a239:	e4 64                	in     al,0x64
c001a23b:	a8 02                	test   al,0x2
c001a23d:	75 fa                	jne    c001a239 <Krnl::panic(char const*)+0x33a>
c001a23f:	88 d0                	mov    al,dl
c001a241:	e6 64                	out    0x64,al
c001a243:	fa                   	cli    
c001a244:	f4                   	hlt    
c001a245:	eb e8                	jmp    c001a22f <Krnl::panic(char const*)+0x330>
c001a247:	50                   	push   eax
c001a248:	50                   	push   eax
c001a249:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a24e:	68 90 b8 02 c0       	push   0xc002b890
c001a253:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a259:	e8 02 66 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a25e:	58                   	pop    eax
c001a25f:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a264:	5a                   	pop    edx
c001a265:	68 9e b7 02 c0       	push   0xc002b79e
c001a26a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a270:	e8 eb 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a275:	59                   	pop    ecx
c001a276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a27b:	5b                   	pop    ebx
c001a27c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a27f:	83 c0 0c             	add    eax,0xc
c001a282:	50                   	push   eax
c001a283:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001a288:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28e:	e8 cd 65 ff ff       	call   c0010860 <VgaText::puts(char const*)>
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	e9 a3 fd ff ff       	jmp    c001a03e <Krnl::panic(char const*)+0x13f>

c001a29b <Net::switchEndian16(unsigned short)>:
c001a29b:	83 ec 04             	sub    esp,0x4
c001a29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2a2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a2a6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a2aa:	c1 f8 08             	sar    eax,0x8
c001a2ad:	89 c2                	mov    edx,eax
c001a2af:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a2b3:	c1 e0 08             	shl    eax,0x8
c001a2b6:	09 d0                	or     eax,edx
c001a2b8:	83 c4 04             	add    esp,0x4
c001a2bb:	c3                   	ret    

c001a2bc <Net::switchEndian32(unsigned int)>:
c001a2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c0:	c1 e8 18             	shr    eax,0x18
c001a2c3:	89 c2                	mov    edx,eax
c001a2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c9:	c1 e0 08             	shl    eax,0x8
c001a2cc:	25 00 00 ff 00       	and    eax,0xff0000
c001a2d1:	09 c2                	or     edx,eax
c001a2d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2d7:	c1 e8 08             	shr    eax,0x8
c001a2da:	25 00 ff 00 00       	and    eax,0xff00
c001a2df:	09 c2                	or     edx,eax
c001a2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2e5:	c1 e0 18             	shl    eax,0x18
c001a2e8:	09 d0                	or     eax,edx
c001a2ea:	c3                   	ret    

c001a2eb <Net::crc32Calc(unsigned char*, int)>:
c001a2eb:	83 ec 10             	sub    esp,0x10
c001a2ee:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2f3:	75 07                	jne    c001a2fc <Net::crc32Calc(unsigned char*, int)+0x11>
c001a2f5:	b8 00 00 00 00       	mov    eax,0x0
c001a2fa:	eb 7c                	jmp    c001a378 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a2fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a301:	7f 07                	jg     c001a30a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a303:	b8 00 00 00 00       	mov    eax,0x0
c001a308:	eb 6e                	jmp    c001a378 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a30a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a312:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a31a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a31e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a322:	7d 4e                	jge    c001a372 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a328:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a32c:	01 d0                	add    eax,edx
c001a32e:	8a 00                	mov    al,BYTE PTR [eax]
c001a330:	0f b6 c0             	movzx  eax,al
c001a333:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a337:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a33f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a344:	7f 26                	jg     c001a36c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a34a:	83 e0 01             	and    eax,0x1
c001a34d:	74 0d                	je     c001a35c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a34f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a353:	d1 e8                	shr    eax,1
c001a355:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a35a:	eb 06                	jmp    c001a362 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a35c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a360:	d1 e8                	shr    eax,1
c001a362:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a366:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a36a:	eb d3                	jmp    c001a33f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a36c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a370:	eb a8                	jmp    c001a31a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a376:	f7 d0                	not    eax
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	c3                   	ret    

c001a37c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a37c:	57                   	push   edi
c001a37d:	56                   	push   esi
c001a37e:	53                   	push   ebx
c001a37f:	83 ec 60             	sub    esp,0x60
c001a382:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a389:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a38d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a395:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a39a:	7f 1a                	jg     c001a3b6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a39c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3ad:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a3b0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a3b4:	eb df                	jmp    c001a395 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a3b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3bd:	8d 50 01             	lea    edx,[eax+0x1]
c001a3c0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3c7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a3ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a3d5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a3d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3dd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a3e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a3ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a3f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a3f9:	89 c6                	mov    esi,eax
c001a3fb:	89 d7                	mov    edi,edx
c001a3fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3ff:	89 c8                	mov    eax,ecx
c001a401:	89 fa                	mov    edx,edi
c001a403:	89 f3                	mov    ebx,esi
c001a405:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a409:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a40d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a410:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a418:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a41f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a423:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a427:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a42b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a433:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a437:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a43f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a443:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a447:	89 c6                	mov    esi,eax
c001a449:	89 d7                	mov    edi,edx
c001a44b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a44d:	89 c8                	mov    eax,ecx
c001a44f:	89 fa                	mov    edx,edi
c001a451:	89 f3                	mov    ebx,esi
c001a453:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a457:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a45b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a45f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a467:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a46e:	0f b7 c0             	movzx  eax,ax
c001a471:	c1 f8 08             	sar    eax,0x8
c001a474:	89 c1                	mov    ecx,eax
c001a476:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a47d:	8d 50 01             	lea    edx,[eax+0x1]
c001a480:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a487:	88 ca                	mov    dl,cl
c001a489:	88 10                	mov    BYTE PTR [eax],dl
c001a48b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a492:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a499:	8d 48 01             	lea    ecx,[eax+0x1]
c001a49c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a4a3:	88 10                	mov    BYTE PTR [eax],dl
c001a4a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4a9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a4ad:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a4b4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a4b8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a4bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a4c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a4c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a4c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a4cc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a4d0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a4d4:	89 c6                	mov    esi,eax
c001a4d6:	89 d7                	mov    edi,edx
c001a4d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4da:	89 c8                	mov    eax,ecx
c001a4dc:	89 fa                	mov    edx,edi
c001a4de:	89 f3                	mov    ebx,esi
c001a4e0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a4e4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a4e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a4ec:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4f0:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a4f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4fe:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a502:	50                   	push   eax
c001a503:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a507:	e8 df fd ff ff       	call   c001a2eb <Net::crc32Calc(unsigned char*, int)>
c001a50c:	83 c4 08             	add    esp,0x8
c001a50f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a513:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a517:	c1 e8 18             	shr    eax,0x18
c001a51a:	89 c1                	mov    ecx,eax
c001a51c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a523:	8d 50 01             	lea    edx,[eax+0x1]
c001a526:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a52d:	88 ca                	mov    dl,cl
c001a52f:	88 10                	mov    BYTE PTR [eax],dl
c001a531:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a535:	c1 e8 10             	shr    eax,0x10
c001a538:	89 c1                	mov    ecx,eax
c001a53a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a541:	8d 50 01             	lea    edx,[eax+0x1]
c001a544:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a54b:	88 ca                	mov    dl,cl
c001a54d:	88 10                	mov    BYTE PTR [eax],dl
c001a54f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a553:	c1 e8 08             	shr    eax,0x8
c001a556:	89 c1                	mov    ecx,eax
c001a558:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a55f:	8d 50 01             	lea    edx,[eax+0x1]
c001a562:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a569:	88 ca                	mov    dl,cl
c001a56b:	88 10                	mov    BYTE PTR [eax],dl
c001a56d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a574:	8d 50 01             	lea    edx,[eax+0x1]
c001a577:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a57e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a582:	88 10                	mov    BYTE PTR [eax],dl
c001a584:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a588:	83 c4 60             	add    esp,0x60
c001a58b:	5b                   	pop    ebx
c001a58c:	5e                   	pop    esi
c001a58d:	5f                   	pop    edi
c001a58e:	c3                   	ret    

c001a58f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a58f:	57                   	push   edi
c001a590:	56                   	push   esi
c001a591:	53                   	push   ebx
c001a592:	83 ec 70             	sub    esp,0x70
c001a595:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a59c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a5a0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a5a8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5af:	83 c0 0e             	add    eax,0xe
c001a5b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a5b6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a5bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a5c1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a5c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a5d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a5dd:	89 c6                	mov    esi,eax
c001a5df:	89 d7                	mov    edi,edx
c001a5e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5e3:	89 c8                	mov    eax,ecx
c001a5e5:	89 fa                	mov    edx,edi
c001a5e7:	89 f3                	mov    ebx,esi
c001a5e9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a5ed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a5f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5f5:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a5fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a604:	83 c0 08             	add    eax,0x8
c001a607:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a60b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a612:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a616:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a61e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a622:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a626:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a62a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a62e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a632:	89 c6                	mov    esi,eax
c001a634:	89 d7                	mov    edi,edx
c001a636:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a638:	89 c8                	mov    eax,ecx
c001a63a:	89 fa                	mov    edx,edi
c001a63c:	89 f3                	mov    ebx,esi
c001a63e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a642:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a646:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a64a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a652:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a659:	8d 50 01             	lea    edx,[eax+0x1]
c001a65c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a663:	8a 00                	mov    al,BYTE PTR [eax]
c001a665:	0f b6 c0             	movzx  eax,al
c001a668:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a66d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a674:	8d 50 01             	lea    edx,[eax+0x1]
c001a677:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a67e:	8a 00                	mov    al,BYTE PTR [eax]
c001a680:	0f b6 c0             	movzx  eax,al
c001a683:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a688:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a68d:	c1 e0 08             	shl    eax,0x8
c001a690:	89 c2                	mov    edx,eax
c001a692:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a696:	09 d0                	or     eax,edx
c001a698:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a69f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a6a3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a6ab:	75 46                	jne    c001a6f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a6ad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a6b7:	66 3d dc 05          	cmp    ax,0x5dc
c001a6bb:	77 16                	ja     c001a6d3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a6bd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a6c7:	0f b7 c0             	movzx  eax,ax
c001a6ca:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a6d1:	eb 20                	jmp    c001a6f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a6d3:	83 ec 0c             	sub    esp,0xc
c001a6d6:	68 68 b9 02 c0       	push   0xc002b968
c001a6db:	e8 b3 80 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001a6e0:	83 c4 10             	add    esp,0x10
c001a6e3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a6ea:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a6ee:	e9 17 01 00 00       	jmp    c001a80a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a6f3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a6fa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a701:	8b 12                	mov    edx,DWORD PTR [edx]
c001a703:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a707:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a70e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a712:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a71a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a71e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a722:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a726:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a72a:	89 c6                	mov    esi,eax
c001a72c:	89 d7                	mov    edi,edx
c001a72e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a730:	89 c8                	mov    eax,ecx
c001a732:	89 fa                	mov    edx,edi
c001a734:	89 f3                	mov    ebx,esi
c001a736:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a73a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a73e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a741:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a748:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a74f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a756:	8d 50 01             	lea    edx,[eax+0x1]
c001a759:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a760:	8a 00                	mov    al,BYTE PTR [eax]
c001a762:	0f b6 c0             	movzx  eax,al
c001a765:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a769:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a770:	8d 50 01             	lea    edx,[eax+0x1]
c001a773:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a77a:	8a 00                	mov    al,BYTE PTR [eax]
c001a77c:	0f b6 c0             	movzx  eax,al
c001a77f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a783:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a78a:	8d 50 01             	lea    edx,[eax+0x1]
c001a78d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a794:	8a 00                	mov    al,BYTE PTR [eax]
c001a796:	0f b6 c0             	movzx  eax,al
c001a799:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a79d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7a4:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a7ae:	8a 00                	mov    al,BYTE PTR [eax]
c001a7b0:	0f b6 c0             	movzx  eax,al
c001a7b3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7b7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a7bb:	c1 e0 18             	shl    eax,0x18
c001a7be:	89 c2                	mov    edx,eax
c001a7c0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a7c4:	c1 e0 10             	shl    eax,0x10
c001a7c7:	09 c2                	or     edx,eax
c001a7c9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a7cd:	c1 e0 08             	shl    eax,0x8
c001a7d0:	09 d0                	or     eax,edx
c001a7d2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a7d6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a7da:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a7e1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a7e5:	83 e8 04             	sub    eax,0x4
c001a7e8:	83 ec 08             	sub    esp,0x8
c001a7eb:	50                   	push   eax
c001a7ec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a7f0:	e8 f6 fa ff ff       	call   c001a2eb <Net::crc32Calc(unsigned char*, int)>
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a7fc:	0f 94 c2             	sete   dl
c001a7ff:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a806:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a809:	90                   	nop
c001a80a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a811:	83 c4 70             	add    esp,0x70
c001a814:	5b                   	pop    ebx
c001a815:	5e                   	pop    esi
c001a816:	5f                   	pop    edi
c001a817:	c2 04 00             	ret    0x4

c001a81a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a81a:	55                   	push   ebp
c001a81b:	57                   	push   edi
c001a81c:	56                   	push   esi
c001a81d:	53                   	push   ebx
c001a81e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a824:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a82b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a82d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a830:	80 fb 40             	cmp    bl,0x40
c001a833:	75 1b                	jne    c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a835:	8a 16                	mov    dl,BYTE PTR [esi]
c001a837:	84 d2                	test   dl,dl
c001a839:	0f 84 f1 00 00 00    	je     c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a83f:	8d 46 01             	lea    eax,[esi+0x1]
c001a842:	80 fa 3a             	cmp    dl,0x3a
c001a845:	74 04                	je     c001a84b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a847:	89 c6                	mov    esi,eax
c001a849:	eb ea                	jmp    c001a835 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a84b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a84e:	89 c6                	mov    esi,eax
c001a850:	50                   	push   eax
c001a851:	6a 40                	push   0x40
c001a853:	6a 00                	push   0x0
c001a855:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a859:	50                   	push   eax
c001a85a:	e8 f1 5e fe ff       	call   c0000750 <memset>
c001a85f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a866:	31 c0                	xor    eax,eax
c001a868:	83 c4 10             	add    esp,0x10
c001a86b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a86d:	84 c9                	test   cl,cl
c001a86f:	0f 84 bb 00 00 00    	je     c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a875:	3d c7 00 00 00       	cmp    eax,0xc7
c001a87a:	0f 8f b0 00 00 00    	jg     c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a880:	80 f9 0a             	cmp    cl,0xa
c001a883:	0f 85 98 00 00 00    	jne    c001a921 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a889:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a88e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a892:	a8 df                	test   al,0xdf
c001a894:	0f 94 c1             	sete   cl
c001a897:	3c 23                	cmp    al,0x23
c001a899:	0f 94 c2             	sete   dl
c001a89c:	08 d1                	or     cl,dl
c001a89e:	75 4a                	jne    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8a0:	8d 50 f7             	lea    edx,[eax-0x9]
c001a8a3:	80 fa 01             	cmp    dl,0x1
c001a8a6:	76 42                	jbe    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8a8:	3c 5b                	cmp    al,0x5b
c001a8aa:	75 42                	jne    c001a8ee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a8ac:	80 fb 40             	cmp    bl,0x40
c001a8af:	75 39                	jne    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8b1:	83 ec 0c             	sub    esp,0xc
c001a8b4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a8b8:	52                   	push   edx
c001a8b9:	e8 ae 5e fe ff       	call   c000076c <strlen>
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	83 f8 3f             	cmp    eax,0x3f
c001a8c4:	77 6a                	ja     c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a8c6:	50                   	push   eax
c001a8c7:	50                   	push   eax
c001a8c8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a8cc:	52                   	push   edx
c001a8cd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a8d1:	52                   	push   edx
c001a8d2:	e8 35 5f fe ff       	call   c000080c <strcpy>
c001a8d7:	58                   	pop    eax
c001a8d8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a8dc:	52                   	push   edx
c001a8dd:	e8 8a 5e fe ff       	call   c000076c <strlen>
c001a8e2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a8e7:	83 c4 10             	add    esp,0x10
c001a8ea:	31 d2                	xor    edx,edx
c001a8ec:	eb 3a                	jmp    c001a928 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a8ee:	80 fb 40             	cmp    bl,0x40
c001a8f1:	74 06                	je     c001a8f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a8f3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a8f7:	eb 20                	jmp    c001a919 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a8f9:	50                   	push   eax
c001a8fa:	50                   	push   eax
c001a8fb:	55                   	push   ebp
c001a8fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a900:	50                   	push   eax
c001a901:	e8 92 5f fe ff       	call   c0000898 <strcmp>
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	85 c0                	test   eax,eax
c001a90b:	75 dd                	jne    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a90d:	eb e4                	jmp    c001a8f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a90f:	8d 50 01             	lea    edx,[eax+0x1]
c001a912:	80 f9 3d             	cmp    cl,0x3d
c001a915:	74 1d                	je     c001a934 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a917:	89 d0                	mov    eax,edx
c001a919:	8a 08                	mov    cl,BYTE PTR [eax]
c001a91b:	84 c9                	test   cl,cl
c001a91d:	75 f0                	jne    c001a90f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a91f:	eb 0f                	jmp    c001a930 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a921:	8d 50 01             	lea    edx,[eax+0x1]
c001a924:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a928:	47                   	inc    edi
c001a929:	89 d0                	mov    eax,edx
c001a92b:	e9 3b ff ff ff       	jmp    c001a86b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a930:	31 c0                	xor    eax,eax
c001a932:	eb 33                	jmp    c001a967 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a934:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a938:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a93b:	50                   	push   eax
c001a93c:	50                   	push   eax
c001a93d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a941:	50                   	push   eax
c001a942:	56                   	push   esi
c001a943:	e8 50 5f fe ff       	call   c0000898 <strcmp>
c001a948:	83 c4 10             	add    esp,0x10
c001a94b:	85 c0                	test   eax,eax
c001a94d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a951:	75 97                	jne    c001a8ea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a953:	51                   	push   ecx
c001a954:	51                   	push   ecx
c001a955:	52                   	push   edx
c001a956:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a95d:	e8 aa 5e fe ff       	call   c000080c <strcpy>
c001a962:	83 c4 10             	add    esp,0x10
c001a965:	b0 01                	mov    al,0x1
c001a967:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a96d:	5b                   	pop    ebx
c001a96e:	5e                   	pop    esi
c001a96f:	5f                   	pop    edi
c001a970:	5d                   	pop    ebp
c001a971:	c3                   	ret    

c001a972 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a972:	57                   	push   edi
c001a973:	56                   	push   esi
c001a974:	53                   	push   ebx
c001a975:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a97b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a982:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a989:	53                   	push   ebx
c001a98a:	e8 dd 5d fe ff       	call   c000076c <strlen>
c001a98f:	89 34 24             	mov    DWORD PTR [esp],esi
c001a992:	89 c7                	mov    edi,eax
c001a994:	e8 d3 5d fe ff       	call   c000076c <strlen>
c001a999:	83 c4 10             	add    esp,0x10
c001a99c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a9a0:	3d ff 00 00 00       	cmp    eax,0xff
c001a9a5:	0f 87 d3 00 00 00    	ja     c001aa7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a9ab:	57                   	push   edi
c001a9ac:	57                   	push   edi
c001a9ad:	56                   	push   esi
c001a9ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a9b2:	56                   	push   esi
c001a9b3:	e8 54 5e fe ff       	call   c000080c <strcpy>
c001a9b8:	58                   	pop    eax
c001a9b9:	5a                   	pop    edx
c001a9ba:	68 0a bd 02 c0       	push   0xc002bd0a
c001a9bf:	56                   	push   esi
c001a9c0:	e8 87 5f fe ff       	call   c000094c <strcat>
c001a9c5:	59                   	pop    ecx
c001a9c6:	5f                   	pop    edi
c001a9c7:	53                   	push   ebx
c001a9c8:	56                   	push   esi
c001a9c9:	e8 7e 5f fe ff       	call   c000094c <strcat>
c001a9ce:	58                   	pop    eax
c001a9cf:	5a                   	pop    edx
c001a9d0:	68 b4 b9 02 c0       	push   0xc002b9b4
c001a9d5:	56                   	push   esi
c001a9d6:	e8 71 5f fe ff       	call   c000094c <strcat>
c001a9db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a9e2:	e8 b2 4b ff ff       	call   c000f599 <malloc>
c001a9e7:	83 c4 0c             	add    esp,0xc
c001a9ea:	89 c3                	mov    ebx,eax
c001a9ec:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c001a9f2:	56                   	push   esi
c001a9f3:	50                   	push   eax
c001a9f4:	e8 f9 82 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	85 db                	test   ebx,ebx
c001a9fe:	74 7e                	je     c001aa7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aa00:	51                   	push   ecx
c001aa01:	51                   	push   ecx
c001aa02:	6a 01                	push   0x1
c001aa04:	53                   	push   ebx
c001aa05:	e8 4c 83 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001aa0a:	83 c4 10             	add    esp,0x10
c001aa0d:	85 c0                	test   eax,eax
c001aa0f:	74 08                	je     c001aa19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001aa11:	83 ec 0c             	sub    esp,0xc
c001aa14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa16:	53                   	push   ebx
c001aa17:	eb 5f                	jmp    c001aa78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001aa19:	52                   	push   edx
c001aa1a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001aa1e:	50                   	push   eax
c001aa1f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aa23:	50                   	push   eax
c001aa24:	53                   	push   ebx
c001aa25:	e8 d8 85 ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001aa2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aa2e:	83 c4 10             	add    esp,0x10
c001aa31:	89 c1                	mov    ecx,eax
c001aa33:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001aa37:	74 31                	je     c001aa6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa39:	83 ec 0c             	sub    esp,0xc
c001aa3c:	50                   	push   eax
c001aa3d:	e8 57 4b ff ff       	call   c000f599 <malloc>
c001aa42:	89 c6                	mov    esi,eax
c001aa44:	58                   	pop    eax
c001aa45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa47:	8d 54 24 20          	lea    edx,[esp+0x20]
c001aa4b:	52                   	push   edx
c001aa4c:	56                   	push   esi
c001aa4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aa55:	53                   	push   ebx
c001aa56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aa59:	83 c4 20             	add    esp,0x20
c001aa5c:	85 c0                	test   eax,eax
c001aa5e:	75 0a                	jne    c001aa6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001aa60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa64:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aa68:	74 18                	je     c001aa82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001aa6a:	83 ec 0c             	sub    esp,0xc
c001aa6d:	53                   	push   ebx
c001aa6e:	e8 41 83 ff ff       	call   c0012db4 <File::close()>
c001aa73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	31 c0                	xor    eax,eax
c001aa80:	eb 3b                	jmp    c001aabd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aa82:	83 ec 0c             	sub    esp,0xc
c001aa85:	53                   	push   ebx
c001aa86:	e8 29 83 ff ff       	call   c0012db4 <File::close()>
c001aa8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa93:	83 c4 0c             	add    esp,0xc
c001aa96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa9d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aaa4:	56                   	push   esi
c001aaa5:	e8 70 fd ff ff       	call   c001a81a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aaaa:	89 34 24             	mov    DWORD PTR [esp],esi
c001aaad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aab1:	e8 f3 4a ff ff       	call   c000f5a9 <free>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aabd:	81 c4 20 01 00 00    	add    esp,0x120
c001aac3:	5b                   	pop    ebx
c001aac4:	5e                   	pop    esi
c001aac5:	5f                   	pop    edi
c001aac6:	c3                   	ret    

c001aac7 <Reg::getLine(char*, char*, char*)>:
c001aac7:	57                   	push   edi
c001aac8:	56                   	push   esi
c001aac9:	53                   	push   ebx
c001aaca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aace:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aad2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aad6:	57                   	push   edi
c001aad7:	56                   	push   esi
c001aad8:	53                   	push   ebx
c001aad9:	68 b9 b9 02 c0       	push   0xc002b9b9
c001aade:	e8 8f fe ff ff       	call   c001a972 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aae3:	83 c4 10             	add    esp,0x10
c001aae6:	84 c0                	test   al,al
c001aae8:	75 10                	jne    c001aafa <Reg::getLine(char*, char*, char*)+0x33>
c001aaea:	57                   	push   edi
c001aaeb:	56                   	push   esi
c001aaec:	53                   	push   ebx
c001aaed:	68 de b9 02 c0       	push   0xc002b9de
c001aaf2:	e8 7b fe ff ff       	call   c001a972 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aaf7:	83 c4 10             	add    esp,0x10
c001aafa:	5b                   	pop    ebx
c001aafb:	5e                   	pop    esi
c001aafc:	5f                   	pop    edi
c001aafd:	c3                   	ret    

c001aafe <Reg::readInt(char*, char*, int*)>:
c001aafe:	55                   	push   ebp
c001aaff:	57                   	push   edi
c001ab00:	56                   	push   esi
c001ab01:	53                   	push   ebx
c001ab02:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ab08:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ab0c:	57                   	push   edi
c001ab0d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab14:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ab1b:	e8 a7 ff ff ff       	call   c001aac7 <Reg::getLine(char*, char*, char*)>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	84 c0                	test   al,al
c001ab25:	0f 84 b3 00 00 00    	je     c001abde <Reg::readInt(char*, char*, int*)+0xe0>
c001ab2b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ab2f:	80 fa 2b             	cmp    dl,0x2b
c001ab32:	74 0c                	je     c001ab40 <Reg::readInt(char*, char*, int*)+0x42>
c001ab34:	80 fa 2d             	cmp    dl,0x2d
c001ab37:	75 0e                	jne    c001ab47 <Reg::readInt(char*, char*, int*)+0x49>
c001ab39:	ba 01 00 00 00       	mov    edx,0x1
c001ab3e:	eb 0b                	jmp    c001ab4b <Reg::readInt(char*, char*, int*)+0x4d>
c001ab40:	ba 01 00 00 00       	mov    edx,0x1
c001ab45:	eb 02                	jmp    c001ab49 <Reg::readInt(char*, char*, int*)+0x4b>
c001ab47:	31 d2                	xor    edx,edx
c001ab49:	31 c0                	xor    eax,eax
c001ab4b:	be 0a 00 00 00       	mov    esi,0xa
c001ab50:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ab55:	75 20                	jne    c001ab77 <Reg::readInt(char*, char*, int*)+0x79>
c001ab57:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ab5b:	80 f9 78             	cmp    cl,0x78
c001ab5e:	75 0a                	jne    c001ab6a <Reg::readInt(char*, char*, int*)+0x6c>
c001ab60:	83 c2 02             	add    edx,0x2
c001ab63:	be 10 00 00 00       	mov    esi,0x10
c001ab68:	eb 0d                	jmp    c001ab77 <Reg::readInt(char*, char*, int*)+0x79>
c001ab6a:	80 f9 62             	cmp    cl,0x62
c001ab6d:	75 08                	jne    c001ab77 <Reg::readInt(char*, char*, int*)+0x79>
c001ab6f:	83 c2 02             	add    edx,0x2
c001ab72:	be 02 00 00 00       	mov    esi,0x2
c001ab77:	01 d7                	add    edi,edx
c001ab79:	31 d2                	xor    edx,edx
c001ab7b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ab7d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001ab81:	80 fb 0d             	cmp    bl,0xd
c001ab84:	0f 94 c3             	sete   bl
c001ab87:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ab8c:	0f 94 c1             	sete   cl
c001ab8f:	08 cb                	or     bl,cl
c001ab91:	75 3a                	jne    c001abcd <Reg::readInt(char*, char*, int*)+0xcf>
c001ab93:	0f af d6             	imul   edx,esi
c001ab96:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab9b:	83 fe 10             	cmp    esi,0x10
c001ab9e:	75 26                	jne    c001abc6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aba0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aba4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aba7:	89 e9                	mov    ecx,ebp
c001aba9:	80 f9 05             	cmp    cl,0x5
c001abac:	77 06                	ja     c001abb4 <Reg::readInt(char*, char*, int*)+0xb6>
c001abae:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001abb2:	eb 16                	jmp    c001abca <Reg::readInt(char*, char*, int*)+0xcc>
c001abb4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001abb8:	83 e9 61             	sub    ecx,0x61
c001abbb:	80 f9 05             	cmp    cl,0x5
c001abbe:	77 06                	ja     c001abc6 <Reg::readInt(char*, char*, int*)+0xc8>
c001abc0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001abc4:	eb 04                	jmp    c001abca <Reg::readInt(char*, char*, int*)+0xcc>
c001abc6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001abca:	47                   	inc    edi
c001abcb:	eb ae                	jmp    c001ab7b <Reg::readInt(char*, char*, int*)+0x7d>
c001abcd:	84 c0                	test   al,al
c001abcf:	74 02                	je     c001abd3 <Reg::readInt(char*, char*, int*)+0xd5>
c001abd1:	f7 da                	neg    edx
c001abd3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001abda:	89 10                	mov    DWORD PTR [eax],edx
c001abdc:	88 d8                	mov    al,bl
c001abde:	81 c4 ec 00 00 00    	add    esp,0xec
c001abe4:	5b                   	pop    ebx
c001abe5:	5e                   	pop    esi
c001abe6:	5f                   	pop    edi
c001abe7:	5d                   	pop    ebp
c001abe8:	c3                   	ret    

c001abe9 <Reg::readString(char*, char*, char*, int)>:
c001abe9:	57                   	push   edi
c001abea:	56                   	push   esi
c001abeb:	53                   	push   ebx
c001abec:	81 ec d4 00 00 00    	sub    esp,0xd4
c001abf2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001abf9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001abfd:	57                   	push   edi
c001abfe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac05:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ac0c:	e8 b6 fe ff ff       	call   c001aac7 <Reg::getLine(char*, char*, char*)>
c001ac11:	83 c4 10             	add    esp,0x10
c001ac14:	89 c6                	mov    esi,eax
c001ac16:	84 c0                	test   al,al
c001ac18:	74 44                	je     c001ac5e <Reg::readString(char*, char*, char*, int)+0x75>
c001ac1a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ac21:	31 c0                	xor    eax,eax
c001ac23:	4a                   	dec    edx
c001ac24:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ac27:	84 c9                	test   cl,cl
c001ac29:	74 0f                	je     c001ac3a <Reg::readString(char*, char*, char*, int)+0x51>
c001ac2b:	39 c2                	cmp    edx,eax
c001ac2d:	7e 0b                	jle    c001ac3a <Reg::readString(char*, char*, char*, int)+0x51>
c001ac2f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ac32:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ac37:	40                   	inc    eax
c001ac38:	eb ea                	jmp    c001ac24 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ac3a:	83 ec 0c             	sub    esp,0xc
c001ac3d:	53                   	push   ebx
c001ac3e:	e8 29 5b fe ff       	call   c000076c <strlen>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ac4b:	75 11                	jne    c001ac5e <Reg::readString(char*, char*, char*, int)+0x75>
c001ac4d:	83 ec 0c             	sub    esp,0xc
c001ac50:	53                   	push   ebx
c001ac51:	e8 16 5b fe ff       	call   c000076c <strlen>
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ac5e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ac64:	89 f0                	mov    eax,esi
c001ac66:	5b                   	pop    ebx
c001ac67:	5e                   	pop    esi
c001ac68:	5f                   	pop    edi
c001ac69:	c3                   	ret    

c001ac6a <Reg::readBool(char*, char*, bool*)>:
c001ac6a:	83 ec 20             	sub    esp,0x20
c001ac6d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac71:	50                   	push   eax
c001ac72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac7a:	e8 7f fe ff ff       	call   c001aafe <Reg::readInt(char*, char*, int*)>
c001ac7f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ac84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ac88:	0f 95 02             	setne  BYTE PTR [edx]
c001ac8b:	83 c4 2c             	add    esp,0x2c
c001ac8e:	c3                   	ret    

c001ac8f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001ac8f:	53                   	push   ebx
c001ac90:	83 ec 1c             	sub    esp,0x1c
c001ac93:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac97:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac9b:	50                   	push   eax
c001ac9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aca4:	e8 c1 ff ff ff       	call   c001ac6a <Reg::readBool(char*, char*, bool*)>
c001aca9:	83 c4 10             	add    esp,0x10
c001acac:	84 c0                	test   al,al
c001acae:	74 04                	je     c001acb4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001acb0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001acb4:	88 d8                	mov    al,bl
c001acb6:	83 c4 18             	add    esp,0x18
c001acb9:	5b                   	pop    ebx
c001acba:	c3                   	ret    

c001acbb <Reg::readIntWithDefault(char*, char*, int)>:
c001acbb:	53                   	push   ebx
c001acbc:	83 ec 1c             	sub    esp,0x1c
c001acbf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001acc3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001acc7:	50                   	push   eax
c001acc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001accc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001acd0:	e8 29 fe ff ff       	call   c001aafe <Reg::readInt(char*, char*, int*)>
c001acd5:	83 c4 10             	add    esp,0x10
c001acd8:	84 c0                	test   al,al
c001acda:	74 04                	je     c001ace0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001acdc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ace0:	89 d8                	mov    eax,ebx
c001ace2:	83 c4 18             	add    esp,0x18
c001ace5:	5b                   	pop    ebx
c001ace6:	c3                   	ret    

c001ace7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ace7:	57                   	push   edi
c001ace8:	56                   	push   esi
c001ace9:	56                   	push   esi
c001acea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001acee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001acf2:	56                   	push   esi
c001acf3:	57                   	push   edi
c001acf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acfc:	e8 e8 fe ff ff       	call   c001abe9 <Reg::readString(char*, char*, char*, int)>
c001ad01:	83 c4 10             	add    esp,0x10
c001ad04:	84 c0                	test   al,al
c001ad06:	75 1a                	jne    c001ad22 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ad08:	51                   	push   ecx
c001ad09:	56                   	push   esi
c001ad0a:	6a 00                	push   0x0
c001ad0c:	57                   	push   edi
c001ad0d:	e8 3e 5a fe ff       	call   c0000750 <memset>
c001ad12:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ad15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ad19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1b:	83 c4 10             	add    esp,0x10
c001ad1e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad22:	89 f8                	mov    eax,edi
c001ad24:	5a                   	pop    edx
c001ad25:	5e                   	pop    esi
c001ad26:	5f                   	pop    edi
c001ad27:	c3                   	ret    

c001ad28 <Sys::eject(regs*)>:
c001ad28:	83 ec 0c             	sub    esp,0xc
c001ad2b:	83 ca ff             	or     edx,0xffffffff
c001ad2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad32:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ad35:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ad3a:	83 e9 41             	sub    ecx,0x41
c001ad3d:	83 f9 19             	cmp    ecx,0x19
c001ad40:	77 18                	ja     c001ad5a <Sys::eject(regs*)+0x32>
c001ad42:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c001ad49:	85 c9                	test   ecx,ecx
c001ad4b:	74 0d                	je     c001ad5a <Sys::eject(regs*)+0x32>
c001ad4d:	83 ec 0c             	sub    esp,0xc
c001ad50:	51                   	push   ecx
c001ad51:	e8 28 b3 ff ff       	call   c001607e <LogicalDisk::eject()>
c001ad56:	83 c4 10             	add    esp,0x10
c001ad59:	99                   	cdq    
c001ad5a:	83 c4 0c             	add    esp,0xc
c001ad5d:	c3                   	ret    

c001ad5e <Sys::exit(regs*)>:
c001ad5e:	83 ec 18             	sub    esp,0x18
c001ad61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad65:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad68:	e8 c4 35 00 00       	call   c001e331 <terminateTask(int)>
c001ad6d:	83 c8 ff             	or     eax,0xffffffff
c001ad70:	83 c4 1c             	add    esp,0x1c
c001ad73:	89 c2                	mov    edx,eax
c001ad75:	c3                   	ret    

c001ad76 <Sys::getCwd(regs*)>:
c001ad76:	83 ec 10             	sub    esp,0x10
c001ad79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad7d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ad80:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad88:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad8b:	e8 64 7d ff ff       	call   c0012af4 <Fs::getcwd(Process*, char*, int)>
c001ad90:	83 c4 1c             	add    esp,0x1c
c001ad93:	99                   	cdq    
c001ad94:	c3                   	ret    

c001ad95 <Sys::getPID(regs*)>:
c001ad95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad9d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad9f:	99                   	cdq    
c001ada0:	c3                   	ret    

c001ada1 <Sys::getRAMData(regs*)>:
c001ada1:	8b 0d 54 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db54
c001ada7:	69 05 50 db 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002db50,0xc8
c001adb1:	99                   	cdq    
c001adb2:	f7 f9                	idiv   ecx
c001adb4:	c1 e0 18             	shl    eax,0x18
c001adb7:	09 c8                	or     eax,ecx
c001adb9:	99                   	cdq    
c001adba:	c3                   	ret    

c001adbb <Sys::getVGAPtr(regs*)>:
c001adbb:	55                   	push   ebp
c001adbc:	57                   	push   edi
c001adbd:	56                   	push   esi
c001adbe:	53                   	push   ebx
c001adbf:	83 ec 18             	sub    esp,0x18
c001adc2:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001adc6:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001adc9:	e8 af 30 00 00       	call   c001de7d <Thr::processFromPID(int)>
c001adce:	83 c4 10             	add    esp,0x10
c001add1:	89 c1                	mov    ecx,eax
c001add3:	b8 01 00 00 00       	mov    eax,0x1
c001add8:	85 c9                	test   ecx,ecx
c001adda:	74 59                	je     c001ae35 <Sys::getVGAPtr(regs*)+0x7a>
c001addc:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ade2:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ade6:	74 0c                	je     c001adf4 <Sys::getVGAPtr(regs*)+0x39>
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	53                   	push   ebx
c001adec:	e8 62 55 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001adf1:	83 c4 10             	add    esp,0x10
c001adf4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001adf7:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001adfa:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001adff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae01:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ae04:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae07:	81 c3 82 00 00 00    	add    ebx,0x82
c001ae0d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ae13:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae16:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ae19:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ae1f:	50                   	push   eax
c001ae20:	50                   	push   eax
c001ae21:	53                   	push   ebx
c001ae22:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ae25:	05 a8 0f 00 00       	add    eax,0xfa8
c001ae2a:	50                   	push   eax
c001ae2b:	e8 dc 59 fe ff       	call   c000080c <strcpy>
c001ae30:	83 c4 10             	add    esp,0x10
c001ae33:	31 c0                	xor    eax,eax
c001ae35:	83 c4 0c             	add    esp,0xc
c001ae38:	31 d2                	xor    edx,edx
c001ae3a:	5b                   	pop    ebx
c001ae3b:	5e                   	pop    esi
c001ae3c:	5f                   	pop    edi
c001ae3d:	5d                   	pop    ebp
c001ae3e:	c3                   	ret    

c001ae3f <Sys::loadDLL(regs*)>:
c001ae3f:	56                   	push   esi
c001ae40:	53                   	push   ebx
c001ae41:	31 d2                	xor    edx,edx
c001ae43:	51                   	push   ecx
c001ae44:	b8 01 00 00 00       	mov    eax,0x1
c001ae49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae4d:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ae51:	0f 84 8c 00 00 00    	je     c001aee3 <Sys::loadDLL(regs*)+0xa4>
c001ae57:	83 ec 0c             	sub    esp,0xc
c001ae5a:	68 14 01 00 00       	push   0x114
c001ae5f:	e8 35 47 ff ff       	call   c000f599 <malloc>
c001ae64:	83 c4 0c             	add    esp,0xc
c001ae67:	89 c3                	mov    ebx,eax
c001ae69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae6e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae71:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ae74:	53                   	push   ebx
c001ae75:	e8 78 7e ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001ae7a:	83 c4 10             	add    esp,0x10
c001ae7d:	31 d2                	xor    edx,edx
c001ae7f:	b8 02 00 00 00       	mov    eax,0x2
c001ae84:	85 db                	test   ebx,ebx
c001ae86:	74 5b                	je     c001aee3 <Sys::loadDLL(regs*)+0xa4>
c001ae88:	83 ec 0c             	sub    esp,0xc
c001ae8b:	53                   	push   ebx
c001ae8c:	e8 33 81 ff ff       	call   c0012fc4 <File::exists()>
c001ae91:	83 c4 10             	add    esp,0x10
c001ae94:	84 c0                	test   al,al
c001ae96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae98:	75 11                	jne    c001aeab <Sys::loadDLL(regs*)+0x6c>
c001ae9a:	83 ec 0c             	sub    esp,0xc
c001ae9d:	53                   	push   ebx
c001ae9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aea1:	83 c4 10             	add    esp,0x10
c001aea4:	b8 03 00 00 00       	mov    eax,0x3
c001aea9:	eb 36                	jmp    c001aee1 <Sys::loadDLL(regs*)+0xa2>
c001aeab:	83 ec 0c             	sub    esp,0xc
c001aeae:	53                   	push   ebx
c001aeaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeb2:	58                   	pop    eax
c001aeb3:	5a                   	pop    edx
c001aeb4:	6a 00                	push   0x0
c001aeb6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001aeb9:	e8 0e 22 00 00       	call   c001d0cc <Thr::loadDLL(char const*, bool)>
c001aebe:	83 c4 10             	add    esp,0x10
c001aec1:	89 c1                	mov    ecx,eax
c001aec3:	31 d2                	xor    edx,edx
c001aec5:	b8 04 00 00 00       	mov    eax,0x4
c001aeca:	85 c9                	test   ecx,ecx
c001aecc:	74 15                	je     c001aee3 <Sys::loadDLL(regs*)+0xa4>
c001aece:	53                   	push   ebx
c001aecf:	53                   	push   ebx
c001aed0:	ff 35 08 db 02 c0    	push   DWORD PTR ds:0xc002db08
c001aed6:	51                   	push   ecx
c001aed7:	e8 21 24 00 00       	call   c001d2fd <Thr::executeDLL(unsigned long, void*)>
c001aedc:	83 c4 10             	add    esp,0x10
c001aedf:	31 c0                	xor    eax,eax
c001aee1:	31 d2                	xor    edx,edx
c001aee3:	59                   	pop    ecx
c001aee4:	5b                   	pop    ebx
c001aee5:	5e                   	pop    esi
c001aee6:	c3                   	ret    

c001aee7 <Sys::read(regs*)>:
c001aee7:	57                   	push   edi
c001aee8:	56                   	push   esi
c001aee9:	53                   	push   ebx
c001aeea:	83 ec 10             	sub    esp,0x10
c001aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aef1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aef4:	83 f8 02             	cmp    eax,0x2
c001aef7:	77 10                	ja     c001af09 <Sys::read(regs*)+0x22>
c001aef9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aefe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af01:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001af07:	eb 0e                	jmp    c001af17 <Sys::read(regs*)+0x30>
c001af09:	83 ec 0c             	sub    esp,0xc
c001af0c:	50                   	push   eax
c001af0d:	e8 b7 61 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001af12:	83 c4 10             	add    esp,0x10
c001af15:	89 c1                	mov    ecx,eax
c001af17:	83 c8 ff             	or     eax,0xffffffff
c001af1a:	85 c9                	test   ecx,ecx
c001af1c:	89 c2                	mov    edx,eax
c001af1e:	74 28                	je     c001af48 <Sys::read(regs*)+0x61>
c001af20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001af28:	31 ff                	xor    edi,edi
c001af2a:	83 ec 0c             	sub    esp,0xc
c001af2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af2f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001af33:	52                   	push   edx
c001af34:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001af37:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001af3a:	57                   	push   edi
c001af3b:	56                   	push   esi
c001af3c:	51                   	push   ecx
c001af3d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af44:	83 c4 20             	add    esp,0x20
c001af47:	99                   	cdq    
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	5b                   	pop    ebx
c001af4c:	5e                   	pop    esi
c001af4d:	5f                   	pop    edi
c001af4e:	c3                   	ret    

c001af4f <Sys::sbrk(regs*)>:
c001af4f:	56                   	push   esi
c001af50:	53                   	push   ebx
c001af51:	50                   	push   eax
c001af52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af5e:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001af61:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001af67:	85 db                	test   ebx,ebx
c001af69:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001af6c:	74 02                	je     c001af70 <Sys::sbrk(regs*)+0x21>
c001af6e:	79 06                	jns    c001af76 <Sys::sbrk(regs*)+0x27>
c001af70:	89 f0                	mov    eax,esi
c001af72:	31 d2                	xor    edx,edx
c001af74:	eb 2a                	jmp    c001afa0 <Sys::sbrk(regs*)+0x51>
c001af76:	83 c8 ff             	or     eax,0xffffffff
c001af79:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001af7f:	89 c2                	mov    edx,eax
c001af81:	77 1d                	ja     c001afa0 <Sys::sbrk(regs*)+0x51>
c001af83:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001af89:	50                   	push   eax
c001af8a:	c1 ea 0c             	shr    edx,0xc
c001af8d:	68 07 0c 00 00       	push   0xc07
c001af92:	52                   	push   edx
c001af93:	51                   	push   ecx
c001af94:	e8 db 6b ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001af99:	89 f0                	mov    eax,esi
c001af9b:	31 d2                	xor    edx,edx
c001af9d:	83 c4 10             	add    esp,0x10
c001afa0:	59                   	pop    ecx
c001afa1:	5b                   	pop    ebx
c001afa2:	5e                   	pop    esi
c001afa3:	c3                   	ret    

c001afa4 <Sys::setCwd(regs*)>:
c001afa4:	83 ec 14             	sub    esp,0x14
c001afa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001afab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001afae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afb3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afb6:	e8 a8 80 ff ff       	call   c0013063 <Fs::setcwd(Process*, char*)>
c001afbb:	83 c4 1c             	add    esp,0x1c
c001afbe:	99                   	cdq    
c001afbf:	c3                   	ret    

c001afc0 <Sys::setTime(regs*)>:
c001afc0:	55                   	push   ebp
c001afc1:	31 c9                	xor    ecx,ecx
c001afc3:	57                   	push   edi
c001afc4:	bd 0c 00 00 00       	mov    ebp,0xc
c001afc9:	56                   	push   esi
c001afca:	53                   	push   ebx
c001afcb:	31 db                	xor    ebx,ebx
c001afcd:	83 ec 10             	sub    esp,0x10
c001afd0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001afd4:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001afd7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001afda:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001afdd:	89 c2                	mov    edx,eax
c001afdf:	66 81 ef 6c 07       	sub    di,0x76c
c001afe4:	83 e2 1f             	and    edx,0x1f
c001afe7:	c1 e7 10             	shl    edi,0x10
c001afea:	42                   	inc    edx
c001afeb:	c1 e8 05             	shr    eax,0x5
c001afee:	88 d1                	mov    cl,dl
c001aff0:	31 d2                	xor    edx,edx
c001aff2:	f7 f5                	div    ebp
c001aff4:	89 dd                	mov    ebp,ebx
c001aff6:	88 d5                	mov    ch,dl
c001aff8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001affe:	0f b7 c1             	movzx  eax,cx
c001b001:	31 d2                	xor    edx,edx
c001b003:	09 f8                	or     eax,edi
c001b005:	bf 3c 00 00 00       	mov    edi,0x3c
c001b00a:	89 c1                	mov    ecx,eax
c001b00c:	89 f0                	mov    eax,esi
c001b00e:	f7 f7                	div    edi
c001b010:	c1 e2 10             	shl    edx,0x10
c001b013:	09 d5                	or     ebp,edx
c001b015:	31 d2                	xor    edx,edx
c001b017:	89 eb                	mov    ebx,ebp
c001b019:	f7 f7                	div    edi
c001b01b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b020:	88 d7                	mov    bh,dl
c001b022:	89 f0                	mov    eax,esi
c001b024:	31 d2                	xor    edx,edx
c001b026:	f7 f7                	div    edi
c001b028:	bf 18 00 00 00       	mov    edi,0x18
c001b02d:	31 d2                	xor    edx,edx
c001b02f:	f7 f7                	div    edi
c001b031:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001b036:	88 d3                	mov    bl,dl
c001b038:	53                   	push   ebx
c001b039:	51                   	push   ecx
c001b03a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b040:	e8 67 88 ff ff       	call   c00138ac <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b045:	83 c4 1c             	add    esp,0x1c
c001b048:	83 f0 01             	xor    eax,0x1
c001b04b:	5b                   	pop    ebx
c001b04c:	0f b6 c0             	movzx  eax,al
c001b04f:	5e                   	pop    esi
c001b050:	31 d2                	xor    edx,edx
c001b052:	5f                   	pop    edi
c001b053:	5d                   	pop    ebp
c001b054:	c3                   	ret    

c001b055 <Sys::timezone(regs*)>:
c001b055:	53                   	push   ebx
c001b056:	83 ec 08             	sub    esp,0x8
c001b059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b05d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b061:	75 17                	jne    c001b07a <Sys::timezone(regs*)+0x25>
c001b063:	83 ec 0c             	sub    esp,0xc
c001b066:	68 f9 b9 02 c0       	push   0xc002b9f9
c001b06b:	e8 23 77 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001b070:	83 c8 ff             	or     eax,0xffffffff
c001b073:	83 c4 10             	add    esp,0x10
c001b076:	89 c2                	mov    edx,eax
c001b078:	eb 20                	jmp    c001b09a <Sys::timezone(regs*)+0x45>
c001b07a:	83 ec 0c             	sub    esp,0xc
c001b07d:	68 0e ba 02 c0       	push   0xc002ba0e
c001b082:	e8 0c 77 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001b087:	58                   	pop    eax
c001b088:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b08b:	e8 7e 85 ff ff       	call   c001360e <User::loadClockSettings(int)>
c001b090:	83 c4 10             	add    esp,0x10
c001b093:	b8 01 00 00 00       	mov    eax,0x1
c001b098:	31 d2                	xor    edx,edx
c001b09a:	83 c4 08             	add    esp,0x8
c001b09d:	5b                   	pop    ebx
c001b09e:	c3                   	ret    

c001b09f <Sys::write(regs*)>:
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	53                   	push   ebx
c001b0a2:	83 ec 10             	sub    esp,0x10
c001b0a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b0a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b0ac:	83 f8 02             	cmp    eax,0x2
c001b0af:	77 10                	ja     c001b0c1 <Sys::write(regs*)+0x22>
c001b0b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0b9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b0bf:	eb 0e                	jmp    c001b0cf <Sys::write(regs*)+0x30>
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	50                   	push   eax
c001b0c5:	e8 ff 5f ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b0ca:	83 c4 10             	add    esp,0x10
c001b0cd:	89 c1                	mov    ecx,eax
c001b0cf:	83 c8 ff             	or     eax,0xffffffff
c001b0d2:	85 c9                	test   ecx,ecx
c001b0d4:	89 c2                	mov    edx,eax
c001b0d6:	74 28                	je     c001b100 <Sys::write(regs*)+0x61>
c001b0d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b0e0:	31 ff                	xor    edi,edi
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b0e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b0eb:	52                   	push   edx
c001b0ec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b0ef:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b0f2:	57                   	push   edi
c001b0f3:	56                   	push   esi
c001b0f4:	51                   	push   ecx
c001b0f5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b0f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b0fc:	83 c4 20             	add    esp,0x20
c001b0ff:	99                   	cdq    
c001b100:	83 c4 10             	add    esp,0x10
c001b103:	5b                   	pop    ebx
c001b104:	5e                   	pop    esi
c001b105:	5f                   	pop    edi
c001b106:	c3                   	ret    

c001b107 <Sys::wsbe(regs*)>:
c001b107:	57                   	push   edi
c001b108:	b9 0b 00 00 00       	mov    ecx,0xb
c001b10d:	56                   	push   esi
c001b10e:	be 4d ba 02 c0       	mov    esi,0xc002ba4d
c001b113:	53                   	push   ebx
c001b114:	83 ec 30             	sub    esp,0x30
c001b117:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b11b:	fc                   	cld    
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b121:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b12a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b12d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b133:	8b 06                	mov    eax,DWORD PTR [esi]
c001b135:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b138:	57                   	push   edi
c001b139:	e8 2e 56 fe ff       	call   c000076c <strlen>
c001b13e:	5a                   	pop    edx
c001b13f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b143:	52                   	push   edx
c001b144:	31 d2                	xor    edx,edx
c001b146:	57                   	push   edi
c001b147:	52                   	push   edx
c001b148:	50                   	push   eax
c001b149:	56                   	push   esi
c001b14a:	ff d3                	call   ebx
c001b14c:	83 c4 14             	add    esp,0x14
c001b14f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b153:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b156:	e8 d6 31 00 00       	call   c001e331 <terminateTask(int)>
c001b15b:	83 c4 40             	add    esp,0x40
c001b15e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b163:	5b                   	pop    ebx
c001b164:	31 d2                	xor    edx,edx
c001b166:	5e                   	pop    esi
c001b167:	5f                   	pop    edi
c001b168:	c3                   	ret    

c001b169 <Sys::yield(regs*)>:
c001b169:	57                   	push   edi
c001b16a:	56                   	push   esi
c001b16b:	53                   	push   ebx
c001b16c:	fa                   	cli    
c001b16d:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001b173:	e8 19 29 00 00       	call   c001da91 <schedule()>
c001b178:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001b17d:	48                   	dec    eax
c001b17e:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001b183:	75 01                	jne    c001b186 <Sys::yield(regs*)+0x1d>
c001b185:	fb                   	sti    
c001b186:	8b 35 70 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e170
c001b18c:	8b 3d 74 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e174
c001b192:	89 f0                	mov    eax,esi
c001b194:	89 fb                	mov    ebx,edi
c001b196:	89 f1                	mov    ecx,esi
c001b198:	c1 e0 07             	shl    eax,0x7
c001b19b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b19f:	25 80 30 0f 00       	and    eax,0xf3080
c001b1a4:	c1 eb 17             	shr    ebx,0x17
c001b1a7:	31 c8                	xor    eax,ecx
c001b1a9:	89 da                	mov    edx,ebx
c001b1ab:	5b                   	pop    ebx
c001b1ac:	5e                   	pop    esi
c001b1ad:	5f                   	pop    edi
c001b1ae:	c3                   	ret    

c001b1af <sysCallSeekDir(regs*)>:
c001b1af:	31 c0                	xor    eax,eax
c001b1b1:	31 d2                	xor    edx,edx
c001b1b3:	c3                   	ret    

c001b1b4 <sysCallTellDir(regs*)>:
c001b1b4:	31 c0                	xor    eax,eax
c001b1b6:	31 d2                	xor    edx,edx
c001b1b8:	c3                   	ret    

c001b1b9 <sysCallVerify(regs*)>:
c001b1b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1bd:	31 d2                	xor    edx,edx
c001b1bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1c2:	c3                   	ret    

c001b1c3 <sysCallGetArgc(regs*)>:
c001b1c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1cb:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b1d1:	99                   	cdq    
c001b1d2:	c3                   	ret    

c001b1d3 <sysFormatDisk(regs*)>:
c001b1d3:	56                   	push   esi
c001b1d4:	53                   	push   ebx
c001b1d5:	53                   	push   ebx
c001b1d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1da:	8b 1d 74 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc74
c001b1e0:	eb 25                	jmp    c001b207 <sysFormatDisk(regs*)+0x34>
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b1e8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1ea:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b1ed:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b1f0:	50                   	push   eax
c001b1f1:	ff 34 85 00 e1 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f00]
c001b1f8:	53                   	push   ebx
c001b1f9:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b1fc:	83 c4 20             	add    esp,0x20
c001b1ff:	83 f8 08             	cmp    eax,0x8
c001b202:	75 12                	jne    c001b216 <sysFormatDisk(regs*)+0x43>
c001b204:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b207:	85 db                	test   ebx,ebx
c001b209:	75 d7                	jne    c001b1e2 <sysFormatDisk(regs*)+0xf>
c001b20b:	59                   	pop    ecx
c001b20c:	b8 03 00 00 00       	mov    eax,0x3
c001b211:	31 d2                	xor    edx,edx
c001b213:	5b                   	pop    ebx
c001b214:	5e                   	pop    esi
c001b215:	c3                   	ret    
c001b216:	85 c0                	test   eax,eax
c001b218:	74 1b                	je     c001b235 <sysFormatDisk(regs*)+0x62>
c001b21a:	83 f8 09             	cmp    eax,0x9
c001b21d:	74 0b                	je     c001b22a <sysFormatDisk(regs*)+0x57>
c001b21f:	59                   	pop    ecx
c001b220:	b8 02 00 00 00       	mov    eax,0x2
c001b225:	31 d2                	xor    edx,edx
c001b227:	5b                   	pop    ebx
c001b228:	5e                   	pop    esi
c001b229:	c3                   	ret    
c001b22a:	59                   	pop    ecx
c001b22b:	b8 01 00 00 00       	mov    eax,0x1
c001b230:	31 d2                	xor    edx,edx
c001b232:	5b                   	pop    ebx
c001b233:	5e                   	pop    esi
c001b234:	c3                   	ret    
c001b235:	59                   	pop    ecx
c001b236:	31 c0                	xor    eax,eax
c001b238:	31 d2                	xor    edx,edx
c001b23a:	5b                   	pop    ebx
c001b23b:	5e                   	pop    esi
c001b23c:	c3                   	ret    

c001b23d <sysSetDiskVolumeLabel(regs*)>:
c001b23d:	56                   	push   esi
c001b23e:	53                   	push   ebx
c001b23f:	53                   	push   ebx
c001b240:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b244:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b247:	83 f8 19             	cmp    eax,0x19
c001b24a:	77 29                	ja     c001b275 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b24c:	8b 0c 85 00 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1f00]
c001b253:	85 c9                	test   ecx,ecx
c001b255:	74 1e                	je     c001b275 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b257:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b25a:	85 d2                	test   edx,edx
c001b25c:	74 17                	je     c001b275 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b25e:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b264:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b266:	52                   	push   edx
c001b267:	50                   	push   eax
c001b268:	51                   	push   ecx
c001b269:	53                   	push   ebx
c001b26a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b26d:	83 c4 10             	add    esp,0x10
c001b270:	99                   	cdq    
c001b271:	59                   	pop    ecx
c001b272:	5b                   	pop    ebx
c001b273:	5e                   	pop    esi
c001b274:	c3                   	ret    
c001b275:	59                   	pop    ecx
c001b276:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b27b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b280:	5b                   	pop    ebx
c001b281:	5e                   	pop    esi
c001b282:	c3                   	ret    

c001b283 <sysGetDiskVolumeLabel(regs*)>:
c001b283:	57                   	push   edi
c001b284:	56                   	push   esi
c001b285:	53                   	push   ebx
c001b286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b28a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b28d:	83 fa 19             	cmp    edx,0x19
c001b290:	77 34                	ja     c001b2c6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b292:	8b 0c 95 00 e1 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1f00]
c001b299:	85 c9                	test   ecx,ecx
c001b29b:	74 29                	je     c001b2c6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b29d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b2a0:	85 db                	test   ebx,ebx
c001b2a2:	74 22                	je     c001b2c6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b2a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b2a7:	85 c0                	test   eax,eax
c001b2a9:	74 1b                	je     c001b2c6 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b2ab:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b2b1:	83 ec 0c             	sub    esp,0xc
c001b2b4:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b2b6:	50                   	push   eax
c001b2b7:	53                   	push   ebx
c001b2b8:	52                   	push   edx
c001b2b9:	51                   	push   ecx
c001b2ba:	56                   	push   esi
c001b2bb:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b2be:	83 c4 20             	add    esp,0x20
c001b2c1:	99                   	cdq    
c001b2c2:	5b                   	pop    ebx
c001b2c3:	5e                   	pop    esi
c001b2c4:	5f                   	pop    edi
c001b2c5:	c3                   	ret    
c001b2c6:	5b                   	pop    ebx
c001b2c7:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b2cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2d1:	5e                   	pop    esi
c001b2d2:	5f                   	pop    edi
c001b2d3:	c3                   	ret    

c001b2d4 <sysShutdown(regs*)>:
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b2de:	85 c0                	test   eax,eax
c001b2e0:	74 18                	je     c001b2fa <sysShutdown(regs*)+0x26>
c001b2e2:	83 f8 01             	cmp    eax,0x1
c001b2e5:	74 38                	je     c001b31f <sysShutdown(regs*)+0x4b>
c001b2e7:	83 f8 02             	cmp    eax,0x2
c001b2ea:	74 24                	je     c001b310 <sysShutdown(regs*)+0x3c>
c001b2ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2f6:	83 c4 0c             	add    esp,0xc
c001b2f9:	c3                   	ret    
c001b2fa:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001b2ff:	8b 10                	mov    edx,DWORD PTR [eax]
c001b301:	6a 00                	push   0x0
c001b303:	6a 00                	push   0x0
c001b305:	6a 00                	push   0x0
c001b307:	50                   	push   eax
c001b308:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b30b:	83 c4 10             	add    esp,0x10
c001b30e:	eb dc                	jmp    c001b2ec <sysShutdown(regs*)+0x18>
c001b310:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001b315:	8b 10                	mov    edx,DWORD PTR [eax]
c001b317:	6a 00                	push   0x0
c001b319:	6a 00                	push   0x0
c001b31b:	6a 01                	push   0x1
c001b31d:	eb e8                	jmp    c001b307 <sysShutdown(regs*)+0x33>
c001b31f:	a1 a0 01 03 c0       	mov    eax,ds:0xc00301a0
c001b324:	85 c0                	test   eax,eax
c001b326:	74 02                	je     c001b32a <sysShutdown(regs*)+0x56>
c001b328:	ff d0                	call   eax
c001b32a:	31 c0                	xor    eax,eax
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	83 c4 0c             	add    esp,0xc
c001b331:	c3                   	ret    

c001b332 <sysCallRealpath(regs*)>:
c001b332:	83 ec 0c             	sub    esp,0xc
c001b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b339:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b33c:	85 d2                	test   edx,edx
c001b33e:	74 07                	je     c001b347 <sysCallRealpath(regs*)+0x15>
c001b340:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b343:	85 c0                	test   eax,eax
c001b345:	75 0b                	jne    c001b352 <sysCallRealpath(regs*)+0x20>
c001b347:	b8 01 00 00 00       	mov    eax,0x1
c001b34c:	31 d2                	xor    edx,edx
c001b34e:	83 c4 0c             	add    esp,0xc
c001b351:	c3                   	ret    
c001b352:	51                   	push   ecx
c001b353:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b359:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b35c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b362:	51                   	push   ecx
c001b363:	52                   	push   edx
c001b364:	50                   	push   eax
c001b365:	e8 de 77 ff ff       	call   c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b36a:	83 c4 10             	add    esp,0x10
c001b36d:	31 c0                	xor    eax,eax
c001b36f:	31 d2                	xor    edx,edx
c001b371:	83 c4 0c             	add    esp,0xc
c001b374:	c3                   	ret    

c001b375 <sysCallReadDir(regs*)>:
c001b375:	53                   	push   ebx
c001b376:	83 ec 18             	sub    esp,0x18
c001b379:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b37d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b380:	83 f8 02             	cmp    eax,0x2
c001b383:	76 60                	jbe    c001b3e5 <sysCallReadDir(regs*)+0x70>
c001b385:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b38c:	77 48                	ja     c001b3d6 <sysCallReadDir(regs*)+0x61>
c001b38e:	83 ec 0c             	sub    esp,0xc
c001b391:	50                   	push   eax
c001b392:	e8 32 5d ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	85 c0                	test   eax,eax
c001b39c:	74 38                	je     c001b3d6 <sysCallReadDir(regs*)+0x61>
c001b39e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b3a6:	83 ec 0c             	sub    esp,0xc
c001b3a9:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3ab:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b3af:	51                   	push   ecx
c001b3b0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3b3:	6a 00                	push   0x0
c001b3b5:	68 10 01 00 00       	push   0x110
c001b3ba:	50                   	push   eax
c001b3bb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b3be:	83 c4 20             	add    esp,0x20
c001b3c1:	85 c0                	test   eax,eax
c001b3c3:	74 29                	je     c001b3ee <sysCallReadDir(regs*)+0x79>
c001b3c5:	83 f8 07             	cmp    eax,0x7
c001b3c8:	74 1b                	je     c001b3e5 <sysCallReadDir(regs*)+0x70>
c001b3ca:	b8 02 00 00 00       	mov    eax,0x2
c001b3cf:	31 d2                	xor    edx,edx
c001b3d1:	83 c4 18             	add    esp,0x18
c001b3d4:	5b                   	pop    ebx
c001b3d5:	c3                   	ret    
c001b3d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3e0:	83 c4 18             	add    esp,0x18
c001b3e3:	5b                   	pop    ebx
c001b3e4:	c3                   	ret    
c001b3e5:	b8 01 00 00 00       	mov    eax,0x1
c001b3ea:	31 d2                	xor    edx,edx
c001b3ec:	eb e3                	jmp    c001b3d1 <sysCallReadDir(regs*)+0x5c>
c001b3ee:	31 c0                	xor    eax,eax
c001b3f0:	31 d2                	xor    edx,edx
c001b3f2:	eb dd                	jmp    c001b3d1 <sysCallReadDir(regs*)+0x5c>

c001b3f4 <sysCallIsATTY(regs*)>:
c001b3f4:	83 ec 0c             	sub    esp,0xc
c001b3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3fe:	83 f8 02             	cmp    eax,0x2
c001b401:	76 07                	jbe    c001b40a <sysCallIsATTY(regs*)+0x16>
c001b403:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b408:	75 26                	jne    c001b430 <sysCallIsATTY(regs*)+0x3c>
c001b40a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b40f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b412:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b418:	85 c0                	test   eax,eax
c001b41a:	74 24                	je     c001b440 <sysCallIsATTY(regs*)+0x4c>
c001b41c:	83 ec 0c             	sub    esp,0xc
c001b41f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b421:	50                   	push   eax
c001b422:	ff 12                	call   DWORD PTR [edx]
c001b424:	31 d2                	xor    edx,edx
c001b426:	0f b6 c0             	movzx  eax,al
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	83 c4 0c             	add    esp,0xc
c001b42f:	c3                   	ret    
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	50                   	push   eax
c001b434:	e8 90 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b439:	83 c4 10             	add    esp,0x10
c001b43c:	85 c0                	test   eax,eax
c001b43e:	75 dc                	jne    c001b41c <sysCallIsATTY(regs*)+0x28>
c001b440:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b445:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b44a:	83 c4 0c             	add    esp,0xc
c001b44d:	c3                   	ret    

c001b44e <sysCallSeek(regs*)>:
c001b44e:	53                   	push   ebx
c001b44f:	83 ec 08             	sub    esp,0x8
c001b452:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b456:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b459:	8d 50 fd             	lea    edx,[eax-0x3]
c001b45c:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b462:	77 32                	ja     c001b496 <sysCallSeek(regs*)+0x48>
c001b464:	83 ec 0c             	sub    esp,0xc
c001b467:	50                   	push   eax
c001b468:	e8 5c 5c ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b46d:	83 c4 0c             	add    esp,0xc
c001b470:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b473:	31 db                	xor    ebx,ebx
c001b475:	53                   	push   ebx
c001b476:	51                   	push   ecx
c001b477:	50                   	push   eax
c001b478:	e8 97 79 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001b47d:	83 c4 10             	add    esp,0x10
c001b480:	85 c0                	test   eax,eax
c001b482:	0f 95 c0             	setne  al
c001b485:	31 d2                	xor    edx,edx
c001b487:	0f b6 c0             	movzx  eax,al
c001b48a:	f7 d8                	neg    eax
c001b48c:	83 d2 00             	adc    edx,0x0
c001b48f:	83 c4 08             	add    esp,0x8
c001b492:	f7 da                	neg    edx
c001b494:	5b                   	pop    ebx
c001b495:	c3                   	ret    
c001b496:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b49b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4a0:	83 c4 08             	add    esp,0x8
c001b4a3:	5b                   	pop    ebx
c001b4a4:	c3                   	ret    

c001b4a5 <sysCallTell(regs*)>:
c001b4a5:	53                   	push   ebx
c001b4a6:	83 ec 08             	sub    esp,0x8
c001b4a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4ad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4b0:	83 f8 02             	cmp    eax,0x2
c001b4b3:	76 4d                	jbe    c001b502 <sysCallTell(regs*)+0x5d>
c001b4b5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b4ba:	76 19                	jbe    c001b4d5 <sysCallTell(regs*)+0x30>
c001b4bc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b4bf:	31 d2                	xor    edx,edx
c001b4c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ce:	31 c0                	xor    eax,eax
c001b4d0:	83 c4 08             	add    esp,0x8
c001b4d3:	5b                   	pop    ebx
c001b4d4:	c3                   	ret    
c001b4d5:	83 ec 0c             	sub    esp,0xc
c001b4d8:	50                   	push   eax
c001b4d9:	e8 eb 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b4de:	5a                   	pop    edx
c001b4df:	59                   	pop    ecx
c001b4e0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b4e3:	50                   	push   eax
c001b4e4:	e8 81 79 ff ff       	call   c0012e6a <File::tell(unsigned long long*)>
c001b4e9:	83 c4 10             	add    esp,0x10
c001b4ec:	85 c0                	test   eax,eax
c001b4ee:	0f 95 c0             	setne  al
c001b4f1:	31 d2                	xor    edx,edx
c001b4f3:	0f b6 c0             	movzx  eax,al
c001b4f6:	f7 d8                	neg    eax
c001b4f8:	83 d2 00             	adc    edx,0x0
c001b4fb:	83 c4 08             	add    esp,0x8
c001b4fe:	f7 da                	neg    edx
c001b500:	5b                   	pop    ebx
c001b501:	c3                   	ret    
c001b502:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b507:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b50c:	83 c4 08             	add    esp,0x8
c001b50f:	5b                   	pop    ebx
c001b510:	c3                   	ret    

c001b511 <sysCallSize(regs*)>:
c001b511:	53                   	push   ebx
c001b512:	83 ec 18             	sub    esp,0x18
c001b515:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b519:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b51c:	83 f8 02             	cmp    eax,0x2
c001b51f:	76 53                	jbe    c001b574 <sysCallSize(regs*)+0x63>
c001b521:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b526:	76 19                	jbe    c001b541 <sysCallSize(regs*)+0x30>
c001b528:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b52b:	31 d2                	xor    edx,edx
c001b52d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b533:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b53a:	31 c0                	xor    eax,eax
c001b53c:	83 c4 18             	add    esp,0x18
c001b53f:	5b                   	pop    ebx
c001b540:	c3                   	ret    
c001b541:	83 ec 0c             	sub    esp,0xc
c001b544:	50                   	push   eax
c001b545:	e8 7f 5b ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b54a:	83 c4 0c             	add    esp,0xc
c001b54d:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b551:	52                   	push   edx
c001b552:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b555:	50                   	push   eax
c001b556:	e8 a7 7a ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001b55b:	83 c4 10             	add    esp,0x10
c001b55e:	85 c0                	test   eax,eax
c001b560:	0f 95 c0             	setne  al
c001b563:	31 d2                	xor    edx,edx
c001b565:	0f b6 c0             	movzx  eax,al
c001b568:	f7 d8                	neg    eax
c001b56a:	83 d2 00             	adc    edx,0x0
c001b56d:	83 c4 18             	add    esp,0x18
c001b570:	f7 da                	neg    edx
c001b572:	5b                   	pop    ebx
c001b573:	c3                   	ret    
c001b574:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b579:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b57e:	83 c4 18             	add    esp,0x18
c001b581:	5b                   	pop    ebx
c001b582:	c3                   	ret    

c001b583 <sysCallSizeFromFilename(regs*)>:
c001b583:	57                   	push   edi
c001b584:	56                   	push   esi
c001b585:	53                   	push   ebx
c001b586:	83 ec 20             	sub    esp,0x20
c001b589:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b58d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b590:	83 fb 02             	cmp    ebx,0x2
c001b593:	0f 86 88 00 00 00    	jbe    c001b621 <sysCallSizeFromFilename(regs*)+0x9e>
c001b599:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b59f:	76 1b                	jbe    c001b5bc <sysCallSizeFromFilename(regs*)+0x39>
c001b5a1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b5a4:	31 d2                	xor    edx,edx
c001b5a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b5ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b5b3:	83 c4 20             	add    esp,0x20
c001b5b6:	31 c0                	xor    eax,eax
c001b5b8:	5b                   	pop    ebx
c001b5b9:	5e                   	pop    esi
c001b5ba:	5f                   	pop    edi
c001b5bb:	c3                   	ret    
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	68 14 01 00 00       	push   0x114
c001b5c4:	e8 d0 3f ff ff       	call   c000f599 <malloc>
c001b5c9:	83 c4 0c             	add    esp,0xc
c001b5cc:	89 c7                	mov    edi,eax
c001b5ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5d6:	53                   	push   ebx
c001b5d7:	57                   	push   edi
c001b5d8:	e8 15 77 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001b5dd:	83 c4 0c             	add    esp,0xc
c001b5e0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b5e4:	50                   	push   eax
c001b5e5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b5e8:	57                   	push   edi
c001b5e9:	e8 14 7a ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001b5ee:	83 c4 10             	add    esp,0x10
c001b5f1:	85 ff                	test   edi,edi
c001b5f3:	74 14                	je     c001b609 <sysCallSizeFromFilename(regs*)+0x86>
c001b5f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5f9:	8b 17                	mov    edx,DWORD PTR [edi]
c001b5fb:	83 ec 0c             	sub    esp,0xc
c001b5fe:	57                   	push   edi
c001b5ff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b602:	83 c4 10             	add    esp,0x10
c001b605:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b609:	85 c0                	test   eax,eax
c001b60b:	0f 95 c0             	setne  al
c001b60e:	31 d2                	xor    edx,edx
c001b610:	0f b6 c0             	movzx  eax,al
c001b613:	f7 d8                	neg    eax
c001b615:	83 d2 00             	adc    edx,0x0
c001b618:	83 c4 20             	add    esp,0x20
c001b61b:	f7 da                	neg    edx
c001b61d:	5b                   	pop    ebx
c001b61e:	5e                   	pop    esi
c001b61f:	5f                   	pop    edi
c001b620:	c3                   	ret    
c001b621:	83 c4 20             	add    esp,0x20
c001b624:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b629:	5b                   	pop    ebx
c001b62a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b62f:	5e                   	pop    esi
c001b630:	5f                   	pop    edi
c001b631:	c3                   	ret    

c001b632 <sysCallClose(regs*)>:
c001b632:	53                   	push   ebx
c001b633:	83 ec 08             	sub    esp,0x8
c001b636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b63d:	83 f8 02             	cmp    eax,0x2
c001b640:	76 41                	jbe    c001b683 <sysCallClose(regs*)+0x51>
c001b642:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b648:	83 fa 01             	cmp    edx,0x1
c001b64b:	76 2d                	jbe    c001b67a <sysCallClose(regs*)+0x48>
c001b64d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b652:	77 2f                	ja     c001b683 <sysCallClose(regs*)+0x51>
c001b654:	83 ec 0c             	sub    esp,0xc
c001b657:	50                   	push   eax
c001b658:	e8 6c 5a ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b65d:	89 c3                	mov    ebx,eax
c001b65f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b662:	e8 4d 77 ff ff       	call   c0012db4 <File::close()>
c001b667:	83 c4 10             	add    esp,0x10
c001b66a:	85 db                	test   ebx,ebx
c001b66c:	74 0c                	je     c001b67a <sysCallClose(regs*)+0x48>
c001b66e:	83 ec 0c             	sub    esp,0xc
c001b671:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b673:	53                   	push   ebx
c001b674:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b677:	83 c4 10             	add    esp,0x10
c001b67a:	31 c0                	xor    eax,eax
c001b67c:	31 d2                	xor    edx,edx
c001b67e:	83 c4 08             	add    esp,0x8
c001b681:	5b                   	pop    ebx
c001b682:	c3                   	ret    
c001b683:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b688:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b68d:	83 c4 08             	add    esp,0x8
c001b690:	5b                   	pop    ebx
c001b691:	c3                   	ret    

c001b692 <sysCallOpenDir(regs*)>:
c001b692:	56                   	push   esi
c001b693:	53                   	push   ebx
c001b694:	53                   	push   ebx
c001b695:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b699:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b69c:	85 f6                	test   esi,esi
c001b69e:	74 59                	je     c001b6f9 <sysCallOpenDir(regs*)+0x67>
c001b6a0:	83 ec 0c             	sub    esp,0xc
c001b6a3:	68 14 01 00 00       	push   0x114
c001b6a8:	e8 ec 3e ff ff       	call   c000f599 <malloc>
c001b6ad:	83 c4 0c             	add    esp,0xc
c001b6b0:	89 c6                	mov    esi,eax
c001b6b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6b7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b6ba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6bd:	56                   	push   esi
c001b6be:	e8 db 7a ff ff       	call   c001319e <Directory::Directory(char const*, Process*)>
c001b6c3:	83 c4 10             	add    esp,0x10
c001b6c6:	85 f6                	test   esi,esi
c001b6c8:	74 2f                	je     c001b6f9 <sysCallOpenDir(regs*)+0x67>
c001b6ca:	83 ec 0c             	sub    esp,0xc
c001b6cd:	56                   	push   esi
c001b6ce:	e8 2f 7b ff ff       	call   c0013202 <Directory::open()>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	85 c0                	test   eax,eax
c001b6d8:	75 1f                	jne    c001b6f9 <sysCallOpenDir(regs*)+0x67>
c001b6da:	83 ec 0c             	sub    esp,0xc
c001b6dd:	56                   	push   esi
c001b6de:	e8 f1 56 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001b6e3:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	89 02                	mov    DWORD PTR [edx],eax
c001b6eb:	c1 f8 1f             	sar    eax,0x1f
c001b6ee:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b6f1:	31 c0                	xor    eax,eax
c001b6f3:	59                   	pop    ecx
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	5b                   	pop    ebx
c001b6f7:	5e                   	pop    esi
c001b6f8:	c3                   	ret    
c001b6f9:	59                   	pop    ecx
c001b6fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b704:	5b                   	pop    ebx
c001b705:	5e                   	pop    esi
c001b706:	c3                   	ret    

c001b707 <sysCallCloseDir(regs*)>:
c001b707:	53                   	push   ebx
c001b708:	83 ec 08             	sub    esp,0x8
c001b70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b712:	8d 50 fd             	lea    edx,[eax-0x3]
c001b715:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b71b:	77 2f                	ja     c001b74c <sysCallCloseDir(regs*)+0x45>
c001b71d:	83 ec 0c             	sub    esp,0xc
c001b720:	50                   	push   eax
c001b721:	e8 a3 59 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b726:	89 c3                	mov    ebx,eax
c001b728:	89 04 24             	mov    DWORD PTR [esp],eax
c001b72b:	e8 2e 7b ff ff       	call   c001325e <Directory::close()>
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	85 db                	test   ebx,ebx
c001b735:	74 0c                	je     c001b743 <sysCallCloseDir(regs*)+0x3c>
c001b737:	83 ec 0c             	sub    esp,0xc
c001b73a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b73c:	53                   	push   ebx
c001b73d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	31 c0                	xor    eax,eax
c001b745:	31 d2                	xor    edx,edx
c001b747:	83 c4 08             	add    esp,0x8
c001b74a:	5b                   	pop    ebx
c001b74b:	c3                   	ret    
c001b74c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b751:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b756:	83 c4 08             	add    esp,0x8
c001b759:	5b                   	pop    ebx
c001b75a:	c3                   	ret    

c001b75b <sysCallMakeDir(regs*)>:
c001b75b:	56                   	push   esi
c001b75c:	53                   	push   ebx
c001b75d:	83 ec 10             	sub    esp,0x10
c001b760:	68 14 01 00 00       	push   0x114
c001b765:	e8 2f 3e ff ff       	call   c000f599 <malloc>
c001b76a:	83 c4 0c             	add    esp,0xc
c001b76d:	89 c3                	mov    ebx,eax
c001b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b774:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b77b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b77e:	53                   	push   ebx
c001b77f:	e8 1a 7a ff ff       	call   c001319e <Directory::Directory(char const*, Process*)>
c001b784:	83 c4 10             	add    esp,0x10
c001b787:	85 db                	test   ebx,ebx
c001b789:	74 32                	je     c001b7bd <sysCallMakeDir(regs*)+0x62>
c001b78b:	83 ec 0c             	sub    esp,0xc
c001b78e:	53                   	push   ebx
c001b78f:	e8 4e 7c ff ff       	call   c00133e2 <Directory::create()>
c001b794:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b797:	89 c6                	mov    esi,eax
c001b799:	e8 c0 7a ff ff       	call   c001325e <Directory::close()>
c001b79e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b7a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b7a6:	83 c4 10             	add    esp,0x10
c001b7a9:	31 c0                	xor    eax,eax
c001b7ab:	59                   	pop    ecx
c001b7ac:	85 f6                	test   esi,esi
c001b7ae:	5b                   	pop    ebx
c001b7af:	0f 95 c0             	setne  al
c001b7b2:	5e                   	pop    esi
c001b7b3:	31 d2                	xor    edx,edx
c001b7b5:	f7 d8                	neg    eax
c001b7b7:	83 d2 00             	adc    edx,0x0
c001b7ba:	f7 da                	neg    edx
c001b7bc:	c3                   	ret    
c001b7bd:	59                   	pop    ecx
c001b7be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7c8:	5b                   	pop    ebx
c001b7c9:	5e                   	pop    esi
c001b7ca:	c3                   	ret    

c001b7cb <sysCallWait(regs*)>:
c001b7cb:	83 ec 10             	sub    esp,0x10
c001b7ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b7d2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b7d5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b7d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b7db:	e8 b4 24 00 00       	call   c001dc94 <waitTask(int, int*, int)>
c001b7e0:	83 c4 1c             	add    esp,0x1c
c001b7e3:	99                   	cdq    
c001b7e4:	c3                   	ret    

c001b7e5 <sysCallNotImpl(regs*)>:
c001b7e5:	83 ec 18             	sub    esp,0x18
c001b7e8:	68 79 ba 02 c0       	push   0xc002ba79
c001b7ed:	e8 0d e7 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001b7f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7fc:	83 c4 1c             	add    esp,0x1c
c001b7ff:	c3                   	ret    

c001b800 <sysPanic(regs*)>:
c001b800:	83 ec 18             	sub    esp,0x18
c001b803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b807:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b80a:	e8 f0 e6 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001b80f:	b8 01 00 00 00       	mov    eax,0x1
c001b814:	31 d2                	xor    edx,edx
c001b816:	83 c4 1c             	add    esp,0x1c
c001b819:	c3                   	ret    

c001b81a <sysCallRmdir(regs*)>:
c001b81a:	56                   	push   esi
c001b81b:	53                   	push   ebx
c001b81c:	83 ec 20             	sub    esp,0x20
c001b81f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b823:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b826:	68 14 01 00 00       	push   0x114
c001b82b:	e8 69 3d ff ff       	call   c000f599 <malloc>
c001b830:	83 c4 0c             	add    esp,0xc
c001b833:	89 c3                	mov    ebx,eax
c001b835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b83a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b83d:	56                   	push   esi
c001b83e:	53                   	push   ebx
c001b83f:	e8 ae 74 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001b844:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b847:	e8 82 76 ff ff       	call   c0012ece <File::unlink()>
c001b84c:	83 c4 10             	add    esp,0x10
c001b84f:	85 db                	test   ebx,ebx
c001b851:	74 14                	je     c001b867 <sysCallRmdir(regs*)+0x4d>
c001b853:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b857:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b859:	83 ec 0c             	sub    esp,0xc
c001b85c:	53                   	push   ebx
c001b85d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b867:	85 c0                	test   eax,eax
c001b869:	0f 95 c0             	setne  al
c001b86c:	31 d2                	xor    edx,edx
c001b86e:	0f b6 c0             	movzx  eax,al
c001b871:	f7 d8                	neg    eax
c001b873:	83 d2 00             	adc    edx,0x0
c001b876:	83 c4 14             	add    esp,0x14
c001b879:	f7 da                	neg    edx
c001b87b:	5b                   	pop    ebx
c001b87c:	5e                   	pop    esi
c001b87d:	c3                   	ret    

c001b87e <sysCallUnlink(regs*)>:
c001b87e:	56                   	push   esi
c001b87f:	53                   	push   ebx
c001b880:	83 ec 20             	sub    esp,0x20
c001b883:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b887:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b88a:	68 14 01 00 00       	push   0x114
c001b88f:	e8 05 3d ff ff       	call   c000f599 <malloc>
c001b894:	83 c4 0c             	add    esp,0xc
c001b897:	89 c3                	mov    ebx,eax
c001b899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b89e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8a1:	56                   	push   esi
c001b8a2:	53                   	push   ebx
c001b8a3:	e8 4a 74 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001b8a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b8ab:	e8 1e 76 ff ff       	call   c0012ece <File::unlink()>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	85 db                	test   ebx,ebx
c001b8b5:	74 14                	je     c001b8cb <sysCallUnlink(regs*)+0x4d>
c001b8b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8bb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b8bd:	83 ec 0c             	sub    esp,0xc
c001b8c0:	53                   	push   ebx
c001b8c1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8cb:	85 c0                	test   eax,eax
c001b8cd:	0f 95 c0             	setne  al
c001b8d0:	31 d2                	xor    edx,edx
c001b8d2:	0f b6 c0             	movzx  eax,al
c001b8d5:	f7 d8                	neg    eax
c001b8d7:	83 d2 00             	adc    edx,0x0
c001b8da:	83 c4 14             	add    esp,0x14
c001b8dd:	f7 da                	neg    edx
c001b8df:	5b                   	pop    ebx
c001b8e0:	5e                   	pop    esi
c001b8e1:	c3                   	ret    

c001b8e2 <sysCallGetArgv(regs*)>:
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b8e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b8ec:	85 c0                	test   eax,eax
c001b8ee:	78 2b                	js     c001b91b <sysCallGetArgv(regs*)+0x39>
c001b8f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8f6:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8f9:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b8ff:	7d 1a                	jge    c001b91b <sysCallGetArgv(regs*)+0x39>
c001b901:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b908:	85 c0                	test   eax,eax
c001b90a:	74 17                	je     c001b923 <sysCallGetArgv(regs*)+0x41>
c001b90c:	83 ec 08             	sub    esp,0x8
c001b90f:	50                   	push   eax
c001b910:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b913:	e8 f4 4e fe ff       	call   c000080c <strcpy>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	31 c0                	xor    eax,eax
c001b91d:	31 d2                	xor    edx,edx
c001b91f:	83 c4 0c             	add    esp,0xc
c001b922:	c3                   	ret    
c001b923:	b8 01 00 00 00       	mov    eax,0x1
c001b928:	31 d2                	xor    edx,edx
c001b92a:	83 c4 0c             	add    esp,0xc
c001b92d:	c3                   	ret    

c001b92e <sysCallTTYName(regs*)>:
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	53                   	push   ebx
c001b931:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b935:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b938:	85 c0                	test   eax,eax
c001b93a:	74 5f                	je     c001b99b <sysCallTTYName(regs*)+0x6d>
c001b93c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b93f:	83 f8 02             	cmp    eax,0x2
c001b942:	77 3e                	ja     c001b982 <sysCallTTYName(regs*)+0x54>
c001b944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b949:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b952:	85 db                	test   ebx,ebx
c001b954:	74 45                	je     c001b99b <sysCallTTYName(regs*)+0x6d>
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b95b:	53                   	push   ebx
c001b95c:	ff 10                	call   DWORD PTR [eax]
c001b95e:	83 c4 10             	add    esp,0x10
c001b961:	84 c0                	test   al,al
c001b963:	74 41                	je     c001b9a6 <sysCallTTYName(regs*)+0x78>
c001b965:	83 ec 08             	sub    esp,0x8
c001b968:	81 c3 82 00 00 00    	add    ebx,0x82
c001b96e:	53                   	push   ebx
c001b96f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b972:	e8 95 4e fe ff       	call   c000080c <strcpy>
c001b977:	83 c4 10             	add    esp,0x10
c001b97a:	31 c0                	xor    eax,eax
c001b97c:	59                   	pop    ecx
c001b97d:	31 d2                	xor    edx,edx
c001b97f:	5b                   	pop    ebx
c001b980:	5e                   	pop    esi
c001b981:	c3                   	ret    
c001b982:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b987:	74 bb                	je     c001b944 <sysCallTTYName(regs*)+0x16>
c001b989:	83 ec 0c             	sub    esp,0xc
c001b98c:	50                   	push   eax
c001b98d:	e8 37 57 ff ff       	call   c00110c9 <getFromFileDescriptor(int)>
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	89 c3                	mov    ebx,eax
c001b997:	85 db                	test   ebx,ebx
c001b999:	75 bb                	jne    c001b956 <sysCallTTYName(regs*)+0x28>
c001b99b:	59                   	pop    ecx
c001b99c:	b8 01 00 00 00       	mov    eax,0x1
c001b9a1:	31 d2                	xor    edx,edx
c001b9a3:	5b                   	pop    ebx
c001b9a4:	5e                   	pop    esi
c001b9a5:	c3                   	ret    
c001b9a6:	59                   	pop    ecx
c001b9a7:	b8 02 00 00 00       	mov    eax,0x2
c001b9ac:	31 d2                	xor    edx,edx
c001b9ae:	5b                   	pop    ebx
c001b9af:	5e                   	pop    esi
c001b9b0:	c3                   	ret    

c001b9b1 <sysCallUSleep(regs*)>:
c001b9b1:	83 ec 14             	sub    esp,0x14
c001b9b4:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b9b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9bd:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b9c4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b9c7:	01 ca                	add    edx,ecx
c001b9c9:	52                   	push   edx
c001b9ca:	50                   	push   eax
c001b9cb:	e8 9b 23 00 00       	call   c001dd6b <nanoSleep(unsigned long long)>
c001b9d0:	31 c0                	xor    eax,eax
c001b9d2:	31 d2                	xor    edx,edx
c001b9d4:	83 c4 1c             	add    esp,0x1c
c001b9d7:	c3                   	ret    

c001b9d8 <sysCallSpawn(regs*)>:
c001b9d8:	56                   	push   esi
c001b9d9:	53                   	push   ebx
c001b9da:	50                   	push   eax
c001b9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9df:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b9e2:	85 c0                	test   eax,eax
c001b9e4:	75 08                	jne    c001b9ee <sysCallSpawn(regs*)+0x16>
c001b9e6:	59                   	pop    ecx
c001b9e7:	31 c0                	xor    eax,eax
c001b9e9:	31 d2                	xor    edx,edx
c001b9eb:	5b                   	pop    ebx
c001b9ec:	5e                   	pop    esi
c001b9ed:	c3                   	ret    
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	68 3f 07 00 00       	push   0x73f
c001b9f6:	e8 9e 3b ff ff       	call   c000f599 <malloc>
c001b9fb:	83 c4 10             	add    esp,0x10
c001b9fe:	89 c6                	mov    esi,eax
c001ba00:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ba03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba06:	85 c0                	test   eax,eax
c001ba08:	75 32                	jne    c001ba3c <sysCallSpawn(regs*)+0x64>
c001ba0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba0f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba12:	52                   	push   edx
c001ba13:	50                   	push   eax
c001ba14:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ba17:	56                   	push   esi
c001ba18:	e8 73 1a 00 00       	call   c001d490 <Process::Process(char const*, Process*, char**)>
c001ba1d:	83 c4 10             	add    esp,0x10
c001ba20:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001ba27:	75 bd                	jne    c001b9e6 <sysCallSpawn(regs*)+0xe>
c001ba29:	83 ec 0c             	sub    esp,0xc
c001ba2c:	56                   	push   esi
c001ba2d:	e8 40 1f 00 00       	call   c001d972 <Process::createUserThread()>
c001ba32:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba34:	83 c4 10             	add    esp,0x10
c001ba37:	99                   	cdq    
c001ba38:	59                   	pop    ecx
c001ba39:	5b                   	pop    ebx
c001ba3a:	5e                   	pop    esi
c001ba3b:	c3                   	ret    
c001ba3c:	31 c0                	xor    eax,eax
c001ba3e:	eb d2                	jmp    c001ba12 <sysCallSpawn(regs*)+0x3a>

c001ba40 <sysCallGetEnv(regs*)>:
c001ba40:	57                   	push   edi
c001ba41:	56                   	push   esi
c001ba42:	53                   	push   ebx
c001ba43:	83 ec 1c             	sub    esp,0x1c
c001ba46:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba4f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001ba52:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001ba55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba58:	e8 ee e3 ff ff       	call   c0019e4b <Krnl::getProcessTotalEnvCount(Process*)>
c001ba5d:	83 c4 10             	add    esp,0x10
c001ba60:	39 c7                	cmp    edi,eax
c001ba62:	7c 14                	jl     c001ba78 <sysCallGetEnv(regs*)+0x38>
c001ba64:	85 f6                	test   esi,esi
c001ba66:	75 0b                	jne    c001ba73 <sysCallGetEnv(regs*)+0x33>
c001ba68:	83 c4 10             	add    esp,0x10
c001ba6b:	31 c0                	xor    eax,eax
c001ba6d:	5b                   	pop    ebx
c001ba6e:	31 d2                	xor    edx,edx
c001ba70:	5e                   	pop    esi
c001ba71:	5f                   	pop    edi
c001ba72:	c3                   	ret    
c001ba73:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba76:	eb f0                	jmp    c001ba68 <sysCallGetEnv(regs*)+0x28>
c001ba78:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba7c:	52                   	push   edx
c001ba7d:	57                   	push   edi
c001ba7e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ba84:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001ba87:	50                   	push   eax
c001ba88:	e8 de e3 ff ff       	call   c0019e6b <Krnl::getProcessEnvPair(Process*, int)>
c001ba8d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba94:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba98:	83 c4 0c             	add    esp,0xc
c001ba9b:	85 c9                	test   ecx,ecx
c001ba9d:	75 23                	jne    c001bac2 <sysCallGetEnv(regs*)+0x82>
c001ba9f:	83 ec 0c             	sub    esp,0xc
c001baa2:	50                   	push   eax
c001baa3:	e8 c4 4c fe ff       	call   c000076c <strlen>
c001baa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001baab:	89 c3                	mov    ebx,eax
c001baad:	e8 ba 4c fe ff       	call   c000076c <strlen>
c001bab2:	83 c4 10             	add    esp,0x10
c001bab5:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bab9:	83 c4 10             	add    esp,0x10
c001babc:	31 d2                	xor    edx,edx
c001babe:	5b                   	pop    ebx
c001babf:	5e                   	pop    esi
c001bac0:	5f                   	pop    edi
c001bac1:	c3                   	ret    
c001bac2:	83 ec 08             	sub    esp,0x8
c001bac5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bac8:	50                   	push   eax
c001bac9:	56                   	push   esi
c001baca:	e8 3d 4d fe ff       	call   c000080c <strcpy>
c001bacf:	58                   	pop    eax
c001bad0:	5a                   	pop    edx
c001bad1:	68 93 ba 02 c0       	push   0xc002ba93
c001bad6:	56                   	push   esi
c001bad7:	e8 70 4e fe ff       	call   c000094c <strcat>
c001badc:	59                   	pop    ecx
c001badd:	5b                   	pop    ebx
c001bade:	57                   	push   edi
c001badf:	56                   	push   esi
c001bae0:	e8 67 4e fe ff       	call   c000094c <strcat>
c001bae5:	83 c4 10             	add    esp,0x10
c001bae8:	e9 7b ff ff ff       	jmp    c001ba68 <sysCallGetEnv(regs*)+0x28>

c001baed <sysAppSettings(regs*)>:
c001baed:	57                   	push   edi
c001baee:	56                   	push   esi
c001baef:	56                   	push   esi
c001baf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001baf7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001bafd:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bb02:	66 3d c0 09          	cmp    ax,0x9c0
c001bb06:	75 2e                	jne    c001bb36 <sysAppSettings(regs*)+0x49>
c001bb08:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001bb0e:	83 e0 1f             	and    eax,0x1f
c001bb11:	3c 01                	cmp    al,0x1
c001bb13:	74 2c                	je     c001bb41 <sysAppSettings(regs*)+0x54>
c001bb15:	3c 07                	cmp    al,0x7
c001bb17:	0f 84 b3 00 00 00    	je     c001bbd0 <sysAppSettings(regs*)+0xe3>
c001bb1d:	84 c0                	test   al,al
c001bb1f:	0f 84 d2 00 00 00    	je     c001bbf7 <sysAppSettings(regs*)+0x10a>
c001bb25:	3c 08                	cmp    al,0x8
c001bb27:	74 63                	je     c001bb8c <sysAppSettings(regs*)+0x9f>
c001bb29:	59                   	pop    ecx
c001bb2a:	0f b6 c0             	movzx  eax,al
c001bb2d:	5e                   	pop    esi
c001bb2e:	05 e8 03 00 00       	add    eax,0x3e8
c001bb33:	5f                   	pop    edi
c001bb34:	99                   	cdq    
c001bb35:	c3                   	ret    
c001bb36:	b8 01 00 00 00       	mov    eax,0x1
c001bb3b:	59                   	pop    ecx
c001bb3c:	31 d2                	xor    edx,edx
c001bb3e:	5e                   	pop    esi
c001bb3f:	5f                   	pop    edi
c001bb40:	c3                   	ret    
c001bb41:	50                   	push   eax
c001bb42:	68 00 01 00 00       	push   0x100
c001bb47:	6a 00                	push   0x0
c001bb49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb51:	83 c0 0c             	add    eax,0xc
c001bb54:	50                   	push   eax
c001bb55:	e8 f6 4b fe ff       	call   c0000750 <memset>
c001bb5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb5f:	b9 ff 00 00 00       	mov    ecx,0xff
c001bb64:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001bb67:	83 c7 0c             	add    edi,0xc
c001bb6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb71:	5a                   	pop    edx
c001bb72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb75:	59                   	pop    ecx
c001bb76:	8d 50 0c             	lea    edx,[eax+0xc]
c001bb79:	52                   	push   edx
c001bb7a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb80:	e8 6d 46 ff ff       	call   c00101f2 <VgaText::setTitle(char*)>
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	31 c0                	xor    eax,eax
c001bb8a:	eb af                	jmp    c001bb3b <sysAppSettings(regs*)+0x4e>
c001bb8c:	83 ec 08             	sub    esp,0x8
c001bb8f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bb95:	83 e0 0f             	and    eax,0xf
c001bb98:	50                   	push   eax
c001bb99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bba1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bba7:	e8 36 46 ff ff       	call   c00101e2 <VgaText::setTitleColour(VgaColour)>
c001bbac:	5f                   	pop    edi
c001bbad:	58                   	pop    eax
c001bbae:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bbb4:	c1 e8 04             	shr    eax,0x4
c001bbb7:	83 e0 0f             	and    eax,0xf
c001bbba:	50                   	push   eax
c001bbbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbc0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bbc9:	e8 04 46 ff ff       	call   c00101d2 <VgaText::setTitleTextColour(VgaColour)>
c001bbce:	eb b5                	jmp    c001bb85 <sysAppSettings(regs*)+0x98>
c001bbd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbd8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bbde:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bbe4:	c0 e8 06             	shr    al,0x6
c001bbe7:	83 e0 01             	and    eax,0x1
c001bbea:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bbf0:	31 c0                	xor    eax,eax
c001bbf2:	e9 44 ff ff ff       	jmp    c001bb3b <sysAppSettings(regs*)+0x4e>
c001bbf7:	b8 02 00 00 00       	mov    eax,0x2
c001bbfc:	e9 3a ff ff ff       	jmp    c001bb3b <sysAppSettings(regs*)+0x4e>

c001bc01 <sysSetFatAttrib(regs*)>:
c001bc01:	57                   	push   edi
c001bc02:	56                   	push   esi
c001bc03:	53                   	push   ebx
c001bc04:	83 ec 1c             	sub    esp,0x1c
c001bc07:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bc0b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bc0e:	68 14 01 00 00       	push   0x114
c001bc13:	e8 81 39 ff ff       	call   c000f599 <malloc>
c001bc18:	83 c4 0c             	add    esp,0xc
c001bc1b:	89 c3                	mov    ebx,eax
c001bc1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc22:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc25:	57                   	push   edi
c001bc26:	53                   	push   ebx
c001bc27:	e8 c6 70 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001bc2c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bc2f:	83 c4 0c             	add    esp,0xc
c001bc32:	0f b6 d4             	movzx  edx,ah
c001bc35:	0f b6 c0             	movzx  eax,al
c001bc38:	52                   	push   edx
c001bc39:	50                   	push   eax
c001bc3a:	53                   	push   ebx
c001bc3b:	e8 28 73 ff ff       	call   c0012f68 <File::chfatattr(unsigned char, unsigned char)>
c001bc40:	83 c4 10             	add    esp,0x10
c001bc43:	85 db                	test   ebx,ebx
c001bc45:	74 14                	je     c001bc5b <sysSetFatAttrib(regs*)+0x5a>
c001bc47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc4d:	83 ec 0c             	sub    esp,0xc
c001bc50:	53                   	push   ebx
c001bc51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc54:	83 c4 10             	add    esp,0x10
c001bc57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	0f 95 c0             	setne  al
c001bc60:	31 d2                	xor    edx,edx
c001bc62:	0f b6 c0             	movzx  eax,al
c001bc65:	f7 d8                	neg    eax
c001bc67:	83 d2 00             	adc    edx,0x0
c001bc6a:	83 c4 10             	add    esp,0x10
c001bc6d:	f7 da                	neg    edx
c001bc6f:	5b                   	pop    ebx
c001bc70:	5e                   	pop    esi
c001bc71:	5f                   	pop    edi
c001bc72:	c3                   	ret    

c001bc73 <sysPipe(regs*)>:
c001bc73:	57                   	push   edi
c001bc74:	56                   	push   esi
c001bc75:	53                   	push   ebx
c001bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7a:	83 ec 0c             	sub    esp,0xc
c001bc7d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc80:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc83:	6a 20                	push   0x20
c001bc85:	e8 0f 39 ff ff       	call   c000f599 <malloc>
c001bc8a:	89 c3                	mov    ebx,eax
c001bc8c:	58                   	pop    eax
c001bc8d:	5a                   	pop    edx
c001bc8e:	68 00 50 00 00       	push   0x5000
c001bc93:	53                   	push   ebx
c001bc94:	e8 d1 42 ff ff       	call   c000ff6a <Pipe::Pipe(int)>
c001bc99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc9c:	e8 33 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bca1:	89 07                	mov    DWORD PTR [edi],eax
c001bca3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bca6:	e8 29 51 ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bcab:	83 c4 10             	add    esp,0x10
c001bcae:	89 06                	mov    DWORD PTR [esi],eax
c001bcb0:	31 d2                	xor    edx,edx
c001bcb2:	5b                   	pop    ebx
c001bcb3:	31 c0                	xor    eax,eax
c001bcb5:	5e                   	pop    esi
c001bcb6:	5f                   	pop    edi
c001bcb7:	c3                   	ret    

c001bcb8 <sysGetUnixTime(regs*)>:
c001bcb8:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001bcbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bcc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bcc7:	e9 18 7a ff ff       	jmp    c00136e4 <Clock::timeInSecondsLocal()>

c001bccc <string_ends_with(char const*, char const*)>:
c001bccc:	57                   	push   edi
c001bccd:	56                   	push   esi
c001bcce:	53                   	push   ebx
c001bccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcd3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bcd7:	83 ec 0c             	sub    esp,0xc
c001bcda:	53                   	push   ebx
c001bcdb:	e8 8c 4a fe ff       	call   c000076c <strlen>
c001bce0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bce3:	89 c6                	mov    esi,eax
c001bce5:	e8 82 4a fe ff       	call   c000076c <strlen>
c001bcea:	83 c4 10             	add    esp,0x10
c001bced:	39 c6                	cmp    esi,eax
c001bcef:	7d 06                	jge    c001bcf7 <string_ends_with(char const*, char const*)+0x2b>
c001bcf1:	5b                   	pop    ebx
c001bcf2:	31 c0                	xor    eax,eax
c001bcf4:	5e                   	pop    esi
c001bcf5:	5f                   	pop    edi
c001bcf6:	c3                   	ret    
c001bcf7:	83 ec 08             	sub    esp,0x8
c001bcfa:	29 c6                	sub    esi,eax
c001bcfc:	57                   	push   edi
c001bcfd:	01 f3                	add    ebx,esi
c001bcff:	53                   	push   ebx
c001bd00:	e8 93 4b fe ff       	call   c0000898 <strcmp>
c001bd05:	83 c4 10             	add    esp,0x10
c001bd08:	85 c0                	test   eax,eax
c001bd0a:	5b                   	pop    ebx
c001bd0b:	0f 94 c0             	sete   al
c001bd0e:	5e                   	pop    esi
c001bd0f:	0f b6 c0             	movzx  eax,al
c001bd12:	5f                   	pop    edi
c001bd13:	c3                   	ret    

c001bd14 <sysCallOpen(regs*)>:
c001bd14:	56                   	push   esi
c001bd15:	53                   	push   ebx
c001bd16:	81 ec 04 01 00 00    	sub    esp,0x104
c001bd1c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bd23:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bd26:	85 c9                	test   ecx,ecx
c001bd28:	0f 84 ad 01 00 00    	je     c001bedb <sysCallOpen(regs*)+0x1c7>
c001bd2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bd31:	85 c0                	test   eax,eax
c001bd33:	0f 84 a2 01 00 00    	je     c001bedb <sysCallOpen(regs*)+0x1c7>
c001bd39:	52                   	push   edx
c001bd3a:	68 95 ba 02 c0       	push   0xc002ba95
c001bd3f:	50                   	push   eax
c001bd40:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bd44:	56                   	push   esi
c001bd45:	e8 fe 6d ff ff       	call   c0012b48 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bd4a:	89 34 24             	mov    DWORD PTR [esp],esi
c001bd4d:	e8 1a 4a fe ff       	call   c000076c <strlen>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	48                   	dec    eax
c001bd56:	74 1d                	je     c001bd75 <sysCallOpen(regs*)+0x61>
c001bd58:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bd5b:	eb 0f                	jmp    c001bd6c <sysCallOpen(regs*)+0x58>
c001bd5d:	80 fa 3a             	cmp    dl,0x3a
c001bd60:	74 0f                	je     c001bd71 <sysCallOpen(regs*)+0x5d>
c001bd62:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bd66:	48                   	dec    eax
c001bd67:	74 0c                	je     c001bd75 <sysCallOpen(regs*)+0x61>
c001bd69:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bd6c:	80 fa 2e             	cmp    dl,0x2e
c001bd6f:	75 ec                	jne    c001bd5d <sysCallOpen(regs*)+0x49>
c001bd71:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bd75:	83 ec 08             	sub    esp,0x8
c001bd78:	68 99 ba 02 c0       	push   0xc002ba99
c001bd7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd80:	e8 47 ff ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	85 c0                	test   eax,eax
c001bd8a:	74 1d                	je     c001bda9 <sysCallOpen(regs*)+0x95>
c001bd8c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd8f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd9c:	81 c4 04 01 00 00    	add    esp,0x104
c001bda2:	31 c0                	xor    eax,eax
c001bda4:	31 d2                	xor    edx,edx
c001bda6:	5b                   	pop    ebx
c001bda7:	5e                   	pop    esi
c001bda8:	c3                   	ret    
c001bda9:	83 ec 08             	sub    esp,0x8
c001bdac:	68 9e ba 02 c0       	push   0xc002ba9e
c001bdb1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdb4:	e8 13 ff ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001bdb9:	83 c4 10             	add    esp,0x10
c001bdbc:	85 c0                	test   eax,eax
c001bdbe:	75 cc                	jne    c001bd8c <sysCallOpen(regs*)+0x78>
c001bdc0:	83 ec 08             	sub    esp,0x8
c001bdc3:	68 9a ba 02 c0       	push   0xc002ba9a
c001bdc8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdcb:	e8 c8 4a fe ff       	call   c0000898 <strcmp>
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	85 c0                	test   eax,eax
c001bdd5:	74 b5                	je     c001bd8c <sysCallOpen(regs*)+0x78>
c001bdd7:	83 ec 08             	sub    esp,0x8
c001bdda:	68 99 ba 02 c0       	push   0xc002ba99
c001bddf:	56                   	push   esi
c001bde0:	e8 e7 fe ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001bde5:	83 c4 10             	add    esp,0x10
c001bde8:	85 c0                	test   eax,eax
c001bdea:	75 a0                	jne    c001bd8c <sysCallOpen(regs*)+0x78>
c001bdec:	83 ec 08             	sub    esp,0x8
c001bdef:	68 a3 ba 02 c0       	push   0xc002baa3
c001bdf4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdf7:	e8 d0 fe ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001bdfc:	83 c4 10             	add    esp,0x10
c001bdff:	85 c0                	test   eax,eax
c001be01:	0f 85 e7 00 00 00    	jne    c001beee <sysCallOpen(regs*)+0x1da>
c001be07:	83 ec 08             	sub    esp,0x8
c001be0a:	68 a8 ba 02 c0       	push   0xc002baa8
c001be0f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be12:	e8 b5 fe ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001be17:	83 c4 10             	add    esp,0x10
c001be1a:	85 c0                	test   eax,eax
c001be1c:	0f 85 cc 00 00 00    	jne    c001beee <sysCallOpen(regs*)+0x1da>
c001be22:	83 ec 08             	sub    esp,0x8
c001be25:	68 a4 ba 02 c0       	push   0xc002baa4
c001be2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be2d:	e8 66 4a fe ff       	call   c0000898 <strcmp>
c001be32:	83 c4 10             	add    esp,0x10
c001be35:	85 c0                	test   eax,eax
c001be37:	0f 84 b1 00 00 00    	je     c001beee <sysCallOpen(regs*)+0x1da>
c001be3d:	83 ec 08             	sub    esp,0x8
c001be40:	68 a3 ba 02 c0       	push   0xc002baa3
c001be45:	56                   	push   esi
c001be46:	e8 81 fe ff ff       	call   c001bccc <string_ends_with(char const*, char const*)>
c001be4b:	83 c4 10             	add    esp,0x10
c001be4e:	85 c0                	test   eax,eax
c001be50:	0f 85 98 00 00 00    	jne    c001beee <sysCallOpen(regs*)+0x1da>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	68 14 01 00 00       	push   0x114
c001be5e:	e8 36 37 ff ff       	call   c000f599 <malloc>
c001be63:	83 c4 0c             	add    esp,0xc
c001be66:	89 c6                	mov    esi,eax
c001be68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be70:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be73:	56                   	push   esi
c001be74:	e8 79 6e ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001be79:	83 c4 10             	add    esp,0x10
c001be7c:	85 f6                	test   esi,esi
c001be7e:	74 5b                	je     c001bedb <sysCallOpen(regs*)+0x1c7>
c001be80:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be83:	0f b6 c2             	movzx  eax,dl
c001be86:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be89:	89 d0                	mov    eax,edx
c001be8b:	83 e0 01             	and    eax,0x1
c001be8e:	f6 c2 02             	test   dl,0x2
c001be91:	74 03                	je     c001be96 <sysCallOpen(regs*)+0x182>
c001be93:	83 c8 02             	or     eax,0x2
c001be96:	f6 c2 04             	test   dl,0x4
c001be99:	74 03                	je     c001be9e <sysCallOpen(regs*)+0x18a>
c001be9b:	83 c8 04             	or     eax,0x4
c001be9e:	f6 c2 08             	test   dl,0x8
c001bea1:	74 03                	je     c001bea6 <sysCallOpen(regs*)+0x192>
c001bea3:	83 c8 0a             	or     eax,0xa
c001bea6:	83 e2 10             	and    edx,0x10
c001bea9:	74 03                	je     c001beae <sysCallOpen(regs*)+0x19a>
c001beab:	83 c8 12             	or     eax,0x12
c001beae:	83 ec 08             	sub    esp,0x8
c001beb1:	50                   	push   eax
c001beb2:	56                   	push   esi
c001beb3:	e8 9e 6e ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001beb8:	83 c4 10             	add    esp,0x10
c001bebb:	85 c0                	test   eax,eax
c001bebd:	75 1c                	jne    c001bedb <sysCallOpen(regs*)+0x1c7>
c001bebf:	83 ec 0c             	sub    esp,0xc
c001bec2:	56                   	push   esi
c001bec3:	e8 0c 4f ff ff       	call   c0010dd4 <UnixFile::getFileDescriptor()>
c001bec8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	89 02                	mov    DWORD PTR [edx],eax
c001bed0:	c1 f8 1f             	sar    eax,0x1f
c001bed3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bed6:	e9 c1 fe ff ff       	jmp    c001bd9c <sysCallOpen(regs*)+0x88>
c001bedb:	81 c4 04 01 00 00    	add    esp,0x104
c001bee1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bee6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001beeb:	5b                   	pop    ebx
c001beec:	5e                   	pop    esi
c001beed:	c3                   	ret    
c001beee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bef1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bef7:	e9 99 fe ff ff       	jmp    c001bd95 <sysCallOpen(regs*)+0x81>

c001befc <Sys::loadSyscalls()>:
c001befc:	c7 05 60 06 03 c0 69 b1 01 c0 	mov    DWORD PTR ds:0xc0030660,0xc001b169
c001bf06:	c7 05 64 06 03 c0 5e ad 01 c0 	mov    DWORD PTR ds:0xc0030664,0xc001ad5e
c001bf10:	c7 05 68 06 03 c0 4f af 01 c0 	mov    DWORD PTR ds:0xc0030668,0xc001af4f
c001bf1a:	c7 05 6c 06 03 c0 9f b0 01 c0 	mov    DWORD PTR ds:0xc003066c,0xc001b09f
c001bf24:	c7 05 70 06 03 c0 e7 ae 01 c0 	mov    DWORD PTR ds:0xc0030670,0xc001aee7
c001bf2e:	c7 05 74 06 03 c0 95 ad 01 c0 	mov    DWORD PTR ds:0xc0030674,0xc001ad95
c001bf38:	c7 05 78 06 03 c0 76 ad 01 c0 	mov    DWORD PTR ds:0xc0030678,0xc001ad76
c001bf42:	c7 05 7c 06 03 c0 a4 af 01 c0 	mov    DWORD PTR ds:0xc003067c,0xc001afa4
c001bf4c:	c7 05 84 06 03 c0 32 b6 01 c0 	mov    DWORD PTR ds:0xc0030684,0xc001b632
c001bf56:	c7 05 80 06 03 c0 14 bd 01 c0 	mov    DWORD PTR ds:0xc0030680,0xc001bd14
c001bf60:	c7 05 88 06 03 c0 92 b6 01 c0 	mov    DWORD PTR ds:0xc0030688,0xc001b692
c001bf6a:	c7 05 8c 06 03 c0 75 b3 01 c0 	mov    DWORD PTR ds:0xc003068c,0xc001b375
c001bf74:	c7 05 90 06 03 c0 af b1 01 c0 	mov    DWORD PTR ds:0xc0030690,0xc001b1af
c001bf7e:	c7 05 94 06 03 c0 b4 b1 01 c0 	mov    DWORD PTR ds:0xc0030694,0xc001b1b4
c001bf88:	c7 05 98 06 03 c0 5b b7 01 c0 	mov    DWORD PTR ds:0xc0030698,0xc001b75b
c001bf92:	c7 05 9c 06 03 c0 07 b7 01 c0 	mov    DWORD PTR ds:0xc003069c,0xc001b707
c001bf9c:	c7 05 a0 06 03 c0 4e b4 01 c0 	mov    DWORD PTR ds:0xc00306a0,0xc001b44e
c001bfa6:	c7 05 a4 06 03 c0 a5 b4 01 c0 	mov    DWORD PTR ds:0xc00306a4,0xc001b4a5
c001bfb0:	c7 05 a8 06 03 c0 11 b5 01 c0 	mov    DWORD PTR ds:0xc00306a8,0xc001b511
c001bfba:	c7 05 ac 06 03 c0 b9 b1 01 c0 	mov    DWORD PTR ds:0xc00306ac,0xc001b1b9
c001bfc4:	c7 05 b0 06 03 c0 cb b7 01 c0 	mov    DWORD PTR ds:0xc00306b0,0xc001b7cb
c001bfce:	c7 05 b4 06 03 c0 e5 b7 01 c0 	mov    DWORD PTR ds:0xc00306b4,0xc001b7e5
c001bfd8:	c7 05 b8 06 03 c0 e5 b7 01 c0 	mov    DWORD PTR ds:0xc00306b8,0xc001b7e5
c001bfe2:	c7 05 bc 06 03 c0 1a b8 01 c0 	mov    DWORD PTR ds:0xc00306bc,0xc001b81a
c001bfec:	c7 05 c0 06 03 c0 7e b8 01 c0 	mov    DWORD PTR ds:0xc00306c0,0xc001b87e
c001bff6:	c7 05 c4 06 03 c0 c3 b1 01 c0 	mov    DWORD PTR ds:0xc00306c4,0xc001b1c3
c001c000:	c7 05 c8 06 03 c0 e2 b8 01 c0 	mov    DWORD PTR ds:0xc00306c8,0xc001b8e2
c001c00a:	c7 05 cc 06 03 c0 32 b3 01 c0 	mov    DWORD PTR ds:0xc00306cc,0xc001b332
c001c014:	c7 05 d0 06 03 c0 2e b9 01 c0 	mov    DWORD PTR ds:0xc00306d0,0xc001b92e
c001c01e:	c7 05 d4 06 03 c0 f4 b3 01 c0 	mov    DWORD PTR ds:0xc00306d4,0xc001b3f4
c001c028:	c7 05 d8 06 03 c0 b1 b9 01 c0 	mov    DWORD PTR ds:0xc00306d8,0xc001b9b1
c001c032:	c7 05 dc 06 03 c0 83 b5 01 c0 	mov    DWORD PTR ds:0xc00306dc,0xc001b583
c001c03c:	c7 05 e0 06 03 c0 d8 b9 01 c0 	mov    DWORD PTR ds:0xc00306e0,0xc001b9d8
c001c046:	c7 05 e4 06 03 c0 40 ba 01 c0 	mov    DWORD PTR ds:0xc00306e4,0xc001ba40
c001c050:	c7 05 e8 06 03 c0 ed ba 01 c0 	mov    DWORD PTR ds:0xc00306e8,0xc001baed
c001c05a:	c7 05 ec 06 03 c0 d3 b1 01 c0 	mov    DWORD PTR ds:0xc00306ec,0xc001b1d3
c001c064:	c7 05 f0 06 03 c0 3d b2 01 c0 	mov    DWORD PTR ds:0xc00306f0,0xc001b23d
c001c06e:	c7 05 f4 06 03 c0 83 b2 01 c0 	mov    DWORD PTR ds:0xc00306f4,0xc001b283
c001c078:	c7 05 f8 06 03 c0 01 bc 01 c0 	mov    DWORD PTR ds:0xc00306f8,0xc001bc01
c001c082:	c7 05 fc 06 03 c0 00 b8 01 c0 	mov    DWORD PTR ds:0xc00306fc,0xc001b800
c001c08c:	c7 05 00 07 03 c0 d4 b2 01 c0 	mov    DWORD PTR ds:0xc0030700,0xc001b2d4
c001c096:	c7 05 04 07 03 c0 73 bc 01 c0 	mov    DWORD PTR ds:0xc0030704,0xc001bc73
c001c0a0:	c7 05 08 07 03 c0 b8 bc 01 c0 	mov    DWORD PTR ds:0xc0030708,0xc001bcb8
c001c0aa:	c7 05 0c 07 03 c0 3f ae 01 c0 	mov    DWORD PTR ds:0xc003070c,0xc001ae3f
c001c0b4:	c7 05 10 07 03 c0 c0 af 01 c0 	mov    DWORD PTR ds:0xc0030710,0xc001afc0
c001c0be:	c7 05 14 07 03 c0 55 b0 01 c0 	mov    DWORD PTR ds:0xc0030714,0xc001b055
c001c0c8:	c7 05 18 07 03 c0 28 ad 01 c0 	mov    DWORD PTR ds:0xc0030718,0xc001ad28
c001c0d2:	c7 05 1c 07 03 c0 07 b1 01 c0 	mov    DWORD PTR ds:0xc003071c,0xc001b107
c001c0dc:	c7 05 20 07 03 c0 a1 ad 01 c0 	mov    DWORD PTR ds:0xc0030720,0xc001ada1
c001c0e6:	c7 05 24 07 03 c0 bb ad 01 c0 	mov    DWORD PTR ds:0xc0030724,0xc001adbb
c001c0f0:	c3                   	ret    

c001c0f1 <Sys::systemCall(regs*, void*)>:
c001c0f1:	53                   	push   ebx
c001c0f2:	83 ec 08             	sub    esp,0x8
c001c0f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0f9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c0fc:	83 f8 7f             	cmp    eax,0x7f
c001c0ff:	77 16                	ja     c001c117 <Sys::systemCall(regs*, void*)+0x26>
c001c101:	8b 14 85 60 06 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf9a0]
c001c108:	85 d2                	test   edx,edx
c001c10a:	74 0b                	je     c001c117 <Sys::systemCall(regs*, void*)+0x26>
c001c10c:	83 ec 0c             	sub    esp,0xc
c001c10f:	53                   	push   ebx
c001c110:	ff d2                	call   edx
c001c112:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c115:	eb 0d                	jmp    c001c124 <Sys::systemCall(regs*, void*)+0x33>
c001c117:	52                   	push   edx
c001c118:	52                   	push   edx
c001c119:	50                   	push   eax
c001c11a:	68 ad ba 02 c0       	push   0xc002baad
c001c11f:	e8 6f 66 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c124:	83 c4 10             	add    esp,0x10
c001c127:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c12c:	31 d2                	xor    edx,edx
c001c12e:	83 c4 08             	add    esp,0x8
c001c131:	5b                   	pop    ebx
c001c132:	c3                   	ret    

c001c133 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c133:	55                   	push   ebp
c001c134:	57                   	push   edi
c001c135:	56                   	push   esi
c001c136:	53                   	push   ebx
c001c137:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c13d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c144:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c14b:	85 c0                	test   eax,eax
c001c14d:	0f 95 c1             	setne  cl
c001c150:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c158:	0f 94 c2             	sete   dl
c001c15b:	84 d1                	test   cl,dl
c001c15d:	74 23                	je     c001c182 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c15f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c165:	74 1b                	je     c001c182 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c167:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c16d:	89 da                	mov    edx,ebx
c001c16f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c175:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c17b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c182:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c189:	05 ff 0f 00 00       	add    eax,0xfff
c001c18e:	83 ec 0c             	sub    esp,0xc
c001c191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c195:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c19b:	c1 e8 0c             	shr    eax,0xc
c001c19e:	89 fe                	mov    esi,edi
c001c1a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c1a4:	c1 ee 0c             	shr    esi,0xc
c001c1a7:	6a 01                	push   0x1
c001c1a9:	e8 71 50 ff ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c001c1ae:	89 c5                	mov    ebp,eax
c001c1b0:	58                   	pop    eax
c001c1b1:	5a                   	pop    edx
c001c1b2:	56                   	push   esi
c001c1b3:	68 c1 ba 02 c0       	push   0xc002bac1
c001c1b8:	e8 d6 65 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c1bd:	59                   	pop    ecx
c001c1be:	58                   	pop    eax
c001c1bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c1c3:	68 d3 ba 02 c0       	push   0xc002bad3
c001c1c8:	e8 c6 65 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c1cd:	83 c4 10             	add    esp,0x10
c001c1d0:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c1d6:	0f 86 31 01 00 00    	jbe    c001c30d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c1dc:	c1 e6 0c             	shl    esi,0xc
c001c1df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1e2:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c1e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1e9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c1f0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c1f3:	01 df                	add    edi,ebx
c001c1f5:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c1f8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c1fc:	0f 84 08 01 00 00    	je     c001c30a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c202:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c208:	76 05                	jbe    c001c20f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c20a:	bf 00 10 00 00       	mov    edi,0x1000
c001c20f:	83 ec 0c             	sub    esp,0xc
c001c212:	31 d2                	xor    edx,edx
c001c214:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c21b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c21d:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c221:	50                   	push   eax
c001c222:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c226:	56                   	push   esi
c001c227:	52                   	push   edx
c001c228:	57                   	push   edi
c001c229:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c230:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c233:	83 c4 20             	add    esp,0x20
c001c236:	85 c0                	test   eax,eax
c001c238:	74 0a                	je     c001c244 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c23a:	53                   	push   ebx
c001c23b:	53                   	push   ebx
c001c23c:	50                   	push   eax
c001c23d:	68 e5 ba 02 c0       	push   0xc002bae5
c001c242:	eb 0f                	jmp    c001c253 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c244:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c248:	74 20                	je     c001c26a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c24a:	51                   	push   ecx
c001c24b:	51                   	push   ecx
c001c24c:	6a 00                	push   0x0
c001c24e:	68 10 bb 02 c0       	push   0xc002bb10
c001c253:	e8 3b 65 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c258:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c25b:	e8 9b 54 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c260:	83 c4 10             	add    esp,0x10
c001c263:	31 c0                	xor    eax,eax
c001c265:	e9 68 01 00 00       	jmp    c001c3d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c26a:	fa                   	cli    
c001c26b:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001c271:	e8 1f 37 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c276:	6a 07                	push   0x7
c001c278:	89 c7                	mov    edi,eax
c001c27a:	55                   	push   ebp
c001c27b:	50                   	push   eax
c001c27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c281:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c284:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c28a:	e8 e3 57 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c28f:	83 c4 0c             	add    esp,0xc
c001c292:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c299:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29f:	6a 00                	push   0x0
c001c2a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2af:	e8 18 56 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c2b4:	58                   	pop    eax
c001c2b5:	5a                   	pop    edx
c001c2b6:	68 07 0c 00 00       	push   0xc07
c001c2bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c2bf:	57                   	push   edi
c001c2c0:	89 ef                	mov    edi,ebp
c001c2c2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2cf:	6a 00                	push   0x0
c001c2d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2df:	e8 4a 5b ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2e4:	b9 00 10 00 00       	mov    ecx,0x1000
c001c2e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c2eb:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001c2f0:	83 c4 20             	add    esp,0x20
c001c2f3:	48                   	dec    eax
c001c2f4:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001c2f9:	85 c0                	test   eax,eax
c001c2fb:	75 01                	jne    c001c2fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c2fd:	fb                   	sti    
c001c2fe:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c305:	e9 df fe ff ff       	jmp    c001c1e9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c30a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c30d:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c315:	0f 86 a9 00 00 00    	jbe    c001c3c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c31b:	fa                   	cli    
c001c31c:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001c322:	51                   	push   ecx
c001c323:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c32a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c330:	6a 00                	push   0x0
c001c332:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c337:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c33a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c340:	e8 87 55 ff ff       	call   c00118cc <VAS::mapOtherVASIn(bool, VAS*)>
c001c345:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c349:	c1 e6 0c             	shl    esi,0xc
c001c34c:	01 de                	add    esi,ebx
c001c34e:	83 c4 10             	add    esp,0x10
c001c351:	39 de                	cmp    esi,ebx
c001c353:	74 61                	je     c001c3b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c355:	e8 3b 36 ff ff       	call   c000f995 <Phys::allocatePage()>
c001c35a:	6a 07                	push   0x7
c001c35c:	89 c7                	mov    edi,eax
c001c35e:	55                   	push   ebp
c001c35f:	50                   	push   eax
c001c360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c365:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c368:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c36e:	e8 ff 56 ff ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c373:	58                   	pop    eax
c001c374:	5a                   	pop    edx
c001c375:	68 07 0c 00 00       	push   0xc07
c001c37a:	53                   	push   ebx
c001c37b:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c381:	57                   	push   edi
c001c382:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c389:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c38f:	6a 00                	push   0x0
c001c391:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c396:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c399:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c39f:	e8 8a 5a ff ff       	call   c0011e2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c3a4:	83 c4 1c             	add    esp,0x1c
c001c3a7:	68 00 10 00 00       	push   0x1000
c001c3ac:	6a 00                	push   0x0
c001c3ae:	55                   	push   ebp
c001c3af:	e8 9c 43 fe ff       	call   c0000750 <memset>
c001c3b4:	eb 98                	jmp    c001c34e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c3b6:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001c3bb:	48                   	dec    eax
c001c3bc:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001c3c1:	75 01                	jne    c001c3c4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c3c3:	fb                   	sti    
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	55                   	push   ebp
c001c3c8:	e8 2e 53 ff ff       	call   c00116fb <Virt::freeKernelVirtualPages(unsigned long)>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	b0 01                	mov    al,0x1
c001c3d2:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c3d8:	5b                   	pop    ebx
c001c3d9:	5e                   	pop    esi
c001c3da:	5f                   	pop    edi
c001c3db:	5d                   	pop    ebp
c001c3dc:	c3                   	ret    

c001c3dd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c3dd:	55                   	push   ebp
c001c3de:	57                   	push   edi
c001c3df:	56                   	push   esi
c001c3e0:	53                   	push   ebx
c001c3e1:	83 ec 48             	sub    esp,0x48
c001c3e4:	68 14 01 00 00       	push   0x114
c001c3e9:	e8 ab 31 ff ff       	call   c000f599 <malloc>
c001c3ee:	83 c4 0c             	add    esp,0xc
c001c3f1:	89 c6                	mov    esi,eax
c001c3f3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c3f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c3fb:	50                   	push   eax
c001c3fc:	e8 f1 68 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001c401:	58                   	pop    eax
c001c402:	5a                   	pop    edx
c001c403:	6a 01                	push   0x1
c001c405:	56                   	push   esi
c001c406:	e8 4b 69 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	85 c0                	test   eax,eax
c001c410:	0f 85 47 01 00 00    	jne    c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c416:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	6a 34                	push   0x34
c001c423:	e8 71 31 ff ff       	call   c000f599 <malloc>
c001c428:	89 c3                	mov    ebx,eax
c001c42a:	58                   	pop    eax
c001c42b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c42d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c431:	57                   	push   edi
c001c432:	53                   	push   ebx
c001c433:	6a 00                	push   0x0
c001c435:	6a 34                	push   0x34
c001c437:	56                   	push   esi
c001c438:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c43b:	83 c4 20             	add    esp,0x20
c001c43e:	85 c0                	test   eax,eax
c001c440:	0f 85 17 01 00 00    	jne    c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c446:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c44c:	0f 85 0b 01 00 00    	jne    c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c452:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c455:	85 c0                	test   eax,eax
c001c457:	0f 84 00 01 00 00    	je     c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c45d:	31 d2                	xor    edx,edx
c001c45f:	55                   	push   ebp
c001c460:	52                   	push   edx
c001c461:	50                   	push   eax
c001c462:	56                   	push   esi
c001c463:	e8 ac 69 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c468:	83 c4 10             	add    esp,0x10
c001c46b:	85 c0                	test   eax,eax
c001c46d:	0f 85 ea 00 00 00    	jne    c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c473:	83 ec 0c             	sub    esp,0xc
c001c476:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c479:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c47d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c481:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c485:	0f af c2             	imul   eax,edx
c001c488:	50                   	push   eax
c001c489:	e8 0b 31 ff ff       	call   c000f599 <malloc>
c001c48e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c490:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c494:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c49b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c49f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c4a3:	0f af c2             	imul   eax,edx
c001c4a6:	99                   	cdq    
c001c4a7:	52                   	push   edx
c001c4a8:	50                   	push   eax
c001c4a9:	56                   	push   esi
c001c4aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4ad:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c4b0:	83 c4 20             	add    esp,0x20
c001c4b3:	85 c0                	test   eax,eax
c001c4b5:	0f 84 a2 00 00 00    	je     c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4bb:	31 d2                	xor    edx,edx
c001c4bd:	51                   	push   ecx
c001c4be:	52                   	push   edx
c001c4bf:	50                   	push   eax
c001c4c0:	56                   	push   esi
c001c4c1:	e8 4e 69 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	85 c0                	test   eax,eax
c001c4cb:	0f 85 8c 00 00 00    	jne    c001c55d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4d8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4dc:	31 ed                	xor    ebp,ebp
c001c4de:	0f af c2             	imul   eax,edx
c001c4e1:	50                   	push   eax
c001c4e2:	e8 b2 30 ff ff       	call   c000f599 <malloc>
c001c4e7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c4e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4f4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c4f8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c4fc:	0f af c2             	imul   eax,edx
c001c4ff:	99                   	cdq    
c001c500:	52                   	push   edx
c001c501:	50                   	push   eax
c001c502:	56                   	push   esi
c001c503:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c506:	83 c4 20             	add    esp,0x20
c001c509:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c511:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c515:	0f 86 80 00 00 00    	jbe    c001c59b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c51b:	0f b7 fd             	movzx  edi,bp
c001c51e:	c1 e7 05             	shl    edi,0x5
c001c521:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c525:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c528:	75 6b                	jne    c001c595 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c52a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c52d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c531:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c534:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c538:	52                   	push   edx
c001c539:	31 d2                	xor    edx,edx
c001c53b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c53e:	52                   	push   edx
c001c53f:	50                   	push   eax
c001c540:	56                   	push   esi
c001c541:	e8 ce 68 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c546:	83 c4 10             	add    esp,0x10
c001c549:	85 c0                	test   eax,eax
c001c54b:	74 17                	je     c001c564 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c54d:	83 ec 0c             	sub    esp,0xc
c001c550:	68 3c bb 02 c0       	push   0xc002bb3c
c001c555:	e8 39 62 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c55a:	83 c4 10             	add    esp,0x10
c001c55d:	31 c0                	xor    eax,eax
c001c55f:	e9 87 00 00 00       	jmp    c001c5eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c564:	83 ec 0c             	sub    esp,0xc
c001c567:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c56a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c56d:	50                   	push   eax
c001c56e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c572:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c576:	56                   	push   esi
c001c577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c57b:	e8 b3 fb ff ff       	call   c001c133 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c580:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c584:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c588:	83 c4 20             	add    esp,0x20
c001c58b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c58f:	73 04                	jae    c001c595 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c591:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c595:	45                   	inc    ebp
c001c596:	e9 76 ff ff ff       	jmp    c001c511 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c59b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c59f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5a7:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c5ad:	83 ec 0c             	sub    esp,0xc
c001c5b0:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c5b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c5bb:	05 00 10 00 00       	add    eax,0x1000
c001c5c0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c7:	e8 dd 2f ff ff       	call   c000f5a9 <free>
c001c5cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c5cf:	e8 d5 2f ff ff       	call   c000f5a9 <free>
c001c5d4:	58                   	pop    eax
c001c5d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5d9:	e8 cb 2f ff ff       	call   c000f5a9 <free>
c001c5de:	89 34 24             	mov    DWORD PTR [esp],esi
c001c5e1:	e8 ce 67 ff ff       	call   c0012db4 <File::close()>
c001c5e6:	83 c4 10             	add    esp,0x10
c001c5e9:	b0 01                	mov    al,0x1
c001c5eb:	83 c4 3c             	add    esp,0x3c
c001c5ee:	5b                   	pop    ebx
c001c5ef:	5e                   	pop    esi
c001c5f0:	5f                   	pop    edi
c001c5f1:	5d                   	pop    ebp
c001c5f2:	c3                   	ret    

c001c5f3 <Thr::runtimeReferenceHelper()>:
c001c5f3:	83 ec 18             	sub    esp,0x18
c001c5f6:	68 44 bb 02 c0       	push   0xc002bb44
c001c5fb:	e8 93 61 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001c600:	fa                   	cli    
c001c601:	83 c4 10             	add    esp,0x10
c001c604:	eb fe                	jmp    c001c604 <Thr::runtimeReferenceHelper()+0x11>

c001c606 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c606:	57                   	push   edi
c001c607:	56                   	push   esi
c001c608:	53                   	push   ebx
c001c609:	31 db                	xor    ebx,ebx
c001c60b:	39 1d 00 10 03 c0    	cmp    DWORD PTR ds:0xc0031000,ebx
c001c611:	7e 3c                	jle    c001c64f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c613:	8b 34 9d 80 0f 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf080]
c001c61a:	31 ff                	xor    edi,edi
c001c61c:	39 3c 9d 80 0e 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf180],edi
c001c623:	7e 27                	jle    c001c64c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c625:	50                   	push   eax
c001c626:	50                   	push   eax
c001c627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c62b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c62d:	03 04 9d 00 0f 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf100]
c001c634:	50                   	push   eax
c001c635:	e8 5e 42 fe ff       	call   c0000898 <strcmp>
c001c63a:	83 c4 10             	add    esp,0x10
c001c63d:	85 c0                	test   eax,eax
c001c63f:	75 05                	jne    c001c646 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c641:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c644:	eb 0b                	jmp    c001c651 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c646:	83 c6 10             	add    esi,0x10
c001c649:	47                   	inc    edi
c001c64a:	eb d0                	jmp    c001c61c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c64c:	43                   	inc    ebx
c001c64d:	eb bc                	jmp    c001c60b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c64f:	31 c0                	xor    eax,eax
c001c651:	5b                   	pop    ebx
c001c652:	5e                   	pop    esi
c001c653:	5f                   	pop    edi
c001c654:	c3                   	ret    

c001c655 <Thr::loadKernelSymbolTable(char const*)>:
c001c655:	55                   	push   ebp
c001c656:	57                   	push   edi
c001c657:	56                   	push   esi
c001c658:	53                   	push   ebx
c001c659:	83 ec 68             	sub    esp,0x68
c001c65c:	8b 35 50 10 03 c0    	mov    esi,DWORD PTR ds:0xc0031050
c001c662:	68 14 01 00 00       	push   0x114
c001c667:	e8 2d 2f ff ff       	call   c000f599 <malloc>
c001c66c:	83 c4 0c             	add    esp,0xc
c001c66f:	89 c3                	mov    ebx,eax
c001c671:	56                   	push   esi
c001c672:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c676:	50                   	push   eax
c001c677:	e8 76 66 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001c67c:	5e                   	pop    esi
c001c67d:	5f                   	pop    edi
c001c67e:	6a 01                	push   0x1
c001c680:	53                   	push   ebx
c001c681:	e8 d0 66 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001c686:	83 c4 10             	add    esp,0x10
c001c689:	85 c0                	test   eax,eax
c001c68b:	74 0a                	je     c001c697 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c68d:	83 ec 0c             	sub    esp,0xc
c001c690:	68 66 bb 02 c0       	push   0xc002bb66
c001c695:	eb 34                	jmp    c001c6cb <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c697:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c69f:	83 ec 0c             	sub    esp,0xc
c001c6a2:	6a 34                	push   0x34
c001c6a4:	e8 f0 2e ff ff       	call   c000f599 <malloc>
c001c6a9:	59                   	pop    ecx
c001c6aa:	89 c7                	mov    edi,eax
c001c6ac:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c6b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6b2:	56                   	push   esi
c001c6b3:	57                   	push   edi
c001c6b4:	6a 00                	push   0x0
c001c6b6:	6a 34                	push   0x34
c001c6b8:	53                   	push   ebx
c001c6b9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6bc:	83 c4 20             	add    esp,0x20
c001c6bf:	85 c0                	test   eax,eax
c001c6c1:	74 17                	je     c001c6da <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c6c3:	83 ec 0c             	sub    esp,0xc
c001c6c6:	68 7d bb 02 c0       	push   0xc002bb7d
c001c6cb:	e8 2f d8 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001c6d0:	83 c4 10             	add    esp,0x10
c001c6d3:	31 c0                	xor    eax,eax
c001c6d5:	e9 31 02 00 00       	jmp    c001c90b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c6da:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c6e0:	75 e1                	jne    c001c6c3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6e2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c6e5:	85 c0                	test   eax,eax
c001c6e7:	74 da                	je     c001c6c3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6e9:	52                   	push   edx
c001c6ea:	31 d2                	xor    edx,edx
c001c6ec:	52                   	push   edx
c001c6ed:	50                   	push   eax
c001c6ee:	53                   	push   ebx
c001c6ef:	e8 20 67 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c6f4:	83 c4 10             	add    esp,0x10
c001c6f7:	85 c0                	test   eax,eax
c001c6f9:	75 c8                	jne    c001c6c3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c6fb:	83 ec 0c             	sub    esp,0xc
c001c6fe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c702:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c706:	31 ed                	xor    ebp,ebp
c001c708:	0f af c2             	imul   eax,edx
c001c70b:	50                   	push   eax
c001c70c:	e8 88 2e ff ff       	call   c000f599 <malloc>
c001c711:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c713:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c717:	89 34 24             	mov    DWORD PTR [esp],esi
c001c71a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c71e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c722:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c726:	0f af c2             	imul   eax,edx
c001c729:	99                   	cdq    
c001c72a:	52                   	push   edx
c001c72b:	50                   	push   eax
c001c72c:	53                   	push   ebx
c001c72d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c730:	83 c4 20             	add    esp,0x20
c001c733:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c73b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c743:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c74b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c753:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c757:	0f 86 aa 00 00 00    	jbe    c001c807 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c75d:	0f b7 f5             	movzx  esi,bp
c001c760:	6b f6 28             	imul   esi,esi,0x28
c001c763:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c767:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c76a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c76e:	50                   	push   eax
c001c76f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c773:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c777:	8b 16                	mov    edx,DWORD PTR [esi]
c001c779:	6b c0 28             	imul   eax,eax,0x28
c001c77c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c780:	89 d0                	mov    eax,edx
c001c782:	31 d2                	xor    edx,edx
c001c784:	52                   	push   edx
c001c785:	50                   	push   eax
c001c786:	53                   	push   ebx
c001c787:	e8 88 66 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c78c:	83 c4 0c             	add    esp,0xc
c001c78f:	6a 20                	push   0x20
c001c791:	6a 00                	push   0x0
c001c793:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c797:	52                   	push   edx
c001c798:	e8 b3 3f fe ff       	call   c0000750 <memset>
c001c79d:	58                   	pop    eax
c001c79e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7a0:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c7a4:	51                   	push   ecx
c001c7a5:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c7a9:	52                   	push   edx
c001c7aa:	6a 00                	push   0x0
c001c7ac:	6a 1f                	push   0x1f
c001c7ae:	53                   	push   ebx
c001c7af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7b2:	83 c4 18             	add    esp,0x18
c001c7b5:	68 94 bb 02 c0       	push   0xc002bb94
c001c7ba:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c7be:	52                   	push   edx
c001c7bf:	e8 d4 40 fe ff       	call   c0000898 <strcmp>
c001c7c4:	83 c4 10             	add    esp,0x10
c001c7c7:	85 c0                	test   eax,eax
c001c7c9:	75 0f                	jne    c001c7da <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c7cb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7da:	50                   	push   eax
c001c7db:	50                   	push   eax
c001c7dc:	68 9c bb 02 c0       	push   0xc002bb9c
c001c7e1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c7e5:	50                   	push   eax
c001c7e6:	e8 ad 40 fe ff       	call   c0000898 <strcmp>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	85 c0                	test   eax,eax
c001c7f0:	75 0f                	jne    c001c801 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c7f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c7f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c7fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c801:	45                   	inc    ebp
c001c802:	e9 4c ff ff ff       	jmp    c001c753 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c80c:	75 10                	jne    c001c81e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c80e:	83 ec 0c             	sub    esp,0xc
c001c811:	68 a4 bb 02 c0       	push   0xc002bba4
c001c816:	e8 e4 d6 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c823:	75 10                	jne    c001c835 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c825:	83 ec 0c             	sub    esp,0xc
c001c828:	68 a4 bb 02 c0       	push   0xc002bba4
c001c82d:	e8 cd d6 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001c832:	83 c4 10             	add    esp,0x10
c001c835:	31 d2                	xor    edx,edx
c001c837:	50                   	push   eax
c001c838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83c:	52                   	push   edx
c001c83d:	50                   	push   eax
c001c83e:	53                   	push   ebx
c001c83f:	e8 d0 65 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c844:	5a                   	pop    edx
c001c845:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c849:	e8 4b 2d ff ff       	call   c000f599 <malloc>
c001c84e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c852:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c856:	31 c9                	xor    ecx,ecx
c001c858:	5e                   	pop    esi
c001c859:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c85b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c85f:	55                   	push   ebp
c001c860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c864:	51                   	push   ecx
c001c865:	52                   	push   edx
c001c866:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c86a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c86e:	53                   	push   ebx
c001c86f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c872:	83 c4 14             	add    esp,0x14
c001c875:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c879:	e8 1b 2d ff ff       	call   c000f599 <malloc>
c001c87e:	89 c6                	mov    esi,eax
c001c880:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c882:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c885:	56                   	push   esi
c001c886:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c88a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c88e:	51                   	push   ecx
c001c88f:	52                   	push   edx
c001c890:	53                   	push   ebx
c001c891:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c894:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c898:	8b 15 00 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031000
c001c89e:	83 c4 1c             	add    esp,0x1c
c001c8a1:	c1 e8 04             	shr    eax,0x4
c001c8a4:	89 04 95 80 0e 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf180],eax
c001c8ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c8af:	31 d2                	xor    edx,edx
c001c8b1:	52                   	push   edx
c001c8b2:	50                   	push   eax
c001c8b3:	53                   	push   ebx
c001c8b4:	e8 5b 65 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c8b9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c8bb:	31 d2                	xor    edx,edx
c001c8bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c8c0:	56                   	push   esi
c001c8c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8c5:	52                   	push   edx
c001c8c6:	50                   	push   eax
c001c8c7:	53                   	push   ebx
c001c8c8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c8cb:	83 c4 14             	add    esp,0x14
c001c8ce:	53                   	push   ebx
c001c8cf:	e8 e0 64 ff ff       	call   c0012db4 <File::close()>
c001c8d4:	5d                   	pop    ebp
c001c8d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8d9:	e8 cb 2c ff ff       	call   c000f5a9 <free>
c001c8de:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8e1:	e8 c3 2c ff ff       	call   c000f5a9 <free>
c001c8e6:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001c8eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c8ef:	8d 50 01             	lea    edx,[eax+0x1]
c001c8f2:	89 0c 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],ecx
c001c8f9:	89 34 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],esi
c001c900:	89 15 00 10 03 c0    	mov    DWORD PTR ds:0xc0031000,edx
c001c906:	83 c4 10             	add    esp,0x10
c001c909:	b0 01                	mov    al,0x1
c001c90b:	83 c4 5c             	add    esp,0x5c
c001c90e:	5b                   	pop    ebx
c001c90f:	5e                   	pop    esi
c001c910:	5f                   	pop    edi
c001c911:	5d                   	pop    ebp
c001c912:	c3                   	ret    

c001c913 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c913:	55                   	push   ebp
c001c914:	57                   	push   edi
c001c915:	56                   	push   esi
c001c916:	53                   	push   ebx
c001c917:	81 ec 68 03 00 00    	sub    esp,0x368
c001c91d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c924:	8b 1d 50 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031050
c001c92a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c92e:	68 14 01 00 00       	push   0x114
c001c933:	e8 61 2c ff ff       	call   c000f599 <malloc>
c001c938:	83 c4 0c             	add    esp,0xc
c001c93b:	89 c5                	mov    ebp,eax
c001c93d:	53                   	push   ebx
c001c93e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c945:	50                   	push   eax
c001c946:	e8 a7 63 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001c94b:	5e                   	pop    esi
c001c94c:	5f                   	pop    edi
c001c94d:	6a 01                	push   0x1
c001c94f:	55                   	push   ebp
c001c950:	e8 01 64 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001c955:	83 c4 10             	add    esp,0x10
c001c958:	85 c0                	test   eax,eax
c001c95a:	0f 85 a7 06 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c960:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	6a 34                	push   0x34
c001c96d:	e8 27 2c ff ff       	call   c000f599 <malloc>
c001c972:	5b                   	pop    ebx
c001c973:	89 c7                	mov    edi,eax
c001c975:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c979:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c97c:	53                   	push   ebx
c001c97d:	57                   	push   edi
c001c97e:	6a 00                	push   0x0
c001c980:	6a 34                	push   0x34
c001c982:	55                   	push   ebp
c001c983:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c986:	83 c4 20             	add    esp,0x20
c001c989:	85 c0                	test   eax,eax
c001c98b:	0f 85 76 06 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c991:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c997:	0f 85 6a 06 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c99d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c9a0:	85 c0                	test   eax,eax
c001c9a2:	0f 84 5f 06 00 00    	je     c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9a8:	31 d2                	xor    edx,edx
c001c9aa:	51                   	push   ecx
c001c9ab:	52                   	push   edx
c001c9ac:	50                   	push   eax
c001c9ad:	55                   	push   ebp
c001c9ae:	e8 61 64 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001c9b3:	83 c4 10             	add    esp,0x10
c001c9b6:	85 c0                	test   eax,eax
c001c9b8:	0f 85 49 06 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9be:	83 ec 0c             	sub    esp,0xc
c001c9c1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c9c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c9cc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9d0:	0f af c2             	imul   eax,edx
c001c9d3:	50                   	push   eax
c001c9d4:	e8 c0 2b ff ff       	call   c000f599 <malloc>
c001c9d9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9e7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9eb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9ef:	0f af c2             	imul   eax,edx
c001c9f2:	99                   	cdq    
c001c9f3:	52                   	push   edx
c001c9f4:	50                   	push   eax
c001c9f5:	55                   	push   ebp
c001c9f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9f9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c9fc:	83 c4 20             	add    esp,0x20
c001c9ff:	85 c0                	test   eax,eax
c001ca01:	0f 84 00 06 00 00    	je     c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca07:	52                   	push   edx
c001ca08:	31 d2                	xor    edx,edx
c001ca0a:	52                   	push   edx
c001ca0b:	50                   	push   eax
c001ca0c:	55                   	push   ebp
c001ca0d:	e8 02 64 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	85 c0                	test   eax,eax
c001ca17:	0f 85 ea 05 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca1d:	83 ec 0c             	sub    esp,0xc
c001ca20:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca24:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ca28:	31 f6                	xor    esi,esi
c001ca2a:	0f af c2             	imul   eax,edx
c001ca2d:	50                   	push   eax
c001ca2e:	e8 66 2b ff ff       	call   c000f599 <malloc>
c001ca33:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca41:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ca45:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001ca49:	0f af c2             	imul   eax,edx
c001ca4c:	99                   	cdq    
c001ca4d:	52                   	push   edx
c001ca4e:	50                   	push   eax
c001ca4f:	55                   	push   ebp
c001ca50:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca53:	83 c4 20             	add    esp,0x20
c001ca56:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001ca5a:	0f 86 8a 00 00 00    	jbe    c001caea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001ca60:	0f b7 de             	movzx  ebx,si
c001ca63:	c1 e3 05             	shl    ebx,0x5
c001ca66:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001ca6a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001ca6d:	75 75                	jne    c001cae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001ca6f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca72:	31 d2                	xor    edx,edx
c001ca74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca7f:	50                   	push   eax
c001ca80:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001ca83:	52                   	push   edx
c001ca84:	50                   	push   eax
c001ca85:	55                   	push   ebp
c001ca86:	e8 89 63 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	85 c0                	test   eax,eax
c001ca90:	0f 85 71 05 00 00    	jne    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001ca96:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca9d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001caa0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001caa4:	31 d2                	xor    edx,edx
c001caa6:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001caaa:	83 ec 0c             	sub    esp,0xc
c001caad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cab1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cab8:	50                   	push   eax
c001cab9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cabd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cac1:	52                   	push   edx
c001cac2:	50                   	push   eax
c001cac3:	55                   	push   ebp
c001cac4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cac7:	83 c4 1c             	add    esp,0x1c
c001caca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cacd:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cad0:	50                   	push   eax
c001cad1:	6a 00                	push   0x0
c001cad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cad7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cadb:	50                   	push   eax
c001cadc:	e8 6f 3c fe ff       	call   c0000750 <memset>
c001cae1:	83 c4 10             	add    esp,0x10
c001cae4:	46                   	inc    esi
c001cae5:	e9 6c ff ff ff       	jmp    c001ca56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001caea:	53                   	push   ebx
c001caeb:	31 db                	xor    ebx,ebx
c001caed:	68 00 01 00 00       	push   0x100
c001caf2:	6a 00                	push   0x0
c001caf4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001caf8:	50                   	push   eax
c001caf9:	e8 52 3c fe ff       	call   c0000750 <memset>
c001cafe:	83 c4 0c             	add    esp,0xc
c001cb01:	68 00 01 00 00       	push   0x100
c001cb06:	6a 00                	push   0x0
c001cb08:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cb0f:	50                   	push   eax
c001cb10:	e8 3b 3c fe ff       	call   c0000750 <memset>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cb20:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cb28:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cb30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb38:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cb40:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cb44:	0f 86 30 01 00 00    	jbe    c001cc7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cb4a:	0f b7 f3             	movzx  esi,bx
c001cb4d:	6b f6 28             	imul   esi,esi,0x28
c001cb50:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cb54:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cb5b:	52                   	push   edx
c001cb5c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb60:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cb64:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb66:	6b d2 28             	imul   edx,edx,0x28
c001cb69:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cb6d:	31 d2                	xor    edx,edx
c001cb6f:	52                   	push   edx
c001cb70:	50                   	push   eax
c001cb71:	55                   	push   ebp
c001cb72:	e8 9d 62 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001cb77:	83 c4 0c             	add    esp,0xc
c001cb7a:	6a 20                	push   0x20
c001cb7c:	6a 00                	push   0x0
c001cb7e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb85:	51                   	push   ecx
c001cb86:	e8 c5 3b fe ff       	call   c0000750 <memset>
c001cb8b:	59                   	pop    ecx
c001cb8c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb93:	52                   	push   edx
c001cb94:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb9b:	51                   	push   ecx
c001cb9c:	6a 00                	push   0x0
c001cb9e:	6a 1f                	push   0x1f
c001cba0:	55                   	push   ebp
c001cba1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cba4:	83 c4 1c             	add    esp,0x1c
c001cba7:	6a 09                	push   0x9
c001cba9:	68 be bb 02 c0       	push   0xc002bbbe
c001cbae:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cbb5:	51                   	push   ecx
c001cbb6:	e8 91 3a fe ff       	call   c000064c <memcmp>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	85 c0                	test   eax,eax
c001cbc0:	75 21                	jne    c001cbe3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cbc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cbca:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cbce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbd2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbd5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cbdc:	89 d0                	mov    eax,edx
c001cbde:	40                   	inc    eax
c001cbdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbe3:	50                   	push   eax
c001cbe4:	6a 09                	push   0x9
c001cbe6:	68 c8 bb 02 c0       	push   0xc002bbc8
c001cbeb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbf2:	50                   	push   eax
c001cbf3:	e8 54 3a fe ff       	call   c000064c <memcmp>
c001cbf8:	83 c4 10             	add    esp,0x10
c001cbfb:	85 c0                	test   eax,eax
c001cbfd:	75 21                	jne    c001cc20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cbff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc07:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cc0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cc0f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc12:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cc19:	89 d0                	mov    eax,edx
c001cc1b:	40                   	inc    eax
c001cc1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cc20:	50                   	push   eax
c001cc21:	50                   	push   eax
c001cc22:	68 94 bb 02 c0       	push   0xc002bb94
c001cc27:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc2e:	50                   	push   eax
c001cc2f:	e8 64 3c fe ff       	call   c0000898 <strcmp>
c001cc34:	83 c4 10             	add    esp,0x10
c001cc37:	85 c0                	test   eax,eax
c001cc39:	75 0f                	jne    c001cc4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cc3b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc46:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc4a:	50                   	push   eax
c001cc4b:	50                   	push   eax
c001cc4c:	68 9c bb 02 c0       	push   0xc002bb9c
c001cc51:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cc58:	50                   	push   eax
c001cc59:	e8 3a 3c fe ff       	call   c0000898 <strcmp>
c001cc5e:	83 c4 10             	add    esp,0x10
c001cc61:	85 c0                	test   eax,eax
c001cc63:	75 0f                	jne    c001cc74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cc65:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cc68:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cc6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc70:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cc74:	43                   	inc    ebx
c001cc75:	e9 c6 fe ff ff       	jmp    c001cb40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cc7a:	31 d2                	xor    edx,edx
c001cc7c:	50                   	push   eax
c001cc7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cc81:	52                   	push   edx
c001cc82:	50                   	push   eax
c001cc83:	55                   	push   ebp
c001cc84:	e8 8b 61 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001cc89:	58                   	pop    eax
c001cc8a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc8e:	e8 06 29 ff ff       	call   c000f599 <malloc>
c001cc93:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc96:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc9a:	31 d2                	xor    edx,edx
c001cc9c:	58                   	pop    eax
c001cc9d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cca1:	53                   	push   ebx
c001cca2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cca6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccaa:	52                   	push   edx
c001ccab:	50                   	push   eax
c001ccac:	55                   	push   ebp
c001ccad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb0:	83 c4 14             	add    esp,0x14
c001ccb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccb7:	e8 dd 28 ff ff       	call   c000f599 <malloc>
c001ccbc:	31 d2                	xor    edx,edx
c001ccbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ccc2:	83 c4 0c             	add    esp,0xc
c001ccc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccc9:	52                   	push   edx
c001ccca:	50                   	push   eax
c001cccb:	55                   	push   ebp
c001cccc:	e8 43 61 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001ccd1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccd4:	31 d2                	xor    edx,edx
c001ccd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ccdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cce1:	52                   	push   edx
c001cce2:	50                   	push   eax
c001cce3:	55                   	push   ebp
c001cce4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce7:	83 c4 20             	add    esp,0x20
c001ccea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ccf2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ccf6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ccfa:	0f 84 0b 03 00 00    	je     c001d00b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cd00:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cd07:	31 d2                	xor    edx,edx
c001cd09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd0d:	c1 e8 03             	shr    eax,0x3
c001cd10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cd14:	51                   	push   ecx
c001cd15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd19:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cd1d:	52                   	push   edx
c001cd1e:	50                   	push   eax
c001cd1f:	55                   	push   ebp
c001cd20:	e8 ef 60 ff ff       	call   c0012e14 <File::seek(unsigned long long)>
c001cd25:	5b                   	pop    ebx
c001cd26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd2a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cd31:	e8 63 28 ff ff       	call   c000f599 <malloc>
c001cd36:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd3d:	31 d2                	xor    edx,edx
c001cd3f:	5e                   	pop    esi
c001cd40:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cd44:	50                   	push   eax
c001cd45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd4d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cd54:	52                   	push   edx
c001cd55:	50                   	push   eax
c001cd56:	55                   	push   ebp
c001cd57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd5a:	83 c4 20             	add    esp,0x20
c001cd5d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cd65:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cd69:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cd6d:	0f 8d 7c 02 00 00    	jge    c001cfef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cd73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd7b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cd80:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cd83:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cd87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd8b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cd8f:	89 d8                	mov    eax,ebx
c001cd91:	c1 e8 08             	shr    eax,0x8
c001cd94:	89 c6                	mov    esi,eax
c001cd96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd9a:	c1 e6 04             	shl    esi,0x4
c001cd9d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cda1:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cda4:	85 d2                	test   edx,edx
c001cda6:	0f 85 bf 00 00 00    	jne    c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdb3:	03 06                	add    eax,DWORD PTR [esi]
c001cdb5:	50                   	push   eax
c001cdb6:	e8 4b f8 ff ff       	call   c001c606 <Thr::getAddressOfKernelSymbol(char const*)>
c001cdbb:	83 c4 10             	add    esp,0x10
c001cdbe:	89 c2                	mov    edx,eax
c001cdc0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cdc5:	85 c0                	test   eax,eax
c001cdc7:	0f 85 9e 00 00 00    	jne    c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdd4:	03 06                	add    eax,DWORD PTR [esi]
c001cdd6:	50                   	push   eax
c001cdd7:	e8 63 17 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cddc:	83 c4 10             	add    esp,0x10
c001cddf:	89 c2                	mov    edx,eax
c001cde1:	85 c0                	test   eax,eax
c001cde3:	0f 85 82 00 00 00    	jne    c001ce6b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cde9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cded:	50                   	push   eax
c001cdee:	50                   	push   eax
c001cdef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf3:	03 06                	add    eax,DWORD PTR [esi]
c001cdf5:	50                   	push   eax
c001cdf6:	68 d2 bb 02 c0       	push   0xc002bbd2
c001cdfb:	e8 93 59 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001ce00:	58                   	pop    eax
c001ce01:	5a                   	pop    edx
c001ce02:	68 ec bb 02 c0       	push   0xc002bbec
c001ce07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce0e:	50                   	push   eax
c001ce0f:	e8 f8 39 fe ff       	call   c000080c <strcpy>
c001ce14:	59                   	pop    ecx
c001ce15:	58                   	pop    eax
c001ce16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce1a:	03 06                	add    eax,DWORD PTR [esi]
c001ce1c:	50                   	push   eax
c001ce1d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce24:	50                   	push   eax
c001ce25:	e8 22 3b fe ff       	call   c000094c <strcat>
c001ce2a:	58                   	pop    eax
c001ce2b:	5a                   	pop    edx
c001ce2c:	68 82 bc 02 c0       	push   0xc002bc82
c001ce31:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce38:	50                   	push   eax
c001ce39:	e8 0e 3b fe ff       	call   c000094c <strcat>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce46:	0f 84 5d 01 00 00    	je     c001cfa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce4c:	83 ec 0c             	sub    esp,0xc
c001ce4f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ce56:	50                   	push   eax
c001ce57:	e8 a3 d0 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ce63:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ce67:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ce6b:	80 fb 01             	cmp    bl,0x1
c001ce6e:	0f 85 88 00 00 00    	jne    c001cefc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001ce74:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001ce7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ce7f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001ce83:	01 ce                	add    esi,ecx
c001ce85:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce8b:	0f 94 c0             	sete   al
c001ce8e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce94:	0f 94 c3             	sete   bl
c001ce97:	09 c3                	or     ebx,eax
c001ce99:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce9b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cea0:	74 41                	je     c001cee3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cea2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cea5:	84 db                	test   bl,bl
c001cea7:	75 15                	jne    c001cebe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cea9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cead:	66 83 f8 0c          	cmp    ax,0xc
c001ceb1:	76 05                	jbe    c001ceb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001ceb3:	b8 0c 00 00 00       	mov    eax,0xc
c001ceb8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cebc:	76 37                	jbe    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cebe:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cec2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cec7:	0f 84 dc 00 00 00    	je     c001cfa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cecd:	83 ec 0c             	sub    esp,0xc
c001ced0:	68 03 bc 02 c0       	push   0xc002bc03
c001ced5:	e8 25 d0 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001ceda:	83 c4 10             	add    esp,0x10
c001cedd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cee1:	eb 12                	jmp    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cee3:	01 c1                	add    ecx,eax
c001cee5:	84 db                	test   bl,bl
c001cee7:	75 0c                	jne    c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cee9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceed:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cef1:	77 02                	ja     c001cef5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cef3:	01 d1                	add    ecx,edx
c001cef5:	89 0e                	mov    DWORD PTR [esi],ecx
c001cef7:	e9 ea 00 00 00       	jmp    c001cfe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cefc:	80 fb 02             	cmp    bl,0x2
c001ceff:	75 7c                	jne    c001cf7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cf01:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cf08:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cf0c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cf10:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cf16:	74 20                	je     c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf18:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cf1e:	74 18                	je     c001cf38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001cf20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf24:	b9 0a 00 00 00       	mov    ecx,0xa
c001cf29:	66 83 f8 0e          	cmp    ax,0xe
c001cf2d:	77 03                	ja     c001cf32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001cf2f:	8d 48 fc             	lea    ecx,[eax-0x4]
c001cf32:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001cf36:	76 1f                	jbe    c001cf57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cf38:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cf3c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf41:	74 66                	je     c001cfa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf43:	83 ec 0c             	sub    esp,0xc
c001cf46:	68 1f bc 02 c0       	push   0xc002bc1f
c001cf4b:	e8 af cf ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001cf50:	83 c4 10             	add    esp,0x10
c001cf53:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf57:	8b 06                	mov    eax,DWORD PTR [esi]
c001cf59:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cf5e:	74 13                	je     c001cf73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001cf60:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cf64:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cf6b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cf6f:	01 c8                	add    eax,ecx
c001cf71:	eb 04                	jmp    c001cf77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cf73:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cf77:	01 c2                	add    edx,eax
c001cf79:	89 16                	mov    DWORD PTR [esi],edx
c001cf7b:	eb 69                	jmp    c001cfe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cf7d:	0f b6 db             	movzx  ebx,bl
c001cf80:	50                   	push   eax
c001cf81:	50                   	push   eax
c001cf82:	53                   	push   ebx
c001cf83:	68 3b bc 02 c0       	push   0xc002bc3b
c001cf88:	e8 06 58 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cf95:	74 12                	je     c001cfa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cf97:	83 ec 0c             	sub    esp,0xc
c001cf9a:	68 46 bc 02 c0       	push   0xc002bc46
c001cf9f:	e8 5b cf ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001cfa4:	83 c4 10             	add    esp,0x10
c001cfa7:	eb 3d                	jmp    c001cfe6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cfa9:	83 ec 0c             	sub    esp,0xc
c001cfac:	55                   	push   ebp
c001cfad:	e8 02 5e ff ff       	call   c0012db4 <File::close()>
c001cfb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cfbb:	59                   	pop    ecx
c001cfbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfc0:	e8 e4 25 ff ff       	call   c000f5a9 <free>
c001cfc5:	5b                   	pop    ebx
c001cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfca:	e8 da 25 ff ff       	call   c000f5a9 <free>
c001cfcf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfd2:	e8 d2 25 ff ff       	call   c000f5a9 <free>
c001cfd7:	5e                   	pop    esi
c001cfd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfdc:	e8 c8 25 ff ff       	call   c000f5a9 <free>
c001cfe1:	83 c4 10             	add    esp,0x10
c001cfe4:	eb 21                	jmp    c001d007 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfe6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cfea:	e9 76 fd ff ff       	jmp    c001cd65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cfef:	83 ec 0c             	sub    esp,0xc
c001cff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff6:	e8 ae 25 ff ff       	call   c000f5a9 <free>
c001cffb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	e9 eb fc ff ff       	jmp    c001ccf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d007:	31 c0                	xor    eax,eax
c001d009:	eb 33                	jmp    c001d03e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	55                   	push   ebp
c001d00f:	e8 a0 5d ff ff       	call   c0012db4 <File::close()>
c001d014:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d017:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d01a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d01d:	58                   	pop    eax
c001d01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d022:	e8 82 25 ff ff       	call   c000f5a9 <free>
c001d027:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d02a:	e8 7a 25 ff ff       	call   c000f5a9 <free>
c001d02f:	5a                   	pop    edx
c001d030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d034:	e8 70 25 ff ff       	call   c000f5a9 <free>
c001d039:	83 c4 10             	add    esp,0x10
c001d03c:	b0 01                	mov    al,0x1
c001d03e:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d044:	5b                   	pop    ebx
c001d045:	5e                   	pop    esi
c001d046:	5f                   	pop    edi
c001d047:	5d                   	pop    ebp
c001d048:	c3                   	ret    

c001d049 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d049:	56                   	push   esi
c001d04a:	31 d2                	xor    edx,edx
c001d04c:	53                   	push   ebx
c001d04d:	8b 1d 60 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030860
c001d053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d057:	39 d3                	cmp    ebx,edx
c001d059:	7e 1b                	jle    c001d076 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d05b:	8b 04 95 80 0a 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf580]
c001d062:	39 c8                	cmp    eax,ecx
c001d064:	77 0d                	ja     c001d073 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d066:	8b 34 95 80 08 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf780]
c001d06d:	01 c6                	add    esi,eax
c001d06f:	39 ce                	cmp    esi,ecx
c001d071:	77 05                	ja     c001d078 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d073:	42                   	inc    edx
c001d074:	eb e1                	jmp    c001d057 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d076:	31 c0                	xor    eax,eax
c001d078:	5b                   	pop    ebx
c001d079:	5e                   	pop    esi
c001d07a:	c3                   	ret    

c001d07b <Thr::getDriverNameFromAddress(unsigned long)>:
c001d07b:	53                   	push   ebx
c001d07c:	31 c0                	xor    eax,eax
c001d07e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d082:	8b 1d 60 08 03 c0    	mov    ebx,DWORD PTR ds:0xc0030860
c001d088:	39 c3                	cmp    ebx,eax
c001d08a:	7e 22                	jle    c001d0ae <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d08c:	8b 14 85 80 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf580]
c001d093:	39 ca                	cmp    edx,ecx
c001d095:	77 14                	ja     c001d0ab <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d097:	03 14 85 80 08 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf780]
c001d09e:	39 ca                	cmp    edx,ecx
c001d0a0:	76 09                	jbe    c001d0ab <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d0a2:	8b 04 85 80 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf380]
c001d0a9:	eb 05                	jmp    c001d0b0 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d0ab:	40                   	inc    eax
c001d0ac:	eb da                	jmp    c001d088 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d0ae:	31 c0                	xor    eax,eax
c001d0b0:	5b                   	pop    ebx
c001d0b1:	c3                   	ret    

c001d0b2 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d0b2:	53                   	push   ebx
c001d0b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d0b7:	53                   	push   ebx
c001d0b8:	e8 8c ff ff ff       	call   c001d049 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d0bd:	5a                   	pop    edx
c001d0be:	31 d2                	xor    edx,edx
c001d0c0:	85 c0                	test   eax,eax
c001d0c2:	74 04                	je     c001d0c8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d0c4:	89 da                	mov    edx,ebx
c001d0c6:	29 c2                	sub    edx,eax
c001d0c8:	89 d0                	mov    eax,edx
c001d0ca:	5b                   	pop    ebx
c001d0cb:	c3                   	ret    

c001d0cc <Thr::loadDLL(char const*, bool)>:
c001d0cc:	55                   	push   ebp
c001d0cd:	57                   	push   edi
c001d0ce:	56                   	push   esi
c001d0cf:	53                   	push   ebx
c001d0d0:	81 ec 34 01 00 00    	sub    esp,0x134
c001d0d6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d0dd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d0e4:	56                   	push   esi
c001d0e5:	68 5e bc 02 c0       	push   0xc002bc5e
c001d0ea:	e8 a4 56 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001d0ef:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d0f6:	e8 9e 24 ff ff       	call   c000f599 <malloc>
c001d0fb:	83 c4 0c             	add    esp,0xc
c001d0fe:	89 c3                	mov    ebx,eax
c001d100:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c001d106:	56                   	push   esi
c001d107:	50                   	push   eax
c001d108:	e8 e5 5b ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001d10d:	83 c4 10             	add    esp,0x10
c001d110:	85 db                	test   ebx,ebx
c001d112:	75 3c                	jne    c001d150 <Thr::loadDLL(char const*, bool)+0x84>
c001d114:	89 f8                	mov    eax,edi
c001d116:	84 c0                	test   al,al
c001d118:	0f 84 d2 01 00 00    	je     c001d2f0 <Thr::loadDLL(char const*, bool)+0x224>
c001d11e:	55                   	push   ebp
c001d11f:	55                   	push   ebp
c001d120:	68 6f bc 02 c0       	push   0xc002bc6f
c001d125:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d129:	55                   	push   ebp
c001d12a:	e8 dd 36 fe ff       	call   c000080c <strcpy>
c001d12f:	58                   	pop    eax
c001d130:	5a                   	pop    edx
c001d131:	56                   	push   esi
c001d132:	55                   	push   ebp
c001d133:	e8 14 38 fe ff       	call   c000094c <strcat>
c001d138:	59                   	pop    ecx
c001d139:	58                   	pop    eax
c001d13a:	68 82 bc 02 c0       	push   0xc002bc82
c001d13f:	55                   	push   ebp
c001d140:	e8 07 38 fe ff       	call   c000094c <strcat>
c001d145:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d148:	e8 b2 cd ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001d14d:	83 c4 10             	add    esp,0x10
c001d150:	51                   	push   ecx
c001d151:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d155:	50                   	push   eax
c001d156:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d15a:	50                   	push   eax
c001d15b:	53                   	push   ebx
c001d15c:	e8 a1 5e ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001d161:	83 c4 10             	add    esp,0x10
c001d164:	85 db                	test   ebx,ebx
c001d166:	74 0c                	je     c001d174 <Thr::loadDLL(char const*, bool)+0xa8>
c001d168:	83 ec 0c             	sub    esp,0xc
c001d16b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d16d:	53                   	push   ebx
c001d16e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d171:	83 c4 10             	add    esp,0x10
c001d174:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d179:	75 0a                	jne    c001d185 <Thr::loadDLL(char const*, bool)+0xb9>
c001d17b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d17f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d183:	75 3c                	jne    c001d1c1 <Thr::loadDLL(char const*, bool)+0xf5>
c001d185:	89 f8                	mov    eax,edi
c001d187:	84 c0                	test   al,al
c001d189:	0f 84 49 01 00 00    	je     c001d2d8 <Thr::loadDLL(char const*, bool)+0x20c>
c001d18f:	51                   	push   ecx
c001d190:	51                   	push   ecx
c001d191:	68 6f bc 02 c0       	push   0xc002bc6f
c001d196:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d19a:	53                   	push   ebx
c001d19b:	e8 6c 36 fe ff       	call   c000080c <strcpy>
c001d1a0:	5d                   	pop    ebp
c001d1a1:	58                   	pop    eax
c001d1a2:	56                   	push   esi
c001d1a3:	53                   	push   ebx
c001d1a4:	e8 a3 37 fe ff       	call   c000094c <strcat>
c001d1a9:	58                   	pop    eax
c001d1aa:	5a                   	pop    edx
c001d1ab:	68 82 bc 02 c0       	push   0xc002bc82
c001d1b0:	53                   	push   ebx
c001d1b1:	e8 96 37 fe ff       	call   c000094c <strcat>
c001d1b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1b9:	e8 41 cd ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	52                   	push   edx
c001d1c2:	6a 03                	push   0x3
c001d1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d1cc:	05 ff 0f 00 00       	add    eax,0xfff
c001d1d1:	83 d2 00             	adc    edx,0x0
c001d1d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1d8:	50                   	push   eax
c001d1d9:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c001d1df:	e8 90 49 ff ff       	call   c0011b74 <VAS::allocatePages(int, int)>
c001d1e4:	59                   	pop    ecx
c001d1e5:	89 c3                	mov    ebx,eax
c001d1e7:	5d                   	pop    ebp
c001d1e8:	50                   	push   eax
c001d1e9:	68 71 a1 02 c0       	push   0xc002a171
c001d1ee:	e8 a0 55 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001d1f3:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1f6:	e8 71 35 fe ff       	call   c000076c <strlen>
c001d1fb:	8b 2d 60 08 03 c0    	mov    ebp,DWORD PTR ds:0xc0030860
c001d201:	40                   	inc    eax
c001d202:	89 04 24             	mov    DWORD PTR [esp],eax
c001d205:	e8 8f 23 ff ff       	call   c000f599 <malloc>
c001d20a:	89 04 ad 80 0c 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf380],eax
c001d211:	58                   	pop    eax
c001d212:	a1 60 08 03 c0       	mov    eax,ds:0xc0030860
c001d217:	5a                   	pop    edx
c001d218:	56                   	push   esi
c001d219:	ff 34 85 80 0c 03 c0 	push   DWORD PTR [eax*4-0x3ffcf380]
c001d220:	e8 e7 35 fe ff       	call   c000080c <strcpy>
c001d225:	a1 60 08 03 c0       	mov    eax,ds:0xc0030860
c001d22a:	8d 50 01             	lea    edx,[eax+0x1]
c001d22d:	89 1c 85 80 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf580],ebx
c001d234:	89 15 60 08 03 c0    	mov    DWORD PTR ds:0xc0030860,edx
c001d23a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d23e:	83 c4 0c             	add    esp,0xc
c001d241:	89 14 85 80 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf780],edx
c001d248:	6a 01                	push   0x1
c001d24a:	53                   	push   ebx
c001d24b:	56                   	push   esi
c001d24c:	e8 c2 f6 ff ff       	call   c001c913 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d251:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d255:	83 c4 10             	add    esp,0x10
c001d258:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d25d:	0f 85 89 00 00 00    	jne    c001d2ec <Thr::loadDLL(char const*, bool)+0x220>
c001d263:	89 f8                	mov    eax,edi
c001d265:	84 c0                	test   al,al
c001d267:	74 73                	je     c001d2dc <Thr::loadDLL(char const*, bool)+0x210>
c001d269:	83 ec 0c             	sub    esp,0xc
c001d26c:	68 84 bc 02 c0       	push   0xc002bc84
c001d271:	e8 89 cc ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001d276:	83 c4 10             	add    esp,0x10
c001d279:	eb 61                	jmp    c001d2dc <Thr::loadDLL(char const*, bool)+0x210>
c001d27b:	50                   	push   eax
c001d27c:	50                   	push   eax
c001d27d:	89 e8                	mov    eax,ebp
c001d27f:	c1 e0 0c             	shl    eax,0xc
c001d282:	01 d8                	add    eax,ebx
c001d284:	50                   	push   eax
c001d285:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c001d28b:	e8 4c 44 ff ff       	call   c00116dc <VAS::getPageTableEntry(unsigned long)>
c001d290:	83 c4 10             	add    esp,0x10
c001d293:	8b 00                	mov    eax,DWORD PTR [eax]
c001d295:	a8 60                	test   al,0x60
c001d297:	75 11                	jne    c001d2aa <Thr::loadDLL(char const*, bool)+0x1de>
c001d299:	83 ec 0c             	sub    esp,0xc
c001d29c:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d2a1:	50                   	push   eax
c001d2a2:	e8 7d 26 ff ff       	call   c000f924 <Phys::freePage(unsigned long)>
c001d2a7:	83 c4 10             	add    esp,0x10
c001d2aa:	45                   	inc    ebp
c001d2ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d2b3:	05 ff 0f 00 00       	add    eax,0xfff
c001d2b8:	bf 00 00 00 00       	mov    edi,0x0
c001d2bd:	83 d2 00             	adc    edx,0x0
c001d2c0:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d2c4:	c1 ea 0c             	shr    edx,0xc
c001d2c7:	39 c5                	cmp    ebp,eax
c001d2c9:	89 d1                	mov    ecx,edx
c001d2cb:	89 f8                	mov    eax,edi
c001d2cd:	19 c8                	sbb    eax,ecx
c001d2cf:	72 aa                	jb     c001d27b <Thr::loadDLL(char const*, bool)+0x1af>
c001d2d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d2d6:	75 18                	jne    c001d2f0 <Thr::loadDLL(char const*, bool)+0x224>
c001d2d8:	31 db                	xor    ebx,ebx
c001d2da:	eb 14                	jmp    c001d2f0 <Thr::loadDLL(char const*, bool)+0x224>
c001d2dc:	83 ec 0c             	sub    esp,0xc
c001d2df:	68 a3 bc 02 c0       	push   0xc002bca3
c001d2e4:	e8 16 cc ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001d2e9:	83 c4 10             	add    esp,0x10
c001d2ec:	31 ed                	xor    ebp,ebp
c001d2ee:	eb bb                	jmp    c001d2ab <Thr::loadDLL(char const*, bool)+0x1df>
c001d2f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2f6:	89 d8                	mov    eax,ebx
c001d2f8:	5b                   	pop    ebx
c001d2f9:	5e                   	pop    esi
c001d2fa:	5f                   	pop    edi
c001d2fb:	5d                   	pop    ebp
c001d2fc:	c3                   	ret    

c001d2fd <Thr::executeDLL(unsigned long, void*)>:
c001d2fd:	56                   	push   esi
c001d2fe:	53                   	push   ebx
c001d2ff:	52                   	push   edx
c001d300:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d304:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d308:	85 db                	test   ebx,ebx
c001d30a:	75 10                	jne    c001d31c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d30c:	83 ec 0c             	sub    esp,0xc
c001d30f:	68 bf bc 02 c0       	push   0xc002bcbf
c001d314:	e8 e6 cb ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001d319:	83 c4 10             	add    esp,0x10
c001d31c:	50                   	push   eax
c001d31d:	50                   	push   eax
c001d31e:	53                   	push   ebx
c001d31f:	68 e9 bc 02 c0       	push   0xc002bce9
c001d324:	e8 6a 54 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001d329:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d32d:	89 d8                	mov    eax,ebx
c001d32f:	83 c4 14             	add    esp,0x14
c001d332:	5b                   	pop    ebx
c001d333:	5e                   	pop    esi
c001d334:	ff e0                	jmp    eax

c001d336 <userModeEntryPoint(void*)>:
c001d336:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001d33b:	48                   	dec    eax
c001d33c:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001d341:	75 01                	jne    c001d344 <userModeEntryPoint(void*)+0xe>
c001d343:	fb                   	sti    
c001d344:	fb                   	sti    
c001d345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d34a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d34d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d353:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d357:	e9 ce 2f fe ff       	jmp    c000032a <goToUsermode>

c001d35c <changeTSS>:
c001d35c:	83 ec 14             	sub    esp,0x14
c001d35f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d364:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d367:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d36c:	c1 e2 15             	shl    edx,0x15
c001d36f:	29 d0                	sub    eax,edx
c001d371:	50                   	push   eax
c001d372:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001d377:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d37d:	05 7c 11 00 00       	add    eax,0x117c
c001d382:	50                   	push   eax
c001d383:	e8 ec 37 ff ff       	call   c0010b74 <TSS::setESP(unsigned long)>
c001d388:	83 c4 1c             	add    esp,0x1c
c001d38b:	c3                   	ret    

c001d38c <switchToThread(ThreadControlBlock*)>:
c001d38c:	57                   	push   edi
c001d38d:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001d392:	56                   	push   esi
c001d393:	85 c0                	test   eax,eax
c001d395:	53                   	push   ebx
c001d396:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d39a:	0f 85 88 00 00 00    	jne    c001d428 <switchToThread(ThreadControlBlock*)+0x9c>
c001d3a0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d3a3:	3c ff                	cmp    al,0xff
c001d3a5:	74 7d                	je     c001d424 <switchToThread(ThreadControlBlock*)+0x98>
c001d3a7:	0f b6 d0             	movzx  edx,al
c001d3aa:	b8 84 03 00 00       	mov    eax,0x384
c001d3af:	29 d0                	sub    eax,edx
c001d3b1:	c1 e0 10             	shl    eax,0x10
c001d3b4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d3b7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d3ba:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c001d3bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d3c5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d3cc:	74 4a                	je     c001d418 <switchToThread(ThreadControlBlock*)+0x8c>
c001d3ce:	0f 31                	rdtsc  
c001d3d0:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c001d3d5:	89 c6                	mov    esi,eax
c001d3d7:	89 d7                	mov    edi,edx
c001d3d9:	2b 35 58 10 03 c0    	sub    esi,DWORD PTR ds:0xc0031058
c001d3df:	89 15 6c 10 03 c0    	mov    DWORD PTR ds:0xc003106c,edx
c001d3e5:	1b 3d 5c 10 03 c0    	sbb    edi,DWORD PTR ds:0xc003105c
c001d3eb:	89 35 60 10 03 c0    	mov    DWORD PTR ds:0xc0031060,esi
c001d3f1:	a3 58 10 03 c0       	mov    ds:0xc0031058,eax
c001d3f6:	89 3d 64 10 03 c0    	mov    DWORD PTR ds:0xc0031064,edi
c001d3fc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d402:	89 15 5c 10 03 c0    	mov    DWORD PTR ds:0xc003105c,edx
c001d408:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d40b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d40e:	01 c6                	add    esi,eax
c001d410:	11 d7                	adc    edi,edx
c001d412:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d415:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d418:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d41c:	5b                   	pop    ebx
c001d41d:	5e                   	pop    esi
c001d41e:	5f                   	pop    edi
c001d41f:	e9 3e 2f fe ff       	jmp    c0000362 <switchToThreadASM>
c001d424:	31 c0                	xor    eax,eax
c001d426:	eb 8f                	jmp    c001d3b7 <switchToThread(ThreadControlBlock*)+0x2b>
c001d428:	5b                   	pop    ebx
c001d429:	c7 05 20 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x1
c001d433:	5e                   	pop    esi
c001d434:	5f                   	pop    edi
c001d435:	c3                   	ret    

c001d436 <Process::addArgs(char**)>:
c001d436:	57                   	push   edi
c001d437:	56                   	push   esi
c001d438:	53                   	push   ebx
c001d439:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d43d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d441:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d44b:	85 ff                	test   edi,edi
c001d44d:	74 3d                	je     c001d48c <Process::addArgs(char**)+0x56>
c001d44f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d451:	85 c0                	test   eax,eax
c001d453:	74 37                	je     c001d48c <Process::addArgs(char**)+0x56>
c001d455:	31 db                	xor    ebx,ebx
c001d457:	83 ec 0c             	sub    esp,0xc
c001d45a:	50                   	push   eax
c001d45b:	e8 0c 33 fe ff       	call   c000076c <strlen>
c001d460:	40                   	inc    eax
c001d461:	89 04 24             	mov    DWORD PTR [esp],eax
c001d464:	e8 30 21 ff ff       	call   c000f599 <malloc>
c001d469:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d470:	5a                   	pop    edx
c001d471:	59                   	pop    ecx
c001d472:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d475:	43                   	inc    ebx
c001d476:	50                   	push   eax
c001d477:	e8 90 33 fe ff       	call   c000080c <strcpy>
c001d47c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d482:	83 c4 10             	add    esp,0x10
c001d485:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d488:	85 c0                	test   eax,eax
c001d48a:	75 cb                	jne    c001d457 <Process::addArgs(char**)+0x21>
c001d48c:	5b                   	pop    ebx
c001d48d:	5e                   	pop    esi
c001d48e:	5f                   	pop    edi
c001d48f:	c3                   	ret    

c001d490 <Process::Process(char const*, Process*, char**)>:
c001d490:	56                   	push   esi
c001d491:	53                   	push   ebx
c001d492:	83 ec 14             	sub    esp,0x14
c001d495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d499:	05 0c 02 00 00       	add    eax,0x20c
c001d49e:	bb 07 00 00 00       	mov    ebx,0x7
c001d4a3:	89 c6                	mov    esi,eax
c001d4a5:	85 db                	test   ebx,ebx
c001d4a7:	78 12                	js     c001d4bb <Process::Process(char const*, Process*, char**)+0x2b>
c001d4a9:	83 ec 0c             	sub    esp,0xc
c001d4ac:	56                   	push   esi
c001d4ad:	e8 94 b6 00 00       	call   c0028b46 <ThreadControlBlock::ThreadControlBlock()>
c001d4b2:	83 c4 10             	add    esp,0x10
c001d4b5:	83 c6 63             	add    esi,0x63
c001d4b8:	4b                   	dec    ebx
c001d4b9:	eb ea                	jmp    c001d4a5 <Process::Process(char const*, Process*, char**)+0x15>
c001d4bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4bf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d4c6:	83 ec 0c             	sub    esp,0xc
c001d4c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4cd:	e8 b6 c8 ff ff       	call   c0019d88 <Krnl::newProcessEnv(Process*)>
c001d4d2:	83 c4 10             	add    esp,0x10
c001d4d5:	89 c2                	mov    edx,eax
c001d4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4db:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d4e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d4ee:	a1 90 d0 02 c0       	mov    eax,ds:0xc002d090
c001d4f3:	8d 50 01             	lea    edx,[eax+0x1]
c001d4f6:	89 15 90 d0 02 c0    	mov    DWORD PTR ds:0xc002d090,edx
c001d4fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d500:	89 02                	mov    DWORD PTR [edx],eax
c001d502:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d50a:	83 ec 0c             	sub    esp,0xc
c001d50d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d511:	e8 83 20 ff ff       	call   c000f599 <malloc>
c001d516:	83 c4 10             	add    esp,0x10
c001d519:	89 c3                	mov    ebx,eax
c001d51b:	83 ec 08             	sub    esp,0x8
c001d51e:	6a 00                	push   0x0
c001d520:	53                   	push   ebx
c001d521:	e8 f6 49 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d526:	83 c4 10             	add    esp,0x10
c001d529:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d52d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d537:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d549:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d553:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d559:	85 c0                	test   eax,eax
c001d55b:	74 42                	je     c001d59f <Process::Process(char const*, Process*, char**)+0x10f>
c001d55d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d561:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d567:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d571:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d57b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d581:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d58b:	05 0c 01 00 00       	add    eax,0x10c
c001d590:	83 ec 08             	sub    esp,0x8
c001d593:	52                   	push   edx
c001d594:	50                   	push   eax
c001d595:	e8 72 32 fe ff       	call   c000080c <strcpy>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	eb 63                	jmp    c001d602 <Process::Process(char const*, Process*, char**)+0x172>
c001d59f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d5a7:	83 ec 0c             	sub    esp,0xc
c001d5aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5ae:	e8 e6 1f ff ff       	call   c000f599 <malloc>
c001d5b3:	83 c4 10             	add    esp,0x10
c001d5b6:	89 c3                	mov    ebx,eax
c001d5b8:	83 ec 08             	sub    esp,0x8
c001d5bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5bf:	53                   	push   ebx
c001d5c0:	e8 c1 32 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d5d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	50                   	push   eax
c001d5e0:	e8 60 2a ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d5e5:	83 c4 10             	add    esp,0x10
c001d5e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5ec:	05 0c 01 00 00       	add    eax,0x10c
c001d5f1:	83 ec 08             	sub    esp,0x8
c001d5f4:	68 08 bd 02 c0       	push   0xc002bd08
c001d5f9:	50                   	push   eax
c001d5fa:	e8 0d 32 fe ff       	call   c000080c <strcpy>
c001d5ff:	83 c4 10             	add    esp,0x10
c001d602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d606:	83 c0 0c             	add    eax,0xc
c001d609:	83 ec 08             	sub    esp,0x8
c001d60c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d610:	50                   	push   eax
c001d611:	e8 f6 31 fe ff       	call   c000080c <strcpy>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	83 ec 08             	sub    esp,0x8
c001d61c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d620:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d624:	e8 0d fe ff ff       	call   c001d436 <Process::addArgs(char**)>
c001d629:	83 c4 10             	add    esp,0x10
c001d62c:	83 ec 08             	sub    esp,0x8
c001d62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d633:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d637:	e8 a1 ed ff ff       	call   c001c3dd <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d63c:	83 c4 10             	add    esp,0x10
c001d63f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d643:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d647:	83 f0 01             	xor    eax,0x1
c001d64a:	88 c2                	mov    dl,al
c001d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d650:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d656:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d65b:	83 ec 08             	sub    esp,0x8
c001d65e:	50                   	push   eax
c001d65f:	68 60 bd 02 c0       	push   0xc002bd60
c001d664:	e8 2a 51 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001d669:	83 c4 10             	add    esp,0x10
c001d66c:	90                   	nop
c001d66d:	83 c4 14             	add    esp,0x14
c001d670:	5b                   	pop    ebx
c001d671:	5e                   	pop    esi
c001d672:	c3                   	ret    
c001d673:	90                   	nop

c001d674 <Process::Process(bool, char const*, Process*, char**)>:
c001d674:	56                   	push   esi
c001d675:	53                   	push   ebx
c001d676:	83 ec 24             	sub    esp,0x24
c001d679:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d67d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d685:	05 0c 02 00 00       	add    eax,0x20c
c001d68a:	bb 07 00 00 00       	mov    ebx,0x7
c001d68f:	89 c6                	mov    esi,eax
c001d691:	85 db                	test   ebx,ebx
c001d693:	78 12                	js     c001d6a7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d695:	83 ec 0c             	sub    esp,0xc
c001d698:	56                   	push   esi
c001d699:	e8 a8 b4 00 00       	call   c0028b46 <ThreadControlBlock::ThreadControlBlock()>
c001d69e:	83 c4 10             	add    esp,0x10
c001d6a1:	83 c6 63             	add    esi,0x63
c001d6a4:	4b                   	dec    ebx
c001d6a5:	eb ea                	jmp    c001d691 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d6a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6ab:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d6b2:	83 ec 0c             	sub    esp,0xc
c001d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6b9:	e8 ca c6 ff ff       	call   c0019d88 <Krnl::newProcessEnv(Process*)>
c001d6be:	83 c4 10             	add    esp,0x10
c001d6c1:	89 c2                	mov    edx,eax
c001d6c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6c7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6d1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6da:	a1 90 d0 02 c0       	mov    eax,ds:0xc002d090
c001d6df:	8d 50 01             	lea    edx,[eax+0x1]
c001d6e2:	89 15 90 d0 02 c0    	mov    DWORD PTR ds:0xc002d090,edx
c001d6e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d6ec:	89 02                	mov    DWORD PTR [edx],eax
c001d6ee:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d6f6:	83 ec 0c             	sub    esp,0xc
c001d6f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6fd:	e8 97 1e ff ff       	call   c000f599 <malloc>
c001d702:	83 c4 10             	add    esp,0x10
c001d705:	89 c3                	mov    ebx,eax
c001d707:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d70c:	83 ec 08             	sub    esp,0x8
c001d70f:	50                   	push   eax
c001d710:	53                   	push   ebx
c001d711:	e8 06 48 ff ff       	call   c0011f1c <VAS::VAS(bool)>
c001d716:	83 c4 10             	add    esp,0x10
c001d719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d71d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d727:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d731:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d735:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d739:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d73f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d743:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d749:	85 c0                	test   eax,eax
c001d74b:	74 42                	je     c001d78f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d74d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d751:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d757:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d75d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d761:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d76b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d771:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d77b:	05 0c 01 00 00       	add    eax,0x10c
c001d780:	83 ec 08             	sub    esp,0x8
c001d783:	52                   	push   edx
c001d784:	50                   	push   eax
c001d785:	e8 82 30 fe ff       	call   c000080c <strcpy>
c001d78a:	83 c4 10             	add    esp,0x10
c001d78d:	eb 63                	jmp    c001d7f2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d78f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d797:	83 ec 0c             	sub    esp,0xc
c001d79a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d79e:	e8 f6 1d ff ff       	call   c000f599 <malloc>
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	89 c3                	mov    ebx,eax
c001d7a8:	83 ec 08             	sub    esp,0x8
c001d7ab:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d7af:	53                   	push   ebx
c001d7b0:	e8 d1 30 ff ff       	call   c0010886 <VgaText::VgaText(char const*)>
c001d7b5:	83 c4 10             	add    esp,0x10
c001d7b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7cc:	83 ec 0c             	sub    esp,0xc
c001d7cf:	50                   	push   eax
c001d7d0:	e8 70 28 ff ff       	call   c0010045 <addToTerminalCycle(VgaText*)>
c001d7d5:	83 c4 10             	add    esp,0x10
c001d7d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7dc:	05 0c 01 00 00       	add    eax,0x10c
c001d7e1:	83 ec 08             	sub    esp,0x8
c001d7e4:	68 08 bd 02 c0       	push   0xc002bd08
c001d7e9:	50                   	push   eax
c001d7ea:	e8 1d 30 fe ff       	call   c000080c <strcpy>
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7f6:	83 c0 0c             	add    eax,0xc
c001d7f9:	83 ec 08             	sub    esp,0x8
c001d7fc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d800:	50                   	push   eax
c001d801:	e8 06 30 fe ff       	call   c000080c <strcpy>
c001d806:	83 c4 10             	add    esp,0x10
c001d809:	83 ec 08             	sub    esp,0x8
c001d80c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d810:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d814:	e8 1d fc ff ff       	call   c001d436 <Process::addArgs(char**)>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	90                   	nop
c001d81d:	83 c4 24             	add    esp,0x24
c001d820:	5b                   	pop    ebx
c001d821:	5e                   	pop    esi
c001d822:	c3                   	ret    

c001d823 <taskStartupFunction>:
c001d823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d828:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d82b:	c3                   	ret    

c001d82c <Semaphore::Semaphore(int)>:
c001d82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d830:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d834:	89 10                	mov    DWORD PTR [eax],edx
c001d836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d83a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d845:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d850:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d857:	90                   	nop
c001d858:	c3                   	ret    
c001d859:	90                   	nop

c001d85a <Mutex::Mutex()>:
c001d85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d85e:	6a 01                	push   0x1
c001d860:	50                   	push   eax
c001d861:	e8 c6 ff ff ff       	call   c001d82c <Semaphore::Semaphore(int)>
c001d866:	83 c4 08             	add    esp,0x8
c001d869:	90                   	nop
c001d86a:	c3                   	ret    
c001d86b:	90                   	nop

c001d86c <Process::createThread(void (*)(void*), void*, int)>:
c001d86c:	55                   	push   ebp
c001d86d:	31 c9                	xor    ecx,ecx
c001d86f:	57                   	push   edi
c001d870:	56                   	push   esi
c001d871:	53                   	push   ebx
c001d872:	83 ec 1c             	sub    esp,0x1c
c001d875:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d879:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d880:	89 f2                	mov    edx,esi
c001d882:	0f b7 c2             	movzx  eax,dx
c001d885:	83 e2 01             	and    edx,0x1
c001d888:	74 16                	je     c001d8a0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d88a:	d1 f8                	sar    eax,1
c001d88c:	41                   	inc    ecx
c001d88d:	89 c2                	mov    edx,eax
c001d88f:	83 f9 10             	cmp    ecx,0x10
c001d892:	75 ee                	jne    c001d882 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d894:	83 c4 1c             	add    esp,0x1c
c001d897:	31 db                	xor    ebx,ebx
c001d899:	89 d8                	mov    eax,ebx
c001d89b:	5b                   	pop    ebx
c001d89c:	5e                   	pop    esi
c001d89d:	5f                   	pop    edi
c001d89e:	5d                   	pop    ebp
c001d89f:	c3                   	ret    
c001d8a0:	b8 01 00 00 00       	mov    eax,0x1
c001d8a5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d8a8:	d3 e0                	shl    eax,cl
c001d8aa:	09 c6                	or     esi,eax
c001d8ac:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d8af:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d8b6:	89 c6                	mov    esi,eax
c001d8b8:	c1 e6 05             	shl    esi,0x5
c001d8bb:	01 f0                	add    eax,esi
c001d8bd:	01 d8                	add    eax,ebx
c001d8bf:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d8c6:	75 0a                	jne    c001d8d2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d8c8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d8d2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d8d8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d8dc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d8df:	01 ca                	add    edx,ecx
c001d8e1:	83 ec 08             	sub    esp,0x8
c001d8e4:	89 d0                	mov    eax,edx
c001d8e6:	c1 e0 05             	shl    eax,0x5
c001d8e9:	01 d0                	add    eax,edx
c001d8eb:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d8ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d8f3:	01 d8                	add    eax,ebx
c001d8f5:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d8fb:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d901:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d907:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d90d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d913:	89 cd                	mov    ebp,ecx
c001d915:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d919:	f7 dd                	neg    ebp
c001d91b:	c1 e5 15             	shl    ebp,0x15
c001d91e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d924:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d92a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d934:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d93a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d944:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d94e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d952:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d959:	53                   	push   ebx
c001d95a:	68 44 10 03 c0       	push   0xc0031044
c001d95f:	e8 9c af 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d964:	89 d8                	mov    eax,ebx
c001d966:	83 c4 10             	add    esp,0x10
c001d969:	83 c4 1c             	add    esp,0x1c
c001d96c:	5b                   	pop    ebx
c001d96d:	5e                   	pop    esi
c001d96e:	5f                   	pop    edi
c001d96f:	5d                   	pop    ebp
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <Process::createUserThread()>:
c001d972:	83 ec 0c             	sub    esp,0xc
c001d975:	68 80 00 00 00       	push   0x80
c001d97a:	6a 00                	push   0x0
c001d97c:	68 36 d3 01 c0       	push   0xc001d336
c001d981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d985:	e8 e2 fe ff ff       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c001d98a:	83 c4 1c             	add    esp,0x1c
c001d98d:	c3                   	ret    

c001d98e <setupMultitasking(void (*)())>:
c001d98e:	56                   	push   esi
c001d98f:	53                   	push   ebx
c001d990:	51                   	push   ecx
c001d991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d995:	eb 10                	jmp    c001d9a7 <setupMultitasking(void (*)())+0x19>
c001d997:	83 ec 0c             	sub    esp,0xc
c001d99a:	68 44 10 03 c0       	push   0xc0031044
c001d99f:	e8 ae ae 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9a4:	83 c4 10             	add    esp,0x10
c001d9a7:	83 ec 0c             	sub    esp,0xc
c001d9aa:	68 44 10 03 c0       	push   0xc0031044
c001d9af:	e8 7a ae 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9b4:	83 c4 10             	add    esp,0x10
c001d9b7:	84 c0                	test   al,al
c001d9b9:	74 dc                	je     c001d997 <setupMultitasking(void (*)())+0x9>
c001d9bb:	83 ec 0c             	sub    esp,0xc
c001d9be:	68 3f 07 00 00       	push   0x73f
c001d9c3:	e8 d1 1b ff ff       	call   c000f599 <malloc>
c001d9c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d9cf:	89 c3                	mov    ebx,eax
c001d9d1:	6a 00                	push   0x0
c001d9d3:	68 0c bd 02 c0       	push   0xc002bd0c
c001d9d8:	6a 01                	push   0x1
c001d9da:	50                   	push   eax
c001d9db:	e8 94 fc ff ff       	call   c001d674 <Process::Process(bool, char const*, Process*, char**)>
c001d9e0:	83 c4 14             	add    esp,0x14
c001d9e3:	89 1d 50 10 03 c0    	mov    DWORD PTR ds:0xc0031050,ebx
c001d9e9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d9ef:	e8 5f 29 ff ff       	call   c0010353 <setActiveTerminal(VgaText*)>
c001d9f4:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d9fc:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001da06:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001da0c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001da0f:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001da19:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001da1f:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001da25:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001da2f:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001da39:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001da43:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001da49:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001da53:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001da59:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001da63:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001da69:	58                   	pop    eax
c001da6a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001da70:	5a                   	pop    edx
c001da71:	68 08 bd 02 c0       	push   0xc002bd08
c001da76:	50                   	push   eax
c001da77:	e8 90 2d fe ff       	call   c000080c <strcpy>
c001da7c:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001da83:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da87:	83 c4 14             	add    esp,0x14
c001da8a:	5b                   	pop    ebx
c001da8b:	5e                   	pop    esi
c001da8c:	e9 c3 28 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001da91 <schedule()>:
c001da91:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001da96:	85 c0                	test   eax,eax
c001da98:	74 0b                	je     c001daa5 <schedule()+0x14>
c001da9a:	c7 05 20 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x1
c001daa4:	c3                   	ret    
c001daa5:	53                   	push   ebx
c001daa6:	83 ec 14             	sub    esp,0x14
c001daa9:	68 44 10 03 c0       	push   0xc0031044
c001daae:	e8 7b ad 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dab3:	83 c4 10             	add    esp,0x10
c001dab6:	84 c0                	test   al,al
c001dab8:	75 38                	jne    c001daf2 <schedule()+0x61>
c001daba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dabf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dac2:	4a                   	dec    edx
c001dac3:	74 32                	je     c001daf7 <schedule()+0x66>
c001dac5:	83 ec 0c             	sub    esp,0xc
c001dac8:	68 44 10 03 c0       	push   0xc0031044
c001dacd:	e8 78 ad 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dad2:	c7 04 24 44 10 03 c0 	mov    DWORD PTR [esp],0xc0031044
c001dad9:	89 c3                	mov    ebx,eax
c001dadb:	e8 72 ad 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dae0:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dae7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001daea:	e8 9d f8 ff ff       	call   c001d38c <switchToThread(ThreadControlBlock*)>
c001daef:	83 c4 10             	add    esp,0x10
c001daf2:	83 c4 08             	add    esp,0x8
c001daf5:	5b                   	pop    ebx
c001daf6:	c3                   	ret    
c001daf7:	83 ec 08             	sub    esp,0x8
c001dafa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001db01:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001db07:	68 44 10 03 c0       	push   0xc0031044
c001db0c:	e8 ef ad 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001db11:	83 c4 10             	add    esp,0x10
c001db14:	eb af                	jmp    c001dac5 <schedule()+0x34>

c001db16 <Semaphore::tryAcquire()>:
c001db16:	53                   	push   ebx
c001db17:	83 ec 08             	sub    esp,0x8
c001db1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001db1e:	fa                   	cli    
c001db1f:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001db24:	8d 50 01             	lea    edx,[eax+0x1]
c001db27:	89 15 28 10 03 c0    	mov    DWORD PTR ds:0xc0031028,edx
c001db2d:	8b 15 24 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031024
c001db33:	8d 5a 01             	lea    ebx,[edx+0x1]
c001db36:	89 1d 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,ebx
c001db3c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001db3f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001db41:	7c 2a                	jl     c001db6d <Semaphore::tryAcquire()+0x57>
c001db43:	89 15 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,edx
c001db49:	85 d2                	test   edx,edx
c001db4b:	75 0a                	jne    c001db57 <Semaphore::tryAcquire()+0x41>
c001db4d:	8b 15 20 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031020
c001db53:	85 d2                	test   edx,edx
c001db55:	75 5b                	jne    c001dbb2 <Semaphore::tryAcquire()+0x9c>
c001db57:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001db5c:	85 c0                	test   eax,eax
c001db5e:	74 07                	je     c001db67 <Semaphore::tryAcquire()+0x51>
c001db60:	31 c0                	xor    eax,eax
c001db62:	83 c4 08             	add    esp,0x8
c001db65:	5b                   	pop    ebx
c001db66:	c3                   	ret    
c001db67:	fb                   	sti    
c001db68:	83 c4 08             	add    esp,0x8
c001db6b:	5b                   	pop    ebx
c001db6c:	c3                   	ret    
c001db6d:	43                   	inc    ebx
c001db6e:	89 15 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,edx
c001db74:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001db77:	85 d2                	test   edx,edx
c001db79:	75 1f                	jne    c001db9a <Semaphore::tryAcquire()+0x84>
c001db7b:	8b 0d 20 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031020
c001db81:	85 c9                	test   ecx,ecx
c001db83:	74 15                	je     c001db9a <Semaphore::tryAcquire()+0x84>
c001db85:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001db8f:	e8 fd fe ff ff       	call   c001da91 <schedule()>
c001db94:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001db99:	48                   	dec    eax
c001db9a:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001db9f:	85 c0                	test   eax,eax
c001dba1:	75 08                	jne    c001dbab <Semaphore::tryAcquire()+0x95>
c001dba3:	fb                   	sti    
c001dba4:	b0 01                	mov    al,0x1
c001dba6:	83 c4 08             	add    esp,0x8
c001dba9:	5b                   	pop    ebx
c001dbaa:	c3                   	ret    
c001dbab:	b0 01                	mov    al,0x1
c001dbad:	83 c4 08             	add    esp,0x8
c001dbb0:	5b                   	pop    ebx
c001dbb1:	c3                   	ret    
c001dbb2:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001dbbc:	e8 d0 fe ff ff       	call   c001da91 <schedule()>
c001dbc1:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001dbc6:	48                   	dec    eax
c001dbc7:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dbcc:	85 c0                	test   eax,eax
c001dbce:	75 90                	jne    c001db60 <Semaphore::tryAcquire()+0x4a>
c001dbd0:	eb 95                	jmp    c001db67 <Semaphore::tryAcquire()+0x51>

c001dbd2 <Semaphore::assertLocked(char const*)>:
c001dbd2:	83 ec 0c             	sub    esp,0xc
c001dbd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dbd9:	fa                   	cli    
c001dbda:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001dbe0:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001dbe5:	8d 48 01             	lea    ecx,[eax+0x1]
c001dbe8:	89 0d 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,ecx
c001dbee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001dbf0:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001dbf3:	7c 24                	jl     c001dc19 <Semaphore::assertLocked(char const*)+0x47>
c001dbf5:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001dbfa:	85 c0                	test   eax,eax
c001dbfc:	75 09                	jne    c001dc07 <Semaphore::assertLocked(char const*)+0x35>
c001dbfe:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001dc03:	85 c0                	test   eax,eax
c001dc05:	75 29                	jne    c001dc30 <Semaphore::assertLocked(char const*)+0x5e>
c001dc07:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001dc0c:	48                   	dec    eax
c001dc0d:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dc12:	75 01                	jne    c001dc15 <Semaphore::assertLocked(char const*)+0x43>
c001dc14:	fb                   	sti    
c001dc15:	83 c4 0c             	add    esp,0xc
c001dc18:	c3                   	ret    
c001dc19:	83 ec 0c             	sub    esp,0xc
c001dc1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001dc20:	e8 da c2 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001dc25:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001dc2a:	83 c4 10             	add    esp,0x10
c001dc2d:	48                   	dec    eax
c001dc2e:	eb c5                	jmp    c001dbf5 <Semaphore::assertLocked(char const*)+0x23>
c001dc30:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001dc3a:	e8 52 fe ff ff       	call   c001da91 <schedule()>
c001dc3f:	eb c6                	jmp    c001dc07 <Semaphore::assertLocked(char const*)+0x35>

c001dc41 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc4d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc50:	e8 3c fe ff ff       	call   c001da91 <schedule()>
c001dc55:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001dc5a:	48                   	dec    eax
c001dc5b:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dc60:	75 01                	jne    c001dc63 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001dc62:	fb                   	sti    
c001dc63:	83 c4 0c             	add    esp,0xc
c001dc66:	c3                   	ret    

c001dc67 <blockTask(TaskState)>:
c001dc67:	83 ec 0c             	sub    esp,0xc
c001dc6a:	fa                   	cli    
c001dc6b:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001dc71:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc7a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001dc7d:	e8 0f fe ff ff       	call   c001da91 <schedule()>
c001dc82:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001dc87:	48                   	dec    eax
c001dc88:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dc8d:	75 01                	jne    c001dc90 <blockTask(TaskState)+0x29>
c001dc8f:	fb                   	sti    
c001dc90:	83 c4 0c             	add    esp,0xc
c001dc93:	c3                   	ret    

c001dc94 <waitTask(int, int*, int)>:
c001dc94:	83 ec 18             	sub    esp,0x18
c001dc97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dca0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dca3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcac:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dcaf:	6a 07                	push   0x7
c001dcb1:	e8 b1 ff ff ff       	call   c001dc67 <blockTask(TaskState)>
c001dcb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcbb:	83 c4 10             	add    esp,0x10
c001dcbe:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dcc1:	85 d2                	test   edx,edx
c001dcc3:	74 0a                	je     c001dccf <waitTask(int, int*, int)+0x3b>
c001dcc5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dcc8:	89 02                	mov    DWORD PTR [edx],eax
c001dcca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dccf:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dcd2:	83 c4 0c             	add    esp,0xc
c001dcd5:	c3                   	ret    

c001dcd6 <nanoSleepUntil(unsigned long long)>:
c001dcd6:	83 ec 0c             	sub    esp,0xc
c001dcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dce1:	3b 05 70 e1 02 c0    	cmp    eax,DWORD PTR ds:0xc002e170
c001dce7:	89 d1                	mov    ecx,edx
c001dce9:	1b 0d 74 e1 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e174
c001dcef:	73 04                	jae    c001dcf5 <nanoSleepUntil(unsigned long long)+0x1f>
c001dcf1:	83 c4 0c             	add    esp,0xc
c001dcf4:	c3                   	ret    
c001dcf5:	fa                   	cli    
c001dcf6:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001dcfc:	83 ec 08             	sub    esp,0x8
c001dcff:	ff 05 24 10 03 c0    	inc    DWORD PTR ds:0xc0031024
c001dd05:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd0b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dd0e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dd11:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dd17:	68 38 10 03 c0       	push   0xc0031038
c001dd1c:	e8 df ab 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd21:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dd28:	e8 3a ff ff ff       	call   c001dc67 <blockTask(TaskState)>
c001dd2d:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001dd32:	83 c4 10             	add    esp,0x10
c001dd35:	48                   	dec    eax
c001dd36:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001dd3b:	85 c0                	test   eax,eax
c001dd3d:	75 09                	jne    c001dd48 <nanoSleepUntil(unsigned long long)+0x72>
c001dd3f:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001dd44:	85 c0                	test   eax,eax
c001dd46:	75 12                	jne    c001dd5a <nanoSleepUntil(unsigned long long)+0x84>
c001dd48:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001dd4d:	48                   	dec    eax
c001dd4e:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dd53:	75 9c                	jne    c001dcf1 <nanoSleepUntil(unsigned long long)+0x1b>
c001dd55:	fb                   	sti    
c001dd56:	83 c4 0c             	add    esp,0xc
c001dd59:	c3                   	ret    
c001dd5a:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001dd64:	e8 28 fd ff ff       	call   c001da91 <schedule()>
c001dd69:	eb dd                	jmp    c001dd48 <nanoSleepUntil(unsigned long long)+0x72>

c001dd6b <nanoSleep(unsigned long long)>:
c001dd6b:	a1 70 e1 02 c0       	mov    eax,ds:0xc002e170
c001dd70:	8b 15 74 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e174
c001dd76:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dd7a:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dd7e:	e9 53 ff ff ff       	jmp    c001dcd6 <nanoSleepUntil(unsigned long long)>

c001dd83 <sleep(unsigned long long)>:
c001dd83:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dd8b:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dd90:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dd94:	01 ca                	add    edx,ecx
c001dd96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd9a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd9e:	eb cb                	jmp    c001dd6b <nanoSleep(unsigned long long)>

c001dda0 <Semaphore::acquire()>:
c001dda0:	83 ec 0c             	sub    esp,0xc
c001dda3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dda7:	fa                   	cli    
c001dda8:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001ddad:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001ddb3:	8d 48 01             	lea    ecx,[eax+0x1]
c001ddb6:	89 0d 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,ecx
c001ddbc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ddbf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ddc1:	7d 28                	jge    c001ddeb <Semaphore::acquire()+0x4b>
c001ddc3:	41                   	inc    ecx
c001ddc4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001ddc7:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001ddcc:	85 c0                	test   eax,eax
c001ddce:	75 09                	jne    c001ddd9 <Semaphore::acquire()+0x39>
c001ddd0:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001ddd5:	85 c0                	test   eax,eax
c001ddd7:	75 4e                	jne    c001de27 <Semaphore::acquire()+0x87>
c001ddd9:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001ddde:	48                   	dec    eax
c001dddf:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001dde4:	75 01                	jne    c001dde7 <Semaphore::acquire()+0x47>
c001dde6:	fb                   	sti    
c001dde7:	83 c4 0c             	add    esp,0xc
c001ddea:	c3                   	ret    
c001ddeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ddf0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ddf7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ddfa:	85 c9                	test   ecx,ecx
c001ddfc:	74 3a                	je     c001de38 <Semaphore::acquire()+0x98>
c001ddfe:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001de01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001de07:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001de0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de0f:	83 ec 0c             	sub    esp,0xc
c001de12:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001de15:	6a 05                	push   0x5
c001de17:	e8 4b fe ff ff       	call   c001dc67 <blockTask(TaskState)>
c001de1c:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	48                   	dec    eax
c001de25:	eb a0                	jmp    c001ddc7 <Semaphore::acquire()+0x27>
c001de27:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001de31:	e8 5b fc ff ff       	call   c001da91 <schedule()>
c001de36:	eb a1                	jmp    c001ddd9 <Semaphore::acquire()+0x39>
c001de38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001de40:	eb c8                	jmp    c001de0a <Semaphore::acquire()+0x6a>

c001de42 <taskReturned>:
c001de42:	83 ec 18             	sub    esp,0x18
c001de45:	68 88 bd 02 c0       	push   0xc002bd88
c001de4a:	e8 b0 c0 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001de4f:	83 c4 10             	add    esp,0x10
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	6a 02                	push   0x2
c001de57:	e8 0b fe ff ff       	call   c001dc67 <blockTask(TaskState)>
c001de5c:	fa                   	cli    
c001de5d:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001de63:	e8 29 fc ff ff       	call   c001da91 <schedule()>
c001de68:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001de6d:	83 c4 10             	add    esp,0x10
c001de70:	48                   	dec    eax
c001de71:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001de76:	85 c0                	test   eax,eax
c001de78:	75 d8                	jne    c001de52 <taskReturned+0x10>
c001de7a:	fb                   	sti    
c001de7b:	eb d5                	jmp    c001de52 <taskReturned+0x10>

c001de7d <Thr::processFromPID(int)>:
c001de7d:	57                   	push   edi
c001de7e:	56                   	push   esi
c001de7f:	53                   	push   ebx
c001de80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de84:	fa                   	cli    
c001de85:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001de8b:	83 ec 0c             	sub    esp,0xc
c001de8e:	68 44 10 03 c0       	push   0xc0031044
c001de93:	e8 b2 a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de98:	83 c4 10             	add    esp,0x10
c001de9b:	89 c7                	mov    edi,eax
c001de9d:	eb 14                	jmp    c001deb3 <Thr::processFromPID(int)+0x36>
c001de9f:	83 ec 0c             	sub    esp,0xc
c001dea2:	68 44 10 03 c0       	push   0xc0031044
c001dea7:	e8 9e a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001deac:	83 c4 10             	add    esp,0x10
c001deaf:	39 f8                	cmp    eax,edi
c001deb1:	74 49                	je     c001defc <Thr::processFromPID(int)+0x7f>
c001deb3:	83 ec 0c             	sub    esp,0xc
c001deb6:	68 44 10 03 c0       	push   0xc0031044
c001debb:	e8 8a a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dec0:	c7 04 24 44 10 03 c0 	mov    DWORD PTR [esp],0xc0031044
c001dec7:	89 c3                	mov    ebx,eax
c001dec9:	e8 84 a9 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dece:	58                   	pop    eax
c001decf:	5a                   	pop    edx
c001ded0:	53                   	push   ebx
c001ded1:	68 44 10 03 c0       	push   0xc0031044
c001ded6:	e8 25 aa 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dedb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dede:	83 c4 10             	add    esp,0x10
c001dee1:	39 30                	cmp    DWORD PTR [eax],esi
c001dee3:	75 ba                	jne    c001de9f <Thr::processFromPID(int)+0x22>
c001dee5:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001deea:	48                   	dec    eax
c001deeb:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001def0:	74 07                	je     c001def9 <Thr::processFromPID(int)+0x7c>
c001def2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001def5:	5b                   	pop    ebx
c001def6:	5e                   	pop    esi
c001def7:	5f                   	pop    edi
c001def8:	c3                   	ret    
c001def9:	fb                   	sti    
c001defa:	eb f6                	jmp    c001def2 <Thr::processFromPID(int)+0x75>
c001defc:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001df01:	48                   	dec    eax
c001df02:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001df07:	75 05                	jne    c001df0e <Thr::processFromPID(int)+0x91>
c001df09:	fb                   	sti    
c001df0a:	5b                   	pop    ebx
c001df0b:	5e                   	pop    esi
c001df0c:	5f                   	pop    edi
c001df0d:	c3                   	ret    
c001df0e:	5b                   	pop    ebx
c001df0f:	31 c0                	xor    eax,eax
c001df11:	5e                   	pop    esi
c001df12:	5f                   	pop    edi
c001df13:	c3                   	ret    

c001df14 <unblockTask(ThreadControlBlock*)>:
c001df14:	53                   	push   ebx
c001df15:	83 ec 08             	sub    esp,0x8
c001df18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df1c:	fa                   	cli    
c001df1d:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001df23:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001df26:	85 c0                	test   eax,eax
c001df28:	74 5a                	je     c001df84 <unblockTask(ThreadControlBlock*)+0x70>
c001df2a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001df2d:	48                   	dec    eax
c001df2e:	74 31                	je     c001df61 <unblockTask(ThreadControlBlock*)+0x4d>
c001df30:	83 ec 0c             	sub    esp,0xc
c001df33:	68 44 10 03 c0       	push   0xc0031044
c001df38:	e8 0d a9 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df3d:	83 c4 10             	add    esp,0x10
c001df40:	85 c0                	test   eax,eax
c001df42:	75 17                	jne    c001df5b <unblockTask(ThreadControlBlock*)+0x47>
c001df44:	eb 50                	jmp    c001df96 <unblockTask(ThreadControlBlock*)+0x82>
c001df46:	83 ec 08             	sub    esp,0x8
c001df49:	50                   	push   eax
c001df4a:	68 44 10 03 c0       	push   0xc0031044
c001df4f:	e8 7e ac 00 00       	call   c0028bd2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001df54:	83 c4 10             	add    esp,0x10
c001df57:	85 c0                	test   eax,eax
c001df59:	74 3b                	je     c001df96 <unblockTask(ThreadControlBlock*)+0x82>
c001df5b:	39 c3                	cmp    ebx,eax
c001df5d:	75 e7                	jne    c001df46 <unblockTask(ThreadControlBlock*)+0x32>
c001df5f:	eb 10                	jmp    c001df71 <unblockTask(ThreadControlBlock*)+0x5d>
c001df61:	83 ec 0c             	sub    esp,0xc
c001df64:	68 2a bd 02 c0       	push   0xc002bd2a
c001df69:	e8 25 48 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001df6e:	83 c4 10             	add    esp,0x10
c001df71:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001df76:	48                   	dec    eax
c001df77:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001df7c:	75 01                	jne    c001df7f <unblockTask(ThreadControlBlock*)+0x6b>
c001df7e:	fb                   	sti    
c001df7f:	83 c4 08             	add    esp,0x8
c001df82:	5b                   	pop    ebx
c001df83:	c3                   	ret    
c001df84:	83 ec 0c             	sub    esp,0xc
c001df87:	68 13 bd 02 c0       	push   0xc002bd13
c001df8c:	e8 02 48 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001df91:	83 c4 10             	add    esp,0x10
c001df94:	eb db                	jmp    c001df71 <unblockTask(ThreadControlBlock*)+0x5d>
c001df96:	83 ec 08             	sub    esp,0x8
c001df99:	53                   	push   ebx
c001df9a:	68 44 10 03 c0       	push   0xc0031044
c001df9f:	e8 5c a9 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfa4:	83 c4 10             	add    esp,0x10
c001dfa7:	eb c8                	jmp    c001df71 <unblockTask(ThreadControlBlock*)+0x5d>

c001dfa9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dfa9:	55                   	push   ebp
c001dfaa:	57                   	push   edi
c001dfab:	56                   	push   esi
c001dfac:	53                   	push   ebx
c001dfad:	83 ec 1c             	sub    esp,0x1c
c001dfb0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfb4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfb7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dfbd:	85 ff                	test   edi,edi
c001dfbf:	7e 20                	jle    c001dfe1 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dfc1:	31 f6                	xor    esi,esi
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dfcd:	46                   	inc    esi
c001dfce:	e8 d6 15 ff ff       	call   c000f5a9 <free>
c001dfd3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dfdf:	7f e2                	jg     c001dfc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dfe1:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dfeb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dff0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dff3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dff6:	d3 c0                	rol    eax,cl
c001dff8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dfff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e002:	89 f7                	mov    edi,esi
c001e004:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e00c:	0f 85 64 01 00 00    	jne    c001e176 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e012:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e018:	85 ed                	test   ebp,ebp
c001e01a:	74 1b                	je     c001e037 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e01c:	83 ec 0c             	sub    esp,0xc
c001e01f:	55                   	push   ebp
c001e020:	e8 7f bc ff ff       	call   c0019ca4 <EnvVarContainer::~EnvVarContainer()>
c001e025:	59                   	pop    ecx
c001e026:	5e                   	pop    esi
c001e027:	6a 0c                	push   0xc
c001e029:	55                   	push   ebp
c001e02a:	e8 8c 46 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001e02f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	89 f7                	mov    edi,esi
c001e037:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e03d:	85 c0                	test   eax,eax
c001e03f:	0f 84 aa 00 00 00    	je     c001e0ef <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e045:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e048:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e04c:	31 c9                	xor    ecx,ecx
c001e04e:	eb 10                	jmp    c001e060 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e050:	41                   	inc    ecx
c001e051:	83 f9 10             	cmp    ecx,0x10
c001e054:	0f 84 95 00 00 00    	je     c001e0ef <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e05a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e060:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e067:	d3 fa                	sar    edx,cl
c001e069:	83 e2 01             	and    edx,0x1
c001e06c:	74 e2                	je     c001e050 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e06e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e071:	01 ca                	add    edx,ecx
c001e073:	89 d5                	mov    ebp,edx
c001e075:	c1 e5 05             	shl    ebp,0x5
c001e078:	01 ea                	add    edx,ebp
c001e07a:	01 d0                	add    eax,edx
c001e07c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e082:	83 fd 07             	cmp    ebp,0x7
c001e085:	75 c9                	jne    c001e050 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e087:	05 40 02 00 00       	add    eax,0x240
c001e08c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e08f:	83 fd ff             	cmp    ebp,0xffffffff
c001e092:	0f 8c e6 00 00 00    	jl     c001e17e <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001e098:	0f 84 97 01 00 00    	je     c001e235 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001e09e:	85 ed                	test   ebp,ebp
c001e0a0:	0f 84 7e 01 00 00    	je     c001e224 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001e0a6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e0a8:	75 a6                	jne    c001e050 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0aa:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e0b0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e0b4:	01 d0                	add    eax,edx
c001e0b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e0ba:	83 ec 0c             	sub    esp,0xc
c001e0bd:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e0c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0c6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e0cc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e0d3:	50                   	push   eax
c001e0d4:	e8 3b fe ff ff       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001e0d9:	83 c4 10             	add    esp,0x10
c001e0dc:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0e3:	89 f7                	mov    edi,esi
c001e0e5:	41                   	inc    ecx
c001e0e6:	83 f9 10             	cmp    ecx,0x10
c001e0e9:	0f 85 6b ff ff ff    	jne    c001e05a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e0ef:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e0f5:	85 c0                	test   eax,eax
c001e0f7:	74 5d                	je     c001e156 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e0f9:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e0ff:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e105:	74 4f                	je     c001e156 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e107:	83 ec 0c             	sub    esp,0xc
c001e10a:	68 44 10 03 c0       	push   0xc0031044
c001e10f:	e8 36 a7 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e114:	c7 04 24 44 10 03 c0 	mov    DWORD PTR [esp],0xc0031044
c001e11b:	89 c7                	mov    edi,eax
c001e11d:	e8 0c a7 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	84 c0                	test   al,al
c001e127:	0f 84 c2 00 00 00    	je     c001e1ef <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e12d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e130:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e136:	85 d2                	test   edx,edx
c001e138:	74 0f                	je     c001e149 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e13a:	83 ec 0c             	sub    esp,0xc
c001e13d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e13f:	52                   	push   edx
c001e140:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e143:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e146:	83 c4 10             	add    esp,0x10
c001e149:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e153:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e156:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e15c:	85 db                	test   ebx,ebx
c001e15e:	74 16                	je     c001e176 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	53                   	push   ebx
c001e164:	e8 8d 37 ff ff       	call   c00118f6 <VAS::~VAS()>
c001e169:	58                   	pop    eax
c001e16a:	5a                   	pop    edx
c001e16b:	6a 14                	push   0x14
c001e16d:	53                   	push   ebx
c001e16e:	e8 48 45 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001e173:	83 c4 10             	add    esp,0x10
c001e176:	83 c4 1c             	add    esp,0x1c
c001e179:	5b                   	pop    ebx
c001e17a:	5e                   	pop    esi
c001e17b:	5f                   	pop    edi
c001e17c:	5d                   	pop    ebp
c001e17d:	c3                   	ret    
c001e17e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e182:	83 ec 0c             	sub    esp,0xc
c001e185:	68 bc bd 02 c0       	push   0xc002bdbc
c001e18a:	e8 70 bd ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001e18f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e192:	83 c4 10             	add    esp,0x10
c001e195:	89 f7                	mov    edi,esi
c001e197:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e19b:	e9 b0 fe ff ff       	jmp    c001e050 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1a6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e1ac:	75 1c                	jne    c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	68 24 be 02 c0       	push   0xc002be24
c001e1b6:	e8 d8 45 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001e1bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e1c2:	e8 a0 fa ff ff       	call   c001dc67 <blockTask(TaskState)>
c001e1c7:	83 c4 10             	add    esp,0x10
c001e1ca:	83 ec 08             	sub    esp,0x8
c001e1cd:	56                   	push   esi
c001e1ce:	68 44 10 03 c0       	push   0xc0031044
c001e1d3:	e8 28 a7 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1d8:	c7 04 24 44 10 03 c0 	mov    DWORD PTR [esp],0xc0031044
c001e1df:	e8 66 a6 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1e4:	83 c4 10             	add    esp,0x10
c001e1e7:	39 f8                	cmp    eax,edi
c001e1e9:	0f 84 3e ff ff ff    	je     c001e12d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e1ef:	83 ec 0c             	sub    esp,0xc
c001e1f2:	68 44 10 03 c0       	push   0xc0031044
c001e1f7:	e8 4e a6 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1fc:	c7 04 24 44 10 03 c0 	mov    DWORD PTR [esp],0xc0031044
c001e203:	89 c6                	mov    esi,eax
c001e205:	e8 48 a6 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e20a:	83 c4 10             	add    esp,0x10
c001e20d:	39 f3                	cmp    ebx,esi
c001e20f:	74 b9                	je     c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e211:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e214:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e217:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e21d:	75 ab                	jne    c001e1ca <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e21f:	e9 7c ff ff ff       	jmp    c001e1a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e224:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e228:	83 ec 0c             	sub    esp,0xc
c001e22b:	68 f0 bd 02 c0       	push   0xc002bdf0
c001e230:	e9 55 ff ff ff       	jmp    c001e18a <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e235:	8b 36                	mov    esi,DWORD PTR [esi]
c001e237:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e23b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e23e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e241:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e247:	01 d7                	add    edi,edx
c001e249:	89 f8                	mov    eax,edi
c001e24b:	e9 66 fe ff ff       	jmp    c001e0b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e250 <cleanerTaskFunction(void*)>:
c001e250:	53                   	push   ebx
c001e251:	83 ec 08             	sub    esp,0x8
c001e254:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e259:	48                   	dec    eax
c001e25a:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e25f:	75 01                	jne    c001e262 <cleanerTaskFunction(void*)+0x12>
c001e261:	fb                   	sti    
c001e262:	fa                   	cli    
c001e263:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e268:	80 3d 0c 10 03 c0 00 	cmp    BYTE PTR ds:0xc003100c,0x0
c001e26f:	8d 50 01             	lea    edx,[eax+0x1]
c001e272:	89 15 28 10 03 c0    	mov    DWORD PTR ds:0xc0031028,edx
c001e278:	0f 84 a1 00 00 00    	je     c001e31f <cleanerTaskFunction(void*)+0xcf>
c001e27e:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e283:	85 c0                	test   eax,eax
c001e285:	75 01                	jne    c001e288 <cleanerTaskFunction(void*)+0x38>
c001e287:	fb                   	sti    
c001e288:	c6 05 0c 10 03 c0 00 	mov    BYTE PTR ds:0xc003100c,0x0
c001e28f:	fa                   	cli    
c001e290:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e296:	ff 05 24 10 03 c0    	inc    DWORD PTR ds:0xc0031024
c001e29c:	fa                   	cli    
c001e29d:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e2a3:	eb 26                	jmp    c001e2cb <cleanerTaskFunction(void*)+0x7b>
c001e2a5:	83 ec 0c             	sub    esp,0xc
c001e2a8:	68 2c 10 03 c0       	push   0xc003102c
c001e2ad:	e8 98 a5 00 00       	call   c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2b2:	c7 04 24 2c 10 03 c0 	mov    DWORD PTR [esp],0xc003102c
c001e2b9:	89 c3                	mov    ebx,eax
c001e2bb:	e8 92 a5 00 00       	call   c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e2c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2c3:	e8 e1 fc ff ff       	call   c001dfa9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	83 ec 0c             	sub    esp,0xc
c001e2ce:	68 2c 10 03 c0       	push   0xc003102c
c001e2d3:	e8 56 a5 00 00       	call   c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e2d8:	83 c4 10             	add    esp,0x10
c001e2db:	84 c0                	test   al,al
c001e2dd:	74 c6                	je     c001e2a5 <cleanerTaskFunction(void*)+0x55>
c001e2df:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e2e4:	48                   	dec    eax
c001e2e5:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e2ea:	75 01                	jne    c001e2ed <cleanerTaskFunction(void*)+0x9d>
c001e2ec:	fb                   	sti    
c001e2ed:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001e2f2:	48                   	dec    eax
c001e2f3:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001e2f8:	0f 85 56 ff ff ff    	jne    c001e254 <cleanerTaskFunction(void*)+0x4>
c001e2fe:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001e303:	85 c0                	test   eax,eax
c001e305:	0f 84 49 ff ff ff    	je     c001e254 <cleanerTaskFunction(void*)+0x4>
c001e30b:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001e315:	e8 77 f7 ff ff       	call   c001da91 <schedule()>
c001e31a:	e9 35 ff ff ff       	jmp    c001e254 <cleanerTaskFunction(void*)+0x4>
c001e31f:	83 ec 0c             	sub    esp,0xc
c001e322:	6a 02                	push   0x2
c001e324:	e8 18 f9 ff ff       	call   c001dc41 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e329:	83 c4 10             	add    esp,0x10
c001e32c:	e9 57 ff ff ff       	jmp    c001e288 <cleanerTaskFunction(void*)+0x38>

c001e331 <terminateTask(int)>:
c001e331:	83 ec 14             	sub    esp,0x14
c001e334:	fa                   	cli    
c001e335:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e33b:	ff 05 24 10 03 c0    	inc    DWORD PTR ds:0xc0031024
c001e341:	fa                   	cli    
c001e342:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e348:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e34c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e351:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e359:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e35c:	50                   	push   eax
c001e35d:	68 2c 10 03 c0       	push   0xc003102c
c001e362:	e8 99 a5 00 00       	call   c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e36c:	83 c4 10             	add    esp,0x10
c001e36f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e376:	a1 08 10 03 c0       	mov    eax,ds:0xc0031008
c001e37b:	85 c0                	test   eax,eax
c001e37d:	74 53                	je     c001e3d2 <terminateTask(int)+0xa1>
c001e37f:	83 ec 0c             	sub    esp,0xc
c001e382:	c6 05 0c 10 03 c0 01 	mov    BYTE PTR ds:0xc003100c,0x1
c001e389:	50                   	push   eax
c001e38a:	e8 85 fb ff ff       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001e38f:	83 c4 10             	add    esp,0x10
c001e392:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e397:	48                   	dec    eax
c001e398:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e39d:	75 01                	jne    c001e3a0 <terminateTask(int)+0x6f>
c001e39f:	fb                   	sti    
c001e3a0:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001e3a5:	48                   	dec    eax
c001e3a6:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001e3ab:	75 09                	jne    c001e3b6 <terminateTask(int)+0x85>
c001e3ad:	83 3d 20 10 03 c0 00 	cmp    DWORD PTR ds:0xc0031020,0x0
c001e3b4:	75 2e                	jne    c001e3e4 <terminateTask(int)+0xb3>
c001e3b6:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e3bb:	48                   	dec    eax
c001e3bc:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e3c1:	75 01                	jne    c001e3c4 <terminateTask(int)+0x93>
c001e3c3:	fb                   	sti    
c001e3c4:	fa                   	cli    
c001e3c5:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e3cb:	e8 c1 f6 ff ff       	call   c001da91 <schedule()>
c001e3d0:	eb e4                	jmp    c001e3b6 <terminateTask(int)+0x85>
c001e3d2:	83 ec 0c             	sub    esp,0xc
c001e3d5:	68 41 bd 02 c0       	push   0xc002bd41
c001e3da:	e8 b4 43 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001e3df:	83 c4 10             	add    esp,0x10
c001e3e2:	eb ae                	jmp    c001e392 <terminateTask(int)+0x61>
c001e3e4:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001e3ee:	eb db                	jmp    c001e3cb <terminateTask(int)+0x9a>

c001e3f0 <Thr::terminateFromIRQ(int)>:
c001e3f0:	83 ec 18             	sub    esp,0x18
c001e3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3f7:	e8 35 ff ff ff       	call   c001e331 <terminateTask(int)>

c001e3fc <Semaphore::release()>:
c001e3fc:	83 ec 0c             	sub    esp,0xc
c001e3ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e403:	fa                   	cli    
c001e404:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001e409:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e40f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e412:	89 0d 24 10 03 c0    	mov    DWORD PTR ds:0xc0031024,ecx
c001e418:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e41b:	85 c9                	test   ecx,ecx
c001e41d:	74 3c                	je     c001e45b <Semaphore::release()+0x5f>
c001e41f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e422:	83 ec 0c             	sub    esp,0xc
c001e425:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e428:	51                   	push   ecx
c001e429:	e8 e6 fa ff ff       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001e42e:	a1 24 10 03 c0       	mov    eax,ds:0xc0031024
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	48                   	dec    eax
c001e437:	a3 24 10 03 c0       	mov    ds:0xc0031024,eax
c001e43c:	85 c0                	test   eax,eax
c001e43e:	75 09                	jne    c001e449 <Semaphore::release()+0x4d>
c001e440:	a1 20 10 03 c0       	mov    eax,ds:0xc0031020
c001e445:	85 c0                	test   eax,eax
c001e447:	75 17                	jne    c001e460 <Semaphore::release()+0x64>
c001e449:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e44e:	48                   	dec    eax
c001e44f:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e454:	75 01                	jne    c001e457 <Semaphore::release()+0x5b>
c001e456:	fb                   	sti    
c001e457:	83 c4 0c             	add    esp,0xc
c001e45a:	c3                   	ret    
c001e45b:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e45e:	eb d7                	jmp    c001e437 <Semaphore::release()+0x3b>
c001e460:	c7 05 20 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031020,0x0
c001e46a:	e8 22 f6 ff ff       	call   c001da91 <schedule()>
c001e46f:	eb d8                	jmp    c001e449 <Semaphore::release()+0x4d>

c001e471 <__static_initialization_and_destruction_0(int, int)>:
c001e471:	83 ec 0c             	sub    esp,0xc
c001e474:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e479:	0f 85 88 00 00 00    	jne    c001e507 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e47f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e487:	75 7e                	jne    c001e507 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e489:	83 ec 0c             	sub    esp,0xc
c001e48c:	68 44 10 03 c0       	push   0xc0031044
c001e491:	e8 fa a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e496:	83 c4 10             	add    esp,0x10
c001e499:	83 ec 04             	sub    esp,0x4
c001e49c:	68 d8 c8 02 c0       	push   0xc002c8d8
c001e4a1:	68 44 10 03 c0       	push   0xc0031044
c001e4a6:	68 44 8b 02 c0       	push   0xc0028b44
c001e4ab:	e8 85 41 ff ff       	call   c0012635 <__cxa_atexit>
c001e4b0:	83 c4 10             	add    esp,0x10
c001e4b3:	83 ec 0c             	sub    esp,0xc
c001e4b6:	68 38 10 03 c0       	push   0xc0031038
c001e4bb:	e8 d0 a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e4c0:	83 c4 10             	add    esp,0x10
c001e4c3:	83 ec 04             	sub    esp,0x4
c001e4c6:	68 d8 c8 02 c0       	push   0xc002c8d8
c001e4cb:	68 38 10 03 c0       	push   0xc0031038
c001e4d0:	68 44 8b 02 c0       	push   0xc0028b44
c001e4d5:	e8 5b 41 ff ff       	call   c0012635 <__cxa_atexit>
c001e4da:	83 c4 10             	add    esp,0x10
c001e4dd:	83 ec 0c             	sub    esp,0xc
c001e4e0:	68 2c 10 03 c0       	push   0xc003102c
c001e4e5:	e8 a6 a6 00 00       	call   c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e4ea:	83 c4 10             	add    esp,0x10
c001e4ed:	83 ec 04             	sub    esp,0x4
c001e4f0:	68 d8 c8 02 c0       	push   0xc002c8d8
c001e4f5:	68 2c 10 03 c0       	push   0xc003102c
c001e4fa:	68 44 8b 02 c0       	push   0xc0028b44
c001e4ff:	e8 31 41 ff ff       	call   c0012635 <__cxa_atexit>
c001e504:	83 c4 10             	add    esp,0x10
c001e507:	90                   	nop
c001e508:	83 c4 0c             	add    esp,0xc
c001e50b:	c3                   	ret    

c001e50c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	83 ec 08             	sub    esp,0x8
c001e512:	68 ff ff 00 00       	push   0xffff
c001e517:	6a 01                	push   0x1
c001e519:	e8 53 ff ff ff       	call   c001e471 <__static_initialization_and_destruction_0(int, int)>
c001e51e:	83 c4 10             	add    esp,0x10
c001e521:	83 c4 0c             	add    esp,0xc
c001e524:	c3                   	ret    

c001e525 <Vm::inbv(unsigned short)>:
c001e525:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e529:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e52e:	75 06                	jne    c001e536 <Vm::inbv(unsigned short)+0x11>
c001e530:	a0 8c 10 03 c0       	mov    al,ds:0xc003108c
c001e535:	c3                   	ret    
c001e536:	ec                   	in     al,dx
c001e537:	c3                   	ret    

c001e538 <Vm::outbv(unsigned short, unsigned char)>:
c001e538:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e53c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e540:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e545:	75 25                	jne    c001e56c <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e547:	8b 0d 8c 10 03 c0    	mov    ecx,DWORD PTR ds:0xc003108c
c001e54d:	8d 51 01             	lea    edx,[ecx+0x1]
c001e550:	88 81 a0 10 03 c0    	mov    BYTE PTR [ecx-0x3ffcef60],al
c001e556:	89 15 8c 10 03 c0    	mov    DWORD PTR ds:0xc003108c,edx
c001e55c:	83 fa 20             	cmp    edx,0x20
c001e55f:	75 0c                	jne    c001e56d <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e561:	c7 05 8c 10 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003108c,0x1f
c001e56b:	c3                   	ret    
c001e56c:	ee                   	out    dx,al
c001e56d:	c3                   	ret    

c001e56e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e56e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e573:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e578:	c1 e0 04             	shl    eax,0x4
c001e57b:	01 d0                	add    eax,edx
c001e57d:	c3                   	ret    

c001e57e <Vm::getSegment(unsigned int)>:
c001e57e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e582:	c1 e8 10             	shr    eax,0x10
c001e585:	c3                   	ret    

c001e586 <Vm::getOffset(unsigned int)>:
c001e586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e58a:	c3                   	ret    

c001e58b <Vm::mainloop2()>:
c001e58b:	83 ec 18             	sub    esp,0x18
c001e58e:	fa                   	cli    
c001e58f:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e595:	6a 02                	push   0x2
c001e597:	c6 05 85 10 03 c0 01 	mov    BYTE PTR ds:0xc0031085,0x1
c001e59e:	e8 9e f6 ff ff       	call   c001dc41 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e5a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e5a8:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e5ac:	52                   	push   edx
c001e5ad:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e5b1:	52                   	push   edx
c001e5b2:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e5b6:	52                   	push   edx
c001e5b7:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e5bb:	50                   	push   eax
c001e5bc:	e8 39 1d fe ff       	call   c00002fa <goToVM86>
c001e5c1:	83 c4 2c             	add    esp,0x2c
c001e5c4:	c3                   	ret    

c001e5c5 <Vm::mainVm8086Loop(void*)>:
c001e5c5:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e5ca:	48                   	dec    eax
c001e5cb:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e5d0:	75 01                	jne    c001e5d3 <Vm::mainVm8086Loop(void*)+0xe>
c001e5d2:	fb                   	sti    
c001e5d3:	eb b6                	jmp    c001e58b <Vm::mainloop2()>

c001e5d5 <Vm::mainloop3(unsigned long)>:
c001e5d5:	83 ec 18             	sub    esp,0x18
c001e5d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e5dc:	fa                   	cli    
c001e5dd:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e5e3:	6a 02                	push   0x2
c001e5e5:	c6 05 84 10 03 c0 01 	mov    BYTE PTR ds:0xc0031084,0x1
c001e5ec:	a3 80 10 03 c0       	mov    ds:0xc0031080,eax
c001e5f1:	e8 4b f6 ff ff       	call   c001dc41 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e5f6:	83 c4 1c             	add    esp,0x1c
c001e5f9:	eb 90                	jmp    c001e58b <Vm::mainloop2()>

c001e5fb <Vm::initialise8086()>:
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 80 00 00 00       	push   0x80
c001e603:	6a 00                	push   0x0
c001e605:	68 c5 e5 01 c0       	push   0xc001e5c5
c001e60a:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c001e610:	e8 57 f2 ff ff       	call   c001d86c <Process::createThread(void (*)(void*), void*, int)>
c001e615:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e61c:	a3 88 10 03 c0       	mov    ds:0xc0031088,eax
c001e621:	68 00 01 00 00       	push   0x100
c001e626:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c001e62b:	6a 00                	push   0x0
c001e62d:	6a 00                	push   0x0
c001e62f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e635:	e8 2e 37 ff ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e63a:	83 c4 2c             	add    esp,0x2c
c001e63d:	c3                   	ret    

c001e63e <Vm::finish8086()>:
c001e63e:	53                   	push   ebx
c001e63f:	83 ec 08             	sub    esp,0x8
c001e642:	fa                   	cli    
c001e643:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e649:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c001e650:	75 15                	jne    c001e667 <Vm::finish8086()+0x29>
c001e652:	e8 3a f4 ff ff       	call   c001da91 <schedule()>
c001e657:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e65c:	48                   	dec    eax
c001e65d:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e662:	75 de                	jne    c001e642 <Vm::finish8086()+0x4>
c001e664:	fb                   	sti    
c001e665:	eb db                	jmp    c001e642 <Vm::finish8086()+0x4>
c001e667:	83 ec 0c             	sub    esp,0xc
c001e66a:	8b 1d 80 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031080
c001e670:	ff 35 88 10 03 c0    	push   DWORD PTR ds:0xc0031088
c001e676:	c6 05 84 10 03 c0 00 	mov    BYTE PTR ds:0xc0031084,0x0
c001e67d:	e8 92 f8 ff ff       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001e682:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e687:	83 c4 10             	add    esp,0x10
c001e68a:	8d 50 ff             	lea    edx,[eax-0x1]
c001e68d:	89 15 28 10 03 c0    	mov    DWORD PTR ds:0xc0031028,edx
c001e693:	85 d2                	test   edx,edx
c001e695:	75 01                	jne    c001e698 <Vm::finish8086()+0x5a>
c001e697:	fb                   	sti    
c001e698:	89 d8                	mov    eax,ebx
c001e69a:	83 c4 08             	add    esp,0x8
c001e69d:	5b                   	pop    ebx
c001e69e:	c3                   	ret    

c001e69f <Vm::getOutput8086(unsigned char*)>:
c001e69f:	57                   	push   edi
c001e6a0:	8b 0d 8c 10 03 c0    	mov    ecx,DWORD PTR ds:0xc003108c
c001e6a6:	56                   	push   esi
c001e6a7:	be a0 10 03 c0       	mov    esi,0xc00310a0
c001e6ac:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e6b2:	a1 8c 10 03 c0       	mov    eax,ds:0xc003108c
c001e6b7:	5e                   	pop    esi
c001e6b8:	c7 05 8c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003108c,0x0
c001e6c2:	5f                   	pop    edi
c001e6c3:	c3                   	ret    

c001e6c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e6c4:	55                   	push   ebp
c001e6c5:	57                   	push   edi
c001e6c6:	56                   	push   esi
c001e6c7:	53                   	push   ebx
c001e6c8:	83 ec 2c             	sub    esp,0x2c
c001e6cb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e6cf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e6d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e6d7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e6db:	fa                   	cli    
c001e6dc:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c001e6e2:	0f b6 35 85 10 03 c0 	movzx  esi,BYTE PTR ds:0xc0031085
c001e6e9:	89 f0                	mov    eax,esi
c001e6eb:	84 c0                	test   al,al
c001e6ed:	75 1d                	jne    c001e70c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e6ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e6f3:	e8 99 f3 ff ff       	call   c001da91 <schedule()>
c001e6f8:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e6fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e701:	48                   	dec    eax
c001e702:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e707:	75 d2                	jne    c001e6db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e709:	fb                   	sti    
c001e70a:	eb cf                	jmp    c001e6db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e70c:	a1 88 10 03 c0       	mov    eax,ds:0xc0031088
c001e711:	c7 05 8c 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003108c,0x0
c001e71b:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e71f:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e723:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e727:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e72b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e72f:	50                   	push   eax
c001e730:	6a 20                	push   0x20
c001e732:	6a 00                	push   0x0
c001e734:	68 a0 10 03 c0       	push   0xc00310a0
c001e739:	e8 12 20 fe ff       	call   c0000750 <memset>
c001e73e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e745:	e8 4f 0e ff ff       	call   c000f599 <malloc>
c001e74a:	83 c4 0c             	add    esp,0xc
c001e74d:	89 c3                	mov    ebx,eax
c001e74f:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c001e755:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e759:	50                   	push   eax
c001e75a:	e8 93 45 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c001e75f:	83 c4 10             	add    esp,0x10
c001e762:	85 db                	test   ebx,ebx
c001e764:	75 0a                	jne    c001e770 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	68 4c be 02 c0       	push   0xc002be4c
c001e76e:	eb 3e                	jmp    c001e7ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e770:	50                   	push   eax
c001e771:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e775:	50                   	push   eax
c001e776:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e77a:	50                   	push   eax
c001e77b:	53                   	push   ebx
c001e77c:	e8 81 48 ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e789:	74 0a                	je     c001e795 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e78b:	83 ec 0c             	sub    esp,0xc
c001e78e:	68 60 be 02 c0       	push   0xc002be60
c001e793:	eb 19                	jmp    c001e7ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e795:	51                   	push   ecx
c001e796:	51                   	push   ecx
c001e797:	6a 01                	push   0x1
c001e799:	53                   	push   ebx
c001e79a:	e8 b7 45 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	85 c0                	test   eax,eax
c001e7a4:	74 24                	je     c001e7ca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e7a6:	83 ec 0c             	sub    esp,0xc
c001e7a9:	68 79 be 02 c0       	push   0xc002be79
c001e7ae:	e8 4c b7 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001e7b3:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e7b8:	83 c4 10             	add    esp,0x10
c001e7bb:	48                   	dec    eax
c001e7bc:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e7c1:	85 c0                	test   eax,eax
c001e7c3:	75 01                	jne    c001e7c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e7c5:	fb                   	sti    
c001e7c6:	31 f6                	xor    esi,esi
c001e7c8:	eb 58                	jmp    c001e822 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e7ca:	0f b7 ed             	movzx  ebp,bp
c001e7cd:	50                   	push   eax
c001e7ce:	0f b7 ff             	movzx  edi,di
c001e7d1:	50                   	push   eax
c001e7d2:	55                   	push   ebp
c001e7d3:	57                   	push   edi
c001e7d4:	e8 95 fd ff ff       	call   c001e56e <Vm::realToLinear(unsigned short, unsigned short)>
c001e7d9:	5a                   	pop    edx
c001e7da:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e7dc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e7e0:	51                   	push   ecx
c001e7e1:	50                   	push   eax
c001e7e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e7ea:	53                   	push   ebx
c001e7eb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e7ee:	83 c4 14             	add    esp,0x14
c001e7f1:	53                   	push   ebx
c001e7f2:	e8 bd 45 ff ff       	call   c0012db4 <File::close()>
c001e7f7:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c001e7fc:	83 c4 10             	add    esp,0x10
c001e7ff:	48                   	dec    eax
c001e800:	c6 05 85 10 03 c0 00 	mov    BYTE PTR ds:0xc0031085,0x0
c001e807:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c001e80c:	85 c0                	test   eax,eax
c001e80e:	75 01                	jne    c001e811 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e810:	fb                   	sti    
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	ff 35 88 10 03 c0    	push   DWORD PTR ds:0xc0031088
c001e81a:	e8 f5 f6 ff ff       	call   c001df14 <unblockTask(ThreadControlBlock*)>
c001e81f:	83 c4 10             	add    esp,0x10
c001e822:	83 c4 2c             	add    esp,0x2c
c001e825:	89 f0                	mov    eax,esi
c001e827:	5b                   	pop    ebx
c001e828:	5e                   	pop    esi
c001e829:	5f                   	pop    edi
c001e82a:	5d                   	pop    ebp
c001e82b:	c3                   	ret    

c001e82c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e82c:	57                   	push   edi
c001e82d:	56                   	push   esi
c001e82e:	53                   	push   ebx
c001e82f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e837:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e83b:	83 e8 06             	sub    eax,0x6
c001e83e:	0f b7 c0             	movzx  eax,ax
c001e841:	50                   	push   eax
c001e842:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e847:	50                   	push   eax
c001e848:	e8 21 fd ff ff       	call   c001e56e <Vm::realToLinear(unsigned short, unsigned short)>
c001e84d:	5a                   	pop    edx
c001e84e:	5e                   	pop    esi
c001e84f:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e852:	8d 56 fa             	lea    edx,[esi-0x6]
c001e855:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e85b:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e85e:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e861:	83 c2 02             	add    edx,0x2
c001e864:	66 89 10             	mov    WORD PTR [eax],dx
c001e867:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e86a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e86e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e871:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e875:	89 d6                	mov    esi,edx
c001e877:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e87d:	66 81 e6 ff fd       	and    si,0xfdff
c001e882:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e886:	74 07                	je     c001e88f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e888:	89 d6                	mov    esi,edx
c001e88a:	66 81 ce 00 02       	or     si,0x200
c001e88f:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e898:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e89c:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e8a4:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e8a7:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e8af:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e8b2:	5b                   	pop    ebx
c001e8b3:	5e                   	pop    esi
c001e8b4:	5f                   	pop    edi
c001e8b5:	c3                   	ret    

c001e8b6 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e8b6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8bb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8c0:	c1 e0 04             	shl    eax,0x4
c001e8c3:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e8c6:	c3                   	ret    

c001e8c7 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e8c7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8cc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8d1:	c1 e0 04             	shl    eax,0x4
c001e8d4:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e8d8:	c3                   	ret    

c001e8d9 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e8d9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8de:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8e3:	c1 e0 04             	shl    eax,0x4
c001e8e6:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e8e9:	c3                   	ret    

c001e8ea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e8ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8f4:	c1 e0 04             	shl    eax,0x4
c001e8f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e8fb:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e8fe:	c3                   	ret    

c001e8ff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e8ff:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e904:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e909:	c1 e0 04             	shl    eax,0x4
c001e90c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e910:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e914:	c3                   	ret    

c001e915 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e915:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e91a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e91f:	c1 e0 04             	shl    eax,0x4
c001e922:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e926:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e929:	c3                   	ret    

c001e92a <Vm::faultHandler(regs*)>:
c001e92a:	55                   	push   ebp
c001e92b:	57                   	push   edi
c001e92c:	56                   	push   esi
c001e92d:	53                   	push   ebx
c001e92e:	83 ec 1c             	sub    esp,0x1c
c001e931:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e935:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e938:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e93c:	0f b7 f8             	movzx  edi,ax
c001e93f:	52                   	push   edx
c001e940:	0f b7 c0             	movzx  eax,ax
c001e943:	50                   	push   eax
c001e944:	e8 25 fc ff ff       	call   c001e56e <Vm::realToLinear(unsigned short, unsigned short)>
c001e949:	5a                   	pop    edx
c001e94a:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e94d:	59                   	pop    ecx
c001e94e:	89 c1                	mov    ecx,eax
c001e950:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e957:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e95c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e960:	0f b7 c5             	movzx  eax,bp
c001e963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e967:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e96b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e96f:	e8 fa fb ff ff       	call   c001e56e <Vm::realToLinear(unsigned short, unsigned short)>
c001e974:	5e                   	pop    esi
c001e975:	be 06 00 00 00       	mov    esi,0x6
c001e97a:	5a                   	pop    edx
c001e97b:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e980:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e985:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e988:	80 fa 9d             	cmp    dl,0x9d
c001e98b:	0f 84 2c 02 00 00    	je     c001ebbd <Vm::faultHandler(regs*)+0x293>
c001e991:	0f 87 91 00 00 00    	ja     c001ea28 <Vm::faultHandler(regs*)+0xfe>
c001e997:	80 fa 66             	cmp    dl,0x66
c001e99a:	0f 84 98 01 00 00    	je     c001eb38 <Vm::faultHandler(regs*)+0x20e>
c001e9a0:	77 47                	ja     c001e9e9 <Vm::faultHandler(regs*)+0xbf>
c001e9a2:	80 fa 36             	cmp    dl,0x36
c001e9a5:	0f 84 80 01 00 00    	je     c001eb2b <Vm::faultHandler(regs*)+0x201>
c001e9ab:	77 1a                	ja     c001e9c7 <Vm::faultHandler(regs*)+0x9d>
c001e9ad:	80 fa 26             	cmp    dl,0x26
c001e9b0:	0f 84 4e 01 00 00    	je     c001eb04 <Vm::faultHandler(regs*)+0x1da>
c001e9b6:	80 fa 2e             	cmp    dl,0x2e
c001e9b9:	0f 85 e2 05 00 00    	jne    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001e9bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9c2:	31 f6                	xor    esi,esi
c001e9c4:	41                   	inc    ecx
c001e9c5:	eb be                	jmp    c001e985 <Vm::faultHandler(regs*)+0x5b>
c001e9c7:	80 fa 64             	cmp    dl,0x64
c001e9ca:	0f 84 41 01 00 00    	je     c001eb11 <Vm::faultHandler(regs*)+0x1e7>
c001e9d0:	0f 87 48 01 00 00    	ja     c001eb1e <Vm::faultHandler(regs*)+0x1f4>
c001e9d6:	80 fa 3e             	cmp    dl,0x3e
c001e9d9:	0f 85 c2 05 00 00    	jne    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001e9df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e9e2:	be 01 00 00 00       	mov    esi,0x1
c001e9e7:	eb db                	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001e9e9:	80 fa 6d             	cmp    dl,0x6d
c001e9ec:	0f 84 ec 02 00 00    	je     c001ecde <Vm::faultHandler(regs*)+0x3b4>
c001e9f2:	77 17                	ja     c001ea0b <Vm::faultHandler(regs*)+0xe1>
c001e9f4:	80 fa 67             	cmp    dl,0x67
c001e9f7:	0f 84 48 01 00 00    	je     c001eb45 <Vm::faultHandler(regs*)+0x21b>
c001e9fd:	80 fa 6c             	cmp    dl,0x6c
c001ea00:	0f 84 69 02 00 00    	je     c001ec6f <Vm::faultHandler(regs*)+0x345>
c001ea06:	e9 96 05 00 00       	jmp    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001ea0b:	80 fa 6f             	cmp    dl,0x6f
c001ea0e:	0f 84 f4 03 00 00    	je     c001ee08 <Vm::faultHandler(regs*)+0x4de>
c001ea14:	0f 82 59 03 00 00    	jb     c001ed73 <Vm::faultHandler(regs*)+0x449>
c001ea1a:	80 fa 9c             	cmp    dl,0x9c
c001ea1d:	0f 84 2f 01 00 00    	je     c001eb52 <Vm::faultHandler(regs*)+0x228>
c001ea23:	e9 79 05 00 00       	jmp    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001ea28:	80 fa ec             	cmp    dl,0xec
c001ea2b:	0f 84 14 05 00 00    	je     c001ef45 <Vm::faultHandler(regs*)+0x61b>
c001ea31:	77 7b                	ja     c001eaae <Vm::faultHandler(regs*)+0x184>
c001ea33:	80 fa e4             	cmp    dl,0xe4
c001ea36:	0f 84 93 04 00 00    	je     c001eecf <Vm::faultHandler(regs*)+0x5a5>
c001ea3c:	77 53                	ja     c001ea91 <Vm::faultHandler(regs*)+0x167>
c001ea3e:	80 fa cd             	cmp    dl,0xcd
c001ea41:	0f 84 d9 01 00 00    	je     c001ec20 <Vm::faultHandler(regs*)+0x2f6>
c001ea47:	80 fa cf             	cmp    dl,0xcf
c001ea4a:	0f 85 51 05 00 00    	jne    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001ea50:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ea53:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001ea56:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001ea5a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001ea5d:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001ea61:	81 ca 00 02 02 00    	or     edx,0x20200
c001ea67:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ea6a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001ea6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea74:	66 c1 e8 09          	shr    ax,0x9
c001ea78:	83 e0 01             	and    eax,0x1
c001ea7b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ea81:	83 c0 06             	add    eax,0x6
c001ea84:	25 ff ff 00 00       	and    eax,0xffff
c001ea89:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ea8c:	e9 0c 05 00 00       	jmp    c001ef9d <Vm::faultHandler(regs*)+0x673>
c001ea91:	80 fa e6             	cmp    dl,0xe6
c001ea94:	0f 84 7f 04 00 00    	je     c001ef19 <Vm::faultHandler(regs*)+0x5ef>
c001ea9a:	0f 82 4b 04 00 00    	jb     c001eeeb <Vm::faultHandler(regs*)+0x5c1>
c001eaa0:	80 fa e7             	cmp    dl,0xe7
c001eaa3:	0f 84 87 04 00 00    	je     c001ef30 <Vm::faultHandler(regs*)+0x606>
c001eaa9:	e9 f3 04 00 00       	jmp    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001eaae:	80 fa ef             	cmp    dl,0xef
c001eab1:	0f 84 d1 04 00 00    	je     c001ef88 <Vm::faultHandler(regs*)+0x65e>
c001eab7:	77 28                	ja     c001eae1 <Vm::faultHandler(regs*)+0x1b7>
c001eab9:	80 fa ed             	cmp    dl,0xed
c001eabc:	0f 84 9f 04 00 00    	je     c001ef61 <Vm::faultHandler(regs*)+0x637>
c001eac2:	80 fa ee             	cmp    dl,0xee
c001eac5:	0f 85 d6 04 00 00    	jne    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001eacb:	50                   	push   eax
c001eacc:	50                   	push   eax
c001eacd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ead1:	50                   	push   eax
c001ead2:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ead6:	50                   	push   eax
c001ead7:	e8 5c fa ff ff       	call   c001e538 <Vm::outbv(unsigned short, unsigned char)>
c001eadc:	e9 9f 04 00 00       	jmp    c001ef80 <Vm::faultHandler(regs*)+0x656>
c001eae1:	80 fa fa             	cmp    dl,0xfa
c001eae4:	0f 84 69 01 00 00    	je     c001ec53 <Vm::faultHandler(regs*)+0x329>
c001eaea:	80 fa fb             	cmp    dl,0xfb
c001eaed:	0f 84 6e 01 00 00    	je     c001ec61 <Vm::faultHandler(regs*)+0x337>
c001eaf3:	80 fa f3             	cmp    dl,0xf3
c001eaf6:	0f 85 a5 04 00 00    	jne    c001efa1 <Vm::faultHandler(regs*)+0x677>
c001eafc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eaff:	e9 c0 fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb04:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb07:	be 02 00 00 00       	mov    esi,0x2
c001eb0c:	e9 b3 fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb11:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb14:	be 03 00 00 00       	mov    esi,0x3
c001eb19:	e9 a6 fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb1e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb21:	be 04 00 00 00       	mov    esi,0x4
c001eb26:	e9 99 fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb2b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb2e:	be 05 00 00 00       	mov    esi,0x5
c001eb33:	e9 8c fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb38:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb3b:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001eb40:	e9 7f fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb45:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eb48:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001eb4d:	e9 72 fe ff ff       	jmp    c001e9c4 <Vm::faultHandler(regs*)+0x9a>
c001eb52:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001eb55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001eb59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eb5e:	74 30                	je     c001eb90 <Vm::faultHandler(regs*)+0x266>
c001eb60:	83 e9 04             	sub    ecx,0x4
c001eb63:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eb69:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb6f:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb72:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb75:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eb7b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eb7f:	0f 84 15 04 00 00    	je     c001ef9a <Vm::faultHandler(regs*)+0x670>
c001eb85:	80 ce 02             	or     dh,0x2
c001eb88:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eb8b:	e9 0a 04 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001eb90:	83 e9 02             	sub    ecx,0x2
c001eb93:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eb99:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eb9c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eba0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eba6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ebaa:	74 05                	je     c001ebb1 <Vm::faultHandler(regs*)+0x287>
c001ebac:	80 ce 02             	or     dh,0x2
c001ebaf:	eb 03                	jmp    c001ebb4 <Vm::faultHandler(regs*)+0x28a>
c001ebb1:	80 e6 fd             	and    dh,0xfd
c001ebb4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ebb8:	e9 dd 03 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ebbd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ebc2:	74 2a                	je     c001ebee <Vm::faultHandler(regs*)+0x2c4>
c001ebc4:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebc6:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ebcc:	81 ca 00 02 02 00    	or     edx,0x20200
c001ebd2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ebd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ebdd:	c1 e8 09             	shr    eax,0x9
c001ebe0:	83 e0 01             	and    eax,0x1
c001ebe3:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ebe6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ebe9:	83 c0 04             	add    eax,0x4
c001ebec:	eb 25                	jmp    c001ec13 <Vm::faultHandler(regs*)+0x2e9>
c001ebee:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ebf1:	81 ca 00 02 02 00    	or     edx,0x20200
c001ebf7:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ebfa:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ebfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ec03:	66 c1 e8 09          	shr    ax,0x9
c001ec07:	83 e0 01             	and    eax,0x1
c001ec0a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ec0d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ec10:	83 c0 02             	add    eax,0x2
c001ec13:	25 ff ff 00 00       	and    eax,0xffff
c001ec18:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ec1b:	e9 7a 03 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ec20:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec24:	3c ee                	cmp    al,0xee
c001ec26:	75 10                	jne    c001ec38 <Vm::faultHandler(regs*)+0x30e>
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001ec2e:	e8 a2 f9 ff ff       	call   c001e5d5 <Vm::mainloop3(unsigned long)>
c001ec33:	e9 4b 03 00 00       	jmp    c001ef83 <Vm::faultHandler(regs*)+0x659>
c001ec38:	83 ec 0c             	sub    esp,0xc
c001ec3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ec3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec43:	51                   	push   ecx
c001ec44:	50                   	push   eax
c001ec45:	53                   	push   ebx
c001ec46:	e8 e1 fb ff ff       	call   c001e82c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ec4b:	83 c4 20             	add    esp,0x20
c001ec4e:	e9 4a 03 00 00       	jmp    c001ef9d <Vm::faultHandler(regs*)+0x673>
c001ec53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec58:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ec5c:	e9 39 03 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ec61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec66:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ec6a:	e9 2b 03 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ec6f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ec72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec77:	74 2b                	je     c001eca4 <Vm::faultHandler(regs*)+0x37a>
c001ec79:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ec80:	76 22                	jbe    c001eca4 <Vm::faultHandler(regs*)+0x37a>
c001ec82:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec86:	50                   	push   eax
c001ec87:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec8b:	50                   	push   eax
c001ec8c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec90:	50                   	push   eax
c001ec91:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec95:	50                   	push   eax
c001ec96:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec9a:	50                   	push   eax
c001ec9b:	6a 6c                	push   0x6c
c001ec9d:	6a 6c                	push   0x6c
c001ec9f:	e9 b9 01 00 00       	jmp    c001ee5d <Vm::faultHandler(regs*)+0x533>
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecab:	0f b7 f6             	movzx  esi,si
c001ecae:	50                   	push   eax
c001ecaf:	e8 71 f8 ff ff       	call   c001e525 <Vm::inbv(unsigned short)>
c001ecb4:	83 c4 0c             	add    esp,0xc
c001ecb7:	0f b6 c0             	movzx  eax,al
c001ecba:	50                   	push   eax
c001ecbb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ecbf:	50                   	push   eax
c001ecc0:	56                   	push   esi
c001ecc1:	e8 24 fc ff ff       	call   c001e8ea <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ecc6:	83 c4 10             	add    esp,0x10
c001ecc9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eccc:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ecd0:	74 03                	je     c001ecd5 <Vm::faultHandler(regs*)+0x3ab>
c001ecd2:	48                   	dec    eax
c001ecd3:	eb 01                	jmp    c001ecd6 <Vm::faultHandler(regs*)+0x3ac>
c001ecd5:	40                   	inc    eax
c001ecd6:	0f b7 c0             	movzx  eax,ax
c001ecd9:	e9 8d 00 00 00       	jmp    c001ed6b <Vm::faultHandler(regs*)+0x441>
c001ecde:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ece1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ece4:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ece9:	74 29                	je     c001ed14 <Vm::faultHandler(regs*)+0x3ea>
c001eceb:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecf0:	76 22                	jbe    c001ed14 <Vm::faultHandler(regs*)+0x3ea>
c001ecf2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ecf6:	50                   	push   eax
c001ecf7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecfb:	50                   	push   eax
c001ecfc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed00:	50                   	push   eax
c001ed01:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed05:	50                   	push   eax
c001ed06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed0a:	50                   	push   eax
c001ed0b:	6a 6d                	push   0x6d
c001ed0d:	6a 6d                	push   0x6d
c001ed0f:	e9 49 01 00 00       	jmp    c001ee5d <Vm::faultHandler(regs*)+0x533>
c001ed14:	0f b7 c8             	movzx  ecx,ax
c001ed17:	0f b7 f6             	movzx  esi,si
c001ed1a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed1d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed22:	74 20                	je     c001ed44 <Vm::faultHandler(regs*)+0x41a>
c001ed24:	ed                   	in     eax,dx
c001ed25:	55                   	push   ebp
c001ed26:	50                   	push   eax
c001ed27:	51                   	push   ecx
c001ed28:	56                   	push   esi
c001ed29:	e8 e7 fb ff ff       	call   c001e915 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ed2e:	83 c4 10             	add    esp,0x10
c001ed31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed34:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed38:	74 05                	je     c001ed3f <Vm::faultHandler(regs*)+0x415>
c001ed3a:	83 e8 04             	sub    eax,0x4
c001ed3d:	eb 27                	jmp    c001ed66 <Vm::faultHandler(regs*)+0x43c>
c001ed3f:	83 c0 04             	add    eax,0x4
c001ed42:	eb 22                	jmp    c001ed66 <Vm::faultHandler(regs*)+0x43c>
c001ed44:	66 ed                	in     ax,dx
c001ed46:	0f b7 c0             	movzx  eax,ax
c001ed49:	57                   	push   edi
c001ed4a:	50                   	push   eax
c001ed4b:	51                   	push   ecx
c001ed4c:	56                   	push   esi
c001ed4d:	e8 ad fb ff ff       	call   c001e8ff <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ed52:	83 c4 10             	add    esp,0x10
c001ed55:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ed58:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed5c:	74 05                	je     c001ed63 <Vm::faultHandler(regs*)+0x439>
c001ed5e:	83 e8 02             	sub    eax,0x2
c001ed61:	eb 03                	jmp    c001ed66 <Vm::faultHandler(regs*)+0x43c>
c001ed63:	83 c0 02             	add    eax,0x2
c001ed66:	25 ff ff 00 00       	and    eax,0xffff
c001ed6b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ed6e:	e9 27 02 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ed73:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed76:	3c 05                	cmp    al,0x5
c001ed78:	77 24                	ja     c001ed9e <Vm::faultHandler(regs*)+0x474>
c001ed7a:	0f b6 c0             	movzx  eax,al
c001ed7d:	ff 24 85 ec be 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4114]
c001ed84:	0f b7 fd             	movzx  edi,bp
c001ed87:	eb 15                	jmp    c001ed9e <Vm::faultHandler(regs*)+0x474>
c001ed89:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001ed8d:	eb 0f                	jmp    c001ed9e <Vm::faultHandler(regs*)+0x474>
c001ed8f:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ed93:	eb 09                	jmp    c001ed9e <Vm::faultHandler(regs*)+0x474>
c001ed95:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ed99:	eb 03                	jmp    c001ed9e <Vm::faultHandler(regs*)+0x474>
c001ed9b:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ed9e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eda1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eda6:	74 29                	je     c001edd1 <Vm::faultHandler(regs*)+0x4a7>
c001eda8:	3d ff ff 00 00       	cmp    eax,0xffff
c001edad:	76 22                	jbe    c001edd1 <Vm::faultHandler(regs*)+0x4a7>
c001edaf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001edb3:	50                   	push   eax
c001edb4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001edb8:	50                   	push   eax
c001edb9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001edbd:	50                   	push   eax
c001edbe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001edc2:	50                   	push   eax
c001edc3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edc7:	50                   	push   eax
c001edc8:	6a 6e                	push   0x6e
c001edca:	6a 6e                	push   0x6e
c001edcc:	e9 8c 00 00 00       	jmp    c001ee5d <Vm::faultHandler(regs*)+0x533>
c001edd1:	0f b7 c0             	movzx  eax,ax
c001edd4:	52                   	push   edx
c001edd5:	52                   	push   edx
c001edd6:	50                   	push   eax
c001edd7:	57                   	push   edi
c001edd8:	e8 d9 fa ff ff       	call   c001e8b6 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eddd:	59                   	pop    ecx
c001edde:	0f b6 c0             	movzx  eax,al
c001ede1:	5e                   	pop    esi
c001ede2:	50                   	push   eax
c001ede3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ede7:	50                   	push   eax
c001ede8:	e8 4b f7 ff ff       	call   c001e538 <Vm::outbv(unsigned short, unsigned char)>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001edf3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001edf7:	74 03                	je     c001edfc <Vm::faultHandler(regs*)+0x4d2>
c001edf9:	48                   	dec    eax
c001edfa:	eb 01                	jmp    c001edfd <Vm::faultHandler(regs*)+0x4d3>
c001edfc:	40                   	inc    eax
c001edfd:	0f b7 c0             	movzx  eax,ax
c001ee00:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ee03:	e9 92 01 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ee08:	8d 46 ff             	lea    eax,[esi-0x1]
c001ee0b:	3c 05                	cmp    al,0x5
c001ee0d:	77 1f                	ja     c001ee2e <Vm::faultHandler(regs*)+0x504>
c001ee0f:	0f b6 c0             	movzx  eax,al
c001ee12:	ff 24 85 04 bf 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd40fc]
c001ee19:	89 ef                	mov    edi,ebp
c001ee1b:	eb 11                	jmp    c001ee2e <Vm::faultHandler(regs*)+0x504>
c001ee1d:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ee20:	eb 0c                	jmp    c001ee2e <Vm::faultHandler(regs*)+0x504>
c001ee22:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ee25:	eb 07                	jmp    c001ee2e <Vm::faultHandler(regs*)+0x504>
c001ee27:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ee2a:	eb 02                	jmp    c001ee2e <Vm::faultHandler(regs*)+0x504>
c001ee2c:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ee2e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ee31:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ee36:	74 37                	je     c001ee6f <Vm::faultHandler(regs*)+0x545>
c001ee38:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ee3e:	76 2f                	jbe    c001ee6f <Vm::faultHandler(regs*)+0x545>
c001ee40:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ee44:	50                   	push   eax
c001ee45:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ee49:	50                   	push   eax
c001ee4a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ee4e:	50                   	push   eax
c001ee4f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ee53:	50                   	push   eax
c001ee54:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee58:	50                   	push   eax
c001ee59:	6a 6f                	push   0x6f
c001ee5b:	6a 6f                	push   0x6f
c001ee5d:	68 92 be 02 c0       	push   0xc002be92
c001ee62:	e8 2c 39 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001ee67:	83 c4 20             	add    esp,0x20
c001ee6a:	e9 86 01 00 00       	jmp    c001eff5 <Vm::faultHandler(regs*)+0x6cb>
c001ee6f:	0f b7 d7             	movzx  edx,di
c001ee72:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ee75:	0f b7 c6             	movzx  eax,si
c001ee78:	81 e1 00 04 00 00    	and    ecx,0x400
c001ee7e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ee81:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee86:	74 1d                	je     c001eea5 <Vm::faultHandler(regs*)+0x57b>
c001ee88:	55                   	push   ebp
c001ee89:	55                   	push   ebp
c001ee8a:	50                   	push   eax
c001ee8b:	52                   	push   edx
c001ee8c:	e8 48 fa ff ff       	call   c001e8d9 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ee91:	83 c4 10             	add    esp,0x10
c001ee94:	89 fa                	mov    edx,edi
c001ee96:	ef                   	out    dx,eax
c001ee97:	85 c9                	test   ecx,ecx
c001ee99:	74 05                	je     c001eea0 <Vm::faultHandler(regs*)+0x576>
c001ee9b:	83 ee 04             	sub    esi,0x4
c001ee9e:	eb 21                	jmp    c001eec1 <Vm::faultHandler(regs*)+0x597>
c001eea0:	83 c6 04             	add    esi,0x4
c001eea3:	eb 1c                	jmp    c001eec1 <Vm::faultHandler(regs*)+0x597>
c001eea5:	55                   	push   ebp
c001eea6:	55                   	push   ebp
c001eea7:	50                   	push   eax
c001eea8:	52                   	push   edx
c001eea9:	e8 19 fa ff ff       	call   c001e8c7 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001eeae:	83 c4 10             	add    esp,0x10
c001eeb1:	89 fa                	mov    edx,edi
c001eeb3:	66 ef                	out    dx,ax
c001eeb5:	85 c9                	test   ecx,ecx
c001eeb7:	74 05                	je     c001eebe <Vm::faultHandler(regs*)+0x594>
c001eeb9:	83 ee 02             	sub    esi,0x2
c001eebc:	eb 03                	jmp    c001eec1 <Vm::faultHandler(regs*)+0x597>
c001eebe:	83 c6 02             	add    esi,0x2
c001eec1:	81 e6 ff ff 00 00    	and    esi,0xffff
c001eec7:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001eeca:	e9 cb 00 00 00       	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001eecf:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eedd:	50                   	push   eax
c001eede:	e8 42 f6 ff ff       	call   c001e525 <Vm::inbv(unsigned short)>
c001eee3:	0f b6 c0             	movzx  eax,al
c001eee6:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eee9:	eb 3f                	jmp    c001ef2a <Vm::faultHandler(regs*)+0x600>
c001eeeb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eef0:	74 07                	je     c001eef9 <Vm::faultHandler(regs*)+0x5cf>
c001eef2:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001eef6:	ed                   	in     eax,dx
c001eef7:	eb 14                	jmp    c001ef0d <Vm::faultHandler(regs*)+0x5e3>
c001eef9:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001eefc:	66 31 f6             	xor    si,si
c001eeff:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ef02:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef06:	66 ed                	in     ax,dx
c001ef08:	0f b7 c0             	movzx  eax,ax
c001ef0b:	09 f0                	or     eax,esi
c001ef0d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef10:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef14:	e9 84 00 00 00       	jmp    c001ef9d <Vm::faultHandler(regs*)+0x673>
c001ef19:	52                   	push   edx
c001ef1a:	52                   	push   edx
c001ef1b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ef1f:	50                   	push   eax
c001ef20:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ef24:	50                   	push   eax
c001ef25:	e8 0e f6 ff ff       	call   c001e538 <Vm::outbv(unsigned short, unsigned char)>
c001ef2a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ef2e:	eb 53                	jmp    c001ef83 <Vm::faultHandler(regs*)+0x659>
c001ef30:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef33:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ef37:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef3c:	74 03                	je     c001ef41 <Vm::faultHandler(regs*)+0x617>
c001ef3e:	ef                   	out    dx,eax
c001ef3f:	eb cf                	jmp    c001ef10 <Vm::faultHandler(regs*)+0x5e6>
c001ef41:	66 ef                	out    dx,ax
c001ef43:	eb cb                	jmp    c001ef10 <Vm::faultHandler(regs*)+0x5e6>
c001ef45:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ef53:	50                   	push   eax
c001ef54:	e8 cc f5 ff ff       	call   c001e525 <Vm::inbv(unsigned short)>
c001ef59:	0f b6 c0             	movzx  eax,al
c001ef5c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ef5f:	eb 1f                	jmp    c001ef80 <Vm::faultHandler(regs*)+0x656>
c001ef61:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef69:	74 03                	je     c001ef6e <Vm::faultHandler(regs*)+0x644>
c001ef6b:	ed                   	in     eax,dx
c001ef6c:	eb 0d                	jmp    c001ef7b <Vm::faultHandler(regs*)+0x651>
c001ef6e:	66 ed                	in     ax,dx
c001ef70:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ef73:	0f b7 c0             	movzx  eax,ax
c001ef76:	66 31 d2             	xor    dx,dx
c001ef79:	09 d0                	or     eax,edx
c001ef7b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ef7e:	eb 1a                	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ef80:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef83:	83 c4 10             	add    esp,0x10
c001ef86:	eb 15                	jmp    c001ef9d <Vm::faultHandler(regs*)+0x673>
c001ef88:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ef8b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ef8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ef93:	74 03                	je     c001ef98 <Vm::faultHandler(regs*)+0x66e>
c001ef95:	ef                   	out    dx,eax
c001ef96:	eb 02                	jmp    c001ef9a <Vm::faultHandler(regs*)+0x670>
c001ef98:	66 ef                	out    dx,ax
c001ef9a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ef9d:	b0 01                	mov    al,0x1
c001ef9f:	eb 56                	jmp    c001eff7 <Vm::faultHandler(regs*)+0x6cd>
c001efa1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001efa5:	50                   	push   eax
c001efa6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001efaa:	50                   	push   eax
c001efab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001efaf:	50                   	push   eax
c001efb0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001efb4:	50                   	push   eax
c001efb5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001efb9:	50                   	push   eax
c001efba:	52                   	push   edx
c001efbb:	52                   	push   edx
c001efbc:	68 bf be 02 c0       	push   0xc002bebf
c001efc1:	e8 cd 37 ff ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c001efc6:	83 c4 20             	add    esp,0x20
c001efc9:	83 ec 0c             	sub    esp,0xc
c001efcc:	6a 60                	push   0x60
c001efce:	e8 52 f5 ff ff       	call   c001e525 <Vm::inbv(unsigned short)>
c001efd3:	83 c4 10             	add    esp,0x10
c001efd6:	3c 1c                	cmp    al,0x1c
c001efd8:	74 04                	je     c001efde <Vm::faultHandler(regs*)+0x6b4>
c001efda:	3c 5a                	cmp    al,0x5a
c001efdc:	75 eb                	jne    c001efc9 <Vm::faultHandler(regs*)+0x69f>
c001efde:	3c 5a                	cmp    al,0x5a
c001efe0:	74 04                	je     c001efe6 <Vm::faultHandler(regs*)+0x6bc>
c001efe2:	3c 1c                	cmp    al,0x1c
c001efe4:	75 0f                	jne    c001eff5 <Vm::faultHandler(regs*)+0x6cb>
c001efe6:	83 ec 0c             	sub    esp,0xc
c001efe9:	6a 60                	push   0x60
c001efeb:	e8 35 f5 ff ff       	call   c001e525 <Vm::inbv(unsigned short)>
c001eff0:	83 c4 10             	add    esp,0x10
c001eff3:	eb e9                	jmp    c001efde <Vm::faultHandler(regs*)+0x6b4>
c001eff5:	31 c0                	xor    eax,eax
c001eff7:	83 c4 1c             	add    esp,0x1c
c001effa:	5b                   	pop    ebx
c001effb:	5e                   	pop    esi
c001effc:	5f                   	pop    edi
c001effd:	5d                   	pop    ebp
c001effe:	c3                   	ret    

c001efff <Vm::fpuInternalTo32(unsigned long long)>:
c001efff:	57                   	push   edi
c001f000:	56                   	push   esi
c001f001:	53                   	push   ebx
c001f002:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00a:	89 d6                	mov    esi,edx
c001f00c:	89 d7                	mov    edi,edx
c001f00e:	89 c1                	mov    ecx,eax
c001f010:	c1 ef 14             	shr    edi,0x14
c001f013:	89 d3                	mov    ebx,edx
c001f015:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f01b:	31 d2                	xor    edx,edx
c001f01d:	89 f8                	mov    eax,edi
c001f01f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f025:	bf ff 00 00 00       	mov    edi,0xff
c001f02a:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f02f:	83 d2 ff             	adc    edx,0xffffffff
c001f032:	39 c7                	cmp    edi,eax
c001f034:	bf 00 00 00 00       	mov    edi,0x0
c001f039:	19 d7                	sbb    edi,edx
c001f03b:	72 15                	jb     c001f052 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f03d:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f041:	c1 e0 17             	shl    eax,0x17
c001f044:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f04a:	09 f1                	or     ecx,esi
c001f04c:	09 c1                	or     ecx,eax
c001f04e:	89 cf                	mov    edi,ecx
c001f050:	eb 02                	jmp    c001f054 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f052:	31 ff                	xor    edi,edi
c001f054:	89 f8                	mov    eax,edi
c001f056:	5b                   	pop    ebx
c001f057:	5e                   	pop    esi
c001f058:	5f                   	pop    edi
c001f059:	c3                   	ret    

c001f05a <Vm::fpuInternalTo64(unsigned long long)>:
c001f05a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f05e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f062:	c3                   	ret    

c001f063 <Vm::fpu32ToInternal(unsigned int)>:
c001f063:	57                   	push   edi
c001f064:	31 ff                	xor    edi,edi
c001f066:	56                   	push   esi
c001f067:	53                   	push   ebx
c001f068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f06c:	89 cb                	mov    ebx,ecx
c001f06e:	89 ce                	mov    esi,ecx
c001f070:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f076:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f07c:	c1 e9 17             	shr    ecx,0x17
c001f07f:	89 f0                	mov    eax,esi
c001f081:	0f b6 d1             	movzx  edx,cl
c001f084:	81 c2 80 03 00 00    	add    edx,0x380
c001f08a:	89 d1                	mov    ecx,edx
c001f08c:	89 fa                	mov    edx,edi
c001f08e:	c1 e1 14             	shl    ecx,0x14
c001f091:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f095:	c1 e0 1d             	shl    eax,0x1d
c001f098:	89 d7                	mov    edi,edx
c001f09a:	89 c6                	mov    esi,eax
c001f09c:	89 ca                	mov    edx,ecx
c001f09e:	89 f0                	mov    eax,esi
c001f0a0:	09 fa                	or     edx,edi
c001f0a2:	09 da                	or     edx,ebx
c001f0a4:	5b                   	pop    ebx
c001f0a5:	5e                   	pop    esi
c001f0a6:	5f                   	pop    edi
c001f0a7:	c3                   	ret    

c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>:
c001f0a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f0b0:	c3                   	ret    

c001f0b1 <Vm::fpuFloatToLong(unsigned long long)>:
c001f0b1:	57                   	push   edi
c001f0b2:	31 c0                	xor    eax,eax
c001f0b4:	56                   	push   esi
c001f0b5:	31 d2                	xor    edx,edx
c001f0b7:	53                   	push   ebx
c001f0b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f0bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f0c0:	89 d9                	mov    ecx,ebx
c001f0c2:	c1 e9 14             	shr    ecx,0x14
c001f0c5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f0cb:	89 cf                	mov    edi,ecx
c001f0cd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f0d3:	78 33                	js     c001f108 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f0d5:	89 d9                	mov    ecx,ebx
c001f0d7:	89 f0                	mov    eax,esi
c001f0d9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0df:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f0e5:	89 ca                	mov    edx,ecx
c001f0e7:	b9 34 00 00 00       	mov    ecx,0x34
c001f0ec:	29 f9                	sub    ecx,edi
c001f0ee:	0f ad d0             	shrd   eax,edx,cl
c001f0f1:	d3 fa                	sar    edx,cl
c001f0f3:	f6 c1 20             	test   cl,0x20
c001f0f6:	74 05                	je     c001f0fd <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f0f8:	89 d0                	mov    eax,edx
c001f0fa:	c1 fa 1f             	sar    edx,0x1f
c001f0fd:	85 db                	test   ebx,ebx
c001f0ff:	79 07                	jns    c001f108 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f101:	f7 d8                	neg    eax
c001f103:	83 d2 00             	adc    edx,0x0
c001f106:	f7 da                	neg    edx
c001f108:	5b                   	pop    ebx
c001f109:	5e                   	pop    esi
c001f10a:	5f                   	pop    edi
c001f10b:	c3                   	ret    

c001f10c <Vm::fpuULongToFloat(unsigned long long)>:
c001f10c:	57                   	push   edi
c001f10d:	31 c9                	xor    ecx,ecx
c001f10f:	56                   	push   esi
c001f110:	53                   	push   ebx
c001f111:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f115:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f119:	0f ba e7 14          	bt     edi,0x14
c001f11d:	72 07                	jb     c001f126 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f11f:	01 f6                	add    esi,esi
c001f121:	11 ff                	adc    edi,edi
c001f123:	41                   	inc    ecx
c001f124:	eb f3                	jmp    c001f119 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f126:	89 fa                	mov    edx,edi
c001f128:	89 f0                	mov    eax,esi
c001f12a:	bb 33 04 00 00       	mov    ebx,0x433
c001f12f:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f135:	29 cb                	sub    ebx,ecx
c001f137:	89 d9                	mov    ecx,ebx
c001f139:	5b                   	pop    ebx
c001f13a:	c1 e1 14             	shl    ecx,0x14
c001f13d:	5e                   	pop    esi
c001f13e:	09 ca                	or     edx,ecx
c001f140:	5f                   	pop    edi
c001f141:	c3                   	ret    

c001f142 <Vm::fpuLongToFloat(long long)>:
c001f142:	56                   	push   esi
c001f143:	31 c0                	xor    eax,eax
c001f145:	53                   	push   ebx
c001f146:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f14a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f14e:	39 c8                	cmp    eax,ecx
c001f150:	19 d8                	sbb    eax,ebx
c001f152:	7d 04                	jge    c001f158 <Vm::fpuLongToFloat(long long)+0x16>
c001f154:	31 f6                	xor    esi,esi
c001f156:	eb 0c                	jmp    c001f164 <Vm::fpuLongToFloat(long long)+0x22>
c001f158:	f7 d9                	neg    ecx
c001f15a:	be 01 00 00 00       	mov    esi,0x1
c001f15f:	83 d3 00             	adc    ebx,0x0
c001f162:	f7 db                	neg    ebx
c001f164:	31 c0                	xor    eax,eax
c001f166:	0f ba e3 14          	bt     ebx,0x14
c001f16a:	72 07                	jb     c001f173 <Vm::fpuLongToFloat(long long)+0x31>
c001f16c:	01 c9                	add    ecx,ecx
c001f16e:	11 db                	adc    ebx,ebx
c001f170:	40                   	inc    eax
c001f171:	eb f3                	jmp    c001f166 <Vm::fpuLongToFloat(long long)+0x24>
c001f173:	ba 33 04 00 00       	mov    edx,0x433
c001f178:	29 c2                	sub    edx,eax
c001f17a:	89 c8                	mov    eax,ecx
c001f17c:	c1 e2 14             	shl    edx,0x14
c001f17f:	89 d9                	mov    ecx,ebx
c001f181:	89 f3                	mov    ebx,esi
c001f183:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f189:	09 ca                	or     edx,ecx
c001f18b:	84 db                	test   bl,bl
c001f18d:	74 06                	je     c001f195 <Vm::fpuLongToFloat(long long)+0x53>
c001f18f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f195:	5b                   	pop    ebx
c001f196:	5e                   	pop    esi
c001f197:	c3                   	ret    

c001f198 <Vm::fpuGet0()>:
c001f198:	31 c0                	xor    eax,eax
c001f19a:	31 d2                	xor    edx,edx
c001f19c:	c3                   	ret    

c001f19d <Vm::fpuGet1()>:
c001f19d:	b8 01 00 00 00       	mov    eax,0x1
c001f1a2:	31 d2                	xor    edx,edx
c001f1a4:	c3                   	ret    

c001f1a5 <Vm::fpuGetPi()>:
c001f1a5:	b8 03 00 00 00       	mov    eax,0x3
c001f1aa:	31 d2                	xor    edx,edx
c001f1ac:	c3                   	ret    

c001f1ad <Vm::fpuGetLog2E()>:
c001f1ad:	83 ec 18             	sub    esp,0x18
c001f1b0:	68 1c bf 02 c0       	push   0xc002bf1c
c001f1b5:	e8 45 ad ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f1ba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1bf:	31 d2                	xor    edx,edx
c001f1c1:	83 c4 1c             	add    esp,0x1c
c001f1c4:	c3                   	ret    

c001f1c5 <Vm::fpuGetLogE2()>:
c001f1c5:	83 ec 18             	sub    esp,0x18
c001f1c8:	68 28 bf 02 c0       	push   0xc002bf28
c001f1cd:	e8 2d ad ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f1d2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1d7:	31 d2                	xor    edx,edx
c001f1d9:	83 c4 1c             	add    esp,0x1c
c001f1dc:	c3                   	ret    

c001f1dd <Vm::fpuGetLog210()>:
c001f1dd:	83 ec 18             	sub    esp,0x18
c001f1e0:	68 34 bf 02 c0       	push   0xc002bf34
c001f1e5:	e8 15 ad ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f1ea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f1ef:	31 d2                	xor    edx,edx
c001f1f1:	83 c4 1c             	add    esp,0x1c
c001f1f4:	c3                   	ret    

c001f1f5 <Vm::fpuGetLog102()>:
c001f1f5:	83 ec 18             	sub    esp,0x18
c001f1f8:	68 41 bf 02 c0       	push   0xc002bf41
c001f1fd:	e8 fd ac ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f202:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f207:	31 d2                	xor    edx,edx
c001f209:	83 c4 1c             	add    esp,0x1c
c001f20c:	c3                   	ret    

c001f20d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f20d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f211:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f219:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f21d:	0f 92 c0             	setb   al
c001f220:	c3                   	ret    

c001f221 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f221:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f229:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f22d:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f231:	09 c2                	or     edx,eax
c001f233:	0f 94 c0             	sete   al
c001f236:	c3                   	ret    

c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f237:	57                   	push   edi
c001f238:	56                   	push   esi
c001f239:	53                   	push   ebx
c001f23a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f23e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f242:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f246:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f24a:	57                   	push   edi
c001f24b:	56                   	push   esi
c001f24c:	53                   	push   ebx
c001f24d:	51                   	push   ecx
c001f24e:	e8 ce ff ff ff       	call   c001f221 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	88 c2                	mov    dl,al
c001f258:	31 c0                	xor    eax,eax
c001f25a:	84 d2                	test   dl,dl
c001f25c:	75 0c                	jne    c001f26a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f25e:	57                   	push   edi
c001f25f:	56                   	push   esi
c001f260:	53                   	push   ebx
c001f261:	51                   	push   ecx
c001f262:	e8 a6 ff ff ff       	call   c001f20d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	83 e0 01             	and    eax,0x1
c001f26d:	5b                   	pop    ebx
c001f26e:	88 c1                	mov    cl,al
c001f270:	83 e2 01             	and    edx,0x1
c001f273:	a0 c1 10 03 c0       	mov    al,ds:0xc00310c1
c001f278:	c1 e2 06             	shl    edx,0x6
c001f27b:	83 e0 ba             	and    eax,0xffffffba
c001f27e:	5e                   	pop    esi
c001f27f:	09 c8                	or     eax,ecx
c001f281:	5f                   	pop    edi
c001f282:	09 d0                	or     eax,edx
c001f284:	a2 c1 10 03 c0       	mov    ds:0xc00310c1,al
c001f289:	c3                   	ret    

c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f28a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f28e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f292:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f296:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f29a:	c3                   	ret    

c001f29b <Vm::fpuAbs(unsigned long long)>:
c001f29b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f29f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2a3:	c3                   	ret    

c001f2a4 <Vm::fpuChs(unsigned long long)>:
c001f2a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2ac:	f7 d8                	neg    eax
c001f2ae:	83 d2 00             	adc    edx,0x0
c001f2b1:	f7 da                	neg    edx
c001f2b3:	c3                   	ret    

c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f2b4:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f2b8:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f2bd:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f2c1:	eb c7                	jmp    c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f2c3:	53                   	push   ebx
c001f2c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f2c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f2cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f2d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f2d4:	0f af ca             	imul   ecx,edx
c001f2d7:	0f af d8             	imul   ebx,eax
c001f2da:	f7 e2                	mul    edx
c001f2dc:	01 d9                	add    ecx,ebx
c001f2de:	5b                   	pop    ebx
c001f2df:	01 ca                	add    edx,ecx
c001f2e1:	c3                   	ret    

c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f2e2:	83 ec 0c             	sub    esp,0xc
c001f2e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2f5:	e8 da 74 00 00       	call   c00267d4 <__udivdi3>
c001f2fa:	83 c4 1c             	add    esp,0x1c
c001f2fd:	c3                   	ret    

c001f2fe <Vm::fpuSquare(unsigned long long)>:
c001f2fe:	50                   	push   eax
c001f2ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f303:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f307:	52                   	push   edx
c001f308:	50                   	push   eax
c001f309:	52                   	push   edx
c001f30a:	50                   	push   eax
c001f30b:	e8 b3 ff ff ff       	call   c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f310:	83 c4 14             	add    esp,0x14
c001f313:	c3                   	ret    

c001f314 <Vm::fpuGetReg(int)>:
c001f314:	83 ec 0c             	sub    esp,0xc
c001f317:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f31c:	76 10                	jbe    c001f32e <Vm::fpuGetReg(int)+0x1a>
c001f31e:	83 ec 0c             	sub    esp,0xc
c001f321:	68 4e bf 02 c0       	push   0xc002bf4e
c001f326:	e8 d4 ab ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f32b:	83 c4 10             	add    esp,0x10
c001f32e:	a0 c1 10 03 c0       	mov    al,ds:0xc00310c1
c001f333:	b9 08 00 00 00       	mov    ecx,0x8
c001f338:	c0 e8 03             	shr    al,0x3
c001f33b:	83 e0 07             	and    eax,0x7
c001f33e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f342:	99                   	cdq    
c001f343:	f7 f9                	idiv   ecx
c001f345:	8b 04 d5 c4 10 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcef3c]
c001f34c:	8b 14 d5 c8 10 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcef38]
c001f353:	83 c4 0c             	add    esp,0xc
c001f356:	c3                   	ret    

c001f357 <Vm::fpuSetReg(int, unsigned long long)>:
c001f357:	57                   	push   edi
c001f358:	56                   	push   esi
c001f359:	52                   	push   edx
c001f35a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f35e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f362:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f367:	76 10                	jbe    c001f379 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f369:	83 ec 0c             	sub    esp,0xc
c001f36c:	68 61 bf 02 c0       	push   0xc002bf61
c001f371:	e8 89 ab ff ff       	call   c0019eff <Krnl::panic(char const*)>
c001f376:	83 c4 10             	add    esp,0x10
c001f379:	a0 c1 10 03 c0       	mov    al,ds:0xc00310c1
c001f37e:	b9 08 00 00 00       	mov    ecx,0x8
c001f383:	c0 e8 03             	shr    al,0x3
c001f386:	83 e0 07             	and    eax,0x7
c001f389:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f38d:	99                   	cdq    
c001f38e:	f7 f9                	idiv   ecx
c001f390:	89 34 d5 c4 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef3c],esi
c001f397:	89 3c d5 c8 10 03 c0 	mov    DWORD PTR [edx*8-0x3ffcef38],edi
c001f39e:	58                   	pop    eax
c001f39f:	5e                   	pop    esi
c001f3a0:	5f                   	pop    edi
c001f3a1:	c3                   	ret    

c001f3a2 <Vm::fpuPush(unsigned long long)>:
c001f3a2:	a0 c1 10 03 c0       	mov    al,ds:0xc00310c1
c001f3a7:	c0 e8 03             	shr    al,0x3
c001f3aa:	83 e0 07             	and    eax,0x7
c001f3ad:	83 c0 07             	add    eax,0x7
c001f3b0:	88 c2                	mov    dl,al
c001f3b2:	83 e0 07             	and    eax,0x7
c001f3b5:	83 e2 07             	and    edx,0x7
c001f3b8:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f3bf:	8a 15 c1 10 03 c0    	mov    dl,BYTE PTR ds:0xc00310c1
c001f3c5:	83 e2 c7             	and    edx,0xffffffc7
c001f3c8:	09 ca                	or     edx,ecx
c001f3ca:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3ce:	88 15 c1 10 03 c0    	mov    BYTE PTR ds:0xc00310c1,dl
c001f3d4:	89 0c c5 c8 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef38],ecx
c001f3db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3df:	89 14 c5 c4 10 03 c0 	mov    DWORD PTR [eax*8-0x3ffcef3c],edx
c001f3e6:	a1 04 11 03 c0       	mov    eax,ds:0xc0031104
c001f3eb:	83 f8 08             	cmp    eax,0x8
c001f3ee:	75 08                	jne    c001f3f8 <Vm::fpuPush(unsigned long long)+0x56>
c001f3f0:	80 0d c0 10 03 c0 40 	or     BYTE PTR ds:0xc00310c0,0x40
c001f3f7:	c3                   	ret    
c001f3f8:	40                   	inc    eax
c001f3f9:	a3 04 11 03 c0       	mov    ds:0xc0031104,eax
c001f3fe:	c3                   	ret    

c001f3ff <Vm::fpuPop()>:
c001f3ff:	8a 0d c1 10 03 c0    	mov    cl,BYTE PTR ds:0xc00310c1
c001f405:	53                   	push   ebx
c001f406:	c0 e9 03             	shr    cl,0x3
c001f409:	8a 1d c1 10 03 c0    	mov    bl,BYTE PTR ds:0xc00310c1
c001f40f:	83 e1 07             	and    ecx,0x7
c001f412:	83 e3 c7             	and    ebx,0xffffffc7
c001f415:	8b 04 cd c4 10 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcef3c]
c001f41c:	8b 14 cd c8 10 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcef38]
c001f423:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f42a:	83 e1 38             	and    ecx,0x38
c001f42d:	09 d9                	or     ecx,ebx
c001f42f:	88 0d c1 10 03 c0    	mov    BYTE PTR ds:0xc00310c1,cl
c001f435:	8b 0d 04 11 03 c0    	mov    ecx,DWORD PTR ds:0xc0031104
c001f43b:	85 c9                	test   ecx,ecx
c001f43d:	74 09                	je     c001f448 <Vm::fpuPop()+0x49>
c001f43f:	49                   	dec    ecx
c001f440:	89 0d 04 11 03 c0    	mov    DWORD PTR ds:0xc0031104,ecx
c001f446:	eb 07                	jmp    c001f44f <Vm::fpuPop()+0x50>
c001f448:	80 0d c0 10 03 c0 40 	or     BYTE PTR ds:0xc00310c0,0x40
c001f44f:	5b                   	pop    ebx
c001f450:	c3                   	ret    

c001f451 <Vm::x87Handler(regs*)>:
c001f451:	55                   	push   ebp
c001f452:	57                   	push   edi
c001f453:	56                   	push   esi
c001f454:	53                   	push   ebx
c001f455:	83 ec 1c             	sub    esp,0x1c
c001f458:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f45c:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f461:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f464:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f46c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f470:	50                   	push   eax
c001f471:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f475:	50                   	push   eax
c001f476:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f47a:	50                   	push   eax
c001f47b:	53                   	push   ebx
c001f47c:	e8 97 a1 ff ff       	call   c0019618 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f481:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f484:	83 c4 10             	add    esp,0x10
c001f487:	89 c6                	mov    esi,eax
c001f489:	80 fa d9             	cmp    dl,0xd9
c001f48c:	0f 85 52 01 00 00    	jne    c001f5e4 <Vm::x87Handler(regs*)+0x193>
c001f492:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f496:	8d 50 20             	lea    edx,[eax+0x20]
c001f499:	80 fa 0e             	cmp    dl,0xe
c001f49c:	0f 87 86 00 00 00    	ja     c001f528 <Vm::x87Handler(regs*)+0xd7>
c001f4a2:	0f b6 d2             	movzx  edx,dl
c001f4a5:	ff 24 95 74 bf 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd408c]
c001f4ac:	e8 e7 fc ff ff       	call   c001f198 <Vm::fpuGet0()>
c001f4b1:	eb 05                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f4b3:	e8 e5 fc ff ff       	call   c001f19d <Vm::fpuGet1()>
c001f4b8:	57                   	push   edi
c001f4b9:	57                   	push   edi
c001f4ba:	52                   	push   edx
c001f4bb:	50                   	push   eax
c001f4bc:	e8 e1 fe ff ff       	call   c001f3a2 <Vm::fpuPush(unsigned long long)>
c001f4c1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f4c5:	83 c4 10             	add    esp,0x10
c001f4c8:	b0 01                	mov    al,0x1
c001f4ca:	e9 e3 09 00 00       	jmp    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001f4cf:	83 ec 0c             	sub    esp,0xc
c001f4d2:	6a 00                	push   0x0
c001f4d4:	e8 3b fe ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f4d9:	59                   	pop    ecx
c001f4da:	5e                   	pop    esi
c001f4db:	52                   	push   edx
c001f4dc:	50                   	push   eax
c001f4dd:	e8 c2 fd ff ff       	call   c001f2a4 <Vm::fpuChs(unsigned long long)>
c001f4e2:	eb 13                	jmp    c001f4f7 <Vm::x87Handler(regs*)+0xa6>
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	6a 00                	push   0x0
c001f4e9:	e8 26 fe ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f4ee:	5f                   	pop    edi
c001f4ef:	5d                   	pop    ebp
c001f4f0:	52                   	push   edx
c001f4f1:	50                   	push   eax
c001f4f2:	e8 a4 fd ff ff       	call   c001f29b <Vm::fpuAbs(unsigned long long)>
c001f4f7:	83 c4 0c             	add    esp,0xc
c001f4fa:	52                   	push   edx
c001f4fb:	50                   	push   eax
c001f4fc:	6a 00                	push   0x0
c001f4fe:	e8 54 fe ff ff       	call   c001f357 <Vm::fpuSetReg(int, unsigned long long)>
c001f503:	eb bc                	jmp    c001f4c1 <Vm::x87Handler(regs*)+0x70>
c001f505:	e8 d3 fc ff ff       	call   c001f1dd <Vm::fpuGetLog210()>
c001f50a:	eb ac                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f50c:	e8 9c fc ff ff       	call   c001f1ad <Vm::fpuGetLog2E()>
c001f511:	eb a5                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f513:	e8 8d fc ff ff       	call   c001f1a5 <Vm::fpuGetPi()>
c001f518:	eb 9e                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f51a:	e8 d6 fc ff ff       	call   c001f1f5 <Vm::fpuGetLog102()>
c001f51f:	eb 97                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f521:	e8 9f fc ff ff       	call   c001f1c5 <Vm::fpuGetLogE2()>
c001f526:	eb 90                	jmp    c001f4b8 <Vm::x87Handler(regs*)+0x67>
c001f528:	8d 50 40             	lea    edx,[eax+0x40]
c001f52b:	80 fa 07             	cmp    dl,0x7
c001f52e:	77 15                	ja     c001f545 <Vm::x87Handler(regs*)+0xf4>
c001f530:	83 ec 0c             	sub    esp,0xc
c001f533:	2d c0 00 00 00       	sub    eax,0xc0
c001f538:	50                   	push   eax
c001f539:	e8 d6 fd ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f53e:	59                   	pop    ecx
c001f53f:	5e                   	pop    esi
c001f540:	e9 75 ff ff ff       	jmp    c001f4ba <Vm::x87Handler(regs*)+0x69>
c001f545:	8d 50 38             	lea    edx,[eax+0x38]
c001f548:	80 fa 07             	cmp    dl,0x7
c001f54b:	77 3c                	ja     c001f589 <Vm::x87Handler(regs*)+0x138>
c001f54d:	83 ec 0c             	sub    esp,0xc
c001f550:	2d c8 00 00 00       	sub    eax,0xc8
c001f555:	50                   	push   eax
c001f556:	e8 b9 fd ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f55b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f562:	89 c6                	mov    esi,eax
c001f564:	89 d7                	mov    edi,edx
c001f566:	e8 a9 fd ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f56b:	83 c4 0c             	add    esp,0xc
c001f56e:	52                   	push   edx
c001f56f:	50                   	push   eax
c001f570:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f574:	2d c8 00 00 00       	sub    eax,0xc8
c001f579:	50                   	push   eax
c001f57a:	e8 d8 fd ff ff       	call   c001f357 <Vm::fpuSetReg(int, unsigned long long)>
c001f57f:	83 c4 0c             	add    esp,0xc
c001f582:	57                   	push   edi
c001f583:	56                   	push   esi
c001f584:	e9 73 ff ff ff       	jmp    c001f4fc <Vm::x87Handler(regs*)+0xab>
c001f589:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f58d:	84 d2                	test   dl,dl
c001f58f:	75 0f                	jne    c001f5a0 <Vm::x87Handler(regs*)+0x14f>
c001f591:	83 ec 0c             	sub    esp,0xc
c001f594:	ff 36                	push   DWORD PTR [esi]
c001f596:	e8 c8 fa ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001f59b:	e9 bf 00 00 00       	jmp    c001f65f <Vm::x87Handler(regs*)+0x20e>
c001f5a0:	80 fa 03             	cmp    dl,0x3
c001f5a3:	75 13                	jne    c001f5b8 <Vm::x87Handler(regs*)+0x167>
c001f5a5:	e8 55 fe ff ff       	call   c001f3ff <Vm::fpuPop()>
c001f5aa:	55                   	push   ebp
c001f5ab:	55                   	push   ebp
c001f5ac:	52                   	push   edx
c001f5ad:	50                   	push   eax
c001f5ae:	e8 4c fa ff ff       	call   c001efff <Vm::fpuInternalTo32(unsigned long long)>
c001f5b3:	e9 88 00 00 00       	jmp    c001f640 <Vm::x87Handler(regs*)+0x1ef>
c001f5b8:	80 fa 05             	cmp    dl,0x5
c001f5bb:	75 0e                	jne    c001f5cb <Vm::x87Handler(regs*)+0x17a>
c001f5bd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f5c0:	66 a3 c2 10 03 c0    	mov    ds:0xc00310c2,ax
c001f5c6:	e9 df 00 00 00       	jmp    c001f6aa <Vm::x87Handler(regs*)+0x259>
c001f5cb:	31 c0                	xor    eax,eax
c001f5cd:	80 fa 07             	cmp    dl,0x7
c001f5d0:	0f 85 dc 08 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001f5d6:	66 a1 c2 10 03 c0    	mov    ax,ds:0xc00310c2
c001f5dc:	66 89 06             	mov    WORD PTR [esi],ax
c001f5df:	e9 c6 00 00 00       	jmp    c001f6aa <Vm::x87Handler(regs*)+0x259>
c001f5e4:	80 fa d8             	cmp    dl,0xd8
c001f5e7:	0f 84 c9 00 00 00    	je     c001f6b6 <Vm::x87Handler(regs*)+0x265>
c001f5ed:	80 fa dc             	cmp    dl,0xdc
c001f5f0:	0f 84 0d 02 00 00    	je     c001f803 <Vm::x87Handler(regs*)+0x3b2>
c001f5f6:	80 fa de             	cmp    dl,0xde
c001f5f9:	0f 84 cd 02 00 00    	je     c001f8cc <Vm::x87Handler(regs*)+0x47b>
c001f5ff:	80 fa dd             	cmp    dl,0xdd
c001f602:	0f 84 5f 04 00 00    	je     c001fa67 <Vm::x87Handler(regs*)+0x616>
c001f608:	80 fa da             	cmp    dl,0xda
c001f60b:	0f 84 24 05 00 00    	je     c001fb35 <Vm::x87Handler(regs*)+0x6e4>
c001f611:	80 fa df             	cmp    dl,0xdf
c001f614:	0f 84 68 05 00 00    	je     c001fb82 <Vm::x87Handler(regs*)+0x731>
c001f61a:	31 c0                	xor    eax,eax
c001f61c:	80 fa db             	cmp    dl,0xdb
c001f61f:	0f 85 8d 08 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001f625:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f629:	80 fa 03             	cmp    dl,0x3
c001f62c:	0f 85 70 06 00 00    	jne    c001fca2 <Vm::x87Handler(regs*)+0x851>
c001f632:	e8 c8 fd ff ff       	call   c001f3ff <Vm::fpuPop()>
c001f637:	55                   	push   ebp
c001f638:	55                   	push   ebp
c001f639:	52                   	push   edx
c001f63a:	50                   	push   eax
c001f63b:	e8 71 fa ff ff       	call   c001f0b1 <Vm::fpuFloatToLong(unsigned long long)>
c001f640:	83 c4 10             	add    esp,0x10
c001f643:	89 06                	mov    DWORD PTR [esi],eax
c001f645:	eb 63                	jmp    c001f6aa <Vm::x87Handler(regs*)+0x259>
c001f647:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f64b:	84 d2                	test   dl,dl
c001f64d:	0f 85 e6 05 00 00    	jne    c001fc39 <Vm::x87Handler(regs*)+0x7e8>
c001f653:	57                   	push   edi
c001f654:	57                   	push   edi
c001f655:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f658:	ff 36                	push   DWORD PTR [esi]
c001f65a:	e8 49 fa ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001f65f:	5e                   	pop    esi
c001f660:	5f                   	pop    edi
c001f661:	52                   	push   edx
c001f662:	50                   	push   eax
c001f663:	e8 3a fd ff ff       	call   c001f3a2 <Vm::fpuPush(unsigned long long)>
c001f668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f66c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f66f:	e9 51 fe ff ff       	jmp    c001f4c5 <Vm::x87Handler(regs*)+0x74>
c001f674:	80 fa 03             	cmp    dl,0x3
c001f677:	0f 85 d7 06 00 00    	jne    c001fd54 <Vm::x87Handler(regs*)+0x903>
c001f67d:	57                   	push   edi
c001f67e:	57                   	push   edi
c001f67f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f682:	ff 36                	push   DWORD PTR [esi]
c001f684:	e8 1f fa ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001f689:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f690:	89 c6                	mov    esi,eax
c001f692:	89 d7                	mov    edi,edx
c001f694:	e8 7b fc ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f699:	57                   	push   edi
c001f69a:	56                   	push   esi
c001f69b:	52                   	push   edx
c001f69c:	50                   	push   eax
c001f69d:	e8 95 fb ff ff       	call   c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f6a2:	83 c4 20             	add    esp,0x20
c001f6a5:	e8 55 fd ff ff       	call   c001f3ff <Vm::fpuPop()>
c001f6aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6ae:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6b1:	e9 12 fe ff ff       	jmp    c001f4c8 <Vm::x87Handler(regs*)+0x77>
c001f6b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6ba:	8d 50 40             	lea    edx,[eax+0x40]
c001f6bd:	80 fa 07             	cmp    dl,0x7
c001f6c0:	77 29                	ja     c001f6eb <Vm::x87Handler(regs*)+0x29a>
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	2d c0 00 00 00       	sub    eax,0xc0
c001f6ca:	50                   	push   eax
c001f6cb:	e8 44 fc ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f6d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d7:	89 c6                	mov    esi,eax
c001f6d9:	89 d7                	mov    edi,edx
c001f6db:	e8 34 fc ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f6e0:	57                   	push   edi
c001f6e1:	56                   	push   esi
c001f6e2:	52                   	push   edx
c001f6e3:	50                   	push   eax
c001f6e4:	e8 a1 fb ff ff       	call   c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6e9:	eb 2f                	jmp    c001f71a <Vm::x87Handler(regs*)+0x2c9>
c001f6eb:	8d 50 38             	lea    edx,[eax+0x38]
c001f6ee:	80 fa 07             	cmp    dl,0x7
c001f6f1:	77 2f                	ja     c001f722 <Vm::x87Handler(regs*)+0x2d1>
c001f6f3:	83 ec 0c             	sub    esp,0xc
c001f6f6:	2d c8 00 00 00       	sub    eax,0xc8
c001f6fb:	50                   	push   eax
c001f6fc:	e8 13 fc ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f701:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f708:	89 c6                	mov    esi,eax
c001f70a:	89 d7                	mov    edi,edx
c001f70c:	e8 03 fc ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f711:	57                   	push   edi
c001f712:	56                   	push   esi
c001f713:	52                   	push   edx
c001f714:	50                   	push   eax
c001f715:	e8 a9 fb ff ff       	call   c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f71a:	83 c4 1c             	add    esp,0x1c
c001f71d:	e9 d8 fd ff ff       	jmp    c001f4fa <Vm::x87Handler(regs*)+0xa9>
c001f722:	8d 50 30             	lea    edx,[eax+0x30]
c001f725:	80 fa 07             	cmp    dl,0x7
c001f728:	77 0d                	ja     c001f737 <Vm::x87Handler(regs*)+0x2e6>
c001f72a:	83 ec 0c             	sub    esp,0xc
c001f72d:	2d d0 00 00 00       	sub    eax,0xd0
c001f732:	e9 99 03 00 00       	jmp    c001fad0 <Vm::x87Handler(regs*)+0x67f>
c001f737:	8d 50 28             	lea    edx,[eax+0x28]
c001f73a:	80 fa 07             	cmp    dl,0x7
c001f73d:	77 0d                	ja     c001f74c <Vm::x87Handler(regs*)+0x2fb>
c001f73f:	83 ec 0c             	sub    esp,0xc
c001f742:	2d d8 00 00 00       	sub    eax,0xd8
c001f747:	e9 c0 03 00 00       	jmp    c001fb0c <Vm::x87Handler(regs*)+0x6bb>
c001f74c:	8d 50 20             	lea    edx,[eax+0x20]
c001f74f:	80 fa 07             	cmp    dl,0x7
c001f752:	77 1b                	ja     c001f76f <Vm::x87Handler(regs*)+0x31e>
c001f754:	83 ec 0c             	sub    esp,0xc
c001f757:	2d e0 00 00 00       	sub    eax,0xe0
c001f75c:	50                   	push   eax
c001f75d:	e8 b2 fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f762:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f769:	89 c6                	mov    esi,eax
c001f76b:	89 d7                	mov    edi,edx
c001f76d:	eb 22                	jmp    c001f791 <Vm::x87Handler(regs*)+0x340>
c001f76f:	8d 50 18             	lea    edx,[eax+0x18]
c001f772:	80 fa 07             	cmp    dl,0x7
c001f775:	77 2d                	ja     c001f7a4 <Vm::x87Handler(regs*)+0x353>
c001f777:	83 ec 0c             	sub    esp,0xc
c001f77a:	6a 00                	push   0x0
c001f77c:	e8 93 fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f781:	89 c6                	mov    esi,eax
c001f783:	89 d7                	mov    edi,edx
c001f785:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f789:	2d e8 00 00 00       	sub    eax,0xe8
c001f78e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f791:	e8 7e fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f796:	57                   	push   edi
c001f797:	56                   	push   esi
c001f798:	52                   	push   edx
c001f799:	50                   	push   eax
c001f79a:	e8 15 fb ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f79f:	e9 76 ff ff ff       	jmp    c001f71a <Vm::x87Handler(regs*)+0x2c9>
c001f7a4:	8d 50 10             	lea    edx,[eax+0x10]
c001f7a7:	80 fa 07             	cmp    dl,0x7
c001f7aa:	77 1b                	ja     c001f7c7 <Vm::x87Handler(regs*)+0x376>
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	2d f0 00 00 00       	sub    eax,0xf0
c001f7b4:	50                   	push   eax
c001f7b5:	e8 5a fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f7ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7c1:	89 c6                	mov    esi,eax
c001f7c3:	89 d7                	mov    edi,edx
c001f7c5:	eb 22                	jmp    c001f7e9 <Vm::x87Handler(regs*)+0x398>
c001f7c7:	3c f7                	cmp    al,0xf7
c001f7c9:	0f 86 d1 03 00 00    	jbe    c001fba0 <Vm::x87Handler(regs*)+0x74f>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	6a 00                	push   0x0
c001f7d4:	e8 3b fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f7d9:	89 c6                	mov    esi,eax
c001f7db:	89 d7                	mov    edi,edx
c001f7dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e1:	2d f8 00 00 00       	sub    eax,0xf8
c001f7e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7e9:	e8 26 fb ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f7ee:	57                   	push   edi
c001f7ef:	56                   	push   esi
c001f7f0:	52                   	push   edx
c001f7f1:	50                   	push   eax
c001f7f2:	e8 eb fa ff ff       	call   c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7f7:	83 c4 1c             	add    esp,0x1c
c001f7fa:	52                   	push   edx
c001f7fb:	50                   	push   eax
c001f7fc:	6a 00                	push   0x0
c001f7fe:	e9 51 02 00 00       	jmp    c001fa54 <Vm::x87Handler(regs*)+0x603>
c001f803:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f807:	8d 50 40             	lea    edx,[eax+0x40]
c001f80a:	80 fa 07             	cmp    dl,0x7
c001f80d:	77 37                	ja     c001f846 <Vm::x87Handler(regs*)+0x3f5>
c001f80f:	83 ec 0c             	sub    esp,0xc
c001f812:	2d c0 00 00 00       	sub    eax,0xc0
c001f817:	50                   	push   eax
c001f818:	e8 f7 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f81d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f824:	89 c6                	mov    esi,eax
c001f826:	89 d7                	mov    edi,edx
c001f828:	e8 e7 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f82d:	57                   	push   edi
c001f82e:	56                   	push   esi
c001f82f:	52                   	push   edx
c001f830:	50                   	push   eax
c001f831:	e8 54 fa ff ff       	call   c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f836:	83 c4 1c             	add    esp,0x1c
c001f839:	52                   	push   edx
c001f83a:	50                   	push   eax
c001f83b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f83f:	2d c0 00 00 00       	sub    eax,0xc0
c001f844:	eb 3d                	jmp    c001f883 <Vm::x87Handler(regs*)+0x432>
c001f846:	8d 50 38             	lea    edx,[eax+0x38]
c001f849:	80 fa 07             	cmp    dl,0x7
c001f84c:	77 3b                	ja     c001f889 <Vm::x87Handler(regs*)+0x438>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	2d c8 00 00 00       	sub    eax,0xc8
c001f856:	50                   	push   eax
c001f857:	e8 b8 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f85c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f863:	89 c6                	mov    esi,eax
c001f865:	89 d7                	mov    edi,edx
c001f867:	e8 a8 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f86c:	57                   	push   edi
c001f86d:	56                   	push   esi
c001f86e:	52                   	push   edx
c001f86f:	50                   	push   eax
c001f870:	e8 4e fa ff ff       	call   c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f875:	83 c4 1c             	add    esp,0x1c
c001f878:	52                   	push   edx
c001f879:	50                   	push   eax
c001f87a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87e:	2d c8 00 00 00       	sub    eax,0xc8
c001f883:	50                   	push   eax
c001f884:	e9 75 fc ff ff       	jmp    c001f4fe <Vm::x87Handler(regs*)+0xad>
c001f889:	83 c0 18             	add    eax,0x18
c001f88c:	3c 07                	cmp    al,0x7
c001f88e:	0f 87 3b 04 00 00    	ja     c001fccf <Vm::x87Handler(regs*)+0x87e>
c001f894:	83 ec 0c             	sub    esp,0xc
c001f897:	6a 00                	push   0x0
c001f899:	e8 76 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f89e:	89 c6                	mov    esi,eax
c001f8a0:	89 d7                	mov    edi,edx
c001f8a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a6:	2d e8 00 00 00       	sub    eax,0xe8
c001f8ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8ae:	e8 61 fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f8b3:	57                   	push   edi
c001f8b4:	56                   	push   esi
c001f8b5:	52                   	push   edx
c001f8b6:	50                   	push   eax
c001f8b7:	e8 f8 f9 ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f8bc:	83 c4 1c             	add    esp,0x1c
c001f8bf:	52                   	push   edx
c001f8c0:	50                   	push   eax
c001f8c1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8c5:	2d e8 00 00 00       	sub    eax,0xe8
c001f8ca:	eb b7                	jmp    c001f883 <Vm::x87Handler(regs*)+0x432>
c001f8cc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8d0:	8d 50 40             	lea    edx,[eax+0x40]
c001f8d3:	80 fa 07             	cmp    dl,0x7
c001f8d6:	77 3a                	ja     c001f912 <Vm::x87Handler(regs*)+0x4c1>
c001f8d8:	83 ec 0c             	sub    esp,0xc
c001f8db:	2d c0 00 00 00       	sub    eax,0xc0
c001f8e0:	50                   	push   eax
c001f8e1:	e8 2e fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f8e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8ed:	89 c6                	mov    esi,eax
c001f8ef:	89 d7                	mov    edi,edx
c001f8f1:	e8 1e fa ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f8f6:	57                   	push   edi
c001f8f7:	56                   	push   esi
c001f8f8:	52                   	push   edx
c001f8f9:	50                   	push   eax
c001f8fa:	e8 8b f9 ff ff       	call   c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f8ff:	83 c4 1c             	add    esp,0x1c
c001f902:	52                   	push   edx
c001f903:	50                   	push   eax
c001f904:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f908:	2d c0 00 00 00       	sub    eax,0xc0
c001f90d:	e9 9e 01 00 00       	jmp    c001fab0 <Vm::x87Handler(regs*)+0x65f>
c001f912:	8d 50 20             	lea    edx,[eax+0x20]
c001f915:	80 fa 07             	cmp    dl,0x7
c001f918:	77 3a                	ja     c001f954 <Vm::x87Handler(regs*)+0x503>
c001f91a:	83 ec 0c             	sub    esp,0xc
c001f91d:	2d e0 00 00 00       	sub    eax,0xe0
c001f922:	50                   	push   eax
c001f923:	e8 ec f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f928:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f92f:	89 c6                	mov    esi,eax
c001f931:	89 d7                	mov    edi,edx
c001f933:	e8 dc f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f938:	57                   	push   edi
c001f939:	56                   	push   esi
c001f93a:	52                   	push   edx
c001f93b:	50                   	push   eax
c001f93c:	e8 73 f9 ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f941:	83 c4 1c             	add    esp,0x1c
c001f944:	52                   	push   edx
c001f945:	50                   	push   eax
c001f946:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f94a:	2d e0 00 00 00       	sub    eax,0xe0
c001f94f:	e9 5c 01 00 00       	jmp    c001fab0 <Vm::x87Handler(regs*)+0x65f>
c001f954:	8d 50 18             	lea    edx,[eax+0x18]
c001f957:	80 fa 07             	cmp    dl,0x7
c001f95a:	77 3b                	ja     c001f997 <Vm::x87Handler(regs*)+0x546>
c001f95c:	83 ec 0c             	sub    esp,0xc
c001f95f:	6a 00                	push   0x0
c001f961:	e8 ae f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f966:	89 c6                	mov    esi,eax
c001f968:	89 d7                	mov    edi,edx
c001f96a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f96e:	2d e8 00 00 00       	sub    eax,0xe8
c001f973:	89 04 24             	mov    DWORD PTR [esp],eax
c001f976:	e8 99 f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f97b:	57                   	push   edi
c001f97c:	56                   	push   esi
c001f97d:	52                   	push   edx
c001f97e:	50                   	push   eax
c001f97f:	e8 30 f9 ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f984:	83 c4 1c             	add    esp,0x1c
c001f987:	52                   	push   edx
c001f988:	50                   	push   eax
c001f989:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f98d:	2d e8 00 00 00       	sub    eax,0xe8
c001f992:	e9 19 01 00 00       	jmp    c001fab0 <Vm::x87Handler(regs*)+0x65f>
c001f997:	8d 50 38             	lea    edx,[eax+0x38]
c001f99a:	80 fa 07             	cmp    dl,0x7
c001f99d:	77 37                	ja     c001f9d6 <Vm::x87Handler(regs*)+0x585>
c001f99f:	83 ec 0c             	sub    esp,0xc
c001f9a2:	2d c8 00 00 00       	sub    eax,0xc8
c001f9a7:	50                   	push   eax
c001f9a8:	e8 67 f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f9ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9b4:	89 c6                	mov    esi,eax
c001f9b6:	89 d7                	mov    edi,edx
c001f9b8:	e8 57 f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f9bd:	57                   	push   edi
c001f9be:	56                   	push   esi
c001f9bf:	52                   	push   edx
c001f9c0:	50                   	push   eax
c001f9c1:	e8 fd f8 ff ff       	call   c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9c6:	83 c4 1c             	add    esp,0x1c
c001f9c9:	52                   	push   edx
c001f9ca:	50                   	push   eax
c001f9cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9cf:	2d c8 00 00 00       	sub    eax,0xc8
c001f9d4:	eb 7d                	jmp    c001fa53 <Vm::x87Handler(regs*)+0x602>
c001f9d6:	3c f7                	cmp    al,0xf7
c001f9d8:	76 38                	jbe    c001fa12 <Vm::x87Handler(regs*)+0x5c1>
c001f9da:	83 ec 0c             	sub    esp,0xc
c001f9dd:	6a 00                	push   0x0
c001f9df:	e8 30 f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f9e4:	89 c6                	mov    esi,eax
c001f9e6:	89 d7                	mov    edi,edx
c001f9e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ec:	2d f8 00 00 00       	sub    eax,0xf8
c001f9f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9f4:	e8 1b f9 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001f9f9:	57                   	push   edi
c001f9fa:	56                   	push   esi
c001f9fb:	52                   	push   edx
c001f9fc:	50                   	push   eax
c001f9fd:	e8 e0 f8 ff ff       	call   c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa02:	83 c4 1c             	add    esp,0x1c
c001fa05:	52                   	push   edx
c001fa06:	50                   	push   eax
c001fa07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa0b:	2d f8 00 00 00       	sub    eax,0xf8
c001fa10:	eb 41                	jmp    c001fa53 <Vm::x87Handler(regs*)+0x602>
c001fa12:	8d 50 10             	lea    edx,[eax+0x10]
c001fa15:	80 fa 07             	cmp    dl,0x7
c001fa18:	0f 87 5a 01 00 00    	ja     c001fb78 <Vm::x87Handler(regs*)+0x727>
c001fa1e:	83 ec 0c             	sub    esp,0xc
c001fa21:	2d f0 00 00 00       	sub    eax,0xf0
c001fa26:	50                   	push   eax
c001fa27:	e8 e8 f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fa2c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa33:	89 c6                	mov    esi,eax
c001fa35:	89 d7                	mov    edi,edx
c001fa37:	e8 d8 f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fa3c:	57                   	push   edi
c001fa3d:	56                   	push   esi
c001fa3e:	52                   	push   edx
c001fa3f:	50                   	push   eax
c001fa40:	e8 9d f8 ff ff       	call   c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa45:	83 c4 1c             	add    esp,0x1c
c001fa48:	52                   	push   edx
c001fa49:	50                   	push   eax
c001fa4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa4e:	2d f0 00 00 00       	sub    eax,0xf0
c001fa53:	50                   	push   eax
c001fa54:	e8 fe f8 ff ff       	call   c001f357 <Vm::fpuSetReg(int, unsigned long long)>
c001fa59:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa5d:	e8 9d f9 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fa62:	e9 5e fa ff ff       	jmp    c001f4c5 <Vm::x87Handler(regs*)+0x74>
c001fa67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa6b:	8d 50 30             	lea    edx,[eax+0x30]
c001fa6e:	80 fa 07             	cmp    dl,0x7
c001fa71:	77 1d                	ja     c001fa90 <Vm::x87Handler(regs*)+0x63f>
c001fa73:	83 ec 0c             	sub    esp,0xc
c001fa76:	6a 00                	push   0x0
c001fa78:	e8 97 f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fa7d:	83 c4 0c             	add    esp,0xc
c001fa80:	52                   	push   edx
c001fa81:	50                   	push   eax
c001fa82:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa86:	2d d0 00 00 00       	sub    eax,0xd0
c001fa8b:	e9 f3 fd ff ff       	jmp    c001f883 <Vm::x87Handler(regs*)+0x432>
c001fa90:	8d 50 28             	lea    edx,[eax+0x28]
c001fa93:	80 fa 07             	cmp    dl,0x7
c001fa96:	77 28                	ja     c001fac0 <Vm::x87Handler(regs*)+0x66f>
c001fa98:	83 ec 0c             	sub    esp,0xc
c001fa9b:	6a 00                	push   0x0
c001fa9d:	e8 72 f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001faa2:	83 c4 0c             	add    esp,0xc
c001faa5:	52                   	push   edx
c001faa6:	50                   	push   eax
c001faa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faab:	2d d8 00 00 00       	sub    eax,0xd8
c001fab0:	50                   	push   eax
c001fab1:	e8 a1 f8 ff ff       	call   c001f357 <Vm::fpuSetReg(int, unsigned long long)>
c001fab6:	e8 44 f9 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fabb:	e9 01 fa ff ff       	jmp    c001f4c1 <Vm::x87Handler(regs*)+0x70>
c001fac0:	8d 50 20             	lea    edx,[eax+0x20]
c001fac3:	80 fa 07             	cmp    dl,0x7
c001fac6:	77 30                	ja     c001faf8 <Vm::x87Handler(regs*)+0x6a7>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	2d e0 00 00 00       	sub    eax,0xe0
c001fad0:	50                   	push   eax
c001fad1:	e8 3e f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fad6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fadd:	89 c6                	mov    esi,eax
c001fadf:	89 d7                	mov    edi,edx
c001fae1:	e8 2e f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fae6:	57                   	push   edi
c001fae7:	56                   	push   esi
c001fae8:	52                   	push   edx
c001fae9:	50                   	push   eax
c001faea:	e8 48 f7 ff ff       	call   c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001faef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faf3:	e9 54 02 00 00       	jmp    c001fd4c <Vm::x87Handler(regs*)+0x8fb>
c001faf8:	8d 50 18             	lea    edx,[eax+0x18]
c001fafb:	80 fa 07             	cmp    dl,0x7
c001fafe:	0f 87 43 fb ff ff    	ja     c001f647 <Vm::x87Handler(regs*)+0x1f6>
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	2d e8 00 00 00       	sub    eax,0xe8
c001fb0c:	50                   	push   eax
c001fb0d:	e8 02 f8 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fb12:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb19:	89 c6                	mov    esi,eax
c001fb1b:	89 d7                	mov    edi,edx
c001fb1d:	e8 f2 f7 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fb22:	57                   	push   edi
c001fb23:	56                   	push   esi
c001fb24:	52                   	push   edx
c001fb25:	50                   	push   eax
c001fb26:	e8 0c f7 ff ff       	call   c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb2b:	83 c4 20             	add    esp,0x20
c001fb2e:	e8 cc f8 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fb33:	eb 62                	jmp    c001fb97 <Vm::x87Handler(regs*)+0x746>
c001fb35:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fb39:	0f 85 0f 01 00 00    	jne    c001fc4e <Vm::x87Handler(regs*)+0x7fd>
c001fb3f:	83 ec 0c             	sub    esp,0xc
c001fb42:	6a 01                	push   0x1
c001fb44:	e8 cb f7 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fb49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb50:	89 c6                	mov    esi,eax
c001fb52:	89 d7                	mov    edi,edx
c001fb54:	e8 bb f7 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fb59:	57                   	push   edi
c001fb5a:	56                   	push   esi
c001fb5b:	52                   	push   edx
c001fb5c:	50                   	push   eax
c001fb5d:	e8 d5 f6 ff ff       	call   c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb62:	83 c4 20             	add    esp,0x20
c001fb65:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb69:	e8 91 f8 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fb6e:	e8 8c f8 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fb73:	e9 50 f9 ff ff       	jmp    c001f4c8 <Vm::x87Handler(regs*)+0x77>
c001fb78:	3c d9                	cmp    al,0xd9
c001fb7a:	0f 85 b5 02 00 00    	jne    c001fe35 <Vm::x87Handler(regs*)+0x9e4>
c001fb80:	eb bd                	jmp    c001fb3f <Vm::x87Handler(regs*)+0x6ee>
c001fb82:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fb86:	0f 85 ea 02 00 00    	jne    c001fe76 <Vm::x87Handler(regs*)+0xa25>
c001fb8c:	0f b7 05 c0 10 03 c0 	movzx  eax,WORD PTR ds:0xc00310c0
c001fb93:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fb97:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb9b:	e9 28 f9 ff ff       	jmp    c001f4c8 <Vm::x87Handler(regs*)+0x77>
c001fba0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fba4:	84 d2                	test   dl,dl
c001fba6:	75 0f                	jne    c001fbb7 <Vm::x87Handler(regs*)+0x766>
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	ff 36                	push   DWORD PTR [esi]
c001fbad:	e8 b1 f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fbb2:	e9 2c 01 00 00       	jmp    c001fce3 <Vm::x87Handler(regs*)+0x892>
c001fbb7:	80 fa 01             	cmp    dl,0x1
c001fbba:	75 0f                	jne    c001fbcb <Vm::x87Handler(regs*)+0x77a>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	ff 36                	push   DWORD PTR [esi]
c001fbc1:	e8 9d f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fbc6:	e9 81 02 00 00       	jmp    c001fe4c <Vm::x87Handler(regs*)+0x9fb>
c001fbcb:	80 fa 04             	cmp    dl,0x4
c001fbce:	75 0f                	jne    c001fbdf <Vm::x87Handler(regs*)+0x78e>
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	ff 36                	push   DWORD PTR [esi]
c001fbd5:	e8 89 f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fbda:	e9 86 01 00 00       	jmp    c001fd65 <Vm::x87Handler(regs*)+0x914>
c001fbdf:	80 fa 05             	cmp    dl,0x5
c001fbe2:	75 1b                	jne    c001fbff <Vm::x87Handler(regs*)+0x7ae>
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	6a 00                	push   0x0
c001fbe9:	e8 26 f7 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fbee:	89 c7                	mov    edi,eax
c001fbf0:	89 d5                	mov    ebp,edx
c001fbf2:	58                   	pop    eax
c001fbf3:	ff 36                	push   DWORD PTR [esi]
c001fbf5:	e8 69 f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fbfa:	e9 a3 01 00 00       	jmp    c001fda2 <Vm::x87Handler(regs*)+0x951>
c001fbff:	80 fa 06             	cmp    dl,0x6
c001fc02:	75 0f                	jne    c001fc13 <Vm::x87Handler(regs*)+0x7c2>
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	ff 36                	push   DWORD PTR [esi]
c001fc09:	e8 55 f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fc0e:	e9 ae 01 00 00       	jmp    c001fdc1 <Vm::x87Handler(regs*)+0x970>
c001fc13:	31 c0                	xor    eax,eax
c001fc15:	80 fa 07             	cmp    dl,0x7
c001fc18:	0f 85 94 02 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fc1e:	83 ec 0c             	sub    esp,0xc
c001fc21:	6a 00                	push   0x0
c001fc23:	e8 ec f6 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fc28:	89 c7                	mov    edi,eax
c001fc2a:	89 d5                	mov    ebp,edx
c001fc2c:	58                   	pop    eax
c001fc2d:	ff 36                	push   DWORD PTR [esi]
c001fc2f:	e8 2f f4 ff ff       	call   c001f063 <Vm::fpu32ToInternal(unsigned int)>
c001fc34:	e9 cb 01 00 00       	jmp    c001fe04 <Vm::x87Handler(regs*)+0x9b3>
c001fc39:	80 fa 03             	cmp    dl,0x3
c001fc3c:	0f 85 d3 01 00 00    	jne    c001fe15 <Vm::x87Handler(regs*)+0x9c4>
c001fc42:	e8 b8 f7 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fc47:	51                   	push   ecx
c001fc48:	51                   	push   ecx
c001fc49:	e9 de 01 00 00       	jmp    c001fe2c <Vm::x87Handler(regs*)+0x9db>
c001fc4e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc52:	80 fa 01             	cmp    dl,0x1
c001fc55:	75 09                	jne    c001fc60 <Vm::x87Handler(regs*)+0x80f>
c001fc57:	57                   	push   edi
c001fc58:	57                   	push   edi
c001fc59:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc5b:	e9 e3 01 00 00       	jmp    c001fe43 <Vm::x87Handler(regs*)+0x9f2>
c001fc60:	80 fa 04             	cmp    dl,0x4
c001fc63:	75 12                	jne    c001fc77 <Vm::x87Handler(regs*)+0x826>
c001fc65:	31 d2                	xor    edx,edx
c001fc67:	51                   	push   ecx
c001fc68:	51                   	push   ecx
c001fc69:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc6b:	52                   	push   edx
c001fc6c:	50                   	push   eax
c001fc6d:	e8 d0 f4 ff ff       	call   c001f142 <Vm::fpuLongToFloat(long long)>
c001fc72:	e9 ee 00 00 00       	jmp    c001fd65 <Vm::x87Handler(regs*)+0x914>
c001fc77:	31 c0                	xor    eax,eax
c001fc79:	80 fa 07             	cmp    dl,0x7
c001fc7c:	0f 85 30 02 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fc82:	83 ec 0c             	sub    esp,0xc
c001fc85:	6a 00                	push   0x0
c001fc87:	e8 88 f6 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fc8c:	89 c7                	mov    edi,eax
c001fc8e:	89 d5                	mov    ebp,edx
c001fc90:	58                   	pop    eax
c001fc91:	8b 06                	mov    eax,DWORD PTR [esi]
c001fc93:	5a                   	pop    edx
c001fc94:	31 d2                	xor    edx,edx
c001fc96:	52                   	push   edx
c001fc97:	50                   	push   eax
c001fc98:	e8 a5 f4 ff ff       	call   c001f142 <Vm::fpuLongToFloat(long long)>
c001fc9d:	e9 62 01 00 00       	jmp    c001fe04 <Vm::x87Handler(regs*)+0x9b3>
c001fca2:	84 d2                	test   dl,dl
c001fca4:	75 0d                	jne    c001fcb3 <Vm::x87Handler(regs*)+0x862>
c001fca6:	31 d2                	xor    edx,edx
c001fca8:	55                   	push   ebp
c001fca9:	55                   	push   ebp
c001fcaa:	8b 06                	mov    eax,DWORD PTR [esi]
c001fcac:	52                   	push   edx
c001fcad:	50                   	push   eax
c001fcae:	e9 d3 01 00 00       	jmp    c001fe86 <Vm::x87Handler(regs*)+0xa35>
c001fcb3:	31 c0                	xor    eax,eax
c001fcb5:	80 fa 02             	cmp    dl,0x2
c001fcb8:	0f 85 f4 01 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	6a 00                	push   0x0
c001fcc3:	e8 4c f6 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fcc8:	59                   	pop    ecx
c001fcc9:	5f                   	pop    edi
c001fcca:	e9 6a f9 ff ff       	jmp    c001f639 <Vm::x87Handler(regs*)+0x1e8>
c001fccf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcd3:	84 d2                	test   dl,dl
c001fcd5:	75 2a                	jne    c001fd01 <Vm::x87Handler(regs*)+0x8b0>
c001fcd7:	50                   	push   eax
c001fcd8:	50                   	push   eax
c001fcd9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcdc:	ff 36                	push   DWORD PTR [esi]
c001fcde:	e8 c5 f3 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fce3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcea:	89 c6                	mov    esi,eax
c001fcec:	89 d7                	mov    edi,edx
c001fcee:	e8 21 f6 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fcf3:	57                   	push   edi
c001fcf4:	56                   	push   esi
c001fcf5:	52                   	push   edx
c001fcf6:	50                   	push   eax
c001fcf7:	e8 8e f5 ff ff       	call   c001f28a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcfc:	e9 64 01 00 00       	jmp    c001fe65 <Vm::x87Handler(regs*)+0xa14>
c001fd01:	80 fa 01             	cmp    dl,0x1
c001fd04:	75 11                	jne    c001fd17 <Vm::x87Handler(regs*)+0x8c6>
c001fd06:	50                   	push   eax
c001fd07:	50                   	push   eax
c001fd08:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0b:	ff 36                	push   DWORD PTR [esi]
c001fd0d:	e8 96 f3 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd12:	e9 35 01 00 00       	jmp    c001fe4c <Vm::x87Handler(regs*)+0x9fb>
c001fd17:	80 fa 02             	cmp    dl,0x2
c001fd1a:	0f 85 54 f9 ff ff    	jne    c001f674 <Vm::x87Handler(regs*)+0x223>
c001fd20:	55                   	push   ebp
c001fd21:	55                   	push   ebp
c001fd22:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd25:	ff 36                	push   DWORD PTR [esi]
c001fd27:	e8 7c f3 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd2c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd33:	89 c6                	mov    esi,eax
c001fd35:	89 d7                	mov    edi,edx
c001fd37:	e8 d8 f5 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fd3c:	57                   	push   edi
c001fd3d:	56                   	push   esi
c001fd3e:	52                   	push   edx
c001fd3f:	50                   	push   eax
c001fd40:	e8 f2 f4 ff ff       	call   c001f237 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd49:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd4c:	83 c4 20             	add    esp,0x20
c001fd4f:	e9 74 f7 ff ff       	jmp    c001f4c8 <Vm::x87Handler(regs*)+0x77>
c001fd54:	80 fa 04             	cmp    dl,0x4
c001fd57:	75 2a                	jne    c001fd83 <Vm::x87Handler(regs*)+0x932>
c001fd59:	51                   	push   ecx
c001fd5a:	51                   	push   ecx
c001fd5b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5e:	ff 36                	push   DWORD PTR [esi]
c001fd60:	e8 43 f3 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fd65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6c:	89 c6                	mov    esi,eax
c001fd6e:	89 d7                	mov    edi,edx
c001fd70:	e8 9f f5 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fd75:	57                   	push   edi
c001fd76:	56                   	push   esi
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	e8 36 f5 ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd7e:	e9 e2 00 00 00       	jmp    c001fe65 <Vm::x87Handler(regs*)+0xa14>
c001fd83:	80 fa 05             	cmp    dl,0x5
c001fd86:	75 28                	jne    c001fdb0 <Vm::x87Handler(regs*)+0x95f>
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	6a 00                	push   0x0
c001fd8d:	e8 82 f5 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fd92:	89 c7                	mov    edi,eax
c001fd94:	89 d5                	mov    ebp,edx
c001fd96:	58                   	pop    eax
c001fd97:	5a                   	pop    edx
c001fd98:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd9b:	ff 36                	push   DWORD PTR [esi]
c001fd9d:	e8 06 f3 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fda2:	83 c4 10             	add    esp,0x10
c001fda5:	55                   	push   ebp
c001fda6:	57                   	push   edi
c001fda7:	52                   	push   edx
c001fda8:	50                   	push   eax
c001fda9:	e8 06 f5 ff ff       	call   c001f2b4 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdae:	eb 60                	jmp    c001fe10 <Vm::x87Handler(regs*)+0x9bf>
c001fdb0:	80 fa 06             	cmp    dl,0x6
c001fdb3:	75 2a                	jne    c001fddf <Vm::x87Handler(regs*)+0x98e>
c001fdb5:	51                   	push   ecx
c001fdb6:	51                   	push   ecx
c001fdb7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdba:	ff 36                	push   DWORD PTR [esi]
c001fdbc:	e8 e7 f2 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fdc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdc8:	89 c6                	mov    esi,eax
c001fdca:	89 d7                	mov    edi,edx
c001fdcc:	e8 43 f5 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fdd1:	57                   	push   edi
c001fdd2:	56                   	push   esi
c001fdd3:	52                   	push   edx
c001fdd4:	50                   	push   eax
c001fdd5:	e8 08 f5 ff ff       	call   c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fdda:	e9 86 00 00 00       	jmp    c001fe65 <Vm::x87Handler(regs*)+0xa14>
c001fddf:	31 c0                	xor    eax,eax
c001fde1:	80 fa 07             	cmp    dl,0x7
c001fde4:	0f 85 c8 00 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	6a 00                	push   0x0
c001fdef:	e8 20 f5 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fdf4:	89 c7                	mov    edi,eax
c001fdf6:	89 d5                	mov    ebp,edx
c001fdf8:	58                   	pop    eax
c001fdf9:	5a                   	pop    edx
c001fdfa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdfd:	ff 36                	push   DWORD PTR [esi]
c001fdff:	e8 a4 f2 ff ff       	call   c001f0a8 <Vm::fpu64ToInternal(unsigned long long)>
c001fe04:	83 c4 10             	add    esp,0x10
c001fe07:	55                   	push   ebp
c001fe08:	57                   	push   edi
c001fe09:	52                   	push   edx
c001fe0a:	50                   	push   eax
c001fe0b:	e8 d2 f4 ff ff       	call   c001f2e2 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fe10:	83 c4 0c             	add    esp,0xc
c001fe13:	eb 53                	jmp    c001fe68 <Vm::x87Handler(regs*)+0xa17>
c001fe15:	31 c0                	xor    eax,eax
c001fe17:	80 fa 02             	cmp    dl,0x2
c001fe1a:	0f 85 92 00 00 00    	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	6a 00                	push   0x0
c001fe25:	e8 ea f4 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fe2a:	59                   	pop    ecx
c001fe2b:	5f                   	pop    edi
c001fe2c:	52                   	push   edx
c001fe2d:	50                   	push   eax
c001fe2e:	e8 27 f2 ff ff       	call   c001f05a <Vm::fpuInternalTo64(unsigned long long)>
c001fe33:	eb 70                	jmp    c001fea5 <Vm::x87Handler(regs*)+0xa54>
c001fe35:	31 c0                	xor    eax,eax
c001fe37:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fe3c:	75 74                	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fe3e:	50                   	push   eax
c001fe3f:	50                   	push   eax
c001fe40:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fe43:	31 d2                	xor    edx,edx
c001fe45:	52                   	push   edx
c001fe46:	50                   	push   eax
c001fe47:	e8 f6 f2 ff ff       	call   c001f142 <Vm::fpuLongToFloat(long long)>
c001fe4c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe53:	89 c6                	mov    esi,eax
c001fe55:	89 d7                	mov    edi,edx
c001fe57:	e8 b8 f4 ff ff       	call   c001f314 <Vm::fpuGetReg(int)>
c001fe5c:	57                   	push   edi
c001fe5d:	56                   	push   esi
c001fe5e:	52                   	push   edx
c001fe5f:	50                   	push   eax
c001fe60:	e8 5e f4 ff ff       	call   c001f2c3 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe65:	83 c4 1c             	add    esp,0x1c
c001fe68:	52                   	push   edx
c001fe69:	50                   	push   eax
c001fe6a:	6a 00                	push   0x0
c001fe6c:	e8 e6 f4 ff ff       	call   c001f357 <Vm::fpuSetReg(int, unsigned long long)>
c001fe71:	e9 f2 f7 ff ff       	jmp    c001f668 <Vm::x87Handler(regs*)+0x217>
c001fe76:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe7a:	80 fa 05             	cmp    dl,0x5
c001fe7d:	75 11                	jne    c001fe90 <Vm::x87Handler(regs*)+0xa3f>
c001fe7f:	55                   	push   ebp
c001fe80:	55                   	push   ebp
c001fe81:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe84:	ff 36                	push   DWORD PTR [esi]
c001fe86:	e8 81 f2 ff ff       	call   c001f10c <Vm::fpuULongToFloat(unsigned long long)>
c001fe8b:	e9 cf f7 ff ff       	jmp    c001f65f <Vm::x87Handler(regs*)+0x20e>
c001fe90:	31 c0                	xor    eax,eax
c001fe92:	80 fa 07             	cmp    dl,0x7
c001fe95:	75 1b                	jne    c001feb2 <Vm::x87Handler(regs*)+0xa61>
c001fe97:	e8 63 f5 ff ff       	call   c001f3ff <Vm::fpuPop()>
c001fe9c:	51                   	push   ecx
c001fe9d:	51                   	push   ecx
c001fe9e:	52                   	push   edx
c001fe9f:	50                   	push   eax
c001fea0:	e8 0c f2 ff ff       	call   c001f0b1 <Vm::fpuFloatToLong(unsigned long long)>
c001fea5:	83 c4 10             	add    esp,0x10
c001fea8:	89 06                	mov    DWORD PTR [esi],eax
c001feaa:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fead:	e9 f8 f7 ff ff       	jmp    c001f6aa <Vm::x87Handler(regs*)+0x259>
c001feb2:	83 c4 1c             	add    esp,0x1c
c001feb5:	5b                   	pop    ebx
c001feb6:	5e                   	pop    esi
c001feb7:	5f                   	pop    edi
c001feb8:	5d                   	pop    ebp
c001feb9:	c3                   	ret    

c001feba <__static_initialization_and_destruction_0(int, int)>:
c001feba:	83 ec 0c             	sub    esp,0xc
c001febd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fec2:	75 1a                	jne    c001fede <__static_initialization_and_destruction_0(int, int)+0x24>
c001fec4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fecc:	75 10                	jne    c001fede <__static_initialization_and_destruction_0(int, int)+0x24>
c001fece:	83 ec 0c             	sub    esp,0xc
c001fed1:	68 c0 10 03 c0       	push   0xc00310c0
c001fed6:	e8 ff 8c 00 00       	call   c0028bda <Vm::_FPUState::_FPUState()>
c001fedb:	83 c4 10             	add    esp,0x10
c001fede:	90                   	nop
c001fedf:	83 c4 0c             	add    esp,0xc
c001fee2:	c3                   	ret    

c001fee3 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fee3:	83 ec 0c             	sub    esp,0xc
c001fee6:	83 ec 08             	sub    esp,0x8
c001fee9:	68 ff ff 00 00       	push   0xffff
c001feee:	6a 01                	push   0x1
c001fef0:	e8 c5 ff ff ff       	call   c001feba <__static_initialization_and_destruction_0(int, int)>
c001fef5:	83 c4 10             	add    esp,0x10
c001fef8:	83 c4 0c             	add    esp,0xc
c001fefb:	c3                   	ret    

c001fefc <FAT::getName()>:
c001fefc:	b8 b0 bf 02 c0       	mov    eax,0xc002bfb0
c001ff01:	c3                   	ret    

c001ff02 <FAT::tell(void*, unsigned long long*)>:
c001ff02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff07:	75 06                	jne    c001ff0f <FAT::tell(void*, unsigned long long*)+0xd>
c001ff09:	b8 04 00 00 00       	mov    eax,0x4
c001ff0e:	c3                   	ret    
c001ff0f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff14:	75 06                	jne    c001ff1c <FAT::tell(void*, unsigned long long*)+0x1a>
c001ff16:	b8 04 00 00 00       	mov    eax,0x4
c001ff1b:	c3                   	ret    
c001ff1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff20:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ff23:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ff26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff2a:	89 01                	mov    DWORD PTR [ecx],eax
c001ff2c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ff2f:	b8 00 00 00 00       	mov    eax,0x0
c001ff34:	c3                   	ret    
c001ff35:	90                   	nop

c001ff36 <FAT::stat(void*, unsigned long long*)>:
c001ff36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ff3b:	75 06                	jne    c001ff43 <FAT::stat(void*, unsigned long long*)+0xd>
c001ff3d:	b8 04 00 00 00       	mov    eax,0x4
c001ff42:	c3                   	ret    
c001ff43:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff48:	75 06                	jne    c001ff50 <FAT::stat(void*, unsigned long long*)+0x1a>
c001ff4a:	b8 04 00 00 00       	mov    eax,0x4
c001ff4f:	c3                   	ret    
c001ff50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff54:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ff57:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ff5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff5e:	89 01                	mov    DWORD PTR [ecx],eax
c001ff60:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ff63:	b8 00 00 00 00       	mov    eax,0x0
c001ff68:	c3                   	ret    
c001ff69:	90                   	nop

c001ff6a <FAT::~FAT()>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c001ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff76:	89 10                	mov    DWORD PTR [eax],edx
c001ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	50                   	push   eax
c001ff80:	e8 3d 2b ff ff       	call   c0012ac2 <Filesystem::~Filesystem()>
c001ff85:	83 c4 10             	add    esp,0x10
c001ff88:	90                   	nop
c001ff89:	83 c4 0c             	add    esp,0xc
c001ff8c:	c3                   	ret    
c001ff8d:	90                   	nop

c001ff8e <FAT::~FAT()>:
c001ff8e:	83 ec 0c             	sub    esp,0xc
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff98:	e8 cd ff ff ff       	call   c001ff6a <FAT::~FAT()>
c001ff9d:	83 c4 10             	add    esp,0x10
c001ffa0:	83 ec 08             	sub    esp,0x8
c001ffa3:	6a 08                	push   0x8
c001ffa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffa9:	e8 0d 27 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c001ffae:	83 c4 10             	add    esp,0x10
c001ffb1:	83 c4 0c             	add    esp,0xc
c001ffb4:	c3                   	ret    
c001ffb5:	90                   	nop

c001ffb6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ffb6:	83 ec 1c             	sub    esp,0x1c
c001ffb9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ffc0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ffc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ffc9:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c001ffd0:	83 f8 ff             	cmp    eax,0xffffffff
c001ffd3:	75 34                	jne    c0020009 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ffd5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ffd9:	88 c2                	mov    dl,al
c001ffdb:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001ffe0:	01 d0                	add    eax,edx
c001ffe2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ffe6:	8b 15 20 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031120
c001ffec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fff0:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c001fff7:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c001fffc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020000:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c0020007:	eb 17                	jmp    c0020020 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020009:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002000d:	88 c2                	mov    dl,al
c002000f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020013:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c002001a:	01 d0                	add    eax,edx
c002001c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020020:	83 ec 04             	sub    esp,0x4
c0020023:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020027:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002002b:	8d 44 24 15          	lea    eax,[esp+0x15]
c002002f:	50                   	push   eax
c0020030:	e8 c9 6c fe ff       	call   c0006cfe <f_getlabel>
c0020035:	83 c4 10             	add    esp,0x10
c0020038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002003c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020041:	75 07                	jne    c002004a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020043:	b8 00 00 00 00       	mov    eax,0x0
c0020048:	eb 05                	jmp    c002004f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002004a:	b8 01 00 00 00       	mov    eax,0x1
c002004f:	83 c4 1c             	add    esp,0x1c
c0020052:	c3                   	ret    
c0020053:	90                   	nop

c0020054 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020054:	57                   	push   edi
c0020055:	83 ec 58             	sub    esp,0x58
c0020058:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020060:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020064:	b9 0f 00 00 00       	mov    ecx,0xf
c0020069:	b8 00 00 00 00       	mov    eax,0x0
c002006e:	fc                   	cld    
c002006f:	89 d7                	mov    edi,edx
c0020071:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020073:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020077:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c002007e:	83 f8 ff             	cmp    eax,0xffffffff
c0020081:	75 34                	jne    c00200b7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020083:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020087:	88 c2                	mov    dl,al
c0020089:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c002008e:	01 d0                	add    eax,edx
c0020090:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020094:	8b 15 20 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031120
c002009a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002009e:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c00200a5:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c00200aa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00200ae:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c00200b5:	eb 17                	jmp    c00200ce <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00200b7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00200bb:	88 c2                	mov    dl,al
c00200bd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00200c1:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c00200c8:	01 d0                	add    eax,edx
c00200ca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00200ce:	83 ec 08             	sub    esp,0x8
c00200d1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00200d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200d9:	50                   	push   eax
c00200da:	e8 6d 08 fe ff       	call   c000094c <strcat>
c00200df:	83 c4 10             	add    esp,0x10
c00200e2:	83 ec 0c             	sub    esp,0xc
c00200e5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200e9:	50                   	push   eax
c00200ea:	e8 fd 6d fe ff       	call   c0006eec <f_setlabel>
c00200ef:	83 c4 10             	add    esp,0x10
c00200f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00200f6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00200fb:	75 07                	jne    c0020104 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00200fd:	b8 00 00 00 00       	mov    eax,0x0
c0020102:	eb 05                	jmp    c0020109 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020104:	b8 01 00 00 00       	mov    eax,0x1
c0020109:	83 c4 58             	add    esp,0x58
c002010c:	5f                   	pop    edi
c002010d:	c3                   	ret    

c002010e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002010e:	83 ec 2c             	sub    esp,0x2c
c0020111:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020119:	83 ec 08             	sub    esp,0x8
c002011c:	68 d4 bf 02 c0       	push   0xc002bfd4
c0020121:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020125:	e8 6e 07 fe ff       	call   c0000898 <strcmp>
c002012a:	83 c4 10             	add    esp,0x10
c002012d:	85 c0                	test   eax,eax
c002012f:	0f 94 c0             	sete   al
c0020132:	84 c0                	test   al,al
c0020134:	74 0d                	je     c0020143 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020136:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002013e:	e9 a6 00 00 00       	jmp    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020143:	83 ec 08             	sub    esp,0x8
c0020146:	68 c6 bf 02 c0       	push   0xc002bfc6
c002014b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002014f:	e8 44 07 fe ff       	call   c0000898 <strcmp>
c0020154:	83 c4 10             	add    esp,0x10
c0020157:	85 c0                	test   eax,eax
c0020159:	0f 94 c0             	sete   al
c002015c:	84 c0                	test   al,al
c002015e:	74 0a                	je     c002016a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020160:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020168:	eb 7f                	jmp    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002016a:	83 ec 08             	sub    esp,0x8
c002016d:	68 cc bf 02 c0       	push   0xc002bfcc
c0020172:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020176:	e8 1d 07 fe ff       	call   c0000898 <strcmp>
c002017b:	83 c4 10             	add    esp,0x10
c002017e:	85 c0                	test   eax,eax
c0020180:	0f 94 c0             	sete   al
c0020183:	84 c0                	test   al,al
c0020185:	74 0a                	je     c0020191 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020187:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002018f:	eb 58                	jmp    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020191:	83 ec 08             	sub    esp,0x8
c0020194:	68 4c 93 02 c0       	push   0xc002934c
c0020199:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002019d:	e8 f6 06 fe ff       	call   c0000898 <strcmp>
c00201a2:	83 c4 10             	add    esp,0x10
c00201a5:	85 c0                	test   eax,eax
c00201a7:	0f 94 c0             	sete   al
c00201aa:	84 c0                	test   al,al
c00201ac:	74 0a                	je     c00201b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00201ae:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00201b6:	eb 31                	jmp    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201b8:	83 ec 08             	sub    esp,0x8
c00201bb:	68 d2 bf 02 c0       	push   0xc002bfd2
c00201c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00201c4:	e8 cf 06 fe ff       	call   c0000898 <strcmp>
c00201c9:	83 c4 10             	add    esp,0x10
c00201cc:	85 c0                	test   eax,eax
c00201ce:	0f 94 c0             	sete   al
c00201d1:	84 c0                	test   al,al
c00201d3:	74 0a                	je     c00201df <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00201d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00201dd:	eb 0a                	jmp    c00201e9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00201df:	b8 08 00 00 00       	mov    eax,0x8
c00201e4:	e9 df 00 00 00       	jmp    c00202c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201e9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00201f0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00201f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201f9:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c0020200:	83 f8 ff             	cmp    eax,0xffffffff
c0020203:	75 34                	jne    c0020239 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020205:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020209:	88 c2                	mov    dl,al
c002020b:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c0020210:	01 d0                	add    eax,edx
c0020212:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020216:	8b 15 20 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031120
c002021c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020220:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c0020227:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c002022c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020230:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c0020237:	eb 17                	jmp    c0020250 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020239:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002023d:	88 c2                	mov    dl,al
c002023f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020243:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c002024a:	01 d0                	add    eax,edx
c002024c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020254:	88 04 24             	mov    BYTE PTR [esp],al
c0020257:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002025b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002025f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020267:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002026c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020274:	83 ec 0c             	sub    esp,0xc
c0020277:	68 00 20 00 00       	push   0x2000
c002027c:	e8 18 f3 fe ff       	call   c000f599 <malloc>
c0020281:	83 c4 10             	add    esp,0x10
c0020284:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020288:	68 00 20 00 00       	push   0x2000
c002028d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020291:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020295:	50                   	push   eax
c0020296:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002029a:	50                   	push   eax
c002029b:	e8 97 70 fe ff       	call   c0007337 <f_mkfs>
c00202a0:	83 c4 10             	add    esp,0x10
c00202a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202a7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00202ac:	75 07                	jne    c00202b5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00202ae:	b8 00 00 00 00       	mov    eax,0x0
c00202b3:	eb 13                	jmp    c00202c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00202b5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00202ba:	75 07                	jne    c00202c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00202bc:	b8 09 00 00 00       	mov    eax,0x9
c00202c1:	eb 05                	jmp    c00202c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00202c3:	b8 01 00 00 00       	mov    eax,0x1
c00202c8:	83 c4 2c             	add    esp,0x2c
c00202cb:	c3                   	ret    

c00202cc <FAT::tryMount(LogicalDisk*, int)>:
c00202cc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00202d2:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c00202d7:	83 f8 14             	cmp    eax,0x14
c00202da:	75 17                	jne    c00202f3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00202dc:	83 ec 0c             	sub    esp,0xc
c00202df:	68 d8 bf 02 c0       	push   0xc002bfd8
c00202e4:	e8 16 9c ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00202e9:	83 c4 10             	add    esp,0x10
c00202ec:	b0 00                	mov    al,0x0
c00202ee:	e9 d7 01 00 00       	jmp    c00204ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202f3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00202fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020300:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020306:	3d 00 02 00 00       	cmp    eax,0x200
c002030b:	74 07                	je     c0020314 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002030d:	b0 00                	mov    al,0x0
c002030f:	e9 b6 01 00 00       	jmp    c00204ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020314:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002031c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020323:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c002032a:	83 f8 ff             	cmp    eax,0xffffffff
c002032d:	74 07                	je     c0020336 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002032f:	b0 01                	mov    al,0x1
c0020331:	e9 94 01 00 00       	jmp    c00204ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020336:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020340:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020348:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002034f:	88 c2                	mov    dl,al
c0020351:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c0020356:	01 d0                	add    eax,edx
c0020358:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002035f:	8b 15 20 11 03 c0    	mov    edx,DWORD PTR ds:0xc0031120
c0020365:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002036c:	89 14 85 40 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffceec0],edx
c0020373:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c0020378:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002037f:	89 14 85 c0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee40],edx
c0020386:	83 ec 0c             	sub    esp,0xc
c0020389:	68 54 02 00 00       	push   0x254
c002038e:	e8 06 f2 fe ff       	call   c000f599 <malloc>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002039d:	83 ec 04             	sub    esp,0x4
c00203a0:	6a 00                	push   0x0
c00203a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203a9:	50                   	push   eax
c00203aa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203b1:	e8 3f 4b fe ff       	call   c0004ef5 <f_mount>
c00203b6:	83 c4 10             	add    esp,0x10
c00203b9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00203c0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00203c8:	74 19                	je     c00203e3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203d4:	e8 e0 f1 fe ff       	call   c000f5b9 <rfree>
c00203d9:	83 c4 10             	add    esp,0x10
c00203dc:	b0 00                	mov    al,0x0
c00203de:	e9 e7 00 00 00       	jmp    c00204ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203e3:	83 ec 04             	sub    esp,0x4
c00203e6:	68 00 01 00 00       	push   0x100
c00203eb:	6a 00                	push   0x0
c00203ed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00203f4:	50                   	push   eax
c00203f5:	e8 56 03 fe ff       	call   c0000750 <memset>
c00203fa:	83 c4 10             	add    esp,0x10
c00203fd:	83 ec 08             	sub    esp,0x8
c0020400:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020407:	50                   	push   eax
c0020408:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002040f:	50                   	push   eax
c0020410:	e8 37 05 fe ff       	call   c000094c <strcat>
c0020415:	83 c4 10             	add    esp,0x10
c0020418:	83 ec 08             	sub    esp,0x8
c002041b:	68 e6 bf 02 c0       	push   0xc002bfe6
c0020420:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020427:	50                   	push   eax
c0020428:	e8 1f 05 fe ff       	call   c000094c <strcat>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	83 ec 04             	sub    esp,0x4
c0020433:	6a 01                	push   0x1
c0020435:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002043c:	50                   	push   eax
c002043d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020441:	50                   	push   eax
c0020442:	e8 10 4b fe ff       	call   c0004f57 <f_open>
c0020447:	83 c4 10             	add    esp,0x10
c002044a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020451:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020458:	85 c0                	test   eax,eax
c002045a:	74 0a                	je     c0020466 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002045c:	78 2d                	js     c002048b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002045e:	83 e8 04             	sub    eax,0x4
c0020461:	83 f8 01             	cmp    eax,0x1
c0020464:	77 25                	ja     c002048b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020466:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002046e:	83 ec 0c             	sub    esp,0xc
c0020471:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020475:	50                   	push   eax
c0020476:	e8 2e 56 fe ff       	call   c0005aa9 <f_close>
c002047b:	83 c4 10             	add    esp,0x10
c002047e:	90                   	nop
c002047f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020487:	74 3a                	je     c00204c3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020489:	eb 2d                	jmp    c00204b8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002048b:	83 ec 0c             	sub    esp,0xc
c002048e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020495:	e8 1f f1 fe ff       	call   c000f5b9 <rfree>
c002049a:	83 c4 10             	add    esp,0x10
c002049d:	83 ec 04             	sub    esp,0x4
c00204a0:	6a 00                	push   0x0
c00204a2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00204a9:	50                   	push   eax
c00204aa:	6a 00                	push   0x0
c00204ac:	e8 44 4a fe ff       	call   c0004ef5 <f_mount>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	b0 00                	mov    al,0x0
c00204b6:	eb 12                	jmp    c00204ca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00204b8:	a1 20 11 03 c0       	mov    eax,ds:0xc0031120
c00204bd:	40                   	inc    eax
c00204be:	a3 20 11 03 c0       	mov    ds:0xc0031120,eax
c00204c3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00204ca:	81 c4 6c 03 00 00    	add    esp,0x36c
c00204d0:	c3                   	ret    
c00204d1:	90                   	nop

c00204d2 <FAT::getFileFirstSector(char const*)>:
c00204d2:	53                   	push   ebx
c00204d3:	83 ec 28             	sub    esp,0x28
c00204d6:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00204de:	83 ec 0c             	sub    esp,0xc
c00204e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e5:	e8 af f0 fe ff       	call   c000f599 <malloc>
c00204ea:	83 c4 10             	add    esp,0x10
c00204ed:	89 c3                	mov    ebx,eax
c00204ef:	a1 50 10 03 c0       	mov    eax,ds:0xc0031050
c00204f4:	83 ec 04             	sub    esp,0x4
c00204f7:	50                   	push   eax
c00204f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204fc:	53                   	push   ebx
c00204fd:	e8 f0 27 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0020502:	83 c4 10             	add    esp,0x10
c0020505:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020509:	83 ec 08             	sub    esp,0x8
c002050c:	6a 01                	push   0x1
c002050e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020512:	e8 3f 28 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c0020517:	83 c4 10             	add    esp,0x10
c002051a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002051e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020520:	83 c0 0c             	add    eax,0xc
c0020523:	8b 00                	mov    eax,DWORD PTR [eax]
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	8d 54 24 14          	lea    edx,[esp+0x14]
c002052c:	52                   	push   edx
c002052d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020531:	52                   	push   edx
c0020532:	6a 00                	push   0x0
c0020534:	6a 04                	push   0x4
c0020536:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002053a:	ff d0                	call   eax
c002053c:	83 c4 20             	add    esp,0x20
c002053f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020543:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020549:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002054d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020551:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020554:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020557:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002055b:	83 ec 0c             	sub    esp,0xc
c002055e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020562:	e8 4d 28 ff ff       	call   c0012db4 <File::close()>
c0020567:	83 c4 10             	add    esp,0x10
c002056a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002056e:	ba 00 00 00 00       	mov    edx,0x0
c0020573:	83 c4 28             	add    esp,0x28
c0020576:	5b                   	pop    ebx
c0020577:	c3                   	ret    

c0020578 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020578:	57                   	push   edi
c0020579:	56                   	push   esi
c002057a:	53                   	push   ebx
c002057b:	81 ec 50 02 00 00    	sub    esp,0x250
c0020581:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020589:	74 0a                	je     c0020595 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c002058b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020593:	75 0a                	jne    c002059f <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020595:	b8 04 00 00 00       	mov    eax,0x4
c002059a:	e9 29 01 00 00       	jmp    c00206c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002059f:	83 ec 08             	sub    esp,0x8
c00205a2:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00205a9:	50                   	push   eax
c00205aa:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00205b1:	e8 fd 5a fe ff       	call   c00060b3 <f_readdir>
c00205b6:	83 c4 10             	add    esp,0x10
c00205b9:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00205c0:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00205c7:	83 ec 0c             	sub    esp,0xc
c00205ca:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00205d1:	83 c0 1a             	add    eax,0x1a
c00205d4:	50                   	push   eax
c00205d5:	e8 92 01 fe ff       	call   c000076c <strlen>
c00205da:	83 c4 10             	add    esp,0x10
c00205dd:	ba 00 00 00 00       	mov    edx,0x0
c00205e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00205ea:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00205f1:	0f b6 c0             	movzx  eax,al
c00205f4:	83 e0 10             	and    eax,0x10
c00205f7:	74 07                	je     c0020600 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00205f9:	b8 02 00 00 00       	mov    eax,0x2
c00205fe:	eb 05                	jmp    c0020605 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020600:	b8 01 00 00 00       	mov    eax,0x1
c0020605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020609:	83 ec 08             	sub    esp,0x8
c002060c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020613:	83 c0 1a             	add    eax,0x1a
c0020616:	50                   	push   eax
c0020617:	8d 44 24 10          	lea    eax,[esp+0x10]
c002061b:	83 c0 10             	add    eax,0x10
c002061e:	50                   	push   eax
c002061f:	e8 e8 01 fe ff       	call   c000080c <strcpy>
c0020624:	83 c4 10             	add    esp,0x10
c0020627:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002062e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020635:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020639:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020640:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020647:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002064e:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020655:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002065c:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020663:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002066a:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020671:	89 c6                	mov    esi,eax
c0020673:	89 d7                	mov    edi,edx
c0020675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020677:	89 c8                	mov    eax,ecx
c0020679:	89 fa                	mov    edx,edi
c002067b:	89 f3                	mov    ebx,esi
c002067d:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020684:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002068b:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020692:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020699:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002069f:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00206a6:	84 c0                	test   al,al
c00206a8:	75 07                	jne    c00206b1 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00206aa:	b8 07 00 00 00       	mov    eax,0x7
c00206af:	eb 17                	jmp    c00206c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00206b1:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00206b8:	85 c0                	test   eax,eax
c00206ba:	75 07                	jne    c00206c3 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00206bc:	b8 00 00 00 00       	mov    eax,0x0
c00206c1:	eb 05                	jmp    c00206c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00206c3:	b8 01 00 00 00       	mov    eax,0x1
c00206c8:	81 c4 50 02 00 00    	add    esp,0x250
c00206ce:	5b                   	pop    ebx
c00206cf:	5e                   	pop    esi
c00206d0:	5f                   	pop    edi
c00206d1:	c3                   	ret    

c00206d2 <FAT::read(void*, unsigned long, void*, int*)>:
c00206d2:	83 ec 1c             	sub    esp,0x1c
c00206d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206da:	74 07                	je     c00206e3 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00206dc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00206e1:	75 07                	jne    c00206ea <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00206e3:	b8 04 00 00 00       	mov    eax,0x4
c00206e8:	eb 3d                	jmp    c0020727 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00206ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00206ee:	50                   	push   eax
c00206ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00206f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206f7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206fb:	e8 93 4c fe ff       	call   c0005393 <f_read>
c0020700:	83 c4 10             	add    esp,0x10
c0020703:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020707:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002070b:	89 c2                	mov    edx,eax
c002070d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020711:	89 10                	mov    DWORD PTR [eax],edx
c0020713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020717:	85 c0                	test   eax,eax
c0020719:	75 07                	jne    c0020722 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002071b:	b8 00 00 00 00       	mov    eax,0x0
c0020720:	eb 05                	jmp    c0020727 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020722:	b8 01 00 00 00       	mov    eax,0x1
c0020727:	83 c4 1c             	add    esp,0x1c
c002072a:	c3                   	ret    
c002072b:	90                   	nop

c002072c <FAT::write(void*, unsigned long, void*, int*)>:
c002072c:	83 ec 1c             	sub    esp,0x1c
c002072f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020734:	74 07                	je     c002073d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020736:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002073b:	75 07                	jne    c0020744 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002073d:	b8 04 00 00 00       	mov    eax,0x4
c0020742:	eb 3d                	jmp    c0020781 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020744:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020748:	50                   	push   eax
c0020749:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002074d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020751:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020755:	e8 b9 4e fe ff       	call   c0005613 <f_write>
c002075a:	83 c4 10             	add    esp,0x10
c002075d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020765:	89 c2                	mov    edx,eax
c0020767:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002076b:	89 10                	mov    DWORD PTR [eax],edx
c002076d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020771:	85 c0                	test   eax,eax
c0020773:	75 07                	jne    c002077c <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020775:	b8 00 00 00 00       	mov    eax,0x0
c002077a:	eb 05                	jmp    c0020781 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002077c:	b8 01 00 00 00       	mov    eax,0x1
c0020781:	83 c4 1c             	add    esp,0x1c
c0020784:	c3                   	ret    
c0020785:	90                   	nop

c0020786 <FAT::close(void*)>:
c0020786:	83 ec 1c             	sub    esp,0x1c
c0020789:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002078e:	75 07                	jne    c0020797 <FAT::close(void*)+0x11>
c0020790:	b8 04 00 00 00       	mov    eax,0x4
c0020795:	eb 36                	jmp    c00207cd <FAT::close(void*)+0x47>
c0020797:	83 ec 0c             	sub    esp,0xc
c002079a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002079e:	e8 06 53 fe ff       	call   c0005aa9 <f_close>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207b1:	e8 f3 ed fe ff       	call   c000f5a9 <free>
c00207b6:	83 c4 10             	add    esp,0x10
c00207b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207bd:	85 c0                	test   eax,eax
c00207bf:	75 07                	jne    c00207c8 <FAT::close(void*)+0x42>
c00207c1:	b8 00 00 00 00       	mov    eax,0x0
c00207c6:	eb 05                	jmp    c00207cd <FAT::close(void*)+0x47>
c00207c8:	b8 01 00 00 00       	mov    eax,0x1
c00207cd:	83 c4 1c             	add    esp,0x1c
c00207d0:	c3                   	ret    
c00207d1:	90                   	nop

c00207d2 <FAT::closeDir(void*)>:
c00207d2:	83 ec 1c             	sub    esp,0x1c
c00207d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207da:	75 07                	jne    c00207e3 <FAT::closeDir(void*)+0x11>
c00207dc:	b8 04 00 00 00       	mov    eax,0x4
c00207e1:	eb 36                	jmp    c0020819 <FAT::closeDir(void*)+0x47>
c00207e3:	83 ec 0c             	sub    esp,0xc
c00207e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207ea:	e8 a2 58 fe ff       	call   c0006091 <f_closedir>
c00207ef:	83 c4 10             	add    esp,0x10
c00207f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207f6:	83 ec 0c             	sub    esp,0xc
c00207f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207fd:	e8 a7 ed fe ff       	call   c000f5a9 <free>
c0020802:	83 c4 10             	add    esp,0x10
c0020805:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020809:	85 c0                	test   eax,eax
c002080b:	75 07                	jne    c0020814 <FAT::closeDir(void*)+0x42>
c002080d:	b8 00 00 00 00       	mov    eax,0x0
c0020812:	eb 05                	jmp    c0020819 <FAT::closeDir(void*)+0x47>
c0020814:	b8 01 00 00 00       	mov    eax,0x1
c0020819:	83 c4 1c             	add    esp,0x1c
c002081c:	c3                   	ret    
c002081d:	90                   	nop

c002081e <FAT::seek(void*, unsigned long long)>:
c002081e:	83 ec 2c             	sub    esp,0x2c
c0020821:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020825:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020829:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002082d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020831:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020836:	75 07                	jne    c002083f <FAT::seek(void*, unsigned long long)+0x21>
c0020838:	b8 04 00 00 00       	mov    eax,0x4
c002083d:	eb 2f                	jmp    c002086e <FAT::seek(void*, unsigned long long)+0x50>
c002083f:	83 ec 04             	sub    esp,0x4
c0020842:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020846:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002084a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002084e:	e8 85 52 fe ff       	call   c0005ad8 <f_lseek>
c0020853:	83 c4 10             	add    esp,0x10
c0020856:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002085a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002085e:	85 c0                	test   eax,eax
c0020860:	75 07                	jne    c0020869 <FAT::seek(void*, unsigned long long)+0x4b>
c0020862:	b8 00 00 00 00       	mov    eax,0x0
c0020867:	eb 05                	jmp    c002086e <FAT::seek(void*, unsigned long long)+0x50>
c0020869:	b8 01 00 00 00       	mov    eax,0x1
c002086e:	83 c4 2c             	add    esp,0x2c
c0020871:	c3                   	ret    

c0020872 <fatWrapperReadDisk>:
c0020872:	83 ec 1c             	sub    esp,0x1c
c0020875:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020879:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002087d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020881:	89 04 24             	mov    DWORD PTR [esp],eax
c0020884:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020888:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002088c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020891:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c0020898:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002089c:	83 ec 0c             	sub    esp,0xc
c002089f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208a3:	52                   	push   edx
c00208a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208ac:	50                   	push   eax
c00208ad:	e8 36 58 ff ff       	call   c00160e8 <LogicalDisk::read(unsigned long long, int, void*)>
c00208b2:	83 c4 20             	add    esp,0x20
c00208b5:	83 c4 1c             	add    esp,0x1c
c00208b8:	c3                   	ret    

c00208b9 <fatWrapperWriteDisk>:
c00208b9:	83 ec 1c             	sub    esp,0x1c
c00208bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00208c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00208cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00208cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208d3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00208d8:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c00208df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00208e3:	83 ec 0c             	sub    esp,0xc
c00208e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208ea:	52                   	push   edx
c00208eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208f3:	50                   	push   eax
c00208f4:	e8 5b 58 ff ff       	call   c0016154 <LogicalDisk::write(unsigned long long, int, void*)>
c00208f9:	83 c4 20             	add    esp,0x20
c00208fc:	83 c4 1c             	add    esp,0x1c
c00208ff:	c3                   	ret    

c0020900 <fatWrapperIoctl>:
c0020900:	53                   	push   ebx
c0020901:	83 ec 28             	sub    esp,0x28
c0020904:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020908:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002090c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020910:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020914:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020919:	75 31                	jne    c002094c <fatWrapperIoctl+0x4c>
c002091b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020923:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020928:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c002092f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020935:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002093b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002093f:	66 89 02             	mov    WORD PTR [edx],ax
c0020942:	b8 00 00 00 00       	mov    eax,0x0
c0020947:	e9 b2 00 00 00       	jmp    c00209fe <fatWrapperIoctl+0xfe>
c002094c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020951:	75 6a                	jne    c00209bd <fatWrapperIoctl+0xbd>
c0020953:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020957:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002095b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020960:	8b 04 85 00 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f00]
c0020967:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002096d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020973:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020979:	89 c8                	mov    eax,ecx
c002097b:	89 da                	mov    edx,ebx
c002097d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020981:	c1 e0 0a             	shl    eax,0xa
c0020984:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020989:	8b 0c 8d 00 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1f00]
c0020990:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020996:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002099c:	89 cb                	mov    ebx,ecx
c002099e:	c1 fb 1f             	sar    ebx,0x1f
c00209a1:	53                   	push   ebx
c00209a2:	51                   	push   ecx
c00209a3:	52                   	push   edx
c00209a4:	50                   	push   eax
c00209a5:	e8 2a 5e 00 00       	call   c00267d4 <__udivdi3>
c00209aa:	83 c4 10             	add    esp,0x10
c00209ad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00209b1:	89 01                	mov    DWORD PTR [ecx],eax
c00209b3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00209b6:	b8 00 00 00 00       	mov    eax,0x0
c00209bb:	eb 41                	jmp    c00209fe <fatWrapperIoctl+0xfe>
c00209bd:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00209c2:	75 07                	jne    c00209cb <fatWrapperIoctl+0xcb>
c00209c4:	b8 00 00 00 00       	mov    eax,0x0
c00209c9:	eb 33                	jmp    c00209fe <fatWrapperIoctl+0xfe>
c00209cb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00209d0:	75 19                	jne    c00209eb <fatWrapperIoctl+0xeb>
c00209d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209de:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00209e4:	b8 00 00 00 00       	mov    eax,0x0
c00209e9:	eb 13                	jmp    c00209fe <fatWrapperIoctl+0xfe>
c00209eb:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00209f0:	75 07                	jne    c00209f9 <fatWrapperIoctl+0xf9>
c00209f2:	b8 00 00 00 00       	mov    eax,0x0
c00209f7:	eb 05                	jmp    c00209fe <fatWrapperIoctl+0xfe>
c00209f9:	b8 04 00 00 00       	mov    eax,0x4
c00209fe:	83 c4 28             	add    esp,0x28
c0020a01:	5b                   	pop    ebx
c0020a02:	c3                   	ret    
c0020a03:	90                   	nop

c0020a04 <FAT::FAT()>:
c0020a04:	83 ec 1c             	sub    esp,0x1c
c0020a07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a0b:	83 ec 0c             	sub    esp,0xc
c0020a0e:	50                   	push   eax
c0020a0f:	e8 8a 20 ff ff       	call   c0012a9e <Filesystem::Filesystem()>
c0020a14:	83 c4 10             	add    esp,0x10
c0020a17:	ba fc bf 02 c0       	mov    edx,0xc002bffc
c0020a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a20:	89 10                	mov    DWORD PTR [eax],edx
c0020a22:	c7 05 20 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031120,0x0
c0020a2c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020a34:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020a39:	7f 15                	jg     c0020a50 <FAT::FAT()+0x4c>
c0020a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a3f:	c7 04 85 40 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffceec0],0xffffffff
c0020a4a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020a4e:	eb e4                	jmp    c0020a34 <FAT::FAT()+0x30>
c0020a50:	90                   	nop
c0020a51:	83 c4 1c             	add    esp,0x1c
c0020a54:	c3                   	ret    
c0020a55:	90                   	nop

c0020a56 <FAT::fixFilepath(char*)>:
c0020a56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a5a:	8a 00                	mov    al,BYTE PTR [eax]
c0020a5c:	3c 40                	cmp    al,0x40
c0020a5e:	7e 2c                	jle    c0020a8c <FAT::fixFilepath(char*)+0x36>
c0020a60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a64:	8a 00                	mov    al,BYTE PTR [eax]
c0020a66:	83 e8 41             	sub    eax,0x41
c0020a69:	88 c2                	mov    dl,al
c0020a6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a6f:	88 10                	mov    BYTE PTR [eax],dl
c0020a71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a75:	8a 00                	mov    al,BYTE PTR [eax]
c0020a77:	0f be c0             	movsx  eax,al
c0020a7a:	8b 04 85 40 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffceec0]
c0020a81:	83 c0 30             	add    eax,0x30
c0020a84:	88 c2                	mov    dl,al
c0020a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020a8a:	88 10                	mov    BYTE PTR [eax],dl
c0020a8c:	90                   	nop
c0020a8d:	c3                   	ret    

c0020a8e <FAT::open(char const*, void**, FileOpenMode)>:
c0020a8e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020a94:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a9c:	74 0a                	je     c0020aa8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020a9e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020aa6:	75 0a                	jne    c0020ab2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020aa8:	b8 04 00 00 00       	mov    eax,0x4
c0020aad:	e9 fd 00 00 00       	jmp    c0020baf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ab2:	83 ec 08             	sub    esp,0x8
c0020ab5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020abc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ac0:	50                   	push   eax
c0020ac1:	e8 46 fd fd ff       	call   c000080c <strcpy>
c0020ac6:	83 c4 10             	add    esp,0x10
c0020ac9:	83 ec 08             	sub    esp,0x8
c0020acc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ad0:	50                   	push   eax
c0020ad1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ad8:	e8 79 ff ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020add:	83 c4 10             	add    esp,0x10
c0020ae0:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ae8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020aef:	83 e0 01             	and    eax,0x1
c0020af2:	74 08                	je     c0020afc <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020af4:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020afc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b03:	83 e0 04             	and    eax,0x4
c0020b06:	74 10                	je     c0020b18 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020b08:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020b10:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020b18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b1f:	83 e0 02             	and    eax,0x2
c0020b22:	74 08                	je     c0020b2c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020b24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020b2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b33:	83 e0 08             	and    eax,0x8
c0020b36:	74 08                	je     c0020b40 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020b38:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020b40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020b47:	83 e0 10             	and    eax,0x10
c0020b4a:	74 08                	je     c0020b54 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020b4c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020b54:	83 ec 0c             	sub    esp,0xc
c0020b57:	68 50 02 00 00       	push   0x250
c0020b5c:	e8 38 ea fe ff       	call   c000f599 <malloc>
c0020b61:	83 c4 10             	add    esp,0x10
c0020b64:	89 c2                	mov    edx,eax
c0020b66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b6d:	89 10                	mov    DWORD PTR [eax],edx
c0020b6f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020b77:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b80:	83 ec 04             	sub    esp,0x4
c0020b83:	52                   	push   edx
c0020b84:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020b88:	52                   	push   edx
c0020b89:	50                   	push   eax
c0020b8a:	e8 c8 43 fe ff       	call   c0004f57 <f_open>
c0020b8f:	83 c4 10             	add    esp,0x10
c0020b92:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020b99:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020ba1:	74 07                	je     c0020baa <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020ba3:	b8 01 00 00 00       	mov    eax,0x1
c0020ba8:	eb 05                	jmp    c0020baf <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020baa:	b8 00 00 00 00       	mov    eax,0x0
c0020baf:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bb5:	c3                   	ret    

c0020bb6 <FAT::openDir(char const*, void**)>:
c0020bb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020bbc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020bc4:	74 0a                	je     c0020bd0 <FAT::openDir(char const*, void**)+0x1a>
c0020bc6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020bce:	75 07                	jne    c0020bd7 <FAT::openDir(char const*, void**)+0x21>
c0020bd0:	b8 04 00 00 00       	mov    eax,0x4
c0020bd5:	eb 7d                	jmp    c0020c54 <FAT::openDir(char const*, void**)+0x9e>
c0020bd7:	83 ec 08             	sub    esp,0x8
c0020bda:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020be1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020be5:	50                   	push   eax
c0020be6:	e8 21 fc fd ff       	call   c000080c <strcpy>
c0020beb:	83 c4 10             	add    esp,0x10
c0020bee:	83 ec 08             	sub    esp,0x8
c0020bf1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bf5:	50                   	push   eax
c0020bf6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bfd:	e8 54 fe ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020c02:	83 c4 10             	add    esp,0x10
c0020c05:	83 ec 0c             	sub    esp,0xc
c0020c08:	6a 4c                	push   0x4c
c0020c0a:	e8 8a e9 fe ff       	call   c000f599 <malloc>
c0020c0f:	83 c4 10             	add    esp,0x10
c0020c12:	89 c2                	mov    edx,eax
c0020c14:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c1b:	89 10                	mov    DWORD PTR [eax],edx
c0020c1d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c26:	83 ec 08             	sub    esp,0x8
c0020c29:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c2d:	52                   	push   edx
c0020c2e:	50                   	push   eax
c0020c2f:	e8 5b 53 fe ff       	call   c0005f8f <f_opendir>
c0020c34:	83 c4 10             	add    esp,0x10
c0020c37:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020c3e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020c46:	74 07                	je     c0020c4f <FAT::openDir(char const*, void**)+0x99>
c0020c48:	b8 01 00 00 00       	mov    eax,0x1
c0020c4d:	eb 05                	jmp    c0020c54 <FAT::openDir(char const*, void**)+0x9e>
c0020c4f:	b8 00 00 00 00       	mov    eax,0x0
c0020c54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020c5a:	c3                   	ret    
c0020c5b:	90                   	nop

c0020c5c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020c5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020c62:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020c6a:	75 0a                	jne    c0020c76 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020c6c:	b8 04 00 00 00       	mov    eax,0x4
c0020c71:	e9 c9 00 00 00       	jmp    c0020d3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c76:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020c7e:	75 0a                	jne    c0020c8a <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020c80:	b8 04 00 00 00       	mov    eax,0x4
c0020c85:	e9 b5 00 00 00       	jmp    c0020d3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c8a:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020c92:	75 0a                	jne    c0020c9e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020c94:	b8 04 00 00 00       	mov    eax,0x4
c0020c99:	e9 a1 00 00 00       	jmp    c0020d3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c9e:	83 ec 08             	sub    esp,0x8
c0020ca1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ca8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020caf:	50                   	push   eax
c0020cb0:	e8 57 fb fd ff       	call   c000080c <strcpy>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	83 ec 08             	sub    esp,0x8
c0020cbb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020cc2:	50                   	push   eax
c0020cc3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020cca:	e8 87 fd ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020ccf:	83 c4 10             	add    esp,0x10
c0020cd2:	83 ec 08             	sub    esp,0x8
c0020cd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cd9:	50                   	push   eax
c0020cda:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020ce1:	50                   	push   eax
c0020ce2:	e8 67 54 fe ff       	call   c000614e <f_stat>
c0020ce7:	83 c4 10             	add    esp,0x10
c0020cea:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020cf1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020cf8:	85 c0                	test   eax,eax
c0020cfa:	74 07                	je     c0020d03 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020cfc:	83 f8 04             	cmp    eax,0x4
c0020cff:	74 32                	je     c0020d33 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020d01:	eb 37                	jmp    c0020d3a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020d03:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d07:	0f b6 c0             	movzx  eax,al
c0020d0a:	83 e0 10             	and    eax,0x10
c0020d0d:	0f 95 c2             	setne  dl
c0020d10:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020d17:	88 10                	mov    BYTE PTR [eax],dl
c0020d19:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020d20:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020d27:	89 01                	mov    DWORD PTR [ecx],eax
c0020d29:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020d2c:	b8 00 00 00 00       	mov    eax,0x0
c0020d31:	eb 0c                	jmp    c0020d3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d33:	b8 02 00 00 00       	mov    eax,0x2
c0020d38:	eb 05                	jmp    c0020d3f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020d3a:	b8 01 00 00 00       	mov    eax,0x1
c0020d3f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020d45:	c3                   	ret    

c0020d46 <FAT::unlink(char const*)>:
c0020d46:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d4c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d54:	75 07                	jne    c0020d5d <FAT::unlink(char const*)+0x17>
c0020d56:	b8 04 00 00 00       	mov    eax,0x4
c0020d5b:	eb 5c                	jmp    c0020db9 <FAT::unlink(char const*)+0x73>
c0020d5d:	83 ec 08             	sub    esp,0x8
c0020d60:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d67:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d6b:	50                   	push   eax
c0020d6c:	e8 9b fa fd ff       	call   c000080c <strcpy>
c0020d71:	83 c4 10             	add    esp,0x10
c0020d74:	83 ec 08             	sub    esp,0x8
c0020d77:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d7b:	50                   	push   eax
c0020d7c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d83:	e8 ce fc ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020d88:	83 c4 10             	add    esp,0x10
c0020d8b:	83 ec 0c             	sub    esp,0xc
c0020d8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d92:	50                   	push   eax
c0020d93:	e8 08 57 fe ff       	call   c00064a0 <f_unlink>
c0020d98:	83 c4 10             	add    esp,0x10
c0020d9b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020da2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020da9:	85 c0                	test   eax,eax
c0020dab:	75 07                	jne    c0020db4 <FAT::unlink(char const*)+0x6e>
c0020dad:	b8 00 00 00 00       	mov    eax,0x0
c0020db2:	eb 05                	jmp    c0020db9 <FAT::unlink(char const*)+0x73>
c0020db4:	b8 01 00 00 00       	mov    eax,0x1
c0020db9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020dbf:	c3                   	ret    

c0020dc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020dc0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020dc6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020dcd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020dd4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020dd8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020ddc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020de4:	75 0a                	jne    c0020df0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020de6:	b8 04 00 00 00       	mov    eax,0x4
c0020deb:	e9 1c 01 00 00       	jmp    c0020f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020df0:	83 ec 08             	sub    esp,0x8
c0020df3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020dfa:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020dfe:	50                   	push   eax
c0020dff:	e8 08 fa fd ff       	call   c000080c <strcpy>
c0020e04:	83 c4 10             	add    esp,0x10
c0020e07:	83 ec 08             	sub    esp,0x8
c0020e0a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020e0e:	50                   	push   eax
c0020e0f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020e16:	e8 3b fc ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020e1b:	83 c4 10             	add    esp,0x10
c0020e1e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020e26:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020e2e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e33:	83 e0 01             	and    eax,0x1
c0020e36:	74 08                	je     c0020e40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020e38:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020e40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e45:	83 e0 02             	and    eax,0x2
c0020e48:	74 08                	je     c0020e52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020e4a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020e52:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e57:	83 e0 04             	and    eax,0x4
c0020e5a:	74 08                	je     c0020e64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020e5c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020e64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020e69:	83 e0 08             	and    eax,0x8
c0020e6c:	74 08                	je     c0020e76 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020e6e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020e76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e7b:	83 e0 01             	and    eax,0x1
c0020e7e:	74 08                	je     c0020e88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020e80:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020e88:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e8d:	83 e0 02             	and    eax,0x2
c0020e90:	74 08                	je     c0020e9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020e92:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020e9a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e9f:	83 e0 04             	and    eax,0x4
c0020ea2:	74 08                	je     c0020eac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020ea4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020eac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eb1:	83 e0 08             	and    eax,0x8
c0020eb4:	74 08                	je     c0020ebe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020eb6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020ebe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020ec5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020ecc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020ed4:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020edc:	83 ec 04             	sub    esp,0x4
c0020edf:	52                   	push   edx
c0020ee0:	50                   	push   eax
c0020ee1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ee5:	50                   	push   eax
c0020ee6:	e8 57 5c fe ff       	call   c0006b42 <f_chmod>
c0020eeb:	83 c4 10             	add    esp,0x10
c0020eee:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020ef5:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020efc:	85 c0                	test   eax,eax
c0020efe:	75 07                	jne    c0020f07 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020f00:	b8 00 00 00 00       	mov    eax,0x0
c0020f05:	eb 05                	jmp    c0020f0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020f07:	b8 01 00 00 00       	mov    eax,0x1
c0020f0c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020f12:	c3                   	ret    
c0020f13:	90                   	nop

c0020f14 <FAT::rename(char const*, char const*)>:
c0020f14:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f1a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020f22:	74 0a                	je     c0020f2e <FAT::rename(char const*, char const*)+0x1a>
c0020f24:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020f2c:	75 0a                	jne    c0020f38 <FAT::rename(char const*, char const*)+0x24>
c0020f2e:	b8 04 00 00 00       	mov    eax,0x4
c0020f33:	e9 98 00 00 00       	jmp    c0020fd0 <FAT::rename(char const*, char const*)+0xbc>
c0020f38:	83 ec 08             	sub    esp,0x8
c0020f3b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020f49:	50                   	push   eax
c0020f4a:	e8 bd f8 fd ff       	call   c000080c <strcpy>
c0020f4f:	83 c4 10             	add    esp,0x10
c0020f52:	83 ec 08             	sub    esp,0x8
c0020f55:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020f5c:	50                   	push   eax
c0020f5d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f64:	e8 ed fa ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020f69:	83 c4 10             	add    esp,0x10
c0020f6c:	83 ec 08             	sub    esp,0x8
c0020f6f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020f76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f7a:	50                   	push   eax
c0020f7b:	e8 8c f8 fd ff       	call   c000080c <strcpy>
c0020f80:	83 c4 10             	add    esp,0x10
c0020f83:	83 ec 08             	sub    esp,0x8
c0020f86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f8a:	50                   	push   eax
c0020f8b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020f92:	e8 bf fa ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0020f97:	83 c4 10             	add    esp,0x10
c0020f9a:	83 ec 08             	sub    esp,0x8
c0020f9d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fa1:	50                   	push   eax
c0020fa2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020fa9:	50                   	push   eax
c0020faa:	e8 a0 58 fe ff       	call   c000684f <f_rename>
c0020faf:	83 c4 10             	add    esp,0x10
c0020fb2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020fb9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020fc0:	85 c0                	test   eax,eax
c0020fc2:	75 07                	jne    c0020fcb <FAT::rename(char const*, char const*)+0xb7>
c0020fc4:	b8 00 00 00 00       	mov    eax,0x0
c0020fc9:	eb 05                	jmp    c0020fd0 <FAT::rename(char const*, char const*)+0xbc>
c0020fcb:	b8 01 00 00 00       	mov    eax,0x1
c0020fd0:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020fd6:	c3                   	ret    
c0020fd7:	90                   	nop

c0020fd8 <FAT::mkdir(char const*)>:
c0020fd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fde:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fe6:	75 07                	jne    c0020fef <FAT::mkdir(char const*)+0x17>
c0020fe8:	b8 04 00 00 00       	mov    eax,0x4
c0020fed:	eb 5c                	jmp    c002104b <FAT::mkdir(char const*)+0x73>
c0020fef:	83 ec 08             	sub    esp,0x8
c0020ff2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ffd:	50                   	push   eax
c0020ffe:	e8 09 f8 fd ff       	call   c000080c <strcpy>
c0021003:	83 c4 10             	add    esp,0x10
c0021006:	83 ec 08             	sub    esp,0x8
c0021009:	8d 44 24 14          	lea    eax,[esp+0x14]
c002100d:	50                   	push   eax
c002100e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021015:	e8 3c fa ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c002101a:	83 c4 10             	add    esp,0x10
c002101d:	83 ec 0c             	sub    esp,0xc
c0021020:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021024:	50                   	push   eax
c0021025:	e8 f9 55 fe ff       	call   c0006623 <f_mkdir>
c002102a:	83 c4 10             	add    esp,0x10
c002102d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021034:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002103b:	85 c0                	test   eax,eax
c002103d:	75 07                	jne    c0021046 <FAT::mkdir(char const*)+0x6e>
c002103f:	b8 00 00 00 00       	mov    eax,0x0
c0021044:	eb 05                	jmp    c002104b <FAT::mkdir(char const*)+0x73>
c0021046:	b8 01 00 00 00       	mov    eax,0x1
c002104b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021051:	c3                   	ret    

c0021052 <FAT::exists(char const*)>:
c0021052:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021058:	83 ec 08             	sub    esp,0x8
c002105b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021062:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021066:	50                   	push   eax
c0021067:	e8 a0 f7 fd ff       	call   c000080c <strcpy>
c002106c:	83 c4 10             	add    esp,0x10
c002106f:	83 ec 08             	sub    esp,0x8
c0021072:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021076:	50                   	push   eax
c0021077:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002107e:	e8 d3 f9 ff ff       	call   c0020a56 <FAT::fixFilepath(char*)>
c0021083:	83 c4 10             	add    esp,0x10
c0021086:	83 ec 08             	sub    esp,0x8
c0021089:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021090:	50                   	push   eax
c0021091:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021095:	50                   	push   eax
c0021096:	e8 b3 50 fe ff       	call   c000614e <f_stat>
c002109b:	83 c4 10             	add    esp,0x10
c002109e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210a5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210ac:	85 c0                	test   eax,eax
c00210ae:	75 04                	jne    c00210b4 <FAT::exists(char const*)+0x62>
c00210b0:	b0 01                	mov    al,0x1
c00210b2:	eb 02                	jmp    c00210b6 <FAT::exists(char const*)+0x64>
c00210b4:	b0 00                	mov    al,0x0
c00210b6:	81 c4 2c 02 00 00    	add    esp,0x22c
c00210bc:	c3                   	ret    
c00210bd:	90                   	nop

c00210be <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00210be:	b8 08 00 00 00       	mov    eax,0x8
c00210c3:	c3                   	ret    

c00210c4 <ISO9660::seek(void*, unsigned long long)>:
c00210c4:	53                   	push   ebx
c00210c5:	b8 04 00 00 00       	mov    eax,0x4
c00210ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00210ce:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00210d6:	85 d2                	test   edx,edx
c00210d8:	74 17                	je     c00210f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210da:	89 c8                	mov    eax,ecx
c00210dc:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00210df:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00210e2:	b8 01 00 00 00       	mov    eax,0x1
c00210e7:	73 08                	jae    c00210f1 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00210e9:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00210ec:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00210ef:	31 c0                	xor    eax,eax
c00210f1:	5b                   	pop    ebx
c00210f2:	c3                   	ret    
c00210f3:	90                   	nop

c00210f4 <ISO9660::tell(void*, unsigned long long*)>:
c00210f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00210f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210fc:	85 d2                	test   edx,edx
c00210fe:	74 12                	je     c0021112 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021100:	85 c0                	test   eax,eax
c0021102:	74 0e                	je     c0021112 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021104:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021107:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002110a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002110d:	89 10                	mov    DWORD PTR [eax],edx
c002110f:	31 c0                	xor    eax,eax
c0021111:	c3                   	ret    
c0021112:	b8 04 00 00 00       	mov    eax,0x4
c0021117:	c3                   	ret    

c0021118 <ISO9660::getName()>:
c0021118:	b8 5c c0 02 c0       	mov    eax,0xc002c05c
c002111d:	c3                   	ret    

c002111e <ISO9660::stat(void*, unsigned long long*)>:
c002111e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021126:	85 d2                	test   edx,edx
c0021128:	74 12                	je     c002113c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002112a:	85 c0                	test   eax,eax
c002112c:	74 0e                	je     c002113c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002112e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021131:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021134:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021137:	89 10                	mov    DWORD PTR [eax],edx
c0021139:	31 c0                	xor    eax,eax
c002113b:	c3                   	ret    
c002113c:	b8 04 00 00 00       	mov    eax,0x4
c0021141:	c3                   	ret    

c0021142 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021142:	b8 01 00 00 00       	mov    eax,0x1
c0021147:	c3                   	ret    

c0021148 <ISO9660::unlink(char const*)>:
c0021148:	b8 01 00 00 00       	mov    eax,0x1
c002114d:	c3                   	ret    

c002114e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002114e:	b8 01 00 00 00       	mov    eax,0x1
c0021153:	c3                   	ret    

c0021154 <ISO9660::rename(char const*, char const*)>:
c0021154:	b8 01 00 00 00       	mov    eax,0x1
c0021159:	c3                   	ret    

c002115a <ISO9660::mkdir(char const*)>:
c002115a:	b8 01 00 00 00       	mov    eax,0x1
c002115f:	c3                   	ret    

c0021160 <ISO9660::close(void*)>:
c0021160:	83 ec 0c             	sub    esp,0xc
c0021163:	b8 04 00 00 00       	mov    eax,0x4
c0021168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002116c:	85 d2                	test   edx,edx
c002116e:	74 0e                	je     c002117e <ISO9660::close(void*)+0x1e>
c0021170:	83 ec 0c             	sub    esp,0xc
c0021173:	52                   	push   edx
c0021174:	e8 30 e4 fe ff       	call   c000f5a9 <free>
c0021179:	83 c4 10             	add    esp,0x10
c002117c:	31 c0                	xor    eax,eax
c002117e:	83 c4 0c             	add    esp,0xc
c0021181:	c3                   	ret    

c0021182 <ISO9660::closeDir(void*)>:
c0021182:	83 ec 0c             	sub    esp,0xc
c0021185:	b8 04 00 00 00       	mov    eax,0x4
c002118a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002118e:	85 d2                	test   edx,edx
c0021190:	74 0e                	je     c00211a0 <ISO9660::closeDir(void*)+0x1e>
c0021192:	83 ec 0c             	sub    esp,0xc
c0021195:	52                   	push   edx
c0021196:	e8 0e e4 fe ff       	call   c000f5a9 <free>
c002119b:	83 c4 10             	add    esp,0x10
c002119e:	31 c0                	xor    eax,eax
c00211a0:	83 c4 0c             	add    esp,0xc
c00211a3:	c3                   	ret    

c00211a4 <ISO9660::~ISO9660()>:
c00211a4:	83 ec 0c             	sub    esp,0xc
c00211a7:	ba 80 c0 02 c0       	mov    edx,0xc002c080
c00211ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b0:	89 10                	mov    DWORD PTR [eax],edx
c00211b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b6:	83 ec 0c             	sub    esp,0xc
c00211b9:	50                   	push   eax
c00211ba:	e8 03 19 ff ff       	call   c0012ac2 <Filesystem::~Filesystem()>
c00211bf:	83 c4 10             	add    esp,0x10
c00211c2:	90                   	nop
c00211c3:	83 c4 0c             	add    esp,0xc
c00211c6:	c3                   	ret    
c00211c7:	90                   	nop

c00211c8 <ISO9660::~ISO9660()>:
c00211c8:	83 ec 0c             	sub    esp,0xc
c00211cb:	83 ec 0c             	sub    esp,0xc
c00211ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211d2:	e8 cd ff ff ff       	call   c00211a4 <ISO9660::~ISO9660()>
c00211d7:	83 c4 10             	add    esp,0x10
c00211da:	83 ec 08             	sub    esp,0x8
c00211dd:	6a 08                	push   0x8
c00211df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211e3:	e8 d3 14 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00211e8:	83 c4 10             	add    esp,0x10
c00211eb:	83 c4 0c             	add    esp,0xc
c00211ee:	c3                   	ret    

c00211ef <__memmem(unsigned char*, int, unsigned char*, int)>:
c00211ef:	55                   	push   ebp
c00211f0:	31 c9                	xor    ecx,ecx
c00211f2:	57                   	push   edi
c00211f3:	56                   	push   esi
c00211f4:	53                   	push   ebx
c00211f5:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00211f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00211fd:	89 eb                	mov    ebx,ebp
c00211ff:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021203:	39 ce                	cmp    esi,ecx
c0021205:	7e 17                	jle    c002121e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021207:	31 d2                	xor    edx,edx
c0021209:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002120d:	7d 13                	jge    c0021222 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002120f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021213:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021216:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021219:	75 0d                	jne    c0021228 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002121b:	42                   	inc    edx
c002121c:	eb eb                	jmp    c0021209 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002121e:	31 c0                	xor    eax,eax
c0021220:	eb 0a                	jmp    c002122c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021222:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021226:	eb 04                	jmp    c002122c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021228:	41                   	inc    ecx
c0021229:	43                   	inc    ebx
c002122a:	eb d7                	jmp    c0021203 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002122c:	5b                   	pop    ebx
c002122d:	5e                   	pop    esi
c002122e:	5f                   	pop    edi
c002122f:	5d                   	pop    ebp
c0021230:	c3                   	ret    

c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021231:	57                   	push   edi
c0021232:	56                   	push   esi
c0021233:	53                   	push   ebx
c0021234:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021238:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002123c:	39 0d 20 12 03 c0    	cmp    DWORD PTR ds:0xc0031220,ecx
c0021242:	75 08                	jne    c002124c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021244:	38 05 94 d0 02 c0    	cmp    BYTE PTR ds:0xc002d094,al
c002124a:	74 2b                	je     c0021277 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002124c:	83 ec 0c             	sub    esp,0xc
c002124f:	a2 94 d0 02 c0       	mov    ds:0xc002d094,al
c0021254:	68 40 12 03 c0       	push   0xc0031240
c0021259:	0f be c0             	movsx  eax,al
c002125c:	6a 01                	push   0x1
c002125e:	89 0d 20 12 03 c0    	mov    DWORD PTR ds:0xc0031220,ecx
c0021264:	31 db                	xor    ebx,ebx
c0021266:	53                   	push   ebx
c0021267:	51                   	push   ecx
c0021268:	ff 34 85 fc df 02 c0 	push   DWORD PTR [eax*4-0x3ffd2004]
c002126f:	e8 74 4e ff ff       	call   c00160e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0021274:	83 c4 20             	add    esp,0x20
c0021277:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002127b:	be 40 12 03 c0       	mov    esi,0xc0031240
c0021280:	b9 00 08 00 00       	mov    ecx,0x800
c0021285:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021287:	5b                   	pop    ebx
c0021288:	5e                   	pop    esi
c0021289:	5f                   	pop    edi
c002128a:	c3                   	ret    
c002128b:	90                   	nop

c002128c <ISO9660::tryMount(LogicalDisk*, int)>:
c002128c:	81 ec 10 08 00 00    	sub    esp,0x810
c0021292:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021299:	83 c0 41             	add    eax,0x41
c002129c:	0f be c0             	movsx  eax,al
c002129f:	50                   	push   eax
c00212a0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212a4:	50                   	push   eax
c00212a5:	6a 10                	push   0x10
c00212a7:	e8 85 ff ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212ac:	83 c4 10             	add    esp,0x10
c00212af:	31 c0                	xor    eax,eax
c00212b1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00212b6:	75 1d                	jne    c00212d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212b8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00212bd:	75 16                	jne    c00212d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212bf:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00212c4:	75 0f                	jne    c00212d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212c6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00212cb:	75 08                	jne    c00212d5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00212cd:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00212d2:	0f 94 c0             	sete   al
c00212d5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00212db:	c3                   	ret    

c00212dc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00212dc:	55                   	push   ebp
c00212dd:	57                   	push   edi
c00212de:	56                   	push   esi
c00212df:	53                   	push   ebx
c00212e0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00212e6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00212ed:	85 ed                	test   ebp,ebp
c00212ef:	0f 84 da 01 00 00    	je     c00214cf <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00212f5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00212fd:	0f 84 cc 01 00 00    	je     c00214cf <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021303:	b8 01 00 00 00       	mov    eax,0x1
c0021308:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002130c:	0f 85 c2 01 00 00    	jne    c00214d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021312:	31 d2                	xor    edx,edx
c0021314:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002131b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002131e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021321:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021324:	89 04 24             	mov    DWORD PTR [esp],eax
c0021327:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002132b:	01 c8                	add    eax,ecx
c002132d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021330:	11 da                	adc    edx,ebx
c0021332:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021336:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002133a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002133e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021342:	19 d7                	sbb    edi,edx
c0021344:	72 11                	jb     c0021357 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021346:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021349:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002134d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021351:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021355:	eb 0c                	jmp    c0021363 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021357:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c002135b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002135f:	29 ce                	sub    esi,ecx
c0021361:	19 df                	sbb    edi,ebx
c0021363:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021366:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021369:	0f a4 c2 0b          	shld   edx,eax,0xb
c002136d:	c1 e0 0b             	shl    eax,0xb
c0021370:	01 c8                	add    eax,ecx
c0021372:	11 da                	adc    edx,ebx
c0021374:	89 04 24             	mov    DWORD PTR [esp],eax
c0021377:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002137b:	51                   	push   ecx
c002137c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021380:	50                   	push   eax
c0021381:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021385:	53                   	push   ebx
c0021386:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002138a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002138e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021392:	50                   	push   eax
c0021393:	e8 99 fe ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002139b:	b8 00 08 00 00       	mov    eax,0x800
c00213a0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00213a6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00213aa:	29 d0                	sub    eax,edx
c00213ac:	83 c4 10             	add    esp,0x10
c00213af:	89 f9                	mov    ecx,edi
c00213b1:	39 c6                	cmp    esi,eax
c00213b3:	83 d9 00             	sbb    ecx,0x0
c00213b6:	7d 1b                	jge    c00213d3 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00213b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00213bd:	75 12                	jne    c00213d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00213bf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00213cc:	e9 fa 00 00 00       	jmp    c00214cb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00213d1:	89 f0                	mov    eax,esi
c00213d3:	01 d3                	add    ebx,edx
c00213d5:	31 d2                	xor    edx,edx
c00213d7:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00213db:	39 c2                	cmp    edx,eax
c00213dd:	7d 14                	jge    c00213f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00213df:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00213e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00213ea:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00213ed:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00213f0:	42                   	inc    edx
c00213f1:	eb e8                	jmp    c00213db <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00213f3:	89 c2                	mov    edx,eax
c00213f5:	85 c0                	test   eax,eax
c00213f7:	79 02                	jns    c00213fb <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00213f9:	31 d2                	xor    edx,edx
c00213fb:	01 c2                	add    edx,eax
c00213fd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021400:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021407:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c002140b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002140f:	99                   	cdq    
c0021410:	01 c1                	add    ecx,eax
c0021412:	11 d3                	adc    ebx,edx
c0021414:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021418:	29 c6                	sub    esi,eax
c002141a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002141e:	19 d7                	sbb    edi,edx
c0021420:	89 34 24             	mov    DWORD PTR [esp],esi
c0021423:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021427:	b8 ff 07 00 00       	mov    eax,0x7ff
c002142c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002142f:	b8 00 00 00 00       	mov    eax,0x0
c0021434:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021438:	7d 43                	jge    c002147d <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c002143a:	52                   	push   edx
c002143b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002143f:	50                   	push   eax
c0021440:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021444:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021448:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002144c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021450:	50                   	push   eax
c0021451:	e8 db fd ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021456:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002145e:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021463:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c002146b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021473:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021478:	83 c4 10             	add    esp,0x10
c002147b:	eb aa                	jmp    c0021427 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002147d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021481:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021484:	74 2a                	je     c00214b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021486:	50                   	push   eax
c0021487:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002148b:	50                   	push   eax
c002148c:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021490:	56                   	push   esi
c0021491:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021495:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021499:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002149d:	51                   	push   ecx
c002149e:	e8 8e fd ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214a3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00214a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00214ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00214ad:	83 c4 10             	add    esp,0x10
c00214b0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00214b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00214bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214bf:	89 18                	mov    DWORD PTR [eax],ebx
c00214c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214c5:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00214c8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00214cb:	31 c0                	xor    eax,eax
c00214cd:	eb 05                	jmp    c00214d4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00214cf:	b8 04 00 00 00       	mov    eax,0x4
c00214d4:	81 c4 2c 08 00 00    	add    esp,0x82c
c00214da:	5b                   	pop    ebx
c00214db:	5e                   	pop    esi
c00214dc:	5f                   	pop    edi
c00214dd:	5d                   	pop    ebp
c00214de:	c3                   	ret    
c00214df:	90                   	nop

c00214e0 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00214e0:	55                   	push   ebp
c00214e1:	57                   	push   edi
c00214e2:	56                   	push   esi
c00214e3:	53                   	push   ebx
c00214e4:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00214ea:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00214f1:	85 ed                	test   ebp,ebp
c00214f3:	0f 84 51 02 00 00    	je     c002174a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00214f9:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021501:	0f 84 43 02 00 00    	je     c002174a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021507:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002150a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002150d:	75 0a                	jne    c0021519 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002150f:	b8 07 00 00 00       	mov    eax,0x7
c0021514:	e9 36 02 00 00       	jmp    c002174f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021519:	50                   	push   eax
c002151a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002151e:	50                   	push   eax
c002151f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021526:	53                   	push   ebx
c0021527:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002152a:	c1 e0 0b             	shl    eax,0xb
c002152d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021530:	c1 e8 0b             	shr    eax,0xb
c0021533:	50                   	push   eax
c0021534:	e8 f8 fc ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021539:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002153c:	83 c4 10             	add    esp,0x10
c002153f:	89 c1                	mov    ecx,eax
c0021541:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021544:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002154a:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002154d:	84 db                	test   bl,bl
c002154f:	0f 85 8b 00 00 00    	jne    c00215e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021555:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c002155b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002155e:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021564:	29 c6                	sub    esi,eax
c0021566:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002156a:	89 f3                	mov    ebx,esi
c002156c:	89 f1                	mov    ecx,esi
c002156e:	c1 fb 1f             	sar    ebx,0x1f
c0021571:	01 f0                	add    eax,esi
c0021573:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021576:	11 da                	adc    edx,ebx
c0021578:	89 04 24             	mov    DWORD PTR [esp],eax
c002157b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002157f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021582:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021585:	89 d8                	mov    eax,ebx
c0021587:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002158b:	ba 00 00 00 00       	mov    edx,0x0
c0021590:	19 f8                	sbb    eax,edi
c0021592:	b8 00 00 00 00       	mov    eax,0x0
c0021597:	73 08                	jae    c00215a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021599:	89 f0                	mov    eax,esi
c002159b:	89 fa                	mov    edx,edi
c002159d:	29 c8                	sub    eax,ecx
c002159f:	19 da                	sbb    edx,ebx
c00215a1:	89 d7                	mov    edi,edx
c00215a3:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00215a6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00215a9:	09 c7                	or     edi,eax
c00215ab:	0f 84 5e ff ff ff    	je     c002150f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00215b1:	57                   	push   edi
c00215b2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215b6:	50                   	push   eax
c00215b7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00215be:	53                   	push   ebx
c00215bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00215c2:	c1 e0 0b             	shl    eax,0xb
c00215c5:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00215c9:	c1 e8 0b             	shr    eax,0xb
c00215cc:	50                   	push   eax
c00215cd:	e8 5f fc ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215d5:	83 c4 10             	add    esp,0x10
c00215d8:	25 ff 07 00 00       	and    eax,0x7ff
c00215dd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00215e0:	31 ff                	xor    edi,edi
c00215e2:	56                   	push   esi
c00215e3:	6a 28                	push   0x28
c00215e5:	6a 00                	push   0x0
c00215e7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00215eb:	50                   	push   eax
c00215ec:	e8 5f f1 fd ff       	call   c0000750 <memset>
c00215f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00215f4:	25 ff 07 00 00       	and    eax,0x7ff
c00215f9:	89 c6                	mov    esi,eax
c00215fb:	83 c6 21             	add    esi,0x21
c00215fe:	83 d7 00             	adc    edi,0x0
c0021601:	83 c4 10             	add    esp,0x10
c0021604:	31 c9                	xor    ecx,ecx
c0021606:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002160d:	83 f9 28             	cmp    ecx,0x28
c0021610:	88 04 24             	mov    BYTE PTR [esp],al
c0021613:	0f 94 c2             	sete   dl
c0021616:	88 d0                	mov    al,dl
c0021618:	ba ff 07 00 00       	mov    edx,0x7ff
c002161d:	39 f2                	cmp    edx,esi
c002161f:	ba 00 00 00 00       	mov    edx,0x0
c0021624:	19 fa                	sbb    edx,edi
c0021626:	0f 92 c2             	setb   dl
c0021629:	09 c2                	or     edx,eax
c002162b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002162f:	0f 94 c0             	sete   al
c0021632:	08 d0                	or     al,dl
c0021634:	75 16                	jne    c002164c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021636:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c002163a:	74 10                	je     c002164c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002163c:	8a 04 24             	mov    al,BYTE PTR [esp]
c002163f:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021643:	41                   	inc    ecx
c0021644:	83 c6 01             	add    esi,0x1
c0021647:	83 d7 00             	adc    edi,0x0
c002164a:	eb ba                	jmp    c0021606 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002164c:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021653:	83 ec 0c             	sub    esp,0xc
c0021656:	8d 74 24 24          	lea    esi,[esp+0x24]
c002165a:	56                   	push   esi
c002165b:	e8 0c f1 fd ff       	call   c000076c <strlen>
c0021660:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021667:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002166b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021673:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021676:	5a                   	pop    edx
c0021677:	25 ff 07 00 00       	and    eax,0x7ff
c002167c:	59                   	pop    ecx
c002167d:	01 f8                	add    eax,edi
c002167f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021685:	83 e0 02             	and    eax,0x2
c0021688:	3c 01                	cmp    al,0x1
c002168a:	19 c0                	sbb    eax,eax
c002168c:	83 c0 02             	add    eax,0x2
c002168f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021693:	56                   	push   esi
c0021694:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021698:	50                   	push   eax
c0021699:	e8 6e f1 fd ff       	call   c000080c <strcpy>
c002169e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	84 c0                	test   al,al
c00216a7:	75 21                	jne    c00216ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00216a9:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00216b1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00216b9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00216c1:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00216c8:	eb 28                	jmp    c00216f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00216ca:	fe c8                	dec    al
c00216cc:	75 24                	jne    c00216f2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00216ce:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00216d6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00216de:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00216e6:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00216ed:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00216f2:	8d 74 24 40          	lea    esi,[esp+0x40]
c00216f6:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00216fd:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021704:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021706:	0f b6 f3             	movzx  esi,bl
c0021709:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021710:	31 db                	xor    ebx,ebx
c0021712:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021718:	89 df                	mov    edi,ebx
c002171a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c002171d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021720:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021723:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021726:	39 c6                	cmp    esi,eax
c0021728:	19 d7                	sbb    edi,edx
c002172a:	72 10                	jb     c002173c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002172c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021733:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c002173a:	eb 0a                	jmp    c0021746 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002173c:	29 f0                	sub    eax,esi
c002173e:	19 da                	sbb    edx,ebx
c0021740:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021743:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021746:	31 c0                	xor    eax,eax
c0021748:	eb 05                	jmp    c002174f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002174a:	b8 04 00 00 00       	mov    eax,0x4
c002174f:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021755:	5b                   	pop    ebx
c0021756:	5e                   	pop    esi
c0021757:	5f                   	pop    edi
c0021758:	5d                   	pop    ebp
c0021759:	c3                   	ret    

c002175a <readRoot(unsigned int*, unsigned int*, char)>:
c002175a:	57                   	push   edi
c002175b:	56                   	push   esi
c002175c:	81 ec 38 08 00 00    	sub    esp,0x838
c0021762:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002176a:	50                   	push   eax
c002176b:	8d 44 24 38          	lea    eax,[esp+0x38]
c002176f:	50                   	push   eax
c0021770:	6a 10                	push   0x10
c0021772:	e8 ba fa ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021777:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002177e:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021782:	b9 22 00 00 00       	mov    ecx,0x22
c0021787:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021789:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021790:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021794:	89 10                	mov    DWORD PTR [eax],edx
c0021796:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002179d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00217a1:	89 10                	mov    DWORD PTR [eax],edx
c00217a3:	81 c4 44 08 00 00    	add    esp,0x844
c00217a9:	b0 01                	mov    al,0x1
c00217ab:	5e                   	pop    esi
c00217ac:	5f                   	pop    edi
c00217ad:	c3                   	ret    

c00217ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00217ae:	55                   	push   ebp
c00217af:	57                   	push   edi
c00217b0:	56                   	push   esi
c00217b1:	53                   	push   ebx
c00217b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00217b8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00217bf:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00217c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217ca:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00217ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00217d2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217d6:	75 03                	jne    c00217db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217d8:	83 c3 02             	add    ebx,0x2
c00217db:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00217de:	75 03                	jne    c00217e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00217e0:	43                   	inc    ebx
c00217e1:	eb f8                	jmp    c00217db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00217e3:	51                   	push   ecx
c00217e4:	68 00 01 00 00       	push   0x100
c00217e9:	6a 00                	push   0x0
c00217eb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217ef:	50                   	push   eax
c00217f0:	e8 5b ef fd ff       	call   c0000750 <memset>
c00217f5:	83 c4 10             	add    esp,0x10
c00217f8:	31 d2                	xor    edx,edx
c00217fa:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00217fd:	84 c0                	test   al,al
c00217ff:	74 21                	je     c0021822 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021801:	3c 2f                	cmp    al,0x2f
c0021803:	75 0b                	jne    c0021810 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021805:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021809:	bd 01 00 00 00       	mov    ebp,0x1
c002180e:	eb 14                	jmp    c0021824 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021810:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021813:	80 f9 19             	cmp    cl,0x19
c0021816:	77 03                	ja     c002181b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021818:	83 e8 20             	sub    eax,0x20
c002181b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002181f:	42                   	inc    edx
c0021820:	eb d8                	jmp    c00217fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021822:	31 ed                	xor    ebp,ebp
c0021824:	83 ec 0c             	sub    esp,0xc
c0021827:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002182e:	e8 66 dd fe ff       	call   c000f599 <malloc>
c0021833:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002183a:	89 c6                	mov    esi,eax
c002183c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021842:	c1 ef 0b             	shr    edi,0xb
c0021845:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002184c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021850:	83 c4 10             	add    esp,0x10
c0021853:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021858:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002185c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021863:	74 28                	je     c002188d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021865:	52                   	push   edx
c0021866:	57                   	push   edi
c0021867:	50                   	push   eax
c0021868:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002186c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021873:	e8 b9 f9 ff ff       	call   c0021231 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002187c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021883:	05 00 08 00 00       	add    eax,0x800
c0021888:	83 c4 10             	add    esp,0x10
c002188b:	eb cb                	jmp    c0021858 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021894:	57                   	push   edi
c0021895:	e8 d2 ee fd ff       	call   c000076c <strlen>
c002189a:	50                   	push   eax
c002189b:	57                   	push   edi
c002189c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00218a3:	56                   	push   esi
c00218a4:	e8 46 f9 ff ff       	call   c00211ef <__memmem(unsigned char*, int, unsigned char*, int)>
c00218a9:	83 c4 20             	add    esp,0x20
c00218ac:	85 c0                	test   eax,eax
c00218ae:	75 13                	jne    c00218c3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00218b0:	83 ec 0c             	sub    esp,0xc
c00218b3:	56                   	push   esi
c00218b4:	e8 f0 dc fe ff       	call   c000f5a9 <free>
c00218b9:	83 c4 10             	add    esp,0x10
c00218bc:	31 c0                	xor    eax,eax
c00218be:	e9 b3 00 00 00       	jmp    c0021976 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00218c3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00218c7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00218cb:	c1 e7 08             	shl    edi,0x8
c00218ce:	c1 e2 10             	shl    edx,0x10
c00218d1:	09 d7                	or     edi,edx
c00218d3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00218d7:	09 d7                	or     edi,edx
c00218d9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00218dd:	c1 e2 18             	shl    edx,0x18
c00218e0:	09 d7                	or     edi,edx
c00218e2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00218e6:	89 d1                	mov    ecx,edx
c00218e8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00218ec:	c1 e1 08             	shl    ecx,0x8
c00218ef:	c1 e2 10             	shl    edx,0x10
c00218f2:	09 ca                	or     edx,ecx
c00218f4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00218f8:	09 ca                	or     edx,ecx
c00218fa:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00218fe:	c1 e1 18             	shl    ecx,0x18
c0021901:	09 ca                	or     edx,ecx
c0021903:	89 e9                	mov    ecx,ebp
c0021905:	84 c9                	test   cl,cl
c0021907:	74 3c                	je     c0021945 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021909:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002190d:	83 ec 0c             	sub    esp,0xc
c0021910:	56                   	push   esi
c0021911:	e8 93 dc fe ff       	call   c000f5a9 <free>
c0021916:	83 c4 0c             	add    esp,0xc
c0021919:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021920:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021925:	50                   	push   eax
c0021926:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002192d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021934:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021938:	52                   	push   edx
c0021939:	57                   	push   edi
c002193a:	53                   	push   ebx
c002193b:	e8 6e fe ff ff       	call   c00217ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021940:	83 c4 20             	add    esp,0x20
c0021943:	eb 31                	jmp    c0021976 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021945:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021948:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002194f:	d0 e8                	shr    al,1
c0021951:	89 3b                	mov    DWORD PTR [ebx],edi
c0021953:	83 e0 01             	and    eax,0x1
c0021956:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002195d:	83 ec 0c             	sub    esp,0xc
c0021960:	89 13                	mov    DWORD PTR [ebx],edx
c0021962:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021969:	89 03                	mov    DWORD PTR [ebx],eax
c002196b:	56                   	push   esi
c002196c:	e8 38 dc fe ff       	call   c000f5a9 <free>
c0021971:	83 c4 10             	add    esp,0x10
c0021974:	b0 01                	mov    al,0x1
c0021976:	81 c4 1c 01 00 00    	add    esp,0x11c
c002197c:	5b                   	pop    ebx
c002197d:	5e                   	pop    esi
c002197e:	5f                   	pop    edi
c002197f:	5d                   	pop    ebp
c0021980:	c3                   	ret    

c0021981 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021981:	55                   	push   ebp
c0021982:	57                   	push   edi
c0021983:	56                   	push   esi
c0021984:	53                   	push   ebx
c0021985:	83 ec 20             	sub    esp,0x20
c0021988:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002198c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021990:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021994:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002199c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00219a4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00219a9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00219af:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00219b5:	57                   	push   edi
c00219b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219ba:	50                   	push   eax
c00219bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219bf:	50                   	push   eax
c00219c0:	e8 95 fd ff ff       	call   c002175a <readRoot(unsigned int*, unsigned int*, char)>
c00219c5:	5a                   	pop    edx
c00219c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00219ca:	e8 9d ed fd ff       	call   c000076c <strlen>
c00219cf:	83 c4 10             	add    esp,0x10
c00219d2:	83 f8 03             	cmp    eax,0x3
c00219d5:	77 17                	ja     c00219ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00219d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219db:	89 03                	mov    DWORD PTR [ebx],eax
c00219dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219e1:	89 06                	mov    DWORD PTR [esi],eax
c00219e3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00219ea:	b0 01                	mov    al,0x1
c00219ec:	eb 19                	jmp    c0021a07 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00219ee:	50                   	push   eax
c00219ef:	55                   	push   ebp
c00219f0:	57                   	push   edi
c00219f1:	56                   	push   esi
c00219f2:	53                   	push   ebx
c00219f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00219fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00219ff:	e8 aa fd ff ff       	call   c00217ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021a04:	83 c4 20             	add    esp,0x20
c0021a07:	83 c4 1c             	add    esp,0x1c
c0021a0a:	5b                   	pop    ebx
c0021a0b:	5e                   	pop    esi
c0021a0c:	5f                   	pop    edi
c0021a0d:	5d                   	pop    ebp
c0021a0e:	c3                   	ret    
c0021a0f:	90                   	nop

c0021a10 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021a10:	57                   	push   edi
c0021a11:	56                   	push   esi
c0021a12:	53                   	push   ebx
c0021a13:	83 ec 10             	sub    esp,0x10
c0021a16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a1a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a1e:	85 ff                	test   edi,edi
c0021a20:	0f 84 8b 00 00 00    	je     c0021ab1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021a26:	85 f6                	test   esi,esi
c0021a28:	0f 84 83 00 00 00    	je     c0021ab1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021a2e:	b8 03 00 00 00       	mov    eax,0x3
c0021a33:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021a38:	75 7c                	jne    c0021ab6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a3a:	83 ec 0c             	sub    esp,0xc
c0021a3d:	6a 1c                	push   0x1c
c0021a3f:	e8 55 db fe ff       	call   c000f599 <malloc>
c0021a44:	89 07                	mov    DWORD PTR [edi],eax
c0021a46:	89 c3                	mov    ebx,eax
c0021a48:	58                   	pop    eax
c0021a49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a4d:	50                   	push   eax
c0021a4e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a51:	50                   	push   eax
c0021a52:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a56:	50                   	push   eax
c0021a57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a5b:	50                   	push   eax
c0021a5c:	56                   	push   esi
c0021a5d:	e8 1f ff ff ff       	call   c0021981 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a62:	83 c4 20             	add    esp,0x20
c0021a65:	84 c0                	test   al,al
c0021a67:	74 07                	je     c0021a70 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021a69:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a6e:	74 0b                	je     c0021a7b <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021a70:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a74:	b8 01 00 00 00       	mov    eax,0x1
c0021a79:	eb 3b                	jmp    c0021ab6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021a7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a7f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a83:	89 03                	mov    DWORD PTR [ebx],eax
c0021a85:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a90:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a9e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021aa1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021aa8:	8a 06                	mov    al,BYTE PTR [esi]
c0021aaa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021aad:	31 c0                	xor    eax,eax
c0021aaf:	eb 05                	jmp    c0021ab6 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021ab1:	b8 04 00 00 00       	mov    eax,0x4
c0021ab6:	83 c4 10             	add    esp,0x10
c0021ab9:	5b                   	pop    ebx
c0021aba:	5e                   	pop    esi
c0021abb:	5f                   	pop    edi
c0021abc:	c3                   	ret    
c0021abd:	90                   	nop

c0021abe <ISO9660::exists(char const*)>:
c0021abe:	83 ec 28             	sub    esp,0x28
c0021ac1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ac5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ac9:	52                   	push   edx
c0021aca:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021acd:	52                   	push   edx
c0021ace:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ad2:	52                   	push   edx
c0021ad3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021ad7:	52                   	push   edx
c0021ad8:	50                   	push   eax
c0021ad9:	e8 a3 fe ff ff       	call   c0021981 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ade:	83 c4 3c             	add    esp,0x3c
c0021ae1:	c3                   	ret    

c0021ae2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021ae2:	56                   	push   esi
c0021ae3:	53                   	push   ebx
c0021ae4:	83 ec 14             	sub    esp,0x14
c0021ae7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021aeb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021aef:	85 db                	test   ebx,ebx
c0021af1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021af5:	0f 94 c2             	sete   dl
c0021af8:	85 f6                	test   esi,esi
c0021afa:	0f 94 c0             	sete   al
c0021afd:	08 c2                	or     dl,al
c0021aff:	75 68                	jne    c0021b69 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b01:	85 c9                	test   ecx,ecx
c0021b03:	74 64                	je     c0021b69 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021b05:	83 ec 0c             	sub    esp,0xc
c0021b08:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021b0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b15:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b1c:	50                   	push   eax
c0021b1d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021b20:	50                   	push   eax
c0021b21:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b25:	50                   	push   eax
c0021b26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021b2a:	50                   	push   eax
c0021b2b:	51                   	push   ecx
c0021b2c:	e8 50 fe ff ff       	call   c0021981 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021b31:	83 c4 20             	add    esp,0x20
c0021b34:	ba 01 00 00 00       	mov    edx,0x1
c0021b39:	84 c0                	test   al,al
c0021b3b:	74 31                	je     c0021b6e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b41:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b48:	89 03                	mov    DWORD PTR [ebx],eax
c0021b4a:	ba 00 00 00 00       	mov    edx,0x0
c0021b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b53:	85 c0                	test   eax,eax
c0021b55:	0f 95 06             	setne  BYTE PTR [esi]
c0021b58:	74 14                	je     c0021b6e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b5a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021b60:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b67:	eb 05                	jmp    c0021b6e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021b69:	ba 04 00 00 00       	mov    edx,0x4
c0021b6e:	83 c4 14             	add    esp,0x14
c0021b71:	89 d0                	mov    eax,edx
c0021b73:	5b                   	pop    ebx
c0021b74:	5e                   	pop    esi
c0021b75:	c3                   	ret    

c0021b76 <ISO9660::openDir(char const*, void**)>:
c0021b76:	57                   	push   edi
c0021b77:	56                   	push   esi
c0021b78:	53                   	push   ebx
c0021b79:	83 ec 10             	sub    esp,0x10
c0021b7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021b80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021b84:	85 ff                	test   edi,edi
c0021b86:	74 7b                	je     c0021c03 <ISO9660::openDir(char const*, void**)+0x8d>
c0021b88:	85 f6                	test   esi,esi
c0021b8a:	74 77                	je     c0021c03 <ISO9660::openDir(char const*, void**)+0x8d>
c0021b8c:	83 ec 0c             	sub    esp,0xc
c0021b8f:	6a 1c                	push   0x1c
c0021b91:	e8 03 da fe ff       	call   c000f599 <malloc>
c0021b96:	89 07                	mov    DWORD PTR [edi],eax
c0021b98:	89 c3                	mov    ebx,eax
c0021b9a:	58                   	pop    eax
c0021b9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021b9f:	50                   	push   eax
c0021ba0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021ba3:	50                   	push   eax
c0021ba4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ba8:	50                   	push   eax
c0021ba9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bad:	50                   	push   eax
c0021bae:	56                   	push   esi
c0021baf:	e8 cd fd ff ff       	call   c0021981 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021bb4:	83 c4 20             	add    esp,0x20
c0021bb7:	84 c0                	test   al,al
c0021bb9:	74 07                	je     c0021bc2 <ISO9660::openDir(char const*, void**)+0x4c>
c0021bbb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021bc0:	75 0b                	jne    c0021bcd <ISO9660::openDir(char const*, void**)+0x57>
c0021bc2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021bc6:	b8 01 00 00 00       	mov    eax,0x1
c0021bcb:	eb 3b                	jmp    c0021c08 <ISO9660::openDir(char const*, void**)+0x92>
c0021bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bd1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021bd5:	89 03                	mov    DWORD PTR [ebx],eax
c0021bd7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021bde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021be2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021be9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021bf0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021bf3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021bfa:	8a 06                	mov    al,BYTE PTR [esi]
c0021bfc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021bff:	31 c0                	xor    eax,eax
c0021c01:	eb 05                	jmp    c0021c08 <ISO9660::openDir(char const*, void**)+0x92>
c0021c03:	b8 04 00 00 00       	mov    eax,0x4
c0021c08:	83 c4 10             	add    esp,0x10
c0021c0b:	5b                   	pop    ebx
c0021c0c:	5e                   	pop    esi
c0021c0d:	5f                   	pop    edi
c0021c0e:	c3                   	ret    
c0021c0f:	90                   	nop

c0021c10 <ISO9660::ISO9660()>:
c0021c10:	83 ec 0c             	sub    esp,0xc
c0021c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c17:	83 ec 0c             	sub    esp,0xc
c0021c1a:	50                   	push   eax
c0021c1b:	e8 7e 0e ff ff       	call   c0012a9e <Filesystem::Filesystem()>
c0021c20:	83 c4 10             	add    esp,0x10
c0021c23:	ba 80 c0 02 c0       	mov    edx,0xc002c080
c0021c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c2c:	89 10                	mov    DWORD PTR [eax],edx
c0021c2e:	90                   	nop
c0021c2f:	83 c4 0c             	add    esp,0xc
c0021c32:	c3                   	ret    
c0021c33:	90                   	nop

c0021c34 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021c34:	83 ec 1c             	sub    esp,0x1c
c0021c37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021c3f:	89 10                	mov    DWORD PTR [eax],edx
c0021c41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c45:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021c49:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c50:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021c54:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c57:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021c5c:	75 23                	jne    c0021c81 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021c5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c62:	8b 10                	mov    edx,DWORD PTR [eax]
c0021c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c6b:	0f af c2             	imul   eax,edx
c0021c6e:	85 c0                	test   eax,eax
c0021c70:	79 03                	jns    c0021c75 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021c72:	83 c0 03             	add    eax,0x3
c0021c75:	c1 f8 02             	sar    eax,0x2
c0021c78:	05 a0 0f 00 00       	add    eax,0xfa0
c0021c7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021c81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021c89:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021c8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c90:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c9b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ca6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ca9:	c1 e0 02             	shl    eax,0x2
c0021cac:	83 ec 0c             	sub    esp,0xc
c0021caf:	50                   	push   eax
c0021cb0:	e8 e4 d8 fe ff       	call   c000f599 <malloc>
c0021cb5:	83 c4 10             	add    esp,0x10
c0021cb8:	89 c2                	mov    edx,eax
c0021cba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cbe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021cc1:	83 ec 04             	sub    esp,0x4
c0021cc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cc8:	50                   	push   eax
c0021cc9:	6a 01                	push   0x1
c0021ccb:	6a 04                	push   0x4
c0021ccd:	e8 93 6e fe ff       	call   c0008b65 <src_new>
c0021cd2:	83 c4 10             	add    esp,0x10
c0021cd5:	89 c2                	mov    edx,eax
c0021cd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021cdb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ce2:	85 c0                	test   eax,eax
c0021ce4:	74 10                	je     c0021cf6 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021ce6:	83 ec 0c             	sub    esp,0xc
c0021ce9:	68 e0 c0 02 c0       	push   0xc002c0e0
c0021cee:	e8 0c 82 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0021cf3:	83 c4 10             	add    esp,0x10
c0021cf6:	a0 40 1e 03 c0       	mov    al,ds:0xc0031e40
c0021cfb:	83 f0 01             	xor    eax,0x1
c0021cfe:	84 c0                	test   al,al
c0021d00:	74 57                	je     c0021d59 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021d02:	a1 fc c0 02 c0       	mov    eax,ds:0xc002c0fc
c0021d07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021d0b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d13:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021d1b:	7f 35                	jg     c0021d52 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021d1d:	83 ec 0c             	sub    esp,0xc
c0021d20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d24:	e8 d6 53 00 00       	call   c00270ff <__floatsisf>
c0021d29:	83 c4 10             	add    esp,0x10
c0021d2c:	8b 15 fc c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0fc
c0021d32:	83 ec 08             	sub    esp,0x8
c0021d35:	52                   	push   edx
c0021d36:	50                   	push   eax
c0021d37:	e8 d5 4f 00 00       	call   c0026d11 <__mulsf3>
c0021d3c:	83 c4 10             	add    esp,0x10
c0021d3f:	89 c2                	mov    edx,eax
c0021d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d45:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0021d4c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021d50:	eb c1                	jmp    c0021d13 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021d52:	c6 05 40 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e40,0x1
c0021d59:	90                   	nop
c0021d5a:	83 c4 1c             	add    esp,0x1c
c0021d5d:	c3                   	ret    

c0021d5e <SoundChannel::~SoundChannel()>:
c0021d5e:	83 ec 0c             	sub    esp,0xc
c0021d61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d65:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021d68:	83 ec 0c             	sub    esp,0xc
c0021d6b:	50                   	push   eax
c0021d6c:	e8 38 d8 fe ff       	call   c000f5a9 <free>
c0021d71:	83 c4 10             	add    esp,0x10
c0021d74:	90                   	nop
c0021d75:	83 c4 0c             	add    esp,0xc
c0021d78:	c3                   	ret    
c0021d79:	90                   	nop

c0021d7a <SoundChannel::getSampleRate()>:
c0021d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d80:	c3                   	ret    
c0021d81:	90                   	nop

c0021d82 <SoundChannel::getBits()>:
c0021d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d89:	c3                   	ret    

c0021d8a <SoundChannel::getBufferUsed()>:
c0021d8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d8e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021d91:	c3                   	ret    

c0021d92 <SoundChannel::getBufferSize()>:
c0021d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d96:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021d99:	c3                   	ret    

c0021d9a <SoundChannel::unbuffer(float*, int, int)>:
c0021d9a:	56                   	push   esi
c0021d9b:	53                   	push   ebx
c0021d9c:	83 ec 40             	sub    esp,0x40
c0021d9f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021da3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021da6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021daa:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021dad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021db1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021db5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021db9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021dbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021dc1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021dc5:	e8 35 53 00 00       	call   c00270ff <__floatsisf>
c0021dca:	5a                   	pop    edx
c0021dcb:	89 c6                	mov    esi,eax
c0021dcd:	ff 33                	push   DWORD PTR [ebx]
c0021dcf:	e8 2b 53 00 00       	call   c00270ff <__floatsisf>
c0021dd4:	59                   	pop    ecx
c0021dd5:	5a                   	pop    edx
c0021dd6:	50                   	push   eax
c0021dd7:	56                   	push   esi
c0021dd8:	e8 f7 50 00 00       	call   c0026ed4 <__divsf3>
c0021ddd:	89 04 24             	mov    DWORD PTR [esp],eax
c0021de0:	e8 ea 65 00 00       	call   c00283cf <__extendsfdf2>
c0021de5:	59                   	pop    ecx
c0021de6:	5e                   	pop    esi
c0021de7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021deb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021def:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021df7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dfb:	50                   	push   eax
c0021dfc:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021dff:	e8 56 69 fe ff       	call   c000875a <src_process>
c0021e04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021e08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021e0b:	83 c4 0c             	add    esp,0xc
c0021e0e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021e11:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021e14:	29 d0                	sub    eax,edx
c0021e16:	c1 e0 02             	shl    eax,0x2
c0021e19:	50                   	push   eax
c0021e1a:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021e1d:	50                   	push   eax
c0021e1e:	51                   	push   ecx
c0021e1f:	e8 64 e8 fd ff       	call   c0000688 <memmove>
c0021e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021e28:	83 c4 44             	add    esp,0x44
c0021e2b:	5b                   	pop    ebx
c0021e2c:	5e                   	pop    esi
c0021e2d:	c3                   	ret    

c0021e2e <SoundChannel::buffer16(short*, int)>:
c0021e2e:	55                   	push   ebp
c0021e2f:	57                   	push   edi
c0021e30:	56                   	push   esi
c0021e31:	53                   	push   ebx
c0021e32:	83 ec 1c             	sub    esp,0x1c
c0021e35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021e39:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e3c:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e3f:	0f 84 d2 00 00 00    	je     c0021f17 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e45:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021e49:	85 ed                	test   ebp,ebp
c0021e4b:	0f 8e c6 00 00 00    	jle    c0021f17 <SoundChannel::buffer16(short*, int)+0xe9>
c0021e51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e55:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021e5a:	83 ec 0c             	sub    esp,0xc
c0021e5d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021e60:	50                   	push   eax
c0021e61:	e8 99 52 00 00       	call   c00270ff <__floatsisf>
c0021e66:	59                   	pop    ecx
c0021e67:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021e6a:	5f                   	pop    edi
c0021e6b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021e6e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e71:	55                   	push   ebp
c0021e72:	50                   	push   eax
c0021e73:	e8 99 4e 00 00       	call   c0026d11 <__mulsf3>
c0021e78:	83 c4 10             	add    esp,0x10
c0021e7b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021e7e:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021e81:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021e84:	0f 84 99 00 00 00    	je     c0021f23 <SoundChannel::buffer16(short*, int)+0xf5>
c0021e8a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021e8f:	74 78                	je     c0021f09 <SoundChannel::buffer16(short*, int)+0xdb>
c0021e91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021e95:	83 ec 0c             	sub    esp,0xc
c0021e98:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021e9c:	50                   	push   eax
c0021e9d:	e8 5d 52 00 00       	call   c00270ff <__floatsisf>
c0021ea2:	5f                   	pop    edi
c0021ea3:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021ea6:	5a                   	pop    edx
c0021ea7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021eaa:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021ead:	55                   	push   ebp
c0021eae:	50                   	push   eax
c0021eaf:	e8 5d 4e 00 00       	call   c0026d11 <__mulsf3>
c0021eb4:	83 c4 10             	add    esp,0x10
c0021eb7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021eba:	be 02 00 00 00       	mov    esi,0x2
c0021ebf:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021ec2:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021ec5:	74 46                	je     c0021f0d <SoundChannel::buffer16(short*, int)+0xdf>
c0021ec7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021ecb:	eb 36                	jmp    c0021f03 <SoundChannel::buffer16(short*, int)+0xd5>
c0021ecd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021ed1:	83 ec 0c             	sub    esp,0xc
c0021ed4:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021ed8:	46                   	inc    esi
c0021ed9:	50                   	push   eax
c0021eda:	e8 20 52 00 00       	call   c00270ff <__floatsisf>
c0021edf:	5a                   	pop    edx
c0021ee0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021ee3:	59                   	pop    ecx
c0021ee4:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021ee7:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021eee:	50                   	push   eax
c0021eef:	e8 1d 4e 00 00       	call   c0026d11 <__mulsf3>
c0021ef4:	83 c4 10             	add    esp,0x10
c0021ef7:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021efb:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021efe:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021f01:	74 0a                	je     c0021f0d <SoundChannel::buffer16(short*, int)+0xdf>
c0021f03:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021f07:	75 c4                	jne    c0021ecd <SoundChannel::buffer16(short*, int)+0x9f>
c0021f09:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021f0d:	83 c4 1c             	add    esp,0x1c
c0021f10:	89 f0                	mov    eax,esi
c0021f12:	5b                   	pop    ebx
c0021f13:	5e                   	pop    esi
c0021f14:	5f                   	pop    edi
c0021f15:	5d                   	pop    ebp
c0021f16:	c3                   	ret    
c0021f17:	83 c4 1c             	add    esp,0x1c
c0021f1a:	31 f6                	xor    esi,esi
c0021f1c:	5b                   	pop    ebx
c0021f1d:	89 f0                	mov    eax,esi
c0021f1f:	5e                   	pop    esi
c0021f20:	5f                   	pop    edi
c0021f21:	5d                   	pop    ebp
c0021f22:	c3                   	ret    
c0021f23:	be 01 00 00 00       	mov    esi,0x1
c0021f28:	eb e3                	jmp    c0021f0d <SoundChannel::buffer16(short*, int)+0xdf>

c0021f2a <SoundChannel::buffer8(unsigned char*, int)>:
c0021f2a:	55                   	push   ebp
c0021f2b:	57                   	push   edi
c0021f2c:	56                   	push   esi
c0021f2d:	53                   	push   ebx
c0021f2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021f32:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021f36:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021f3d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f40:	74 7a                	je     c0021fbc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f42:	85 ff                	test   edi,edi
c0021f44:	7e 76                	jle    c0021fbc <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021f46:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021f4a:	8d 70 01             	lea    esi,[eax+0x1]
c0021f4d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f50:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f53:	8b 1c 9d 40 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5c0]
c0021f5a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021f60:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021f63:	74 5e                	je     c0021fc3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021f65:	83 ff 01             	cmp    edi,0x1
c0021f68:	74 4b                	je     c0021fb5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021f6a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021f6e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021f71:	8d 70 01             	lea    esi,[eax+0x1]
c0021f74:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f77:	8b 1c 9d 40 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5c0]
c0021f7e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021f81:	b8 02 00 00 00       	mov    eax,0x2
c0021f86:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021f89:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021f8c:	75 23                	jne    c0021fb1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021f8e:	eb 27                	jmp    c0021fb7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021f90:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021f95:	8d 71 01             	lea    esi,[ecx+0x1]
c0021f98:	40                   	inc    eax
c0021f99:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021f9c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021f9f:	8b 1c 9d 40 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce5c0]
c0021fa6:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021fa9:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021fac:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021faf:	74 06                	je     c0021fb7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021fb1:	39 c7                	cmp    edi,eax
c0021fb3:	75 db                	jne    c0021f90 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021fb5:	89 f8                	mov    eax,edi
c0021fb7:	5b                   	pop    ebx
c0021fb8:	5e                   	pop    esi
c0021fb9:	5f                   	pop    edi
c0021fba:	5d                   	pop    ebp
c0021fbb:	c3                   	ret    
c0021fbc:	5b                   	pop    ebx
c0021fbd:	31 c0                	xor    eax,eax
c0021fbf:	5e                   	pop    esi
c0021fc0:	5f                   	pop    edi
c0021fc1:	5d                   	pop    ebp
c0021fc2:	c3                   	ret    
c0021fc3:	b8 01 00 00 00       	mov    eax,0x1
c0021fc8:	eb ed                	jmp    c0021fb7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021fca <SoundDevice::SoundDevice(char const*)>:
c0021fca:	83 ec 1c             	sub    esp,0x1c
c0021fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fd1:	83 ec 08             	sub    esp,0x8
c0021fd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021fd8:	50                   	push   eax
c0021fd9:	e8 f2 1d ff ff       	call   c0013dd0 <Device::Device(char const*)>
c0021fde:	83 c4 10             	add    esp,0x10
c0021fe1:	ba 08 c1 02 c0       	mov    edx,0xc002c108
c0021fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fea:	89 10                	mov    DWORD PTR [eax],edx
c0021fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ff0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021ffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ffe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022008:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022010:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022015:	7f 19                	jg     c0022030 <SoundDevice::SoundDevice(char const*)+0x66>
c0022017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002201b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002201f:	83 c2 54             	add    edx,0x54
c0022022:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002202a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002202e:	eb e0                	jmp    c0022010 <SoundDevice::SoundDevice(char const*)+0x46>
c0022030:	90                   	nop
c0022031:	83 c4 1c             	add    esp,0x1c
c0022034:	c3                   	ret    
c0022035:	90                   	nop

c0022036 <SoundDevice::~SoundDevice()>:
c0022036:	53                   	push   ebx
c0022037:	83 ec 18             	sub    esp,0x18
c002203a:	ba 08 c1 02 c0       	mov    edx,0xc002c108
c002203f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022043:	89 10                	mov    DWORD PTR [eax],edx
c0022045:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002204d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022052:	7f 46                	jg     c002209a <SoundDevice::~SoundDevice()+0x64>
c0022054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022058:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002205c:	83 c2 54             	add    edx,0x54
c002205f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022063:	85 c0                	test   eax,eax
c0022065:	74 2d                	je     c0022094 <SoundDevice::~SoundDevice()+0x5e>
c0022067:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002206b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002206f:	83 c2 54             	add    edx,0x54
c0022072:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022076:	85 db                	test   ebx,ebx
c0022078:	74 1a                	je     c0022094 <SoundDevice::~SoundDevice()+0x5e>
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	53                   	push   ebx
c002207e:	e8 db fc ff ff       	call   c0021d5e <SoundChannel::~SoundChannel()>
c0022083:	83 c4 10             	add    esp,0x10
c0022086:	83 ec 08             	sub    esp,0x8
c0022089:	6a 2c                	push   0x2c
c002208b:	53                   	push   ebx
c002208c:	e8 2a 06 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0022091:	83 c4 10             	add    esp,0x10
c0022094:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022098:	eb b3                	jmp    c002204d <SoundDevice::~SoundDevice()+0x17>
c002209a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002209e:	83 ec 0c             	sub    esp,0xc
c00220a1:	50                   	push   eax
c00220a2:	e8 f3 19 ff ff       	call   c0013a9a <Device::~Device()>
c00220a7:	83 c4 10             	add    esp,0x10
c00220aa:	90                   	nop
c00220ab:	83 c4 18             	add    esp,0x18
c00220ae:	5b                   	pop    ebx
c00220af:	c3                   	ret    

c00220b0 <SoundDevice::~SoundDevice()>:
c00220b0:	83 ec 0c             	sub    esp,0xc
c00220b3:	83 ec 0c             	sub    esp,0xc
c00220b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ba:	e8 77 ff ff ff       	call   c0022036 <SoundDevice::~SoundDevice()>
c00220bf:	83 c4 10             	add    esp,0x10
c00220c2:	83 ec 08             	sub    esp,0x8
c00220c5:	68 e4 01 00 00       	push   0x1e4
c00220ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ce:	e8 e8 05 ff ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	83 c4 0c             	add    esp,0xc
c00220d9:	c3                   	ret    

c00220da <SoundDevice::getFreeChannelNum()>:
c00220da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220de:	31 c0                	xor    eax,eax
c00220e0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00220e8:	74 09                	je     c00220f3 <SoundDevice::getFreeChannelNum()+0x19>
c00220ea:	40                   	inc    eax
c00220eb:	83 f8 20             	cmp    eax,0x20
c00220ee:	75 f0                	jne    c00220e0 <SoundDevice::getFreeChannelNum()+0x6>
c00220f0:	83 c8 ff             	or     eax,0xffffffff
c00220f3:	c3                   	ret    

c00220f4 <SoundDevice::addChannel(SoundChannel*)>:
c00220f4:	56                   	push   esi
c00220f5:	53                   	push   ebx
c00220f6:	51                   	push   ecx
c00220f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00220fb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00220ff:	53                   	push   ebx
c0022100:	e8 d5 ff ff ff       	call   c00220da <SoundDevice::getFreeChannelNum()>
c0022105:	5a                   	pop    edx
c0022106:	83 f8 ff             	cmp    eax,0xffffffff
c0022109:	74 51                	je     c002215c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002210b:	85 f6                	test   esi,esi
c002210d:	74 4d                	je     c002215c <SoundDevice::addChannel(SoundChannel*)+0x68>
c002210f:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022116:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002211d:	75 30                	jne    c002214f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002211f:	83 ec 0c             	sub    esp,0xc
c0022122:	56                   	push   esi
c0022123:	e8 52 fc ff ff       	call   c0021d7a <SoundChannel::getSampleRate()>
c0022128:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002212e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022131:	e8 4c fc ff ff       	call   c0021d82 <SoundChannel::getBits()>
c0022136:	83 c4 0c             	add    esp,0xc
c0022139:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002213f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022141:	50                   	push   eax
c0022142:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022148:	53                   	push   ebx
c0022149:	ff 52 24             	call   DWORD PTR [edx+0x24]
c002214c:	83 c4 10             	add    esp,0x10
c002214f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022155:	b8 01 00 00 00       	mov    eax,0x1
c002215a:	eb 03                	jmp    c002215f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002215c:	83 c8 ff             	or     eax,0xffffffff
c002215f:	5a                   	pop    edx
c0022160:	5b                   	pop    ebx
c0022161:	5e                   	pop    esi
c0022162:	c3                   	ret    
c0022163:	90                   	nop

c0022164 <SoundDevice::removeChannel(int)>:
c0022164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002216c:	83 fa 1f             	cmp    edx,0x1f
c002216f:	77 23                	ja     c0022194 <SoundDevice::removeChannel(int)+0x30>
c0022171:	8d 14 90             	lea    edx,[eax+edx*4]
c0022174:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002217b:	74 17                	je     c0022194 <SoundDevice::removeChannel(int)+0x30>
c002217d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022187:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002218d:	75 05                	jne    c0022194 <SoundDevice::removeChannel(int)+0x30>
c002218f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022191:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022194:	c3                   	ret    
c0022195:	90                   	nop

c0022196 <SoundDevice::floatTo16(float*, short*, int)>:
c0022196:	57                   	push   edi
c0022197:	56                   	push   esi
c0022198:	53                   	push   ebx
c0022199:	31 db                	xor    ebx,ebx
c002219b:	83 ec 10             	sub    esp,0x10
c002219e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221a2:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221a6:	0f 8d d0 00 00 00    	jge    c002227c <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00221ac:	83 ec 0c             	sub    esp,0xc
c00221af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221b3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221b6:	e8 14 62 00 00       	call   c00283cf <__extendsfdf2>
c00221bb:	83 c4 10             	add    esp,0x10
c00221be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221c6:	68 00 00 f0 3f       	push   0x3ff00000
c00221cb:	6a 00                	push   0x0
c00221cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221d5:	e8 81 51 00 00       	call   c002735b <__adddf3>
c00221da:	83 c4 10             	add    esp,0x10
c00221dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221e5:	68 00 00 e0 3f       	push   0x3fe00000
c00221ea:	6a 00                	push   0x0
c00221ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f4:	e8 df 57 00 00       	call   c00279d8 <__muldf3>
c00221f9:	83 c4 10             	add    esp,0x10
c00221fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022204:	68 c0 ff df 40       	push   0x40dfffc0
c0022209:	6a 00                	push   0x0
c002220b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002220f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022213:	e8 c0 57 00 00       	call   c00279d8 <__muldf3>
c0022218:	59                   	pop    ecx
c0022219:	5f                   	pop    edi
c002221a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002221e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222a:	e8 7c 60 00 00       	call   c00282ab <__truncdfsf2>
c002222f:	5a                   	pop    edx
c0022230:	89 c7                	mov    edi,eax
c0022232:	59                   	pop    ecx
c0022233:	68 00 fe ff 46       	push   0x46fffe00
c0022238:	50                   	push   eax
c0022239:	e8 17 51 00 00       	call   c0027355 <__gesf2>
c002223e:	83 c4 10             	add    esp,0x10
c0022241:	85 c0                	test   eax,eax
c0022243:	78 08                	js     c002224d <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022245:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c002224b:	eb 29                	jmp    c0022276 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002224d:	50                   	push   eax
c002224e:	50                   	push   eax
c002224f:	6a 00                	push   0x0
c0022251:	57                   	push   edi
c0022252:	e8 02 51 00 00       	call   c0027359 <__lesf2>
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	85 c0                	test   eax,eax
c002225c:	7f 08                	jg     c0022266 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c002225e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022264:	eb 10                	jmp    c0022276 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022266:	83 ec 0c             	sub    esp,0xc
c0022269:	57                   	push   edi
c002226a:	e8 fd 61 00 00       	call   c002846c <lrintf>
c002226f:	83 c4 10             	add    esp,0x10
c0022272:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022276:	43                   	inc    ebx
c0022277:	e9 26 ff ff ff       	jmp    c00221a2 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002227c:	83 c4 10             	add    esp,0x10
c002227f:	5b                   	pop    ebx
c0022280:	5e                   	pop    esi
c0022281:	5f                   	pop    edi
c0022282:	c3                   	ret    
c0022283:	90                   	nop

c0022284 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022284:	57                   	push   edi
c0022285:	56                   	push   esi
c0022286:	53                   	push   ebx
c0022287:	31 db                	xor    ebx,ebx
c0022289:	83 ec 10             	sub    esp,0x10
c002228c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022290:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022294:	0f 8d cb 00 00 00    	jge    c0022365 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002229a:	83 ec 0c             	sub    esp,0xc
c002229d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222a1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00222a4:	e8 26 61 00 00       	call   c00283cf <__extendsfdf2>
c00222a9:	83 c4 10             	add    esp,0x10
c00222ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222b4:	68 00 00 f0 3f       	push   0x3ff00000
c00222b9:	6a 00                	push   0x0
c00222bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222c3:	e8 93 50 00 00       	call   c002735b <__adddf3>
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222d3:	68 00 00 e0 3f       	push   0x3fe00000
c00222d8:	6a 00                	push   0x0
c00222da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222e2:	e8 f1 56 00 00       	call   c00279d8 <__muldf3>
c00222e7:	83 c4 10             	add    esp,0x10
c00222ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00222f2:	68 00 00 60 40       	push   0x40600000
c00222f7:	6a 00                	push   0x0
c00222f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022301:	e8 d2 56 00 00       	call   c00279d8 <__muldf3>
c0022306:	59                   	pop    ecx
c0022307:	5f                   	pop    edi
c0022308:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002230c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022314:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022318:	e8 8e 5f 00 00       	call   c00282ab <__truncdfsf2>
c002231d:	5a                   	pop    edx
c002231e:	89 c7                	mov    edi,eax
c0022320:	59                   	pop    ecx
c0022321:	68 00 00 fe 42       	push   0x42fe0000
c0022326:	50                   	push   eax
c0022327:	e8 29 50 00 00       	call   c0027355 <__gesf2>
c002232c:	83 c4 10             	add    esp,0x10
c002232f:	85 c0                	test   eax,eax
c0022331:	78 06                	js     c0022339 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022333:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022337:	eb 26                	jmp    c002235f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022339:	50                   	push   eax
c002233a:	50                   	push   eax
c002233b:	6a 00                	push   0x0
c002233d:	57                   	push   edi
c002233e:	e8 16 50 00 00       	call   c0027359 <__lesf2>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	85 c0                	test   eax,eax
c0022348:	7f 06                	jg     c0022350 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002234a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002234e:	eb 0f                	jmp    c002235f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022350:	83 ec 0c             	sub    esp,0xc
c0022353:	57                   	push   edi
c0022354:	e8 13 61 00 00       	call   c002846c <lrintf>
c0022359:	83 c4 10             	add    esp,0x10
c002235c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002235f:	43                   	inc    ebx
c0022360:	e9 2b ff ff ff       	jmp    c0022290 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022365:	83 c4 10             	add    esp,0x10
c0022368:	5b                   	pop    ebx
c0022369:	5e                   	pop    esi
c002236a:	5f                   	pop    edi
c002236b:	c3                   	ret    

c002236c <SoundDevice::getAudio(int, float*, float*)>:
c002236c:	55                   	push   ebp
c002236d:	31 ed                	xor    ebp,ebp
c002236f:	57                   	push   edi
c0022370:	56                   	push   esi
c0022371:	31 f6                	xor    esi,esi
c0022373:	53                   	push   ebx
c0022374:	83 ec 20             	sub    esp,0x20
c0022377:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002237b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002237f:	c1 e0 02             	shl    eax,0x2
c0022382:	50                   	push   eax
c0022383:	6a 00                	push   0x0
c0022385:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022389:	e8 c2 e3 fd ff       	call   c0000750 <memset>
c002238e:	83 c4 10             	add    esp,0x10
c0022391:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022399:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00223a0:	85 c9                	test   ecx,ecx
c00223a2:	74 52                	je     c00223f6 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00223a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00223a8:	99                   	cdq    
c00223a9:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00223af:	50                   	push   eax
c00223b0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00223b6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00223ba:	51                   	push   ecx
c00223bb:	e8 da f9 ff ff       	call   c0021d9a <SoundChannel::unbuffer(float*, int, int)>
c00223c0:	31 d2                	xor    edx,edx
c00223c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00223c6:	83 c4 10             	add    esp,0x10
c00223c9:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00223cd:	7d 1e                	jge    c00223ed <SoundDevice::getAudio(int, float*, float*)+0x81>
c00223cf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00223d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00223d7:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00223da:	89 cf                	mov    edi,ecx
c00223dc:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00223e2:	0f af ca             	imul   ecx,edx
c00223e5:	42                   	inc    edx
c00223e6:	01 e9                	add    ecx,ebp
c00223e8:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c00223eb:	eb dc                	jmp    c00223c9 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c00223ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00223f1:	45                   	inc    ebp
c00223f2:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c00223f6:	46                   	inc    esi
c00223f7:	83 fe 20             	cmp    esi,0x20
c00223fa:	75 9d                	jne    c0022399 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c00223fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022400:	83 c4 1c             	add    esp,0x1c
c0022403:	5b                   	pop    ebx
c0022404:	5e                   	pop    esi
c0022405:	5f                   	pop    edi
c0022406:	5d                   	pop    ebp
c0022407:	c3                   	ret    

c0022408 <PCI::open(int, int, void*)>:
c0022408:	83 ec 18             	sub    esp,0x18
c002240b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002240f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022413:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022419:	8b 10                	mov    edx,DWORD PTR [eax]
c002241b:	50                   	push   eax
c002241c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002241f:	31 c0                	xor    eax,eax
c0022421:	83 c4 1c             	add    esp,0x1c
c0022424:	c3                   	ret    
c0022425:	90                   	nop

c0022426 <PCI::close(int, int, void*)>:
c0022426:	31 c0                	xor    eax,eax
c0022428:	c3                   	ret    
c0022429:	90                   	nop

c002242a <PCI::PCI()>:
c002242a:	83 ec 0c             	sub    esp,0xc
c002242d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022431:	83 ec 08             	sub    esp,0x8
c0022434:	68 38 c1 02 c0       	push   0xc002c138
c0022439:	50                   	push   eax
c002243a:	e8 f5 0f ff ff       	call   c0013434 <Bus::Bus(char const*)>
c002243f:	83 c4 10             	add    esp,0x10
c0022442:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0022447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002244b:	89 10                	mov    DWORD PTR [eax],edx
c002244d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022451:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002245b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002245f:	a3 44 1e 03 c0       	mov    ds:0xc0031e44,eax
c0022464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022468:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002246e:	0f b6 d0             	movzx  edx,al
c0022471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022475:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002247c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022480:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022486:	0f b6 d0             	movzx  edx,al
c0022489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002248d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022496:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002249c:	8d 50 01             	lea    edx,[eax+0x1]
c002249f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00224a3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00224a9:	0f b6 d0             	movzx  edx,al
c00224ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00224b4:	83 c9 c0             	or     ecx,0xffffffc0
c00224b7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00224bb:	90                   	nop
c00224bc:	83 c4 0c             	add    esp,0xc
c00224bf:	c3                   	ret    

c00224c0 <PCI::readBAR8(unsigned int, int)>:
c00224c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224c8:	f6 c2 01             	test   dl,0x1
c00224cb:	74 07                	je     c00224d4 <PCI::readBAR8(unsigned int, int)+0x14>
c00224cd:	83 e2 fc             	and    edx,0xfffffffc
c00224d0:	01 c2                	add    edx,eax
c00224d2:	ec                   	in     al,dx
c00224d3:	c3                   	ret    
c00224d4:	83 e2 f0             	and    edx,0xfffffff0
c00224d7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00224da:	c3                   	ret    
c00224db:	90                   	nop

c00224dc <PCI::readBAR16(unsigned int, int)>:
c00224dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224e4:	f6 c2 01             	test   dl,0x1
c00224e7:	74 08                	je     c00224f1 <PCI::readBAR16(unsigned int, int)+0x15>
c00224e9:	83 e2 fc             	and    edx,0xfffffffc
c00224ec:	01 c2                	add    edx,eax
c00224ee:	66 ed                	in     ax,dx
c00224f0:	c3                   	ret    
c00224f1:	83 e2 f0             	and    edx,0xfffffff0
c00224f4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00224f8:	c3                   	ret    
c00224f9:	90                   	nop

c00224fa <PCI::readBAR32(unsigned int, int)>:
c00224fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00224fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022502:	f6 c2 01             	test   dl,0x1
c0022505:	74 07                	je     c002250e <PCI::readBAR32(unsigned int, int)+0x14>
c0022507:	83 e2 fc             	and    edx,0xfffffffc
c002250a:	01 c2                	add    edx,eax
c002250c:	ed                   	in     eax,dx
c002250d:	c3                   	ret    
c002250e:	83 e2 f0             	and    edx,0xfffffff0
c0022511:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022514:	c3                   	ret    
c0022515:	90                   	nop

c0022516 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022516:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002251a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002251e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022522:	f6 c2 01             	test   dl,0x1
c0022525:	74 07                	je     c002252e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022527:	83 e2 fc             	and    edx,0xfffffffc
c002252a:	01 ca                	add    edx,ecx
c002252c:	ee                   	out    dx,al
c002252d:	c3                   	ret    
c002252e:	83 e2 f0             	and    edx,0xfffffff0
c0022531:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022534:	c3                   	ret    
c0022535:	90                   	nop

c0022536 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002253a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002253e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022542:	f6 c2 01             	test   dl,0x1
c0022545:	74 08                	je     c002254f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0022547:	83 e2 fc             	and    edx,0xfffffffc
c002254a:	01 ca                	add    edx,ecx
c002254c:	66 ef                	out    dx,ax
c002254e:	c3                   	ret    
c002254f:	83 e2 f0             	and    edx,0xfffffff0
c0022552:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0022556:	c3                   	ret    
c0022557:	90                   	nop

c0022558 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002255c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022560:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022564:	f6 c2 01             	test   dl,0x1
c0022567:	74 07                	je     c0022570 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022569:	83 e2 fc             	and    edx,0xfffffffc
c002256c:	01 ca                	add    edx,ecx
c002256e:	ef                   	out    dx,eax
c002256f:	c3                   	ret    
c0022570:	83 e2 f0             	and    edx,0xfffffff0
c0022573:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022576:	c3                   	ret    
c0022577:	90                   	nop

c0022578 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022578:	55                   	push   ebp
c0022579:	57                   	push   edi
c002257a:	56                   	push   esi
c002257b:	53                   	push   ebx
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022583:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022587:	89 f0                	mov    eax,esi
c0022589:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002258d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022591:	3c 07                	cmp    al,0x7
c0022593:	76 10                	jbe    c00225a5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022595:	83 ec 0c             	sub    esp,0xc
c0022598:	68 40 c1 02 c0       	push   0xc002c140
c002259d:	e8 5d 79 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00225a2:	83 c4 10             	add    esp,0x10
c00225a5:	80 fb 0f             	cmp    bl,0xf
c00225a8:	76 10                	jbe    c00225ba <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00225aa:	83 ec 0c             	sub    esp,0xc
c00225ad:	68 70 c1 02 c0       	push   0xc002c170
c00225b2:	e8 48 79 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00225b7:	83 c4 10             	add    esp,0x10
c00225ba:	8d 04 36             	lea    eax,[esi+esi*1]
c00225bd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225c2:	83 c8 f0             	or     eax,0xfffffff0
c00225c5:	ee                   	out    dx,al
c00225c6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00225cb:	89 e8                	mov    eax,ebp
c00225cd:	ee                   	out    dx,al
c00225ce:	83 c4 0c             	add    esp,0xc
c00225d1:	89 d8                	mov    eax,ebx
c00225d3:	66 81 e7 fc 00       	and    di,0xfc
c00225d8:	5b                   	pop    ebx
c00225d9:	c1 e0 08             	shl    eax,0x8
c00225dc:	5e                   	pop    esi
c00225dd:	09 f8                	or     eax,edi
c00225df:	5f                   	pop    edi
c00225e0:	66 0d 00 c0          	or     ax,0xc000
c00225e4:	5d                   	pop    ebp
c00225e5:	c3                   	ret    

c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00225e6:	57                   	push   edi
c00225e7:	56                   	push   esi
c00225e8:	53                   	push   ebx
c00225e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00225ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225f1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00225f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00225fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00225ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022603:	83 ff 01             	cmp    edi,0x1
c0022606:	75 3e                	jne    c0022646 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022608:	89 de                	mov    esi,ebx
c002260a:	0f b6 c0             	movzx  eax,al
c002260d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022613:	c1 e0 10             	shl    eax,0x10
c0022616:	0f b6 c9             	movzx  ecx,cl
c0022619:	09 f0                	or     eax,esi
c002261b:	c1 e1 08             	shl    ecx,0x8
c002261e:	0f b6 d2             	movzx  edx,dl
c0022621:	09 c8                	or     eax,ecx
c0022623:	c1 e2 0b             	shl    edx,0xb
c0022626:	09 d0                	or     eax,edx
c0022628:	ba f8 0c 00 00       	mov    edx,0xcf8
c002262d:	0d 00 00 00 80       	or     eax,0x80000000
c0022632:	ef                   	out    dx,eax
c0022633:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022638:	ed                   	in     eax,dx
c0022639:	83 e3 02             	and    ebx,0x2
c002263c:	0f b6 cb             	movzx  ecx,bl
c002263f:	c1 e1 03             	shl    ecx,0x3
c0022642:	d3 e8                	shr    eax,cl
c0022644:	eb 43                	jmp    c0022689 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022646:	83 ff 02             	cmp    edi,0x2
c0022649:	75 2c                	jne    c0022677 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c002264b:	83 ec 0c             	sub    esp,0xc
c002264e:	0f b6 c9             	movzx  ecx,cl
c0022651:	0f b6 d2             	movzx  edx,dl
c0022654:	0f b6 fb             	movzx  edi,bl
c0022657:	0f b6 c0             	movzx  eax,al
c002265a:	57                   	push   edi
c002265b:	51                   	push   ecx
c002265c:	52                   	push   edx
c002265d:	50                   	push   eax
c002265e:	56                   	push   esi
c002265f:	e8 14 ff ff ff       	call   c0022578 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022664:	89 c2                	mov    edx,eax
c0022666:	ed                   	in     eax,dx
c0022667:	83 e3 02             	and    ebx,0x2
c002266a:	83 c4 20             	add    esp,0x20
c002266d:	0f b6 cb             	movzx  ecx,bl
c0022670:	c1 e1 03             	shl    ecx,0x3
c0022673:	d3 e8                	shr    eax,cl
c0022675:	eb 12                	jmp    c0022689 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022677:	83 ec 0c             	sub    esp,0xc
c002267a:	68 a0 c1 02 c0       	push   0xc002c1a0
c002267f:	e8 7b 78 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0022684:	83 c4 10             	add    esp,0x10
c0022687:	31 c0                	xor    eax,eax
c0022689:	5b                   	pop    ebx
c002268a:	5e                   	pop    esi
c002268b:	5f                   	pop    edi
c002268c:	c3                   	ret    
c002268d:	90                   	nop

c002268e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002268e:	83 ec 18             	sub    esp,0x18
c0022691:	6a 00                	push   0x0
c0022693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022698:	50                   	push   eax
c0022699:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269e:	50                   	push   eax
c002269f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226a4:	50                   	push   eax
c00226a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226a9:	e8 38 ff ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ae:	83 c4 2c             	add    esp,0x2c
c00226b1:	c3                   	ret    

c00226b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00226b2:	83 ec 18             	sub    esp,0x18
c00226b5:	6a 0e                	push   0xe
c00226b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226bc:	50                   	push   eax
c00226bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c2:	50                   	push   eax
c00226c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c8:	50                   	push   eax
c00226c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226cd:	e8 14 ff ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226d2:	83 c4 2c             	add    esp,0x2c
c00226d5:	0f b6 c0             	movzx  eax,al
c00226d8:	c3                   	ret    
c00226d9:	90                   	nop

c00226da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00226da:	55                   	push   ebp
c00226db:	57                   	push   edi
c00226dc:	56                   	push   esi
c00226dd:	53                   	push   ebx
c00226de:	83 ec 18             	sub    esp,0x18
c00226e1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00226e6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00226eb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00226f0:	6a 0a                	push   0xa
c00226f2:	56                   	push   esi
c00226f3:	55                   	push   ebp
c00226f4:	57                   	push   edi
c00226f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00226f9:	e8 e8 fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226fe:	83 c4 14             	add    esp,0x14
c0022701:	89 c3                	mov    ebx,eax
c0022703:	6a 0a                	push   0xa
c0022705:	0f b6 db             	movzx  ebx,bl
c0022708:	56                   	push   esi
c0022709:	55                   	push   ebp
c002270a:	57                   	push   edi
c002270b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002270f:	e8 d2 fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022714:	83 c4 2c             	add    esp,0x2c
c0022717:	25 00 ff 00 00       	and    eax,0xff00
c002271c:	09 d8                	or     eax,ebx
c002271e:	5b                   	pop    ebx
c002271f:	5e                   	pop    esi
c0022720:	5f                   	pop    edi
c0022721:	5d                   	pop    ebp
c0022722:	c3                   	ret    
c0022723:	90                   	nop

c0022724 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022724:	83 ec 18             	sub    esp,0x18
c0022727:	6a 08                	push   0x8
c0022729:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002272e:	50                   	push   eax
c002272f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022734:	50                   	push   eax
c0022735:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002273a:	50                   	push   eax
c002273b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002273f:	e8 a2 fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022744:	83 c4 2c             	add    esp,0x2c
c0022747:	0f b6 c4             	movzx  eax,ah
c002274a:	c3                   	ret    
c002274b:	90                   	nop

c002274c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002274c:	83 ec 18             	sub    esp,0x18
c002274f:	6a 08                	push   0x8
c0022751:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022756:	50                   	push   eax
c0022757:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002275c:	50                   	push   eax
c002275d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022762:	50                   	push   eax
c0022763:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022767:	e8 7a fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002276c:	83 c4 2c             	add    esp,0x2c
c002276f:	c3                   	ret    

c0022770 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022770:	83 ec 18             	sub    esp,0x18
c0022773:	6a 3c                	push   0x3c
c0022775:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002277a:	50                   	push   eax
c002277b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022780:	50                   	push   eax
c0022781:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022786:	50                   	push   eax
c0022787:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002278b:	e8 56 fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022790:	83 c4 2c             	add    esp,0x2c
c0022793:	c3                   	ret    

c0022794 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022794:	83 ec 18             	sub    esp,0x18
c0022797:	6a 18                	push   0x18
c0022799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002279e:	50                   	push   eax
c002279f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227a4:	50                   	push   eax
c00227a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00227aa:	50                   	push   eax
c00227ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227af:	e8 32 fe ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227b4:	83 c4 2c             	add    esp,0x2c
c00227b7:	0f b6 c4             	movzx  eax,ah
c00227ba:	c3                   	ret    
c00227bb:	90                   	nop

c00227bc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00227bc:	55                   	push   ebp
c00227bd:	57                   	push   edi
c00227be:	56                   	push   esi
c00227bf:	53                   	push   ebx
c00227c0:	83 ec 28             	sub    esp,0x28
c00227c3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00227c7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00227cc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00227d1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00227d6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00227dd:	8d 43 12             	lea    eax,[ebx+0x12]
c00227e0:	83 c3 10             	add    ebx,0x10
c00227e3:	0f b6 c0             	movzx  eax,al
c00227e6:	0f b6 db             	movzx  ebx,bl
c00227e9:	50                   	push   eax
c00227ea:	51                   	push   ecx
c00227eb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00227ef:	57                   	push   edi
c00227f0:	55                   	push   ebp
c00227f1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00227f5:	e8 ec fd ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227fa:	83 c4 14             	add    esp,0x14
c00227fd:	89 c6                	mov    esi,eax
c00227ff:	53                   	push   ebx
c0022800:	c1 e6 10             	shl    esi,0x10
c0022803:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022807:	51                   	push   ecx
c0022808:	57                   	push   edi
c0022809:	55                   	push   ebp
c002280a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002280e:	e8 d3 fd ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022813:	83 c4 3c             	add    esp,0x3c
c0022816:	0f b7 c0             	movzx  eax,ax
c0022819:	5b                   	pop    ebx
c002281a:	09 f0                	or     eax,esi
c002281c:	5e                   	pop    esi
c002281d:	5f                   	pop    edi
c002281e:	5d                   	pop    ebp
c002281f:	c3                   	ret    

c0022820 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022820:	55                   	push   ebp
c0022821:	57                   	push   edi
c0022822:	56                   	push   esi
c0022823:	53                   	push   ebx
c0022824:	83 ec 0c             	sub    esp,0xc
c0022827:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002282b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002282f:	89 f5                	mov    ebp,esi
c0022831:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0022837:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002283b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002283f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022847:	83 f9 01             	cmp    ecx,0x1
c002284a:	75 5d                	jne    c00228a9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002284c:	0f b6 c8             	movzx  ecx,al
c002284f:	0f b6 d2             	movzx  edx,dl
c0022852:	c1 e1 10             	shl    ecx,0x10
c0022855:	c1 e2 0b             	shl    edx,0xb
c0022858:	89 f0                	mov    eax,esi
c002285a:	25 fc 00 00 00       	and    eax,0xfc
c002285f:	09 c1                	or     ecx,eax
c0022861:	89 e8                	mov    eax,ebp
c0022863:	0f b6 c0             	movzx  eax,al
c0022866:	c1 e0 08             	shl    eax,0x8
c0022869:	09 c1                	or     ecx,eax
c002286b:	09 d1                	or     ecx,edx
c002286d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022872:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022878:	89 c8                	mov    eax,ecx
c002287a:	ef                   	out    dx,eax
c002287b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022880:	ed                   	in     eax,dx
c0022881:	0f b7 db             	movzx  ebx,bx
c0022884:	83 e6 02             	and    esi,0x2
c0022887:	74 0a                	je     c0022893 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022889:	0f b7 d0             	movzx  edx,ax
c002288c:	c1 e3 10             	shl    ebx,0x10
c002288f:	09 d3                	or     ebx,edx
c0022891:	eb 05                	jmp    c0022898 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022893:	66 31 c0             	xor    ax,ax
c0022896:	09 c3                	or     ebx,eax
c0022898:	ba f8 0c 00 00       	mov    edx,0xcf8
c002289d:	89 c8                	mov    eax,ecx
c002289f:	ef                   	out    dx,eax
c00228a0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00228a5:	89 d8                	mov    eax,ebx
c00228a7:	eb 41                	jmp    c00228ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00228a9:	83 f9 02             	cmp    ecx,0x2
c00228ac:	75 45                	jne    c00228f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00228ae:	83 ec 0c             	sub    esp,0xc
c00228b1:	0f b6 d2             	movzx  edx,dl
c00228b4:	89 f1                	mov    ecx,esi
c00228b6:	0f b6 c0             	movzx  eax,al
c00228b9:	0f b6 f1             	movzx  esi,cl
c00228bc:	89 e9                	mov    ecx,ebp
c00228be:	56                   	push   esi
c00228bf:	0f b6 c9             	movzx  ecx,cl
c00228c2:	51                   	push   ecx
c00228c3:	52                   	push   edx
c00228c4:	50                   	push   eax
c00228c5:	57                   	push   edi
c00228c6:	e8 ad fc ff ff       	call   c0022578 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228cb:	89 c2                	mov    edx,eax
c00228cd:	ed                   	in     eax,dx
c00228ce:	83 c4 20             	add    esp,0x20
c00228d1:	0f b7 db             	movzx  ebx,bx
c00228d4:	f6 c2 02             	test   dl,0x2
c00228d7:	74 0c                	je     c00228e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00228d9:	0f b7 c8             	movzx  ecx,ax
c00228dc:	89 d8                	mov    eax,ebx
c00228de:	c1 e0 10             	shl    eax,0x10
c00228e1:	09 c8                	or     eax,ecx
c00228e3:	eb 05                	jmp    c00228ea <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00228e5:	66 31 c0             	xor    ax,ax
c00228e8:	09 d8                	or     eax,ebx
c00228ea:	ef                   	out    dx,eax
c00228eb:	83 c4 0c             	add    esp,0xc
c00228ee:	5b                   	pop    ebx
c00228ef:	5e                   	pop    esi
c00228f0:	5f                   	pop    edi
c00228f1:	5d                   	pop    ebp
c00228f2:	c3                   	ret    
c00228f3:	c7 44 24 20 a0 c1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c1a0
c00228fb:	83 c4 0c             	add    esp,0xc
c00228fe:	5b                   	pop    ebx
c00228ff:	5e                   	pop    esi
c0022900:	5f                   	pop    edi
c0022901:	5d                   	pop    ebp
c0022902:	e9 f8 75 ff ff       	jmp    c0019eff <Krnl::panic(char const*)>
c0022907:	90                   	nop

c0022908 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022908:	55                   	push   ebp
c0022909:	57                   	push   edi
c002290a:	56                   	push   esi
c002290b:	53                   	push   ebx
c002290c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022912:	80 3d 50 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e50,0x0
c0022919:	0f 85 84 00 00 00    	jne    c00229a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c002291f:	83 ec 0c             	sub    esp,0xc
c0022922:	68 14 01 00 00       	push   0x114
c0022927:	e8 6d cc fe ff       	call   c000f599 <malloc>
c002292c:	83 c4 0c             	add    esp,0xc
c002292f:	89 c3                	mov    ebx,eax
c0022931:	ff 35 50 10 03 c0    	push   DWORD PTR ds:0xc0031050
c0022937:	68 a6 c1 02 c0       	push   0xc002c1a6
c002293c:	50                   	push   eax
c002293d:	e8 b0 03 ff ff       	call   c0012cf2 <File::File(char const*, Process*)>
c0022942:	5a                   	pop    edx
c0022943:	59                   	pop    ecx
c0022944:	6a 01                	push   0x1
c0022946:	53                   	push   ebx
c0022947:	e8 0a 04 ff ff       	call   c0012d56 <File::open(FileOpenMode)>
c002294c:	83 c4 0c             	add    esp,0xc
c002294f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0022953:	50                   	push   eax
c0022954:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022958:	50                   	push   eax
c0022959:	53                   	push   ebx
c002295a:	e8 a3 06 ff ff       	call   c0013002 <File::stat(unsigned long long*, bool*)>
c002295f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022963:	40                   	inc    eax
c0022964:	89 04 24             	mov    DWORD PTR [esp],eax
c0022967:	e8 2d cc fe ff       	call   c000f599 <malloc>
c002296c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022970:	a3 4c 1e 03 c0       	mov    ds:0xc0031e4c,eax
c0022975:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022979:	5e                   	pop    esi
c002297a:	8b 13                	mov    edx,DWORD PTR [ebx]
c002297c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022980:	51                   	push   ecx
c0022981:	50                   	push   eax
c0022982:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022986:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002298a:	53                   	push   ebx
c002298b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002298e:	83 c4 14             	add    esp,0x14
c0022991:	53                   	push   ebx
c0022992:	e8 1d 04 ff ff       	call   c0012db4 <File::close()>
c0022997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002299b:	83 c4 10             	add    esp,0x10
c002299e:	a3 48 1e 03 c0       	mov    ds:0xc0031e48,eax
c00229a3:	a1 48 1e 03 c0       	mov    eax,ds:0xc0031e48
c00229a8:	8b 15 4c 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031e4c
c00229ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00229b1:	31 ff                	xor    edi,edi
c00229b3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00229bb:	31 f6                	xor    esi,esi
c00229bd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00229c2:	31 db                	xor    ebx,ebx
c00229c4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00229cc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00229d1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00229d8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00229dc:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00229e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00229e7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229ea:	0f 8e 6b 01 00 00    	jle    c0022b5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00229f0:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229f3:	d4 40                	aam    0x40
c00229f5:	d5 39                	aad    0x39
c00229f7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00229fb:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00229ff:	d4 40                	aam    0x40
c0022a01:	d5 39                	aad    0x39
c0022a03:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022a07:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022a0b:	d4 40                	aam    0x40
c0022a0d:	d5 39                	aad    0x39
c0022a0f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0022a13:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0022a17:	d4 40                	aam    0x40
c0022a19:	d5 39                	aad    0x39
c0022a1b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022a1f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0022a23:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022a27:	3c 56                	cmp    al,0x56
c0022a29:	74 45                	je     c0022a70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022a2b:	d4 40                	aam    0x40
c0022a2d:	d5 39                	aad    0x39
c0022a2f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022a32:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0022a36:	0f b6 c9             	movzx  ecx,cl
c0022a39:	c1 e1 04             	shl    ecx,0x4
c0022a3c:	d4 40                	aam    0x40
c0022a3e:	d5 39                	aad    0x39
c0022a40:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a43:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0022a47:	0f b6 db             	movzx  ebx,bl
c0022a4a:	09 cb                	or     ebx,ecx
c0022a4c:	c1 e3 04             	shl    ebx,0x4
c0022a4f:	d4 40                	aam    0x40
c0022a51:	d5 39                	aad    0x39
c0022a53:	8d 48 d0             	lea    ecx,[eax-0x30]
c0022a56:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022a5a:	0f b6 c9             	movzx  ecx,cl
c0022a5d:	09 cb                	or     ebx,ecx
c0022a5f:	c1 e3 04             	shl    ebx,0x4
c0022a62:	89 d9                	mov    ecx,ebx
c0022a64:	d4 40                	aam    0x40
c0022a66:	d5 39                	aad    0x39
c0022a68:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022a6b:	0f b6 db             	movzx  ebx,bl
c0022a6e:	09 cb                	or     ebx,ecx
c0022a70:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022a74:	80 f9 44             	cmp    cl,0x44
c0022a77:	74 47                	je     c0022ac0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022a79:	88 c8                	mov    al,cl
c0022a7b:	d4 40                	aam    0x40
c0022a7d:	d5 39                	aad    0x39
c0022a7f:	83 e8 30             	sub    eax,0x30
c0022a82:	0f b6 e8             	movzx  ebp,al
c0022a85:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022a89:	c1 e5 04             	shl    ebp,0x4
c0022a8c:	d4 40                	aam    0x40
c0022a8e:	d5 39                	aad    0x39
c0022a90:	83 e8 30             	sub    eax,0x30
c0022a93:	0f b6 f0             	movzx  esi,al
c0022a96:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022a9a:	09 ee                	or     esi,ebp
c0022a9c:	c1 e6 04             	shl    esi,0x4
c0022a9f:	d4 40                	aam    0x40
c0022aa1:	d5 39                	aad    0x39
c0022aa3:	83 e8 30             	sub    eax,0x30
c0022aa6:	0f b6 e8             	movzx  ebp,al
c0022aa9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0022aad:	09 ee                	or     esi,ebp
c0022aaf:	c1 e6 04             	shl    esi,0x4
c0022ab2:	89 f5                	mov    ebp,esi
c0022ab4:	d4 40                	aam    0x40
c0022ab6:	d5 39                	aad    0x39
c0022ab8:	83 e8 30             	sub    eax,0x30
c0022abb:	0f b6 f0             	movzx  esi,al
c0022abe:	09 ee                	or     esi,ebp
c0022ac0:	83 c7 10             	add    edi,0x10
c0022ac3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022ac7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022aca:	3c 0a                	cmp    al,0xa
c0022acc:	74 09                	je     c0022ad7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0022ace:	45                   	inc    ebp
c0022acf:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022ad2:	75 16                	jne    c0022aea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022ad4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022ad7:	3c 0a                	cmp    al,0xa
c0022ad9:	0f 94 c0             	sete   al
c0022adc:	0f b6 c0             	movzx  eax,al
c0022adf:	01 c7                	add    edi,eax
c0022ae1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022ae6:	75 0c                	jne    c0022af4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022ae8:	eb 15                	jmp    c0022aff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022aea:	47                   	inc    edi
c0022aeb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022aee:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022af2:	eb d3                	jmp    c0022ac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022af4:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022af9:	0f 85 e8 fe ff ff    	jne    c00229e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022aff:	80 f9 44             	cmp    cl,0x44
c0022b02:	74 0b                	je     c0022b0f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022b04:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022b09:	0f 85 d8 fe ff ff    	jne    c00229e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b0f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022b13:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022b17:	c1 e1 04             	shl    ecx,0x4
c0022b1a:	83 e8 30             	sub    eax,0x30
c0022b1d:	09 c8                	or     eax,ecx
c0022b1f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022b23:	0f 85 be fe ff ff    	jne    c00229e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b29:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022b2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022b31:	c1 e1 04             	shl    ecx,0x4
c0022b34:	83 e8 30             	sub    eax,0x30
c0022b37:	09 c8                	or     eax,ecx
c0022b39:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022b3d:	0f 85 a4 fe ff ff    	jne    c00229e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022b43:	50                   	push   eax
c0022b44:	50                   	push   eax
c0022b45:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022b49:	50                   	push   eax
c0022b4a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022b51:	e8 b6 dc fd ff       	call   c000080c <strcpy>
c0022b56:	83 c4 10             	add    esp,0x10
c0022b59:	eb 15                	jmp    c0022b70 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022b5b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b62:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022b6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022b70:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022b77:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b7d:	5b                   	pop    ebx
c0022b7e:	5e                   	pop    esi
c0022b7f:	5f                   	pop    edi
c0022b80:	5d                   	pop    ebp
c0022b81:	c3                   	ret    

c0022b82 <PCI::checkBus(unsigned char)>:
c0022b82:	56                   	push   esi
c0022b83:	53                   	push   ebx
c0022b84:	31 db                	xor    ebx,ebx
c0022b86:	51                   	push   ecx
c0022b87:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b8c:	52                   	push   edx
c0022b8d:	53                   	push   ebx
c0022b8e:	43                   	inc    ebx
c0022b8f:	56                   	push   esi
c0022b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b94:	e8 37 03 00 00       	call   c0022ed0 <PCI::checkDevice(unsigned char, unsigned char)>
c0022b99:	83 c4 10             	add    esp,0x10
c0022b9c:	83 fb 20             	cmp    ebx,0x20
c0022b9f:	75 eb                	jne    c0022b8c <PCI::checkBus(unsigned char)+0xa>
c0022ba1:	58                   	pop    eax
c0022ba2:	5b                   	pop    ebx
c0022ba3:	5e                   	pop    esi
c0022ba4:	c3                   	ret    
c0022ba5:	90                   	nop

c0022ba6 <PCI::foundDevice(PCIDeviceInfo)>:
c0022ba6:	55                   	push   ebp
c0022ba7:	57                   	push   edi
c0022ba8:	56                   	push   esi
c0022ba9:	53                   	push   ebx
c0022baa:	83 ec 1c             	sub    esp,0x1c
c0022bad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022bb1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022bb7:	0f 84 52 01 00 00    	je     c0022d0f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022bbd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022bc1:	66 81 f9 06 04       	cmp    cx,0x406
c0022bc6:	75 2c                	jne    c0022bf4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022bc8:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022bcd:	50                   	push   eax
c0022bce:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022bd3:	50                   	push   eax
c0022bd4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022bd9:	50                   	push   eax
c0022bda:	56                   	push   esi
c0022bdb:	e8 b4 fb ff ff       	call   c0022794 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022be0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022be4:	0f b6 c0             	movzx  eax,al
c0022be7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022beb:	83 c4 2c             	add    esp,0x2c
c0022bee:	5b                   	pop    ebx
c0022bef:	5e                   	pop    esi
c0022bf0:	5f                   	pop    edi
c0022bf1:	5d                   	pop    ebp
c0022bf2:	eb 8e                	jmp    c0022b82 <PCI::checkBus(unsigned char)>
c0022bf4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022bf8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022bfe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c02:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022c06:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022c0a:	88 d3                	mov    bl,dl
c0022c0c:	85 c0                	test   eax,eax
c0022c0e:	74 33                	je     c0022c43 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022c10:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022c13:	85 d2                	test   edx,edx
c0022c15:	74 28                	je     c0022c3f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c17:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022c1d:	31 ef                	xor    edi,ebp
c0022c1f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022c25:	75 18                	jne    c0022c3f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c27:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022c2b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022c31:	75 0c                	jne    c0022c3f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022c33:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022c39:	0f 84 d0 00 00 00    	je     c0022d0f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c41:	eb c9                	jmp    c0022c0c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022c43:	66 81 f9 01 06       	cmp    cx,0x601
c0022c48:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022c4c:	75 19                	jne    c0022c67 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022c4e:	83 ec 0c             	sub    esp,0xc
c0022c51:	68 64 01 00 00       	push   0x164
c0022c56:	e8 3e c9 fe ff       	call   c000f599 <malloc>
c0022c5b:	89 c5                	mov    ebp,eax
c0022c5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c60:	e8 85 0e 00 00       	call   c0023aea <SATABus::SATABus()>
c0022c65:	eb 1e                	jmp    c0022c85 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022c67:	66 81 f9 01 01       	cmp    cx,0x101
c0022c6c:	75 60                	jne    c0022cce <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022c6e:	83 ec 0c             	sub    esp,0xc
c0022c71:	68 70 02 00 00       	push   0x270
c0022c76:	e8 1e c9 fe ff       	call   c000f599 <malloc>
c0022c7b:	89 c5                	mov    ebp,eax
c0022c7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022c80:	e8 0f 03 00 00       	call   c0022f94 <IDE::IDE()>
c0022c85:	58                   	pop    eax
c0022c86:	5a                   	pop    edx
c0022c87:	55                   	push   ebp
c0022c88:	56                   	push   esi
c0022c89:	e8 3e 0f ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0022c8e:	83 ec 1c             	sub    esp,0x1c
c0022c91:	b9 09 00 00 00       	mov    ecx,0x9
c0022c96:	fc                   	cld    
c0022c97:	89 e7                	mov    edi,esp
c0022c99:	89 de                	mov    esi,ebx
c0022c9b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c9d:	55                   	push   ebp
c0022c9e:	e8 3b 0e ff ff       	call   c0013ade <Device::preOpenPCI(PCIDeviceInfo)>
c0022ca3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022ca6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022caa:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022cb2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022cba:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022cc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cc5:	83 c4 4c             	add    esp,0x4c
c0022cc8:	5b                   	pop    ebx
c0022cc9:	5e                   	pop    esi
c0022cca:	5f                   	pop    edi
c0022ccb:	5d                   	pop    ebp
c0022ccc:	ff e0                	jmp    eax
c0022cce:	83 ec 0c             	sub    esp,0xc
c0022cd1:	68 58 01 00 00       	push   0x158
c0022cd6:	e8 be c8 fe ff       	call   c000f599 <malloc>
c0022cdb:	89 c5                	mov    ebp,eax
c0022cdd:	58                   	pop    eax
c0022cde:	5a                   	pop    edx
c0022cdf:	68 bf c1 02 c0       	push   0xc002c1bf
c0022ce4:	55                   	push   ebp
c0022ce5:	e8 ec 11 ff ff       	call   c0013ed6 <DriverlessDevice::DriverlessDevice(char const*)>
c0022cea:	59                   	pop    ecx
c0022ceb:	5f                   	pop    edi
c0022cec:	55                   	push   ebp
c0022ced:	56                   	push   esi
c0022cee:	e8 d9 0e ff ff       	call   c0013bcc <Device::addChild(Device*)>
c0022cf3:	b9 09 00 00 00       	mov    ecx,0x9
c0022cf8:	fc                   	cld    
c0022cf9:	89 df                	mov    edi,ebx
c0022cfb:	89 de                	mov    esi,ebx
c0022cfd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022cff:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022d03:	83 c4 2c             	add    esp,0x2c
c0022d06:	5b                   	pop    ebx
c0022d07:	5e                   	pop    esi
c0022d08:	5f                   	pop    edi
c0022d09:	5d                   	pop    ebp
c0022d0a:	e9 cf 0d ff ff       	jmp    c0013ade <Device::preOpenPCI(PCIDeviceInfo)>
c0022d0f:	83 c4 1c             	add    esp,0x1c
c0022d12:	5b                   	pop    ebx
c0022d13:	5e                   	pop    esi
c0022d14:	5f                   	pop    edi
c0022d15:	5d                   	pop    ebp
c0022d16:	c3                   	ret    
c0022d17:	90                   	nop

c0022d18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022d18:	55                   	push   ebp
c0022d19:	57                   	push   edi
c0022d1a:	56                   	push   esi
c0022d1b:	53                   	push   ebx
c0022d1c:	83 ec 68             	sub    esp,0x68
c0022d1f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022d23:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022d2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d2e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022d35:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022d3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d3e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022d45:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022d4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d4e:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022d53:	6a 0c                	push   0xc
c0022d55:	57                   	push   edi
c0022d56:	53                   	push   ebx
c0022d57:	56                   	push   esi
c0022d58:	55                   	push   ebp
c0022d59:	e8 88 f8 ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d5e:	83 c4 20             	add    esp,0x20
c0022d61:	57                   	push   edi
c0022d62:	53                   	push   ebx
c0022d63:	56                   	push   esi
c0022d64:	55                   	push   ebp
c0022d65:	e8 70 f9 ff ff       	call   c00226da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022d6a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022d6f:	57                   	push   edi
c0022d70:	53                   	push   ebx
c0022d71:	56                   	push   esi
c0022d72:	55                   	push   ebp
c0022d73:	e8 f8 f9 ff ff       	call   c0022770 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022d78:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022d7c:	83 c4 14             	add    esp,0x14
c0022d7f:	6a 3c                	push   0x3c
c0022d81:	57                   	push   edi
c0022d82:	53                   	push   ebx
c0022d83:	56                   	push   esi
c0022d84:	55                   	push   ebp
c0022d85:	e8 5c f8 ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d8a:	0f b6 c4             	movzx  eax,ah
c0022d8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022d91:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022d95:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022d99:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0022d9e:	83 c4 20             	add    esp,0x20
c0022da1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022da7:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022dae:	74 7c                	je     c0022e2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022db0:	31 c0                	xor    eax,eax
c0022db2:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c0022db8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022dbe:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022dc4:	7e 66                	jle    c0022e2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022dc6:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022dc9:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022dd0:	39 cb                	cmp    ebx,ecx
c0022dd2:	75 55                	jne    c0022e29 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022dd4:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ddb:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022ddf:	75 48                	jne    c0022e29 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022de1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022de5:	83 ec 0c             	sub    esp,0xc
c0022de8:	68 d9 c1 02 c0       	push   0xc002c1d9
c0022ded:	e8 a1 f9 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0022df2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022df6:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c0022dfc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022e00:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e06:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022e0e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022e12:	52                   	push   edx
c0022e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e17:	53                   	push   ebx
c0022e18:	68 fe c1 02 c0       	push   0xc002c1fe
c0022e1d:	e8 71 f9 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0022e22:	83 c4 20             	add    esp,0x20
c0022e25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e29:	40                   	inc    eax
c0022e2a:	eb 86                	jmp    c0022db2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022e2c:	31 d2                	xor    edx,edx
c0022e2e:	83 ec 0c             	sub    esp,0xc
c0022e31:	57                   	push   edi
c0022e32:	53                   	push   ebx
c0022e33:	56                   	push   esi
c0022e34:	52                   	push   edx
c0022e35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022e39:	55                   	push   ebp
c0022e3a:	e8 7d f9 ff ff       	call   c00227bc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022e43:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022e47:	42                   	inc    edx
c0022e48:	83 c4 20             	add    esp,0x20
c0022e4b:	83 fa 06             	cmp    edx,0x6
c0022e4e:	75 de                	jne    c0022e2e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022e50:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022e55:	83 ec 0c             	sub    esp,0xc
c0022e58:	86 e0                	xchg   al,ah
c0022e5a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022e5f:	6a 02                	push   0x2
c0022e61:	57                   	push   edi
c0022e62:	53                   	push   ebx
c0022e63:	56                   	push   esi
c0022e64:	55                   	push   ebp
c0022e65:	e8 7c f7 ff ff       	call   c00225e6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e6a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022e6f:	83 c4 20             	add    esp,0x20
c0022e72:	57                   	push   edi
c0022e73:	53                   	push   ebx
c0022e74:	56                   	push   esi
c0022e75:	55                   	push   ebp
c0022e76:	e8 a9 f8 ff ff       	call   c0022724 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022e7b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022e7f:	57                   	push   edi
c0022e80:	53                   	push   ebx
c0022e81:	56                   	push   esi
c0022e82:	55                   	push   ebp
c0022e83:	e8 06 f8 ff ff       	call   c002268e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e88:	b9 09 00 00 00       	mov    ecx,0x9
c0022e8d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022e92:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022e96:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022e9a:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022e9e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022ea2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022ea6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022eaa:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022eae:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022eb2:	83 ec 0c             	sub    esp,0xc
c0022eb5:	fc                   	cld    
c0022eb6:	89 e7                	mov    edi,esp
c0022eb8:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022ebc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ebe:	55                   	push   ebp
c0022ebf:	e8 e2 fc ff ff       	call   c0022ba6 <PCI::foundDevice(PCIDeviceInfo)>
c0022ec4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022eca:	5b                   	pop    ebx
c0022ecb:	5e                   	pop    esi
c0022ecc:	5f                   	pop    edi
c0022ecd:	5d                   	pop    ebp
c0022ece:	c3                   	ret    
c0022ecf:	90                   	nop

c0022ed0 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022ed0:	55                   	push   ebp
c0022ed1:	57                   	push   edi
c0022ed2:	56                   	push   esi
c0022ed3:	53                   	push   ebx
c0022ed4:	83 ec 0c             	sub    esp,0xc
c0022ed7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022edb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022ee0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022ee5:	6a 00                	push   0x0
c0022ee7:	56                   	push   esi
c0022ee8:	57                   	push   edi
c0022ee9:	55                   	push   ebp
c0022eea:	e8 9f f7 ff ff       	call   c002268e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022eef:	6a 00                	push   0x0
c0022ef1:	56                   	push   esi
c0022ef2:	57                   	push   edi
c0022ef3:	55                   	push   ebp
c0022ef4:	e8 1f fe ff ff       	call   c0022d18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022ef9:	83 c4 20             	add    esp,0x20
c0022efc:	6a 00                	push   0x0
c0022efe:	56                   	push   esi
c0022eff:	57                   	push   edi
c0022f00:	55                   	push   ebp
c0022f01:	e8 ac f7 ff ff       	call   c00226b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f06:	83 c4 10             	add    esp,0x10
c0022f09:	84 c0                	test   al,al
c0022f0b:	79 27                	jns    c0022f34 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022f0d:	bb 01 00 00 00       	mov    ebx,0x1
c0022f12:	53                   	push   ebx
c0022f13:	56                   	push   esi
c0022f14:	57                   	push   edi
c0022f15:	55                   	push   ebp
c0022f16:	e8 73 f7 ff ff       	call   c002268e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f1b:	83 c4 10             	add    esp,0x10
c0022f1e:	66 40                	inc    ax
c0022f20:	74 0c                	je     c0022f2e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022f22:	53                   	push   ebx
c0022f23:	56                   	push   esi
c0022f24:	57                   	push   edi
c0022f25:	55                   	push   ebp
c0022f26:	e8 ed fd ff ff       	call   c0022d18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022f2b:	83 c4 10             	add    esp,0x10
c0022f2e:	43                   	inc    ebx
c0022f2f:	83 fb 08             	cmp    ebx,0x8
c0022f32:	75 de                	jne    c0022f12 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022f34:	83 c4 0c             	add    esp,0xc
c0022f37:	5b                   	pop    ebx
c0022f38:	5e                   	pop    esi
c0022f39:	5f                   	pop    edi
c0022f3a:	5d                   	pop    ebp
c0022f3b:	c3                   	ret    

c0022f3c <PCI::detect()>:
c0022f3c:	56                   	push   esi
c0022f3d:	53                   	push   ebx
c0022f3e:	53                   	push   ebx
c0022f3f:	31 db                	xor    ebx,ebx
c0022f41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f45:	6a 00                	push   0x0
c0022f47:	6a 00                	push   0x0
c0022f49:	6a 00                	push   0x0
c0022f4b:	56                   	push   esi
c0022f4c:	e8 61 f7 ff ff       	call   c00226b2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022f51:	83 c4 10             	add    esp,0x10
c0022f54:	a8 80                	test   al,0x80
c0022f56:	75 21                	jne    c0022f79 <PCI::detect()+0x3d>
c0022f58:	51                   	push   ecx
c0022f59:	51                   	push   ecx
c0022f5a:	6a 00                	push   0x0
c0022f5c:	56                   	push   esi
c0022f5d:	e8 20 fc ff ff       	call   c0022b82 <PCI::checkBus(unsigned char)>
c0022f62:	83 c4 10             	add    esp,0x10
c0022f65:	eb 24                	jmp    c0022f8b <PCI::detect()+0x4f>
c0022f67:	52                   	push   edx
c0022f68:	52                   	push   edx
c0022f69:	53                   	push   ebx
c0022f6a:	43                   	inc    ebx
c0022f6b:	56                   	push   esi
c0022f6c:	e8 11 fc ff ff       	call   c0022b82 <PCI::checkBus(unsigned char)>
c0022f71:	83 c4 10             	add    esp,0x10
c0022f74:	83 fb 08             	cmp    ebx,0x8
c0022f77:	74 12                	je     c0022f8b <PCI::detect()+0x4f>
c0022f79:	53                   	push   ebx
c0022f7a:	6a 00                	push   0x0
c0022f7c:	6a 00                	push   0x0
c0022f7e:	56                   	push   esi
c0022f7f:	e8 0a f7 ff ff       	call   c002268e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f84:	83 c4 10             	add    esp,0x10
c0022f87:	66 40                	inc    ax
c0022f89:	74 dc                	je     c0022f67 <PCI::detect()+0x2b>
c0022f8b:	58                   	pop    eax
c0022f8c:	5b                   	pop    ebx
c0022f8d:	5e                   	pop    esi
c0022f8e:	c3                   	ret    
c0022f8f:	90                   	nop

c0022f90 <IDE::close(int, int, void*)>:
c0022f90:	83 c8 ff             	or     eax,0xffffffff
c0022f93:	c3                   	ret    

c0022f94 <IDE::IDE()>:
c0022f94:	83 ec 0c             	sub    esp,0xc
c0022f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9b:	83 ec 08             	sub    esp,0x8
c0022f9e:	68 48 c2 02 c0       	push   0xc002c248
c0022fa3:	50                   	push   eax
c0022fa4:	e8 d1 0f ff ff       	call   c0013f7a <HardDiskController::HardDiskController(char const*)>
c0022fa9:	83 c4 10             	add    esp,0x10
c0022fac:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0022fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb5:	89 10                	mov    DWORD PTR [eax],edx
c0022fb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fbb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022fc2:	90                   	nop
c0022fc3:	83 c4 0c             	add    esp,0xc
c0022fc6:	c3                   	ret    
c0022fc7:	90                   	nop

c0022fc8 <IDE::prepareInterrupt(unsigned char)>:
c0022fc8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022fcd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022fd1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022fd9:	c3                   	ret    

c0022fda <selectDrive(unsigned char, unsigned char)>:
c0022fda:	c3                   	ret    
c0022fdb:	90                   	nop

c0022fdc <IDE::getBase(unsigned char)>:
c0022fdc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022fe1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022fed:	c3                   	ret    

c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022fee:	55                   	push   ebp
c0022fef:	57                   	push   edi
c0022ff0:	56                   	push   esi
c0022ff1:	53                   	push   ebx
c0022ff2:	83 ec 1c             	sub    esp,0x1c
c0022ff5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ff9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ffd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023000:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023004:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023008:	80 f9 03             	cmp    cl,0x3
c002300b:	77 51                	ja     c002305e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002300d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023011:	0f b6 f2             	movzx  esi,dl
c0023014:	0f b6 db             	movzx  ebx,bl
c0023017:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002301a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002301e:	83 ca 80             	or     edx,0xffffff80
c0023021:	0f b6 d2             	movzx  edx,dl
c0023024:	52                   	push   edx
c0023025:	6a 0c                	push   0xc
c0023027:	56                   	push   esi
c0023028:	57                   	push   edi
c0023029:	e8 c0 ff ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002302e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023033:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023037:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002303b:	ee                   	out    dx,al
c002303c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023041:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023045:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023049:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002304d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023055:	83 c4 2c             	add    esp,0x2c
c0023058:	5b                   	pop    ebx
c0023059:	5e                   	pop    esi
c002305a:	5f                   	pop    edi
c002305b:	5d                   	pop    ebp
c002305c:	eb 90                	jmp    c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002305e:	80 fb 07             	cmp    bl,0x7
c0023061:	77 12                	ja     c0023075 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023063:	0f b6 d2             	movzx  edx,dl
c0023066:	0f b6 db             	movzx  ebx,bl
c0023069:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023071:	89 da                	mov    edx,ebx
c0023073:	eb 2f                	jmp    c00230a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023075:	80 fb 0d             	cmp    bl,0xd
c0023078:	77 13                	ja     c002308d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002307a:	0f b6 d2             	movzx  edx,dl
c002307d:	0f b6 db             	movzx  ebx,bl
c0023080:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023087:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002308b:	eb 17                	jmp    c00230a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002308d:	80 fb 15             	cmp    bl,0x15
c0023090:	77 13                	ja     c00230a5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023092:	0f b6 d2             	movzx  edx,dl
c0023095:	0f b6 db             	movzx  ebx,bl
c0023098:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00230a0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00230a4:	ee                   	out    dx,al
c00230a5:	83 c4 1c             	add    esp,0x1c
c00230a8:	5b                   	pop    ebx
c00230a9:	5e                   	pop    esi
c00230aa:	5f                   	pop    edi
c00230ab:	5d                   	pop    ebp
c00230ac:	c3                   	ret    
c00230ad:	90                   	nop

c00230ae <IDE::read(unsigned char, unsigned char)>:
c00230ae:	55                   	push   ebp
c00230af:	57                   	push   edi
c00230b0:	56                   	push   esi
c00230b1:	53                   	push   ebx
c00230b2:	83 ec 1c             	sub    esp,0x1c
c00230b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230bd:	8d 43 f8             	lea    eax,[ebx-0x8]
c00230c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230c4:	3c 03                	cmp    al,0x3
c00230c6:	77 43                	ja     c002310b <IDE::read(unsigned char, unsigned char)+0x5d>
c00230c8:	0f b6 f2             	movzx  esi,dl
c00230cb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230ce:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00230d2:	83 c8 80             	or     eax,0xffffff80
c00230d5:	0f b6 c0             	movzx  eax,al
c00230d8:	50                   	push   eax
c00230d9:	6a 0c                	push   0xc
c00230db:	56                   	push   esi
c00230dc:	57                   	push   edi
c00230dd:	e8 0c ff ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00230e7:	0f b6 c3             	movzx  eax,bl
c00230ea:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00230ee:	ec                   	in     al,dx
c00230ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00230f3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00230f8:	52                   	push   edx
c00230f9:	6a 0c                	push   0xc
c00230fb:	56                   	push   esi
c00230fc:	57                   	push   edi
c00230fd:	e8 ec fe ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023102:	83 c4 20             	add    esp,0x20
c0023105:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023109:	eb 49                	jmp    c0023154 <IDE::read(unsigned char, unsigned char)+0xa6>
c002310b:	80 fb 07             	cmp    bl,0x7
c002310e:	77 12                	ja     c0023122 <IDE::read(unsigned char, unsigned char)+0x74>
c0023110:	0f b6 d2             	movzx  edx,dl
c0023113:	0f b6 c3             	movzx  eax,bl
c0023116:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c002311e:	89 c2                	mov    edx,eax
c0023120:	eb 31                	jmp    c0023153 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023122:	80 fb 0d             	cmp    bl,0xd
c0023125:	77 13                	ja     c002313a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023127:	0f b6 d2             	movzx  edx,dl
c002312a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023131:	0f b6 d3             	movzx  edx,bl
c0023134:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023138:	eb 19                	jmp    c0023153 <IDE::read(unsigned char, unsigned char)+0xa5>
c002313a:	31 c0                	xor    eax,eax
c002313c:	80 fb 15             	cmp    bl,0x15
c002313f:	77 13                	ja     c0023154 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023141:	0f b6 d2             	movzx  edx,dl
c0023144:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002314c:	0f b6 d3             	movzx  edx,bl
c002314f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023153:	ec                   	in     al,dx
c0023154:	83 c4 1c             	add    esp,0x1c
c0023157:	5b                   	pop    ebx
c0023158:	5e                   	pop    esi
c0023159:	5f                   	pop    edi
c002315a:	5d                   	pop    ebp
c002315b:	c3                   	ret    

c002315c <IDE::waitInterrupt(unsigned char)>:
c002315c:	55                   	push   ebp
c002315d:	57                   	push   edi
c002315e:	56                   	push   esi
c002315f:	53                   	push   ebx
c0023160:	31 db                	xor    ebx,ebx
c0023162:	83 ec 0c             	sub    esp,0xc
c0023165:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023169:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002316e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023176:	89 e8                	mov    eax,ebp
c0023178:	84 c0                	test   al,al
c002317a:	75 34                	jne    c00231b0 <IDE::waitInterrupt(unsigned char)+0x54>
c002317c:	52                   	push   edx
c002317d:	6a 0c                	push   0xc
c002317f:	56                   	push   esi
c0023180:	57                   	push   edi
c0023181:	e8 28 ff ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023186:	83 c4 10             	add    esp,0x10
c0023189:	a8 01                	test   al,0x1
c002318b:	75 2b                	jne    c00231b8 <IDE::waitInterrupt(unsigned char)+0x5c>
c002318d:	f6 c3 04             	test   bl,0x4
c0023190:	75 16                	jne    c00231a8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023192:	83 fb 32             	cmp    ebx,0x32
c0023195:	7e 11                	jle    c00231a8 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023197:	50                   	push   eax
c0023198:	50                   	push   eax
c0023199:	6a 00                	push   0x0
c002319b:	68 80 96 98 00       	push   0x989680
c00231a0:	e8 c6 ab ff ff       	call   c001dd6b <nanoSleep(unsigned long long)>
c00231a5:	83 c4 10             	add    esp,0x10
c00231a8:	83 fb 3c             	cmp    ebx,0x3c
c00231ab:	74 0b                	je     c00231b8 <IDE::waitInterrupt(unsigned char)+0x5c>
c00231ad:	43                   	inc    ebx
c00231ae:	eb be                	jmp    c002316e <IDE::waitInterrupt(unsigned char)+0x12>
c00231b0:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00231b8:	83 c4 0c             	add    esp,0xc
c00231bb:	89 e8                	mov    eax,ebp
c00231bd:	5b                   	pop    ebx
c00231be:	5e                   	pop    esi
c00231bf:	5f                   	pop    edi
c00231c0:	5d                   	pop    ebp
c00231c1:	c3                   	ret    

c00231c2 <ideChannel0IRQHandler(regs*, void*)>:
c00231c2:	83 ec 10             	sub    esp,0x10
c00231c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231c9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00231d0:	6a 07                	push   0x7
c00231d2:	6a 00                	push   0x0
c00231d4:	50                   	push   eax
c00231d5:	e8 d4 fe ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00231da:	83 c4 1c             	add    esp,0x1c
c00231dd:	c3                   	ret    

c00231de <ideChannel1IRQHandler(regs*, void*)>:
c00231de:	83 ec 10             	sub    esp,0x10
c00231e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00231e5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00231ec:	6a 07                	push   0x7
c00231ee:	6a 01                	push   0x1
c00231f0:	50                   	push   eax
c00231f1:	e8 b8 fe ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00231f6:	83 c4 1c             	add    esp,0x1c
c00231f9:	c3                   	ret    

c00231fa <IDE::enableIRQs(unsigned char, bool)>:
c00231fa:	57                   	push   edi
c00231fb:	56                   	push   esi
c00231fc:	be 04 00 00 00       	mov    esi,0x4
c0023201:	53                   	push   ebx
c0023202:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023207:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002320b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023210:	0f 94 c0             	sete   al
c0023213:	d1 e0                	shl    eax,1
c0023215:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c002321c:	0f b6 c0             	movzx  eax,al
c002321f:	50                   	push   eax
c0023220:	6a 0c                	push   0xc
c0023222:	57                   	push   edi
c0023223:	53                   	push   ebx
c0023224:	e8 c5 fd ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023229:	83 c4 10             	add    esp,0x10
c002322c:	50                   	push   eax
c002322d:	6a 0c                	push   0xc
c002322f:	57                   	push   edi
c0023230:	53                   	push   ebx
c0023231:	e8 78 fe ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023236:	83 c4 10             	add    esp,0x10
c0023239:	4e                   	dec    esi
c002323a:	75 f0                	jne    c002322c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002323c:	5b                   	pop    ebx
c002323d:	5e                   	pop    esi
c002323e:	5f                   	pop    edi
c002323f:	c3                   	ret    

c0023240 <IDE::open(int, int, void*)>:
c0023240:	55                   	push   ebp
c0023241:	57                   	push   edi
c0023242:	56                   	push   esi
c0023243:	53                   	push   ebx
c0023244:	83 ec 1c             	sub    esp,0x1c
c0023247:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002324b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023254:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002325d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023264:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002326b:	0f 85 b0 02 00 00    	jne    c0023521 <IDE::open(int, int, void*)+0x2e1>
c0023271:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023277:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002327b:	83 e0 7f             	and    eax,0x7f
c002327e:	3c 05                	cmp    al,0x5
c0023280:	74 04                	je     c0023286 <IDE::open(int, int, void*)+0x46>
c0023282:	3c 0f                	cmp    al,0xf
c0023284:	75 32                	jne    c00232b8 <IDE::open(int, int, void*)+0x78>
c0023286:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002328c:	83 e0 fc             	and    eax,0xfffffffc
c002328f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023296:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002329c:	83 e0 fc             	and    eax,0xfffffffc
c002329f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232a6:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00232ac:	83 e0 fc             	and    eax,0xfffffffc
c00232af:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232b6:	eb 14                	jmp    c00232cc <IDE::open(int, int, void*)+0x8c>
c00232b8:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00232c2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00232cc:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00232d3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00232da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00232de:	89 c6                	mov    esi,eax
c00232e0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232e5:	c1 e6 10             	shl    esi,0x10
c00232e8:	89 e8                	mov    eax,ebp
c00232ea:	89 fa                	mov    edx,edi
c00232ec:	c1 e0 0b             	shl    eax,0xb
c00232ef:	09 f0                	or     eax,esi
c00232f1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00232f8:	c1 e6 08             	shl    esi,0x8
c00232fb:	09 c6                	or     esi,eax
c00232fd:	89 f0                	mov    eax,esi
c00232ff:	0d 08 00 00 80       	or     eax,0x80000008
c0023304:	ef                   	out    dx,eax
c0023305:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002330a:	89 ca                	mov    edx,ecx
c002330c:	ed                   	in     eax,dx
c002330d:	c1 e8 10             	shr    eax,0x10
c0023310:	3d ff ff 00 00       	cmp    eax,0xffff
c0023315:	0f 84 f5 00 00 00    	je     c0023410 <IDE::open(int, int, void*)+0x1d0>
c002331b:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023321:	89 fa                	mov    edx,edi
c0023323:	89 f0                	mov    eax,esi
c0023325:	ef                   	out    dx,eax
c0023326:	b0 fe                	mov    al,0xfe
c0023328:	89 ca                	mov    edx,ecx
c002332a:	ee                   	out    dx,al
c002332b:	89 f0                	mov    eax,esi
c002332d:	89 fa                	mov    edx,edi
c002332f:	ef                   	out    dx,eax
c0023330:	89 ca                	mov    edx,ecx
c0023332:	ed                   	in     eax,dx
c0023333:	3c fe                	cmp    al,0xfe
c0023335:	0f 85 a9 00 00 00    	jne    c00233e4 <IDE::open(int, int, void*)+0x1a4>
c002333b:	8b 15 08 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db08
c0023341:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023348:	74 33                	je     c002337d <IDE::open(int, int, void*)+0x13d>
c002334a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023350:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023354:	40                   	inc    eax
c0023355:	83 ec 0c             	sub    esp,0xc
c0023358:	0f b6 c0             	movzx  eax,al
c002335b:	50                   	push   eax
c002335c:	55                   	push   ebp
c002335d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023361:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023367:	51                   	push   ecx
c0023368:	e8 4b 48 ff ff       	call   c0017bb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002336d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023372:	83 c4 1c             	add    esp,0x1c
c0023375:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002337b:	eb 0a                	jmp    c0023387 <IDE::open(int, int, void*)+0x147>
c002337d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023387:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002338e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023395:	c1 e1 10             	shl    ecx,0x10
c0023398:	c1 e0 08             	shl    eax,0x8
c002339b:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233a0:	09 c1                	or     ecx,eax
c00233a2:	89 fa                	mov    edx,edi
c00233a4:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00233ab:	c1 e0 0b             	shl    eax,0xb
c00233ae:	09 c1                	or     ecx,eax
c00233b0:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00233b6:	89 c8                	mov    eax,ecx
c00233b8:	ef                   	out    dx,eax
c00233b9:	be fc 0c 00 00       	mov    esi,0xcfc
c00233be:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00233c4:	89 f2                	mov    edx,esi
c00233c6:	ee                   	out    dx,al
c00233c7:	89 c8                	mov    eax,ecx
c00233c9:	89 fa                	mov    edx,edi
c00233cb:	ef                   	out    dx,eax
c00233cc:	89 f2                	mov    edx,esi
c00233ce:	ed                   	in     eax,dx
c00233cf:	0f b6 c0             	movzx  eax,al
c00233d2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00233d8:	74 46                	je     c0023420 <IDE::open(int, int, void*)+0x1e0>
c00233da:	83 ec 0c             	sub    esp,0xc
c00233dd:	68 60 c2 02 c0       	push   0xc002c260
c00233e2:	eb 34                	jmp    c0023418 <IDE::open(int, int, void*)+0x1d8>
c00233e4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00233ed:	75 17                	jne    c0023406 <IDE::open(int, int, void*)+0x1c6>
c00233ef:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00233f4:	74 07                	je     c00233fd <IDE::open(int, int, void*)+0x1bd>
c00233f6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00233fb:	75 09                	jne    c0023406 <IDE::open(int, int, void*)+0x1c6>
c00233fd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023404:	eb 1a                	jmp    c0023420 <IDE::open(int, int, void*)+0x1e0>
c0023406:	83 ec 0c             	sub    esp,0xc
c0023409:	68 68 c2 02 c0       	push   0xc002c268
c002340e:	eb 08                	jmp    c0023418 <IDE::open(int, int, void*)+0x1d8>
c0023410:	83 ec 0c             	sub    esp,0xc
c0023413:	68 99 c2 02 c0       	push   0xc002c299
c0023418:	e8 e2 6a ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002341d:	83 c4 10             	add    esp,0x10
c0023420:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023427:	79 1a                	jns    c0023443 <IDE::open(int, int, void*)+0x203>
c0023429:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002342f:	83 e0 fc             	and    eax,0xfffffffc
c0023432:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023439:	83 c0 08             	add    eax,0x8
c002343c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023443:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023449:	89 c2                	mov    edx,eax
c002344b:	83 e2 0f             	and    edx,0xf
c002344e:	66 83 fa 08          	cmp    dx,0x8
c0023452:	75 0a                	jne    c002345e <IDE::open(int, int, void*)+0x21e>
c0023454:	83 e8 02             	sub    eax,0x2
c0023457:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002345e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023464:	89 c2                	mov    edx,eax
c0023466:	83 e2 0f             	and    edx,0xf
c0023469:	66 83 fa 08          	cmp    dx,0x8
c002346d:	75 0a                	jne    c0023479 <IDE::open(int, int, void*)+0x239>
c002346f:	83 e8 02             	sub    eax,0x2
c0023472:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023479:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023480:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023487:	89 d0                	mov    eax,edx
c0023489:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002348c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023490:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023494:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023497:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002349c:	0f b6 c9             	movzx  ecx,cl
c002349f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00234a6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234a9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234ad:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00234b1:	8d 50 02             	lea    edx,[eax+0x2]
c00234b4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234b9:	0f b6 d2             	movzx  edx,dl
c00234bc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00234c2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00234c5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00234c9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00234cd:	8d 48 03             	lea    ecx,[eax+0x3]
c00234d0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00234d5:	0f b6 c9             	movzx  ecx,cl
c00234d8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00234de:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00234e1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00234e5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00234e9:	8d 50 04             	lea    edx,[eax+0x4]
c00234ec:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00234f2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00234f7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00234fe:	66 85 f6             	test   si,si
c0023501:	74 5b                	je     c002355e <IDE::open(int, int, void*)+0x31e>
c0023503:	0f b6 d2             	movzx  edx,dl
c0023506:	83 c0 05             	add    eax,0x5
c0023509:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002350c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023510:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023514:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002351a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002351f:	eb 3d                	jmp    c002355e <IDE::open(int, int, void*)+0x31e>
c0023521:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0023527:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002352e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023535:	66 05 06 02          	add    ax,0x206
c0023539:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023540:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0023547:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002354e:	66 05 06 02          	add    ax,0x206
c0023552:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023559:	e9 e5 fe ff ff       	jmp    c0023443 <IDE::open(int, int, void*)+0x203>
c002355e:	50                   	push   eax
c002355f:	50                   	push   eax
c0023560:	6a 00                	push   0x0
c0023562:	53                   	push   ebx
c0023563:	e8 60 fa ff ff       	call   c0022fc8 <IDE::prepareInterrupt(unsigned char)>
c0023568:	5a                   	pop    edx
c0023569:	59                   	pop    ecx
c002356a:	6a 01                	push   0x1
c002356c:	53                   	push   ebx
c002356d:	e8 56 fa ff ff       	call   c0022fc8 <IDE::prepareInterrupt(unsigned char)>
c0023572:	83 c4 0c             	add    esp,0xc
c0023575:	6a 00                	push   0x0
c0023577:	6a 00                	push   0x0
c0023579:	53                   	push   ebx
c002357a:	e8 7b fc ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c002357f:	83 c4 0c             	add    esp,0xc
c0023582:	6a 00                	push   0x0
c0023584:	6a 01                	push   0x1
c0023586:	53                   	push   ebx
c0023587:	e8 6e fc ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c002358c:	83 c4 10             	add    esp,0x10
c002358f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023596:	74 34                	je     c00235cc <IDE::open(int, int, void*)+0x38c>
c0023598:	83 ec 0c             	sub    esp,0xc
c002359b:	53                   	push   ebx
c002359c:	6a 01                	push   0x1
c002359e:	68 c2 31 02 c0       	push   0xc00231c2
c00235a3:	6a 0e                	push   0xe
c00235a5:	53                   	push   ebx
c00235a6:	e8 99 05 ff ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ab:	83 c4 14             	add    esp,0x14
c00235ae:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00235b4:	53                   	push   ebx
c00235b5:	6a 01                	push   0x1
c00235b7:	68 de 31 02 c0       	push   0xc00231de
c00235bc:	6a 0f                	push   0xf
c00235be:	53                   	push   ebx
c00235bf:	e8 80 05 ff ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235c4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00235ca:	eb 38                	jmp    c0023604 <IDE::open(int, int, void*)+0x3c4>
c00235cc:	83 ec 0c             	sub    esp,0xc
c00235cf:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00235d9:	53                   	push   ebx
c00235da:	6a 00                	push   0x0
c00235dc:	68 c2 31 02 c0       	push   0xc00231c2
c00235e1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00235e7:	53                   	push   ebx
c00235e8:	e8 57 05 ff ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00235ed:	83 c4 14             	add    esp,0x14
c00235f0:	53                   	push   ebx
c00235f1:	6a 00                	push   0x0
c00235f3:	68 de 31 02 c0       	push   0xc00231de
c00235f8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00235fe:	53                   	push   ebx
c00235ff:	e8 40 05 ff ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023604:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023606:	83 c4 20             	add    esp,0x20
c0023609:	83 ec 0c             	sub    esp,0xc
c002360c:	53                   	push   ebx
c002360d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023610:	83 c4 0c             	add    esp,0xc
c0023613:	6a 07                	push   0x7
c0023615:	6a 00                	push   0x0
c0023617:	53                   	push   ebx
c0023618:	e8 91 fa ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c002361d:	83 c4 0c             	add    esp,0xc
c0023620:	6a 07                	push   0x7
c0023622:	6a 01                	push   0x1
c0023624:	53                   	push   ebx
c0023625:	e8 84 fa ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c002362a:	83 c4 0c             	add    esp,0xc
c002362d:	6a 01                	push   0x1
c002362f:	6a 00                	push   0x0
c0023631:	53                   	push   ebx
c0023632:	e8 c3 fb ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c0023637:	83 c4 0c             	add    esp,0xc
c002363a:	6a 01                	push   0x1
c002363c:	6a 01                	push   0x1
c002363e:	53                   	push   ebx
c002363f:	e8 b6 fb ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c0023644:	83 c4 2c             	add    esp,0x2c
c0023647:	31 c0                	xor    eax,eax
c0023649:	5b                   	pop    ebx
c002364a:	5e                   	pop    esi
c002364b:	5f                   	pop    edi
c002364c:	5d                   	pop    ebp
c002364d:	c3                   	ret    

c002364e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002364e:	55                   	push   ebp
c002364f:	57                   	push   edi
c0023650:	56                   	push   esi
c0023651:	53                   	push   ebx
c0023652:	83 ec 1c             	sub    esp,0x1c
c0023655:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023659:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002365d:	8d 50 f8             	lea    edx,[eax-0x8]
c0023660:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023664:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023668:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002366c:	80 fa 03             	cmp    dl,0x3
c002366f:	77 5d                	ja     c00236ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023671:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023679:	0f b6 db             	movzx  ebx,bl
c002367c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002367f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023683:	83 ca 80             	or     edx,0xffffff80
c0023686:	0f b6 d2             	movzx  edx,dl
c0023689:	52                   	push   edx
c002368a:	6a 0c                	push   0xc
c002368c:	53                   	push   ebx
c002368d:	56                   	push   esi
c002368e:	e8 5b f9 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023693:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023698:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002369c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00236a0:	0f b6 c0             	movzx  eax,al
c00236a3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00236a7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00236a9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00236ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00236b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00236b6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00236ba:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00236c2:	83 c4 2c             	add    esp,0x2c
c00236c5:	5b                   	pop    ebx
c00236c6:	5e                   	pop    esi
c00236c7:	5f                   	pop    edi
c00236c8:	5d                   	pop    ebp
c00236c9:	e9 20 f9 ff ff       	jmp    c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ce:	3c 07                	cmp    al,0x7
c00236d0:	77 10                	ja     c00236e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00236d2:	0f b6 db             	movzx  ebx,bl
c00236d5:	0f b6 d0             	movzx  edx,al
c00236d8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00236e0:	eb 2d                	jmp    c002370f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236e2:	3c 0d                	cmp    al,0xd
c00236e4:	77 13                	ja     c00236f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00236e6:	0f b6 db             	movzx  ebx,bl
c00236e9:	0f b6 c0             	movzx  eax,al
c00236ec:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00236f3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00236f7:	eb 16                	jmp    c002370f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00236f9:	3c 15                	cmp    al,0x15
c00236fb:	77 14                	ja     c0023711 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00236fd:	0f b6 db             	movzx  ebx,bl
c0023700:	0f b6 c0             	movzx  eax,al
c0023703:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002370b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002370f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023711:	83 c4 1c             	add    esp,0x1c
c0023714:	5b                   	pop    ebx
c0023715:	5e                   	pop    esi
c0023716:	5f                   	pop    edi
c0023717:	5d                   	pop    ebp
c0023718:	c3                   	ret    
c0023719:	90                   	nop

c002371a <IDE::detect()>:
c002371a:	55                   	push   ebp
c002371b:	57                   	push   edi
c002371c:	56                   	push   esi
c002371d:	53                   	push   ebx
c002371e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023724:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002372b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023732:	0f 85 9d 02 00 00    	jne    c00239d5 <IDE::detect()+0x2bb>
c0023738:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002373f:	31 f6                	xor    esi,esi
c0023741:	31 ed                	xor    ebp,ebp
c0023743:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002374b:	89 e8                	mov    eax,ebp
c002374d:	c1 e0 06             	shl    eax,0x6
c0023750:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023758:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002375c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023760:	c1 e0 04             	shl    eax,0x4
c0023763:	83 c8 a0             	or     eax,0xffffffa0
c0023766:	0f b6 c0             	movzx  eax,al
c0023769:	50                   	push   eax
c002376a:	6a 06                	push   0x6
c002376c:	56                   	push   esi
c002376d:	53                   	push   ebx
c002376e:	e8 7b f8 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023773:	83 c4 0c             	add    esp,0xc
c0023776:	6a 0c                	push   0xc
c0023778:	56                   	push   esi
c0023779:	53                   	push   ebx
c002377a:	e8 2f f9 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c002377f:	83 c4 0c             	add    esp,0xc
c0023782:	6a 0c                	push   0xc
c0023784:	56                   	push   esi
c0023785:	53                   	push   ebx
c0023786:	e8 23 f9 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c002378b:	83 c4 0c             	add    esp,0xc
c002378e:	6a 0c                	push   0xc
c0023790:	56                   	push   esi
c0023791:	53                   	push   ebx
c0023792:	e8 17 f9 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023797:	83 c4 0c             	add    esp,0xc
c002379a:	6a 0c                	push   0xc
c002379c:	56                   	push   esi
c002379d:	53                   	push   ebx
c002379e:	e8 0b f9 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237a3:	68 ec 00 00 00       	push   0xec
c00237a8:	6a 07                	push   0x7
c00237aa:	56                   	push   esi
c00237ab:	53                   	push   ebx
c00237ac:	e8 3d f8 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b1:	83 c4 1c             	add    esp,0x1c
c00237b4:	6a 0c                	push   0xc
c00237b6:	56                   	push   esi
c00237b7:	53                   	push   ebx
c00237b8:	e8 f1 f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237bd:	83 c4 0c             	add    esp,0xc
c00237c0:	6a 0c                	push   0xc
c00237c2:	56                   	push   esi
c00237c3:	53                   	push   ebx
c00237c4:	e8 e5 f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237c9:	83 c4 0c             	add    esp,0xc
c00237cc:	6a 0c                	push   0xc
c00237ce:	56                   	push   esi
c00237cf:	53                   	push   ebx
c00237d0:	e8 d9 f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237d5:	83 c4 0c             	add    esp,0xc
c00237d8:	6a 0c                	push   0xc
c00237da:	56                   	push   esi
c00237db:	53                   	push   ebx
c00237dc:	e8 cd f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237e1:	83 c4 0c             	add    esp,0xc
c00237e4:	6a 0c                	push   0xc
c00237e6:	56                   	push   esi
c00237e7:	53                   	push   ebx
c00237e8:	e8 c1 f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c00237ed:	83 c4 10             	add    esp,0x10
c00237f0:	84 c0                	test   al,al
c00237f2:	0f 84 63 01 00 00    	je     c002395b <IDE::detect()+0x241>
c00237f8:	31 ff                	xor    edi,edi
c00237fa:	50                   	push   eax
c00237fb:	6a 0c                	push   0xc
c00237fd:	56                   	push   esi
c00237fe:	53                   	push   ebx
c00237ff:	e8 aa f8 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023804:	83 c4 10             	add    esp,0x10
c0023807:	a8 01                	test   al,0x1
c0023809:	0f 85 6d 01 00 00    	jne    c002397c <IDE::detect()+0x262>
c002380f:	84 c0                	test   al,al
c0023811:	78 04                	js     c0023817 <IDE::detect()+0xfd>
c0023813:	a8 08                	test   al,0x8
c0023815:	75 27                	jne    c002383e <IDE::detect()+0x124>
c0023817:	47                   	inc    edi
c0023818:	81 ff 17 01 00 00    	cmp    edi,0x117
c002381e:	7e da                	jle    c00237fa <IDE::detect()+0xe0>
c0023820:	50                   	push   eax
c0023821:	50                   	push   eax
c0023822:	6a 00                	push   0x0
c0023824:	68 40 4b 4c 00       	push   0x4c4b40
c0023829:	e8 3d a5 ff ff       	call   c001dd6b <nanoSleep(unsigned long long)>
c002382e:	83 c4 10             	add    esp,0x10
c0023831:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023837:	75 c1                	jne    c00237fa <IDE::detect()+0xe0>
c0023839:	e9 3e 01 00 00       	jmp    c002397c <IDE::detect()+0x262>
c002383e:	31 c9                	xor    ecx,ecx
c0023840:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023844:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	68 80 00 00 00       	push   0x80
c0023850:	57                   	push   edi
c0023851:	6a 00                	push   0x0
c0023853:	56                   	push   esi
c0023854:	53                   	push   ebx
c0023855:	e8 f4 fd ff ff       	call   c002364e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002385a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002385f:	89 e8                	mov    eax,ebp
c0023861:	89 d1                	mov    ecx,edx
c0023863:	c1 e0 06             	shl    eax,0x6
c0023866:	01 d8                	add    eax,ebx
c0023868:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002386f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023876:	89 f2                	mov    edx,esi
c0023878:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002387e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023882:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023888:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002388c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023893:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002389b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00238a2:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00238aa:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00238b0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00238b7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00238bd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00238c1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00238c5:	83 c4 20             	add    esp,0x20
c00238c8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00238cb:	83 c0 02             	add    eax,0x2
c00238ce:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00238d4:	83 c7 02             	add    edi,0x2
c00238d7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00238da:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00238e0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00238e4:	75 e2                	jne    c00238c8 <IDE::detect()+0x1ae>
c00238e6:	89 e8                	mov    eax,ebp
c00238e8:	c1 e0 06             	shl    eax,0x6
c00238eb:	01 d8                	add    eax,ebx
c00238ed:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00238f3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00238fa:	66 c1 ea 09          	shr    dx,0x9
c00238fe:	83 e2 01             	and    edx,0x1
c0023901:	84 c9                	test   cl,cl
c0023903:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023909:	75 22                	jne    c002392d <IDE::detect()+0x213>
c002390b:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0023912:	74 46                	je     c002395a <IDE::detect()+0x240>
c0023914:	83 ec 0c             	sub    esp,0xc
c0023917:	68 7c 01 00 00       	push   0x17c
c002391c:	e8 78 bc fe ff       	call   c000f599 <malloc>
c0023921:	89 c7                	mov    edi,eax
c0023923:	89 04 24             	mov    DWORD PTR [esp],eax
c0023926:	e8 15 05 00 00       	call   c0023e40 <ATA::ATA()>
c002392b:	eb 17                	jmp    c0023944 <IDE::detect()+0x22a>
c002392d:	83 ec 0c             	sub    esp,0xc
c0023930:	68 80 01 00 00       	push   0x180
c0023935:	e8 5f bc fe ff       	call   c000f599 <malloc>
c002393a:	89 c7                	mov    edi,eax
c002393c:	89 04 24             	mov    DWORD PTR [esp],eax
c002393f:	e8 04 0b 00 00       	call   c0024448 <ATAPI::ATAPI()>
c0023944:	5a                   	pop    edx
c0023945:	59                   	pop    ecx
c0023946:	57                   	push   edi
c0023947:	53                   	push   ebx
c0023948:	e8 7f 02 ff ff       	call   c0013bcc <Device::addChild(Device*)>
c002394d:	8b 07                	mov    eax,DWORD PTR [edi]
c002394f:	53                   	push   ebx
c0023950:	55                   	push   ebp
c0023951:	6a 00                	push   0x0
c0023953:	57                   	push   edi
c0023954:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023957:	83 c4 20             	add    esp,0x20
c002395a:	45                   	inc    ebp
c002395b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023960:	74 0d                	je     c002396f <IDE::detect()+0x255>
c0023962:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002396a:	e9 dc fd ff ff       	jmp    c002374b <IDE::detect()+0x31>
c002396f:	4e                   	dec    esi
c0023970:	74 63                	je     c00239d5 <IDE::detect()+0x2bb>
c0023972:	be 01 00 00 00       	mov    esi,0x1
c0023977:	e9 c7 fd ff ff       	jmp    c0023743 <IDE::detect()+0x29>
c002397c:	50                   	push   eax
c002397d:	6a 04                	push   0x4
c002397f:	56                   	push   esi
c0023980:	53                   	push   ebx
c0023981:	e8 28 f7 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023986:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002398a:	83 c4 0c             	add    esp,0xc
c002398d:	6a 05                	push   0x5
c002398f:	56                   	push   esi
c0023990:	53                   	push   ebx
c0023991:	e8 18 f7 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023996:	83 c4 10             	add    esp,0x10
c0023999:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002399d:	80 fa 14             	cmp    dl,0x14
c00239a0:	75 04                	jne    c00239a6 <IDE::detect()+0x28c>
c00239a2:	3c eb                	cmp    al,0xeb
c00239a4:	eb 07                	jmp    c00239ad <IDE::detect()+0x293>
c00239a6:	3c 96                	cmp    al,0x96
c00239a8:	75 b1                	jne    c002395b <IDE::detect()+0x241>
c00239aa:	80 fa 69             	cmp    dl,0x69
c00239ad:	75 ac                	jne    c002395b <IDE::detect()+0x241>
c00239af:	68 a1 00 00 00       	push   0xa1
c00239b4:	6a 07                	push   0x7
c00239b6:	56                   	push   esi
c00239b7:	53                   	push   ebx
c00239b8:	e8 31 f6 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239bd:	5f                   	pop    edi
c00239be:	58                   	pop    eax
c00239bf:	6a 00                	push   0x0
c00239c1:	68 40 42 0f 00       	push   0xf4240
c00239c6:	e8 a0 a3 ff ff       	call   c001dd6b <nanoSleep(unsigned long long)>
c00239cb:	83 c4 10             	add    esp,0x10
c00239ce:	b1 01                	mov    cl,0x1
c00239d0:	e9 6b fe ff ff       	jmp    c0023840 <IDE::detect()+0x126>
c00239d5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00239db:	5b                   	pop    ebx
c00239dc:	5e                   	pop    esi
c00239dd:	5f                   	pop    edi
c00239de:	5d                   	pop    ebp
c00239df:	c3                   	ret    

c00239e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00239e0:	55                   	push   ebp
c00239e1:	57                   	push   edi
c00239e2:	56                   	push   esi
c00239e3:	53                   	push   ebx
c00239e4:	83 ec 1c             	sub    esp,0x1c
c00239e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00239f3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00239f7:	88 c3                	mov    bl,al
c00239f9:	84 c0                	test   al,al
c00239fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239ff:	0f 84 81 00 00 00    	je     c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a05:	83 ec 0c             	sub    esp,0xc
c0023a08:	68 c3 c2 02 c0       	push   0xc002c2c3
c0023a0d:	e8 81 ed fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0023a12:	83 c4 10             	add    esp,0x10
c0023a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a19:	3c 01                	cmp    al,0x1
c0023a1b:	74 63                	je     c0023a80 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023a1d:	3c 02                	cmp    al,0x2
c0023a1f:	75 53                	jne    c0023a74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023a21:	d1 e6                	shl    esi,1
c0023a23:	09 ee                	or     esi,ebp
c0023a25:	50                   	push   eax
c0023a26:	89 f0                	mov    eax,esi
c0023a28:	6a 01                	push   0x1
c0023a2a:	0f b6 f0             	movzx  esi,al
c0023a2d:	c1 e6 06             	shl    esi,0x6
c0023a30:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023a38:	50                   	push   eax
c0023a39:	57                   	push   edi
c0023a3a:	e8 6f f6 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023a3f:	83 c4 10             	add    esp,0x10
c0023a42:	a8 01                	test   al,0x1
c0023a44:	74 02                	je     c0023a48 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0023a46:	b3 07                	mov    bl,0x7
c0023a48:	a8 02                	test   al,0x2
c0023a4a:	74 02                	je     c0023a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023a4c:	b3 03                	mov    bl,0x3
c0023a4e:	a8 04                	test   al,0x4
c0023a50:	74 02                	je     c0023a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0023a52:	b3 14                	mov    bl,0x14
c0023a54:	a8 08                	test   al,0x8
c0023a56:	74 02                	je     c0023a5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023a58:	b3 03                	mov    bl,0x3
c0023a5a:	a8 10                	test   al,0x10
c0023a5c:	74 02                	je     c0023a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023a5e:	b3 15                	mov    bl,0x15
c0023a60:	a8 20                	test   al,0x20
c0023a62:	74 02                	je     c0023a66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0023a64:	b3 03                	mov    bl,0x3
c0023a66:	a8 40                	test   al,0x40
c0023a68:	74 02                	je     c0023a6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023a6a:	b3 16                	mov    bl,0x16
c0023a6c:	84 c0                	test   al,al
c0023a6e:	79 16                	jns    c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a70:	b3 0d                	mov    bl,0xd
c0023a72:	eb 12                	jmp    c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a74:	3c 03                	cmp    al,0x3
c0023a76:	74 0c                	je     c0023a84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023a78:	3c 04                	cmp    al,0x4
c0023a7a:	75 0a                	jne    c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a7c:	b3 08                	mov    bl,0x8
c0023a7e:	eb 06                	jmp    c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a80:	b3 13                	mov    bl,0x13
c0023a82:	eb 02                	jmp    c0023a86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023a84:	b3 17                	mov    bl,0x17
c0023a86:	83 c4 1c             	add    esp,0x1c
c0023a89:	88 d8                	mov    al,bl
c0023a8b:	5b                   	pop    ebx
c0023a8c:	5e                   	pop    esi
c0023a8d:	5f                   	pop    edi
c0023a8e:	5d                   	pop    ebp
c0023a8f:	c3                   	ret    

c0023a90 <IDE::polling(unsigned char, unsigned int)>:
c0023a90:	57                   	push   edi
c0023a91:	56                   	push   esi
c0023a92:	53                   	push   ebx
c0023a93:	bb 04 00 00 00       	mov    ebx,0x4
c0023a98:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a9c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023aa1:	52                   	push   edx
c0023aa2:	6a 0c                	push   0xc
c0023aa4:	56                   	push   esi
c0023aa5:	57                   	push   edi
c0023aa6:	e8 03 f6 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023aab:	83 c4 10             	add    esp,0x10
c0023aae:	4b                   	dec    ebx
c0023aaf:	75 f0                	jne    c0023aa1 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023ab1:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ab6:	50                   	push   eax
c0023ab7:	6a 0c                	push   0xc
c0023ab9:	56                   	push   esi
c0023aba:	57                   	push   edi
c0023abb:	e8 ee f5 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023ac0:	83 c4 10             	add    esp,0x10
c0023ac3:	a8 01                	test   al,0x1
c0023ac5:	75 17                	jne    c0023ade <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ac7:	a8 20                	test   al,0x20
c0023ac9:	75 0f                	jne    c0023ada <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023acb:	4b                   	dec    ebx
c0023acc:	74 10                	je     c0023ade <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023ace:	84 c0                	test   al,al
c0023ad0:	78 e4                	js     c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ad2:	a8 08                	test   al,0x8
c0023ad4:	74 e0                	je     c0023ab6 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ad6:	31 c0                	xor    eax,eax
c0023ad8:	eb 06                	jmp    c0023ae0 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ada:	b0 01                	mov    al,0x1
c0023adc:	eb 02                	jmp    c0023ae0 <IDE::polling(unsigned char, unsigned int)+0x50>
c0023ade:	b0 02                	mov    al,0x2
c0023ae0:	5b                   	pop    ebx
c0023ae1:	5e                   	pop    esi
c0023ae2:	5f                   	pop    edi
c0023ae3:	c3                   	ret    

c0023ae4 <SATABus::close(int, int, void*)>:
c0023ae4:	31 c0                	xor    eax,eax
c0023ae6:	c3                   	ret    
c0023ae7:	90                   	nop

c0023ae8 <SATABus::detect()>:
c0023ae8:	c3                   	ret    
c0023ae9:	90                   	nop

c0023aea <SATABus::SATABus()>:
c0023aea:	83 ec 0c             	sub    esp,0xc
c0023aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af1:	83 ec 08             	sub    esp,0x8
c0023af4:	68 fc c2 02 c0       	push   0xc002c2fc
c0023af9:	50                   	push   eax
c0023afa:	e8 7b 04 ff ff       	call   c0013f7a <HardDiskController::HardDiskController(char const*)>
c0023aff:	83 c4 10             	add    esp,0x10
c0023b02:	ba 50 c3 02 c0       	mov    edx,0xc002c350
c0023b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b0b:	89 10                	mov    DWORD PTR [eax],edx
c0023b0d:	83 ec 0c             	sub    esp,0xc
c0023b10:	6a 50                	push   0x50
c0023b12:	e8 76 bf fe ff       	call   c000fa8d <Phys::allocateContiguousPages(int)>
c0023b17:	83 c4 10             	add    esp,0x10
c0023b1a:	89 c2                	mov    edx,eax
c0023b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b26:	83 ec 0c             	sub    esp,0xc
c0023b29:	6a 50                	push   0x50
c0023b2b:	e8 ef d6 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	89 c2                	mov    edx,eax
c0023b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b3f:	a1 70 dc 02 c0       	mov    eax,ds:0xc002dc70
c0023b44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b48:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b52:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b58:	83 ec 0c             	sub    esp,0xc
c0023b5b:	6a 03                	push   0x3
c0023b5d:	6a 50                	push   0x50
c0023b5f:	51                   	push   ecx
c0023b60:	52                   	push   edx
c0023b61:	50                   	push   eax
c0023b62:	e8 01 e2 fe ff       	call   c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b67:	83 c4 20             	add    esp,0x20
c0023b6a:	90                   	nop
c0023b6b:	83 c4 0c             	add    esp,0xc
c0023b6e:	c3                   	ret    
c0023b6f:	90                   	nop

c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b70:	83 ec 0c             	sub    esp,0xc
c0023b73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b77:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b7d:	09 c2                	or     edx,eax
c0023b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b89:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b8b:	31 c0                	xor    eax,eax
c0023b8d:	c1 e9 08             	shr    ecx,0x8
c0023b90:	83 e1 0f             	and    ecx,0xf
c0023b93:	39 c8                	cmp    eax,ecx
c0023b95:	74 0a                	je     c0023ba1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b97:	f6 c2 01             	test   dl,0x1
c0023b9a:	74 18                	je     c0023bb4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b9c:	d1 ea                	shr    edx,1
c0023b9e:	40                   	inc    eax
c0023b9f:	eb f2                	jmp    c0023b93 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	68 20 c3 02 c0       	push   0xc002c320
c0023ba9:	e8 51 63 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0023bae:	83 c4 10             	add    esp,0x10
c0023bb1:	83 c8 ff             	or     eax,0xffffffff
c0023bb4:	83 c4 0c             	add    esp,0xc
c0023bb7:	c3                   	ret    

c0023bb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bbc:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bbf:	89 c2                	mov    edx,eax
c0023bc1:	c1 ea 08             	shr    edx,0x8
c0023bc4:	83 e2 0f             	and    edx,0xf
c0023bc7:	fe ca                	dec    dl
c0023bc9:	75 31                	jne    c0023bfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bcb:	83 e0 0f             	and    eax,0xf
c0023bce:	3c 03                	cmp    al,0x3
c0023bd0:	75 2a                	jne    c0023bfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bd2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bd5:	b8 02 00 00 00       	mov    eax,0x2
c0023bda:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023be0:	74 1c                	je     c0023bfe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023be2:	b8 04 00 00 00       	mov    eax,0x4
c0023be7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bed:	74 0f                	je     c0023bfe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bef:	31 c0                	xor    eax,eax
c0023bf1:	83 fa 03             	cmp    edx,0x3
c0023bf4:	0f 94 c0             	sete   al
c0023bf7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bfb:	c3                   	ret    
c0023bfc:	31 c0                	xor    eax,eax
c0023bfe:	c3                   	ret    
c0023bff:	90                   	nop

c0023c00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c07:	0f ba e2 0f          	bt     edx,0xf
c0023c0b:	72 f7                	jb     c0023c04 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c10:	83 ca 10             	or     edx,0x10
c0023c13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c16:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c19:	83 ca 01             	or     edx,0x1
c0023c1c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c1f:	c3                   	ret    

c0023c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c24:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c27:	83 e2 fe             	and    edx,0xfffffffe
c0023c2a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c2d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c30:	83 e2 ef             	and    edx,0xffffffef
c0023c33:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c39:	0f ba e2 0e          	bt     edx,0xe
c0023c3d:	72 f7                	jb     c0023c36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c3f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c42:	0f ba e2 0f          	bt     edx,0xf
c0023c46:	72 ee                	jb     c0023c36 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c48:	c3                   	ret    
c0023c49:	90                   	nop

c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c4a:	55                   	push   ebp
c0023c4b:	57                   	push   edi
c0023c4c:	56                   	push   esi
c0023c4d:	53                   	push   ebx
c0023c4e:	83 ec 1c             	sub    esp,0x1c
c0023c51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c55:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c59:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c5d:	53                   	push   ebx
c0023c5e:	89 fd                	mov    ebp,edi
c0023c60:	56                   	push   esi
c0023c61:	c1 e5 0a             	shl    ebp,0xa
c0023c64:	e8 b7 ff ff ff       	call   c0023c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c69:	83 ec 0c             	sub    esp,0xc
c0023c6c:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c72:	01 e8                	add    eax,ebp
c0023c74:	89 03                	mov    DWORD PTR [ebx],eax
c0023c76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c78:	68 00 04 00 00       	push   0x400
c0023c7d:	6a 00                	push   0x0
c0023c7f:	50                   	push   eax
c0023c80:	e8 cb ca fd ff       	call   c0000750 <memset>
c0023c85:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c8b:	89 fa                	mov    edx,edi
c0023c8d:	01 e8                	add    eax,ebp
c0023c8f:	c1 e7 0d             	shl    edi,0xd
c0023c92:	89 03                	mov    DWORD PTR [ebx],eax
c0023c94:	c1 e2 08             	shl    edx,0x8
c0023c97:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c9e:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ca4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023ca8:	89 d0                	mov    eax,edx
c0023caa:	83 c4 1c             	add    esp,0x1c
c0023cad:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cb3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cb6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cb9:	68 00 01 00 00       	push   0x100
c0023cbe:	6a 00                	push   0x0
c0023cc0:	50                   	push   eax
c0023cc1:	e8 8a ca fd ff       	call   c0000750 <memset>
c0023cc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cca:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cd0:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cd6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cda:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cdd:	83 c4 10             	add    esp,0x10
c0023ce0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ce7:	31 ff                	xor    edi,edi
c0023ce9:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023cef:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cf9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cff:	83 c5 20             	add    ebp,0x20
c0023d02:	01 f8                	add    eax,edi
c0023d04:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d07:	52                   	push   edx
c0023d08:	68 00 01 00 00       	push   0x100
c0023d0d:	6a 00                	push   0x0
c0023d0f:	50                   	push   eax
c0023d10:	e8 3b ca fd ff       	call   c0000750 <memset>
c0023d15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d19:	83 c4 10             	add    esp,0x10
c0023d1c:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d29:	01 f8                	add    eax,edi
c0023d2b:	81 c7 00 01 00 00    	add    edi,0x100
c0023d31:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d34:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d3a:	75 b3                	jne    c0023cef <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d3c:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d40:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d44:	83 c4 1c             	add    esp,0x1c
c0023d47:	5b                   	pop    ebx
c0023d48:	5e                   	pop    esi
c0023d49:	5f                   	pop    edi
c0023d4a:	5d                   	pop    ebp
c0023d4b:	e9 b0 fe ff ff       	jmp    c0023c00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d50:	55                   	push   ebp
c0023d51:	57                   	push   edi
c0023d52:	56                   	push   esi
c0023d53:	53                   	push   ebx
c0023d54:	31 db                	xor    ebx,ebx
c0023d56:	83 ec 0c             	sub    esp,0xc
c0023d59:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d5d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d61:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d64:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d6a:	74 7a                	je     c0023de6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023d6c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023d70:	89 d8                	mov    eax,ebx
c0023d72:	c1 e0 07             	shl    eax,0x7
c0023d75:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023d7c:	55                   	push   ebp
c0023d7d:	56                   	push   esi
c0023d7e:	e8 35 fe ff ff       	call   c0023bb8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d83:	5a                   	pop    edx
c0023d84:	83 f8 01             	cmp    eax,0x1
c0023d87:	59                   	pop    ecx
c0023d88:	75 21                	jne    c0023dab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023d8a:	50                   	push   eax
c0023d8b:	53                   	push   ebx
c0023d8c:	55                   	push   ebp
c0023d8d:	56                   	push   esi
c0023d8e:	e8 b7 fe ff ff       	call   c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d93:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d9a:	e8 fa b7 fe ff       	call   c000f599 <malloc>
c0023d9f:	89 c5                	mov    ebp,eax
c0023da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0023da4:	e8 03 0d 00 00       	call   c0024aac <SATA::SATA()>
c0023da9:	eb 24                	jmp    c0023dcf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023dab:	83 f8 04             	cmp    eax,0x4
c0023dae:	75 36                	jne    c0023de6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023db0:	51                   	push   ecx
c0023db1:	53                   	push   ebx
c0023db2:	55                   	push   ebp
c0023db3:	56                   	push   esi
c0023db4:	e8 91 fe ff ff       	call   c0023c4a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023db9:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023dc0:	e8 d4 b7 fe ff       	call   c000f599 <malloc>
c0023dc5:	89 c5                	mov    ebp,eax
c0023dc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dca:	e8 53 10 00 00       	call   c0024e22 <SATAPI::SATAPI()>
c0023dcf:	58                   	pop    eax
c0023dd0:	5a                   	pop    edx
c0023dd1:	55                   	push   ebp
c0023dd2:	56                   	push   esi
c0023dd3:	e8 f4 fd fe ff       	call   c0013bcc <Device::addChild(Device*)>
c0023dd8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023ddb:	56                   	push   esi
c0023ddc:	6a 00                	push   0x0
c0023dde:	53                   	push   ebx
c0023ddf:	55                   	push   ebp
c0023de0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023de3:	83 c4 20             	add    esp,0x20
c0023de6:	d1 ef                	shr    edi,1
c0023de8:	43                   	inc    ebx
c0023de9:	83 fb 20             	cmp    ebx,0x20
c0023dec:	0f 85 72 ff ff ff    	jne    c0023d64 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023df2:	83 c4 0c             	add    esp,0xc
c0023df5:	5b                   	pop    ebx
c0023df6:	5e                   	pop    esi
c0023df7:	5f                   	pop    edi
c0023df8:	5d                   	pop    ebp
c0023df9:	c3                   	ret    

c0023dfa <SATABus::open(int, int, void*)>:
c0023dfa:	83 ec 14             	sub    esp,0x14
c0023dfd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e01:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e07:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e0d:	52                   	push   edx
c0023e0e:	50                   	push   eax
c0023e0f:	e8 3c ff ff ff       	call   c0023d50 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e14:	31 c0                	xor    eax,eax
c0023e16:	83 c4 1c             	add    esp,0x1c
c0023e19:	c3                   	ret    

c0023e1a <ATA::close(int, int, void*)>:
c0023e1a:	83 ec 0c             	sub    esp,0xc
c0023e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e27:	85 c0                	test   eax,eax
c0023e29:	74 0c                	je     c0023e37 <ATA::close(int, int, void*)+0x1d>
c0023e2b:	83 ec 0c             	sub    esp,0xc
c0023e2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e30:	50                   	push   eax
c0023e31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e34:	83 c4 10             	add    esp,0x10
c0023e37:	31 c0                	xor    eax,eax
c0023e39:	83 c4 0c             	add    esp,0xc
c0023e3c:	c3                   	ret    
c0023e3d:	90                   	nop

c0023e3e <ATA::powerSaving(PowerSavingLevel)>:
c0023e3e:	c3                   	ret    
c0023e3f:	90                   	nop

c0023e40 <ATA::ATA()>:
c0023e40:	83 ec 0c             	sub    esp,0xc
c0023e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e47:	83 ec 04             	sub    esp,0x4
c0023e4a:	68 00 02 00 00       	push   0x200
c0023e4f:	68 19 c4 02 c0       	push   0xc002c419
c0023e54:	50                   	push   eax
c0023e55:	e8 a8 01 ff ff       	call   c0014002 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e5a:	83 c4 10             	add    esp,0x10
c0023e5d:	ba 9c c3 02 c0       	mov    edx,0xc002c39c
c0023e62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e66:	89 10                	mov    DWORD PTR [eax],edx
c0023e68:	90                   	nop
c0023e69:	83 c4 0c             	add    esp,0xc
c0023e6c:	c3                   	ret    
c0023e6d:	90                   	nop

c0023e6e <ATA::flush(bool)>:
c0023e6e:	53                   	push   ebx
c0023e6f:	83 ec 08             	sub    esp,0x8
c0023e72:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e7b:	19 c0                	sbb    eax,eax
c0023e7d:	83 e0 fd             	and    eax,0xfffffffd
c0023e80:	05 ea 00 00 00       	add    eax,0xea
c0023e85:	50                   	push   eax
c0023e86:	6a 07                	push   0x7
c0023e88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e8f:	50                   	push   eax
c0023e90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e96:	e8 53 f1 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9b:	83 c4 0c             	add    esp,0xc
c0023e9e:	6a 00                	push   0x0
c0023ea0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ea7:	50                   	push   eax
c0023ea8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eae:	e8 dd fb ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c0023eb3:	83 c4 18             	add    esp,0x18
c0023eb6:	5b                   	pop    ebx
c0023eb7:	c3                   	ret    

c0023eb8 <ATA::readyForCommand()>:
c0023eb8:	56                   	push   esi
c0023eb9:	53                   	push   ebx
c0023eba:	31 db                	xor    ebx,ebx
c0023ebc:	50                   	push   eax
c0023ebd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ec1:	50                   	push   eax
c0023ec2:	6a 0c                	push   0xc
c0023ec4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023ecb:	50                   	push   eax
c0023ecc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ed2:	e8 d7 f1 ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0023ed7:	83 c4 10             	add    esp,0x10
c0023eda:	a8 88                	test   al,0x88
c0023edc:	74 23                	je     c0023f01 <ATA::readyForCommand()+0x49>
c0023ede:	43                   	inc    ebx
c0023edf:	83 fb 63             	cmp    ebx,0x63
c0023ee2:	7e dd                	jle    c0023ec1 <ATA::readyForCommand()+0x9>
c0023ee4:	51                   	push   ecx
c0023ee5:	51                   	push   ecx
c0023ee6:	6a 00                	push   0x0
c0023ee8:	68 40 42 0f 00       	push   0xf4240
c0023eed:	e8 79 9e ff ff       	call   c001dd6b <nanoSleep(unsigned long long)>
c0023ef2:	83 c4 10             	add    esp,0x10
c0023ef5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023efb:	75 c4                	jne    c0023ec1 <ATA::readyForCommand()+0x9>
c0023efd:	31 c0                	xor    eax,eax
c0023eff:	eb 02                	jmp    c0023f03 <ATA::readyForCommand()+0x4b>
c0023f01:	b0 01                	mov    al,0x1
c0023f03:	5a                   	pop    edx
c0023f04:	5b                   	pop    ebx
c0023f05:	5e                   	pop    esi
c0023f06:	c3                   	ret    
c0023f07:	90                   	nop

c0023f08 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f08:	55                   	push   ebp
c0023f09:	57                   	push   edi
c0023f0a:	56                   	push   esi
c0023f0b:	53                   	push   ebx
c0023f0c:	83 ec 2c             	sub    esp,0x2c
c0023f0f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f17:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f1f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f23:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f27:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f2b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f35:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f3f:	c1 e0 06             	shl    eax,0x6
c0023f42:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f4a:	74 5d                	je     c0023fa9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f4c:	89 fa                	mov    edx,edi
c0023f4e:	89 f0                	mov    eax,esi
c0023f50:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f54:	c1 ea 1c             	shr    edx,0x1c
c0023f57:	89 d1                	mov    ecx,edx
c0023f59:	09 c1                	or     ecx,eax
c0023f5b:	74 25                	je     c0023f82 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f5d:	31 ed                	xor    ebp,ebp
c0023f5f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f66:	89 fa                	mov    edx,edi
c0023f68:	89 f0                	mov    eax,esi
c0023f6a:	0f ad d0             	shrd   eax,edx,cl
c0023f6d:	d3 ea                	shr    edx,cl
c0023f6f:	f6 c1 20             	test   cl,0x20
c0023f72:	74 02                	je     c0023f76 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f74:	89 d0                	mov    eax,edx
c0023f76:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f7a:	45                   	inc    ebp
c0023f7b:	83 fd 06             	cmp    ebp,0x6
c0023f7e:	75 df                	jne    c0023f5f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f80:	eb 76                	jmp    c0023ff8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f82:	89 f0                	mov    eax,esi
c0023f84:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f89:	89 fa                	mov    edx,edi
c0023f8b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023f92:	0f ac d0 10          	shrd   eax,edx,0x10
c0023f96:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023f9b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023f9f:	c1 ee 18             	shr    esi,0x18
c0023fa2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fa7:	eb 56                	jmp    c0023fff <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fa9:	6a 00                	push   0x0
c0023fab:	6a 3f                	push   0x3f
c0023fad:	57                   	push   edi
c0023fae:	56                   	push   esi
c0023faf:	e8 20 29 00 00       	call   c00268d4 <__umoddi3>
c0023fb4:	83 c4 10             	add    esp,0x10
c0023fb7:	40                   	inc    eax
c0023fb8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023fbc:	6a 00                	push   0x0
c0023fbe:	68 f0 03 00 00       	push   0x3f0
c0023fc3:	57                   	push   edi
c0023fc4:	56                   	push   esi
c0023fc5:	e8 0a 28 00 00       	call   c00267d4 <__udivdi3>
c0023fca:	83 c4 10             	add    esp,0x10
c0023fcd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023fd2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fd9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fde:	6a 00                	push   0x0
c0023fe0:	6a 3f                	push   0x3f
c0023fe2:	57                   	push   edi
c0023fe3:	56                   	push   esi
c0023fe4:	e8 eb 27 00 00       	call   c00267d4 <__udivdi3>
c0023fe9:	83 c4 10             	add    esp,0x10
c0023fec:	89 c6                	mov    esi,eax
c0023fee:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023ff3:	83 e6 0f             	and    esi,0xf
c0023ff6:	eb 07                	jmp    c0023fff <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ff8:	31 f6                	xor    esi,esi
c0023ffa:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023fff:	bf 01 00 00 00       	mov    edi,0x1
c0024004:	50                   	push   eax
c0024005:	6a 00                	push   0x0
c0024007:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002400e:	50                   	push   eax
c002400f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024013:	e8 e2 f1 ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c0024018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002401b:	e8 98 fe ff ff       	call   c0023eb8 <ATA::readyForCommand()>
c0024020:	83 c4 10             	add    esp,0x10
c0024023:	84 c0                	test   al,al
c0024025:	0f 84 5a 02 00 00    	je     c0024285 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002402b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024031:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024037:	c1 e0 04             	shl    eax,0x4
c002403a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024041:	09 c6                	or     esi,eax
c0024043:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024048:	75 05                	jne    c002404f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002404a:	83 ce a0             	or     esi,0xffffffa0
c002404d:	eb 03                	jmp    c0024052 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002404f:	83 ce e0             	or     esi,0xffffffe0
c0024052:	89 f0                	mov    eax,esi
c0024054:	0f b6 f0             	movzx  esi,al
c0024057:	56                   	push   esi
c0024058:	6a 06                	push   0x6
c002405a:	51                   	push   ecx
c002405b:	52                   	push   edx
c002405c:	e8 8d ef ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024061:	83 c4 10             	add    esp,0x10
c0024064:	6a 00                	push   0x0
c0024066:	6a 01                	push   0x1
c0024068:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406f:	50                   	push   eax
c0024070:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024076:	e8 73 ef ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407b:	83 c4 10             	add    esp,0x10
c002407e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024083:	75 6e                	jne    c00240f3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024085:	6a 00                	push   0x0
c0024087:	6a 08                	push   0x8
c0024089:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024090:	50                   	push   eax
c0024091:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024097:	e8 52 ef ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240a1:	50                   	push   eax
c00240a2:	6a 09                	push   0x9
c00240a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ab:	50                   	push   eax
c00240ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b2:	e8 37 ef ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b7:	83 c4 20             	add    esp,0x20
c00240ba:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240bf:	50                   	push   eax
c00240c0:	6a 0a                	push   0xa
c00240c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240c9:	50                   	push   eax
c00240ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d0:	e8 19 ef ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00240da:	50                   	push   eax
c00240db:	6a 0b                	push   0xb
c00240dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e4:	50                   	push   eax
c00240e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240eb:	e8 fe ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f0:	83 c4 20             	add    esp,0x20
c00240f3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00240f8:	50                   	push   eax
c00240f9:	6a 02                	push   0x2
c00240fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024102:	50                   	push   eax
c0024103:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024109:	e8 e0 ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002410e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024113:	50                   	push   eax
c0024114:	6a 03                	push   0x3
c0024116:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411d:	50                   	push   eax
c002411e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024124:	e8 c5 ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024129:	83 c4 20             	add    esp,0x20
c002412c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024131:	50                   	push   eax
c0024132:	6a 04                	push   0x4
c0024134:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002413b:	50                   	push   eax
c002413c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024142:	e8 a7 ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024147:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002414c:	50                   	push   eax
c002414d:	6a 05                	push   0x5
c002414f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024156:	50                   	push   eax
c0024157:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002415d:	e8 8c ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024162:	83 c4 20             	add    esp,0x20
c0024165:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002416a:	0f 94 c0             	sete   al
c002416d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024172:	74 09                	je     c002417d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024174:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002417b:	eb 07                	jmp    c0024184 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002417d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024184:	0f b6 c0             	movzx  eax,al
c0024187:	50                   	push   eax
c0024188:	6a 07                	push   0x7
c002418a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024191:	50                   	push   eax
c0024192:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024198:	e8 51 ee ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002419d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241a1:	83 c4 10             	add    esp,0x10
c00241a4:	85 f6                	test   esi,esi
c00241a6:	0f 84 ba 00 00 00    	je     c0024266 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241ac:	50                   	push   eax
c00241ad:	6a 01                	push   0x1
c00241af:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241b6:	50                   	push   eax
c00241b7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241bd:	e8 ce f8 ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c00241c2:	83 c4 10             	add    esp,0x10
c00241c5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241cb:	84 c0                	test   al,al
c00241cd:	74 2c                	je     c00241fb <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00241cf:	0f b6 f8             	movzx  edi,al
c00241d2:	0f b6 d2             	movzx  edx,dl
c00241d5:	57                   	push   edi
c00241d6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00241dd:	50                   	push   eax
c00241de:	52                   	push   edx
c00241df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e5:	e8 f6 f7 ff ff       	call   c00239e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241ea:	c7 04 24 74 c3 02 c0 	mov    DWORD PTR [esp],0xc002c374
c00241f1:	e8 9d e5 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00241f6:	e9 87 00 00 00       	jmp    c0024282 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c00241fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024200:	74 33                	je     c0024235 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024202:	31 ed                	xor    ebp,ebp
c0024204:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024208:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002420c:	50                   	push   eax
c002420d:	50                   	push   eax
c002420e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024215:	50                   	push   eax
c0024216:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421c:	e8 bb ed ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c0024221:	89 c2                	mov    edx,eax
c0024223:	89 f8                	mov    eax,edi
c0024225:	66 ef                	out    dx,ax
c0024227:	45                   	inc    ebp
c0024228:	83 c4 10             	add    esp,0x10
c002422b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024231:	75 d1                	jne    c0024204 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024233:	eb 23                	jmp    c0024258 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024235:	0f b6 d2             	movzx  edx,dl
c0024238:	51                   	push   ecx
c0024239:	51                   	push   ecx
c002423a:	52                   	push   edx
c002423b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024241:	e8 96 ed ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c0024246:	b9 00 01 00 00       	mov    ecx,0x100
c002424b:	89 c2                	mov    edx,eax
c002424d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024251:	fc                   	cld    
c0024252:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024255:	83 c4 10             	add    esp,0x10
c0024258:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024260:	4e                   	dec    esi
c0024261:	e9 3e ff ff ff       	jmp    c00241a4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024266:	31 ff                	xor    edi,edi
c0024268:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002426d:	74 16                	je     c0024285 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002426f:	50                   	push   eax
c0024270:	50                   	push   eax
c0024271:	31 c0                	xor    eax,eax
c0024273:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024278:	0f 94 c0             	sete   al
c002427b:	50                   	push   eax
c002427c:	53                   	push   ebx
c002427d:	e8 ec fb ff ff       	call   c0023e6e <ATA::flush(bool)>
c0024282:	83 c4 10             	add    esp,0x10
c0024285:	83 c4 2c             	add    esp,0x2c
c0024288:	89 f8                	mov    eax,edi
c002428a:	5b                   	pop    ebx
c002428b:	5e                   	pop    esi
c002428c:	5f                   	pop    edi
c002428d:	5d                   	pop    ebp
c002428e:	c3                   	ret    
c002428f:	90                   	nop

c0024290 <ATA::read(unsigned long long, int, void*)>:
c0024290:	57                   	push   edi
c0024291:	b8 04 00 00 00       	mov    eax,0x4
c0024296:	56                   	push   esi
c0024297:	53                   	push   ebx
c0024298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002429c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00242a0:	8d 7a ff             	lea    edi,[edx-0x1]
c00242a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00242a7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242ab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00242b1:	77 25                	ja     c00242d8 <ATA::read(unsigned long long, int, void*)+0x48>
c00242b3:	b8 06 00 00 00       	mov    eax,0x6
c00242b8:	85 f6                	test   esi,esi
c00242ba:	74 1c                	je     c00242d8 <ATA::read(unsigned long long, int, void*)+0x48>
c00242bc:	50                   	push   eax
c00242bd:	50                   	push   eax
c00242be:	6a 00                	push   0x0
c00242c0:	56                   	push   esi
c00242c1:	52                   	push   edx
c00242c2:	53                   	push   ebx
c00242c3:	51                   	push   ecx
c00242c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00242c8:	e8 3b fc ff ff       	call   c0023f08 <ATA::access(unsigned long long, int, void*, bool)>
c00242cd:	83 c4 20             	add    esp,0x20
c00242d0:	85 c0                	test   eax,eax
c00242d2:	0f 95 c0             	setne  al
c00242d5:	0f b6 c0             	movzx  eax,al
c00242d8:	5b                   	pop    ebx
c00242d9:	5e                   	pop    esi
c00242da:	5f                   	pop    edi
c00242db:	c3                   	ret    

c00242dc <ATA::write(unsigned long long, int, void*)>:
c00242dc:	57                   	push   edi
c00242dd:	b8 04 00 00 00       	mov    eax,0x4
c00242e2:	56                   	push   esi
c00242e3:	53                   	push   ebx
c00242e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00242e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00242ec:	8d 7a ff             	lea    edi,[edx-0x1]
c00242ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00242f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00242f7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00242fd:	77 25                	ja     c0024324 <ATA::write(unsigned long long, int, void*)+0x48>
c00242ff:	b8 06 00 00 00       	mov    eax,0x6
c0024304:	85 f6                	test   esi,esi
c0024306:	74 1c                	je     c0024324 <ATA::write(unsigned long long, int, void*)+0x48>
c0024308:	50                   	push   eax
c0024309:	50                   	push   eax
c002430a:	6a 01                	push   0x1
c002430c:	56                   	push   esi
c002430d:	52                   	push   edx
c002430e:	53                   	push   ebx
c002430f:	51                   	push   ecx
c0024310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024314:	e8 ef fb ff ff       	call   c0023f08 <ATA::access(unsigned long long, int, void*, bool)>
c0024319:	83 c4 20             	add    esp,0x20
c002431c:	85 c0                	test   eax,eax
c002431e:	0f 95 c0             	setne  al
c0024321:	0f b6 c0             	movzx  eax,al
c0024324:	5b                   	pop    ebx
c0024325:	5e                   	pop    esi
c0024326:	5f                   	pop    edi
c0024327:	c3                   	ret    

c0024328 <ATA::detectCHS()>:
c0024328:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002432c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024332:	c1 e0 06             	shl    eax,0x6
c0024335:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002433b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024345:	c7 44 24 04 7f c3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c37f
c002434d:	e9 ad 5b ff ff       	jmp    c0019eff <Krnl::panic(char const*)>

c0024352 <ATA::open(int, int, void*)>:
c0024352:	53                   	push   ebx
c0024353:	83 ec 08             	sub    esp,0x8
c0024356:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002435a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002435e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024362:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024368:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002436e:	c1 e0 06             	shl    eax,0x6
c0024371:	01 d0                	add    eax,edx
c0024373:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002437a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024380:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024387:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024391:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024397:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002439e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00243a5:	75 0c                	jne    c00243b3 <ATA::open(int, int, void*)+0x61>
c00243a7:	83 ec 0c             	sub    esp,0xc
c00243aa:	53                   	push   ebx
c00243ab:	e8 78 ff ff ff       	call   c0024328 <ATA::detectCHS()>
c00243b0:	83 c4 10             	add    esp,0x10
c00243b3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00243b9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00243bf:	c1 e0 06             	shl    eax,0x6
c00243c2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00243c9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00243d3:	d1 e8                	shr    eax,1
c00243d5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00243db:	6a 04                	push   0x4
c00243dd:	6a 0c                	push   0xc
c00243df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e6:	50                   	push   eax
c00243e7:	52                   	push   edx
c00243e8:	e8 01 ec ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243ed:	90                   	nop
c00243ee:	90                   	nop
c00243ef:	6a 00                	push   0x0
c00243f1:	6a 0c                	push   0xc
c00243f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243fa:	50                   	push   eax
c00243fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024401:	e8 e8 eb ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024406:	83 c4 14             	add    esp,0x14
c0024409:	53                   	push   ebx
c002440a:	e8 5b fc fe ff       	call   c001406a <PhysicalDisk::startCache()>
c002440f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024412:	e8 d5 1e ff ff       	call   c00162ec <createPartitionsForDisk(PhysicalDisk*)>
c0024417:	31 c0                	xor    eax,eax
c0024419:	83 c4 18             	add    esp,0x18
c002441c:	5b                   	pop    ebx
c002441d:	c3                   	ret    

c002441e <ATAPI::write(unsigned long long, int, void*)>:
c002441e:	b8 03 00 00 00       	mov    eax,0x3
c0024423:	c3                   	ret    

c0024424 <ATAPI::close(int, int, void*)>:
c0024424:	83 ec 0c             	sub    esp,0xc
c0024427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024431:	85 c0                	test   eax,eax
c0024433:	74 0c                	je     c0024441 <ATAPI::close(int, int, void*)+0x1d>
c0024435:	83 ec 0c             	sub    esp,0xc
c0024438:	8b 10                	mov    edx,DWORD PTR [eax]
c002443a:	50                   	push   eax
c002443b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002443e:	83 c4 10             	add    esp,0x10
c0024441:	31 c0                	xor    eax,eax
c0024443:	83 c4 0c             	add    esp,0xc
c0024446:	c3                   	ret    
c0024447:	90                   	nop

c0024448 <ATAPI::ATAPI()>:
c0024448:	83 ec 0c             	sub    esp,0xc
c002444b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002444f:	83 ec 04             	sub    esp,0x4
c0024452:	68 00 08 00 00       	push   0x800
c0024457:	68 b9 c4 02 c0       	push   0xc002c4b9
c002445c:	50                   	push   eax
c002445d:	e8 a0 fb fe ff       	call   c0014002 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024462:	83 c4 10             	add    esp,0x10
c0024465:	ba d4 c3 02 c0       	mov    edx,0xc002c3d4
c002446a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002446e:	89 10                	mov    DWORD PTR [eax],edx
c0024470:	90                   	nop
c0024471:	83 c4 0c             	add    esp,0xc
c0024474:	c3                   	ret    
c0024475:	90                   	nop

c0024476 <ATAPI::readyForCommand()>:
c0024476:	56                   	push   esi
c0024477:	53                   	push   ebx
c0024478:	31 db                	xor    ebx,ebx
c002447a:	50                   	push   eax
c002447b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002447f:	50                   	push   eax
c0024480:	6a 0c                	push   0xc
c0024482:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024489:	50                   	push   eax
c002448a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024490:	e8 19 ec ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0024495:	83 c4 10             	add    esp,0x10
c0024498:	a8 88                	test   al,0x88
c002449a:	74 23                	je     c00244bf <ATAPI::readyForCommand()+0x49>
c002449c:	43                   	inc    ebx
c002449d:	83 fb 63             	cmp    ebx,0x63
c00244a0:	7e dd                	jle    c002447f <ATAPI::readyForCommand()+0x9>
c00244a2:	51                   	push   ecx
c00244a3:	51                   	push   ecx
c00244a4:	6a 00                	push   0x0
c00244a6:	68 40 42 0f 00       	push   0xf4240
c00244ab:	e8 bb 98 ff ff       	call   c001dd6b <nanoSleep(unsigned long long)>
c00244b0:	83 c4 10             	add    esp,0x10
c00244b3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00244b9:	75 c4                	jne    c002447f <ATAPI::readyForCommand()+0x9>
c00244bb:	31 c0                	xor    eax,eax
c00244bd:	eb 02                	jmp    c00244c1 <ATAPI::readyForCommand()+0x4b>
c00244bf:	b0 01                	mov    al,0x1
c00244c1:	5a                   	pop    edx
c00244c2:	5b                   	pop    ebx
c00244c3:	5e                   	pop    esi
c00244c4:	c3                   	ret    
c00244c5:	90                   	nop

c00244c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00244c6:	55                   	push   ebp
c00244c7:	57                   	push   edi
c00244c8:	56                   	push   esi
c00244c9:	53                   	push   ebx
c00244ca:	83 ec 20             	sub    esp,0x20
c00244cd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00244d1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00244d5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00244d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00244dd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00244e1:	6a 01                	push   0x1
c00244e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ea:	50                   	push   eax
c00244eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244f1:	e8 04 ed ff ff       	call   c00231fa <IDE::enableIRQs(unsigned char, bool)>
c00244f6:	5e                   	pop    esi
c00244f7:	58                   	pop    eax
c00244f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ff:	50                   	push   eax
c0024500:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024506:	e8 bd ea ff ff       	call   c0022fc8 <IDE::prepareInterrupt(unsigned char)>
c002450b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002450e:	e8 63 ff ff ff       	call   c0024476 <ATAPI::readyForCommand()>
c0024513:	83 c4 10             	add    esp,0x10
c0024516:	84 c0                	test   al,al
c0024518:	75 0a                	jne    c0024524 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002451a:	bb 01 00 00 00       	mov    ebx,0x1
c002451f:	e9 57 02 00 00       	jmp    c002477b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024524:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002452a:	c1 e0 04             	shl    eax,0x4
c002452d:	0f b6 c0             	movzx  eax,al
c0024530:	50                   	push   eax
c0024531:	6a 06                	push   0x6
c0024533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002453a:	50                   	push   eax
c002453b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024541:	e8 a8 ea ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024546:	6a 00                	push   0x0
c0024548:	6a 01                	push   0x1
c002454a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024551:	50                   	push   eax
c0024552:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024558:	e8 91 ea ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002455d:	83 c4 20             	add    esp,0x20
c0024560:	0f b6 c3             	movzx  eax,bl
c0024563:	0f b6 df             	movzx  ebx,bh
c0024566:	50                   	push   eax
c0024567:	6a 04                	push   0x4
c0024569:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024570:	50                   	push   eax
c0024571:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024577:	e8 72 ea ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002457c:	53                   	push   ebx
c002457d:	6a 05                	push   0x5
c002457f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024586:	50                   	push   eax
c0024587:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002458d:	e8 5c ea ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024592:	83 c4 20             	add    esp,0x20
c0024595:	68 a0 00 00 00       	push   0xa0
c002459a:	6a 07                	push   0x7
c002459c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245a3:	50                   	push   eax
c00245a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245aa:	e8 3f ea ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245af:	83 c4 0c             	add    esp,0xc
c00245b2:	6a 01                	push   0x1
c00245b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245bb:	50                   	push   eax
c00245bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245c2:	e8 c9 f4 ff ff       	call   c0023a90 <IDE::polling(unsigned char, unsigned int)>
c00245c7:	83 c4 10             	add    esp,0x10
c00245ca:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00245d0:	84 c0                	test   al,al
c00245d2:	74 23                	je     c00245f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00245d4:	0f b6 d8             	movzx  ebx,al
c00245d7:	0f b6 d2             	movzx  edx,dl
c00245da:	53                   	push   ebx
c00245db:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00245e2:	50                   	push   eax
c00245e3:	52                   	push   edx
c00245e4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ea:	e8 f1 f3 ff ff       	call   c00239e0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00245ef:	83 c4 10             	add    esp,0x10
c00245f2:	e9 84 01 00 00       	jmp    c002477b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00245f7:	0f b6 d2             	movzx  edx,dl
c00245fa:	53                   	push   ebx
c00245fb:	53                   	push   ebx
c00245fc:	52                   	push   edx
c00245fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024603:	e8 d4 e9 ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c0024608:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002460c:	b9 06 00 00 00       	mov    ecx,0x6
c0024611:	89 c2                	mov    edx,eax
c0024613:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024616:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002461a:	83 c4 10             	add    esp,0x10
c002461d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024623:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002462a:	85 db                	test   ebx,ebx
c002462c:	0f 84 ec 00 00 00    	je     c002471e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024632:	51                   	push   ecx
c0024633:	51                   	push   ecx
c0024634:	52                   	push   edx
c0024635:	50                   	push   eax
c0024636:	e8 21 eb ff ff       	call   c002315c <IDE::waitInterrupt(unsigned char)>
c002463b:	83 c4 10             	add    esp,0x10
c002463e:	84 c0                	test   al,al
c0024640:	0f 84 d4 fe ff ff    	je     c002451a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024646:	56                   	push   esi
c0024647:	56                   	push   esi
c0024648:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002464f:	50                   	push   eax
c0024650:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024656:	e8 6d e9 ff ff       	call   c0022fc8 <IDE::prepareInterrupt(unsigned char)>
c002465b:	83 c4 0c             	add    esp,0xc
c002465e:	6a 04                	push   0x4
c0024660:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024667:	50                   	push   eax
c0024668:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002466e:	e8 3b ea ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c0024673:	83 c4 0c             	add    esp,0xc
c0024676:	89 c6                	mov    esi,eax
c0024678:	6a 05                	push   0x5
c002467a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024681:	50                   	push   eax
c0024682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024688:	e8 21 ea ff ff       	call   c00230ae <IDE::read(unsigned char, unsigned char)>
c002468d:	89 f1                	mov    ecx,esi
c002468f:	0f b6 c0             	movzx  eax,al
c0024692:	0f b6 f1             	movzx  esi,cl
c0024695:	c1 e0 08             	shl    eax,0x8
c0024698:	09 c6                	or     esi,eax
c002469a:	d1 fe                	sar    esi,1
c002469c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00246a0:	83 c4 10             	add    esp,0x10
c00246a3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00246a8:	74 41                	je     c00246eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00246aa:	31 c9                	xor    ecx,ecx
c00246ac:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246b2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246b9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00246bd:	75 0a                	jne    c00246c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00246bf:	01 c9                	add    ecx,ecx
c00246c1:	01 cd                	add    ebp,ecx
c00246c3:	4b                   	dec    ebx
c00246c4:	e9 54 ff ff ff       	jmp    c002461d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00246c9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00246ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00246d2:	51                   	push   ecx
c00246d3:	51                   	push   ecx
c00246d4:	52                   	push   edx
c00246d5:	50                   	push   eax
c00246d6:	e8 01 e9 ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c00246db:	89 c2                	mov    edx,eax
c00246dd:	89 f0                	mov    eax,esi
c00246df:	66 ef                	out    dx,ax
c00246e1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00246e5:	83 c4 10             	add    esp,0x10
c00246e8:	41                   	inc    ecx
c00246e9:	eb c1                	jmp    c00246ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00246eb:	31 f6                	xor    esi,esi
c00246ed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246f3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00246fa:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00246fe:	75 06                	jne    c0024706 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024700:	01 f6                	add    esi,esi
c0024702:	01 f5                	add    ebp,esi
c0024704:	eb bd                	jmp    c00246c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024706:	51                   	push   ecx
c0024707:	51                   	push   ecx
c0024708:	52                   	push   edx
c0024709:	50                   	push   eax
c002470a:	e8 cd e8 ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c002470f:	89 c2                	mov    edx,eax
c0024711:	66 ed                	in     ax,dx
c0024713:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024718:	83 c4 10             	add    esp,0x10
c002471b:	46                   	inc    esi
c002471c:	eb cf                	jmp    c00246ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002471e:	51                   	push   ecx
c002471f:	51                   	push   ecx
c0024720:	52                   	push   edx
c0024721:	50                   	push   eax
c0024722:	e8 35 ea ff ff       	call   c002315c <IDE::waitInterrupt(unsigned char)>
c0024727:	83 c4 10             	add    esp,0x10
c002472a:	84 c0                	test   al,al
c002472c:	0f 84 e8 fd ff ff    	je     c002451a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024732:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024737:	52                   	push   edx
c0024738:	52                   	push   edx
c0024739:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024740:	50                   	push   eax
c0024741:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024747:	e8 7c e8 ff ff       	call   c0022fc8 <IDE::prepareInterrupt(unsigned char)>
c002474c:	83 c4 10             	add    esp,0x10
c002474f:	50                   	push   eax
c0024750:	50                   	push   eax
c0024751:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024758:	50                   	push   eax
c0024759:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002475f:	e8 78 e8 ff ff       	call   c0022fdc <IDE::getBase(unsigned char)>
c0024764:	8d 50 07             	lea    edx,[eax+0x7]
c0024767:	ec                   	in     al,dx
c0024768:	83 c4 10             	add    esp,0x10
c002476b:	a8 88                	test   al,0x88
c002476d:	74 0a                	je     c0024779 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002476f:	4b                   	dec    ebx
c0024770:	75 dd                	jne    c002474f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024772:	bb 02 00 00 00       	mov    ebx,0x2
c0024777:	eb 02                	jmp    c002477b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024779:	31 db                	xor    ebx,ebx
c002477b:	83 c4 1c             	add    esp,0x1c
c002477e:	89 d8                	mov    eax,ebx
c0024780:	5b                   	pop    ebx
c0024781:	5e                   	pop    esi
c0024782:	5f                   	pop    edi
c0024783:	5d                   	pop    ebp
c0024784:	c3                   	ret    
c0024785:	90                   	nop

c0024786 <ATAPI::diskRemoved()>:
c0024786:	83 ec 18             	sub    esp,0x18
c0024789:	68 c5 c4 02 c0       	push   0xc002c4c5
c002478e:	e8 00 e0 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0024793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024797:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002479e:	83 c4 1c             	add    esp,0x1c
c00247a1:	c3                   	ret    

c00247a2 <ATAPI::eject()>:
c00247a2:	57                   	push   edi
c00247a3:	b9 03 00 00 00       	mov    ecx,0x3
c00247a8:	53                   	push   ebx
c00247a9:	83 ec 14             	sub    esp,0x14
c00247ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00247b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247b4:	fc                   	cld    
c00247b5:	31 c0                	xor    eax,eax
c00247b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00247b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00247be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00247c3:	50                   	push   eax
c00247c4:	50                   	push   eax
c00247c5:	6a 00                	push   0x0
c00247c7:	6a 00                	push   0x0
c00247c9:	6a 00                	push   0x0
c00247cb:	6a 02                	push   0x2
c00247cd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00247d1:	50                   	push   eax
c00247d2:	53                   	push   ebx
c00247d3:	e8 ee fc ff ff       	call   c00244c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00247d8:	83 c4 14             	add    esp,0x14
c00247db:	53                   	push   ebx
c00247dc:	e8 a5 ff ff ff       	call   c0024786 <ATAPI::diskRemoved()>
c00247e1:	83 c4 24             	add    esp,0x24
c00247e4:	31 c0                	xor    eax,eax
c00247e6:	5b                   	pop    ebx
c00247e7:	5f                   	pop    edi
c00247e8:	c3                   	ret    
c00247e9:	90                   	nop

c00247ea <ATAPI::diskInserted()>:
c00247ea:	53                   	push   ebx
c00247eb:	83 ec 14             	sub    esp,0x14
c00247ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00247f2:	68 dc c4 02 c0       	push   0xc002c4dc
c00247f7:	e8 97 df fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c00247fc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024803:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024806:	e8 5f f8 fe ff       	call   c001406a <PhysicalDisk::startCache()>
c002480b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002480f:	83 c4 18             	add    esp,0x18
c0024812:	5b                   	pop    ebx
c0024813:	e9 d4 1a ff ff       	jmp    c00162ec <createPartitionsForDisk(PhysicalDisk*)>

c0024818 <ATAPI::detectMedia()>:
c0024818:	56                   	push   esi
c0024819:	53                   	push   ebx
c002481a:	83 ec 28             	sub    esp,0x28
c002481d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024821:	6a 0c                	push   0xc
c0024823:	6a 00                	push   0x0
c0024825:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024829:	56                   	push   esi
c002482a:	e8 21 bf fd ff       	call   c0000750 <memset>
c002482f:	58                   	pop    eax
c0024830:	5a                   	pop    edx
c0024831:	6a 00                	push   0x0
c0024833:	6a 00                	push   0x0
c0024835:	6a 00                	push   0x0
c0024837:	6a 00                	push   0x0
c0024839:	56                   	push   esi
c002483a:	53                   	push   ebx
c002483b:	e8 86 fc ff ff       	call   c00244c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024840:	83 c4 1c             	add    esp,0x1c
c0024843:	6a 0c                	push   0xc
c0024845:	6a 00                	push   0x0
c0024847:	56                   	push   esi
c0024848:	e8 03 bf fd ff       	call   c0000750 <memset>
c002484d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024852:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024857:	59                   	pop    ecx
c0024858:	58                   	pop    eax
c0024859:	6a 01                	push   0x1
c002485b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002485f:	50                   	push   eax
c0024860:	6a 00                	push   0x0
c0024862:	6a 12                	push   0x12
c0024864:	56                   	push   esi
c0024865:	53                   	push   ebx
c0024866:	e8 5b fc ff ff       	call   c00244c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002486b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002486f:	83 c4 20             	add    esp,0x20
c0024872:	83 e0 7f             	and    eax,0x7f
c0024875:	3c 70                	cmp    al,0x70
c0024877:	74 15                	je     c002488e <ATAPI::detectMedia()+0x76>
c0024879:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024880:	75 0c                	jne    c002488e <ATAPI::detectMedia()+0x76>
c0024882:	83 ec 0c             	sub    esp,0xc
c0024885:	53                   	push   ebx
c0024886:	e8 5f ff ff ff       	call   c00247ea <ATAPI::diskInserted()>
c002488b:	83 c4 10             	add    esp,0x10
c002488e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024892:	83 e0 0f             	and    eax,0xf
c0024895:	3c 02                	cmp    al,0x2
c0024897:	75 1b                	jne    c00248b4 <ATAPI::detectMedia()+0x9c>
c0024899:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002489e:	75 2d                	jne    c00248cd <ATAPI::detectMedia()+0xb5>
c00248a0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248a7:	74 24                	je     c00248cd <ATAPI::detectMedia()+0xb5>
c00248a9:	83 ec 0c             	sub    esp,0xc
c00248ac:	53                   	push   ebx
c00248ad:	e8 d4 fe ff ff       	call   c0024786 <ATAPI::diskRemoved()>
c00248b2:	eb 16                	jmp    c00248ca <ATAPI::detectMedia()+0xb2>
c00248b4:	84 c0                	test   al,al
c00248b6:	75 15                	jne    c00248cd <ATAPI::detectMedia()+0xb5>
c00248b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248bf:	75 0c                	jne    c00248cd <ATAPI::detectMedia()+0xb5>
c00248c1:	83 ec 0c             	sub    esp,0xc
c00248c4:	53                   	push   ebx
c00248c5:	e8 20 ff ff ff       	call   c00247ea <ATAPI::diskInserted()>
c00248ca:	83 c4 10             	add    esp,0x10
c00248cd:	83 c4 24             	add    esp,0x24
c00248d0:	5b                   	pop    ebx
c00248d1:	5e                   	pop    esi
c00248d2:	c3                   	ret    
c00248d3:	90                   	nop

c00248d4 <ATAPI::open(int, int, void*)>:
c00248d4:	53                   	push   ebx
c00248d5:	83 ec 08             	sub    esp,0x8
c00248d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248e4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00248ea:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00248f0:	c1 e0 06             	shl    eax,0x6
c00248f3:	01 d0                	add    eax,edx
c00248f5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00248fc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024902:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024909:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024913:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024919:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024920:	6a 04                	push   0x4
c0024922:	6a 0c                	push   0xc
c0024924:	51                   	push   ecx
c0024925:	52                   	push   edx
c0024926:	e8 c3 e6 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c002492b:	90                   	nop
c002492c:	90                   	nop
c002492d:	6a 00                	push   0x0
c002492f:	6a 0c                	push   0xc
c0024931:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024938:	50                   	push   eax
c0024939:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002493f:	e8 aa e6 ff ff       	call   c0022fee <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024944:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002494b:	83 c4 14             	add    esp,0x14
c002494e:	53                   	push   ebx
c002494f:	e8 c4 fe ff ff       	call   c0024818 <ATAPI::detectMedia()>
c0024954:	31 c0                	xor    eax,eax
c0024956:	83 c4 18             	add    esp,0x18
c0024959:	5b                   	pop    ebx
c002495a:	c3                   	ret    
c002495b:	90                   	nop

c002495c <ATAPI::read(unsigned long long, int, void*)>:
c002495c:	55                   	push   ebp
c002495d:	57                   	push   edi
c002495e:	56                   	push   esi
c002495f:	53                   	push   ebx
c0024960:	83 ec 1c             	sub    esp,0x1c
c0024963:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024967:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002496b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002496f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024976:	74 41                	je     c00249b9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024978:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002497c:	b9 03 00 00 00       	mov    ecx,0x3
c0024981:	fc                   	cld    
c0024982:	31 c0                	xor    eax,eax
c0024984:	86 fb                	xchg   bl,bh
c0024986:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024988:	c1 c3 10             	rol    ebx,0x10
c002498b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024990:	89 e8                	mov    eax,ebp
c0024992:	86 fb                	xchg   bl,bh
c0024994:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024998:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002499c:	50                   	push   eax
c002499d:	50                   	push   eax
c002499e:	55                   	push   ebp
c002499f:	c1 e5 0b             	shl    ebp,0xb
c00249a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00249a6:	6a 00                	push   0x0
c00249a8:	55                   	push   ebp
c00249a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249ad:	50                   	push   eax
c00249ae:	56                   	push   esi
c00249af:	e8 12 fb ff ff       	call   c00244c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249b4:	83 c4 20             	add    esp,0x20
c00249b7:	eb 1a                	jmp    c00249d3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00249b9:	83 ec 0c             	sub    esp,0xc
c00249bc:	56                   	push   esi
c00249bd:	e8 56 fe ff ff       	call   c0024818 <ATAPI::detectMedia()>
c00249c2:	83 c4 10             	add    esp,0x10
c00249c5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249cc:	75 aa                	jne    c0024978 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00249ce:	b8 02 00 00 00       	mov    eax,0x2
c00249d3:	83 c4 1c             	add    esp,0x1c
c00249d6:	5b                   	pop    ebx
c00249d7:	5e                   	pop    esi
c00249d8:	5f                   	pop    edi
c00249d9:	5d                   	pop    ebp
c00249da:	c3                   	ret    
c00249db:	90                   	nop

c00249dc <SATA::close(int, int, void*)>:
c00249dc:	83 ec 0c             	sub    esp,0xc
c00249df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00249e9:	85 c0                	test   eax,eax
c00249eb:	74 0c                	je     c00249f9 <SATA::close(int, int, void*)+0x1d>
c00249ed:	83 ec 0c             	sub    esp,0xc
c00249f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00249f2:	50                   	push   eax
c00249f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00249f6:	83 c4 10             	add    esp,0x10
c00249f9:	31 c0                	xor    eax,eax
c00249fb:	83 c4 0c             	add    esp,0xc
c00249fe:	c3                   	ret    
c00249ff:	90                   	nop

c0024a00 <SATA::powerSaving(PowerSavingLevel)>:
c0024a00:	c3                   	ret    
c0024a01:	90                   	nop

c0024a02 <SATA::open(int, int, void*)>:
c0024a02:	56                   	push   esi
c0024a03:	53                   	push   ebx
c0024a04:	50                   	push   eax
c0024a05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a0d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a17:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a1d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a2b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a35:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024a3b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024a42:	e8 4e af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a47:	89 c6                	mov    esi,eax
c0024a49:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a4f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024a55:	e8 3b af fe ff       	call   c000f995 <Phys::allocatePage()>
c0024a5a:	39 c6                	cmp    esi,eax
c0024a5c:	74 10                	je     c0024a6e <SATA::open(int, int, void*)+0x6c>
c0024a5e:	83 ec 0c             	sub    esp,0xc
c0024a61:	68 04 c4 02 c0       	push   0xc002c404
c0024a66:	e8 94 54 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0024a6b:	83 c4 10             	add    esp,0x10
c0024a6e:	83 ec 0c             	sub    esp,0xc
c0024a71:	6a 02                	push   0x2
c0024a73:	e8 a7 c7 fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0024a78:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024a7e:	6a 03                	push   0x3
c0024a80:	50                   	push   eax
c0024a81:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024a87:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c0024a8d:	e8 e0 cf fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024a92:	83 c4 14             	add    esp,0x14
c0024a95:	53                   	push   ebx
c0024a96:	e8 cf f5 fe ff       	call   c001406a <PhysicalDisk::startCache()>
c0024a9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a9e:	e8 49 18 ff ff       	call   c00162ec <createPartitionsForDisk(PhysicalDisk*)>
c0024aa3:	83 c4 14             	add    esp,0x14
c0024aa6:	31 c0                	xor    eax,eax
c0024aa8:	5b                   	pop    ebx
c0024aa9:	5e                   	pop    esi
c0024aaa:	c3                   	ret    
c0024aab:	90                   	nop

c0024aac <SATA::SATA()>:
c0024aac:	83 ec 0c             	sub    esp,0xc
c0024aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ab3:	83 ec 04             	sub    esp,0x4
c0024ab6:	68 00 02 00 00       	push   0x200
c0024abb:	68 18 c4 02 c0       	push   0xc002c418
c0024ac0:	50                   	push   eax
c0024ac1:	e8 3c f5 fe ff       	call   c0014002 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ac6:	83 c4 10             	add    esp,0x10
c0024ac9:	ba 88 c4 02 c0       	mov    edx,0xc002c488
c0024ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ad2:	89 10                	mov    DWORD PTR [eax],edx
c0024ad4:	90                   	nop
c0024ad5:	83 c4 0c             	add    esp,0xc
c0024ad8:	c3                   	ret    
c0024ad9:	90                   	nop

c0024ada <SATA::access(unsigned long long, int, void*, bool)>:
c0024ada:	55                   	push   ebp
c0024adb:	57                   	push   edi
c0024adc:	56                   	push   esi
c0024add:	53                   	push   ebx
c0024ade:	83 ec 2c             	sub    esp,0x2c
c0024ae1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024ae5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024ae9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024aed:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024af1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024af5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024afa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024afe:	7e 10                	jle    c0024b10 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b00:	83 ec 0c             	sub    esp,0xc
c0024b03:	68 28 c4 02 c0       	push   0xc002c428
c0024b08:	e8 f2 53 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0024b0d:	83 c4 10             	add    esp,0x10
c0024b10:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b16:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024b1c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024b26:	89 d0                	mov    eax,edx
c0024b28:	c1 e0 07             	shl    eax,0x7
c0024b2b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024b2f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b39:	51                   	push   ecx
c0024b3a:	8d 42 02             	lea    eax,[edx+0x2]
c0024b3d:	51                   	push   ecx
c0024b3e:	c1 e0 07             	shl    eax,0x7
c0024b41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024b45:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024b49:	50                   	push   eax
c0024b4a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024b50:	e8 1b f0 ff ff       	call   c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024b55:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024b59:	83 c4 10             	add    esp,0x10
c0024b5c:	b8 01 00 00 00       	mov    eax,0x1
c0024b61:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024b66:	0f 84 cb 01 00 00    	je     c0024d37 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024b6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b74:	c1 e0 09             	shl    eax,0x9
c0024b77:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024b7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024b80:	74 0e                	je     c0024b90 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024b82:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024b88:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024b8c:	89 c1                	mov    ecx,eax
c0024b8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024b90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024b94:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024b9a:	8d 42 02             	lea    eax,[edx+0x2]
c0024b9d:	c1 e0 07             	shl    eax,0x7
c0024ba0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0024ba6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024bac:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024bb2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024bb6:	c1 e1 05             	shl    ecx,0x5
c0024bb9:	01 c8                	add    eax,ecx
c0024bbb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024bbf:	83 e1 01             	and    ecx,0x1
c0024bc2:	89 ce                	mov    esi,ecx
c0024bc4:	8a 08                	mov    cl,BYTE PTR [eax]
c0024bc6:	c1 e6 06             	shl    esi,0x6
c0024bc9:	83 e1 bf             	and    ecx,0xffffffbf
c0024bcc:	09 f1                	or     ecx,esi
c0024bce:	88 08                	mov    BYTE PTR [eax],cl
c0024bd0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024bd2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024bd8:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024bde:	89 08                	mov    DWORD PTR [eax],ecx
c0024be0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024be6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024bec:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024bf2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024bf5:	50                   	push   eax
c0024bf6:	68 90 00 00 00       	push   0x90
c0024bfb:	6a 00                	push   0x0
c0024bfd:	56                   	push   esi
c0024bfe:	e8 4d bb fd ff       	call   c0000750 <memset>
c0024c03:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024c09:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024c0d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024c13:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024c17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024c1b:	83 c4 10             	add    esp,0x10
c0024c1e:	48                   	dec    eax
c0024c1f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024c24:	89 c1                	mov    ecx,eax
c0024c26:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024c2c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c31:	09 c8                	or     eax,ecx
c0024c33:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024c39:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024c3c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024c43:	66 25 00 7f          	and    ax,0x7f00
c0024c47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c4b:	66 0d 27 80          	or     ax,0x8027
c0024c4f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024c54:	66 89 06             	mov    WORD PTR [esi],ax
c0024c57:	19 c0                	sbb    eax,eax
c0024c59:	83 e0 f0             	and    eax,0xfffffff0
c0024c5c:	83 c0 35             	add    eax,0x35
c0024c5f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024c62:	89 e8                	mov    eax,ebp
c0024c64:	c1 e8 10             	shr    eax,0x10
c0024c67:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024c6a:	89 e8                	mov    eax,ebp
c0024c6c:	c1 e8 18             	shr    eax,0x18
c0024c6f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024c72:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024c76:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024c79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024c7d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024c80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024c84:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024c88:	89 d6                	mov    esi,edx
c0024c8a:	31 c0                	xor    eax,eax
c0024c8c:	c1 e6 07             	shl    esi,0x7
c0024c8f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024c93:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024c99:	80 e1 88             	and    cl,0x88
c0024c9c:	74 0a                	je     c0024ca8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024c9e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ca3:	74 0a                	je     c0024caf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024ca5:	40                   	inc    eax
c0024ca6:	eb eb                	jmp    c0024c93 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024ca8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024cad:	75 0a                	jne    c0024cb9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024caf:	83 ec 0c             	sub    esp,0xc
c0024cb2:	68 61 c4 02 c0       	push   0xc002c461
c0024cb7:	eb 56                	jmp    c0024d0f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024cb9:	b8 01 00 00 00       	mov    eax,0x1
c0024cbe:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024cc2:	c1 e2 07             	shl    edx,0x7
c0024cc5:	d3 e0                	shl    eax,cl
c0024cc7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024ccb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024cd1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024cd7:	85 c8                	test   eax,ecx
c0024cd9:	74 20                	je     c0024cfb <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024cdb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024ce1:	0f ba e1 1e          	bt     ecx,0x1e
c0024ce5:	73 ea                	jae    c0024cd1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024ce7:	83 ec 0c             	sub    esp,0xc
c0024cea:	68 6f c4 02 c0       	push   0xc002c46f
c0024cef:	e8 0b 52 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0024cf4:	83 c4 10             	add    esp,0x10
c0024cf7:	31 c0                	xor    eax,eax
c0024cf9:	eb 3c                	jmp    c0024d37 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024cfb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024d01:	0f ba e0 1e          	bt     eax,0x1e
c0024d05:	73 17                	jae    c0024d1e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024d07:	83 ec 0c             	sub    esp,0xc
c0024d0a:	68 6f c4 02 c0       	push   0xc002c46f
c0024d0f:	e8 eb 51 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0024d14:	83 c4 10             	add    esp,0x10
c0024d17:	b8 01 00 00 00       	mov    eax,0x1
c0024d1c:	eb 19                	jmp    c0024d37 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024d1e:	31 c0                	xor    eax,eax
c0024d20:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024d25:	75 10                	jne    c0024d37 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024d27:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024d2d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024d31:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d37:	83 c4 2c             	add    esp,0x2c
c0024d3a:	5b                   	pop    ebx
c0024d3b:	5e                   	pop    esi
c0024d3c:	5f                   	pop    edi
c0024d3d:	5d                   	pop    ebp
c0024d3e:	c3                   	ret    
c0024d3f:	90                   	nop

c0024d40 <SATA::read(unsigned long long, int, void*)>:
c0024d40:	57                   	push   edi
c0024d41:	b8 04 00 00 00       	mov    eax,0x4
c0024d46:	56                   	push   esi
c0024d47:	53                   	push   ebx
c0024d48:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d4c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d50:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d5b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d61:	77 25                	ja     c0024d88 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d63:	b8 06 00 00 00       	mov    eax,0x6
c0024d68:	85 f6                	test   esi,esi
c0024d6a:	74 1c                	je     c0024d88 <SATA::read(unsigned long long, int, void*)+0x48>
c0024d6c:	50                   	push   eax
c0024d6d:	50                   	push   eax
c0024d6e:	6a 00                	push   0x0
c0024d70:	56                   	push   esi
c0024d71:	52                   	push   edx
c0024d72:	53                   	push   ebx
c0024d73:	51                   	push   ecx
c0024d74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d78:	e8 5d fd ff ff       	call   c0024ada <SATA::access(unsigned long long, int, void*, bool)>
c0024d7d:	83 c4 20             	add    esp,0x20
c0024d80:	85 c0                	test   eax,eax
c0024d82:	0f 95 c0             	setne  al
c0024d85:	0f b6 c0             	movzx  eax,al
c0024d88:	5b                   	pop    ebx
c0024d89:	5e                   	pop    esi
c0024d8a:	5f                   	pop    edi
c0024d8b:	c3                   	ret    

c0024d8c <SATA::write(unsigned long long, int, void*)>:
c0024d8c:	55                   	push   ebp
c0024d8d:	b8 04 00 00 00       	mov    eax,0x4
c0024d92:	57                   	push   edi
c0024d93:	56                   	push   esi
c0024d94:	53                   	push   ebx
c0024d95:	83 ec 0c             	sub    esp,0xc
c0024d98:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d9c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024da0:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024da3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024da7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024dab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024db1:	77 3d                	ja     c0024df0 <SATA::write(unsigned long long, int, void*)+0x64>
c0024db3:	b8 06 00 00 00       	mov    eax,0x6
c0024db8:	85 ed                	test   ebp,ebp
c0024dba:	74 34                	je     c0024df0 <SATA::write(unsigned long long, int, void*)+0x64>
c0024dbc:	c1 e3 09             	shl    ebx,0x9
c0024dbf:	01 eb                	add    ebx,ebp
c0024dc1:	89 d6                	mov    esi,edx
c0024dc3:	89 cf                	mov    edi,ecx
c0024dc5:	83 c6 01             	add    esi,0x1
c0024dc8:	83 d7 00             	adc    edi,0x0
c0024dcb:	50                   	push   eax
c0024dcc:	50                   	push   eax
c0024dcd:	6a 01                	push   0x1
c0024dcf:	55                   	push   ebp
c0024dd0:	81 c5 00 02 00 00    	add    ebp,0x200
c0024dd6:	6a 01                	push   0x1
c0024dd8:	51                   	push   ecx
c0024dd9:	52                   	push   edx
c0024dda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dde:	e8 f7 fc ff ff       	call   c0024ada <SATA::access(unsigned long long, int, void*, bool)>
c0024de3:	83 c4 20             	add    esp,0x20
c0024de6:	89 f2                	mov    edx,esi
c0024de8:	89 f9                	mov    ecx,edi
c0024dea:	39 dd                	cmp    ebp,ebx
c0024dec:	75 d3                	jne    c0024dc1 <SATA::write(unsigned long long, int, void*)+0x35>
c0024dee:	31 c0                	xor    eax,eax
c0024df0:	83 c4 0c             	add    esp,0xc
c0024df3:	5b                   	pop    ebx
c0024df4:	5e                   	pop    esi
c0024df5:	5f                   	pop    edi
c0024df6:	5d                   	pop    ebp
c0024df7:	c3                   	ret    

c0024df8 <SATAPI::write(unsigned long long, int, void*)>:
c0024df8:	b8 03 00 00 00       	mov    eax,0x3
c0024dfd:	c3                   	ret    

c0024dfe <SATAPI::close(int, int, void*)>:
c0024dfe:	83 ec 0c             	sub    esp,0xc
c0024e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e0b:	85 c0                	test   eax,eax
c0024e0d:	74 0c                	je     c0024e1b <SATAPI::close(int, int, void*)+0x1d>
c0024e0f:	83 ec 0c             	sub    esp,0xc
c0024e12:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e14:	50                   	push   eax
c0024e15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e18:	83 c4 10             	add    esp,0x10
c0024e1b:	31 c0                	xor    eax,eax
c0024e1d:	83 c4 0c             	add    esp,0xc
c0024e20:	c3                   	ret    
c0024e21:	90                   	nop

c0024e22 <SATAPI::SATAPI()>:
c0024e22:	83 ec 0c             	sub    esp,0xc
c0024e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e29:	83 ec 04             	sub    esp,0x4
c0024e2c:	68 00 08 00 00       	push   0x800
c0024e31:	68 b8 c4 02 c0       	push   0xc002c4b8
c0024e36:	50                   	push   eax
c0024e37:	e8 c6 f1 fe ff       	call   c0014002 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e3c:	83 c4 10             	add    esp,0x10
c0024e3f:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c0024e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e48:	89 10                	mov    DWORD PTR [eax],edx
c0024e4a:	90                   	nop
c0024e4b:	83 c4 0c             	add    esp,0xc
c0024e4e:	c3                   	ret    
c0024e4f:	90                   	nop

c0024e50 <SATAPI::diskRemoved()>:
c0024e50:	83 ec 18             	sub    esp,0x18
c0024e53:	68 c4 c4 02 c0       	push   0xc002c4c4
c0024e58:	e8 36 d9 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0024e5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e61:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024e68:	83 c4 1c             	add    esp,0x1c
c0024e6b:	c3                   	ret    

c0024e6c <SATAPI::diskInserted()>:
c0024e6c:	53                   	push   ebx
c0024e6d:	83 ec 14             	sub    esp,0x14
c0024e70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024e74:	68 db c4 02 c0       	push   0xc002c4db
c0024e79:	e8 15 d9 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0024e7e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024e85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e88:	e8 dd f1 fe ff       	call   c001406a <PhysicalDisk::startCache()>
c0024e8d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024e91:	83 c4 18             	add    esp,0x18
c0024e94:	5b                   	pop    ebx
c0024e95:	e9 52 14 ff ff       	jmp    c00162ec <createPartitionsForDisk(PhysicalDisk*)>

c0024e9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024e9a:	55                   	push   ebp
c0024e9b:	57                   	push   edi
c0024e9c:	56                   	push   esi
c0024e9d:	53                   	push   ebx
c0024e9e:	83 ec 34             	sub    esp,0x34
c0024ea1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024ea5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ea9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024ead:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024eb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024eb5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024ebb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ec1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ec5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024ecb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ecf:	c1 e0 07             	shl    eax,0x7
c0024ed2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024ed6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024eda:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024ee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ee8:	8d 58 02             	lea    ebx,[eax+0x2]
c0024eeb:	c1 e3 07             	shl    ebx,0x7
c0024eee:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024ef2:	53                   	push   ebx
c0024ef3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024ef9:	e8 72 ec ff ff       	call   c0023b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024efe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024f02:	83 c4 10             	add    esp,0x10
c0024f05:	b8 01 00 00 00       	mov    eax,0x1
c0024f0a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024f0f:	0f 84 85 01 00 00    	je     c002509a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f15:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024f1d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f23:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024f29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024f2d:	c1 e1 05             	shl    ecx,0x5
c0024f30:	01 c8                	add    eax,ecx
c0024f32:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024f34:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024f3a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024f40:	89 08                	mov    DWORD PTR [eax],ecx
c0024f42:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024f48:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024f4e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024f54:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024f57:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024f5a:	50                   	push   eax
c0024f5b:	68 90 00 00 00       	push   0x90
c0024f60:	6a 00                	push   0x0
c0024f62:	53                   	push   ebx
c0024f63:	e8 e8 b7 fd ff       	call   c0000750 <memset>
c0024f68:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024f6c:	b9 0c 00 00 00       	mov    ecx,0xc
c0024f71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024f73:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024f79:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024f7d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024f83:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024f87:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024f8b:	48                   	dec    eax
c0024f8c:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024f91:	89 c1                	mov    ecx,eax
c0024f93:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024f99:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024f9e:	09 c8                	or     eax,ecx
c0024fa0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024fa6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024fa9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024fb0:	66 25 00 7f          	and    ax,0x7f00
c0024fb4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024fb8:	66 0d 27 80          	or     ax,0x8027
c0024fbc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024fc0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024fc3:	89 d0                	mov    eax,edx
c0024fc5:	c1 ea 18             	shr    edx,0x18
c0024fc8:	c1 e8 10             	shr    eax,0x10
c0024fcb:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024fce:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024fd1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024fd5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024fd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024fdc:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024fdf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024fe3:	83 c4 10             	add    esp,0x10
c0024fe6:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024fea:	31 c0                	xor    eax,eax
c0024fec:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024ff0:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024ff6:	80 e2 88             	and    dl,0x88
c0024ff9:	74 0a                	je     c0025005 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024ffb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025000:	74 0a                	je     c002500c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025002:	40                   	inc    eax
c0025003:	eb eb                	jmp    c0024ff0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025005:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002500a:	75 0f                	jne    c002501b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c002500c:	83 ec 0c             	sub    esp,0xc
c002500f:	68 61 c4 02 c0       	push   0xc002c461
c0025014:	e8 e6 4e ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025019:	eb 3f                	jmp    c002505a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c002501b:	ba 01 00 00 00       	mov    edx,0x1
c0025020:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025028:	d3 e2                	shl    edx,cl
c002502a:	c1 e0 07             	shl    eax,0x7
c002502d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025033:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025037:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c002503d:	85 ca                	test   edx,ecx
c002503f:	74 23                	je     c0025064 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025041:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025047:	0f ba e1 1e          	bt     ecx,0x1e
c002504b:	73 ea                	jae    c0025037 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c002504d:	83 ec 0c             	sub    esp,0xc
c0025050:	68 f3 c4 02 c0       	push   0xc002c4f3
c0025055:	e8 39 d7 fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c002505a:	83 c4 10             	add    esp,0x10
c002505d:	b8 01 00 00 00       	mov    eax,0x1
c0025062:	eb 36                	jmp    c002509a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025064:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002506a:	0f ba e0 1e          	bt     eax,0x1e
c002506e:	73 0a                	jae    c002507a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025070:	83 ec 0c             	sub    esp,0xc
c0025073:	68 06 c5 02 c0       	push   0xc002c506
c0025078:	eb db                	jmp    c0025055 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c002507a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002507f:	74 17                	je     c0025098 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025081:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025086:	74 10                	je     c0025098 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025088:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c002508e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025092:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025098:	31 c0                	xor    eax,eax
c002509a:	83 c4 2c             	add    esp,0x2c
c002509d:	5b                   	pop    ebx
c002509e:	5e                   	pop    esi
c002509f:	5f                   	pop    edi
c00250a0:	5d                   	pop    ebp
c00250a1:	c3                   	ret    

c00250a2 <SATAPI::eject()>:
c00250a2:	57                   	push   edi
c00250a3:	b9 03 00 00 00       	mov    ecx,0x3
c00250a8:	53                   	push   ebx
c00250a9:	83 ec 14             	sub    esp,0x14
c00250ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00250b0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250b4:	fc                   	cld    
c00250b5:	31 c0                	xor    eax,eax
c00250b7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250b9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00250be:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00250c3:	50                   	push   eax
c00250c4:	6a 00                	push   0x0
c00250c6:	6a 00                	push   0x0
c00250c8:	6a 00                	push   0x0
c00250ca:	6a 00                	push   0x0
c00250cc:	6a 02                	push   0x2
c00250ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00250d2:	50                   	push   eax
c00250d3:	53                   	push   ebx
c00250d4:	e8 c1 fd ff ff       	call   c0024e9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00250d9:	83 c4 14             	add    esp,0x14
c00250dc:	53                   	push   ebx
c00250dd:	e8 6e fd ff ff       	call   c0024e50 <SATAPI::diskRemoved()>
c00250e2:	83 c4 24             	add    esp,0x24
c00250e5:	31 c0                	xor    eax,eax
c00250e7:	5b                   	pop    ebx
c00250e8:	5f                   	pop    edi
c00250e9:	c3                   	ret    

c00250ea <SATAPI::detectMedia()>:
c00250ea:	56                   	push   esi
c00250eb:	53                   	push   ebx
c00250ec:	83 ec 28             	sub    esp,0x28
c00250ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00250f3:	6a 0c                	push   0xc
c00250f5:	6a 00                	push   0x0
c00250f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00250fb:	56                   	push   esi
c00250fc:	e8 4f b6 fd ff       	call   c0000750 <memset>
c0025101:	83 c4 0c             	add    esp,0xc
c0025104:	6a 00                	push   0x0
c0025106:	6a 00                	push   0x0
c0025108:	6a 00                	push   0x0
c002510a:	6a 00                	push   0x0
c002510c:	6a 00                	push   0x0
c002510e:	56                   	push   esi
c002510f:	53                   	push   ebx
c0025110:	e8 85 fd ff ff       	call   c0024e9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025115:	83 c4 1c             	add    esp,0x1c
c0025118:	6a 0c                	push   0xc
c002511a:	6a 00                	push   0x0
c002511c:	56                   	push   esi
c002511d:	e8 2e b6 fd ff       	call   c0000750 <memset>
c0025122:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025127:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002512c:	83 c4 0c             	add    esp,0xc
c002512f:	6a 01                	push   0x1
c0025131:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025135:	50                   	push   eax
c0025136:	6a 00                	push   0x0
c0025138:	6a 00                	push   0x0
c002513a:	6a 12                	push   0x12
c002513c:	56                   	push   esi
c002513d:	53                   	push   ebx
c002513e:	e8 57 fd ff ff       	call   c0024e9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025143:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025147:	83 c4 20             	add    esp,0x20
c002514a:	83 e0 7f             	and    eax,0x7f
c002514d:	3c 70                	cmp    al,0x70
c002514f:	74 15                	je     c0025166 <SATAPI::detectMedia()+0x7c>
c0025151:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025158:	75 0c                	jne    c0025166 <SATAPI::detectMedia()+0x7c>
c002515a:	83 ec 0c             	sub    esp,0xc
c002515d:	53                   	push   ebx
c002515e:	e8 09 fd ff ff       	call   c0024e6c <SATAPI::diskInserted()>
c0025163:	83 c4 10             	add    esp,0x10
c0025166:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002516a:	83 e0 0f             	and    eax,0xf
c002516d:	3c 02                	cmp    al,0x2
c002516f:	75 1b                	jne    c002518c <SATAPI::detectMedia()+0xa2>
c0025171:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025176:	75 2d                	jne    c00251a5 <SATAPI::detectMedia()+0xbb>
c0025178:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002517f:	74 24                	je     c00251a5 <SATAPI::detectMedia()+0xbb>
c0025181:	83 ec 0c             	sub    esp,0xc
c0025184:	53                   	push   ebx
c0025185:	e8 c6 fc ff ff       	call   c0024e50 <SATAPI::diskRemoved()>
c002518a:	eb 16                	jmp    c00251a2 <SATAPI::detectMedia()+0xb8>
c002518c:	84 c0                	test   al,al
c002518e:	75 15                	jne    c00251a5 <SATAPI::detectMedia()+0xbb>
c0025190:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025197:	75 0c                	jne    c00251a5 <SATAPI::detectMedia()+0xbb>
c0025199:	83 ec 0c             	sub    esp,0xc
c002519c:	53                   	push   ebx
c002519d:	e8 ca fc ff ff       	call   c0024e6c <SATAPI::diskInserted()>
c00251a2:	83 c4 10             	add    esp,0x10
c00251a5:	83 c4 24             	add    esp,0x24
c00251a8:	5b                   	pop    ebx
c00251a9:	5e                   	pop    esi
c00251aa:	c3                   	ret    
c00251ab:	90                   	nop

c00251ac <SATAPI::open(int, int, void*)>:
c00251ac:	56                   	push   esi
c00251ad:	53                   	push   ebx
c00251ae:	50                   	push   eax
c00251af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00251b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00251b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00251c1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00251c7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251d5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00251df:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00251e5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00251ec:	e8 a4 a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c00251f1:	89 c6                	mov    esi,eax
c00251f3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00251f9:	81 c6 00 10 00 00    	add    esi,0x1000
c00251ff:	e8 91 a7 fe ff       	call   c000f995 <Phys::allocatePage()>
c0025204:	39 c6                	cmp    esi,eax
c0025206:	74 10                	je     c0025218 <SATAPI::open(int, int, void*)+0x6c>
c0025208:	83 ec 0c             	sub    esp,0xc
c002520b:	68 1b c5 02 c0       	push   0xc002c51b
c0025210:	e8 ea 4c ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025215:	83 c4 10             	add    esp,0x10
c0025218:	83 ec 0c             	sub    esp,0xc
c002521b:	6a 02                	push   0x2
c002521d:	e8 fd bf fe ff       	call   c001121f <Virt::allocateKernelVirtualPages(int)>
c0025222:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025228:	6a 03                	push   0x3
c002522a:	50                   	push   eax
c002522b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025231:	ff 35 70 dc 02 c0    	push   DWORD PTR ds:0xc002dc70
c0025237:	e8 36 c8 fe ff       	call   c0011a72 <VAS::mapPage(unsigned long, unsigned long, int)>
c002523c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025243:	83 c4 14             	add    esp,0x14
c0025246:	53                   	push   ebx
c0025247:	e8 9e fe ff ff       	call   c00250ea <SATAPI::detectMedia()>
c002524c:	83 c4 14             	add    esp,0x14
c002524f:	31 c0                	xor    eax,eax
c0025251:	5b                   	pop    ebx
c0025252:	5e                   	pop    esi
c0025253:	c3                   	ret    

c0025254 <SATAPI::read(unsigned long long, int, void*)>:
c0025254:	55                   	push   ebp
c0025255:	57                   	push   edi
c0025256:	56                   	push   esi
c0025257:	53                   	push   ebx
c0025258:	83 ec 1c             	sub    esp,0x1c
c002525b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002525f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025263:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025267:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002526e:	74 19                	je     c0025289 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025270:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025275:	7e 2e                	jle    c00252a5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025277:	83 ec 0c             	sub    esp,0xc
c002527a:	68 31 c5 02 c0       	push   0xc002c531
c002527f:	e8 7b 4c ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025284:	83 c4 10             	add    esp,0x10
c0025287:	eb 1c                	jmp    c00252a5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025289:	83 ec 0c             	sub    esp,0xc
c002528c:	55                   	push   ebp
c002528d:	e8 58 fe ff ff       	call   c00250ea <SATAPI::detectMedia()>
c0025292:	83 c4 10             	add    esp,0x10
c0025295:	b8 02 00 00 00       	mov    eax,0x2
c002529a:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00252a1:	75 cd                	jne    c0025270 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00252a3:	eb 49                	jmp    c00252ee <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00252a5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252a9:	b9 03 00 00 00       	mov    ecx,0x3
c00252ae:	fc                   	cld    
c00252af:	31 c0                	xor    eax,eax
c00252b1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252b3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00252b8:	89 d8                	mov    eax,ebx
c00252ba:	86 e0                	xchg   al,ah
c00252bc:	c1 c0 10             	rol    eax,0x10
c00252bf:	86 e0                	xchg   al,ah
c00252c1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00252c5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00252c9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00252cd:	50                   	push   eax
c00252ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00252d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00252d6:	56                   	push   esi
c00252d7:	53                   	push   ebx
c00252d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00252dc:	c1 e0 0b             	shl    eax,0xb
c00252df:	50                   	push   eax
c00252e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252e4:	50                   	push   eax
c00252e5:	55                   	push   ebp
c00252e6:	e8 af fb ff ff       	call   c0024e9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00252eb:	83 c4 20             	add    esp,0x20
c00252ee:	83 c4 1c             	add    esp,0x1c
c00252f1:	5b                   	pop    ebx
c00252f2:	5e                   	pop    esi
c00252f3:	5f                   	pop    edi
c00252f4:	5d                   	pop    ebp
c00252f5:	c3                   	ret    

c00252f6 <AVX::open(int, int, void*)>:
c00252f6:	83 ec 0c             	sub    esp,0xc
c00252f9:	e8 3a 11 00 00       	call   c0026438 <avxInit>
c00252fe:	b8 00 00 00 00       	mov    eax,0x0
c0025303:	83 c4 0c             	add    esp,0xc
c0025306:	c3                   	ret    
c0025307:	90                   	nop

c0025308 <AVX::close(int, int, void*)>:
c0025308:	83 ec 0c             	sub    esp,0xc
c002530b:	e8 29 11 00 00       	call   c0026439 <avxClose>
c0025310:	b8 00 00 00 00       	mov    eax,0x0
c0025315:	83 c4 0c             	add    esp,0xc
c0025318:	c3                   	ret    
c0025319:	90                   	nop

c002531a <AVX::available()>:
c002531a:	83 ec 0c             	sub    esp,0xc
c002531d:	e8 0e 11 00 00       	call   c0026430 <avxDetect>
c0025322:	85 c0                	test   eax,eax
c0025324:	0f 95 c0             	setne  al
c0025327:	83 c4 0c             	add    esp,0xc
c002532a:	c3                   	ret    
c002532b:	90                   	nop

c002532c <AVX::save(void*)>:
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025333:	83 ec 0c             	sub    esp,0xc
c0025336:	50                   	push   eax
c0025337:	e8 fa 10 00 00       	call   c0026436 <avxSave>
c002533c:	83 c4 10             	add    esp,0x10
c002533f:	90                   	nop
c0025340:	83 c4 0c             	add    esp,0xc
c0025343:	c3                   	ret    

c0025344 <AVX::load(void*)>:
c0025344:	83 ec 0c             	sub    esp,0xc
c0025347:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002534b:	83 ec 0c             	sub    esp,0xc
c002534e:	50                   	push   eax
c002534f:	e8 e3 10 00 00       	call   c0026437 <avxLoad>
c0025354:	83 c4 10             	add    esp,0x10
c0025357:	90                   	nop
c0025358:	83 c4 0c             	add    esp,0xc
c002535b:	c3                   	ret    

c002535c <AVX::AVX()>:
c002535c:	83 ec 0c             	sub    esp,0xc
c002535f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025363:	83 ec 08             	sub    esp,0x8
c0025366:	68 94 c5 02 c0       	push   0xc002c594
c002536b:	50                   	push   eax
c002536c:	e8 6f ed fe ff       	call   c00140e0 <FPU::FPU(char const*)>
c0025371:	83 c4 10             	add    esp,0x10
c0025374:	ba a4 c5 02 c0       	mov    edx,0xc002c5a4
c0025379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537d:	89 10                	mov    DWORD PTR [eax],edx
c002537f:	90                   	nop
c0025380:	83 c4 0c             	add    esp,0xc
c0025383:	c3                   	ret    

c0025384 <MMX::available()>:
c0025384:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0025389:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002538f:	83 e0 20             	and    eax,0x20
c0025392:	84 c0                	test   al,al
c0025394:	0f 95 c0             	setne  al
c0025397:	c3                   	ret    

c0025398 <MMX::open(int, int, void*)>:
c0025398:	83 ec 0c             	sub    esp,0xc
c002539b:	e8 22 11 00 00       	call   c00264c2 <x87Init>
c00253a0:	b8 00 00 00 00       	mov    eax,0x0
c00253a5:	83 c4 0c             	add    esp,0xc
c00253a8:	c3                   	ret    
c00253a9:	90                   	nop

c00253aa <MMX::close(int, int, void*)>:
c00253aa:	83 ec 0c             	sub    esp,0xc
c00253ad:	e8 2a 11 00 00       	call   c00264dc <x87Close>
c00253b2:	b8 00 00 00 00       	mov    eax,0x0
c00253b7:	83 c4 0c             	add    esp,0xc
c00253ba:	c3                   	ret    
c00253bb:	90                   	nop

c00253bc <MMX::save(void*)>:
c00253bc:	83 ec 0c             	sub    esp,0xc
c00253bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253c3:	83 ec 0c             	sub    esp,0xc
c00253c6:	50                   	push   eax
c00253c7:	e8 e5 10 00 00       	call   c00264b1 <x87Save>
c00253cc:	83 c4 10             	add    esp,0x10
c00253cf:	90                   	nop
c00253d0:	83 c4 0c             	add    esp,0xc
c00253d3:	c3                   	ret    

c00253d4 <MMX::load(void*)>:
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253db:	83 ec 0c             	sub    esp,0xc
c00253de:	50                   	push   eax
c00253df:	e8 d6 10 00 00       	call   c00264ba <x87Load>
c00253e4:	83 c4 10             	add    esp,0x10
c00253e7:	90                   	nop
c00253e8:	83 c4 0c             	add    esp,0xc
c00253eb:	c3                   	ret    

c00253ec <MMX::MMX()>:
c00253ec:	83 ec 0c             	sub    esp,0xc
c00253ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f3:	83 ec 08             	sub    esp,0x8
c00253f6:	68 d4 c5 02 c0       	push   0xc002c5d4
c00253fb:	50                   	push   eax
c00253fc:	e8 df ec fe ff       	call   c00140e0 <FPU::FPU(char const*)>
c0025401:	83 c4 10             	add    esp,0x10
c0025404:	ba e4 c5 02 c0       	mov    edx,0xc002c5e4
c0025409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540d:	89 10                	mov    DWORD PTR [eax],edx
c002540f:	90                   	nop
c0025410:	83 c4 0c             	add    esp,0xc
c0025413:	c3                   	ret    

c0025414 <SSE::open(int, int, void*)>:
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	e8 58 10 00 00       	call   c0026474 <sseInit>
c002541c:	b8 00 00 00 00       	mov    eax,0x0
c0025421:	83 c4 0c             	add    esp,0xc
c0025424:	c3                   	ret    
c0025425:	90                   	nop

c0025426 <SSE::close(int, int, void*)>:
c0025426:	83 ec 0c             	sub    esp,0xc
c0025429:	e8 56 10 00 00       	call   c0026484 <sseClose>
c002542e:	b8 00 00 00 00       	mov    eax,0x0
c0025433:	83 c4 0c             	add    esp,0xc
c0025436:	c3                   	ret    
c0025437:	90                   	nop

c0025438 <SSE::available()>:
c0025438:	83 ec 1c             	sub    esp,0x1c
c002543b:	e8 10 10 00 00       	call   c0026450 <absolutelyNoChanceInHell>
c0025440:	85 c0                	test   eax,eax
c0025442:	0f 95 c0             	setne  al
c0025445:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025449:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002544d:	83 c4 1c             	add    esp,0x1c
c0025450:	c3                   	ret    
c0025451:	90                   	nop

c0025452 <SSE::save(void*)>:
c0025452:	83 ec 0c             	sub    esp,0xc
c0025455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025459:	83 ec 0c             	sub    esp,0xc
c002545c:	50                   	push   eax
c002545d:	e8 06 10 00 00       	call   c0026468 <sseSave>
c0025462:	83 c4 10             	add    esp,0x10
c0025465:	90                   	nop
c0025466:	83 c4 0c             	add    esp,0xc
c0025469:	c3                   	ret    

c002546a <SSE::load(void*)>:
c002546a:	83 ec 0c             	sub    esp,0xc
c002546d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025471:	83 ec 0c             	sub    esp,0xc
c0025474:	50                   	push   eax
c0025475:	e8 f4 0f 00 00       	call   c002646e <sseLoad>
c002547a:	83 c4 10             	add    esp,0x10
c002547d:	90                   	nop
c002547e:	83 c4 0c             	add    esp,0xc
c0025481:	c3                   	ret    

c0025482 <SSE::SSE()>:
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025489:	83 ec 08             	sub    esp,0x8
c002548c:	68 14 c6 02 c0       	push   0xc002c614
c0025491:	50                   	push   eax
c0025492:	e8 49 ec fe ff       	call   c00140e0 <FPU::FPU(char const*)>
c0025497:	83 c4 10             	add    esp,0x10
c002549a:	ba 24 c6 02 c0       	mov    edx,0xc002c624
c002549f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a3:	89 10                	mov    DWORD PTR [eax],edx
c00254a5:	90                   	nop
c00254a6:	83 c4 0c             	add    esp,0xc
c00254a9:	c3                   	ret    

c00254aa <x87::open(int, int, void*)>:
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	e8 10 10 00 00       	call   c00264c2 <x87Init>
c00254b2:	b8 00 00 00 00       	mov    eax,0x0
c00254b7:	83 c4 0c             	add    esp,0xc
c00254ba:	c3                   	ret    
c00254bb:	90                   	nop

c00254bc <x87::close(int, int, void*)>:
c00254bc:	83 ec 0c             	sub    esp,0xc
c00254bf:	e8 18 10 00 00       	call   c00264dc <x87Close>
c00254c4:	b8 00 00 00 00       	mov    eax,0x0
c00254c9:	83 c4 0c             	add    esp,0xc
c00254cc:	c3                   	ret    
c00254cd:	90                   	nop

c00254ce <x87::available()>:
c00254ce:	83 ec 0c             	sub    esp,0xc
c00254d1:	e8 c0 0f 00 00       	call   c0026496 <x87Detect>
c00254d6:	85 c0                	test   eax,eax
c00254d8:	0f 95 c0             	setne  al
c00254db:	83 c4 0c             	add    esp,0xc
c00254de:	c3                   	ret    
c00254df:	90                   	nop

c00254e0 <x87::save(void*)>:
c00254e0:	83 ec 0c             	sub    esp,0xc
c00254e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254e7:	83 ec 0c             	sub    esp,0xc
c00254ea:	50                   	push   eax
c00254eb:	e8 c1 0f 00 00       	call   c00264b1 <x87Save>
c00254f0:	83 c4 10             	add    esp,0x10
c00254f3:	90                   	nop
c00254f4:	83 c4 0c             	add    esp,0xc
c00254f7:	c3                   	ret    

c00254f8 <x87::load(void*)>:
c00254f8:	83 ec 0c             	sub    esp,0xc
c00254fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254ff:	83 ec 0c             	sub    esp,0xc
c0025502:	50                   	push   eax
c0025503:	e8 b2 0f 00 00       	call   c00264ba <x87Load>
c0025508:	83 c4 10             	add    esp,0x10
c002550b:	90                   	nop
c002550c:	83 c4 0c             	add    esp,0xc
c002550f:	c3                   	ret    

c0025510 <x87::x87()>:
c0025510:	83 ec 0c             	sub    esp,0xc
c0025513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025517:	83 ec 08             	sub    esp,0x8
c002551a:	68 54 c6 02 c0       	push   0xc002c654
c002551f:	50                   	push   eax
c0025520:	e8 bb eb fe ff       	call   c00140e0 <FPU::FPU(char const*)>
c0025525:	83 c4 10             	add    esp,0x10
c0025528:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	89 10                	mov    DWORD PTR [eax],edx
c0025533:	90                   	nop
c0025534:	83 c4 0c             	add    esp,0xc
c0025537:	c3                   	ret    

c0025538 <APIC::disable()>:
c0025538:	90                   	nop
c0025539:	c3                   	ret    

c002553a <APIC::close(int, int, void*)>:
c002553a:	55                   	push   ebp
c002553b:	89 e5                	mov    ebp,esp
c002553d:	83 ec 08             	sub    esp,0x8
c0025540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025543:	8b 00                	mov    eax,DWORD PTR [eax]
c0025545:	83 c0 3c             	add    eax,0x3c
c0025548:	8b 00                	mov    eax,DWORD PTR [eax]
c002554a:	83 ec 0c             	sub    esp,0xc
c002554d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025550:	ff d0                	call   eax
c0025552:	83 c4 10             	add    esp,0x10
c0025555:	b8 00 00 00 00       	mov    eax,0x0
c002555a:	c9                   	leave  
c002555b:	c3                   	ret    

c002555c <IOAPIC::close(int, int, void*)>:
c002555c:	b8 00 00 00 00       	mov    eax,0x0
c0025561:	c3                   	ret    

c0025562 <APIC::io_wait()>:
c0025562:	eb 00                	jmp    c0025564 <APIC::io_wait()+0x2>
c0025564:	eb 00                	jmp    c0025566 <APIC::io_wait()+0x4>
c0025566:	90                   	nop
c0025567:	c3                   	ret    

c0025568 <APIC::getBase()>:
c0025568:	55                   	push   ebp
c0025569:	89 e5                	mov    ebp,esp
c002556b:	83 ec 18             	sub    esp,0x18
c002556e:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0025573:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025579:	83 e0 08             	and    eax,0x8
c002557c:	84 c0                	test   al,al
c002557e:	75 07                	jne    c0025587 <APIC::getBase()+0x1f>
c0025580:	b8 00 00 00 00       	mov    eax,0x0
c0025585:	eb 21                	jmp    c00255a8 <APIC::getBase()+0x40>
c0025587:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c002558c:	83 ec 08             	sub    esp,0x8
c002558f:	6a 1b                	push   0x1b
c0025591:	50                   	push   eax
c0025592:	e8 a9 95 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025597:	83 c4 10             	add    esp,0x10
c002559a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002559d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00255a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00255a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00255a8:	c9                   	leave  
c00255a9:	c3                   	ret    

c00255aa <APIC::eoi(unsigned char)>:
c00255aa:	55                   	push   ebp
c00255ab:	89 e5                	mov    ebp,esp
c00255ad:	83 ec 28             	sub    esp,0x28
c00255b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255b3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00255b6:	83 ec 0c             	sub    esp,0xc
c00255b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255bc:	e8 a7 ff ff ff       	call   c0025568 <APIC::getBase()>
c00255c1:	83 c4 10             	add    esp,0x10
c00255c4:	05 b0 00 00 00       	add    eax,0xb0
c00255c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00255cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00255cf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00255d5:	90                   	nop
c00255d6:	c9                   	leave  
c00255d7:	c3                   	ret    

c00255d8 <APIC::open(int, int, void*)>:
c00255d8:	55                   	push   ebp
c00255d9:	89 e5                	mov    ebp,esp
c00255db:	57                   	push   edi
c00255dc:	56                   	push   esi
c00255dd:	53                   	push   ebx
c00255de:	83 ec 2c             	sub    esp,0x2c
c00255e1:	83 ec 0c             	sub    esp,0xc
c00255e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255e7:	e8 7c ff ff ff       	call   c0025568 <APIC::getBase()>
c00255ec:	83 c4 10             	add    esp,0x10
c00255ef:	89 c2                	mov    edx,eax
c00255f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00255fa:	0f b6 f8             	movzx  edi,al
c00255fd:	89 d0                	mov    eax,edx
c00255ff:	ba 00 00 00 00       	mov    edx,0x0
c0025604:	89 c1                	mov    ecx,eax
c0025606:	80 e5 ff             	and    ch,0xff
c0025609:	89 cb                	mov    ebx,ecx
c002560b:	0f b6 f2             	movzx  esi,dl
c002560e:	89 d8                	mov    eax,ebx
c0025610:	89 f2                	mov    edx,esi
c0025612:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025615:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025618:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002561c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025620:	83 e0 00             	and    eax,0x0
c0025623:	09 d0                	or     eax,edx
c0025625:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002562c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025632:	8d 50 01             	lea    edx,[eax+0x1]
c0025635:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025638:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002563e:	0f b6 d0             	movzx  edx,al
c0025641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025644:	83 c2 08             	add    edx,0x8
c0025647:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002564b:	0f b6 c9             	movzx  ecx,cl
c002564e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025654:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002565e:	e8 05 ff ff ff       	call   c0025568 <APIC::getBase()>
c0025663:	83 c4 10             	add    esp,0x10
c0025666:	05 f0 00 00 00       	add    eax,0xf0
c002566b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002566e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025671:	8b 00                	mov    eax,DWORD PTR [eax]
c0025673:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025676:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002567d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025684:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025687:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002568a:	89 10                	mov    DWORD PTR [eax],edx
c002568c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025693:	a1 d0 03 03 c0       	mov    eax,ds:0xc00303d0
c0025698:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002569b:	7d 7c                	jge    c0025719 <APIC::open(int, int, void*)+0x141>
c002569d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00256a0:	8b 04 85 e0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc20]
c00256a7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00256aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00256ad:	8b 04 85 e0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc20]
c00256b4:	c1 e8 08             	shr    eax,0x8
c00256b7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00256bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00256be:	8b 04 85 e0 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfc20]
c00256c5:	c1 e8 18             	shr    eax,0x18
c00256c8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00256cb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00256cf:	75 40                	jne    c0025711 <APIC::open(int, int, void*)+0x139>
c00256d1:	83 ec 0c             	sub    esp,0xc
c00256d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256d7:	e8 8c fe ff ff       	call   c0025568 <APIC::getBase()>
c00256dc:	83 c4 10             	add    esp,0x10
c00256df:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00256e3:	75 07                	jne    c00256ec <APIC::open(int, int, void*)+0x114>
c00256e5:	ba 60 03 00 00       	mov    edx,0x360
c00256ea:	eb 05                	jmp    c00256f1 <APIC::open(int, int, void*)+0x119>
c00256ec:	ba 50 03 00 00       	mov    edx,0x350
c00256f1:	01 d0                	add    eax,edx
c00256f3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00256f6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00256f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00256fb:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00256fe:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025705:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025709:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002570c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002570f:	89 10                	mov    DWORD PTR [eax],edx
c0025711:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025714:	e9 7a ff ff ff       	jmp    c0025693 <APIC::open(int, int, void*)+0xbb>
c0025719:	b8 00 00 00 00       	mov    eax,0x0
c002571e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025721:	5b                   	pop    ebx
c0025722:	5e                   	pop    esi
c0025723:	5f                   	pop    edi
c0025724:	5d                   	pop    ebp
c0025725:	c3                   	ret    

c0025726 <IOAPIC::IOAPIC()>:
c0025726:	83 ec 0c             	sub    esp,0xc
c0025729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572d:	83 ec 08             	sub    esp,0x8
c0025730:	68 94 c6 02 c0       	push   0xc002c694
c0025735:	50                   	push   eax
c0025736:	e8 95 e6 fe ff       	call   c0013dd0 <Device::Device(char const*)>
c002573b:	83 c4 10             	add    esp,0x10
c002573e:	ba bc c7 02 c0       	mov    edx,0xc002c7bc
c0025743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025747:	89 10                	mov    DWORD PTR [eax],edx
c0025749:	90                   	nop
c002574a:	83 c4 0c             	add    esp,0xc
c002574d:	c3                   	ret    

c002574e <APIC::APIC()>:
c002574e:	53                   	push   ebx
c002574f:	83 ec 18             	sub    esp,0x18
c0025752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025756:	83 ec 08             	sub    esp,0x8
c0025759:	68 9c c6 02 c0       	push   0xc002c69c
c002575e:	50                   	push   eax
c002575f:	e8 d6 ed fe ff       	call   c001453a <InterruptController::InterruptController(char const*)>
c0025764:	83 c4 10             	add    esp,0x10
c0025767:	ba 74 c7 02 c0       	mov    edx,0xc002c774
c002576c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025770:	89 10                	mov    DWORD PTR [eax],edx
c0025772:	a0 a0 1e 03 c0       	mov    al,ds:0xc0031ea0
c0025777:	83 f0 01             	xor    eax,0x1
c002577a:	84 c0                	test   al,al
c002577c:	0f 84 a1 00 00 00    	je     c0025823 <APIC::APIC()+0xd5>
c0025782:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025787:	a0 80 04 03 c0       	mov    al,ds:0xc0030480
c002578c:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025790:	0f 83 86 00 00 00    	jae    c002581c <APIC::APIC()+0xce>
c0025796:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002579e:	83 ec 0c             	sub    esp,0xc
c00257a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00257a5:	e8 ef 9d fe ff       	call   c000f599 <malloc>
c00257aa:	83 c4 10             	add    esp,0x10
c00257ad:	89 c3                	mov    ebx,eax
c00257af:	83 ec 0c             	sub    esp,0xc
c00257b2:	53                   	push   ebx
c00257b3:	e8 6e ff ff ff       	call   c0025726 <IOAPIC::IOAPIC()>
c00257b8:	83 c4 10             	add    esp,0x10
c00257bb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00257bf:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00257c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00257c8:	89 14 85 80 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce180],edx
c00257cf:	a1 60 1e 03 c0       	mov    eax,ds:0xc0031e60
c00257d4:	40                   	inc    eax
c00257d5:	a3 60 1e 03 c0       	mov    ds:0xc0031e60,eax
c00257da:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c00257df:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00257e5:	83 ec 08             	sub    esp,0x8
c00257e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00257ec:	50                   	push   eax
c00257ed:	e8 da e3 fe ff       	call   c0013bcc <Device::addChild(Device*)>
c00257f2:	83 c4 10             	add    esp,0x10
c00257f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00257f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00257fb:	83 c0 08             	add    eax,0x8
c00257fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0025800:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025805:	6a 00                	push   0x0
c0025807:	6a 00                	push   0x0
c0025809:	52                   	push   edx
c002580a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002580e:	ff d0                	call   eax
c0025810:	83 c4 10             	add    esp,0x10
c0025813:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025817:	e9 6b ff ff ff       	jmp    c0025787 <APIC::APIC()+0x39>
c002581c:	c6 05 a0 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031ea0,0x1
c0025823:	90                   	nop
c0025824:	83 c4 18             	add    esp,0x18
c0025827:	5b                   	pop    ebx
c0025828:	c3                   	ret    
c0025829:	90                   	nop

c002582a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002582a:	55                   	push   ebp
c002582b:	89 e5                	mov    ebp,esp
c002582d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025830:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025836:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025839:	72 1d                	jb     c0025858 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002583b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002583e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025847:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002584d:	01 d0                	add    eax,edx
c002584f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025852:	73 04                	jae    c0025858 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025854:	b0 01                	mov    al,0x1
c0025856:	eb 02                	jmp    c002585a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025858:	b0 00                	mov    al,0x0
c002585a:	5d                   	pop    ebp
c002585b:	c3                   	ret    

c002585c <IOAPIC::read(int)>:
c002585c:	55                   	push   ebp
c002585d:	89 e5                	mov    ebp,esp
c002585f:	83 ec 10             	sub    esp,0x10
c0025862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025865:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002586b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002586e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025871:	0f b6 d0             	movzx  edx,al
c0025874:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025877:	89 10                	mov    DWORD PTR [eax],edx
c0025879:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002587c:	83 c0 10             	add    eax,0x10
c002587f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025881:	c9                   	leave  
c0025882:	c3                   	ret    
c0025883:	90                   	nop

c0025884 <IOAPIC::open(int, int, void*)>:
c0025884:	55                   	push   ebp
c0025885:	89 e5                	mov    ebp,esp
c0025887:	57                   	push   edi
c0025888:	56                   	push   esi
c0025889:	53                   	push   ebx
c002588a:	83 ec 0c             	sub    esp,0xc
c002588d:	83 ec 0c             	sub    esp,0xc
c0025890:	68 c7 c6 02 c0       	push   0xc002c6c7
c0025895:	e8 f9 ce fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c002589a:	83 c4 10             	add    esp,0x10
c002589d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258a0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00258a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258b2:	8b 14 85 c0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb40]
c00258b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258bc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00258c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00258cb:	8b 14 85 40 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfac0]
c00258d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258d5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00258db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258de:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00258e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258ed:	0f b6 f8             	movzx  edi,al
c00258f0:	89 d0                	mov    eax,edx
c00258f2:	ba 00 00 00 00       	mov    edx,0x0
c00258f7:	89 c1                	mov    ecx,eax
c00258f9:	80 e5 ff             	and    ch,0xff
c00258fc:	89 cb                	mov    ebx,ecx
c00258fe:	0f b6 f2             	movzx  esi,dl
c0025901:	89 d8                	mov    eax,ebx
c0025903:	89 f2                	mov    edx,esi
c0025905:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025908:	8d 5f 08             	lea    ebx,[edi+0x8]
c002590b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002590f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025913:	83 e0 00             	and    eax,0x0
c0025916:	09 d0                	or     eax,edx
c0025918:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002591c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002591f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025925:	8d 50 01             	lea    edx,[eax+0x1]
c0025928:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002592b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025931:	0f b6 d0             	movzx  edx,al
c0025934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025937:	83 c2 08             	add    edx,0x8
c002593a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002593e:	0f b6 c9             	movzx  ecx,cl
c0025941:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025947:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002594b:	83 ec 08             	sub    esp,0x8
c002594e:	6a 01                	push   0x1
c0025950:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025953:	e8 04 ff ff ff       	call   c002585c <IOAPIC::read(int)>
c0025958:	83 c4 10             	add    esp,0x10
c002595b:	c1 f8 10             	sar    eax,0x10
c002595e:	0f b6 c0             	movzx  eax,al
c0025961:	8d 50 01             	lea    edx,[eax+0x1]
c0025964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025967:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002596d:	b8 00 00 00 00       	mov    eax,0x0
c0025972:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025975:	5b                   	pop    ebx
c0025976:	5e                   	pop    esi
c0025977:	5f                   	pop    edi
c0025978:	5d                   	pop    ebp
c0025979:	c3                   	ret    

c002597a <IOAPIC::write(int, int)>:
c002597a:	55                   	push   ebp
c002597b:	89 e5                	mov    ebp,esp
c002597d:	83 ec 10             	sub    esp,0x10
c0025980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025983:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025989:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002598c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002598f:	0f b6 d0             	movzx  edx,al
c0025992:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025995:	89 10                	mov    DWORD PTR [eax],edx
c0025997:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002599a:	8d 50 10             	lea    edx,[eax+0x10]
c002599d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00259a0:	89 02                	mov    DWORD PTR [edx],eax
c00259a2:	90                   	nop
c00259a3:	c9                   	leave  
c00259a4:	c3                   	ret    
c00259a5:	90                   	nop

c00259a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00259a6:	55                   	push   ebp
c00259a7:	89 e5                	mov    ebp,esp
c00259a9:	53                   	push   ebx
c00259aa:	83 ec 2c             	sub    esp,0x2c
c00259ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259b0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00259b3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00259b6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00259b9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00259bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00259bf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00259c2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259c5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00259c8:	88 d8                	mov    al,bl
c00259ca:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00259cd:	88 c8                	mov    al,cl
c00259cf:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259d2:	88 d0                	mov    al,dl
c00259d4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00259d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259db:	83 c0 08             	add    eax,0x8
c00259de:	01 c0                	add    eax,eax
c00259e0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259e3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00259e7:	83 c0 08             	add    eax,0x8
c00259ea:	01 c0                	add    eax,eax
c00259ec:	40                   	inc    eax
c00259ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00259f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00259f3:	50                   	push   eax
c00259f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259f7:	e8 60 fe ff ff       	call   c002585c <IOAPIC::read(int)>
c00259fc:	83 c4 08             	add    esp,0x8
c00259ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025a02:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025a09:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025a0c:	c1 e0 18             	shl    eax,0x18
c0025a0f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025a12:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a15:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a18:	52                   	push   edx
c0025a19:	50                   	push   eax
c0025a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a1d:	e8 58 ff ff ff       	call   c002597a <IOAPIC::write(int, int)>
c0025a22:	83 c4 0c             	add    esp,0xc
c0025a25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a28:	50                   	push   eax
c0025a29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a2c:	e8 2b fe ff ff       	call   c002585c <IOAPIC::read(int)>
c0025a31:	83 c4 08             	add    esp,0x8
c0025a34:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025a37:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025a3e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025a45:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025a4c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025a50:	74 09                	je     c0025a5b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025a52:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025a59:	eb 07                	jmp    c0025a62 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025a5b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025a62:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025a66:	74 09                	je     c0025a71 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025a68:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025a6f:	eb 07                	jmp    c0025a78 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025a71:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025a78:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025a7f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025a83:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025a86:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025a89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a8c:	52                   	push   edx
c0025a8d:	50                   	push   eax
c0025a8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a91:	e8 e4 fe ff ff       	call   c002597a <IOAPIC::write(int, int)>
c0025a96:	83 c4 0c             	add    esp,0xc
c0025a99:	90                   	nop
c0025a9a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025a9d:	c9                   	leave  
c0025a9e:	c3                   	ret    
c0025a9f:	90                   	nop

c0025aa0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025aa0:	55                   	push   ebp
c0025aa1:	89 e5                	mov    ebp,esp
c0025aa3:	57                   	push   edi
c0025aa4:	56                   	push   esi
c0025aa5:	53                   	push   ebx
c0025aa6:	83 ec 2c             	sub    esp,0x2c
c0025aa9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025aac:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025aaf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025ab3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025ab7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025abb:	74 5a                	je     c0025b17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025abd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025ac1:	7f 44                	jg     c0025b07 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025ac3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ac6:	05 60 cd 02 c0       	add    eax,0xc002cd60
c0025acb:	8a 00                	mov    al,BYTE PTR [eax]
c0025acd:	0f b6 c0             	movzx  eax,al
c0025ad0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025ad3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ad6:	66 8b 84 00 60 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfba0]
c0025ade:	0f b7 c0             	movzx  eax,ax
c0025ae1:	83 e0 02             	and    eax,0x2
c0025ae4:	85 c0                	test   eax,eax
c0025ae6:	74 04                	je     c0025aec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025ae8:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025aec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025aef:	66 8b 84 00 60 04 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfba0]
c0025af7:	0f b7 c0             	movzx  eax,ax
c0025afa:	83 e0 08             	and    eax,0x8
c0025afd:	85 c0                	test   eax,eax
c0025aff:	74 16                	je     c0025b17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b01:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b05:	eb 10                	jmp    c0025b17 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b07:	83 ec 0c             	sub    esp,0xc
c0025b0a:	68 d8 c6 02 c0       	push   0xc002c6d8
c0025b0f:	e8 eb 43 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025b14:	83 c4 10             	add    esp,0x10
c0025b17:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025b1b:	a1 60 1e 03 c0       	mov    eax,ds:0xc0031e60
c0025b20:	83 ec 08             	sub    esp,0x8
c0025b23:	50                   	push   eax
c0025b24:	68 10 c7 02 c0       	push   0xc002c710
c0025b29:	e8 65 cc fe ff       	call   c0012793 <Dbg::kprintf(char const*, ...)>
c0025b2e:	83 c4 10             	add    esp,0x10
c0025b31:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025b38:	a1 60 1e 03 c0       	mov    eax,ds:0xc0031e60
c0025b3d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025b40:	7d 67                	jge    c0025ba9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025b42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b45:	8b 04 85 80 1e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce180]
c0025b4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b4f:	83 ec 08             	sub    esp,0x8
c0025b52:	52                   	push   edx
c0025b53:	50                   	push   eax
c0025b54:	e8 d1 fc ff ff       	call   c002582a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	84 c0                	test   al,al
c0025b5e:	74 44                	je     c0025ba4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025b60:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025b63:	8b 1c 85 80 1e 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce180]
c0025b6a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025b6e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025b71:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025b75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b78:	83 c0 20             	add    eax,0x20
c0025b7b:	0f b6 f0             	movzx  esi,al
c0025b7e:	b8 00 00 00 00       	mov    eax,0x0
c0025b83:	99                   	cdq    
c0025b84:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025b87:	0f b6 c9             	movzx  ecx,cl
c0025b8a:	83 ec 04             	sub    esp,0x4
c0025b8d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025b90:	57                   	push   edi
c0025b91:	56                   	push   esi
c0025b92:	52                   	push   edx
c0025b93:	50                   	push   eax
c0025b94:	51                   	push   ecx
c0025b95:	53                   	push   ebx
c0025b96:	e8 0b fe ff ff       	call   c00259a6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025b9b:	83 c4 20             	add    esp,0x20
c0025b9e:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025ba2:	eb 05                	jmp    c0025ba9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025ba4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025ba7:	eb 8f                	jmp    c0025b38 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ba9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025bac:	83 f0 01             	xor    eax,0x1
c0025baf:	84 c0                	test   al,al
c0025bb1:	74 10                	je     c0025bc3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025bb3:	83 ec 0c             	sub    esp,0xc
c0025bb6:	68 27 c7 02 c0       	push   0xc002c727
c0025bbb:	e8 3f 43 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025bc0:	83 c4 10             	add    esp,0x10
c0025bc3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025bc7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025bce:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025bd2:	7f 65                	jg     c0025c39 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bda:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025be1:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025be4:	01 ca                	add    edx,ecx
c0025be6:	83 c2 54             	add    edx,0x54
c0025be9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025bed:	85 c0                	test   eax,eax
c0025bef:	75 43                	jne    c0025c34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025bf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bf4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bf7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025bfe:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c01:	01 ca                	add    edx,ecx
c0025c03:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025c06:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025c09:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c1a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c1d:	01 ca                	add    edx,ecx
c0025c1f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025c25:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025c28:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c2f:	83 e8 20             	sub    eax,0x20
c0025c32:	eb 1a                	jmp    c0025c4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025c34:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025c37:	eb 95                	jmp    c0025bce <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025c39:	83 ec 0c             	sub    esp,0xc
c0025c3c:	68 34 c7 02 c0       	push   0xc002c734
c0025c41:	e8 b9 42 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0025c46:	83 c4 10             	add    esp,0x10
c0025c49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025c4e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c51:	5b                   	pop    ebx
c0025c52:	5e                   	pop    esi
c0025c53:	5f                   	pop    edi
c0025c54:	5d                   	pop    ebp
c0025c55:	c3                   	ret    

c0025c56 <PIC::disable()>:
c0025c56:	55                   	push   ebp
c0025c57:	89 e5                	mov    ebp,esp
c0025c59:	83 ec 10             	sub    esp,0x10
c0025c5c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025c62:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025c66:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c69:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c6d:	ee                   	out    dx,al
c0025c6e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025c74:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025c78:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c7b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025c7f:	ee                   	out    dx,al
c0025c80:	90                   	nop
c0025c81:	c9                   	leave  
c0025c82:	c3                   	ret    
c0025c83:	90                   	nop

c0025c84 <PIC::close(int, int, void*)>:
c0025c84:	55                   	push   ebp
c0025c85:	89 e5                	mov    ebp,esp
c0025c87:	83 ec 08             	sub    esp,0x8
c0025c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c8f:	83 c0 3c             	add    eax,0x3c
c0025c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c94:	83 ec 0c             	sub    esp,0xc
c0025c97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c9a:	ff d0                	call   eax
c0025c9c:	83 c4 10             	add    esp,0x10
c0025c9f:	b8 00 00 00 00       	mov    eax,0x0
c0025ca4:	c9                   	leave  
c0025ca5:	c3                   	ret    

c0025ca6 <PIC::PIC()>:
c0025ca6:	83 ec 0c             	sub    esp,0xc
c0025ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cad:	83 ec 08             	sub    esp,0x8
c0025cb0:	68 e0 c7 02 c0       	push   0xc002c7e0
c0025cb5:	50                   	push   eax
c0025cb6:	e8 7f e8 fe ff       	call   c001453a <InterruptController::InterruptController(char const*)>
c0025cbb:	83 c4 10             	add    esp,0x10
c0025cbe:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0025cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cc7:	89 10                	mov    DWORD PTR [eax],edx
c0025cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ccd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025cd3:	0f b6 d0             	movzx  edx,al
c0025cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cda:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025ce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ceb:	0f b6 d0             	movzx  edx,al
c0025cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf2:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cfb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d01:	8d 50 01             	lea    edx,[eax+0x1]
c0025d04:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d08:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d0e:	0f b6 d0             	movzx  edx,al
c0025d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d15:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d19:	83 e1 3f             	and    ecx,0x3f
c0025d1c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d2a:	0f b6 d0             	movzx  edx,al
c0025d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d31:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d42:	0f b6 d0             	movzx  edx,al
c0025d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d49:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d52:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d58:	8d 50 01             	lea    edx,[eax+0x1]
c0025d5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d5f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d65:	0f b6 d0             	movzx  edx,al
c0025d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d6c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d70:	83 e1 3f             	and    ecx,0x3f
c0025d73:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025d77:	90                   	nop
c0025d78:	83 c4 0c             	add    esp,0xc
c0025d7b:	c3                   	ret    

c0025d7c <PIC::ioWait()>:
c0025d7c:	eb 00                	jmp    c0025d7e <PIC::ioWait()+0x2>
c0025d7e:	eb 00                	jmp    c0025d80 <PIC::ioWait()+0x4>
c0025d80:	90                   	nop
c0025d81:	c3                   	ret    

c0025d82 <PIC::getIRQReg(int)>:
c0025d82:	55                   	push   ebp
c0025d83:	89 e5                	mov    ebp,esp
c0025d85:	83 ec 10             	sub    esp,0x10
c0025d88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8b:	0f b6 c0             	movzx  eax,al
c0025d8e:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d94:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025d97:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d9a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d9e:	ee                   	out    dx,al
c0025d9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da2:	0f b6 c0             	movzx  eax,al
c0025da5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025dab:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025dae:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025db1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025db5:	ee                   	out    dx,al
c0025db6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025dbc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025dc0:	89 c2                	mov    edx,eax
c0025dc2:	ec                   	in     al,dx
c0025dc3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025dc6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025dc9:	0f b6 c0             	movzx  eax,al
c0025dcc:	c1 e0 08             	shl    eax,0x8
c0025dcf:	89 c1                	mov    ecx,eax
c0025dd1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025dd7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025ddb:	89 c2                	mov    edx,eax
c0025ddd:	ec                   	in     al,dx
c0025dde:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025de1:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025de4:	0f b6 c0             	movzx  eax,al
c0025de7:	09 c8                	or     eax,ecx
c0025de9:	c9                   	leave  
c0025dea:	c3                   	ret    
c0025deb:	90                   	nop

c0025dec <PIC::eoi(unsigned char)>:
c0025dec:	55                   	push   ebp
c0025ded:	89 e5                	mov    ebp,esp
c0025def:	83 ec 14             	sub    esp,0x14
c0025df2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025df5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025df8:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025dfc:	75 1e                	jne    c0025e1c <PIC::eoi(unsigned char)+0x30>
c0025dfe:	6a 0b                	push   0xb
c0025e00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e03:	e8 7a ff ff ff       	call   c0025d82 <PIC::getIRQReg(int)>
c0025e08:	83 c4 08             	add    esp,0x8
c0025e0b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025e0f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025e13:	25 80 00 00 00       	and    eax,0x80
c0025e18:	85 c0                	test   eax,eax
c0025e1a:	74 5f                	je     c0025e7b <PIC::eoi(unsigned char)+0x8f>
c0025e1c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025e20:	75 2d                	jne    c0025e4f <PIC::eoi(unsigned char)+0x63>
c0025e22:	6a 0b                	push   0xb
c0025e24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e27:	e8 56 ff ff ff       	call   c0025d82 <PIC::getIRQReg(int)>
c0025e2c:	83 c4 08             	add    esp,0x8
c0025e2f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025e33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025e36:	66 85 c0             	test   ax,ax
c0025e39:	78 14                	js     c0025e4f <PIC::eoi(unsigned char)+0x63>
c0025e3b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025e41:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025e45:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e48:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025e4c:	ee                   	out    dx,al
c0025e4d:	eb 2d                	jmp    c0025e7c <PIC::eoi(unsigned char)+0x90>
c0025e4f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025e53:	76 12                	jbe    c0025e67 <PIC::eoi(unsigned char)+0x7b>
c0025e55:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e5b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025e5f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e62:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e66:	ee                   	out    dx,al
c0025e67:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e6d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025e71:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e74:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e78:	ee                   	out    dx,al
c0025e79:	eb 01                	jmp    c0025e7c <PIC::eoi(unsigned char)+0x90>
c0025e7b:	90                   	nop
c0025e7c:	c9                   	leave  
c0025e7d:	c3                   	ret    

c0025e7e <PIC::remap()>:
c0025e7e:	55                   	push   ebp
c0025e7f:	89 e5                	mov    ebp,esp
c0025e81:	83 ec 48             	sub    esp,0x48
c0025e84:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025e8b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025e92:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025e98:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025e9b:	89 c2                	mov    edx,eax
c0025e9d:	ec                   	in     al,dx
c0025e9e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025ea1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025ea4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025ea7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025ead:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025eb0:	89 c2                	mov    edx,eax
c0025eb2:	ec                   	in     al,dx
c0025eb3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025eb6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025eb9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025ebc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025ec2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025ec6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025ec9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025ecc:	ee                   	out    dx,al
c0025ecd:	83 ec 0c             	sub    esp,0xc
c0025ed0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed3:	e8 a4 fe ff ff       	call   c0025d7c <PIC::ioWait()>
c0025ed8:	83 c4 10             	add    esp,0x10
c0025edb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025ee1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025ee5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025ee8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025eeb:	ee                   	out    dx,al
c0025eec:	83 ec 0c             	sub    esp,0xc
c0025eef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ef2:	e8 85 fe ff ff       	call   c0025d7c <PIC::ioWait()>
c0025ef7:	83 c4 10             	add    esp,0x10
c0025efa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025efd:	0f b6 c0             	movzx  eax,al
c0025f00:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025f06:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025f09:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025f0c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025f0f:	ee                   	out    dx,al
c0025f10:	83 ec 0c             	sub    esp,0xc
c0025f13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f16:	e8 61 fe ff ff       	call   c0025d7c <PIC::ioWait()>
c0025f1b:	83 c4 10             	add    esp,0x10
c0025f1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f21:	0f b6 c0             	movzx  eax,al
c0025f24:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025f2a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025f2d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025f30:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025f33:	ee                   	out    dx,al
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f3a:	e8 3d fe ff ff       	call   c0025d7c <PIC::ioWait()>
c0025f3f:	83 c4 10             	add    esp,0x10
c0025f42:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025f48:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025f4c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025f4f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025f52:	ee                   	out    dx,al
c0025f53:	83 ec 0c             	sub    esp,0xc
c0025f56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f59:	e8 1e fe ff ff       	call   c0025d7c <PIC::ioWait()>
c0025f5e:	83 c4 10             	add    esp,0x10
c0025f61:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025f67:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025f6b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025f6e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025f71:	ee                   	out    dx,al
c0025f72:	83 ec 0c             	sub    esp,0xc
c0025f75:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f78:	e8 ff fd ff ff       	call   c0025d7c <PIC::ioWait()>
c0025f7d:	83 c4 10             	add    esp,0x10
c0025f80:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025f86:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025f8a:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025f8d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025f90:	ee                   	out    dx,al
c0025f91:	83 ec 0c             	sub    esp,0xc
c0025f94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f97:	e8 e0 fd ff ff       	call   c0025d7c <PIC::ioWait()>
c0025f9c:	83 c4 10             	add    esp,0x10
c0025f9f:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025fa5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025fa9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025fac:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025faf:	ee                   	out    dx,al
c0025fb0:	83 ec 0c             	sub    esp,0xc
c0025fb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb6:	e8 c1 fd ff ff       	call   c0025d7c <PIC::ioWait()>
c0025fbb:	83 c4 10             	add    esp,0x10
c0025fbe:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025fc2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025fc8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025fcb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025fce:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025fd1:	ee                   	out    dx,al
c0025fd2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025fd6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025fdc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025fdf:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025fe2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025fe5:	ee                   	out    dx,al
c0025fe6:	90                   	nop
c0025fe7:	c9                   	leave  
c0025fe8:	c3                   	ret    
c0025fe9:	90                   	nop

c0025fea <PIC::open(int, int, void*)>:
c0025fea:	55                   	push   ebp
c0025feb:	89 e5                	mov    ebp,esp
c0025fed:	83 ec 18             	sub    esp,0x18
c0025ff0:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025ff6:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025ffa:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ffd:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026001:	ee                   	out    dx,al
c0026002:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026008:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002600c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002600f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026013:	ee                   	out    dx,al
c0026014:	83 ec 0c             	sub    esp,0xc
c0026017:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601a:	e8 5f fe ff ff       	call   c0025e7e <PIC::remap()>
c002601f:	83 c4 10             	add    esp,0x10
c0026022:	b8 00 00 00 00       	mov    eax,0x0
c0026027:	c9                   	leave  
c0026028:	c3                   	ret    
c0026029:	90                   	nop

c002602a <APICTimer::close(int, int, void*)>:
c002602a:	b8 00 00 00 00       	mov    eax,0x0
c002602f:	c3                   	ret    

c0026030 <apicTimerHandler(regs*, void*)>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026037:	8b 00                	mov    eax,DWORD PTR [eax]
c0026039:	99                   	cdq    
c002603a:	52                   	push   edx
c002603b:	50                   	push   eax
c002603c:	6a 00                	push   0x0
c002603e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026043:	e8 8c 07 00 00       	call   c00267d4 <__udivdi3>
c0026048:	83 c4 10             	add    esp,0x10
c002604b:	83 ec 08             	sub    esp,0x8
c002604e:	52                   	push   edx
c002604f:	50                   	push   eax
c0026050:	e8 3c 06 ff ff       	call   c0016691 <timerHandler(unsigned long long)>
c0026055:	83 c4 10             	add    esp,0x10
c0026058:	90                   	nop
c0026059:	83 c4 0c             	add    esp,0xc
c002605c:	c3                   	ret    
c002605d:	90                   	nop

c002605e <APICTimer::write(int)>:
c002605e:	53                   	push   ebx
c002605f:	83 ec 28             	sub    esp,0x28
c0026062:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026066:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002606a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026070:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0026075:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002607b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026081:	83 ec 0c             	sub    esp,0xc
c0026084:	50                   	push   eax
c0026085:	e8 de f4 ff ff       	call   c0025568 <APIC::getBase()>
c002608a:	83 c4 10             	add    esp,0x10
c002608d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026091:	a1 70 e1 02 c0       	mov    eax,ds:0xc002e170
c0026096:	8b 15 74 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e174
c002609c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00260a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00260a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260a8:	05 e0 03 00 00       	add    eax,0x3e0
c00260ad:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00260b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260b7:	05 80 03 00 00       	add    eax,0x380
c00260bc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00260c2:	fb                   	sti    
c00260c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00260cb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00260d0:	83 d2 00             	adc    edx,0x0
c00260d3:	89 c1                	mov    ecx,eax
c00260d5:	89 d3                	mov    ebx,edx
c00260d7:	a1 70 e1 02 c0       	mov    eax,ds:0xc002e170
c00260dc:	8b 15 74 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e174
c00260e2:	39 c8                	cmp    eax,ecx
c00260e4:	89 d0                	mov    eax,edx
c00260e6:	19 d8                	sbb    eax,ebx
c00260e8:	73 02                	jae    c00260ec <APICTimer::write(int)+0x8e>
c00260ea:	eb d7                	jmp    c00260c3 <APICTimer::write(int)+0x65>
c00260ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260f0:	05 20 03 00 00       	add    eax,0x320
c00260f5:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00260fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00260ff:	05 90 03 00 00       	add    eax,0x390
c0026104:	8b 00                	mov    eax,DWORD PTR [eax]
c0026106:	f7 d0                	not    eax
c0026108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002610c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026114:	ba 00 00 00 00       	mov    edx,0x0
c0026119:	f7 f3                	div    ebx
c002611b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002611f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026123:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026129:	0d 00 00 02 00       	or     eax,0x20000
c002612e:	89 c2                	mov    edx,eax
c0026130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026134:	05 20 03 00 00       	add    eax,0x320
c0026139:	89 10                	mov    DWORD PTR [eax],edx
c002613b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002613f:	05 e0 03 00 00       	add    eax,0x3e0
c0026144:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002614a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002614e:	05 80 03 00 00       	add    eax,0x380
c0026153:	89 c2                	mov    edx,eax
c0026155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026159:	89 02                	mov    DWORD PTR [edx],eax
c002615b:	90                   	nop
c002615c:	83 c4 28             	add    esp,0x28
c002615f:	5b                   	pop    ebx
c0026160:	c3                   	ret    
c0026161:	90                   	nop

c0026162 <APICTimer::open(int, int, void*)>:
c0026162:	57                   	push   edi
c0026163:	56                   	push   esi
c0026164:	53                   	push   ebx
c0026165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026169:	8b 00                	mov    eax,DWORD PTR [eax]
c002616b:	83 c0 24             	add    eax,0x24
c002616e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026170:	83 ec 08             	sub    esp,0x8
c0026173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002617b:	ff d0                	call   eax
c002617d:	83 c4 10             	add    esp,0x10
c0026180:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0026185:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002618b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026191:	83 ec 0c             	sub    esp,0xc
c0026194:	50                   	push   eax
c0026195:	e8 ce f3 ff ff       	call   c0025568 <APIC::getBase()>
c002619a:	83 c4 10             	add    esp,0x10
c002619d:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00261a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261ad:	0f b6 f8             	movzx  edi,al
c00261b0:	89 d0                	mov    eax,edx
c00261b2:	ba 00 00 00 00       	mov    edx,0x0
c00261b7:	89 c1                	mov    ecx,eax
c00261b9:	80 e5 ff             	and    ch,0xff
c00261bc:	89 cb                	mov    ebx,ecx
c00261be:	0f b6 f2             	movzx  esi,dl
c00261c1:	89 d8                	mov    eax,ebx
c00261c3:	89 f2                	mov    edx,esi
c00261c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261c9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00261cc:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00261d0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00261d4:	83 e0 00             	and    eax,0x0
c00261d7:	09 d0                	or     eax,edx
c00261d9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00261dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261e1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00261e7:	8d 50 01             	lea    edx,[eax+0x1]
c00261ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261ee:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00261f4:	0f b6 d0             	movzx  edx,al
c00261f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261fb:	83 c2 08             	add    edx,0x8
c00261fe:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026202:	0f b6 c9             	movzx  ecx,cl
c0026205:	81 c9 00 00 01 00    	or     ecx,0x10000
c002620b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002620f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026213:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026217:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002621d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026221:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026225:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002622b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002622f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026235:	83 ec 0c             	sub    esp,0xc
c0026238:	51                   	push   ecx
c0026239:	6a 01                	push   0x1
c002623b:	68 30 60 02 c0       	push   0xc0026030
c0026240:	52                   	push   edx
c0026241:	50                   	push   eax
c0026242:	e8 fd d8 fe ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026247:	83 c4 20             	add    esp,0x20
c002624a:	89 c2                	mov    edx,eax
c002624c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026250:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026256:	b8 00 00 00 00       	mov    eax,0x0
c002625b:	5b                   	pop    ebx
c002625c:	5e                   	pop    esi
c002625d:	5f                   	pop    edi
c002625e:	c3                   	ret    
c002625f:	90                   	nop

c0026260 <APICTimer::APICTimer()>:
c0026260:	83 ec 0c             	sub    esp,0xc
c0026263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026267:	83 ec 08             	sub    esp,0x8
c002626a:	68 4c c8 02 c0       	push   0xc002c84c
c002626f:	50                   	push   eax
c0026270:	e8 8d 03 ff ff       	call   c0016602 <Timer::Timer(char const*)>
c0026275:	83 c4 10             	add    esp,0x10
c0026278:	ba 60 c8 02 c0       	mov    edx,0xc002c860
c002627d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026281:	89 10                	mov    DWORD PTR [eax],edx
c0026283:	90                   	nop
c0026284:	83 c4 0c             	add    esp,0xc
c0026287:	c3                   	ret    

c0026288 <PIT::write(int)>:
c0026288:	83 ec 10             	sub    esp,0x10
c002628b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026293:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026299:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002629d:	a3 a4 1e 03 c0       	mov    ds:0xc0031ea4,eax
c00262a2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00262a7:	99                   	cdq    
c00262a8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00262ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00262b0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00262b7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00262bc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00262c0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00262c5:	ee                   	out    dx,al
c00262c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262ca:	0f b6 c0             	movzx  eax,al
c00262cd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00262d4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00262d8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00262dc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00262e1:	ee                   	out    dx,al
c00262e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00262e6:	c1 f8 08             	sar    eax,0x8
c00262e9:	0f b6 c0             	movzx  eax,al
c00262ec:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00262f3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00262f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00262fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026300:	ee                   	out    dx,al
c0026301:	90                   	nop
c0026302:	83 c4 10             	add    esp,0x10
c0026305:	c3                   	ret    

c0026306 <pitHandler(regs*, void*)>:
c0026306:	83 ec 0c             	sub    esp,0xc
c0026309:	a1 a4 1e 03 c0       	mov    eax,ds:0xc0031ea4
c002630e:	99                   	cdq    
c002630f:	52                   	push   edx
c0026310:	50                   	push   eax
c0026311:	6a 00                	push   0x0
c0026313:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026318:	e8 b7 04 00 00       	call   c00267d4 <__udivdi3>
c002631d:	83 c4 10             	add    esp,0x10
c0026320:	83 ec 08             	sub    esp,0x8
c0026323:	52                   	push   edx
c0026324:	50                   	push   eax
c0026325:	e8 67 03 ff ff       	call   c0016691 <timerHandler(unsigned long long)>
c002632a:	83 c4 10             	add    esp,0x10
c002632d:	90                   	nop
c002632e:	83 c4 0c             	add    esp,0xc
c0026331:	c3                   	ret    

c0026332 <PIT::open(int, int, void*)>:
c0026332:	83 ec 0c             	sub    esp,0xc
c0026335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026339:	8b 00                	mov    eax,DWORD PTR [eax]
c002633b:	83 c0 24             	add    eax,0x24
c002633e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026340:	83 ec 08             	sub    esp,0x8
c0026343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002634b:	ff d0                	call   eax
c002634d:	83 c4 10             	add    esp,0x10
c0026350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026354:	83 ec 0c             	sub    esp,0xc
c0026357:	6a 00                	push   0x0
c0026359:	6a 01                	push   0x1
c002635b:	68 06 63 02 c0       	push   0xc0026306
c0026360:	6a 00                	push   0x0
c0026362:	50                   	push   eax
c0026363:	e8 dc d7 fe ff       	call   c0013b44 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026368:	83 c4 20             	add    esp,0x20
c002636b:	89 c2                	mov    edx,eax
c002636d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026371:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026377:	b8 00 00 00 00       	mov    eax,0x0
c002637c:	83 c4 0c             	add    esp,0xc
c002637f:	c3                   	ret    

c0026380 <PIT::close(int, int, void*)>:
c0026380:	83 ec 0c             	sub    esp,0xc
c0026383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026387:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026395:	6a 01                	push   0x1
c0026397:	68 06 63 02 c0       	push   0xc0026306
c002639c:	6a 00                	push   0x0
c002639e:	50                   	push   eax
c002639f:	e8 ea d7 fe ff       	call   c0013b8e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00263a4:	83 c4 10             	add    esp,0x10
c00263a7:	b8 00 00 00 00       	mov    eax,0x0
c00263ac:	83 c4 0c             	add    esp,0xc
c00263af:	c3                   	ret    

c00263b0 <PIT::PIT()>:
c00263b0:	83 ec 0c             	sub    esp,0xc
c00263b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263b7:	83 ec 08             	sub    esp,0x8
c00263ba:	68 88 c8 02 c0       	push   0xc002c888
c00263bf:	50                   	push   eax
c00263c0:	e8 3d 02 ff ff       	call   c0016602 <Timer::Timer(char const*)>
c00263c5:	83 c4 10             	add    esp,0x10
c00263c8:	ba b0 c8 02 c0       	mov    edx,0xc002c8b0
c00263cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d1:	89 10                	mov    DWORD PTR [eax],edx
c00263d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263dd:	0f b6 d0             	movzx  edx,al
c00263e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00263eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00263f5:	0f b6 d0             	movzx  edx,al
c00263f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263fc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026405:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002640b:	8d 50 01             	lea    edx,[eax+0x1]
c002640e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026412:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026418:	0f b6 d0             	movzx  edx,al
c002641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026423:	83 e1 3f             	and    ecx,0x3f
c0026426:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002642a:	90                   	nop
c002642b:	83 c4 0c             	add    esp,0xc
c002642e:	c3                   	ret    
c002642f:	90                   	nop

c0026430 <avxDetect>:
c0026430:	b8 00 00 00 00       	mov    eax,0x0
c0026435:	c3                   	ret    

c0026436 <avxSave>:
c0026436:	c3                   	ret    

c0026437 <avxLoad>:
c0026437:	c3                   	ret    

c0026438 <avxInit>:
c0026438:	c3                   	ret    

c0026439 <avxClose>:
c0026439:	c3                   	ret    

c002643a <wouldSheSayYes>:
c002643a:	c3                   	ret    
c002643b:	49                   	dec    ecx
c002643c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026440:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026444:	75 20                	jne    c0026466 <sseDetect.noSSE+0x1>
c0026446:	4e                   	dec    esi
c0026447:	79 61                	jns    c00264aa <x87Detect+0x14>
c0026449:	68 2e 2e 2e 00       	push   0x2e2e2e
c002644e:	66 90                	xchg   ax,ax

c0026450 <absolutelyNoChanceInHell>:
c0026450:	b8 01 00 00 00       	mov    eax,0x1
c0026455:	0f a2                	cpuid  
c0026457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002645d:	74 06                	je     c0026465 <sseDetect.noSSE>
c002645f:	b8 01 00 00 00       	mov    eax,0x1
c0026464:	c3                   	ret    

c0026465 <sseDetect.noSSE>:
c0026465:	31 c0                	xor    eax,eax
c0026467:	c3                   	ret    

c0026468 <sseSave>:
c0026468:	0f ae 44 24 04       	fxsave [esp+0x4]
c002646d:	c3                   	ret    

c002646e <sseLoad>:
c002646e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026473:	c3                   	ret    

c0026474 <sseInit>:
c0026474:	e8 49 00 00 00       	call   c00264c2 <x87Init>
c0026479:	0f 20 e0             	mov    eax,cr4
c002647c:	66 0d 00 06          	or     ax,0x600
c0026480:	0f 22 e0             	mov    cr4,eax
c0026483:	c3                   	ret    

c0026484 <sseClose>:
c0026484:	c3                   	ret    
c0026485:	66 90                	xchg   ax,ax
c0026487:	66 90                	xchg   ax,ax
c0026489:	66 90                	xchg   ax,ax
c002648b:	66 90                	xchg   ax,ax
c002648d:	66 90                	xchg   ax,ax
c002648f:	90                   	nop

c0026490 <value_37F>:
c0026490:	7f 03                	jg     c0026495 <value_37A+0x1>

c0026492 <value_37E>:
c0026492:	7e 03                	jle    c0026497 <x87Detect+0x1>

c0026494 <value_37A>:
c0026494:	7a 03                	jp     c0026499 <x87Detect+0x3>

c0026496 <x87Detect>:
c0026496:	b8 01 00 00 00       	mov    eax,0x1
c002649b:	0f a2                	cpuid  
c002649d:	f7 c2 01 00 00 00    	test   edx,0x1
c00264a3:	74 06                	je     c00264ab <x87Detect.nox87>
c00264a5:	b8 01 00 00 00       	mov    eax,0x1
c00264aa:	c3                   	ret    

c00264ab <x87Detect.nox87>:
c00264ab:	b8 00 00 00 00       	mov    eax,0x0
c00264b0:	c3                   	ret    

c00264b1 <x87Save>:
c00264b1:	55                   	push   ebp
c00264b2:	89 e5                	mov    ebp,esp
c00264b4:	9b dd 75 08          	fsave  [ebp+0x8]
c00264b8:	c9                   	leave  
c00264b9:	c3                   	ret    

c00264ba <x87Load>:
c00264ba:	55                   	push   ebp
c00264bb:	89 e5                	mov    ebp,esp
c00264bd:	dd 65 08             	frstor [ebp+0x8]
c00264c0:	c9                   	leave  
c00264c1:	c3                   	ret    

c00264c2 <x87Init>:
c00264c2:	9b db e3             	finit  
c00264c5:	0f 20 c0             	mov    eax,cr0
c00264c8:	66 25 fb ff          	and    ax,0xfffb
c00264cc:	66 0d 22 00          	or     ax,0x22
c00264d0:	0f 22 c0             	mov    cr0,eax
c00264d3:	0f 06                	clts   
c00264d5:	d9 2d 94 64 02 c0    	fldcw  WORD PTR ds:0xc0026494
c00264db:	c3                   	ret    

c00264dc <x87Close>:
c00264dc:	c3                   	ret    
c00264dd:	66 90                	xchg   ax,ax
c00264df:	90                   	nop

c00264e0 <__do_global_ctors_aux>:
c00264e0:	a1 d4 90 02 c0       	mov    eax,ds:0xc00290d4
c00264e5:	83 f8 ff             	cmp    eax,0xffffffff
c00264e8:	74 1a                	je     c0026504 <__do_global_ctors_aux+0x24>
c00264ea:	55                   	push   ebp
c00264eb:	89 e5                	mov    ebp,esp
c00264ed:	53                   	push   ebx
c00264ee:	52                   	push   edx
c00264ef:	bb d4 90 02 c0       	mov    ebx,0xc00290d4
c00264f4:	ff d0                	call   eax
c00264f6:	83 eb 04             	sub    ebx,0x4
c00264f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00264fb:	83 f8 ff             	cmp    eax,0xffffffff
c00264fe:	75 f4                	jne    c00264f4 <__do_global_ctors_aux+0x14>
c0026500:	58                   	pop    eax
c0026501:	5b                   	pop    ebx
c0026502:	5d                   	pop    ebp
c0026503:	c3                   	ret    
c0026504:	c3                   	ret    
c0026505:	66 90                	xchg   ax,ax
c0026507:	90                   	nop

c0026508 <__divdi3>:
c0026508:	55                   	push   ebp
c0026509:	57                   	push   edi
c002650a:	56                   	push   esi
c002650b:	53                   	push   ebx
c002650c:	83 ec 1c             	sub    esp,0x1c
c002650f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026513:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026517:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002651a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002651e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026522:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026526:	85 db                	test   ebx,ebx
c0026528:	0f 88 8e 00 00 00    	js     c00265bc <__divdi3+0xb4>
c002652e:	89 dd                	mov    ebp,ebx
c0026530:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026538:	89 d3                	mov    ebx,edx
c002653a:	85 d2                	test   edx,edx
c002653c:	79 0d                	jns    c002654b <__divdi3+0x43>
c002653e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026542:	f7 d8                	neg    eax
c0026544:	83 d2 00             	adc    edx,0x0
c0026547:	f7 da                	neg    edx
c0026549:	89 d3                	mov    ebx,edx
c002654b:	89 c7                	mov    edi,eax
c002654d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026550:	85 db                	test   ebx,ebx
c0026552:	75 48                	jne    c002659c <__divdi3+0x94>
c0026554:	39 ef                	cmp    edi,ebp
c0026556:	76 24                	jbe    c002657c <__divdi3+0x74>
c0026558:	89 ea                	mov    edx,ebp
c002655a:	f7 f7                	div    edi
c002655c:	89 c1                	mov    ecx,eax
c002655e:	31 f6                	xor    esi,esi
c0026560:	89 c8                	mov    eax,ecx
c0026562:	89 f2                	mov    edx,esi
c0026564:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026568:	85 c9                	test   ecx,ecx
c002656a:	74 07                	je     c0026573 <__divdi3+0x6b>
c002656c:	f7 d8                	neg    eax
c002656e:	83 d2 00             	adc    edx,0x0
c0026571:	f7 da                	neg    edx
c0026573:	83 c4 1c             	add    esp,0x1c
c0026576:	5b                   	pop    ebx
c0026577:	5e                   	pop    esi
c0026578:	5f                   	pop    edi
c0026579:	5d                   	pop    ebp
c002657a:	c3                   	ret    
c002657b:	90                   	nop
c002657c:	85 ff                	test   edi,edi
c002657e:	75 0b                	jne    c002658b <__divdi3+0x83>
c0026580:	b8 01 00 00 00       	mov    eax,0x1
c0026585:	31 d2                	xor    edx,edx
c0026587:	f7 f3                	div    ebx
c0026589:	89 c7                	mov    edi,eax
c002658b:	31 d2                	xor    edx,edx
c002658d:	89 e8                	mov    eax,ebp
c002658f:	f7 f7                	div    edi
c0026591:	89 c6                	mov    esi,eax
c0026593:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026596:	f7 f7                	div    edi
c0026598:	89 c1                	mov    ecx,eax
c002659a:	eb c4                	jmp    c0026560 <__divdi3+0x58>
c002659c:	39 eb                	cmp    ebx,ebp
c002659e:	77 3c                	ja     c00265dc <__divdi3+0xd4>
c00265a0:	0f bd f3             	bsr    esi,ebx
c00265a3:	83 f6 1f             	xor    esi,0x1f
c00265a6:	75 40                	jne    c00265e8 <__divdi3+0xe0>
c00265a8:	39 eb                	cmp    ebx,ebp
c00265aa:	72 09                	jb     c00265b5 <__divdi3+0xad>
c00265ac:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00265af:	0f 87 97 00 00 00    	ja     c002664c <__divdi3+0x144>
c00265b5:	b9 01 00 00 00       	mov    ecx,0x1
c00265ba:	eb a4                	jmp    c0026560 <__divdi3+0x58>
c00265bc:	f7 d9                	neg    ecx
c00265be:	83 d3 00             	adc    ebx,0x0
c00265c1:	f7 db                	neg    ebx
c00265c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265ca:	89 dd                	mov    ebp,ebx
c00265cc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00265d4:	e9 5f ff ff ff       	jmp    c0026538 <__divdi3+0x30>
c00265d9:	8d 76 00             	lea    esi,[esi+0x0]
c00265dc:	31 f6                	xor    esi,esi
c00265de:	31 c9                	xor    ecx,ecx
c00265e0:	e9 7b ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c00265e5:	8d 76 00             	lea    esi,[esi+0x0]
c00265e8:	b8 20 00 00 00       	mov    eax,0x20
c00265ed:	29 f0                	sub    eax,esi
c00265ef:	89 f1                	mov    ecx,esi
c00265f1:	d3 e3                	shl    ebx,cl
c00265f3:	89 fa                	mov    edx,edi
c00265f5:	88 c1                	mov    cl,al
c00265f7:	d3 ea                	shr    edx,cl
c00265f9:	09 da                	or     edx,ebx
c00265fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00265ff:	89 f1                	mov    ecx,esi
c0026601:	d3 e7                	shl    edi,cl
c0026603:	89 eb                	mov    ebx,ebp
c0026605:	88 c1                	mov    cl,al
c0026607:	d3 eb                	shr    ebx,cl
c0026609:	89 f1                	mov    ecx,esi
c002660b:	d3 e5                	shl    ebp,cl
c002660d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026610:	88 c1                	mov    cl,al
c0026612:	d3 ea                	shr    edx,cl
c0026614:	09 d5                	or     ebp,edx
c0026616:	89 e8                	mov    eax,ebp
c0026618:	89 da                	mov    edx,ebx
c002661a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002661e:	89 d3                	mov    ebx,edx
c0026620:	89 c5                	mov    ebp,eax
c0026622:	f7 e7                	mul    edi
c0026624:	39 d3                	cmp    ebx,edx
c0026626:	72 18                	jb     c0026640 <__divdi3+0x138>
c0026628:	74 0a                	je     c0026634 <__divdi3+0x12c>
c002662a:	89 e9                	mov    ecx,ebp
c002662c:	31 f6                	xor    esi,esi
c002662e:	e9 2d ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c0026633:	90                   	nop
c0026634:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026637:	89 f1                	mov    ecx,esi
c0026639:	d3 e7                	shl    edi,cl
c002663b:	39 c7                	cmp    edi,eax
c002663d:	73 eb                	jae    c002662a <__divdi3+0x122>
c002663f:	90                   	nop
c0026640:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026643:	31 f6                	xor    esi,esi
c0026645:	e9 16 ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c002664a:	66 90                	xchg   ax,ax
c002664c:	31 c9                	xor    ecx,ecx
c002664e:	e9 0d ff ff ff       	jmp    c0026560 <__divdi3+0x58>
c0026653:	90                   	nop

c0026654 <__moddi3>:
c0026654:	55                   	push   ebp
c0026655:	57                   	push   edi
c0026656:	56                   	push   esi
c0026657:	53                   	push   ebx
c0026658:	83 ec 2c             	sub    esp,0x2c
c002665b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002665f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026663:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026667:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002666b:	85 db                	test   ebx,ebx
c002666d:	0f 88 85 00 00 00    	js     c00266f8 <__moddi3+0xa4>
c0026673:	89 de                	mov    esi,ebx
c0026675:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002667d:	89 d7                	mov    edi,edx
c002667f:	85 d2                	test   edx,edx
c0026681:	79 09                	jns    c002668c <__moddi3+0x38>
c0026683:	f7 d8                	neg    eax
c0026685:	83 d2 00             	adc    edx,0x0
c0026688:	f7 da                	neg    edx
c002668a:	89 d7                	mov    edi,edx
c002668c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026690:	89 cd                	mov    ebp,ecx
c0026692:	85 ff                	test   edi,edi
c0026694:	75 52                	jne    c00266e8 <__moddi3+0x94>
c0026696:	89 c3                	mov    ebx,eax
c0026698:	39 f0                	cmp    eax,esi
c002669a:	76 24                	jbe    c00266c0 <__moddi3+0x6c>
c002669c:	89 c8                	mov    eax,ecx
c002669e:	89 f2                	mov    edx,esi
c00266a0:	f7 f3                	div    ebx
c00266a2:	89 d6                	mov    esi,edx
c00266a4:	89 f0                	mov    eax,esi
c00266a6:	31 d2                	xor    edx,edx
c00266a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266ac:	85 c9                	test   ecx,ecx
c00266ae:	74 07                	je     c00266b7 <__moddi3+0x63>
c00266b0:	f7 d8                	neg    eax
c00266b2:	83 d2 00             	adc    edx,0x0
c00266b5:	f7 da                	neg    edx
c00266b7:	83 c4 2c             	add    esp,0x2c
c00266ba:	5b                   	pop    ebx
c00266bb:	5e                   	pop    esi
c00266bc:	5f                   	pop    edi
c00266bd:	5d                   	pop    ebp
c00266be:	c3                   	ret    
c00266bf:	90                   	nop
c00266c0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00266c4:	85 db                	test   ebx,ebx
c00266c6:	75 0d                	jne    c00266d5 <__moddi3+0x81>
c00266c8:	b8 01 00 00 00       	mov    eax,0x1
c00266cd:	31 d2                	xor    edx,edx
c00266cf:	f7 f7                	div    edi
c00266d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00266d5:	89 f0                	mov    eax,esi
c00266d7:	31 d2                	xor    edx,edx
c00266d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00266dd:	f7 f7                	div    edi
c00266df:	89 e8                	mov    eax,ebp
c00266e1:	f7 f7                	div    edi
c00266e3:	89 d6                	mov    esi,edx
c00266e5:	eb bd                	jmp    c00266a4 <__moddi3+0x50>
c00266e7:	90                   	nop
c00266e8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00266ec:	39 f7                	cmp    edi,esi
c00266ee:	76 20                	jbe    c0026710 <__moddi3+0xbc>
c00266f0:	89 c8                	mov    eax,ecx
c00266f2:	89 f2                	mov    edx,esi
c00266f4:	eb b2                	jmp    c00266a8 <__moddi3+0x54>
c00266f6:	66 90                	xchg   ax,ax
c00266f8:	f7 d9                	neg    ecx
c00266fa:	83 d3 00             	adc    ebx,0x0
c00266fd:	f7 db                	neg    ebx
c00266ff:	89 de                	mov    esi,ebx
c0026701:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026709:	e9 6f ff ff ff       	jmp    c002667d <__moddi3+0x29>
c002670e:	66 90                	xchg   ax,ax
c0026710:	0f bd c7             	bsr    eax,edi
c0026713:	83 f0 1f             	xor    eax,0x1f
c0026716:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002671a:	75 24                	jne    c0026740 <__moddi3+0xec>
c002671c:	39 f7                	cmp    edi,esi
c002671e:	72 06                	jb     c0026726 <__moddi3+0xd2>
c0026720:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026724:	77 0c                	ja     c0026732 <__moddi3+0xde>
c0026726:	89 e9                	mov    ecx,ebp
c0026728:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002672c:	19 fe                	sbb    esi,edi
c002672e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026736:	89 f2                	mov    edx,esi
c0026738:	e9 6b ff ff ff       	jmp    c00266a8 <__moddi3+0x54>
c002673d:	8d 76 00             	lea    esi,[esi+0x0]
c0026740:	b8 20 00 00 00       	mov    eax,0x20
c0026745:	89 c2                	mov    edx,eax
c0026747:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002674b:	29 da                	sub    edx,ebx
c002674d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026751:	88 d9                	mov    cl,bl
c0026753:	d3 e7                	shl    edi,cl
c0026755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026759:	88 d1                	mov    cl,dl
c002675b:	d3 e8                	shr    eax,cl
c002675d:	09 c7                	or     edi,eax
c002675f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026763:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026767:	89 d8                	mov    eax,ebx
c0026769:	88 d9                	mov    cl,bl
c002676b:	d3 e7                	shl    edi,cl
c002676d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026771:	89 f3                	mov    ebx,esi
c0026773:	88 d1                	mov    cl,dl
c0026775:	d3 eb                	shr    ebx,cl
c0026777:	89 c7                	mov    edi,eax
c0026779:	88 c1                	mov    cl,al
c002677b:	d3 e6                	shl    esi,cl
c002677d:	89 e8                	mov    eax,ebp
c002677f:	88 d1                	mov    cl,dl
c0026781:	d3 e8                	shr    eax,cl
c0026783:	09 f0                	or     eax,esi
c0026785:	89 f9                	mov    ecx,edi
c0026787:	d3 e5                	shl    ebp,cl
c0026789:	89 da                	mov    edx,ebx
c002678b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002678f:	89 d3                	mov    ebx,edx
c0026791:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026795:	89 c6                	mov    esi,eax
c0026797:	89 d1                	mov    ecx,edx
c0026799:	39 d3                	cmp    ebx,edx
c002679b:	72 27                	jb     c00267c4 <__moddi3+0x170>
c002679d:	74 21                	je     c00267c0 <__moddi3+0x16c>
c002679f:	29 f5                	sub    ebp,esi
c00267a1:	19 cb                	sbb    ebx,ecx
c00267a3:	89 de                	mov    esi,ebx
c00267a5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00267a9:	d3 e6                	shl    esi,cl
c00267ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00267af:	89 f9                	mov    ecx,edi
c00267b1:	d3 ed                	shr    ebp,cl
c00267b3:	09 ee                	or     esi,ebp
c00267b5:	89 f0                	mov    eax,esi
c00267b7:	d3 eb                	shr    ebx,cl
c00267b9:	89 da                	mov    edx,ebx
c00267bb:	e9 e8 fe ff ff       	jmp    c00266a8 <__moddi3+0x54>
c00267c0:	39 c5                	cmp    ebp,eax
c00267c2:	73 db                	jae    c002679f <__moddi3+0x14b>
c00267c4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00267c8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00267cc:	89 d1                	mov    ecx,edx
c00267ce:	89 c6                	mov    esi,eax
c00267d0:	eb cd                	jmp    c002679f <__moddi3+0x14b>
c00267d2:	66 90                	xchg   ax,ax

c00267d4 <__udivdi3>:
c00267d4:	55                   	push   ebp
c00267d5:	57                   	push   edi
c00267d6:	56                   	push   esi
c00267d7:	53                   	push   ebx
c00267d8:	83 ec 1c             	sub    esp,0x1c
c00267db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00267df:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00267e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00267e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267eb:	85 d2                	test   edx,edx
c00267ed:	75 41                	jne    c0026830 <__udivdi3+0x5c>
c00267ef:	39 f7                	cmp    edi,esi
c00267f1:	76 15                	jbe    c0026808 <__udivdi3+0x34>
c00267f3:	89 e8                	mov    eax,ebp
c00267f5:	89 f2                	mov    edx,esi
c00267f7:	f7 f7                	div    edi
c00267f9:	31 db                	xor    ebx,ebx
c00267fb:	89 da                	mov    edx,ebx
c00267fd:	83 c4 1c             	add    esp,0x1c
c0026800:	5b                   	pop    ebx
c0026801:	5e                   	pop    esi
c0026802:	5f                   	pop    edi
c0026803:	5d                   	pop    ebp
c0026804:	c3                   	ret    
c0026805:	8d 76 00             	lea    esi,[esi+0x0]
c0026808:	89 f9                	mov    ecx,edi
c002680a:	85 ff                	test   edi,edi
c002680c:	75 0b                	jne    c0026819 <__udivdi3+0x45>
c002680e:	b8 01 00 00 00       	mov    eax,0x1
c0026813:	31 d2                	xor    edx,edx
c0026815:	f7 f7                	div    edi
c0026817:	89 c1                	mov    ecx,eax
c0026819:	31 d2                	xor    edx,edx
c002681b:	89 f0                	mov    eax,esi
c002681d:	f7 f1                	div    ecx
c002681f:	89 c3                	mov    ebx,eax
c0026821:	89 e8                	mov    eax,ebp
c0026823:	f7 f1                	div    ecx
c0026825:	89 da                	mov    edx,ebx
c0026827:	83 c4 1c             	add    esp,0x1c
c002682a:	5b                   	pop    ebx
c002682b:	5e                   	pop    esi
c002682c:	5f                   	pop    edi
c002682d:	5d                   	pop    ebp
c002682e:	c3                   	ret    
c002682f:	90                   	nop
c0026830:	39 f2                	cmp    edx,esi
c0026832:	77 1c                	ja     c0026850 <__udivdi3+0x7c>
c0026834:	0f bd da             	bsr    ebx,edx
c0026837:	83 f3 1f             	xor    ebx,0x1f
c002683a:	75 24                	jne    c0026860 <__udivdi3+0x8c>
c002683c:	39 f2                	cmp    edx,esi
c002683e:	72 08                	jb     c0026848 <__udivdi3+0x74>
c0026840:	39 ef                	cmp    edi,ebp
c0026842:	0f 87 84 00 00 00    	ja     c00268cc <__udivdi3+0xf8>
c0026848:	b8 01 00 00 00       	mov    eax,0x1
c002684d:	eb ac                	jmp    c00267fb <__udivdi3+0x27>
c002684f:	90                   	nop
c0026850:	31 db                	xor    ebx,ebx
c0026852:	31 c0                	xor    eax,eax
c0026854:	89 da                	mov    edx,ebx
c0026856:	83 c4 1c             	add    esp,0x1c
c0026859:	5b                   	pop    ebx
c002685a:	5e                   	pop    esi
c002685b:	5f                   	pop    edi
c002685c:	5d                   	pop    ebp
c002685d:	c3                   	ret    
c002685e:	66 90                	xchg   ax,ax
c0026860:	b8 20 00 00 00       	mov    eax,0x20
c0026865:	29 d8                	sub    eax,ebx
c0026867:	88 d9                	mov    cl,bl
c0026869:	d3 e2                	shl    edx,cl
c002686b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002686f:	89 fa                	mov    edx,edi
c0026871:	88 c1                	mov    cl,al
c0026873:	d3 ea                	shr    edx,cl
c0026875:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026879:	09 d1                	or     ecx,edx
c002687b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002687f:	88 d9                	mov    cl,bl
c0026881:	d3 e7                	shl    edi,cl
c0026883:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026887:	89 f7                	mov    edi,esi
c0026889:	88 c1                	mov    cl,al
c002688b:	d3 ef                	shr    edi,cl
c002688d:	88 d9                	mov    cl,bl
c002688f:	d3 e6                	shl    esi,cl
c0026891:	89 ea                	mov    edx,ebp
c0026893:	88 c1                	mov    cl,al
c0026895:	d3 ea                	shr    edx,cl
c0026897:	09 d6                	or     esi,edx
c0026899:	89 f0                	mov    eax,esi
c002689b:	89 fa                	mov    edx,edi
c002689d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268a1:	89 d7                	mov    edi,edx
c00268a3:	89 c6                	mov    esi,eax
c00268a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268a9:	39 d7                	cmp    edi,edx
c00268ab:	72 13                	jb     c00268c0 <__udivdi3+0xec>
c00268ad:	74 09                	je     c00268b8 <__udivdi3+0xe4>
c00268af:	89 f0                	mov    eax,esi
c00268b1:	31 db                	xor    ebx,ebx
c00268b3:	e9 43 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268b8:	88 d9                	mov    cl,bl
c00268ba:	d3 e5                	shl    ebp,cl
c00268bc:	39 c5                	cmp    ebp,eax
c00268be:	73 ef                	jae    c00268af <__udivdi3+0xdb>
c00268c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00268c3:	31 db                	xor    ebx,ebx
c00268c5:	e9 31 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268ca:	66 90                	xchg   ax,ax
c00268cc:	31 c0                	xor    eax,eax
c00268ce:	e9 28 ff ff ff       	jmp    c00267fb <__udivdi3+0x27>
c00268d3:	90                   	nop

c00268d4 <__umoddi3>:
c00268d4:	55                   	push   ebp
c00268d5:	57                   	push   edi
c00268d6:	56                   	push   esi
c00268d7:	53                   	push   ebx
c00268d8:	83 ec 1c             	sub    esp,0x1c
c00268db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00268df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00268e3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00268e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00268eb:	89 da                	mov    edx,ebx
c00268ed:	85 c0                	test   eax,eax
c00268ef:	75 37                	jne    c0026928 <__umoddi3+0x54>
c00268f1:	39 df                	cmp    edi,ebx
c00268f3:	76 13                	jbe    c0026908 <__umoddi3+0x34>
c00268f5:	89 f0                	mov    eax,esi
c00268f7:	f7 f7                	div    edi
c00268f9:	89 d0                	mov    eax,edx
c00268fb:	31 d2                	xor    edx,edx
c00268fd:	83 c4 1c             	add    esp,0x1c
c0026900:	5b                   	pop    ebx
c0026901:	5e                   	pop    esi
c0026902:	5f                   	pop    edi
c0026903:	5d                   	pop    ebp
c0026904:	c3                   	ret    
c0026905:	8d 76 00             	lea    esi,[esi+0x0]
c0026908:	89 fd                	mov    ebp,edi
c002690a:	85 ff                	test   edi,edi
c002690c:	75 0b                	jne    c0026919 <__umoddi3+0x45>
c002690e:	b8 01 00 00 00       	mov    eax,0x1
c0026913:	31 d2                	xor    edx,edx
c0026915:	f7 f7                	div    edi
c0026917:	89 c5                	mov    ebp,eax
c0026919:	89 d8                	mov    eax,ebx
c002691b:	31 d2                	xor    edx,edx
c002691d:	f7 f5                	div    ebp
c002691f:	89 f0                	mov    eax,esi
c0026921:	f7 f5                	div    ebp
c0026923:	89 d0                	mov    eax,edx
c0026925:	eb d4                	jmp    c00268fb <__umoddi3+0x27>
c0026927:	90                   	nop
c0026928:	89 f1                	mov    ecx,esi
c002692a:	39 d8                	cmp    eax,ebx
c002692c:	76 0a                	jbe    c0026938 <__umoddi3+0x64>
c002692e:	89 f0                	mov    eax,esi
c0026930:	83 c4 1c             	add    esp,0x1c
c0026933:	5b                   	pop    ebx
c0026934:	5e                   	pop    esi
c0026935:	5f                   	pop    edi
c0026936:	5d                   	pop    ebp
c0026937:	c3                   	ret    
c0026938:	0f bd e8             	bsr    ebp,eax
c002693b:	83 f5 1f             	xor    ebp,0x1f
c002693e:	75 1c                	jne    c002695c <__umoddi3+0x88>
c0026940:	39 d8                	cmp    eax,ebx
c0026942:	72 04                	jb     c0026948 <__umoddi3+0x74>
c0026944:	39 f7                	cmp    edi,esi
c0026946:	77 08                	ja     c0026950 <__umoddi3+0x7c>
c0026948:	89 da                	mov    edx,ebx
c002694a:	29 fe                	sub    esi,edi
c002694c:	19 c2                	sbb    edx,eax
c002694e:	89 f1                	mov    ecx,esi
c0026950:	89 c8                	mov    eax,ecx
c0026952:	83 c4 1c             	add    esp,0x1c
c0026955:	5b                   	pop    ebx
c0026956:	5e                   	pop    esi
c0026957:	5f                   	pop    edi
c0026958:	5d                   	pop    ebp
c0026959:	c3                   	ret    
c002695a:	66 90                	xchg   ax,ax
c002695c:	ba 20 00 00 00       	mov    edx,0x20
c0026961:	29 ea                	sub    edx,ebp
c0026963:	89 e9                	mov    ecx,ebp
c0026965:	d3 e0                	shl    eax,cl
c0026967:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002696b:	89 f8                	mov    eax,edi
c002696d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026971:	88 d1                	mov    cl,dl
c0026973:	d3 e8                	shr    eax,cl
c0026975:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026979:	09 c1                	or     ecx,eax
c002697b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002697f:	89 e9                	mov    ecx,ebp
c0026981:	d3 e7                	shl    edi,cl
c0026983:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026987:	89 d8                	mov    eax,ebx
c0026989:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002698d:	88 d1                	mov    cl,dl
c002698f:	d3 e8                	shr    eax,cl
c0026991:	89 c7                	mov    edi,eax
c0026993:	89 e9                	mov    ecx,ebp
c0026995:	d3 e3                	shl    ebx,cl
c0026997:	89 f0                	mov    eax,esi
c0026999:	88 d1                	mov    cl,dl
c002699b:	d3 e8                	shr    eax,cl
c002699d:	09 d8                	or     eax,ebx
c002699f:	89 e9                	mov    ecx,ebp
c00269a1:	d3 e6                	shl    esi,cl
c00269a3:	89 f3                	mov    ebx,esi
c00269a5:	89 fa                	mov    edx,edi
c00269a7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00269ab:	89 d1                	mov    ecx,edx
c00269ad:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00269b1:	89 c6                	mov    esi,eax
c00269b3:	89 d7                	mov    edi,edx
c00269b5:	39 d1                	cmp    ecx,edx
c00269b7:	72 27                	jb     c00269e0 <__umoddi3+0x10c>
c00269b9:	74 21                	je     c00269dc <__umoddi3+0x108>
c00269bb:	89 ca                	mov    edx,ecx
c00269bd:	29 f3                	sub    ebx,esi
c00269bf:	19 fa                	sbb    edx,edi
c00269c1:	89 d0                	mov    eax,edx
c00269c3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00269c7:	d3 e0                	shl    eax,cl
c00269c9:	89 e9                	mov    ecx,ebp
c00269cb:	d3 eb                	shr    ebx,cl
c00269cd:	09 d8                	or     eax,ebx
c00269cf:	d3 ea                	shr    edx,cl
c00269d1:	83 c4 1c             	add    esp,0x1c
c00269d4:	5b                   	pop    ebx
c00269d5:	5e                   	pop    esi
c00269d6:	5f                   	pop    edi
c00269d7:	5d                   	pop    ebp
c00269d8:	c3                   	ret    
c00269d9:	8d 76 00             	lea    esi,[esi+0x0]
c00269dc:	39 c3                	cmp    ebx,eax
c00269de:	73 db                	jae    c00269bb <__umoddi3+0xe7>
c00269e0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00269e4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00269e8:	89 d7                	mov    edi,edx
c00269ea:	89 c6                	mov    esi,eax
c00269ec:	eb cd                	jmp    c00269bb <__umoddi3+0xe7>

c00269ee <__addsf3>:
c00269ee:	55                   	push   ebp
c00269ef:	89 e5                	mov    ebp,esp
c00269f1:	57                   	push   edi
c00269f2:	56                   	push   esi
c00269f3:	53                   	push   ebx
c00269f4:	83 ec 08             	sub    esp,0x8
c00269f7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269fa:	89 fa                	mov    edx,edi
c00269fc:	89 f8                	mov    eax,edi
c00269fe:	c1 f8 17             	sar    eax,0x17
c0026a01:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a04:	c1 e2 08             	shl    edx,0x8
c0026a07:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026a0d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a10:	89 de                	mov    esi,ebx
c0026a12:	c1 fe 17             	sar    esi,0x17
c0026a15:	c1 e3 08             	shl    ebx,0x8
c0026a18:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026a1e:	31 f0                	xor    eax,esi
c0026a20:	0f 88 3b 01 00 00    	js     c0026b61 <__addsf3+0x173>
c0026a26:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026a29:	29 f1                	sub    ecx,esi
c0026a2b:	85 c9                	test   ecx,ecx
c0026a2d:	7e 54                	jle    c0026a83 <__addsf3+0x95>
c0026a2f:	89 f0                	mov    eax,esi
c0026a31:	84 c0                	test   al,al
c0026a33:	75 10                	jne    c0026a45 <__addsf3+0x57>
c0026a35:	85 db                	test   ebx,ebx
c0026a37:	0f 84 aa 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a3d:	49                   	dec    ecx
c0026a3e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a41:	74 38                	je     c0026a7b <__addsf3+0x8d>
c0026a43:	eb 13                	jmp    c0026a58 <__addsf3+0x6a>
c0026a45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a48:	f7 d0                	not    eax
c0026a4a:	84 c0                	test   al,al
c0026a4c:	0f 84 95 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a52:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026a58:	83 f9 1f             	cmp    ecx,0x1f
c0026a5b:	0f 8f 86 02 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026a61:	89 de                	mov    esi,ebx
c0026a63:	d3 ee                	shr    esi,cl
c0026a65:	b8 20 00 00 00       	mov    eax,0x20
c0026a6a:	29 c8                	sub    eax,ecx
c0026a6c:	89 c1                	mov    ecx,eax
c0026a6e:	d3 e3                	shl    ebx,cl
c0026a70:	31 c0                	xor    eax,eax
c0026a72:	85 db                	test   ebx,ebx
c0026a74:	0f 95 c0             	setne  al
c0026a77:	09 f0                	or     eax,esi
c0026a79:	01 d0                	add    eax,edx
c0026a7b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a7e:	e9 b6 00 00 00       	jmp    c0026b39 <__addsf3+0x14b>
c0026a83:	74 5c                	je     c0026ae1 <__addsf3+0xf3>
c0026a85:	89 f1                	mov    ecx,esi
c0026a87:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026a8a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a8d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a91:	75 14                	jne    c0026aa7 <__addsf3+0xb9>
c0026a93:	85 d2                	test   edx,edx
c0026a95:	0f 84 4c 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026a9b:	49                   	dec    ecx
c0026a9c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a9f:	0f 84 94 00 00 00    	je     c0026b39 <__addsf3+0x14b>
c0026aa5:	eb 12                	jmp    c0026ab9 <__addsf3+0xcb>
c0026aa7:	89 f0                	mov    eax,esi
c0026aa9:	f7 d0                	not    eax
c0026aab:	84 c0                	test   al,al
c0026aad:	0f 84 34 02 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026ab3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ab9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026abc:	83 f9 1f             	cmp    ecx,0x1f
c0026abf:	0f 8f 22 02 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026ac5:	89 d7                	mov    edi,edx
c0026ac7:	d3 ef                	shr    edi,cl
c0026ac9:	b8 20 00 00 00       	mov    eax,0x20
c0026ace:	29 c8                	sub    eax,ecx
c0026ad0:	89 c1                	mov    ecx,eax
c0026ad2:	d3 e2                	shl    edx,cl
c0026ad4:	31 c0                	xor    eax,eax
c0026ad6:	85 d2                	test   edx,edx
c0026ad8:	0f 95 c0             	setne  al
c0026adb:	09 f8                	or     eax,edi
c0026add:	01 d8                	add    eax,ebx
c0026adf:	eb 58                	jmp    c0026b39 <__addsf3+0x14b>
c0026ae1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ae4:	8d 70 01             	lea    esi,[eax+0x1]
c0026ae7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026aed:	75 32                	jne    c0026b21 <__addsf3+0x133>
c0026aef:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026af3:	75 1f                	jne    c0026b14 <__addsf3+0x126>
c0026af5:	85 d2                	test   edx,edx
c0026af7:	0f 84 e0 01 00 00    	je     c0026cdd <__addsf3+0x2ef>
c0026afd:	85 db                	test   ebx,ebx
c0026aff:	0f 84 e2 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b05:	89 d0                	mov    eax,edx
c0026b07:	01 d8                	add    eax,ebx
c0026b09:	0f 89 a9 01 00 00    	jns    c0026cb8 <__addsf3+0x2ca>
c0026b0f:	e9 9d 01 00 00       	jmp    c0026cb1 <__addsf3+0x2c3>
c0026b14:	85 d2                	test   edx,edx
c0026b16:	0f 85 cb 01 00 00    	jne    c0026ce7 <__addsf3+0x2f9>
c0026b1c:	e9 bc 01 00 00       	jmp    c0026cdd <__addsf3+0x2ef>
c0026b21:	31 c0                	xor    eax,eax
c0026b23:	89 f1                	mov    ecx,esi
c0026b25:	f7 d1                	not    ecx
c0026b27:	84 c9                	test   cl,cl
c0026b29:	0f 84 90 01 00 00    	je     c0026cbf <__addsf3+0x2d1>
c0026b2f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b32:	d1 e8                	shr    eax,1
c0026b34:	e9 86 01 00 00       	jmp    c0026cbf <__addsf3+0x2d1>
c0026b39:	85 c0                	test   eax,eax
c0026b3b:	0f 89 7e 01 00 00    	jns    c0026cbf <__addsf3+0x2d1>
c0026b41:	46                   	inc    esi
c0026b42:	89 f2                	mov    edx,esi
c0026b44:	f7 d2                	not    edx
c0026b46:	84 d2                	test   dl,dl
c0026b48:	0f 84 6f 01 00 00    	je     c0026cbd <__addsf3+0x2cf>
c0026b4e:	89 c2                	mov    edx,eax
c0026b50:	83 e2 01             	and    edx,0x1
c0026b53:	d1 e8                	shr    eax,1
c0026b55:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026b5a:	09 d0                	or     eax,edx
c0026b5c:	e9 5e 01 00 00       	jmp    c0026cbf <__addsf3+0x2d1>
c0026b61:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026b65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b68:	89 f0                	mov    eax,esi
c0026b6a:	0f b6 c0             	movzx  eax,al
c0026b6d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b70:	29 c1                	sub    ecx,eax
c0026b72:	85 c9                	test   ecx,ecx
c0026b74:	7e 55                	jle    c0026bcb <__addsf3+0x1dd>
c0026b76:	85 c0                	test   eax,eax
c0026b78:	75 11                	jne    c0026b8b <__addsf3+0x19d>
c0026b7a:	85 db                	test   ebx,ebx
c0026b7c:	0f 84 65 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b82:	49                   	dec    ecx
c0026b83:	75 19                	jne    c0026b9e <__addsf3+0x1b0>
c0026b85:	89 d0                	mov    eax,edx
c0026b87:	29 d8                	sub    eax,ebx
c0026b89:	eb 38                	jmp    c0026bc3 <__addsf3+0x1d5>
c0026b8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8e:	f7 d0                	not    eax
c0026b90:	84 c0                	test   al,al
c0026b92:	0f 84 4f 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026b98:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b9e:	83 f9 1f             	cmp    ecx,0x1f
c0026ba1:	0f 8f 40 01 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026ba7:	89 de                	mov    esi,ebx
c0026ba9:	d3 ee                	shr    esi,cl
c0026bab:	b8 20 00 00 00       	mov    eax,0x20
c0026bb0:	29 c8                	sub    eax,ecx
c0026bb2:	89 c1                	mov    ecx,eax
c0026bb4:	d3 e3                	shl    ebx,cl
c0026bb6:	31 c0                	xor    eax,eax
c0026bb8:	85 db                	test   ebx,ebx
c0026bba:	0f 95 c0             	setne  al
c0026bbd:	09 f0                	or     eax,esi
c0026bbf:	29 c2                	sub    edx,eax
c0026bc1:	89 d0                	mov    eax,edx
c0026bc3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bc6:	e9 af 00 00 00       	jmp    c0026c7a <__addsf3+0x28c>
c0026bcb:	74 5c                	je     c0026c29 <__addsf3+0x23b>
c0026bcd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026bd0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026bd3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026bd7:	75 14                	jne    c0026bed <__addsf3+0x1ff>
c0026bd9:	85 d2                	test   edx,edx
c0026bdb:	0f 84 06 01 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026be1:	48                   	dec    eax
c0026be2:	75 1b                	jne    c0026bff <__addsf3+0x211>
c0026be4:	89 d8                	mov    eax,ebx
c0026be6:	29 d0                	sub    eax,edx
c0026be8:	e9 8d 00 00 00       	jmp    c0026c7a <__addsf3+0x28c>
c0026bed:	89 f1                	mov    ecx,esi
c0026bef:	f7 d1                	not    ecx
c0026bf1:	84 c9                	test   cl,cl
c0026bf3:	0f 84 ee 00 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026bf9:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026bff:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c02:	83 f8 1f             	cmp    eax,0x1f
c0026c05:	0f 8f dc 00 00 00    	jg     c0026ce7 <__addsf3+0x2f9>
c0026c0b:	89 d7                	mov    edi,edx
c0026c0d:	88 c1                	mov    cl,al
c0026c0f:	d3 ef                	shr    edi,cl
c0026c11:	b9 20 00 00 00       	mov    ecx,0x20
c0026c16:	29 c1                	sub    ecx,eax
c0026c18:	d3 e2                	shl    edx,cl
c0026c1a:	31 c0                	xor    eax,eax
c0026c1c:	85 d2                	test   edx,edx
c0026c1e:	0f 95 c0             	setne  al
c0026c21:	09 f8                	or     eax,edi
c0026c23:	29 c3                	sub    ebx,eax
c0026c25:	89 d8                	mov    eax,ebx
c0026c27:	eb 51                	jmp    c0026c7a <__addsf3+0x28c>
c0026c29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c2c:	40                   	inc    eax
c0026c2d:	a8 fe                	test   al,0xfe
c0026c2f:	75 3d                	jne    c0026c6e <__addsf3+0x280>
c0026c31:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c35:	0f 85 a7 00 00 00    	jne    c0026ce2 <__addsf3+0x2f4>
c0026c3b:	85 d2                	test   edx,edx
c0026c3d:	75 12                	jne    c0026c51 <__addsf3+0x263>
c0026c3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c42:	85 db                	test   ebx,ebx
c0026c44:	0f 85 9d 00 00 00    	jne    c0026ce7 <__addsf3+0x2f9>
c0026c4a:	31 ff                	xor    edi,edi
c0026c4c:	e9 96 00 00 00       	jmp    c0026ce7 <__addsf3+0x2f9>
c0026c51:	85 db                	test   ebx,ebx
c0026c53:	0f 84 8e 00 00 00    	je     c0026ce7 <__addsf3+0x2f9>
c0026c59:	89 d0                	mov    eax,edx
c0026c5b:	29 d8                	sub    eax,ebx
c0026c5d:	79 06                	jns    c0026c65 <__addsf3+0x277>
c0026c5f:	89 d8                	mov    eax,ebx
c0026c61:	29 d0                	sub    eax,edx
c0026c63:	eb 5a                	jmp    c0026cbf <__addsf3+0x2d1>
c0026c65:	bf 00 00 00 00       	mov    edi,0x0
c0026c6a:	74 7b                	je     c0026ce7 <__addsf3+0x2f9>
c0026c6c:	eb 4a                	jmp    c0026cb8 <__addsf3+0x2ca>
c0026c6e:	89 d0                	mov    eax,edx
c0026c70:	29 d8                	sub    eax,ebx
c0026c72:	79 12                	jns    c0026c86 <__addsf3+0x298>
c0026c74:	89 d8                	mov    eax,ebx
c0026c76:	29 d0                	sub    eax,edx
c0026c78:	eb 09                	jmp    c0026c83 <__addsf3+0x295>
c0026c7a:	85 c0                	test   eax,eax
c0026c7c:	79 41                	jns    c0026cbf <__addsf3+0x2d1>
c0026c7e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c83:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026c86:	31 f6                	xor    esi,esi
c0026c88:	85 c0                	test   eax,eax
c0026c8a:	74 33                	je     c0026cbf <__addsf3+0x2d1>
c0026c8c:	0f bd c8             	bsr    ecx,eax
c0026c8f:	83 f1 1f             	xor    ecx,0x1f
c0026c92:	d3 e0                	shl    eax,cl
c0026c94:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026c98:	39 ca                	cmp    edx,ecx
c0026c9a:	7f 10                	jg     c0026cac <__addsf3+0x2be>
c0026c9c:	29 d1                	sub    ecx,edx
c0026c9e:	41                   	inc    ecx
c0026c9f:	d3 e8                	shr    eax,cl
c0026ca1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ca4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026caa:	eb 13                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cac:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026caf:	29 ce                	sub    esi,ecx
c0026cb1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026cb6:	eb 07                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cb8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026cbb:	eb 02                	jmp    c0026cbf <__addsf3+0x2d1>
c0026cbd:	31 c0                	xor    eax,eax
c0026cbf:	89 c2                	mov    edx,eax
c0026cc1:	c1 ea 08             	shr    edx,0x8
c0026cc4:	a8 7f                	test   al,0x7f
c0026cc6:	0f 95 c1             	setne  cl
c0026cc9:	09 d1                	or     ecx,edx
c0026ccb:	83 e1 01             	and    ecx,0x1
c0026cce:	c1 e8 07             	shr    eax,0x7
c0026cd1:	21 c8                	and    eax,ecx
c0026cd3:	c1 e6 17             	shl    esi,0x17
c0026cd6:	09 d6                	or     esi,edx
c0026cd8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026cdb:	eb 0a                	jmp    c0026ce7 <__addsf3+0x2f9>
c0026cdd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026ce0:	eb 05                	jmp    c0026ce7 <__addsf3+0x2f9>
c0026ce2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026ce7:	89 f8                	mov    eax,edi
c0026ce9:	5a                   	pop    edx
c0026cea:	59                   	pop    ecx
c0026ceb:	5b                   	pop    ebx
c0026cec:	5e                   	pop    esi
c0026ced:	5f                   	pop    edi
c0026cee:	5d                   	pop    ebp
c0026cef:	c3                   	ret    

c0026cf0 <__subsf3>:
c0026cf0:	55                   	push   ebp
c0026cf1:	89 e5                	mov    ebp,esp
c0026cf3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026cf6:	05 00 00 00 80       	add    eax,0x80000000
c0026cfb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026cfe:	5d                   	pop    ebp
c0026cff:	e9 ea fc ff ff       	jmp    c00269ee <__addsf3>

c0026d04 <__negsf2>:
c0026d04:	55                   	push   ebp
c0026d05:	89 e5                	mov    ebp,esp
c0026d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d0a:	05 00 00 00 80       	add    eax,0x80000000
c0026d0f:	5d                   	pop    ebp
c0026d10:	c3                   	ret    

c0026d11 <__mulsf3>:
c0026d11:	55                   	push   ebp
c0026d12:	89 e5                	mov    ebp,esp
c0026d14:	57                   	push   edi
c0026d15:	56                   	push   esi
c0026d16:	53                   	push   ebx
c0026d17:	83 ec 1c             	sub    esp,0x1c
c0026d1a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026d1d:	89 f0                	mov    eax,esi
c0026d1f:	89 f1                	mov    ecx,esi
c0026d21:	c1 f9 17             	sar    ecx,0x17
c0026d24:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d27:	c1 e0 08             	shl    eax,0x8
c0026d2a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d2f:	89 c1                	mov    ecx,eax
c0026d31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d34:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d37:	89 c7                	mov    edi,eax
c0026d39:	c1 ff 17             	sar    edi,0x17
c0026d3c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d40:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d43:	89 f8                	mov    eax,edi
c0026d45:	0f b6 c0             	movzx  eax,al
c0026d48:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026d4b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026d4f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d52:	42                   	inc    edx
c0026d53:	80 e2 fe             	and    dl,0xfe
c0026d56:	75 7b                	jne    c0026dd3 <__mulsf3+0xc2>
c0026d58:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d5c:	74 54                	je     c0026db2 <__mulsf3+0xa1>
c0026d5e:	85 c9                	test   ecx,ecx
c0026d60:	0f 85 64 01 00 00    	jne    c0026eca <__mulsf3+0x1b9>
c0026d66:	8d 57 01             	lea    edx,[edi+0x1]
c0026d69:	80 e2 fe             	and    dl,0xfe
c0026d6c:	75 1f                	jne    c0026d8d <__mulsf3+0x7c>
c0026d6e:	85 c0                	test   eax,eax
c0026d70:	b8 00 00 00 00       	mov    eax,0x0
c0026d75:	74 29                	je     c0026da0 <__mulsf3+0x8f>
c0026d77:	53                   	push   ebx
c0026d78:	53                   	push   ebx
c0026d79:	50                   	push   eax
c0026d7a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d7d:	e8 96 05 00 00       	call   c0027318 <__nesf2>
c0026d82:	83 c4 10             	add    esp,0x10
c0026d85:	85 c0                	test   eax,eax
c0026d87:	0f 85 3a 01 00 00    	jne    c0026ec7 <__mulsf3+0x1b6>
c0026d8d:	85 ff                	test   edi,edi
c0026d8f:	0f 89 35 01 00 00    	jns    c0026eca <__mulsf3+0x1b9>
c0026d95:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026d9b:	e9 2a 01 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026da0:	51                   	push   ecx
c0026da1:	51                   	push   ecx
c0026da2:	50                   	push   eax
c0026da3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026da6:	e8 6d 05 00 00       	call   c0027318 <__nesf2>
c0026dab:	83 c4 10             	add    esp,0x10
c0026dae:	85 c0                	test   eax,eax
c0026db0:	eb 15                	jmp    c0026dc7 <__mulsf3+0xb6>
c0026db2:	85 c9                	test   ecx,ecx
c0026db4:	74 0b                	je     c0026dc1 <__mulsf3+0xb0>
c0026db6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026db9:	01 c9                	add    ecx,ecx
c0026dbb:	78 16                	js     c0026dd3 <__mulsf3+0xc2>
c0026dbd:	89 d3                	mov    ebx,edx
c0026dbf:	eb f5                	jmp    c0026db6 <__mulsf3+0xa5>
c0026dc1:	89 f8                	mov    eax,edi
c0026dc3:	f7 d0                	not    eax
c0026dc5:	84 c0                	test   al,al
c0026dc7:	75 c4                	jne    c0026d8d <__mulsf3+0x7c>
c0026dc9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026dce:	e9 f7 00 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026dd3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026dd6:	c1 e6 08             	shl    esi,0x8
c0026dd9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026ddf:	8d 57 01             	lea    edx,[edi+0x1]
c0026de2:	80 e2 fe             	and    dl,0xfe
c0026de5:	75 63                	jne    c0026e4a <__mulsf3+0x139>
c0026de7:	85 c0                	test   eax,eax
c0026de9:	74 2f                	je     c0026e1a <__mulsf3+0x109>
c0026deb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026def:	0f 89 d2 00 00 00    	jns    c0026ec7 <__mulsf3+0x1b6>
c0026df5:	52                   	push   edx
c0026df6:	52                   	push   edx
c0026df7:	6a 00                	push   0x0
c0026df9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dfc:	e8 dc 04 00 00       	call   c00272dd <__eqsf2>
c0026e01:	83 c4 10             	add    esp,0x10
c0026e04:	85 c0                	test   eax,eax
c0026e06:	0f 85 bb 00 00 00    	jne    c0026ec7 <__mulsf3+0x1b6>
c0026e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e0f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026e15:	e9 b0 00 00 00       	jmp    c0026eca <__mulsf3+0x1b9>
c0026e1a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e1d:	50                   	push   eax
c0026e1e:	50                   	push   eax
c0026e1f:	6a 00                	push   0x0
c0026e21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e24:	e8 b4 04 00 00       	call   c00272dd <__eqsf2>
c0026e29:	83 c4 10             	add    esp,0x10
c0026e2c:	85 c0                	test   eax,eax
c0026e2e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e31:	75 0c                	jne    c0026e3f <__mulsf3+0x12e>
c0026e33:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e37:	0f 89 8a 00 00 00    	jns    c0026ec7 <__mulsf3+0x1b6>
c0026e3d:	eb cd                	jmp    c0026e0c <__mulsf3+0xfb>
c0026e3f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026e42:	01 f6                	add    esi,esi
c0026e44:	78 04                	js     c0026e4a <__mulsf3+0x139>
c0026e46:	89 c3                	mov    ebx,eax
c0026e48:	eb f5                	jmp    c0026e3f <__mulsf3+0x12e>
c0026e4a:	89 c8                	mov    eax,ecx
c0026e4c:	0d 00 00 00 80       	or     eax,0x80000000
c0026e51:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026e57:	f7 e6                	mul    esi
c0026e59:	85 c0                	test   eax,eax
c0026e5b:	0f 95 c0             	setne  al
c0026e5e:	0f b6 c0             	movzx  eax,al
c0026e61:	09 c2                	or     edx,eax
c0026e63:	78 03                	js     c0026e68 <__mulsf3+0x157>
c0026e65:	01 d2                	add    edx,edx
c0026e67:	4b                   	dec    ebx
c0026e68:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026e6e:	7f 22                	jg     c0026e92 <__mulsf3+0x181>
c0026e70:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e76:	85 db                	test   ebx,ebx
c0026e78:	7f 23                	jg     c0026e9d <__mulsf3+0x18c>
c0026e7a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026e7d:	7c 1a                	jl     c0026e99 <__mulsf3+0x188>
c0026e7f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e85:	b9 01 00 00 00       	mov    ecx,0x1
c0026e8a:	29 d9                	sub    ecx,ebx
c0026e8c:	d3 ea                	shr    edx,cl
c0026e8e:	31 db                	xor    ebx,ebx
c0026e90:	eb 0b                	jmp    c0026e9d <__mulsf3+0x18c>
c0026e92:	bb ff 00 00 00       	mov    ebx,0xff
c0026e97:	eb 02                	jmp    c0026e9b <__mulsf3+0x18a>
c0026e99:	31 db                	xor    ebx,ebx
c0026e9b:	31 d2                	xor    edx,edx
c0026e9d:	89 d0                	mov    eax,edx
c0026e9f:	c1 e8 08             	shr    eax,0x8
c0026ea2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ea5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026eab:	09 fb                	or     ebx,edi
c0026ead:	c1 e3 17             	shl    ebx,0x17
c0026eb0:	09 c3                	or     ebx,eax
c0026eb2:	f6 c2 7f             	test   dl,0x7f
c0026eb5:	0f 95 c1             	setne  cl
c0026eb8:	09 c8                	or     eax,ecx
c0026eba:	83 e0 01             	and    eax,0x1
c0026ebd:	c1 ea 07             	shr    edx,0x7
c0026ec0:	21 c2                	and    edx,eax
c0026ec2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026ec5:	eb 03                	jmp    c0026eca <__mulsf3+0x1b9>
c0026ec7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026eca:	89 f0                	mov    eax,esi
c0026ecc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ecf:	5b                   	pop    ebx
c0026ed0:	5e                   	pop    esi
c0026ed1:	5f                   	pop    edi
c0026ed2:	5d                   	pop    ebp
c0026ed3:	c3                   	ret    

c0026ed4 <__divsf3>:
c0026ed4:	55                   	push   ebp
c0026ed5:	89 e5                	mov    ebp,esp
c0026ed7:	57                   	push   edi
c0026ed8:	56                   	push   esi
c0026ed9:	53                   	push   ebx
c0026eda:	83 ec 1c             	sub    esp,0x1c
c0026edd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ee0:	89 d8                	mov    eax,ebx
c0026ee2:	89 d9                	mov    ecx,ebx
c0026ee4:	c1 f9 17             	sar    ecx,0x17
c0026ee7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026eea:	c1 e0 08             	shl    eax,0x8
c0026eed:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ef2:	89 c1                	mov    ecx,eax
c0026ef4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ef7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026efa:	89 c7                	mov    edi,eax
c0026efc:	c1 ff 17             	sar    edi,0x17
c0026eff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f03:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f06:	89 f8                	mov    eax,edi
c0026f08:	0f b6 c0             	movzx  eax,al
c0026f0b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f0e:	29 c6                	sub    esi,eax
c0026f10:	83 c6 7f             	add    esi,0x7f
c0026f13:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f16:	42                   	inc    edx
c0026f17:	80 e2 fe             	and    dl,0xfe
c0026f1a:	0f 85 9c 00 00 00    	jne    c0026fbc <__divsf3+0xe8>
c0026f20:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f24:	74 33                	je     c0026f59 <__divsf3+0x85>
c0026f26:	85 c9                	test   ecx,ecx
c0026f28:	0f 85 c7 01 00 00    	jne    c00270f5 <__divsf3+0x221>
c0026f2e:	8d 57 01             	lea    edx,[edi+0x1]
c0026f31:	80 e2 fe             	and    dl,0xfe
c0026f34:	75 2f                	jne    c0026f65 <__divsf3+0x91>
c0026f36:	85 c0                	test   eax,eax
c0026f38:	74 2b                	je     c0026f65 <__divsf3+0x91>
c0026f3a:	51                   	push   ecx
c0026f3b:	51                   	push   ecx
c0026f3c:	6a 00                	push   0x0
c0026f3e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f41:	e8 d2 03 00 00       	call   c0027318 <__nesf2>
c0026f46:	83 c4 10             	add    esp,0x10
c0026f49:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f4c:	85 c0                	test   eax,eax
c0026f4e:	0f 85 a1 01 00 00    	jne    c00270f5 <__divsf3+0x221>
c0026f54:	e9 92 01 00 00       	jmp    c00270eb <__divsf3+0x217>
c0026f59:	85 c9                	test   ecx,ecx
c0026f5b:	75 1b                	jne    c0026f78 <__divsf3+0xa4>
c0026f5d:	8d 57 01             	lea    edx,[edi+0x1]
c0026f60:	80 e2 fe             	and    dl,0xfe
c0026f63:	74 1e                	je     c0026f83 <__divsf3+0xaf>
c0026f65:	85 ff                	test   edi,edi
c0026f67:	0f 89 88 01 00 00    	jns    c00270f5 <__divsf3+0x221>
c0026f6d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026f73:	e9 7d 01 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0026f78:	8d 56 ff             	lea    edx,[esi-0x1]
c0026f7b:	01 c9                	add    ecx,ecx
c0026f7d:	78 3d                	js     c0026fbc <__divsf3+0xe8>
c0026f7f:	89 d6                	mov    esi,edx
c0026f81:	eb f5                	jmp    c0026f78 <__divsf3+0xa4>
c0026f83:	85 c0                	test   eax,eax
c0026f85:	b8 00 00 00 00       	mov    eax,0x0
c0026f8a:	74 18                	je     c0026fa4 <__divsf3+0xd0>
c0026f8c:	52                   	push   edx
c0026f8d:	52                   	push   edx
c0026f8e:	50                   	push   eax
c0026f8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f92:	e8 81 03 00 00       	call   c0027318 <__nesf2>
c0026f97:	83 c4 10             	add    esp,0x10
c0026f9a:	85 c0                	test   eax,eax
c0026f9c:	0f 85 50 01 00 00    	jne    c00270f2 <__divsf3+0x21e>
c0026fa2:	eb c1                	jmp    c0026f65 <__divsf3+0x91>
c0026fa4:	56                   	push   esi
c0026fa5:	56                   	push   esi
c0026fa6:	50                   	push   eax
c0026fa7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026faa:	e8 69 03 00 00       	call   c0027318 <__nesf2>
c0026faf:	83 c4 10             	add    esp,0x10
c0026fb2:	85 c0                	test   eax,eax
c0026fb4:	0f 84 31 01 00 00    	je     c00270eb <__divsf3+0x217>
c0026fba:	eb a9                	jmp    c0026f65 <__divsf3+0x91>
c0026fbc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026fbf:	c1 e3 08             	shl    ebx,0x8
c0026fc2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026fc8:	8d 57 01             	lea    edx,[edi+0x1]
c0026fcb:	80 e2 fe             	and    dl,0xfe
c0026fce:	75 71                	jne    c0027041 <__divsf3+0x16d>
c0026fd0:	85 c0                	test   eax,eax
c0026fd2:	ba 00 00 00 00       	mov    edx,0x0
c0026fd7:	74 2f                	je     c0027008 <__divsf3+0x134>
c0026fd9:	51                   	push   ecx
c0026fda:	51                   	push   ecx
c0026fdb:	52                   	push   edx
c0026fdc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fdf:	e8 f9 02 00 00       	call   c00272dd <__eqsf2>
c0026fe4:	83 c4 10             	add    esp,0x10
c0026fe7:	85 c0                	test   eax,eax
c0026fe9:	0f 85 03 01 00 00    	jne    c00270f2 <__divsf3+0x21e>
c0026fef:	31 d2                	xor    edx,edx
c0026ff1:	89 d3                	mov    ebx,edx
c0026ff3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026ff6:	31 f8                	xor    eax,edi
c0026ff8:	0f 89 f7 00 00 00    	jns    c00270f5 <__divsf3+0x221>
c0026ffe:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027003:	e9 ed 00 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0027008:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002700b:	50                   	push   eax
c002700c:	50                   	push   eax
c002700d:	52                   	push   edx
c002700e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027011:	e8 c7 02 00 00       	call   c00272dd <__eqsf2>
c0027016:	83 c4 10             	add    esp,0x10
c0027019:	85 c0                	test   eax,eax
c002701b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002701e:	75 16                	jne    c0027036 <__divsf3+0x162>
c0027020:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027023:	31 fb                	xor    ebx,edi
c0027025:	81 e3 00 00 00 80    	and    ebx,0x80000000
c002702b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027031:	e9 bf 00 00 00       	jmp    c00270f5 <__divsf3+0x221>
c0027036:	8d 46 01             	lea    eax,[esi+0x1]
c0027039:	01 db                	add    ebx,ebx
c002703b:	78 04                	js     c0027041 <__divsf3+0x16d>
c002703d:	89 c6                	mov    esi,eax
c002703f:	eb f5                	jmp    c0027036 <__divsf3+0x162>
c0027041:	89 c8                	mov    eax,ecx
c0027043:	0d 00 00 00 80       	or     eax,0x80000000
c0027048:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002704e:	31 d2                	xor    edx,edx
c0027050:	39 d8                	cmp    eax,ebx
c0027052:	72 07                	jb     c002705b <__divsf3+0x187>
c0027054:	29 d8                	sub    eax,ebx
c0027056:	ba 01 00 00 00       	mov    edx,0x1
c002705b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027062:	01 d2                	add    edx,edx
c0027064:	89 c1                	mov    ecx,eax
c0027066:	01 c0                	add    eax,eax
c0027068:	85 c9                	test   ecx,ecx
c002706a:	78 04                	js     c0027070 <__divsf3+0x19c>
c002706c:	39 c3                	cmp    ebx,eax
c002706e:	77 05                	ja     c0027075 <__divsf3+0x1a1>
c0027070:	29 d8                	sub    eax,ebx
c0027072:	83 ca 01             	or     edx,0x1
c0027075:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027078:	75 e8                	jne    c0027062 <__divsf3+0x18e>
c002707a:	85 c0                	test   eax,eax
c002707c:	0f 95 c0             	setne  al
c002707f:	0f b6 c0             	movzx  eax,al
c0027082:	c1 e2 06             	shl    edx,0x6
c0027085:	09 c2                	or     edx,eax
c0027087:	78 03                	js     c002708c <__divsf3+0x1b8>
c0027089:	01 d2                	add    edx,edx
c002708b:	4e                   	dec    esi
c002708c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027092:	7f 22                	jg     c00270b6 <__divsf3+0x1e2>
c0027094:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002709a:	85 f6                	test   esi,esi
c002709c:	7f 23                	jg     c00270c1 <__divsf3+0x1ed>
c002709e:	83 fe e9             	cmp    esi,0xffffffe9
c00270a1:	7c 1a                	jl     c00270bd <__divsf3+0x1e9>
c00270a3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00270a9:	b9 01 00 00 00       	mov    ecx,0x1
c00270ae:	29 f1                	sub    ecx,esi
c00270b0:	d3 ea                	shr    edx,cl
c00270b2:	31 f6                	xor    esi,esi
c00270b4:	eb 0b                	jmp    c00270c1 <__divsf3+0x1ed>
c00270b6:	be ff 00 00 00       	mov    esi,0xff
c00270bb:	eb 02                	jmp    c00270bf <__divsf3+0x1eb>
c00270bd:	31 f6                	xor    esi,esi
c00270bf:	31 d2                	xor    edx,edx
c00270c1:	89 d0                	mov    eax,edx
c00270c3:	c1 e8 08             	shr    eax,0x8
c00270c6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00270c9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00270cf:	09 fe                	or     esi,edi
c00270d1:	c1 e6 17             	shl    esi,0x17
c00270d4:	09 c6                	or     esi,eax
c00270d6:	f6 c2 7f             	test   dl,0x7f
c00270d9:	0f 95 c1             	setne  cl
c00270dc:	09 c8                	or     eax,ecx
c00270de:	83 e0 01             	and    eax,0x1
c00270e1:	c1 ea 07             	shr    edx,0x7
c00270e4:	21 c2                	and    edx,eax
c00270e6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00270e9:	eb 0a                	jmp    c00270f5 <__divsf3+0x221>
c00270eb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00270f0:	eb 03                	jmp    c00270f5 <__divsf3+0x221>
c00270f2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00270f5:	89 d8                	mov    eax,ebx
c00270f7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270fa:	5b                   	pop    ebx
c00270fb:	5e                   	pop    esi
c00270fc:	5f                   	pop    edi
c00270fd:	5d                   	pop    ebp
c00270fe:	c3                   	ret    

c00270ff <__floatsisf>:
c00270ff:	55                   	push   ebp
c0027100:	89 e5                	mov    ebp,esp
c0027102:	53                   	push   ebx
c0027103:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027106:	85 d2                	test   edx,edx
c0027108:	7e 2b                	jle    c0027135 <__floatsisf+0x36>
c002710a:	0f bd ca             	bsr    ecx,edx
c002710d:	83 f1 1f             	xor    ecx,0x1f
c0027110:	d3 e2                	shl    edx,cl
c0027112:	89 d0                	mov    eax,edx
c0027114:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027119:	89 c3                	mov    ebx,eax
c002711b:	c1 eb 08             	shr    ebx,0x8
c002711e:	80 e2 7f             	and    dl,0x7f
c0027121:	0f 95 c2             	setne  dl
c0027124:	09 da                	or     edx,ebx
c0027126:	83 e2 01             	and    edx,0x1
c0027129:	c1 e8 07             	shr    eax,0x7
c002712c:	21 c2                	and    edx,eax
c002712e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027133:	eb 32                	jmp    c0027167 <__floatsisf+0x68>
c0027135:	b8 00 00 00 00       	mov    eax,0x0
c002713a:	74 34                	je     c0027170 <__floatsisf+0x71>
c002713c:	f7 da                	neg    edx
c002713e:	0f bd ca             	bsr    ecx,edx
c0027141:	83 f1 1f             	xor    ecx,0x1f
c0027144:	d3 e2                	shl    edx,cl
c0027146:	89 d0                	mov    eax,edx
c0027148:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002714d:	89 c3                	mov    ebx,eax
c002714f:	c1 eb 08             	shr    ebx,0x8
c0027152:	80 e2 7f             	and    dl,0x7f
c0027155:	0f 95 c2             	setne  dl
c0027158:	09 da                	or     edx,ebx
c002715a:	83 e2 01             	and    edx,0x1
c002715d:	c1 e8 07             	shr    eax,0x7
c0027160:	21 c2                	and    edx,eax
c0027162:	b8 9e 01 00 00       	mov    eax,0x19e
c0027167:	29 c8                	sub    eax,ecx
c0027169:	c1 e0 17             	shl    eax,0x17
c002716c:	09 d8                	or     eax,ebx
c002716e:	01 d0                	add    eax,edx
c0027170:	5b                   	pop    ebx
c0027171:	5d                   	pop    ebp
c0027172:	c3                   	ret    

c0027173 <__floatunsisf>:
c0027173:	55                   	push   ebp
c0027174:	89 e5                	mov    ebp,esp
c0027176:	53                   	push   ebx
c0027177:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002717a:	31 c0                	xor    eax,eax
c002717c:	85 d2                	test   edx,edx
c002717e:	74 32                	je     c00271b2 <__floatunsisf+0x3f>
c0027180:	0f bd ca             	bsr    ecx,edx
c0027183:	83 f1 1f             	xor    ecx,0x1f
c0027186:	d3 e2                	shl    edx,cl
c0027188:	89 d0                	mov    eax,edx
c002718a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002718f:	89 c3                	mov    ebx,eax
c0027191:	c1 eb 08             	shr    ebx,0x8
c0027194:	80 e2 7f             	and    dl,0x7f
c0027197:	0f 95 c2             	setne  dl
c002719a:	09 da                	or     edx,ebx
c002719c:	83 e2 01             	and    edx,0x1
c002719f:	c1 e8 07             	shr    eax,0x7
c00271a2:	21 c2                	and    edx,eax
c00271a4:	b8 9e 00 00 00       	mov    eax,0x9e
c00271a9:	29 c8                	sub    eax,ecx
c00271ab:	c1 e0 17             	shl    eax,0x17
c00271ae:	09 d8                	or     eax,ebx
c00271b0:	01 d0                	add    eax,edx
c00271b2:	5b                   	pop    ebx
c00271b3:	5d                   	pop    ebp
c00271b4:	c3                   	ret    

c00271b5 <__fixsfsi>:
c00271b5:	55                   	push   ebp
c00271b6:	89 e5                	mov    ebp,esp
c00271b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271bb:	89 d1                	mov    ecx,edx
c00271bd:	c1 e1 08             	shl    ecx,0x8
c00271c0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00271c6:	c1 fa 17             	sar    edx,0x17
c00271c9:	78 1c                	js     c00271e7 <__fixsfsi+0x32>
c00271cb:	83 ea 7f             	sub    edx,0x7f
c00271ce:	31 c0                	xor    eax,eax
c00271d0:	83 fa 1e             	cmp    edx,0x1e
c00271d3:	77 40                	ja     c0027215 <__fixsfsi+0x60>
c00271d5:	89 c8                	mov    eax,ecx
c00271d7:	0d 00 00 00 80       	or     eax,0x80000000
c00271dc:	b9 1f 00 00 00       	mov    ecx,0x1f
c00271e1:	29 d1                	sub    ecx,edx
c00271e3:	d3 e8                	shr    eax,cl
c00271e5:	eb 2e                	jmp    c0027215 <__fixsfsi+0x60>
c00271e7:	31 c0                	xor    eax,eax
c00271e9:	81 c2 81 00 00 00    	add    edx,0x81
c00271ef:	78 24                	js     c0027215 <__fixsfsi+0x60>
c00271f1:	83 fa 1e             	cmp    edx,0x1e
c00271f4:	7e 09                	jle    c00271ff <__fixsfsi+0x4a>
c00271f6:	83 fa 1f             	cmp    edx,0x1f
c00271f9:	75 18                	jne    c0027213 <__fixsfsi+0x5e>
c00271fb:	85 c9                	test   ecx,ecx
c00271fd:	75 14                	jne    c0027213 <__fixsfsi+0x5e>
c00271ff:	89 c8                	mov    eax,ecx
c0027201:	0d 00 00 00 80       	or     eax,0x80000000
c0027206:	b9 1f 00 00 00       	mov    ecx,0x1f
c002720b:	29 d1                	sub    ecx,edx
c002720d:	d3 e8                	shr    eax,cl
c002720f:	f7 d8                	neg    eax
c0027211:	eb 02                	jmp    c0027215 <__fixsfsi+0x60>
c0027213:	31 c0                	xor    eax,eax
c0027215:	5d                   	pop    ebp
c0027216:	c3                   	ret    

c0027217 <__fixunssfsi>:
c0027217:	55                   	push   ebp
c0027218:	89 e5                	mov    ebp,esp
c002721a:	53                   	push   ebx
c002721b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002721e:	89 d3                	mov    ebx,edx
c0027220:	c1 fb 17             	sar    ebx,0x17
c0027223:	83 eb 7f             	sub    ebx,0x7f
c0027226:	31 c0                	xor    eax,eax
c0027228:	83 fb 1f             	cmp    ebx,0x1f
c002722b:	77 18                	ja     c0027245 <__fixunssfsi+0x2e>
c002722d:	89 d0                	mov    eax,edx
c002722f:	c1 e0 08             	shl    eax,0x8
c0027232:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027237:	0d 00 00 00 80       	or     eax,0x80000000
c002723c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027241:	29 d9                	sub    ecx,ebx
c0027243:	d3 e8                	shr    eax,cl
c0027245:	5b                   	pop    ebx
c0027246:	5d                   	pop    ebp
c0027247:	c3                   	ret    

c0027248 <__cmpsf2>:
c0027248:	55                   	push   ebp
c0027249:	89 e5                	mov    ebp,esp
c002724b:	57                   	push   edi
c002724c:	56                   	push   esi
c002724d:	53                   	push   ebx
c002724e:	83 ec 24             	sub    esp,0x24
c0027251:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027254:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027257:	e8 4f 10 00 00       	call   c00282ab <__truncdfsf2>
c002725c:	5a                   	pop    edx
c002725d:	59                   	pop    ecx
c002725e:	89 c3                	mov    ebx,eax
c0027260:	c1 e8 17             	shr    eax,0x17
c0027263:	0f b6 f0             	movzx  esi,al
c0027266:	89 d8                	mov    eax,ebx
c0027268:	c1 e8 1f             	shr    eax,0x1f
c002726b:	31 c6                	xor    esi,eax
c002726d:	c1 e3 08             	shl    ebx,0x8
c0027270:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027273:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027276:	e8 30 10 00 00       	call   c00282ab <__truncdfsf2>
c002727b:	83 c4 10             	add    esp,0x10
c002727e:	89 c1                	mov    ecx,eax
c0027280:	c1 e9 17             	shr    ecx,0x17
c0027283:	0f b6 c9             	movzx  ecx,cl
c0027286:	89 c7                	mov    edi,eax
c0027288:	c1 ef 1f             	shr    edi,0x1f
c002728b:	89 ca                	mov    edx,ecx
c002728d:	31 fa                	xor    edx,edi
c002728f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027292:	c1 e0 08             	shl    eax,0x8
c0027295:	89 c2                	mov    edx,eax
c0027297:	89 d8                	mov    eax,ebx
c0027299:	09 d0                	or     eax,edx
c002729b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272a0:	09 f0                	or     eax,esi
c00272a2:	75 08                	jne    c00272ac <__cmpsf2+0x64>
c00272a4:	31 c0                	xor    eax,eax
c00272a6:	39 f9                	cmp    ecx,edi
c00272a8:	75 0c                	jne    c00272b6 <__cmpsf2+0x6e>
c00272aa:	eb 29                	jmp    c00272d5 <__cmpsf2+0x8d>
c00272ac:	b8 01 00 00 00       	mov    eax,0x1
c00272b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00272b4:	7f 1f                	jg     c00272d5 <__cmpsf2+0x8d>
c00272b6:	83 c8 ff             	or     eax,0xffffffff
c00272b9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00272bc:	7c 17                	jl     c00272d5 <__cmpsf2+0x8d>
c00272be:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00272c4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00272ca:	b8 01 00 00 00       	mov    eax,0x1
c00272cf:	39 d3                	cmp    ebx,edx
c00272d1:	77 02                	ja     c00272d5 <__cmpsf2+0x8d>
c00272d3:	19 c0                	sbb    eax,eax
c00272d5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00272d8:	5b                   	pop    ebx
c00272d9:	5e                   	pop    esi
c00272da:	5f                   	pop    edi
c00272db:	5d                   	pop    ebp
c00272dc:	c3                   	ret    

c00272dd <__eqsf2>:
c00272dd:	55                   	push   ebp
c00272de:	89 e5                	mov    ebp,esp
c00272e0:	83 ec 24             	sub    esp,0x24
c00272e3:	6a 01                	push   0x1
c00272e5:	83 ec 0c             	sub    esp,0xc
c00272e8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272eb:	e8 df 10 00 00       	call   c00283cf <__extendsfdf2>
c00272f0:	83 c4 10             	add    esp,0x10
c00272f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00272f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00272f9:	52                   	push   edx
c00272fa:	50                   	push   eax
c00272fb:	50                   	push   eax
c00272fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ff:	e8 cb 10 00 00       	call   c00283cf <__extendsfdf2>
c0027304:	59                   	pop    ecx
c0027305:	59                   	pop    ecx
c0027306:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027309:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002730c:	52                   	push   edx
c002730d:	50                   	push   eax
c002730e:	e8 35 ff ff ff       	call   c0027248 <__cmpsf2>
c0027313:	83 c4 20             	add    esp,0x20
c0027316:	c9                   	leave  
c0027317:	c3                   	ret    

c0027318 <__nesf2>:
c0027318:	eb c3                	jmp    c00272dd <__eqsf2>

c002731a <__gtsf2>:
c002731a:	55                   	push   ebp
c002731b:	89 e5                	mov    ebp,esp
c002731d:	83 ec 24             	sub    esp,0x24
c0027320:	6a ff                	push   0xffffffff
c0027322:	83 ec 0c             	sub    esp,0xc
c0027325:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027328:	e8 a2 10 00 00       	call   c00283cf <__extendsfdf2>
c002732d:	83 c4 10             	add    esp,0x10
c0027330:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027333:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027336:	52                   	push   edx
c0027337:	50                   	push   eax
c0027338:	50                   	push   eax
c0027339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002733c:	e8 8e 10 00 00       	call   c00283cf <__extendsfdf2>
c0027341:	59                   	pop    ecx
c0027342:	59                   	pop    ecx
c0027343:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027346:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027349:	52                   	push   edx
c002734a:	50                   	push   eax
c002734b:	e8 f8 fe ff ff       	call   c0027248 <__cmpsf2>
c0027350:	83 c4 20             	add    esp,0x20
c0027353:	c9                   	leave  
c0027354:	c3                   	ret    

c0027355 <__gesf2>:
c0027355:	eb c3                	jmp    c002731a <__gtsf2>

c0027357 <__ltsf2>:
c0027357:	eb 84                	jmp    c00272dd <__eqsf2>

c0027359 <__lesf2>:
c0027359:	eb 82                	jmp    c00272dd <__eqsf2>

c002735b <__adddf3>:
c002735b:	55                   	push   ebp
c002735c:	89 e5                	mov    ebp,esp
c002735e:	57                   	push   edi
c002735f:	56                   	push   esi
c0027360:	53                   	push   ebx
c0027361:	83 ec 24             	sub    esp,0x24
c0027364:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027367:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002736a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002736d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027370:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027373:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027376:	89 c8                	mov    eax,ecx
c0027378:	89 ce                	mov    esi,ecx
c002737a:	c1 fe 14             	sar    esi,0x14
c002737d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027380:	89 fb                	mov    ebx,edi
c0027382:	89 fa                	mov    edx,edi
c0027384:	c1 e2 0b             	shl    edx,0xb
c0027387:	c1 e0 0b             	shl    eax,0xb
c002738a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002738f:	c1 eb 15             	shr    ebx,0x15
c0027392:	09 d8                	or     eax,ebx
c0027394:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027397:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002739a:	c1 fe 14             	sar    esi,0x14
c002739d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00273a0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00273a3:	89 f3                	mov    ebx,esi
c00273a5:	c1 e3 0b             	shl    ebx,0xb
c00273a8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00273ab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00273ae:	c1 e3 0b             	shl    ebx,0xb
c00273b1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00273b7:	c1 ee 15             	shr    esi,0x15
c00273ba:	09 f3                	or     ebx,esi
c00273bc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00273bf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273c2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00273c5:	0f 88 5f 02 00 00    	js     c002762a <__adddf3+0x2cf>
c00273cb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273ce:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00273d1:	85 db                	test   ebx,ebx
c00273d3:	0f 8e c7 00 00 00    	jle    c00274a0 <__adddf3+0x145>
c00273d9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00273e0:	75 1a                	jne    c00273fc <__adddf3+0xa1>
c00273e2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273e5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273e8:	0f 84 b2 05 00 00    	je     c00279a0 <__adddf3+0x645>
c00273ee:	4b                   	dec    ebx
c00273ef:	75 23                	jne    c0027414 <__adddf3+0xb9>
c00273f1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273f4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273f7:	e9 99 00 00 00       	jmp    c0027495 <__adddf3+0x13a>
c00273fc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273ff:	f7 d6                	not    esi
c0027401:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027407:	0f 84 93 05 00 00    	je     c00279a0 <__adddf3+0x645>
c002740d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027414:	83 fb 1f             	cmp    ebx,0x1f
c0027417:	7e 42                	jle    c002745b <__adddf3+0x100>
c0027419:	83 fb 3f             	cmp    ebx,0x3f
c002741c:	0f 8f 7e 05 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027422:	83 e3 1f             	and    ebx,0x1f
c0027425:	89 d9                	mov    ecx,ebx
c0027427:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002742a:	d3 ef                	shr    edi,cl
c002742c:	31 db                	xor    ebx,ebx
c002742e:	85 c9                	test   ecx,ecx
c0027430:	74 15                	je     c0027447 <__adddf3+0xec>
c0027432:	be 20 00 00 00       	mov    esi,0x20
c0027437:	29 ce                	sub    esi,ecx
c0027439:	89 f1                	mov    ecx,esi
c002743b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002743e:	d3 e6                	shl    esi,cl
c0027440:	31 db                	xor    ebx,ebx
c0027442:	85 f6                	test   esi,esi
c0027444:	0f 95 c3             	setne  bl
c0027447:	31 c9                	xor    ecx,ecx
c0027449:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002744d:	0f 95 c1             	setne  cl
c0027450:	09 cf                	or     edi,ecx
c0027452:	09 fb                	or     ebx,edi
c0027454:	01 da                	add    edx,ebx
c0027456:	83 d0 00             	adc    eax,0x0
c0027459:	eb 3a                	jmp    c0027495 <__adddf3+0x13a>
c002745b:	bf 20 00 00 00       	mov    edi,0x20
c0027460:	29 df                	sub    edi,ebx
c0027462:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027465:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027468:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002746b:	d3 e6                	shl    esi,cl
c002746d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027470:	88 d9                	mov    cl,bl
c0027472:	d3 ef                	shr    edi,cl
c0027474:	09 fe                	or     esi,edi
c0027476:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027479:	88 d9                	mov    cl,bl
c002747b:	d3 ef                	shr    edi,cl
c002747d:	89 fb                	mov    ebx,edi
c002747f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027482:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027485:	d3 e7                	shl    edi,cl
c0027487:	85 ff                	test   edi,edi
c0027489:	0f 95 c1             	setne  cl
c002748c:	0f b6 c9             	movzx  ecx,cl
c002748f:	09 ce                	or     esi,ecx
c0027491:	01 f2                	add    edx,esi
c0027493:	11 d8                	adc    eax,ebx
c0027495:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027498:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002749b:	e9 52 01 00 00       	jmp    c00275f2 <__adddf3+0x297>
c00274a0:	0f 84 d5 00 00 00    	je     c002757b <__adddf3+0x220>
c00274a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00274a9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00274ac:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274af:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274b2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274b9:	75 20                	jne    c00274db <__adddf3+0x180>
c00274bb:	89 d6                	mov    esi,edx
c00274bd:	09 c6                	or     esi,eax
c00274bf:	0f 84 db 04 00 00    	je     c00279a0 <__adddf3+0x645>
c00274c5:	4b                   	dec    ebx
c00274c6:	75 29                	jne    c00274f1 <__adddf3+0x196>
c00274c8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274cb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00274ce:	01 d1                	add    ecx,edx
c00274d0:	11 c6                	adc    esi,eax
c00274d2:	89 f0                	mov    eax,esi
c00274d4:	89 ca                	mov    edx,ecx
c00274d6:	e9 17 01 00 00       	jmp    c00275f2 <__adddf3+0x297>
c00274db:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274de:	f7 d6                	not    esi
c00274e0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274e6:	0f 84 b4 04 00 00    	je     c00279a0 <__adddf3+0x645>
c00274ec:	0d 00 00 00 80       	or     eax,0x80000000
c00274f1:	83 fb 1f             	cmp    ebx,0x1f
c00274f4:	7e 48                	jle    c002753e <__adddf3+0x1e3>
c00274f6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274f9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274fc:	83 fb 3f             	cmp    ebx,0x3f
c00274ff:	0f 8f 9b 04 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027505:	83 e3 1f             	and    ebx,0x1f
c0027508:	89 d9                	mov    ecx,ebx
c002750a:	89 c7                	mov    edi,eax
c002750c:	d3 ef                	shr    edi,cl
c002750e:	31 db                	xor    ebx,ebx
c0027510:	85 c9                	test   ecx,ecx
c0027512:	74 12                	je     c0027526 <__adddf3+0x1cb>
c0027514:	be 20 00 00 00       	mov    esi,0x20
c0027519:	29 ce                	sub    esi,ecx
c002751b:	89 f1                	mov    ecx,esi
c002751d:	d3 e0                	shl    eax,cl
c002751f:	31 db                	xor    ebx,ebx
c0027521:	85 c0                	test   eax,eax
c0027523:	0f 95 c3             	setne  bl
c0027526:	31 c0                	xor    eax,eax
c0027528:	85 d2                	test   edx,edx
c002752a:	0f 95 c0             	setne  al
c002752d:	09 c7                	or     edi,eax
c002752f:	09 fb                	or     ebx,edi
c0027531:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027534:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027537:	01 da                	add    edx,ebx
c0027539:	83 d6 00             	adc    esi,0x0
c002753c:	eb 39                	jmp    c0027577 <__adddf3+0x21c>
c002753e:	be 20 00 00 00       	mov    esi,0x20
c0027543:	29 de                	sub    esi,ebx
c0027545:	89 c7                	mov    edi,eax
c0027547:	89 f1                	mov    ecx,esi
c0027549:	d3 e7                	shl    edi,cl
c002754b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002754e:	89 d7                	mov    edi,edx
c0027550:	88 d9                	mov    cl,bl
c0027552:	d3 ef                	shr    edi,cl
c0027554:	89 f9                	mov    ecx,edi
c0027556:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027559:	09 cf                	or     edi,ecx
c002755b:	88 d9                	mov    cl,bl
c002755d:	d3 e8                	shr    eax,cl
c002755f:	89 f1                	mov    ecx,esi
c0027561:	d3 e2                	shl    edx,cl
c0027563:	85 d2                	test   edx,edx
c0027565:	0f 95 c2             	setne  dl
c0027568:	0f b6 d2             	movzx  edx,dl
c002756b:	09 d7                	or     edi,edx
c002756d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027570:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027573:	01 fa                	add    edx,edi
c0027575:	11 c6                	adc    esi,eax
c0027577:	89 f0                	mov    eax,esi
c0027579:	eb 77                	jmp    c00275f2 <__adddf3+0x297>
c002757b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002757e:	46                   	inc    esi
c002757f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027582:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027588:	75 41                	jne    c00275cb <__adddf3+0x270>
c002758a:	89 d3                	mov    ebx,edx
c002758c:	09 c3                	or     ebx,eax
c002758e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027595:	75 27                	jne    c00275be <__adddf3+0x263>
c0027597:	85 db                	test   ebx,ebx
c0027599:	0f 84 fb 03 00 00    	je     c002799a <__adddf3+0x63f>
c002759f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00275a2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00275a5:	0f 84 f5 03 00 00    	je     c00279a0 <__adddf3+0x645>
c00275ab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275ae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275b1:	85 c0                	test   eax,eax
c00275b3:	0f 89 91 03 00 00    	jns    c002794a <__adddf3+0x5ef>
c00275b9:	e9 85 03 00 00       	jmp    c0027943 <__adddf3+0x5e8>
c00275be:	85 db                	test   ebx,ebx
c00275c0:	0f 85 da 03 00 00    	jne    c00279a0 <__adddf3+0x645>
c00275c6:	e9 cf 03 00 00       	jmp    c002799a <__adddf3+0x63f>
c00275cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00275ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00275d1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275d4:	f7 d1                	not    ecx
c00275d6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00275dc:	0f 84 70 03 00 00    	je     c0027952 <__adddf3+0x5f7>
c00275e2:	d1 ea                	shr    edx,1
c00275e4:	89 c1                	mov    ecx,eax
c00275e6:	c1 e1 1f             	shl    ecx,0x1f
c00275e9:	09 ca                	or     edx,ecx
c00275eb:	d1 e8                	shr    eax,1
c00275ed:	e9 6f 03 00 00       	jmp    c0027961 <__adddf3+0x606>
c00275f2:	85 c0                	test   eax,eax
c00275f4:	0f 89 67 03 00 00    	jns    c0027961 <__adddf3+0x606>
c00275fa:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00275fd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027600:	f7 d1                	not    ecx
c0027602:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027608:	0f 84 44 03 00 00    	je     c0027952 <__adddf3+0x5f7>
c002760e:	89 d1                	mov    ecx,edx
c0027610:	d1 e9                	shr    ecx,1
c0027612:	83 e2 01             	and    edx,0x1
c0027615:	09 ca                	or     edx,ecx
c0027617:	89 c1                	mov    ecx,eax
c0027619:	c1 e1 1f             	shl    ecx,0x1f
c002761c:	09 ca                	or     edx,ecx
c002761e:	d1 e8                	shr    eax,1
c0027620:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027625:	e9 37 03 00 00       	jmp    c0027961 <__adddf3+0x606>
c002762a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002762d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027633:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027636:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027639:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002763f:	29 de                	sub    esi,ebx
c0027641:	85 f6                	test   esi,esi
c0027643:	0f 8e bd 00 00 00    	jle    c0027706 <__adddf3+0x3ab>
c0027649:	85 db                	test   ebx,ebx
c002764b:	75 17                	jne    c0027664 <__adddf3+0x309>
c002764d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027650:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027653:	0f 84 47 03 00 00    	je     c00279a0 <__adddf3+0x645>
c0027659:	4e                   	dec    esi
c002765a:	75 20                	jne    c002767c <__adddf3+0x321>
c002765c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002765f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027662:	eb 5b                	jmp    c00276bf <__adddf3+0x364>
c0027664:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027667:	f7 d3                	not    ebx
c0027669:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002766f:	0f 84 2b 03 00 00    	je     c00279a0 <__adddf3+0x645>
c0027675:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002767c:	83 fe 1f             	cmp    esi,0x1f
c002767f:	7e 49                	jle    c00276ca <__adddf3+0x36f>
c0027681:	83 fe 3f             	cmp    esi,0x3f
c0027684:	0f 8f 16 03 00 00    	jg     c00279a0 <__adddf3+0x645>
c002768a:	83 e6 1f             	and    esi,0x1f
c002768d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027690:	89 f1                	mov    ecx,esi
c0027692:	d3 ef                	shr    edi,cl
c0027694:	31 db                	xor    ebx,ebx
c0027696:	85 f6                	test   esi,esi
c0027698:	74 13                	je     c00276ad <__adddf3+0x352>
c002769a:	b9 20 00 00 00       	mov    ecx,0x20
c002769f:	29 f1                	sub    ecx,esi
c00276a1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276a4:	d3 e6                	shl    esi,cl
c00276a6:	31 db                	xor    ebx,ebx
c00276a8:	85 f6                	test   esi,esi
c00276aa:	0f 95 c3             	setne  bl
c00276ad:	31 c9                	xor    ecx,ecx
c00276af:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276b3:	0f 95 c1             	setne  cl
c00276b6:	09 cf                	or     edi,ecx
c00276b8:	09 fb                	or     ebx,edi
c00276ba:	29 da                	sub    edx,ebx
c00276bc:	83 d8 00             	sbb    eax,0x0
c00276bf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276c2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276c5:	e9 aa 01 00 00       	jmp    c0027874 <__adddf3+0x519>
c00276ca:	bf 20 00 00 00       	mov    edi,0x20
c00276cf:	29 f7                	sub    edi,esi
c00276d1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276d4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00276d7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276da:	d3 e3                	shl    ebx,cl
c00276dc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276df:	89 f1                	mov    ecx,esi
c00276e1:	d3 ef                	shr    edi,cl
c00276e3:	09 fb                	or     ebx,edi
c00276e5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276e8:	89 f1                	mov    ecx,esi
c00276ea:	d3 ef                	shr    edi,cl
c00276ec:	89 fe                	mov    esi,edi
c00276ee:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00276f1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00276f4:	d3 e7                	shl    edi,cl
c00276f6:	85 ff                	test   edi,edi
c00276f8:	0f 95 c1             	setne  cl
c00276fb:	0f b6 c9             	movzx  ecx,cl
c00276fe:	09 cb                	or     ebx,ecx
c0027700:	29 da                	sub    edx,ebx
c0027702:	19 f0                	sbb    eax,esi
c0027704:	eb b9                	jmp    c00276bf <__adddf3+0x364>
c0027706:	0f 84 cd 00 00 00    	je     c00277d9 <__adddf3+0x47e>
c002770c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002770f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027712:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027715:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027719:	75 1b                	jne    c0027736 <__adddf3+0x3db>
c002771b:	89 d6                	mov    esi,edx
c002771d:	09 c6                	or     esi,eax
c002771f:	0f 84 7b 02 00 00    	je     c00279a0 <__adddf3+0x645>
c0027725:	4b                   	dec    ebx
c0027726:	75 24                	jne    c002774c <__adddf3+0x3f1>
c0027728:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002772b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002772e:	29 d1                	sub    ecx,edx
c0027730:	19 c6                	sbb    esi,eax
c0027732:	89 ca                	mov    edx,ecx
c0027734:	eb 61                	jmp    c0027797 <__adddf3+0x43c>
c0027736:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027739:	f7 d6                	not    esi
c002773b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027741:	0f 84 59 02 00 00    	je     c00279a0 <__adddf3+0x645>
c0027747:	0d 00 00 00 80       	or     eax,0x80000000
c002774c:	83 fb 1f             	cmp    ebx,0x1f
c002774f:	7e 4d                	jle    c002779e <__adddf3+0x443>
c0027751:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027754:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027757:	83 fb 3f             	cmp    ebx,0x3f
c002775a:	0f 8f 40 02 00 00    	jg     c00279a0 <__adddf3+0x645>
c0027760:	83 e3 1f             	and    ebx,0x1f
c0027763:	89 d9                	mov    ecx,ebx
c0027765:	89 c7                	mov    edi,eax
c0027767:	d3 ef                	shr    edi,cl
c0027769:	31 db                	xor    ebx,ebx
c002776b:	85 c9                	test   ecx,ecx
c002776d:	74 12                	je     c0027781 <__adddf3+0x426>
c002776f:	be 20 00 00 00       	mov    esi,0x20
c0027774:	29 ce                	sub    esi,ecx
c0027776:	89 f1                	mov    ecx,esi
c0027778:	d3 e0                	shl    eax,cl
c002777a:	31 db                	xor    ebx,ebx
c002777c:	85 c0                	test   eax,eax
c002777e:	0f 95 c3             	setne  bl
c0027781:	31 c0                	xor    eax,eax
c0027783:	85 d2                	test   edx,edx
c0027785:	0f 95 c0             	setne  al
c0027788:	09 c7                	or     edi,eax
c002778a:	09 fb                	or     ebx,edi
c002778c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002778f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027792:	29 da                	sub    edx,ebx
c0027794:	83 de 00             	sbb    esi,0x0
c0027797:	89 f0                	mov    eax,esi
c0027799:	e9 d6 00 00 00       	jmp    c0027874 <__adddf3+0x519>
c002779e:	be 20 00 00 00       	mov    esi,0x20
c00277a3:	29 de                	sub    esi,ebx
c00277a5:	89 c7                	mov    edi,eax
c00277a7:	89 f1                	mov    ecx,esi
c00277a9:	d3 e7                	shl    edi,cl
c00277ab:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277ae:	89 d7                	mov    edi,edx
c00277b0:	88 d9                	mov    cl,bl
c00277b2:	d3 ef                	shr    edi,cl
c00277b4:	89 f9                	mov    ecx,edi
c00277b6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277b9:	09 cf                	or     edi,ecx
c00277bb:	88 d9                	mov    cl,bl
c00277bd:	d3 e8                	shr    eax,cl
c00277bf:	89 f1                	mov    ecx,esi
c00277c1:	d3 e2                	shl    edx,cl
c00277c3:	85 d2                	test   edx,edx
c00277c5:	0f 95 c2             	setne  dl
c00277c8:	0f b6 d2             	movzx  edx,dl
c00277cb:	09 d7                	or     edi,edx
c00277cd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277d3:	29 fa                	sub    edx,edi
c00277d5:	19 c6                	sbb    esi,eax
c00277d7:	eb be                	jmp    c0027797 <__adddf3+0x43c>
c00277d9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00277dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00277df:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00277e5:	75 6a                	jne    c0027851 <__adddf3+0x4f6>
c00277e7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277eb:	75 58                	jne    c0027845 <__adddf3+0x4ea>
c00277ed:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00277f0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00277f3:	89 d6                	mov    esi,edx
c00277f5:	09 c6                	or     esi,eax
c00277f7:	75 17                	jne    c0027810 <__adddf3+0x4b5>
c00277f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ff:	85 db                	test   ebx,ebx
c0027801:	0f 85 99 01 00 00    	jne    c00279a0 <__adddf3+0x645>
c0027807:	31 ff                	xor    edi,edi
c0027809:	31 c9                	xor    ecx,ecx
c002780b:	e9 90 01 00 00       	jmp    c00279a0 <__adddf3+0x645>
c0027810:	85 db                	test   ebx,ebx
c0027812:	0f 84 88 01 00 00    	je     c00279a0 <__adddf3+0x645>
c0027818:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002781b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002781e:	85 c0                	test   eax,eax
c0027820:	79 10                	jns    c0027832 <__adddf3+0x4d7>
c0027822:	31 c9                	xor    ecx,ecx
c0027824:	f7 da                	neg    edx
c0027826:	0f 95 c1             	setne  cl
c0027829:	01 c8                	add    eax,ecx
c002782b:	f7 d8                	neg    eax
c002782d:	e9 2f 01 00 00       	jmp    c0027961 <__adddf3+0x606>
c0027832:	31 ff                	xor    edi,edi
c0027834:	31 c9                	xor    ecx,ecx
c0027836:	89 c3                	mov    ebx,eax
c0027838:	09 d3                	or     ebx,edx
c002783a:	0f 84 60 01 00 00    	je     c00279a0 <__adddf3+0x645>
c0027840:	e9 05 01 00 00       	jmp    c002794a <__adddf3+0x5ef>
c0027845:	31 ff                	xor    edi,edi
c0027847:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002784c:	e9 4f 01 00 00       	jmp    c00279a0 <__adddf3+0x645>
c0027851:	89 c1                	mov    ecx,eax
c0027853:	89 d0                	mov    eax,edx
c0027855:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027858:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002785b:	89 ca                	mov    edx,ecx
c002785d:	85 c9                	test   ecx,ecx
c002785f:	79 2c                	jns    c002788d <__adddf3+0x532>
c0027861:	31 c9                	xor    ecx,ecx
c0027863:	f7 d8                	neg    eax
c0027865:	0f 95 c1             	setne  cl
c0027868:	01 ca                	add    edx,ecx
c002786a:	f7 da                	neg    edx
c002786c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002786f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027872:	eb 19                	jmp    c002788d <__adddf3+0x532>
c0027874:	85 c0                	test   eax,eax
c0027876:	0f 89 e5 00 00 00    	jns    c0027961 <__adddf3+0x606>
c002787c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027881:	89 c1                	mov    ecx,eax
c0027883:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027886:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027889:	89 d0                	mov    eax,edx
c002788b:	89 ca                	mov    edx,ecx
c002788d:	85 d2                	test   edx,edx
c002788f:	74 59                	je     c00278ea <__adddf3+0x58f>
c0027891:	0f bd da             	bsr    ebx,edx
c0027894:	83 f3 1f             	xor    ebx,0x1f
c0027897:	88 d9                	mov    cl,bl
c0027899:	d3 e2                	shl    edx,cl
c002789b:	bf 20 00 00 00       	mov    edi,0x20
c00278a0:	89 f9                	mov    ecx,edi
c00278a2:	29 d9                	sub    ecx,ebx
c00278a4:	89 c6                	mov    esi,eax
c00278a6:	d3 ee                	shr    esi,cl
c00278a8:	09 d6                	or     esi,edx
c00278aa:	88 d9                	mov    cl,bl
c00278ac:	d3 e0                	shl    eax,cl
c00278ae:	89 c2                	mov    edx,eax
c00278b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278b3:	25 ff 07 00 00       	and    eax,0x7ff
c00278b8:	39 d8                	cmp    eax,ebx
c00278ba:	7f 22                	jg     c00278de <__adddf3+0x583>
c00278bc:	29 c3                	sub    ebx,eax
c00278be:	43                   	inc    ebx
c00278bf:	88 d9                	mov    cl,bl
c00278c1:	d3 ea                	shr    edx,cl
c00278c3:	29 df                	sub    edi,ebx
c00278c5:	89 f9                	mov    ecx,edi
c00278c7:	89 f0                	mov    eax,esi
c00278c9:	d3 e0                	shl    eax,cl
c00278cb:	09 c2                	or     edx,eax
c00278cd:	89 f0                	mov    eax,esi
c00278cf:	88 d9                	mov    cl,bl
c00278d1:	d3 e8                	shr    eax,cl
c00278d3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278d6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00278dc:	eb 6f                	jmp    c002794d <__adddf3+0x5f2>
c00278de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00278e1:	29 d8                	sub    eax,ebx
c00278e3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278e6:	89 f0                	mov    eax,esi
c00278e8:	eb 59                	jmp    c0027943 <__adddf3+0x5e8>
c00278ea:	85 c0                	test   eax,eax
c00278ec:	74 6a                	je     c0027958 <__adddf3+0x5fd>
c00278ee:	0f bd c8             	bsr    ecx,eax
c00278f1:	83 f1 1f             	xor    ecx,0x1f
c00278f4:	d3 e0                	shl    eax,cl
c00278f6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278ff:	83 c1 20             	add    ecx,0x20
c0027902:	39 cb                	cmp    ebx,ecx
c0027904:	7f 35                	jg     c002793b <__adddf3+0x5e0>
c0027906:	29 d9                	sub    ecx,ebx
c0027908:	8d 71 01             	lea    esi,[ecx+0x1]
c002790b:	83 fe 1f             	cmp    esi,0x1f
c002790e:	7e 09                	jle    c0027919 <__adddf3+0x5be>
c0027910:	83 e9 1f             	sub    ecx,0x1f
c0027913:	d3 e8                	shr    eax,cl
c0027915:	89 c3                	mov    ebx,eax
c0027917:	eb 11                	jmp    c002792a <__adddf3+0x5cf>
c0027919:	b9 20 00 00 00       	mov    ecx,0x20
c002791e:	29 f1                	sub    ecx,esi
c0027920:	89 c3                	mov    ebx,eax
c0027922:	d3 e3                	shl    ebx,cl
c0027924:	89 f1                	mov    ecx,esi
c0027926:	d3 e8                	shr    eax,cl
c0027928:	89 c2                	mov    edx,eax
c002792a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002792d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027932:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027935:	89 d0                	mov    eax,edx
c0027937:	89 da                	mov    edx,ebx
c0027939:	eb 26                	jmp    c0027961 <__adddf3+0x606>
c002793b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002793e:	29 cf                	sub    edi,ecx
c0027940:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027943:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027948:	eb 17                	jmp    c0027961 <__adddf3+0x606>
c002794a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002794d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027950:	eb 0f                	jmp    c0027961 <__adddf3+0x606>
c0027952:	31 d2                	xor    edx,edx
c0027954:	31 c0                	xor    eax,eax
c0027956:	eb 09                	jmp    c0027961 <__adddf3+0x606>
c0027958:	89 c2                	mov    edx,eax
c002795a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027961:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027964:	c1 e1 14             	shl    ecx,0x14
c0027967:	89 c3                	mov    ebx,eax
c0027969:	c1 eb 0b             	shr    ebx,0xb
c002796c:	09 d9                	or     ecx,ebx
c002796e:	89 d3                	mov    ebx,edx
c0027970:	c1 eb 0b             	shr    ebx,0xb
c0027973:	c1 e0 15             	shl    eax,0x15
c0027976:	09 d8                	or     eax,ebx
c0027978:	89 c7                	mov    edi,eax
c002797a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027980:	0f 95 c0             	setne  al
c0027983:	89 c6                	mov    esi,eax
c0027985:	09 f3                	or     ebx,esi
c0027987:	83 e3 01             	and    ebx,0x1
c002798a:	c1 ea 0a             	shr    edx,0xa
c002798d:	21 da                	and    edx,ebx
c002798f:	89 f8                	mov    eax,edi
c0027991:	01 d0                	add    eax,edx
c0027993:	83 d1 00             	adc    ecx,0x0
c0027996:	89 c7                	mov    edi,eax
c0027998:	eb 06                	jmp    c00279a0 <__adddf3+0x645>
c002799a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002799d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279a0:	89 f8                	mov    eax,edi
c00279a2:	89 ca                	mov    edx,ecx
c00279a4:	83 c4 24             	add    esp,0x24
c00279a7:	5b                   	pop    ebx
c00279a8:	5e                   	pop    esi
c00279a9:	5f                   	pop    edi
c00279aa:	5d                   	pop    ebp
c00279ab:	c3                   	ret    

c00279ac <__subdf3>:
c00279ac:	55                   	push   ebp
c00279ad:	89 e5                	mov    ebp,esp
c00279af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00279b5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279bb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00279be:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00279c1:	5d                   	pop    ebp
c00279c2:	e9 94 f9 ff ff       	jmp    c002735b <__adddf3>

c00279c7 <__negdf2>:
c00279c7:	55                   	push   ebp
c00279c8:	89 e5                	mov    ebp,esp
c00279ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00279cd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00279d0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00279d6:	5d                   	pop    ebp
c00279d7:	c3                   	ret    

c00279d8 <__muldf3>:
c00279d8:	55                   	push   ebp
c00279d9:	89 e5                	mov    ebp,esp
c00279db:	57                   	push   edi
c00279dc:	56                   	push   esi
c00279dd:	53                   	push   ebx
c00279de:	83 ec 24             	sub    esp,0x24
c00279e1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00279e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00279e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00279ed:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00279f0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00279f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279f6:	89 c8                	mov    eax,ecx
c00279f8:	c1 f8 14             	sar    eax,0x14
c00279fb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00279fe:	89 f8                	mov    eax,edi
c0027a00:	89 fb                	mov    ebx,edi
c0027a02:	c1 e3 0b             	shl    ebx,0xb
c0027a05:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027a08:	c1 e1 0b             	shl    ecx,0xb
c0027a0b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a11:	c1 e8 15             	shr    eax,0x15
c0027a14:	09 c1                	or     ecx,eax
c0027a16:	89 d6                	mov    esi,edx
c0027a18:	89 d0                	mov    eax,edx
c0027a1a:	c1 f8 14             	sar    eax,0x14
c0027a1d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027a20:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027a23:	89 c3                	mov    ebx,eax
c0027a25:	c1 e3 0b             	shl    ebx,0xb
c0027a28:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027a2b:	c1 e6 0b             	shl    esi,0xb
c0027a2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a34:	c1 e8 15             	shr    eax,0x15
c0027a37:	09 c6                	or     esi,eax
c0027a39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027a41:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a44:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a47:	25 ff 07 00 00       	and    eax,0x7ff
c0027a4c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a4f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a52:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a55:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027a5c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a5f:	40                   	inc    eax
c0027a60:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a65:	0f 85 8d 00 00 00    	jne    c0027af8 <__muldf3+0x120>
c0027a6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a6e:	09 c8                	or     eax,ecx
c0027a70:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027a74:	74 44                	je     c0027aba <__muldf3+0xe2>
c0027a76:	85 c0                	test   eax,eax
c0027a78:	0f 85 31 02 00 00    	jne    c0027caf <__muldf3+0x2d7>
c0027a7e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a81:	40                   	inc    eax
c0027a82:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a87:	75 13                	jne    c0027a9c <__muldf3+0xc4>
c0027a89:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a8c:	09 f1                	or     ecx,esi
c0027a8e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a92:	74 22                	je     c0027ab6 <__muldf3+0xde>
c0027a94:	85 c9                	test   ecx,ecx
c0027a96:	0f 85 0d 02 00 00    	jne    c0027ca9 <__muldf3+0x2d1>
c0027a9c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027aa0:	0f 89 09 02 00 00    	jns    c0027caf <__muldf3+0x2d7>
c0027aa6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027aa9:	05 00 00 00 80       	add    eax,0x80000000
c0027aae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ab1:	e9 f9 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027ab6:	85 c9                	test   ecx,ecx
c0027ab8:	eb 2e                	jmp    c0027ae8 <__muldf3+0x110>
c0027aba:	85 c0                	test   eax,eax
c0027abc:	74 20                	je     c0027ade <__muldf3+0x106>
c0027abe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027ac1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ac4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ac7:	c1 ef 1f             	shr    edi,0x1f
c0027aca:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027acd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027ad0:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027ad3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ad6:	09 f9                	or     ecx,edi
c0027ad8:	78 1e                	js     c0027af8 <__muldf3+0x120>
c0027ada:	89 c3                	mov    ebx,eax
c0027adc:	eb e0                	jmp    c0027abe <__muldf3+0xe6>
c0027ade:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ae1:	f7 d0                	not    eax
c0027ae3:	a9 ff 07 00 00       	test   eax,0x7ff
c0027ae8:	75 b2                	jne    c0027a9c <__muldf3+0xc4>
c0027aea:	31 ff                	xor    edi,edi
c0027aec:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027af3:	e9 b7 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027af8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027afb:	40                   	inc    eax
c0027afc:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b01:	75 57                	jne    c0027b5a <__muldf3+0x182>
c0027b03:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027b06:	09 f0                	or     eax,esi
c0027b08:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b0c:	74 23                	je     c0027b31 <__muldf3+0x159>
c0027b0e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b12:	0f 89 91 01 00 00    	jns    c0027ca9 <__muldf3+0x2d1>
c0027b18:	85 c0                	test   eax,eax
c0027b1a:	0f 85 89 01 00 00    	jne    c0027ca9 <__muldf3+0x2d1>
c0027b20:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027b23:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027b29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b2c:	e9 7e 01 00 00       	jmp    c0027caf <__muldf3+0x2d7>
c0027b31:	85 c0                	test   eax,eax
c0027b33:	75 0c                	jne    c0027b41 <__muldf3+0x169>
c0027b35:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b39:	0f 89 6a 01 00 00    	jns    c0027ca9 <__muldf3+0x2d1>
c0027b3f:	eb df                	jmp    c0027b20 <__muldf3+0x148>
c0027b41:	01 f6                	add    esi,esi
c0027b43:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027b46:	c1 ea 1f             	shr    edx,0x1f
c0027b49:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027b4c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027b4f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b52:	09 d6                	or     esi,edx
c0027b54:	78 04                	js     c0027b5a <__muldf3+0x182>
c0027b56:	89 c3                	mov    ebx,eax
c0027b58:	eb e7                	jmp    c0027b41 <__muldf3+0x169>
c0027b5a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027b60:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b66:	89 c8                	mov    eax,ecx
c0027b68:	f7 e6                	mul    esi
c0027b6a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027b6d:	89 c7                	mov    edi,eax
c0027b6f:	89 c8                	mov    eax,ecx
c0027b71:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b74:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027b77:	89 c1                	mov    ecx,eax
c0027b79:	89 f0                	mov    eax,esi
c0027b7b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027b7e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027b81:	89 c6                	mov    esi,eax
c0027b83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b86:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027b89:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b8c:	31 c0                	xor    eax,eax
c0027b8e:	01 f1                	add    ecx,esi
c0027b90:	0f 92 c0             	setb   al
c0027b93:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027b96:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027b99:	83 d6 00             	adc    esi,0x0
c0027b9c:	01 c7                	add    edi,eax
c0027b9e:	83 d6 00             	adc    esi,0x0
c0027ba1:	01 ca                	add    edx,ecx
c0027ba3:	0f 92 c1             	setb   cl
c0027ba6:	0f b6 c9             	movzx  ecx,cl
c0027ba9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027bac:	83 d6 00             	adc    esi,0x0
c0027baf:	01 cf                	add    edi,ecx
c0027bb1:	83 d6 00             	adc    esi,0x0
c0027bb4:	31 c9                	xor    ecx,ecx
c0027bb6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027bb9:	0f 95 c1             	setne  cl
c0027bbc:	09 cf                	or     edi,ecx
c0027bbe:	85 f6                	test   esi,esi
c0027bc0:	78 0c                	js     c0027bce <__muldf3+0x1f6>
c0027bc2:	01 f6                	add    esi,esi
c0027bc4:	89 f8                	mov    eax,edi
c0027bc6:	c1 e8 1f             	shr    eax,0x1f
c0027bc9:	09 c6                	or     esi,eax
c0027bcb:	01 ff                	add    edi,edi
c0027bcd:	4b                   	dec    ebx
c0027bce:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027bd4:	0f 8f 85 00 00 00    	jg     c0027c5f <__muldf3+0x287>
c0027bda:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027be0:	85 db                	test   ebx,ebx
c0027be2:	0f 8f 84 00 00 00    	jg     c0027c6c <__muldf3+0x294>
c0027be8:	83 fb cc             	cmp    ebx,0xffffffcc
c0027beb:	7c 79                	jl     c0027c66 <__muldf3+0x28e>
c0027bed:	ba 01 00 00 00       	mov    edx,0x1
c0027bf2:	29 da                	sub    edx,ebx
c0027bf4:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bfa:	83 fa 1f             	cmp    edx,0x1f
c0027bfd:	7e 30                	jle    c0027c2f <__muldf3+0x257>
c0027bff:	83 fa 20             	cmp    edx,0x20
c0027c02:	75 0b                	jne    c0027c0f <__muldf3+0x237>
c0027c04:	31 c0                	xor    eax,eax
c0027c06:	85 ff                	test   edi,edi
c0027c08:	0f 95 c0             	setne  al
c0027c0b:	89 c7                	mov    edi,eax
c0027c0d:	eb 1a                	jmp    c0027c29 <__muldf3+0x251>
c0027c0f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027c12:	89 f0                	mov    eax,esi
c0027c14:	d3 e0                	shl    eax,cl
c0027c16:	09 f8                	or     eax,edi
c0027c18:	0f 95 c0             	setne  al
c0027c1b:	0f b6 c0             	movzx  eax,al
c0027c1e:	89 c7                	mov    edi,eax
c0027c20:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027c25:	29 d9                	sub    ecx,ebx
c0027c27:	d3 ee                	shr    esi,cl
c0027c29:	09 f7                	or     edi,esi
c0027c2b:	31 db                	xor    ebx,ebx
c0027c2d:	eb 3b                	jmp    c0027c6a <__muldf3+0x292>
c0027c2f:	83 c3 1f             	add    ebx,0x1f
c0027c32:	89 f0                	mov    eax,esi
c0027c34:	88 d9                	mov    cl,bl
c0027c36:	d3 e0                	shl    eax,cl
c0027c38:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c3b:	89 f8                	mov    eax,edi
c0027c3d:	88 d1                	mov    cl,dl
c0027c3f:	d3 e8                	shr    eax,cl
c0027c41:	89 c1                	mov    ecx,eax
c0027c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027c46:	09 c8                	or     eax,ecx
c0027c48:	88 d9                	mov    cl,bl
c0027c4a:	d3 e7                	shl    edi,cl
c0027c4c:	31 db                	xor    ebx,ebx
c0027c4e:	85 ff                	test   edi,edi
c0027c50:	0f 95 c3             	setne  bl
c0027c53:	89 df                	mov    edi,ebx
c0027c55:	09 c7                	or     edi,eax
c0027c57:	88 d1                	mov    cl,dl
c0027c59:	d3 ee                	shr    esi,cl
c0027c5b:	31 db                	xor    ebx,ebx
c0027c5d:	eb 0d                	jmp    c0027c6c <__muldf3+0x294>
c0027c5f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027c64:	eb 02                	jmp    c0027c68 <__muldf3+0x290>
c0027c66:	31 db                	xor    ebx,ebx
c0027c68:	31 ff                	xor    edi,edi
c0027c6a:	31 f6                	xor    esi,esi
c0027c6c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c6f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027c72:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027c77:	09 c3                	or     ebx,eax
c0027c79:	c1 e3 14             	shl    ebx,0x14
c0027c7c:	89 f0                	mov    eax,esi
c0027c7e:	c1 e8 0b             	shr    eax,0xb
c0027c81:	09 c3                	or     ebx,eax
c0027c83:	89 f8                	mov    eax,edi
c0027c85:	c1 e8 0b             	shr    eax,0xb
c0027c88:	c1 e6 15             	shl    esi,0x15
c0027c8b:	09 c6                	or     esi,eax
c0027c8d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027c93:	0f 95 c1             	setne  cl
c0027c96:	09 c8                	or     eax,ecx
c0027c98:	83 e0 01             	and    eax,0x1
c0027c9b:	c1 ef 0a             	shr    edi,0xa
c0027c9e:	21 c7                	and    edi,eax
c0027ca0:	01 f7                	add    edi,esi
c0027ca2:	83 d3 00             	adc    ebx,0x0
c0027ca5:	89 da                	mov    edx,ebx
c0027ca7:	eb 03                	jmp    c0027cac <__muldf3+0x2d4>
c0027ca9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027cac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027caf:	89 f8                	mov    eax,edi
c0027cb1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027cb4:	83 c4 24             	add    esp,0x24
c0027cb7:	5b                   	pop    ebx
c0027cb8:	5e                   	pop    esi
c0027cb9:	5f                   	pop    edi
c0027cba:	5d                   	pop    ebp
c0027cbb:	c3                   	ret    

c0027cbc <__divdf3>:
c0027cbc:	55                   	push   ebp
c0027cbd:	89 e5                	mov    ebp,esp
c0027cbf:	57                   	push   edi
c0027cc0:	56                   	push   esi
c0027cc1:	53                   	push   ebx
c0027cc2:	83 ec 2c             	sub    esp,0x2c
c0027cc5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cc8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ccb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cce:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027cd1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027cd4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cd7:	89 ce                	mov    esi,ecx
c0027cd9:	89 c8                	mov    eax,ecx
c0027cdb:	c1 f8 14             	sar    eax,0x14
c0027cde:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027ce1:	89 f8                	mov    eax,edi
c0027ce3:	89 fb                	mov    ebx,edi
c0027ce5:	c1 e3 0b             	shl    ebx,0xb
c0027ce8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027ceb:	c1 e6 0b             	shl    esi,0xb
c0027cee:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cf4:	c1 e8 15             	shr    eax,0x15
c0027cf7:	09 c6                	or     esi,eax
c0027cf9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027cfc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cff:	89 c2                	mov    edx,eax
c0027d01:	c1 fa 14             	sar    edx,0x14
c0027d04:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d07:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d0a:	89 de                	mov    esi,ebx
c0027d0c:	c1 e6 0b             	shl    esi,0xb
c0027d0f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d12:	c1 e0 0b             	shl    eax,0xb
c0027d15:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d1a:	c1 eb 15             	shr    ebx,0x15
c0027d1d:	09 d8                	or     eax,ebx
c0027d1f:	89 c2                	mov    edx,eax
c0027d21:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d24:	25 ff 07 00 00       	and    eax,0x7ff
c0027d29:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027d2c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d2f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027d35:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027d38:	29 d8                	sub    eax,ebx
c0027d3a:	05 ff 03 00 00       	add    eax,0x3ff
c0027d3f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d42:	46                   	inc    esi
c0027d43:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027d49:	0f 85 a5 00 00 00    	jne    c0027df4 <__divdf3+0x138>
c0027d4f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027d52:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027d55:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027d59:	74 2a                	je     c0027d85 <__divdf3+0xc9>
c0027d5b:	85 f6                	test   esi,esi
c0027d5d:	0f 85 cc 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027d63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d66:	40                   	inc    eax
c0027d67:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d6c:	75 26                	jne    c0027d94 <__divdf3+0xd8>
c0027d6e:	85 db                	test   ebx,ebx
c0027d70:	74 22                	je     c0027d94 <__divdf3+0xd8>
c0027d72:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d75:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d78:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d7b:	09 d0                	or     eax,edx
c0027d7d:	0f 85 ac 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027d83:	eb 63                	jmp    c0027de8 <__divdf3+0x12c>
c0027d85:	85 f6                	test   esi,esi
c0027d87:	75 22                	jne    c0027dab <__divdf3+0xef>
c0027d89:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d8c:	40                   	inc    eax
c0027d8d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d92:	74 36                	je     c0027dca <__divdf3+0x10e>
c0027d94:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027d98:	0f 89 91 02 00 00    	jns    c002802f <__divdf3+0x373>
c0027d9e:	89 f8                	mov    eax,edi
c0027da0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027da6:	e9 80 02 00 00       	jmp    c002802b <__divdf3+0x36f>
c0027dab:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dae:	01 f6                	add    esi,esi
c0027db0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027db3:	c1 ef 1f             	shr    edi,0x1f
c0027db6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027db9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027dbc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027dbf:	09 f7                	or     edi,esi
c0027dc1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027dc4:	78 2e                	js     c0027df4 <__divdf3+0x138>
c0027dc6:	89 c8                	mov    eax,ecx
c0027dc8:	eb e1                	jmp    c0027dab <__divdf3+0xef>
c0027dca:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dcd:	09 d0                	or     eax,edx
c0027dcf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027dd3:	74 0f                	je     c0027de4 <__divdf3+0x128>
c0027dd5:	85 c0                	test   eax,eax
c0027dd7:	74 bb                	je     c0027d94 <__divdf3+0xd8>
c0027dd9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ddc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ddf:	e9 4b 02 00 00       	jmp    c002802f <__divdf3+0x373>
c0027de4:	85 c0                	test   eax,eax
c0027de6:	75 ac                	jne    c0027d94 <__divdf3+0xd8>
c0027de8:	31 ff                	xor    edi,edi
c0027dea:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027def:	e9 3b 02 00 00       	jmp    c002802f <__divdf3+0x373>
c0027df4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027df7:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027dfa:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027e00:	75 6b                	jne    c0027e6d <__divdf3+0x1b1>
c0027e02:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e05:	09 d6                	or     esi,edx
c0027e07:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e0b:	74 28                	je     c0027e35 <__divdf3+0x179>
c0027e0d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e10:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e13:	85 f6                	test   esi,esi
c0027e15:	0f 85 14 02 00 00    	jne    c002802f <__divdf3+0x373>
c0027e1b:	31 ff                	xor    edi,edi
c0027e1d:	31 c9                	xor    ecx,ecx
c0027e1f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e22:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e25:	0f 89 04 02 00 00    	jns    c002802f <__divdf3+0x373>
c0027e2b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027e30:	e9 fa 01 00 00       	jmp    c002802f <__divdf3+0x373>
c0027e35:	85 f6                	test   esi,esi
c0027e37:	75 1b                	jne    c0027e54 <__divdf3+0x198>
c0027e39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027e3c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027e3f:	25 00 00 00 80       	and    eax,0x80000000
c0027e44:	31 c9                	xor    ecx,ecx
c0027e46:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027e4b:	89 cf                	mov    edi,ecx
c0027e4d:	89 c1                	mov    ecx,eax
c0027e4f:	e9 db 01 00 00       	jmp    c002802f <__divdf3+0x373>
c0027e54:	01 d2                	add    edx,edx
c0027e56:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e59:	c1 eb 1f             	shr    ebx,0x1f
c0027e5c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e5f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027e62:	8d 48 01             	lea    ecx,[eax+0x1]
c0027e65:	09 da                	or     edx,ebx
c0027e67:	78 04                	js     c0027e6d <__divdf3+0x1b1>
c0027e69:	89 c8                	mov    eax,ecx
c0027e6b:	eb e7                	jmp    c0027e54 <__divdf3+0x198>
c0027e6d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e70:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e76:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e7c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027e7f:	39 d6                	cmp    esi,edx
c0027e81:	77 0d                	ja     c0027e90 <__divdf3+0x1d4>
c0027e83:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027e86:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027e89:	72 1b                	jb     c0027ea6 <__divdf3+0x1ea>
c0027e8b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027e8e:	75 16                	jne    c0027ea6 <__divdf3+0x1ea>
c0027e90:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e93:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027e96:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027e99:	83 de 00             	sbb    esi,0x0
c0027e9c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027e9f:	ba 01 00 00 00       	mov    edx,0x1
c0027ea4:	eb 02                	jmp    c0027ea8 <__divdf3+0x1ec>
c0027ea6:	31 d2                	xor    edx,edx
c0027ea8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027eaf:	31 ff                	xor    edi,edi
c0027eb1:	01 ff                	add    edi,edi
c0027eb3:	89 d1                	mov    ecx,edx
c0027eb5:	c1 e9 1f             	shr    ecx,0x1f
c0027eb8:	09 cf                	or     edi,ecx
c0027eba:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ebd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027ec0:	89 da                	mov    edx,ebx
c0027ec2:	89 f3                	mov    ebx,esi
c0027ec4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027ec7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027eca:	c1 e9 1f             	shr    ecx,0x1f
c0027ecd:	09 ce                	or     esi,ecx
c0027ecf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ed2:	01 c9                	add    ecx,ecx
c0027ed4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027ed7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027eda:	85 db                	test   ebx,ebx
c0027edc:	78 29                	js     c0027f07 <__divdf3+0x24b>
c0027ede:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027ee1:	72 07                	jb     c0027eea <__divdf3+0x22e>
c0027ee3:	75 3c                	jne    c0027f21 <__divdf3+0x265>
c0027ee5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ee8:	77 37                	ja     c0027f21 <__divdf3+0x265>
c0027eea:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027eed:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027ef0:	31 d2                	xor    edx,edx
c0027ef2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027ef5:	0f 97 c2             	seta   dl
c0027ef8:	29 d6                	sub    esi,edx
c0027efa:	89 d9                	mov    ecx,ebx
c0027efc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027eff:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f02:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027f05:	eb 17                	jmp    c0027f1e <__divdf3+0x262>
c0027f07:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f0a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f10:	0f 97 c1             	seta   cl
c0027f13:	0f b6 c9             	movzx  ecx,cl
c0027f16:	29 ce                	sub    esi,ecx
c0027f18:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027f1b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027f1e:	83 ca 01             	or     edx,0x1
c0027f21:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027f24:	75 8b                	jne    c0027eb1 <__divdf3+0x1f5>
c0027f26:	c1 e7 09             	shl    edi,0x9
c0027f29:	89 d1                	mov    ecx,edx
c0027f2b:	c1 e9 17             	shr    ecx,0x17
c0027f2e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f31:	09 f3                	or     ebx,esi
c0027f33:	0f 95 c3             	setne  bl
c0027f36:	0f b6 db             	movzx  ebx,bl
c0027f39:	c1 e2 09             	shl    edx,0x9
c0027f3c:	09 d3                	or     ebx,edx
c0027f3e:	89 ca                	mov    edx,ecx
c0027f40:	09 fa                	or     edx,edi
c0027f42:	78 0c                	js     c0027f50 <__divdf3+0x294>
c0027f44:	01 d2                	add    edx,edx
c0027f46:	89 d9                	mov    ecx,ebx
c0027f48:	c1 e9 1f             	shr    ecx,0x1f
c0027f4b:	09 ca                	or     edx,ecx
c0027f4d:	01 db                	add    ebx,ebx
c0027f4f:	48                   	dec    eax
c0027f50:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027f55:	0f 8f 83 00 00 00    	jg     c0027fde <__divdf3+0x322>
c0027f5b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027f61:	85 c0                	test   eax,eax
c0027f63:	0f 8f 82 00 00 00    	jg     c0027feb <__divdf3+0x32f>
c0027f69:	83 f8 cc             	cmp    eax,0xffffffcc
c0027f6c:	7c 77                	jl     c0027fe5 <__divdf3+0x329>
c0027f6e:	be 01 00 00 00       	mov    esi,0x1
c0027f73:	29 c6                	sub    esi,eax
c0027f75:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f7b:	83 fe 1f             	cmp    esi,0x1f
c0027f7e:	7e 2f                	jle    c0027faf <__divdf3+0x2f3>
c0027f80:	83 fe 20             	cmp    esi,0x20
c0027f83:	75 0a                	jne    c0027f8f <__divdf3+0x2d3>
c0027f85:	85 db                	test   ebx,ebx
c0027f87:	0f 95 c3             	setne  bl
c0027f8a:	0f b6 db             	movzx  ebx,bl
c0027f8d:	eb 1a                	jmp    c0027fa9 <__divdf3+0x2ed>
c0027f8f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027f92:	89 d7                	mov    edi,edx
c0027f94:	d3 e7                	shl    edi,cl
c0027f96:	89 f9                	mov    ecx,edi
c0027f98:	09 d9                	or     ecx,ebx
c0027f9a:	0f 95 c3             	setne  bl
c0027f9d:	0f b6 db             	movzx  ebx,bl
c0027fa0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027fa5:	29 c1                	sub    ecx,eax
c0027fa7:	d3 ea                	shr    edx,cl
c0027fa9:	09 d3                	or     ebx,edx
c0027fab:	31 c0                	xor    eax,eax
c0027fad:	eb 3a                	jmp    c0027fe9 <__divdf3+0x32d>
c0027faf:	83 c0 1f             	add    eax,0x1f
c0027fb2:	89 d7                	mov    edi,edx
c0027fb4:	88 c1                	mov    cl,al
c0027fb6:	d3 e7                	shl    edi,cl
c0027fb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fbb:	89 df                	mov    edi,ebx
c0027fbd:	89 f1                	mov    ecx,esi
c0027fbf:	d3 ef                	shr    edi,cl
c0027fc1:	89 f9                	mov    ecx,edi
c0027fc3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027fc6:	09 cf                	or     edi,ecx
c0027fc8:	88 c1                	mov    cl,al
c0027fca:	d3 e3                	shl    ebx,cl
c0027fcc:	85 db                	test   ebx,ebx
c0027fce:	0f 95 c3             	setne  bl
c0027fd1:	0f b6 db             	movzx  ebx,bl
c0027fd4:	09 fb                	or     ebx,edi
c0027fd6:	89 f1                	mov    ecx,esi
c0027fd8:	d3 ea                	shr    edx,cl
c0027fda:	31 c0                	xor    eax,eax
c0027fdc:	eb 0d                	jmp    c0027feb <__divdf3+0x32f>
c0027fde:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027fe3:	eb 02                	jmp    c0027fe7 <__divdf3+0x32b>
c0027fe5:	31 c0                	xor    eax,eax
c0027fe7:	31 db                	xor    ebx,ebx
c0027fe9:	31 d2                	xor    edx,edx
c0027feb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027fee:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027ff1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027ff7:	09 c8                	or     eax,ecx
c0027ff9:	c1 e0 14             	shl    eax,0x14
c0027ffc:	89 d1                	mov    ecx,edx
c0027ffe:	c1 e9 0b             	shr    ecx,0xb
c0028001:	09 c8                	or     eax,ecx
c0028003:	89 c6                	mov    esi,eax
c0028005:	89 d9                	mov    ecx,ebx
c0028007:	c1 e9 0b             	shr    ecx,0xb
c002800a:	c1 e2 15             	shl    edx,0x15
c002800d:	09 ca                	or     edx,ecx
c002800f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028015:	0f 95 c0             	setne  al
c0028018:	09 c1                	or     ecx,eax
c002801a:	83 e1 01             	and    ecx,0x1
c002801d:	c1 eb 0a             	shr    ebx,0xa
c0028020:	21 cb                	and    ebx,ecx
c0028022:	01 d3                	add    ebx,edx
c0028024:	89 d8                	mov    eax,ebx
c0028026:	83 d6 00             	adc    esi,0x0
c0028029:	89 f2                	mov    edx,esi
c002802b:	89 c7                	mov    edi,eax
c002802d:	89 d1                	mov    ecx,edx
c002802f:	89 f8                	mov    eax,edi
c0028031:	89 ca                	mov    edx,ecx
c0028033:	83 c4 2c             	add    esp,0x2c
c0028036:	5b                   	pop    ebx
c0028037:	5e                   	pop    esi
c0028038:	5f                   	pop    edi
c0028039:	5d                   	pop    ebp
c002803a:	c3                   	ret    

c002803b <__floatsidf>:
c002803b:	55                   	push   ebp
c002803c:	89 e5                	mov    ebp,esp
c002803e:	56                   	push   esi
c002803f:	53                   	push   ebx
c0028040:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028043:	85 db                	test   ebx,ebx
c0028045:	7e 15                	jle    c002805c <__floatsidf+0x21>
c0028047:	0f bd cb             	bsr    ecx,ebx
c002804a:	83 f1 1f             	xor    ecx,0x1f
c002804d:	d3 e3                	shl    ebx,cl
c002804f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028055:	b8 1e 04 00 00       	mov    eax,0x41e
c002805a:	eb 21                	jmp    c002807d <__floatsidf+0x42>
c002805c:	b8 00 00 00 00       	mov    eax,0x0
c0028061:	ba 00 00 00 00       	mov    edx,0x0
c0028066:	74 2a                	je     c0028092 <__floatsidf+0x57>
c0028068:	f7 db                	neg    ebx
c002806a:	0f bd cb             	bsr    ecx,ebx
c002806d:	83 f1 1f             	xor    ecx,0x1f
c0028070:	d3 e3                	shl    ebx,cl
c0028072:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028078:	b8 1e 0c 00 00       	mov    eax,0xc1e
c002807d:	29 c8                	sub    eax,ecx
c002807f:	c1 e0 14             	shl    eax,0x14
c0028082:	89 c1                	mov    ecx,eax
c0028084:	89 de                	mov    esi,ebx
c0028086:	c1 ee 0b             	shr    esi,0xb
c0028089:	09 f1                	or     ecx,esi
c002808b:	89 ca                	mov    edx,ecx
c002808d:	c1 e3 15             	shl    ebx,0x15
c0028090:	89 d8                	mov    eax,ebx
c0028092:	5b                   	pop    ebx
c0028093:	5e                   	pop    esi
c0028094:	5d                   	pop    ebp
c0028095:	c3                   	ret    

c0028096 <__floatunsidf>:
c0028096:	55                   	push   ebp
c0028097:	89 e5                	mov    ebp,esp
c0028099:	56                   	push   esi
c002809a:	53                   	push   ebx
c002809b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002809e:	85 db                	test   ebx,ebx
c00280a0:	74 2a                	je     c00280cc <__floatunsidf+0x36>
c00280a2:	0f bd cb             	bsr    ecx,ebx
c00280a5:	83 f1 1f             	xor    ecx,0x1f
c00280a8:	d3 e3                	shl    ebx,cl
c00280aa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280b0:	b8 1e 04 00 00       	mov    eax,0x41e
c00280b5:	29 c8                	sub    eax,ecx
c00280b7:	c1 e0 14             	shl    eax,0x14
c00280ba:	89 c1                	mov    ecx,eax
c00280bc:	89 de                	mov    esi,ebx
c00280be:	c1 ee 0b             	shr    esi,0xb
c00280c1:	09 f1                	or     ecx,esi
c00280c3:	89 ca                	mov    edx,ecx
c00280c5:	c1 e3 15             	shl    ebx,0x15
c00280c8:	89 d8                	mov    eax,ebx
c00280ca:	eb 04                	jmp    c00280d0 <__floatunsidf+0x3a>
c00280cc:	31 c0                	xor    eax,eax
c00280ce:	31 d2                	xor    edx,edx
c00280d0:	5b                   	pop    ebx
c00280d1:	5e                   	pop    esi
c00280d2:	5d                   	pop    ebp
c00280d3:	c3                   	ret    

c00280d4 <__fixdfsi>:
c00280d4:	55                   	push   ebp
c00280d5:	89 e5                	mov    ebp,esp
c00280d7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280da:	89 d1                	mov    ecx,edx
c00280dc:	c1 e1 0b             	shl    ecx,0xb
c00280df:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00280e8:	c1 e8 15             	shr    eax,0x15
c00280eb:	09 c1                	or     ecx,eax
c00280ed:	c1 fa 14             	sar    edx,0x14
c00280f0:	78 1f                	js     c0028111 <__fixdfsi+0x3d>
c00280f2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00280f8:	31 c0                	xor    eax,eax
c00280fa:	83 fa 1e             	cmp    edx,0x1e
c00280fd:	77 40                	ja     c002813f <__fixdfsi+0x6b>
c00280ff:	89 c8                	mov    eax,ecx
c0028101:	0d 00 00 00 80       	or     eax,0x80000000
c0028106:	b9 1f 00 00 00       	mov    ecx,0x1f
c002810b:	29 d1                	sub    ecx,edx
c002810d:	d3 e8                	shr    eax,cl
c002810f:	eb 2e                	jmp    c002813f <__fixdfsi+0x6b>
c0028111:	31 c0                	xor    eax,eax
c0028113:	81 c2 01 04 00 00    	add    edx,0x401
c0028119:	78 24                	js     c002813f <__fixdfsi+0x6b>
c002811b:	83 fa 1e             	cmp    edx,0x1e
c002811e:	7e 09                	jle    c0028129 <__fixdfsi+0x55>
c0028120:	83 fa 1f             	cmp    edx,0x1f
c0028123:	75 18                	jne    c002813d <__fixdfsi+0x69>
c0028125:	85 c9                	test   ecx,ecx
c0028127:	75 14                	jne    c002813d <__fixdfsi+0x69>
c0028129:	89 c8                	mov    eax,ecx
c002812b:	0d 00 00 00 80       	or     eax,0x80000000
c0028130:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028135:	29 d1                	sub    ecx,edx
c0028137:	d3 e8                	shr    eax,cl
c0028139:	f7 d8                	neg    eax
c002813b:	eb 02                	jmp    c002813f <__fixdfsi+0x6b>
c002813d:	31 c0                	xor    eax,eax
c002813f:	5d                   	pop    ebp
c0028140:	c3                   	ret    

c0028141 <__fixunsdfsi>:
c0028141:	55                   	push   ebp
c0028142:	89 e5                	mov    ebp,esp
c0028144:	53                   	push   ebx
c0028145:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028148:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002814b:	89 d3                	mov    ebx,edx
c002814d:	c1 fb 14             	sar    ebx,0x14
c0028150:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028156:	31 c0                	xor    eax,eax
c0028158:	83 fb 1f             	cmp    ebx,0x1f
c002815b:	77 1d                	ja     c002817a <__fixunsdfsi+0x39>
c002815d:	89 d0                	mov    eax,edx
c002815f:	c1 e0 0b             	shl    eax,0xb
c0028162:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028167:	c1 e9 15             	shr    ecx,0x15
c002816a:	09 c8                	or     eax,ecx
c002816c:	0d 00 00 00 80       	or     eax,0x80000000
c0028171:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028176:	29 d9                	sub    ecx,ebx
c0028178:	d3 e8                	shr    eax,cl
c002817a:	5b                   	pop    ebx
c002817b:	5d                   	pop    ebp
c002817c:	c3                   	ret    

c002817d <__cmpdf2>:
c002817d:	55                   	push   ebp
c002817e:	89 e5                	mov    ebp,esp
c0028180:	57                   	push   edi
c0028181:	56                   	push   esi
c0028182:	53                   	push   ebx
c0028183:	83 ec 0c             	sub    esp,0xc
c0028186:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028189:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002818c:	89 ca                	mov    edx,ecx
c002818e:	c1 ea 14             	shr    edx,0x14
c0028191:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028197:	89 cb                	mov    ebx,ecx
c0028199:	c1 fb 1f             	sar    ebx,0x1f
c002819c:	31 da                	xor    edx,ebx
c002819e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281a1:	89 df                	mov    edi,ebx
c00281a3:	c1 e7 0b             	shl    edi,0xb
c00281a6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281a9:	c1 e1 0b             	shl    ecx,0xb
c00281ac:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281b2:	c1 eb 15             	shr    ebx,0x15
c00281b5:	09 d9                	or     ecx,ebx
c00281b7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00281ba:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00281bd:	89 ce                	mov    esi,ecx
c00281bf:	c1 ee 14             	shr    esi,0x14
c00281c2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00281c8:	89 cb                	mov    ebx,ecx
c00281ca:	c1 fb 1f             	sar    ebx,0x1f
c00281cd:	31 de                	xor    esi,ebx
c00281cf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00281d2:	89 df                	mov    edi,ebx
c00281d4:	c1 e7 0b             	shl    edi,0xb
c00281d7:	c1 e1 0b             	shl    ecx,0xb
c00281da:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00281e0:	c1 eb 15             	shr    ebx,0x15
c00281e3:	09 d9                	or     ecx,ebx
c00281e5:	89 d3                	mov    ebx,edx
c00281e7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00281ed:	43                   	inc    ebx
c00281ee:	83 fb 01             	cmp    ebx,0x1
c00281f1:	77 08                	ja     c00281fb <__cmpdf2+0x7e>
c00281f3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281f9:	75 68                	jne    c0028263 <__cmpdf2+0xe6>
c00281fb:	89 f3                	mov    ebx,esi
c00281fd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028203:	43                   	inc    ebx
c0028204:	83 fb 01             	cmp    ebx,0x1
c0028207:	77 06                	ja     c002820f <__cmpdf2+0x92>
c0028209:	89 fb                	mov    ebx,edi
c002820b:	09 cb                	or     ebx,ecx
c002820d:	75 54                	jne    c0028263 <__cmpdf2+0xe6>
c002820f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028212:	09 f8                	or     eax,edi
c0028214:	09 c8                	or     eax,ecx
c0028216:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028219:	75 12                	jne    c002822d <__cmpdf2+0xb0>
c002821b:	8d 42 01             	lea    eax,[edx+0x1]
c002821e:	83 f8 01             	cmp    eax,0x1
c0028221:	77 0a                	ja     c002822d <__cmpdf2+0xb0>
c0028223:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028226:	31 c0                	xor    eax,eax
c0028228:	83 fb 01             	cmp    ebx,0x1
c002822b:	76 36                	jbe    c0028263 <__cmpdf2+0xe6>
c002822d:	b8 01 00 00 00       	mov    eax,0x1
c0028232:	39 f2                	cmp    edx,esi
c0028234:	7f 2d                	jg     c0028263 <__cmpdf2+0xe6>
c0028236:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002823b:	7c 26                	jl     c0028263 <__cmpdf2+0xe6>
c002823d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028240:	77 07                	ja     c0028249 <__cmpdf2+0xcc>
c0028242:	72 16                	jb     c002825a <__cmpdf2+0xdd>
c0028244:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028247:	76 0a                	jbe    c0028253 <__cmpdf2+0xd6>
c0028249:	89 d0                	mov    eax,edx
c002824b:	c1 f8 1f             	sar    eax,0x1f
c002824e:	83 c8 01             	or     eax,0x1
c0028251:	eb 10                	jmp    c0028263 <__cmpdf2+0xe6>
c0028253:	b8 00 00 00 00       	mov    eax,0x0
c0028258:	73 09                	jae    c0028263 <__cmpdf2+0xe6>
c002825a:	89 d0                	mov    eax,edx
c002825c:	c1 f8 1f             	sar    eax,0x1f
c002825f:	83 e0 02             	and    eax,0x2
c0028262:	48                   	dec    eax
c0028263:	83 c4 0c             	add    esp,0xc
c0028266:	5b                   	pop    ebx
c0028267:	5e                   	pop    esi
c0028268:	5f                   	pop    edi
c0028269:	5d                   	pop    ebp
c002826a:	c3                   	ret    

c002826b <__eqdf2>:
c002826b:	55                   	push   ebp
c002826c:	89 e5                	mov    ebp,esp
c002826e:	50                   	push   eax
c002826f:	6a 01                	push   0x1
c0028271:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028274:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028277:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002827a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002827d:	e8 fb fe ff ff       	call   c002817d <__cmpdf2>
c0028282:	83 c4 18             	add    esp,0x18
c0028285:	c9                   	leave  
c0028286:	c3                   	ret    

c0028287 <__nedf2>:
c0028287:	eb e2                	jmp    c002826b <__eqdf2>

c0028289 <__gtdf2>:
c0028289:	55                   	push   ebp
c002828a:	89 e5                	mov    ebp,esp
c002828c:	50                   	push   eax
c002828d:	6a ff                	push   0xffffffff
c002828f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028292:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028295:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028298:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002829b:	e8 dd fe ff ff       	call   c002817d <__cmpdf2>
c00282a0:	83 c4 18             	add    esp,0x18
c00282a3:	c9                   	leave  
c00282a4:	c3                   	ret    

c00282a5 <__gedf2>:
c00282a5:	eb e2                	jmp    c0028289 <__gtdf2>

c00282a7 <__ltdf2>:
c00282a7:	eb c2                	jmp    c002826b <__eqdf2>

c00282a9 <__ledf2>:
c00282a9:	eb c0                	jmp    c002826b <__eqdf2>

c00282ab <__truncdfsf2>:
c00282ab:	55                   	push   ebp
c00282ac:	89 e5                	mov    ebp,esp
c00282ae:	57                   	push   edi
c00282af:	56                   	push   esi
c00282b0:	53                   	push   ebx
c00282b1:	83 ec 0c             	sub    esp,0xc
c00282b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00282b7:	89 d1                	mov    ecx,edx
c00282b9:	c1 f9 14             	sar    ecx,0x14
c00282bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282bf:	89 df                	mov    edi,ebx
c00282c1:	c1 e7 0b             	shl    edi,0xb
c00282c4:	89 d0                	mov    eax,edx
c00282c6:	c1 e0 0b             	shl    eax,0xb
c00282c9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00282ce:	c1 eb 15             	shr    ebx,0x15
c00282d1:	09 d8                	or     eax,ebx
c00282d3:	89 cb                	mov    ebx,ecx
c00282d5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282db:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00282e1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00282e7:	0f 86 9e 00 00 00    	jbe    c002838b <__truncdfsf2+0xe0>
c00282ed:	85 db                	test   ebx,ebx
c00282ef:	75 0a                	jne    c00282fb <__truncdfsf2+0x50>
c00282f1:	c1 fa 17             	sar    edx,0x17
c00282f4:	30 d2                	xor    dl,dl
c00282f6:	e9 84 00 00 00       	jmp    c002837f <__truncdfsf2+0xd4>
c00282fb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028301:	83 fe 83             	cmp    esi,0xffffff83
c0028304:	7d 4b                	jge    c0028351 <__truncdfsf2+0xa6>
c0028306:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002830b:	29 f1                	sub    ecx,esi
c002830d:	83 f9 1f             	cmp    ecx,0x1f
c0028310:	7f 6b                	jg     c002837d <__truncdfsf2+0xd2>
c0028312:	0d 00 00 00 80       	or     eax,0x80000000
c0028317:	89 c3                	mov    ebx,eax
c0028319:	d3 eb                	shr    ebx,cl
c002831b:	be 01 00 00 00       	mov    esi,0x1
c0028320:	d3 e6                	shl    esi,cl
c0028322:	4e                   	dec    esi
c0028323:	21 f0                	and    eax,esi
c0028325:	09 f8                	or     eax,edi
c0028327:	0f 95 c0             	setne  al
c002832a:	0f b6 c0             	movzx  eax,al
c002832d:	09 c3                	or     ebx,eax
c002832f:	89 d9                	mov    ecx,ebx
c0028331:	c1 e9 08             	shr    ecx,0x8
c0028334:	f6 c3 7f             	test   bl,0x7f
c0028337:	0f 95 c0             	setne  al
c002833a:	09 c8                	or     eax,ecx
c002833c:	83 e0 01             	and    eax,0x1
c002833f:	c1 eb 07             	shr    ebx,0x7
c0028342:	21 c3                	and    ebx,eax
c0028344:	81 e2 00 00 00 80    	and    edx,0x80000000
c002834a:	09 d1                	or     ecx,edx
c002834c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002834f:	eb 76                	jmp    c00283c7 <__truncdfsf2+0x11c>
c0028351:	83 c6 80             	add    esi,0xffffff80
c0028354:	7e 1d                	jle    c0028373 <__truncdfsf2+0xc8>
c0028356:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002835c:	75 0b                	jne    c0028369 <__truncdfsf2+0xbe>
c002835e:	09 f8                	or     eax,edi
c0028360:	74 09                	je     c002836b <__truncdfsf2+0xc0>
c0028362:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028367:	eb 02                	jmp    c002836b <__truncdfsf2+0xc0>
c0028369:	31 c0                	xor    eax,eax
c002836b:	c1 fa 17             	sar    edx,0x17
c002836e:	80 ca ff             	or     dl,0xff
c0028371:	eb 0e                	jmp    c0028381 <__truncdfsf2+0xd6>
c0028373:	c1 fa 1f             	sar    edx,0x1f
c0028376:	c1 e2 08             	shl    edx,0x8
c0028379:	09 ca                	or     edx,ecx
c002837b:	eb 04                	jmp    c0028381 <__truncdfsf2+0xd6>
c002837d:	31 d2                	xor    edx,edx
c002837f:	31 c0                	xor    eax,eax
c0028381:	c1 e2 17             	shl    edx,0x17
c0028384:	c1 e8 08             	shr    eax,0x8
c0028387:	09 d0                	or     eax,edx
c0028389:	eb 3c                	jmp    c00283c7 <__truncdfsf2+0x11c>
c002838b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028391:	89 ca                	mov    edx,ecx
c0028393:	c1 fa 0b             	sar    edx,0xb
c0028396:	c1 e2 08             	shl    edx,0x8
c0028399:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002839c:	31 db                	xor    ebx,ebx
c002839e:	85 ff                	test   edi,edi
c00283a0:	0f 95 c3             	setne  bl
c00283a3:	09 d8                	or     eax,ebx
c00283a5:	89 c3                	mov    ebx,eax
c00283a7:	c1 eb 08             	shr    ebx,0x8
c00283aa:	a8 7f                	test   al,0x7f
c00283ac:	0f 95 c2             	setne  dl
c00283af:	89 d6                	mov    esi,edx
c00283b1:	09 de                	or     esi,ebx
c00283b3:	83 e6 01             	and    esi,0x1
c00283b6:	c1 e8 07             	shr    eax,0x7
c00283b9:	21 f0                	and    eax,esi
c00283bb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00283be:	09 ca                	or     edx,ecx
c00283c0:	c1 e2 17             	shl    edx,0x17
c00283c3:	09 da                	or     edx,ebx
c00283c5:	01 d0                	add    eax,edx
c00283c7:	83 c4 0c             	add    esp,0xc
c00283ca:	5b                   	pop    ebx
c00283cb:	5e                   	pop    esi
c00283cc:	5f                   	pop    edi
c00283cd:	5d                   	pop    ebp
c00283ce:	c3                   	ret    

c00283cf <__extendsfdf2>:
c00283cf:	55                   	push   ebp
c00283d0:	89 e5                	mov    ebp,esp
c00283d2:	57                   	push   edi
c00283d3:	56                   	push   esi
c00283d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00283d7:	89 d1                	mov    ecx,edx
c00283d9:	c1 f9 17             	sar    ecx,0x17
c00283dc:	c1 e2 08             	shl    edx,0x8
c00283df:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00283e5:	89 c8                	mov    eax,ecx
c00283e7:	80 e4 f8             	and    ah,0xf8
c00283ea:	8d 71 01             	lea    esi,[ecx+0x1]
c00283ed:	81 e6 fe 00 00 00    	and    esi,0xfe
c00283f3:	75 27                	jne    c002841c <__extendsfdf2+0x4d>
c00283f5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00283fb:	75 18                	jne    c0028415 <__extendsfdf2+0x46>
c00283fd:	85 d2                	test   edx,edx
c00283ff:	74 20                	je     c0028421 <__extendsfdf2+0x52>
c0028401:	41                   	inc    ecx
c0028402:	01 d2                	add    edx,edx
c0028404:	79 fb                	jns    c0028401 <__extendsfdf2+0x32>
c0028406:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002840c:	29 c8                	sub    eax,ecx
c002840e:	05 81 03 00 00       	add    eax,0x381
c0028413:	eb 0c                	jmp    c0028421 <__extendsfdf2+0x52>
c0028415:	05 00 07 00 00       	add    eax,0x700
c002841a:	eb 05                	jmp    c0028421 <__extendsfdf2+0x52>
c002841c:	05 80 03 00 00       	add    eax,0x380
c0028421:	c1 e0 14             	shl    eax,0x14
c0028424:	89 c1                	mov    ecx,eax
c0028426:	89 d0                	mov    eax,edx
c0028428:	c1 e8 0b             	shr    eax,0xb
c002842b:	09 c1                	or     ecx,eax
c002842d:	c1 e2 15             	shl    edx,0x15
c0028430:	89 d0                	mov    eax,edx
c0028432:	89 ca                	mov    edx,ecx
c0028434:	5e                   	pop    esi
c0028435:	5f                   	pop    edi
c0028436:	5d                   	pop    ebp
c0028437:	c3                   	ret    
c0028438:	66 90                	xchg   ax,ax
c002843a:	66 90                	xchg   ax,ax
c002843c:	66 90                	xchg   ax,ax
c002843e:	66 90                	xchg   ax,ax

c0028440 <fabs>:
c0028440:	83 ec 0c             	sub    esp,0xc
c0028443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028447:	89 04 24             	mov    DWORD PTR [esp],eax
c002844a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002844e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028453:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028457:	dd 04 24             	fld    QWORD PTR [esp]
c002845a:	83 c4 0c             	add    esp,0xc
c002845d:	c3                   	ret    
c002845e:	66 90                	xchg   ax,ax

c0028460 <lrint>:
c0028460:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028464:	83 ec 04             	sub    esp,0x4
c0028467:	db 1c 24             	fistp  DWORD PTR [esp]
c002846a:	58                   	pop    eax
c002846b:	c3                   	ret    

c002846c <lrintf>:
c002846c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028470:	83 ec 04             	sub    esp,0x4
c0028473:	db 1c 24             	fistp  DWORD PTR [esp]
c0028476:	58                   	pop    eax
c0028477:	c3                   	ret    

Disassembly of section .init:

c0028478 <_init>:
c0028478:	55                   	push   ebp
c0028479:	89 e5                	mov    ebp,esp
c002847b:	e8 98 7c fd ff       	call   c0000118 <frame_dummy>
c0028480:	e8 5b e0 ff ff       	call   c00264e0 <__do_global_ctors_aux>
c0028485:	5d                   	pop    ebp
c0028486:	c3                   	ret    

Disassembly of section .fini:

c0028487 <_fini>:
c0028487:	55                   	push   ebp
c0028488:	89 e5                	mov    ebp,esp
c002848a:	e8 19 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002848f:	5d                   	pop    ebp
c0028490:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028492 <Computer::~Computer()>:
c0028492:	83 ec 0c             	sub    esp,0xc
c0028495:	ba 1c a0 02 c0       	mov    edx,0xc002a01c
c002849a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849e:	89 10                	mov    DWORD PTR [eax],edx
c00284a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a4:	83 ec 0c             	sub    esp,0xc
c00284a7:	50                   	push   eax
c00284a8:	e8 ed b5 fe ff       	call   c0013a9a <Device::~Device()>
c00284ad:	83 c4 10             	add    esp,0x10
c00284b0:	90                   	nop
c00284b1:	83 c4 0c             	add    esp,0xc
c00284b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00284b6 <Computer::~Computer()>:
c00284b6:	83 ec 0c             	sub    esp,0xc
c00284b9:	83 ec 0c             	sub    esp,0xc
c00284bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284c0:	e8 cd ff ff ff       	call   c0028492 <Computer::~Computer()>
c00284c5:	83 c4 10             	add    esp,0x10
c00284c8:	83 ec 08             	sub    esp,0x8
c00284cb:	68 ec 01 00 00       	push   0x1ec
c00284d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284d4:	e8 e2 a1 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00284d9:	83 c4 10             	add    esp,0x10
c00284dc:	83 c4 0c             	add    esp,0xc
c00284df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00284e0 <idleCommon()>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	fa                   	cli    
c00284e4:	ff 05 28 10 03 c0    	inc    DWORD PTR ds:0xc0031028
c00284ea:	e8 a2 55 ff ff       	call   c001da91 <schedule()>
c00284ef:	a1 28 10 03 c0       	mov    eax,ds:0xc0031028
c00284f4:	48                   	dec    eax
c00284f5:	a3 28 10 03 c0       	mov    ds:0xc0031028,eax
c00284fa:	75 01                	jne    c00284fd <idleCommon()+0x1d>
c00284fc:	fb                   	sti    
c00284fd:	83 c4 0c             	add    esp,0xc
c0028500:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028502 <LinkedList<UnixFile>::~LinkedList()>:
c0028502:	90                   	nop
c0028503:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028504 <LinkedList<UnixFile>::LinkedList()>:
c0028504:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028508:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002850e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028512:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028519:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002851d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028528:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002852e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002853d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028544:	90                   	nop
c0028545:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028546 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028546:	83 ec 0c             	sub    esp,0xc
c0028549:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002854e:	75 10                	jne    c0028560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028550:	83 ec 0c             	sub    esp,0xc
c0028553:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028558:	e8 a2 19 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002855d:	83 c4 10             	add    esp,0x10
c0028560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028564:	8b 00                	mov    eax,DWORD PTR [eax]
c0028566:	85 c0                	test   eax,eax
c0028568:	74 34                	je     c002859e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028571:	85 c0                	test   eax,eax
c0028573:	74 29                	je     c002859e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028580:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028587:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002858b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002858e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028595:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859c:	eb 65                	jmp    c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002859e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a4:	85 c0                	test   eax,eax
c00285a6:	75 4b                	jne    c00285f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00285a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285af:	85 c0                	test   eax,eax
c00285b1:	75 40                	jne    c00285f3 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00285b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285bb:	89 10                	mov    DWORD PTR [eax],edx
c00285bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285c5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285dd:	85 c0                	test   eax,eax
c00285df:	74 22                	je     c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285e1:	83 ec 0c             	sub    esp,0xc
c00285e4:	68 f6 a2 02 c0       	push   0xc002a2f6
c00285e9:	e8 11 19 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00285ee:	83 c4 10             	add    esp,0x10
c00285f1:	eb 10                	jmp    c0028603 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00285f3:	83 ec 0c             	sub    esp,0xc
c00285f6:	68 00 a3 02 c0       	push   0xc002a300
c00285fb:	e8 ff 18 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028600:	83 c4 10             	add    esp,0x10
c0028603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028607:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002860a:	8d 50 01             	lea    edx,[eax+0x1]
c002860d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028611:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028614:	90                   	nop
c0028615:	83 c4 0c             	add    esp,0xc
c0028618:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002861a <LinkedList<UnixFile>::getFirstElement()>:
c002861a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002861e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028620:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028622 <LinkedList<UnixFile>::removeFirst()>:
c0028622:	83 ec 0c             	sub    esp,0xc
c0028625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028629:	8b 00                	mov    eax,DWORD PTR [eax]
c002862b:	85 c0                	test   eax,eax
c002862d:	75 12                	jne    c0028641 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002862f:	83 ec 0c             	sub    esp,0xc
c0028632:	68 0c a3 02 c0       	push   0xc002a30c
c0028637:	e8 c3 18 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002863c:	83 c4 10             	add    esp,0x10
c002863f:	eb 7e                	jmp    c00286bf <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028645:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028648:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002864b:	85 c0                	test   eax,eax
c002864d:	74 10                	je     c002865f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002864f:	83 ec 0c             	sub    esp,0xc
c0028652:	68 57 a3 02 c0       	push   0xc002a357
c0028657:	e8 a3 18 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002865c:	83 c4 10             	add    esp,0x10
c002865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028663:	8b 00                	mov    eax,DWORD PTR [eax]
c0028665:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028668:	85 c0                	test   eax,eax
c002866a:	75 33                	jne    c002869f <LinkedList<UnixFile>::removeFirst()+0x7d>
c002866c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028670:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028685:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028688:	83 f8 01             	cmp    eax,0x1
c002868b:	74 21                	je     c00286ae <LinkedList<UnixFile>::removeFirst()+0x8c>
c002868d:	83 ec 0c             	sub    esp,0xc
c0028690:	68 30 a3 02 c0       	push   0xc002a330
c0028695:	e8 65 18 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002869a:	83 c4 10             	add    esp,0x10
c002869d:	eb 0f                	jmp    c00286ae <LinkedList<UnixFile>::removeFirst()+0x8c>
c002869f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286a5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00286a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ac:	89 10                	mov    DWORD PTR [eax],edx
c00286ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b5:	8d 50 ff             	lea    edx,[eax-0x1]
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286bf:	83 c4 0c             	add    esp,0xc
c00286c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00286c4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00286c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00286cc <DriverlessDevice::~DriverlessDevice()>:
c00286cc:	ba 3c ac 02 c0       	mov    edx,0xc002ac3c
c00286d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286d5:	89 10                	mov    DWORD PTR [eax],edx
c00286d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286db:	50                   	push   eax
c00286dc:	e8 b9 b3 fe ff       	call   c0013a9a <Device::~Device()>
c00286e1:	83 c4 04             	add    esp,0x4
c00286e4:	90                   	nop
c00286e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00286e6 <DriverlessDevice::~DriverlessDevice()>:
c00286e6:	83 ec 0c             	sub    esp,0xc
c00286e9:	83 ec 0c             	sub    esp,0xc
c00286ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286f0:	e8 d7 ff ff ff       	call   c00286cc <DriverlessDevice::~DriverlessDevice()>
c00286f5:	83 c4 10             	add    esp,0x10
c00286f8:	83 ec 08             	sub    esp,0x8
c00286fb:	68 58 01 00 00       	push   0x158
c0028700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028704:	e8 b2 9f fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028709:	83 c4 10             	add    esp,0x10
c002870c:	83 c4 0c             	add    esp,0xc
c002870f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028710 <LinkedList<Device>::addElement(Device*)>:
c0028710:	83 ec 0c             	sub    esp,0xc
c0028713:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028718:	75 10                	jne    c002872a <LinkedList<Device>::addElement(Device*)+0x1a>
c002871a:	83 ec 0c             	sub    esp,0xc
c002871d:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028722:	e8 d8 17 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028727:	83 c4 10             	add    esp,0x10
c002872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028730:	85 c0                	test   eax,eax
c0028732:	74 3a                	je     c002876e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002873b:	85 c0                	test   eax,eax
c002873d:	74 2f                	je     c002876e <LinkedList<Device>::addElement(Device*)+0x5e>
c002873f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028743:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028746:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002874a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028754:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028758:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028762:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002876c:	eb 68                	jmp    c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002876e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028772:	8b 00                	mov    eax,DWORD PTR [eax]
c0028774:	85 c0                	test   eax,eax
c0028776:	75 4e                	jne    c00287c6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	85 c0                	test   eax,eax
c0028781:	75 43                	jne    c00287c6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028787:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002878b:	89 10                	mov    DWORD PTR [eax],edx
c002878d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028795:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002879c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00287a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287b0:	85 c0                	test   eax,eax
c00287b2:	74 22                	je     c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287b4:	83 ec 0c             	sub    esp,0xc
c00287b7:	68 f6 a2 02 c0       	push   0xc002a2f6
c00287bc:	e8 3e 17 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00287c1:	83 c4 10             	add    esp,0x10
c00287c4:	eb 10                	jmp    c00287d6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287c6:	83 ec 0c             	sub    esp,0xc
c00287c9:	68 00 a3 02 c0       	push   0xc002a300
c00287ce:	e8 2c 17 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00287d3:	83 c4 10             	add    esp,0x10
c00287d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287dd:	8d 50 01             	lea    edx,[eax+0x1]
c00287e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287e7:	90                   	nop
c00287e8:	83 c4 0c             	add    esp,0xc
c00287eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00287ec <LinkedList<Device>::LinkedList()>:
c00287ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028805:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002880c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028810:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002881a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028825:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002882c:	90                   	nop
c002882d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002882e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002882e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028832:	8b 00                	mov    eax,DWORD PTR [eax]
c0028834:	85 c0                	test   eax,eax
c0028836:	75 0e                	jne    c0028846 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002883c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883f:	85 c0                	test   eax,eax
c0028841:	75 03                	jne    c0028846 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028843:	b0 01                	mov    al,0x1
c0028845:	c3                   	ret    
c0028846:	b0 00                	mov    al,0x0
c0028848:	90                   	nop
c0028849:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002884a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002884a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002884e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028850:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028852 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028852:	83 ec 0c             	sub    esp,0xc
c0028855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028859:	8b 00                	mov    eax,DWORD PTR [eax]
c002885b:	85 c0                	test   eax,eax
c002885d:	75 15                	jne    c0028874 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002885f:	83 ec 0c             	sub    esp,0xc
c0028862:	68 0c a3 02 c0       	push   0xc002a30c
c0028867:	e8 93 16 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c002886c:	83 c4 10             	add    esp,0x10
c002886f:	e9 88 00 00 00       	jmp    c00288fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028878:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002887b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002887e:	85 c0                	test   eax,eax
c0028880:	0f 95 c0             	setne  al
c0028883:	84 c0                	test   al,al
c0028885:	74 10                	je     c0028897 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028887:	83 ec 0c             	sub    esp,0xc
c002888a:	68 57 a3 02 c0       	push   0xc002a357
c002888f:	e8 6b 16 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028894:	83 c4 10             	add    esp,0x10
c0028897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889b:	8b 00                	mov    eax,DWORD PTR [eax]
c002889d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00288a0:	85 c0                	test   eax,eax
c00288a2:	0f 94 c0             	sete   al
c00288a5:	84 c0                	test   al,al
c00288a7:	74 33                	je     c00288dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00288a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288c5:	83 f8 01             	cmp    eax,0x1
c00288c8:	74 21                	je     c00288eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00288ca:	83 ec 0c             	sub    esp,0xc
c00288cd:	68 30 a3 02 c0       	push   0xc002a330
c00288d2:	e8 28 16 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00288d7:	83 c4 10             	add    esp,0x10
c00288da:	eb 0f                	jmp    c00288eb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00288dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00288e2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00288e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e9:	89 10                	mov    DWORD PTR [eax],edx
c00288eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288f2:	8d 50 ff             	lea    edx,[eax-0x1]
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288fc:	83 c4 0c             	add    esp,0xc
c00288ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028900 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028900:	83 ec 0c             	sub    esp,0xc
c0028903:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028908:	75 10                	jne    c002891a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002890a:	83 ec 0c             	sub    esp,0xc
c002890d:	68 d4 a2 02 c0       	push   0xc002a2d4
c0028912:	e8 e8 15 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028917:	83 c4 10             	add    esp,0x10
c002891a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028920:	85 c0                	test   eax,eax
c0028922:	74 34                	je     c0028958 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002892b:	85 c0                	test   eax,eax
c002892d:	74 29                	je     c0028958 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002892f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028933:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002893a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028941:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002894f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028956:	eb 65                	jmp    c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895c:	8b 00                	mov    eax,DWORD PTR [eax]
c002895e:	85 c0                	test   eax,eax
c0028960:	75 4b                	jne    c00289ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028969:	85 c0                	test   eax,eax
c002896b:	75 40                	jne    c00289ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002896d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028971:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028975:	89 10                	mov    DWORD PTR [eax],edx
c0028977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002897f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028989:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028994:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028997:	85 c0                	test   eax,eax
c0028999:	74 22                	je     c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002899b:	83 ec 0c             	sub    esp,0xc
c002899e:	68 f6 a2 02 c0       	push   0xc002a2f6
c00289a3:	e8 57 15 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00289a8:	83 c4 10             	add    esp,0x10
c00289ab:	eb 10                	jmp    c00289bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00289ad:	83 ec 0c             	sub    esp,0xc
c00289b0:	68 00 a3 02 c0       	push   0xc002a300
c00289b5:	e8 45 15 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c00289ba:	83 c4 10             	add    esp,0x10
c00289bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289c4:	8d 50 01             	lea    edx,[eax+0x1]
c00289c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289cb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289ce:	90                   	nop
c00289cf:	83 c4 0c             	add    esp,0xc
c00289d2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00289d4 <ACPI::~ACPI()>:
c00289d4:	83 ec 0c             	sub    esp,0xc
c00289d7:	ba a8 b4 02 c0       	mov    edx,0xc002b4a8
c00289dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e0:	89 10                	mov    DWORD PTR [eax],edx
c00289e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e6:	83 ec 0c             	sub    esp,0xc
c00289e9:	50                   	push   eax
c00289ea:	e8 ab b0 fe ff       	call   c0013a9a <Device::~Device()>
c00289ef:	83 c4 10             	add    esp,0x10
c00289f2:	90                   	nop
c00289f3:	83 c4 0c             	add    esp,0xc
c00289f6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00289f8 <ACPI::~ACPI()>:
c00289f8:	83 ec 0c             	sub    esp,0xc
c00289fb:	83 ec 0c             	sub    esp,0xc
c00289fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a02:	e8 cd ff ff ff       	call   c00289d4 <ACPI::~ACPI()>
c0028a07:	83 c4 10             	add    esp,0x10
c0028a0a:	83 ec 08             	sub    esp,0x8
c0028a0d:	68 64 12 00 00       	push   0x1264
c0028a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a16:	e8 a0 9c fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028a1b:	83 c4 10             	add    esp,0x10
c0028a1e:	83 c4 0c             	add    esp,0xc
c0028a21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028a22 <LinkedList<Device>::~LinkedList()>:
c0028a22:	90                   	nop
c0028a23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028a24 <LinkedList<Device>::isEmpty()>:
c0028a24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a28:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a2a:	85 c0                	test   eax,eax
c0028a2c:	75 0e                	jne    c0028a3c <LinkedList<Device>::isEmpty()+0x18>
c0028a2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a35:	85 c0                	test   eax,eax
c0028a37:	75 03                	jne    c0028a3c <LinkedList<Device>::isEmpty()+0x18>
c0028a39:	b0 01                	mov    al,0x1
c0028a3b:	c3                   	ret    
c0028a3c:	b0 00                	mov    al,0x0
c0028a3e:	90                   	nop
c0028a3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028a40 <LinkedList<Device>::getFirstElement()>:
c0028a40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a46:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028a48 <LinkedList<Device>::removeFirst()>:
c0028a48:	83 ec 0c             	sub    esp,0xc
c0028a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a51:	85 c0                	test   eax,eax
c0028a53:	75 15                	jne    c0028a6a <LinkedList<Device>::removeFirst()+0x22>
c0028a55:	83 ec 0c             	sub    esp,0xc
c0028a58:	68 0c a3 02 c0       	push   0xc002a30c
c0028a5d:	e8 9d 14 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028a62:	83 c4 10             	add    esp,0x10
c0028a65:	e9 87 00 00 00       	jmp    c0028af1 <LinkedList<Device>::removeFirst()+0xa9>
c0028a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a71:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a77:	85 c0                	test   eax,eax
c0028a79:	74 10                	je     c0028a8b <LinkedList<Device>::removeFirst()+0x43>
c0028a7b:	83 ec 0c             	sub    esp,0xc
c0028a7e:	68 57 a3 02 c0       	push   0xc002a357
c0028a83:	e8 77 14 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028a88:	83 c4 10             	add    esp,0x10
c0028a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a91:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028a97:	85 c0                	test   eax,eax
c0028a99:	75 33                	jne    c0028ace <LinkedList<Device>::removeFirst()+0x86>
c0028a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ab7:	83 f8 01             	cmp    eax,0x1
c0028aba:	74 24                	je     c0028ae0 <LinkedList<Device>::removeFirst()+0x98>
c0028abc:	83 ec 0c             	sub    esp,0xc
c0028abf:	68 30 a3 02 c0       	push   0xc002a330
c0028ac4:	e8 36 14 ff ff       	call   c0019eff <Krnl::panic(char const*)>
c0028ac9:	83 c4 10             	add    esp,0x10
c0028acc:	eb 12                	jmp    c0028ae0 <LinkedList<Device>::removeFirst()+0x98>
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ad4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0028ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ade:	89 10                	mov    DWORD PTR [eax],edx
c0028ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ae7:	8d 50 ff             	lea    edx,[eax-0x1]
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028af1:	83 c4 0c             	add    esp,0xc
c0028af4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028af6 <CPU::~CPU()>:
c0028af6:	83 ec 0c             	sub    esp,0xc
c0028af9:	ba f8 b6 02 c0       	mov    edx,0xc002b6f8
c0028afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b02:	89 10                	mov    DWORD PTR [eax],edx
c0028b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b08:	83 ec 0c             	sub    esp,0xc
c0028b0b:	50                   	push   eax
c0028b0c:	e8 89 af fe ff       	call   c0013a9a <Device::~Device()>
c0028b11:	83 c4 10             	add    esp,0x10
c0028b14:	90                   	nop
c0028b15:	83 c4 0c             	add    esp,0xc
c0028b18:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b1a <CPU::~CPU()>:
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	83 ec 0c             	sub    esp,0xc
c0028b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b24:	e8 cd ff ff ff       	call   c0028af6 <CPU::~CPU()>
c0028b29:	83 c4 10             	add    esp,0x10
c0028b2c:	83 ec 08             	sub    esp,0x8
c0028b2f:	68 98 11 00 00       	push   0x1198
c0028b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b38:	e8 7e 9b fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028b3d:	83 c4 10             	add    esp,0x10
c0028b40:	83 c4 0c             	add    esp,0xc
c0028b43:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b44 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b44:	90                   	nop
c0028b45:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b46 <ThreadControlBlock::ThreadControlBlock()>:
c0028b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b55:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b60:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b76:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028b7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b81:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b89:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b8d:	90                   	nop
c0028b8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b9e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ba9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bbe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028bc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bc9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bd0:	90                   	nop
c0028bd1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bd2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bd9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bda <Vm::_FPUState::_FPUState()>:
c0028bda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bde:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028be5:	90                   	nop
c0028be6:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028be8 <PCI::~PCI()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	ba 24 c2 02 c0       	mov    edx,0xc002c224
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	89 10                	mov    DWORD PTR [eax],edx
c0028bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfa:	83 ec 0c             	sub    esp,0xc
c0028bfd:	50                   	push   eax
c0028bfe:	e8 67 a8 fe ff       	call   c001346a <Bus::~Bus()>
c0028c03:	83 c4 10             	add    esp,0x10
c0028c06:	90                   	nop
c0028c07:	83 c4 0c             	add    esp,0xc
c0028c0a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c0c <PCI::~PCI()>:
c0028c0c:	83 ec 0c             	sub    esp,0xc
c0028c0f:	83 ec 0c             	sub    esp,0xc
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 cd ff ff ff       	call   c0028be8 <PCI::~PCI()>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 ec 08             	sub    esp,0x8
c0028c21:	68 5c 01 00 00       	push   0x15c
c0028c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2a:	e8 8c 9a fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	83 c4 0c             	add    esp,0xc
c0028c35:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c36 <IDE::~IDE()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	ba d8 c2 02 c0       	mov    edx,0xc002c2d8
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	89 10                	mov    DWORD PTR [eax],edx
c0028c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c48:	83 ec 0c             	sub    esp,0xc
c0028c4b:	50                   	push   eax
c0028c4c:	e8 5f b3 fe ff       	call   c0013fb0 <HardDiskController::~HardDiskController()>
c0028c51:	83 c4 10             	add    esp,0x10
c0028c54:	90                   	nop
c0028c55:	83 c4 0c             	add    esp,0xc
c0028c58:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c5a <IDE::~IDE()>:
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	83 ec 0c             	sub    esp,0xc
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 cd ff ff ff       	call   c0028c36 <IDE::~IDE()>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 ec 08             	sub    esp,0x8
c0028c6f:	68 70 02 00 00       	push   0x270
c0028c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c78:	e8 3e 9a fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	83 c4 0c             	add    esp,0xc
c0028c83:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c84 <SATABus::~SATABus()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	ba 50 c3 02 c0       	mov    edx,0xc002c350
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	89 10                	mov    DWORD PTR [eax],edx
c0028c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	50                   	push   eax
c0028c9a:	e8 11 b3 fe ff       	call   c0013fb0 <HardDiskController::~HardDiskController()>
c0028c9f:	83 c4 10             	add    esp,0x10
c0028ca2:	90                   	nop
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ca8 <SATABus::~SATABus()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	83 ec 0c             	sub    esp,0xc
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 cd ff ff ff       	call   c0028c84 <SATABus::~SATABus()>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 ec 08             	sub    esp,0x8
c0028cbd:	68 64 01 00 00       	push   0x164
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 f0 99 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 c4 0c             	add    esp,0xc
c0028cd1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cd2 <ATA::~ATA()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	ba 9c c3 02 c0       	mov    edx,0xc002c39c
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	89 10                	mov    DWORD PTR [eax],edx
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	83 ec 0c             	sub    esp,0xc
c0028ce7:	50                   	push   eax
c0028ce8:	e8 a5 b3 fe ff       	call   c0014092 <PhysicalDisk::~PhysicalDisk()>
c0028ced:	83 c4 10             	add    esp,0x10
c0028cf0:	90                   	nop
c0028cf1:	83 c4 0c             	add    esp,0xc
c0028cf4:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cf6 <ATA::~ATA()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 cd ff ff ff       	call   c0028cd2 <ATA::~ATA()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 7c 01 00 00       	push   0x17c
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 a2 99 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d20 <ATAPI::~ATAPI()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	ba d4 c3 02 c0       	mov    edx,0xc002c3d4
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	89 10                	mov    DWORD PTR [eax],edx
c0028d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d32:	83 ec 0c             	sub    esp,0xc
c0028d35:	50                   	push   eax
c0028d36:	e8 57 b3 fe ff       	call   c0014092 <PhysicalDisk::~PhysicalDisk()>
c0028d3b:	83 c4 10             	add    esp,0x10
c0028d3e:	90                   	nop
c0028d3f:	83 c4 0c             	add    esp,0xc
c0028d42:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d44 <ATAPI::~ATAPI()>:
c0028d44:	83 ec 0c             	sub    esp,0xc
c0028d47:	83 ec 0c             	sub    esp,0xc
c0028d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4e:	e8 cd ff ff ff       	call   c0028d20 <ATAPI::~ATAPI()>
c0028d53:	83 c4 10             	add    esp,0x10
c0028d56:	83 ec 08             	sub    esp,0x8
c0028d59:	68 80 01 00 00       	push   0x180
c0028d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d62:	e8 54 99 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	83 c4 0c             	add    esp,0xc
c0028d6d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d6e <SATA::~SATA()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	ba 88 c4 02 c0       	mov    edx,0xc002c488
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	89 10                	mov    DWORD PTR [eax],edx
c0028d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	50                   	push   eax
c0028d84:	e8 09 b3 fe ff       	call   c0014092 <PhysicalDisk::~PhysicalDisk()>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	90                   	nop
c0028d8d:	83 c4 0c             	add    esp,0xc
c0028d90:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d92 <SATA::~SATA()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	83 ec 0c             	sub    esp,0xc
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 cd ff ff ff       	call   c0028d6e <SATA::~SATA()>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 ec 08             	sub    esp,0x8
c0028da7:	68 7c 01 00 00       	push   0x17c
c0028dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db0:	e8 06 99 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	83 c4 0c             	add    esp,0xc
c0028dbb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028dbc <SATAPI::~SATAPI()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	ba 64 c5 02 c0       	mov    edx,0xc002c564
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	89 10                	mov    DWORD PTR [eax],edx
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	50                   	push   eax
c0028dd2:	e8 bb b2 fe ff       	call   c0014092 <PhysicalDisk::~PhysicalDisk()>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	90                   	nop
c0028ddb:	83 c4 0c             	add    esp,0xc
c0028dde:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028de0 <SATAPI::~SATAPI()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 cd ff ff ff       	call   c0028dbc <SATAPI::~SATAPI()>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 ec 08             	sub    esp,0x8
c0028df5:	68 80 01 00 00       	push   0x180
c0028dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfe:	e8 b8 98 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	83 c4 0c             	add    esp,0xc
c0028e09:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e0a <AVX::~AVX()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	ba a4 c5 02 c0       	mov    edx,0xc002c5a4
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	89 10                	mov    DWORD PTR [eax],edx
c0028e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	50                   	push   eax
c0028e20:	e8 f1 b2 fe ff       	call   c0014116 <FPU::~FPU()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	90                   	nop
c0028e29:	83 c4 0c             	add    esp,0xc
c0028e2c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e2e <AVX::~AVX()>:
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	83 ec 0c             	sub    esp,0xc
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 cd ff ff ff       	call   c0028e0a <AVX::~AVX()>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 ec 08             	sub    esp,0x8
c0028e43:	68 58 01 00 00       	push   0x158
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 6a 98 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 c4 0c             	add    esp,0xc
c0028e57:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e58 <MMX::~MMX()>:
c0028e58:	83 ec 0c             	sub    esp,0xc
c0028e5b:	ba e4 c5 02 c0       	mov    edx,0xc002c5e4
c0028e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e64:	89 10                	mov    DWORD PTR [eax],edx
c0028e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	50                   	push   eax
c0028e6e:	e8 a3 b2 fe ff       	call   c0014116 <FPU::~FPU()>
c0028e73:	83 c4 10             	add    esp,0x10
c0028e76:	90                   	nop
c0028e77:	83 c4 0c             	add    esp,0xc
c0028e7a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e7c <MMX::~MMX()>:
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	83 ec 0c             	sub    esp,0xc
c0028e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e86:	e8 cd ff ff ff       	call   c0028e58 <MMX::~MMX()>
c0028e8b:	83 c4 10             	add    esp,0x10
c0028e8e:	83 ec 08             	sub    esp,0x8
c0028e91:	68 58 01 00 00       	push   0x158
c0028e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e9a:	e8 1c 98 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028e9f:	83 c4 10             	add    esp,0x10
c0028ea2:	83 c4 0c             	add    esp,0xc
c0028ea5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028ea6 <SSE::~SSE()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	ba 24 c6 02 c0       	mov    edx,0xc002c624
c0028eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb2:	89 10                	mov    DWORD PTR [eax],edx
c0028eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	50                   	push   eax
c0028ebc:	e8 55 b2 fe ff       	call   c0014116 <FPU::~FPU()>
c0028ec1:	83 c4 10             	add    esp,0x10
c0028ec4:	90                   	nop
c0028ec5:	83 c4 0c             	add    esp,0xc
c0028ec8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028eca <SSE::~SSE()>:
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	83 ec 0c             	sub    esp,0xc
c0028ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed4:	e8 cd ff ff ff       	call   c0028ea6 <SSE::~SSE()>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 ec 08             	sub    esp,0x8
c0028edf:	68 58 01 00 00       	push   0x158
c0028ee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee8:	e8 ce 97 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028eed:	83 c4 10             	add    esp,0x10
c0028ef0:	83 c4 0c             	add    esp,0xc
c0028ef3:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028ef4 <x87::~x87()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	ba 64 c6 02 c0       	mov    edx,0xc002c664
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	89 10                	mov    DWORD PTR [eax],edx
c0028f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	50                   	push   eax
c0028f0a:	e8 07 b2 fe ff       	call   c0014116 <FPU::~FPU()>
c0028f0f:	83 c4 10             	add    esp,0x10
c0028f12:	90                   	nop
c0028f13:	83 c4 0c             	add    esp,0xc
c0028f16:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f18 <x87::~x87()>:
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	83 ec 0c             	sub    esp,0xc
c0028f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f22:	e8 cd ff ff ff       	call   c0028ef4 <x87::~x87()>
c0028f27:	83 c4 10             	add    esp,0x10
c0028f2a:	83 ec 08             	sub    esp,0x8
c0028f2d:	68 58 01 00 00       	push   0x158
c0028f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f36:	e8 80 97 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028f3b:	83 c4 10             	add    esp,0x10
c0028f3e:	83 c4 0c             	add    esp,0xc
c0028f41:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f42 <IOAPIC::~IOAPIC()>:
c0028f42:	83 ec 0c             	sub    esp,0xc
c0028f45:	ba bc c7 02 c0       	mov    edx,0xc002c7bc
c0028f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4e:	89 10                	mov    DWORD PTR [eax],edx
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	50                   	push   eax
c0028f58:	e8 3d ab fe ff       	call   c0013a9a <Device::~Device()>
c0028f5d:	83 c4 10             	add    esp,0x10
c0028f60:	90                   	nop
c0028f61:	83 c4 0c             	add    esp,0xc
c0028f64:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f66 <IOAPIC::~IOAPIC()>:
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	83 ec 0c             	sub    esp,0xc
c0028f6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f70:	e8 cd ff ff ff       	call   c0028f42 <IOAPIC::~IOAPIC()>
c0028f75:	83 c4 10             	add    esp,0x10
c0028f78:	83 ec 08             	sub    esp,0x8
c0028f7b:	68 68 01 00 00       	push   0x168
c0028f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f84:	e8 32 97 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028f89:	83 c4 10             	add    esp,0x10
c0028f8c:	83 c4 0c             	add    esp,0xc
c0028f8f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f90 <APIC::~APIC()>:
c0028f90:	83 ec 0c             	sub    esp,0xc
c0028f93:	ba 74 c7 02 c0       	mov    edx,0xc002c774
c0028f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9c:	89 10                	mov    DWORD PTR [eax],edx
c0028f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	50                   	push   eax
c0028fa6:	e8 35 b6 fe ff       	call   c00145e0 <InterruptController::~InterruptController()>
c0028fab:	83 c4 10             	add    esp,0x10
c0028fae:	90                   	nop
c0028faf:	83 c4 0c             	add    esp,0xc
c0028fb2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028fb4 <APIC::~APIC()>:
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	83 ec 0c             	sub    esp,0xc
c0028fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fbe:	e8 cd ff ff ff       	call   c0028f90 <APIC::~APIC()>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	83 ec 08             	sub    esp,0x8
c0028fc9:	68 58 21 00 00       	push   0x2158
c0028fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd2:	e8 e4 96 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0028fd7:	83 c4 10             	add    esp,0x10
c0028fda:	83 c4 0c             	add    esp,0xc
c0028fdd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fde <PIC::~PIC()>:
c0028fde:	83 ec 0c             	sub    esp,0xc
c0028fe1:	ba 0c c8 02 c0       	mov    edx,0xc002c80c
c0028fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fea:	89 10                	mov    DWORD PTR [eax],edx
c0028fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	50                   	push   eax
c0028ff4:	e8 e7 b5 fe ff       	call   c00145e0 <InterruptController::~InterruptController()>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	90                   	nop
c0028ffd:	83 c4 0c             	add    esp,0xc
c0029000:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029002 <PIC::~PIC()>:
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	83 ec 0c             	sub    esp,0xc
c0029008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002900c:	e8 cd ff ff ff       	call   c0028fde <PIC::~PIC()>
c0029011:	83 c4 10             	add    esp,0x10
c0029014:	83 ec 08             	sub    esp,0x8
c0029017:	68 58 21 00 00       	push   0x2158
c002901c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029020:	e8 96 96 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0029025:	83 c4 10             	add    esp,0x10
c0029028:	83 c4 0c             	add    esp,0xc
c002902b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002902c <APICTimer::~APICTimer()>:
c002902c:	83 ec 0c             	sub    esp,0xc
c002902f:	ba 60 c8 02 c0       	mov    edx,0xc002c860
c0029034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029038:	89 10                	mov    DWORD PTR [eax],edx
c002903a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	50                   	push   eax
c0029042:	e8 f1 d5 fe ff       	call   c0016638 <Timer::~Timer()>
c0029047:	83 c4 10             	add    esp,0x10
c002904a:	90                   	nop
c002904b:	83 c4 0c             	add    esp,0xc
c002904e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029050 <APICTimer::~APICTimer()>:
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	83 ec 0c             	sub    esp,0xc
c0029056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002905a:	e8 cd ff ff ff       	call   c002902c <APICTimer::~APICTimer()>
c002905f:	83 c4 10             	add    esp,0x10
c0029062:	83 ec 08             	sub    esp,0x8
c0029065:	68 60 01 00 00       	push   0x160
c002906a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906e:	e8 48 96 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c0029073:	83 c4 10             	add    esp,0x10
c0029076:	83 c4 0c             	add    esp,0xc
c0029079:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002907a <PIT::~PIT()>:
c002907a:	83 ec 0c             	sub    esp,0xc
c002907d:	ba b0 c8 02 c0       	mov    edx,0xc002c8b0
c0029082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029086:	89 10                	mov    DWORD PTR [eax],edx
c0029088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	50                   	push   eax
c0029090:	e8 a3 d5 fe ff       	call   c0016638 <Timer::~Timer()>
c0029095:	83 c4 10             	add    esp,0x10
c0029098:	90                   	nop
c0029099:	83 c4 0c             	add    esp,0xc
c002909c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002909e <PIT::~PIT()>:
c002909e:	83 ec 0c             	sub    esp,0xc
c00290a1:	83 ec 0c             	sub    esp,0xc
c00290a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290a8:	e8 cd ff ff ff       	call   c002907a <PIT::~PIT()>
c00290ad:	83 c4 10             	add    esp,0x10
c00290b0:	83 ec 08             	sub    esp,0x8
c00290b3:	68 5c 01 00 00       	push   0x15c
c00290b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290bc:	e8 fa 95 fe ff       	call   c00126bb <operator delete(void*, unsigned long)>
c00290c1:	83 c4 10             	add    esp,0x10
c00290c4:	83 c4 0c             	add    esp,0xc
c00290c7:	c3                   	ret    
