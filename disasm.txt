
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d9 2b 02 00       	call   c0022bfe <_init>
c0000025:	c3                   	ret    
c0000026:	bb 82 38 02 c0       	mov    ebx,0xc0023882
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 90 38 02 c0    	cmp    ebx,0xc0023890
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 7b 02 c0       	mov    eax,0xc0027bb8
c0000049:	3d b8 7b 02 c0       	cmp    eax,0xc0027bb8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 7b 02 c0       	push   0xc0027bb8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 7b 02 c0       	mov    eax,0xc0027bb8
c0000075:	2d b8 7b 02 c0       	sub    eax,0xc0027bb8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 7b 02 c0       	push   0xc0027bb8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 7d 02 c0 00 	cmp    BYTE PTR ds:0xc0027d40,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 98 38 02 c0       	mov    ebx,0xc0023898
c00000bb:	81 eb 94 38 02 c0    	sub    ebx,0xc0023894
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 94 38 02 c0       	mov    esi,0xc0023894
c00000ca:	a1 44 7d 02 c0       	mov    eax,ds:0xc0027d44
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 7d 02 c0       	mov    ds:0xc0027d44,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 7d 02 c0       	mov    eax,ds:0xc0027d44
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 7b 02 c0       	push   0xc0027bb8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 7d 02 c0 01 	mov    BYTE PTR ds:0xc0027d40,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 7d 02 c0       	push   0xc0027d48
c000012c:	68 b8 7b 02 c0       	push   0xc0027bb8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 c4 79 01 00       	call   c0017c9c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 30 c7 00 00       	call   c000ca20 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 a2 79 01 00       	call   c0017c9c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 6b 7e 01 00       	call   c0018184 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 ae 84 01 00       	call   c00187d0 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 90 81 02 c0 	lgdtd  ds:0xc0028190
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 be e4 00 00       	call   c000e9d5 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 60 7d 02 c0       	mov    ds:0xc0027d60,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 60 7d 02 c0    	mov    DWORD PTR ds:0xc0027d60,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 60 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027d60
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 a0 38 02 c0 02 	test   BYTE PTR [edx-0x3ffdc760],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 a0 38 02 c0 01 	test   BYTE PTR [edx-0x3ffdc760],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 a0 38 02 c0 08 	test   BYTE PTR [edx-0x3ffdc760],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 a0 38 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc760],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 a0 38 02 c0 01 	test   BYTE PTR [edx-0x3ffdc760],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 80 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027d80
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 80 7d 02 c0    	mov    DWORD PTR ds:0xc0027d80,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 84 7d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd827c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 84 7d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd827c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 80 7d 02 c0    	mov    DWORD PTR ds:0xc0027d80,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 ac 7d 02 c0    	cmp    DWORD PTR ds:0xc0027dac,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d bc 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027dbc
c0000d6c:	c7 42 0c b4 7d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027db4
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 bc 7d 02 c0    	mov    DWORD PTR ds:0xc0027dbc,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 ac 7d 02 c0    	mov    DWORD PTR ds:0xc0027dac,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 80 7d 02 c0 02 	test   BYTE PTR ds:0xc0027d80,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 80 7d 02 c0    	mov    edi,DWORD PTR ds:0xc0027d80
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 84 7d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd827c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 84 7d 02 c0 	mov    DWORD PTR [edx*4-0x3ffd827c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 b4 7d 02 c0 	lea    edx,[eax*8-0x3ffd824c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d c0 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027dc0
c00010ee:	81 fb b4 7d 02 c0    	cmp    ebx,0xc0027db4
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d b4 7d 02 c0       	cmp    eax,0xc0027db4
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d b0 7d 02 c0    	cmp    DWORD PTR ds:0xc0027db0,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 bc 7d 02 c0       	mov    ds:0xc0027dbc,eax
c000112a:	a3 c0 7d 02 c0       	mov    ds:0xc0027dc0,eax
c000112f:	a3 b0 7d 02 c0       	mov    ds:0xc0027db0,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 b4 7d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027db4
c000113d:	c7 40 0c b4 7d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027db4
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 c0 7d 02 c0       	mov    ds:0xc0027dc0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 b4 7d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027db4
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 78 7d 02 c0 	lea    ebp,[edx*4-0x3ffd8288]
c000118e:	8b 14 95 80 7d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8280]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 80 7d 02 c0 	lea    ecx,[edx*4-0x3ffd8280]
c00011a9:	8b 14 95 80 7d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8280]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd b4 80 02 c0 	or     DWORD PTR [edi*4-0x3ffd7f4c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 b4 7d 02 c0 	lea    eax,[eax*8-0x3ffd824c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d bc 7d 02 c0    	mov    DWORD PTR ds:0xc0027dbc,ecx
c0001263:	89 0d c0 7d 02 c0    	mov    DWORD PTR ds:0xc0027dc0,ecx
c0001269:	c7 41 08 b4 7d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027db4
c0001270:	c7 41 0c b4 7d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027db4
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd ac 7d 02 c0 	lea    edx,[ecx*8-0x3ffd8254]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d b4 80 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7f4c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d b4 80 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7f4c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 ac 7d 02 c0 	lea    edx,[eax*4-0x3ffd8254]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d b4 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f4c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d bc 7d 02 c0    	mov    DWORD PTR ds:0xc0027dbc,edi
c0001336:	89 3d c0 7d 02 c0    	mov    DWORD PTR ds:0xc0027dc0,edi
c000133c:	c7 47 08 b4 7d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027db4
c0001343:	c7 47 0c b4 7d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027db4
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d b0 7d 02 c0    	mov    DWORD PTR ds:0xc0027db0,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 ac 7d 02 c0       	mov    eax,ds:0xc0027dac
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d ac 7d 02 c0    	mov    DWORD PTR ds:0xc0027dac,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 80 7d 02 c0       	mov    edx,0xc0027d80
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 80 7d 02 c0 00 	cmp    DWORD PTR ds:0xc0027d80,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d d4 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280d4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 d4 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280d4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d d4 80 02 c0    	mov    DWORD PTR ds:0xc00280d4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 ac 7d 02 c0    	cmp    DWORD PTR ds:0xc0027dac,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d ac 7d 02 c0    	mov    DWORD PTR ds:0xc0027dac,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 80 7d 02 c0 00 	cmp    DWORD PTR ds:0xc0027d80,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 dc 80 02 c0    	push   DWORD PTR ds:0xc00280dc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 80 7d 02 c0 00 	cmp    DWORD PTR ds:0xc0027d80,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 dc 80 02 c0       	mov    eax,ds:0xc00280dc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d ac 7d 02 c0 00 	cmp    DWORD PTR ds:0xc0027dac,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 ac 7d 02 c0       	mov    eax,ds:0xc0027dac
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 84 7d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd827c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 b4 7d 02 c0       	mov    eax,0xc0027db4
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d ac 80 02 c0       	cmp    eax,0xc00280ac
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 d0 80 02 c0    	mov    esi,DWORD PTR ds:0xc00280d0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 e4 80 02 c0    	mov    esi,DWORD PTR ds:0xc00280e4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 f4 80 02 c0    	mov    esi,DWORD PTR ds:0xc00280f4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 80 7d 02 c0       	mov    eax,0xc0027d80
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 a4 39 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc65c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 80 7d 02 c0       	mov    eax,ds:0xc0027d80
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 80 7d 02 c0       	mov    ds:0xc0027d80,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d c4 80 02 c0    	mov    DWORD PTR ds:0xc00280c4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d c8 80 02 c0    	mov    DWORD PTR ds:0xc00280c8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d cc 80 02 c0    	mov    DWORD PTR ds:0xc00280cc,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 d4 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00280d4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 e0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6820]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 ae 99 01 00       	jmp    c001b4d4 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 e0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6820]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 e0 99 01 00       	jmp    c001b51c <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 e0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6820]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 09 9a 01 00       	jmp    c001b564 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 a6 0b 02 00       	call   c00229e4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 c0 3a 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc540]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 c0 3a 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc540]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 1c 65 02 c0       	mov    edx,0xc002651c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ec 3a 02 c0       	mov    edx,0xc0023aec
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 20 81 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7ee0]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 00 81 02 c0    	mov    ax,ds:0xc0028100
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 00 81 02 c0    	mov    ds:0xc0028100,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 a3 f9 01 00       	call   c00229e4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 f2 3a 02 c0       	mov    eax,0xc0023af2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 40 3a 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc5c0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 fb 3a 02 c0       	mov    eax,0xc0023afb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 c0 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc540]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 6e e3 01 00       	call   c00229e4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba d0 3a 02 c0       	mov    edx,0xc0023ad0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba c0 39 02 c0       	mov    edx,0xc00239c0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba d0 39 02 c0       	mov    edx,0xc00239d0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 20 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7ee0]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 20 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7ee0],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 35 cd 01 00       	call   c00229e4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 1b cd 01 00       	call   c00229e4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 17 3a 02 c0       	mov    eax,0xc0023a17
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 10 3a 02 c0       	mov    eax,0xc0023a10
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 b4 b8 01 00       	call   c00229e4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 20 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7ee0]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 00 3a 02 c0       	mov    esi,0xc0023a00
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 28 b2 01 00       	call   c00229e4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba e0 3a 02 c0       	mov    edx,0xc0023ae0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba e0 39 02 c0       	mov    edx,0xc00239e0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba f0 39 02 c0       	mov    edx,0xc00239f0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 02 3b 02 c0       	mov    edx,0xc0023b02
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 0e 3b 02 c0       	mov    edx,0xc0023b0e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 22 3b 02 c0       	mov    edx,0xc0023b22
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 40 3e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023e40
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 40 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023e40
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 40 3c 02 c0       	mov    eax,0xc0023c40
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 80 3b 02 c0       	mov    eax,0xc0023b80
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 40 3b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc4c0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000888b:	48                   	dec    eax
c000888c:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00088a2:	48                   	dec    eax
c00088a3:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00088b3:	ff 05 44 96 02 c0    	inc    DWORD PTR ds:0xc0029644
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c00088c2:	48                   	dec    eax
c00088c3:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 40 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029640,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c00088dd:	e8 0e fb 00 00       	call   c00183f0 <schedule()>
c00088e2:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00088e7:	48                   	dec    eax
c00088e8:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 b0 82 02 c0       	mov    eax,ds:0xc00282b0
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 40 3f 02 c0       	push   0xc0023f40
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 88 81 02 c0       	mov    eax,0xc0028188
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 49 3f 02 c0       	push   0xc0023f49
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 e4 29 02 c0       	mov    eax,0xc00229e4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 53 3f 02 c0       	push   0xc0023f53
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 18 27 02 c0       	mov    eax,0xc0022718
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 5c 3f 02 c0       	push   0xc0023f5c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 e4 2a 02 c0       	mov    eax,0xc0022ae4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 66 3f 02 c0       	push   0xc0023f66
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 64 28 02 c0       	mov    eax,0xc0022864
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 6f 3f 02 c0       	push   0xc0023f6f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 8c 81 02 c0       	mov    eax,0xc002818c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 7c 3f 02 c0       	push   0xc0023f7c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 8d 81 02 c0       	mov    eax,0xc002818d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 3f 58 00 00       	call   c000e284 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 89 3f 02 c0       	push   0xc0023f89
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 a0 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fa0
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0008aa2:	68 b9 3f 02 c0       	push   0xc0023fb9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 1d f5 00 00       	call   c0017fcc <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 10 f7 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 18 8c 01 c0       	push   0xc0018c18
c0008acd:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0008ad3:	e8 fc f6 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 28 96 02 c0       	mov    ds:0xc0029628,eax
c0008ae0:	68 60 41 02 c0       	push   0xc0024160
c0008ae5:	c6 05 8d 81 02 c0 01 	mov    BYTE PTR ds:0xc002818d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 fd 04 01 00       	call   c0018ff3 <Vm::initialise8086()>
c0008af6:	e8 4f 45 00 00       	call   c000d04a <Fs::initVFS()>
c0008afb:	c7 04 24 c6 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fc6
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 60 41 02 c0       	push   0xc0024160
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 0a dd 00 00       	call   c001683a <Sys::loadSyscalls()>
c0008b30:	e8 e1 bb 00 00       	call   c0014716 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 e0 3f 02 c0       	push   0xc0023fe0
c0008b3f:	68 e9 3f 02 c0       	push   0xc0023fe9
c0008b44:	e8 b4 ca 00 00       	call   c00155fd <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 eb 4f 00 00       	call   c000db3c <User::loadClockSettings(int)>
c0008b51:	c7 04 24 84 41 02 c0 	mov    DWORD PTR [esp],0xc0024184
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 d6 56 00 00       	call   c000e244 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 f1 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff1
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 ff b6 00 00       	call   c001427e <Krnl::startCPUs()>
c0008b7f:	c7 04 24 0b 40 02 c0 	mov    DWORD PTR [esp],0xc002400b
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 1c 40 02 c0       	push   0xc002401c
c0008b9a:	e8 6b ee 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 93 f0 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 33 fa 00 00       	call   c00185e8 <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 38 40 02 c0       	push   0xc0024038
c0008bc9:	50                   	push   eax
c0008bca:	e8 2f 57 00 00       	call   c000e2fe <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba 34 42 02 c0       	mov    edx,0xc0024234
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 a1 81 02 c0 04 	test   BYTE PTR ds:0xc00281a1,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 43 99 01 00       	call   c00226a6 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 84 a3 00 00       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 5d a3 00 00       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 3b a3 00 00       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 19 a3 00 00       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 a0 81 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00281a0,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 27 a2 00 00       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 02 a2 00 00       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 ad 97 01 00       	call   c0022660 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 6a 97 01 00       	call   c0022640 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 1e a2 00 00       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 41 40 02 c0       	push   0xc0024041
c0008f46:	e8 d4 b8 00 00       	call   c001481f <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 47 40 02 c0       	push   0xc0024047
c0008f7e:	e8 9c b8 00 00       	call   c001481f <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 a4 41 02 c0       	push   0xc00241a4
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 a0 81 02 c0 04 	test   BYTE PTR ds:0xc00281a0,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 60 75 02 c0 	sete   BYTE PTR ds:0xc0027560
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 4d 40 02 c0       	push   0xc002404d
c0008ff3:	e8 bb 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 63 40 02 c0       	push   0xc0024063
c0009004:	e8 aa 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 77 40 02 c0       	push   0xc0024077
c0009012:	e8 9c 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 8a 40 02 c0       	push   0xc002408a
c0009023:	e8 8b 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 a1 40 02 c0       	push   0xc00240a1
c0009031:	e8 7d 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 b7 40 02 c0 	mov    DWORD PTR [esp],0xc00240b7
c000903d:	e8 71 3c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 c9 40 02 c0 	mov    DWORD PTR [esp],0xc00240c9
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 64 8f 00 00       	call   c0011fc8 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 e3 40 02 c0 	mov    DWORD PTR [esp],0xc00240e3
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 76 50 00 00       	call   c000e0fa <Device::addChild(Device*)>
c0009084:	c7 04 24 c8 41 02 c0 	mov    DWORD PTR [esp],0xc00241c8
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 e8 41 02 c0 	mov    DWORD PTR [esp],0xc00241e8
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 fd 40 02 c0 	mov    DWORD PTR [esp],0xc00240fd
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 f1 3f 02 c0 	mov    DWORD PTR [esp],0xc0023ff1
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 fe a0 00 00       	call   c00131da <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 0f 50 00 00       	call   c000e0fa <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 08 42 02 c0       	push   0xc0024208
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 85 55 00 00       	call   c000e696 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 d2 4f 00 00       	call   c000e0fa <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 0e 41 02 c0       	push   0xc002410e
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 92 f1 00 00       	call   c00182e8 <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 29 41 02 c0       	push   0xc0024129
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 0e 3b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 3a 41 02 c0       	push   0xc002413a
c00091c2:	e8 58 b6 00 00       	call   c001481f <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 47 41 02 c0       	push   0xc0024147
c00091d7:	e8 43 b6 00 00       	call   c001481f <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 51 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024151
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 2c b6 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 92 81 02 c0       	mov    ds:0xc0028192,eax
c00092af:	66 89 15 90 81 02 c0 	mov    WORD PTR ds:0xc0028190,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00093c6:	48                   	dec    eax
c00093c7:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 49 98 01 00       	call   c0022c66 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 40 98 01 00       	call   c0022c66 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 98 81 02 c0 ff 07 	mov    WORD PTR ds:0xc0028198,0x7ff
c0009519:	a3 9a 81 02 c0       	mov    ds:0xc002819a,eax
c000951e:	0f 01 1d 98 81 02 c0 	lidtd  ds:0xc0028198
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c0009810:	e8 21 29 00 00       	call   c000c136 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 9d 1a 00 00       	call   c000b2d0 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 d2 1a 00 00       	call   c000b314 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 58 42 02 c0       	push   0xc0024258
c000989d:	e8 11 34 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 f0 73 02 c0       	mov    eax,ds:0xc00273f0
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 b0 82 02 c0    	mov    esi,DWORD PTR ds:0xc00282b0
c00098cc:	8b 3d f0 73 02 c0    	mov    edi,DWORD PTR ds:0xc00273f0
c00098d2:	e8 a3 07 00 00       	call   c000a07a <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 50 27 00 00       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 f0 73 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00273f0,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 f0 73 02 c0       	mov    eax,ds:0xc00273f0
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 84 42 02 c0       	push   0xc0024284
c0009918:	e8 96 33 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 76 42 02 c0       	push   0xc0024276
c0009937:	e8 e3 ae 00 00       	call   c001481f <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 7b 42 02 c0       	push   0xc002427b
c000994d:	e8 cd ae 00 00       	call   c001481f <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000996d:	48                   	dec    eax
c000996e:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c000998b:	e8 a6 27 00 00       	call   c000c136 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c00099a1:	e8 3a 24 00 00       	call   c000bde0 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	56                   	push   esi
c0009a8b:	53                   	push   ebx
c0009a8c:	83 ec 20             	sub    esp,0x20
c0009a8f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009a94:	a3 a0 81 02 c0       	mov    ds:0xc00281a0,eax
c0009a99:	f6 c4 08             	test   ah,0x8
c0009a9c:	0f 85 7a 03 00 00    	jne    c0009e1c <kernel_main+0x393>
c0009aa2:	31 f6                	xor    esi,esi
c0009aa4:	bf f9 03 00 00       	mov    edi,0x3f9
c0009aa9:	89 f0                	mov    eax,esi
c0009aab:	89 fa                	mov    edx,edi
c0009aad:	ee                   	out    dx,al
c0009aae:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009ab3:	b0 80                	mov    al,0x80
c0009ab5:	89 da                	mov    edx,ebx
c0009ab7:	ee                   	out    dx,al
c0009ab8:	b1 03                	mov    cl,0x3
c0009aba:	ba f8 03 00 00       	mov    edx,0x3f8
c0009abf:	88 c8                	mov    al,cl
c0009ac1:	ee                   	out    dx,al
c0009ac2:	89 f0                	mov    eax,esi
c0009ac4:	89 fa                	mov    edx,edi
c0009ac6:	ee                   	out    dx,al
c0009ac7:	88 c8                	mov    al,cl
c0009ac9:	89 da                	mov    edx,ebx
c0009acb:	ee                   	out    dx,al
c0009acc:	b0 c7                	mov    al,0xc7
c0009ace:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ad3:	ee                   	out    dx,al
c0009ad4:	b0 0b                	mov    al,0xb
c0009ad6:	ba fc 03 00 00       	mov    edx,0x3fc
c0009adb:	ee                   	out    dx,al
c0009adc:	83 ec 0c             	sub    esp,0xc
c0009adf:	68 b4 42 02 c0       	push   0xc00242b4
c0009ae4:	e8 ca 31 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009ae9:	83 c4 10             	add    esp,0x10
c0009aec:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009af3:	0f 85 eb 02 00 00    	jne    c0009de4 <kernel_main+0x35b>
c0009af9:	e8 d2 0c 00 00       	call   c000a7d0 <installVgaTextImplementation()>
c0009afe:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009b05:	0f 85 94 02 00 00    	jne    c0009d9f <kernel_main+0x316>
c0009b0b:	0f b6 05 00 74 02 c0 	movzx  eax,BYTE PTR ds:0xc0027400
c0009b12:	84 c0                	test   al,al
c0009b14:	74 7b                	je     c0009b91 <kernel_main+0x108>
c0009b16:	31 db                	xor    ebx,ebx
c0009b18:	bf 0a 00 00 00       	mov    edi,0xa
c0009b1d:	be 05 00 00 00       	mov    esi,0x5
c0009b22:	31 c9                	xor    ecx,ecx
c0009b24:	eb 2a                	jmp    c0009b50 <kernel_main+0xc7>
c0009b26:	3c 0d                	cmp    al,0xd
c0009b28:	74 1a                	je     c0009b44 <kernel_main+0xbb>
c0009b2a:	3c 0a                	cmp    al,0xa
c0009b2c:	74 40                	je     c0009b6e <kernel_main+0xe5>
c0009b2e:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b31:	80 cc 0e             	or     ah,0xe
c0009b34:	c1 e2 04             	shl    edx,0x4
c0009b37:	01 ca                	add    edx,ecx
c0009b39:	41                   	inc    ecx
c0009b3a:	01 fa                	add    edx,edi
c0009b3c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b44:	43                   	inc    ebx
c0009b45:	0f b6 83 00 74 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8c00]
c0009b4c:	84 c0                	test   al,al
c0009b4e:	74 32                	je     c0009b82 <kernel_main+0xf9>
c0009b50:	80 b9 36 74 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8bca],0xdb
c0009b57:	75 cd                	jne    c0009b26 <kernel_main+0x9d>
c0009b59:	0f b6 91 35 74 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8bcb]
c0009b60:	83 e2 fe             	and    edx,0xfffffffe
c0009b63:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b69:	75 bb                	jne    c0009b26 <kernel_main+0x9d>
c0009b6b:	47                   	inc    edi
c0009b6c:	eb b8                	jmp    c0009b26 <kernel_main+0x9d>
c0009b6e:	43                   	inc    ebx
c0009b6f:	46                   	inc    esi
c0009b70:	31 c9                	xor    ecx,ecx
c0009b72:	0f b6 83 00 74 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8c00]
c0009b79:	bf 0a 00 00 00       	mov    edi,0xa
c0009b7e:	84 c0                	test   al,al
c0009b80:	75 ce                	jne    c0009b50 <kernel_main+0xc7>
c0009b82:	8b 15 a0 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281a0
c0009b88:	80 e6 08             	and    dh,0x8
c0009b8b:	0f 85 bf 00 00 00    	jne    c0009c50 <kernel_main+0x1c7>
c0009b91:	83 ec 0c             	sub    esp,0xc
c0009b94:	68 50 43 02 c0       	push   0xc0024350
c0009b99:	e8 7f fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b9e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009ba3:	05 ff 0f 00 00       	add    eax,0xfff
c0009ba8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bad:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bb0:	e8 44 06 00 00       	call   c000a1f9 <Phys::physicalMemorySetup(unsigned int)>
c0009bb5:	83 c4 10             	add    esp,0x10
c0009bb8:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009bbf:	0f 85 a2 01 00 00    	jne    c0009d67 <kernel_main+0x2de>
c0009bc5:	e8 82 1f 00 00       	call   c000bb4c <Virt::virtualMemorySetup()>
c0009bca:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009bd1:	0f 85 58 01 00 00    	jne    c0009d2f <kernel_main+0x2a6>
c0009bd7:	83 ec 0c             	sub    esp,0xc
c0009bda:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009bde:	56                   	push   esi
c0009bdf:	e8 24 20 00 00       	call   c000bc08 <VAS::VAS()>
c0009be4:	83 c4 10             	add    esp,0x10
c0009be7:	89 35 b0 82 02 c0    	mov    DWORD PTR ds:0xc00282b0,esi
c0009bed:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009bf4:	0f 85 fd 00 00 00    	jne    c0009cf7 <kernel_main+0x26e>
c0009bfa:	e8 21 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009bff:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009c06:	0f 85 b3 00 00 00    	jne    c0009cbf <kernel_main+0x236>
c0009c0c:	83 ec 0c             	sub    esp,0xc
c0009c0f:	68 ec 01 00 00       	push   0x1ec
c0009c14:	e8 aa fd ff ff       	call   c00099c3 <malloc>
c0009c19:	89 c3                	mov    ebx,eax
c0009c1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c1e:	e8 97 ef ff ff       	call   c0008bba <Computer::Computer()>
c0009c23:	83 c4 10             	add    esp,0x10
c0009c26:	89 1d 88 81 02 c0    	mov    DWORD PTR ds:0xc0028188,ebx
c0009c2c:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0009c33:	75 53                	jne    c0009c88 <kernel_main+0x1ff>
c0009c35:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c37:	6a 00                	push   0x0
c0009c39:	6a 00                	push   0x0
c0009c3b:	6a 00                	push   0x0
c0009c3d:	53                   	push   ebx
c0009c3e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c44:	e8 6f 22 00 00       	call   c000beb8 <VAS::~VAS()>
c0009c49:	83 c4 30             	add    esp,0x30
c0009c4c:	5b                   	pop    ebx
c0009c4d:	5e                   	pop    esi
c0009c4e:	5f                   	pop    edi
c0009c4f:	c3                   	ret    
c0009c50:	83 ec 0c             	sub    esp,0xc
c0009c53:	68 ff 42 02 c0       	push   0xc00242ff
c0009c58:	e8 c0 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c5d:	83 c4 10             	add    esp,0x10
c0009c60:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009c67:	0f 85 24 ff ff ff    	jne    c0009b91 <kernel_main+0x108>
c0009c6d:	eb 04                	jmp    c0009c73 <kernel_main+0x1ea>
c0009c6f:	3c 1c                	cmp    al,0x1c
c0009c71:	74 06                	je     c0009c79 <kernel_main+0x1f0>
c0009c73:	e4 60                	in     al,0x60
c0009c75:	3c 5a                	cmp    al,0x5a
c0009c77:	75 f6                	jne    c0009c6f <kernel_main+0x1e6>
c0009c79:	e4 60                	in     al,0x60
c0009c7b:	3c 5a                	cmp    al,0x5a
c0009c7d:	74 fa                	je     c0009c79 <kernel_main+0x1f0>
c0009c7f:	3c 1c                	cmp    al,0x1c
c0009c81:	74 f6                	je     c0009c79 <kernel_main+0x1f0>
c0009c83:	e9 09 ff ff ff       	jmp    c0009b91 <kernel_main+0x108>
c0009c88:	83 ec 0c             	sub    esp,0xc
c0009c8b:	68 3e 43 02 c0       	push   0xc002433e
c0009c90:	e8 88 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009c95:	83 c4 10             	add    esp,0x10
c0009c98:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009c9f:	74 0c                	je     c0009cad <kernel_main+0x224>
c0009ca1:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c0009ca7:	eb 8c                	jmp    c0009c35 <kernel_main+0x1ac>
c0009ca9:	3c 1c                	cmp    al,0x1c
c0009cab:	74 06                	je     c0009cb3 <kernel_main+0x22a>
c0009cad:	e4 60                	in     al,0x60
c0009caf:	3c 5a                	cmp    al,0x5a
c0009cb1:	75 f6                	jne    c0009ca9 <kernel_main+0x220>
c0009cb3:	e4 60                	in     al,0x60
c0009cb5:	3c 5a                	cmp    al,0x5a
c0009cb7:	74 fa                	je     c0009cb3 <kernel_main+0x22a>
c0009cb9:	3c 1c                	cmp    al,0x1c
c0009cbb:	74 f6                	je     c0009cb3 <kernel_main+0x22a>
c0009cbd:	eb e2                	jmp    c0009ca1 <kernel_main+0x218>
c0009cbf:	83 ec 0c             	sub    esp,0xc
c0009cc2:	68 2b 43 02 c0       	push   0xc002432b
c0009cc7:	e8 51 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009ccc:	83 c4 10             	add    esp,0x10
c0009ccf:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009cd6:	0f 85 30 ff ff ff    	jne    c0009c0c <kernel_main+0x183>
c0009cdc:	eb 04                	jmp    c0009ce2 <kernel_main+0x259>
c0009cde:	3c 1c                	cmp    al,0x1c
c0009ce0:	74 06                	je     c0009ce8 <kernel_main+0x25f>
c0009ce2:	e4 60                	in     al,0x60
c0009ce4:	3c 5a                	cmp    al,0x5a
c0009ce6:	75 f6                	jne    c0009cde <kernel_main+0x255>
c0009ce8:	e4 60                	in     al,0x60
c0009cea:	3c 5a                	cmp    al,0x5a
c0009cec:	74 fa                	je     c0009ce8 <kernel_main+0x25f>
c0009cee:	3c 1c                	cmp    al,0x1c
c0009cf0:	74 f6                	je     c0009ce8 <kernel_main+0x25f>
c0009cf2:	e9 15 ff ff ff       	jmp    c0009c0c <kernel_main+0x183>
c0009cf7:	83 ec 0c             	sub    esp,0xc
c0009cfa:	68 21 43 02 c0       	push   0xc0024321
c0009cff:	e8 19 fd ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009d0e:	0f 85 e6 fe ff ff    	jne    c0009bfa <kernel_main+0x171>
c0009d14:	eb 04                	jmp    c0009d1a <kernel_main+0x291>
c0009d16:	3c 1c                	cmp    al,0x1c
c0009d18:	74 06                	je     c0009d20 <kernel_main+0x297>
c0009d1a:	e4 60                	in     al,0x60
c0009d1c:	3c 5a                	cmp    al,0x5a
c0009d1e:	75 f6                	jne    c0009d16 <kernel_main+0x28d>
c0009d20:	e4 60                	in     al,0x60
c0009d22:	3c 5a                	cmp    al,0x5a
c0009d24:	74 fa                	je     c0009d20 <kernel_main+0x297>
c0009d26:	3c 1c                	cmp    al,0x1c
c0009d28:	74 f6                	je     c0009d20 <kernel_main+0x297>
c0009d2a:	e9 cb fe ff ff       	jmp    c0009bfa <kernel_main+0x171>
c0009d2f:	83 ec 0c             	sub    esp,0xc
c0009d32:	68 16 43 02 c0       	push   0xc0024316
c0009d37:	e8 e1 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d3c:	83 c4 10             	add    esp,0x10
c0009d3f:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009d46:	0f 85 8b fe ff ff    	jne    c0009bd7 <kernel_main+0x14e>
c0009d4c:	eb 04                	jmp    c0009d52 <kernel_main+0x2c9>
c0009d4e:	3c 1c                	cmp    al,0x1c
c0009d50:	74 06                	je     c0009d58 <kernel_main+0x2cf>
c0009d52:	e4 60                	in     al,0x60
c0009d54:	3c 5a                	cmp    al,0x5a
c0009d56:	75 f6                	jne    c0009d4e <kernel_main+0x2c5>
c0009d58:	e4 60                	in     al,0x60
c0009d5a:	3c 5a                	cmp    al,0x5a
c0009d5c:	74 fa                	je     c0009d58 <kernel_main+0x2cf>
c0009d5e:	3c 1c                	cmp    al,0x1c
c0009d60:	74 f6                	je     c0009d58 <kernel_main+0x2cf>
c0009d62:	e9 70 fe ff ff       	jmp    c0009bd7 <kernel_main+0x14e>
c0009d67:	83 ec 0c             	sub    esp,0xc
c0009d6a:	68 0b 43 02 c0       	push   0xc002430b
c0009d6f:	e8 a9 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009d74:	83 c4 10             	add    esp,0x10
c0009d77:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009d7e:	0f 85 41 fe ff ff    	jne    c0009bc5 <kernel_main+0x13c>
c0009d84:	eb 04                	jmp    c0009d8a <kernel_main+0x301>
c0009d86:	3c 1c                	cmp    al,0x1c
c0009d88:	74 06                	je     c0009d90 <kernel_main+0x307>
c0009d8a:	e4 60                	in     al,0x60
c0009d8c:	3c 5a                	cmp    al,0x5a
c0009d8e:	75 f6                	jne    c0009d86 <kernel_main+0x2fd>
c0009d90:	e4 60                	in     al,0x60
c0009d92:	3c 5a                	cmp    al,0x5a
c0009d94:	74 fa                	je     c0009d90 <kernel_main+0x307>
c0009d96:	3c 1c                	cmp    al,0x1c
c0009d98:	74 f6                	je     c0009d90 <kernel_main+0x307>
c0009d9a:	e9 26 fe ff ff       	jmp    c0009bc5 <kernel_main+0x13c>
c0009d9f:	83 ec 0c             	sub    esp,0xc
c0009da2:	68 ed 42 02 c0       	push   0xc00242ed
c0009da7:	e8 71 fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009dac:	8b 15 a0 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281a0
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	f6 c2 80             	test   dl,0x80
c0009db8:	74 18                	je     c0009dd2 <kernel_main+0x349>
c0009dba:	0f b6 05 00 74 02 c0 	movzx  eax,BYTE PTR ds:0xc0027400
c0009dc1:	84 c0                	test   al,al
c0009dc3:	0f 85 4d fd ff ff    	jne    c0009b16 <kernel_main+0x8d>
c0009dc9:	e9 ba fd ff ff       	jmp    c0009b88 <kernel_main+0xff>
c0009dce:	3c 1c                	cmp    al,0x1c
c0009dd0:	74 06                	je     c0009dd8 <kernel_main+0x34f>
c0009dd2:	e4 60                	in     al,0x60
c0009dd4:	3c 5a                	cmp    al,0x5a
c0009dd6:	75 f6                	jne    c0009dce <kernel_main+0x345>
c0009dd8:	e4 60                	in     al,0x60
c0009dda:	3c 5a                	cmp    al,0x5a
c0009ddc:	74 fa                	je     c0009dd8 <kernel_main+0x34f>
c0009dde:	3c 1c                	cmp    al,0x1c
c0009de0:	74 f6                	je     c0009dd8 <kernel_main+0x34f>
c0009de2:	eb d6                	jmp    c0009dba <kernel_main+0x331>
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	68 de 42 02 c0       	push   0xc00242de
c0009dec:	e8 2c fc ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009df1:	83 c4 10             	add    esp,0x10
c0009df4:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009dfb:	0f 85 f8 fc ff ff    	jne    c0009af9 <kernel_main+0x70>
c0009e01:	eb 04                	jmp    c0009e07 <kernel_main+0x37e>
c0009e03:	3c 1c                	cmp    al,0x1c
c0009e05:	74 06                	je     c0009e0d <kernel_main+0x384>
c0009e07:	e4 60                	in     al,0x60
c0009e09:	3c 5a                	cmp    al,0x5a
c0009e0b:	75 f6                	jne    c0009e03 <kernel_main+0x37a>
c0009e0d:	e4 60                	in     al,0x60
c0009e0f:	3c 5a                	cmp    al,0x5a
c0009e11:	74 fa                	je     c0009e0d <kernel_main+0x384>
c0009e13:	3c 1c                	cmp    al,0x1c
c0009e15:	74 f6                	je     c0009e0d <kernel_main+0x384>
c0009e17:	e9 dd fc ff ff       	jmp    c0009af9 <kernel_main+0x70>
c0009e1c:	83 ec 0c             	sub    esp,0xc
c0009e1f:	68 cb 42 02 c0       	push   0xc00242cb
c0009e24:	e8 f4 fb ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0009e33:	0f 85 69 fc ff ff    	jne    c0009aa2 <kernel_main+0x19>
c0009e39:	eb 04                	jmp    c0009e3f <kernel_main+0x3b6>
c0009e3b:	3c 1c                	cmp    al,0x1c
c0009e3d:	74 06                	je     c0009e45 <kernel_main+0x3bc>
c0009e3f:	e4 60                	in     al,0x60
c0009e41:	3c 5a                	cmp    al,0x5a
c0009e43:	75 f6                	jne    c0009e3b <kernel_main+0x3b2>
c0009e45:	e4 60                	in     al,0x60
c0009e47:	3c 5a                	cmp    al,0x5a
c0009e49:	74 fa                	je     c0009e45 <kernel_main+0x3bc>
c0009e4b:	3c 1c                	cmp    al,0x1c
c0009e4d:	74 f6                	je     c0009e45 <kernel_main+0x3bc>
c0009e4f:	e9 4e fc ff ff       	jmp    c0009aa2 <kernel_main+0x19>

c0009e54 <Phys::allocateDMA(unsigned long)>:
c0009e54:	55                   	push   ebp
c0009e55:	31 ed                	xor    ebp,ebp
c0009e57:	57                   	push   edi
c0009e58:	56                   	push   esi
c0009e59:	53                   	push   ebx
c0009e5a:	31 db                	xor    ebx,ebx
c0009e5c:	83 ec 28             	sub    esp,0x28
c0009e5f:	68 6f 43 02 c0       	push   0xc002436f
c0009e64:	e8 4a 2e 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009e69:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e6d:	83 c4 10             	add    esp,0x10
c0009e70:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009e76:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009e7e:	c1 ef 0c             	shr    edi,0xc
c0009e81:	31 c0                	xor    eax,eax
c0009e83:	eb 19                	jmp    c0009e9e <Phys::allocateDMA(unsigned long)+0x4a>
c0009e85:	85 c0                	test   eax,eax
c0009e87:	75 06                	jne    c0009e8f <Phys::allocateDMA(unsigned long)+0x3b>
c0009e89:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009e8d:	89 dd                	mov    ebp,ebx
c0009e8f:	8d 70 01             	lea    esi,[eax+0x1]
c0009e92:	39 f7                	cmp    edi,esi
c0009e94:	74 3f                	je     c0009ed5 <Phys::allocateDMA(unsigned long)+0x81>
c0009e96:	89 f0                	mov    eax,esi
c0009e98:	43                   	inc    ebx
c0009e99:	83 fb 0f             	cmp    ebx,0xf
c0009e9c:	7f 11                	jg     c0009eaf <Phys::allocateDMA(unsigned long)+0x5b>
c0009e9e:	80 bb bc 81 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7e44],0x0
c0009ea5:	74 de                	je     c0009e85 <Phys::allocateDMA(unsigned long)+0x31>
c0009ea7:	31 c0                	xor    eax,eax
c0009ea9:	43                   	inc    ebx
c0009eaa:	83 fb 0f             	cmp    ebx,0xf
c0009ead:	7e ef                	jle    c0009e9e <Phys::allocateDMA(unsigned long)+0x4a>
c0009eaf:	83 ec 0c             	sub    esp,0xc
c0009eb2:	68 a3 43 02 c0       	push   0xc00243a3
c0009eb7:	e8 f7 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009ebc:	c7 04 24 60 44 02 c0 	mov    DWORD PTR [esp],0xc0024460
c0009ec3:	e8 57 a9 00 00       	call   c001481f <Krnl::panic(char const*)>
c0009ec8:	83 c4 10             	add    esp,0x10
c0009ecb:	31 c0                	xor    eax,eax
c0009ecd:	83 c4 1c             	add    esp,0x1c
c0009ed0:	5b                   	pop    ebx
c0009ed1:	5e                   	pop    esi
c0009ed2:	5f                   	pop    edi
c0009ed3:	5d                   	pop    ebp
c0009ed4:	c3                   	ret    
c0009ed5:	89 e9                	mov    ecx,ebp
c0009ed7:	c1 f9 04             	sar    ecx,0x4
c0009eda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009ede:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009ee2:	89 ca                	mov    edx,ecx
c0009ee4:	4a                   	dec    edx
c0009ee5:	79 03                	jns    c0009eea <Phys::allocateDMA(unsigned long)+0x96>
c0009ee7:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009eea:	c1 fa 04             	sar    edx,0x4
c0009eed:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009ef1:	74 08                	je     c0009efb <Phys::allocateDMA(unsigned long)+0xa7>
c0009ef3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ef7:	31 c0                	xor    eax,eax
c0009ef9:	eb ae                	jmp    c0009ea9 <Phys::allocateDMA(unsigned long)+0x55>
c0009efb:	85 f6                	test   esi,esi
c0009efd:	74 15                	je     c0009f14 <Phys::allocateDMA(unsigned long)+0xc0>
c0009eff:	8d 95 bc 81 02 c0    	lea    edx,[ebp-0x3ffd7e44]
c0009f05:	8d 84 05 bd 81 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7e43]
c0009f0c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f0f:	42                   	inc    edx
c0009f10:	39 d0                	cmp    eax,edx
c0009f12:	75 f8                	jne    c0009f0c <Phys::allocateDMA(unsigned long)+0xb8>
c0009f14:	83 ec 0c             	sub    esp,0xc
c0009f17:	01 3d b4 81 02 c0    	add    DWORD PTR ds:0xc00281b4,edi
c0009f1d:	68 88 43 02 c0       	push   0xc0024388
c0009f22:	e8 8c 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f2e:	85 c0                	test   eax,eax
c0009f30:	74 23                	je     c0009f55 <Phys::allocateDMA(unsigned long)+0x101>
c0009f32:	83 ec 0c             	sub    esp,0xc
c0009f35:	68 9f 43 02 c0       	push   0xc002439f
c0009f3a:	e8 74 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f3f:	c7 04 24 60 44 02 c0 	mov    DWORD PTR [esp],0xc0024460
c0009f46:	e8 d4 a8 00 00       	call   c001481f <Krnl::panic(char const*)>
c0009f4b:	83 c4 10             	add    esp,0x10
c0009f4e:	89 f0                	mov    eax,esi
c0009f50:	e9 43 ff ff ff       	jmp    c0009e98 <Phys::allocateDMA(unsigned long)+0x44>
c0009f55:	c1 e5 0c             	shl    ebp,0xc
c0009f58:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009f5e:	e9 6a ff ff ff       	jmp    c0009ecd <Phys::allocateDMA(unsigned long)+0x79>

c0009f63 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009f63:	83 ec 18             	sub    esp,0x18
c0009f66:	68 a7 43 02 c0       	push   0xc00243a7
c0009f6b:	e8 43 2d 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0009f70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009f74:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009f7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f7e:	c1 ea 0c             	shr    edx,0xc
c0009f81:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009f86:	29 15 b4 81 02 c0    	sub    DWORD PTR ds:0xc00281b4,edx
c0009f8c:	c1 e8 0c             	shr    eax,0xc
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	85 d2                	test   edx,edx
c0009f94:	74 0f                	je     c0009fa5 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009f96:	05 bc 81 02 c0       	add    eax,0xc00281bc
c0009f9b:	01 c2                	add    edx,eax
c0009f9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fa0:	40                   	inc    eax
c0009fa1:	39 d0                	cmp    eax,edx
c0009fa3:	75 f8                	jne    c0009f9d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009fa5:	83 c4 0c             	add    esp,0xc
c0009fa8:	c3                   	ret    

c0009fa9 <Phys::setPageState(unsigned long, bool)>:
c0009fa9:	56                   	push   esi
c0009faa:	ba 01 00 00 00       	mov    edx,0x1
c0009faf:	53                   	push   ebx
c0009fb0:	8b 35 44 75 02 c0    	mov    esi,DWORD PTR ds:0xc0027544
c0009fb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009fba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009fbe:	89 c8                	mov    eax,ecx
c0009fc0:	83 e1 07             	and    ecx,0x7
c0009fc3:	c1 e8 03             	shr    eax,0x3
c0009fc6:	d3 e3                	shl    ebx,cl
c0009fc8:	01 c6                	add    esi,eax
c0009fca:	d3 e2                	shl    edx,cl
c0009fcc:	f7 d2                	not    edx
c0009fce:	20 16                	and    BYTE PTR [esi],dl
c0009fd0:	03 05 44 75 02 c0    	add    eax,DWORD PTR ds:0xc0027544
c0009fd6:	08 18                	or     BYTE PTR [eax],bl
c0009fd8:	5b                   	pop    ebx
c0009fd9:	5e                   	pop    esi
c0009fda:	c3                   	ret    

c0009fdb <Phys::getPageState(unsigned long)>:
c0009fdb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009fdf:	8b 15 44 75 02 c0    	mov    edx,DWORD PTR ds:0xc0027544
c0009fe5:	89 c8                	mov    eax,ecx
c0009fe7:	83 e1 07             	and    ecx,0x7
c0009fea:	c1 e8 03             	shr    eax,0x3
c0009fed:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009ff1:	d3 f8                	sar    eax,cl
c0009ff3:	83 e0 01             	and    eax,0x1
c0009ff6:	c3                   	ret    

c0009ff7 <Phys::freePage(unsigned long)>:
c0009ff7:	53                   	push   ebx
c0009ff8:	83 ec 10             	sub    esp,0x10
c0009ffb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009fff:	53                   	push   ebx
c000a000:	68 bd 43 02 c0       	push   0xc00243bd
c000a005:	e8 a9 2c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a00a:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a010:	83 c4 10             	add    esp,0x10
c000a013:	3d ff ff 00 00       	cmp    eax,0xffff
c000a018:	76 3d                	jbe    c000a057 <Phys::freePage(unsigned long)+0x60>
c000a01a:	83 ec 0c             	sub    esp,0xc
c000a01d:	c1 eb 0c             	shr    ebx,0xc
c000a020:	53                   	push   ebx
c000a021:	e8 b5 ff ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a026:	83 c4 10             	add    esp,0x10
c000a029:	84 c0                	test   al,al
c000a02b:	74 19                	je     c000a046 <Phys::freePage(unsigned long)+0x4f>
c000a02d:	83 ec 08             	sub    esp,0x8
c000a030:	ff 0d b4 81 02 c0    	dec    DWORD PTR ds:0xc00281b4
c000a036:	6a 00                	push   0x0
c000a038:	53                   	push   ebx
c000a039:	e8 6b ff ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a03e:	83 c4 10             	add    esp,0x10
c000a041:	83 c4 08             	add    esp,0x8
c000a044:	5b                   	pop    ebx
c000a045:	c3                   	ret    
c000a046:	c7 44 24 10 e7 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc00243e7
c000a04e:	83 c4 08             	add    esp,0x8
c000a051:	5b                   	pop    ebx
c000a052:	e9 c8 a7 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c000a057:	83 ec 08             	sub    esp,0x8
c000a05a:	53                   	push   ebx
c000a05b:	68 d0 43 02 c0       	push   0xc00243d0
c000a060:	e8 4e 2c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a065:	58                   	pop    eax
c000a066:	5a                   	pop    edx
c000a067:	68 00 10 00 00       	push   0x1000
c000a06c:	53                   	push   ebx
c000a06d:	e8 f1 fe ff ff       	call   c0009f63 <Phys::freeDMA(unsigned long, unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	83 c4 08             	add    esp,0x8
c000a078:	5b                   	pop    ebx
c000a079:	c3                   	ret    

c000a07a <Phys::allocatePage()>:
c000a07a:	56                   	push   esi
c000a07b:	53                   	push   ebx
c000a07c:	83 ec 14             	sub    esp,0x14
c000a07f:	8b 35 a8 81 02 c0    	mov    esi,DWORD PTR ds:0xc00281a8
c000a085:	89 f3                	mov    ebx,esi
c000a087:	eb 0a                	jmp    c000a093 <Phys::allocatePage()+0x19>
c000a089:	89 1d a8 81 02 c0    	mov    DWORD PTR ds:0xc00281a8,ebx
c000a08f:	39 de                	cmp    esi,ebx
c000a091:	74 24                	je     c000a0b7 <Phys::allocatePage()+0x3d>
c000a093:	53                   	push   ebx
c000a094:	e8 42 ff ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a099:	5a                   	pop    edx
c000a09a:	84 c0                	test   al,al
c000a09c:	74 69                	je     c000a107 <Phys::allocatePage()+0x8d>
c000a09e:	43                   	inc    ebx
c000a09f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0a5:	75 e2                	jne    c000a089 <Phys::allocatePage()+0xf>
c000a0a7:	31 db                	xor    ebx,ebx
c000a0a9:	c7 05 a8 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281a8,0x0
c000a0b3:	39 de                	cmp    esi,ebx
c000a0b5:	75 dc                	jne    c000a093 <Phys::allocatePage()+0x19>
c000a0b7:	83 ec 0c             	sub    esp,0xc
c000a0ba:	80 35 cc 81 02 c0 01 	xor    BYTE PTR ds:0xc00281cc,0x1
c000a0c1:	68 88 44 02 c0       	push   0xc0024488
c000a0c6:	e8 e8 2b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a0cb:	58                   	pop    eax
c000a0cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a0d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a0d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a0da:	e8 63 28 00 00       	call   c000c942 <VAS::scanForEviction()>
c000a0df:	83 c4 10             	add    esp,0x10
c000a0e2:	85 c0                	test   eax,eax
c000a0e4:	75 62                	jne    c000a148 <Phys::allocatePage()+0xce>
c000a0e6:	83 ec 0c             	sub    esp,0xc
c000a0e9:	68 ac 44 02 c0       	push   0xc00244ac
c000a0ee:	e8 2c a7 00 00       	call   c001481f <Krnl::panic(char const*)>
c000a0f3:	83 c4 10             	add    esp,0x10
c000a0f6:	8b 1d a8 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281a8
c000a0fc:	53                   	push   ebx
c000a0fd:	e8 d9 fe ff ff       	call   c0009fdb <Phys::getPageState(unsigned long)>
c000a102:	5a                   	pop    edx
c000a103:	84 c0                	test   al,al
c000a105:	75 97                	jne    c000a09e <Phys::allocatePage()+0x24>
c000a107:	6a 01                	push   0x1
c000a109:	53                   	push   ebx
c000a10a:	e8 9a fe ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a10f:	5a                   	pop    edx
c000a110:	a1 b4 81 02 c0       	mov    eax,ds:0xc00281b4
c000a115:	59                   	pop    ecx
c000a116:	40                   	inc    eax
c000a117:	8b 15 a8 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281a8
c000a11d:	a3 b4 81 02 c0       	mov    ds:0xc00281b4,eax
c000a122:	c1 e2 0c             	shl    edx,0xc
c000a125:	52                   	push   edx
c000a126:	ff 35 b8 81 02 c0    	push   DWORD PTR ds:0xc00281b8
c000a12c:	50                   	push   eax
c000a12d:	68 fd 43 02 c0       	push   0xc00243fd
c000a132:	e8 7c 2b 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a137:	a1 a8 81 02 c0       	mov    eax,ds:0xc00281a8
c000a13c:	83 c4 10             	add    esp,0x10
c000a13f:	c1 e0 0c             	shl    eax,0xc
c000a142:	83 c4 14             	add    esp,0x14
c000a145:	5b                   	pop    ebx
c000a146:	5e                   	pop    esi
c000a147:	c3                   	ret    
c000a148:	83 ec 08             	sub    esp,0x8
c000a14b:	89 c2                	mov    edx,eax
c000a14d:	6a 01                	push   0x1
c000a14f:	c1 ea 0c             	shr    edx,0xc
c000a152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a156:	52                   	push   edx
c000a157:	e8 4d fe ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a15c:	83 c4 10             	add    esp,0x10
c000a15f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a163:	eb dd                	jmp    c000a142 <Phys::allocatePage()+0xc8>

c000a165 <Phys::allocateContiguousPages(int)>:
c000a165:	57                   	push   edi
c000a166:	56                   	push   esi
c000a167:	53                   	push   ebx
c000a168:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a16c:	fa                   	cli    
c000a16d:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c000a173:	31 db                	xor    ebx,ebx
c000a175:	85 db                	test   ebx,ebx
c000a177:	75 11                	jne    c000a18a <Phys::allocateContiguousPages(int)+0x25>
c000a179:	e8 fc fe ff ff       	call   c000a07a <Phys::allocatePage()>
c000a17e:	83 fe 01             	cmp    esi,0x1
c000a181:	89 c7                	mov    edi,eax
c000a183:	74 21                	je     c000a1a6 <Phys::allocateContiguousPages(int)+0x41>
c000a185:	bb 01 00 00 00       	mov    ebx,0x1
c000a18a:	e8 eb fe ff ff       	call   c000a07a <Phys::allocatePage()>
c000a18f:	89 da                	mov    edx,ebx
c000a191:	c1 e2 0c             	shl    edx,0xc
c000a194:	01 fa                	add    edx,edi
c000a196:	39 c2                	cmp    edx,eax
c000a198:	74 20                	je     c000a1ba <Phys::allocateContiguousPages(int)+0x55>
c000a19a:	bb 01 00 00 00       	mov    ebx,0x1
c000a19f:	89 c7                	mov    edi,eax
c000a1a1:	83 fe 01             	cmp    esi,0x1
c000a1a4:	75 e4                	jne    c000a18a <Phys::allocateContiguousPages(int)+0x25>
c000a1a6:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000a1ab:	48                   	dec    eax
c000a1ac:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000a1b1:	75 01                	jne    c000a1b4 <Phys::allocateContiguousPages(int)+0x4f>
c000a1b3:	fb                   	sti    
c000a1b4:	89 f8                	mov    eax,edi
c000a1b6:	5b                   	pop    ebx
c000a1b7:	5e                   	pop    esi
c000a1b8:	5f                   	pop    edi
c000a1b9:	c3                   	ret    
c000a1ba:	43                   	inc    ebx
c000a1bb:	39 f3                	cmp    ebx,esi
c000a1bd:	75 b6                	jne    c000a175 <Phys::allocateContiguousPages(int)+0x10>
c000a1bf:	eb e5                	jmp    c000a1a6 <Phys::allocateContiguousPages(int)+0x41>

c000a1c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a1c1:	56                   	push   esi
c000a1c2:	53                   	push   ebx
c000a1c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a1c7:	39 1d ac 81 02 c0    	cmp    DWORD PTR ds:0xc00281ac,ebx
c000a1cd:	73 06                	jae    c000a1d5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a1cf:	89 1d ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,ebx
c000a1d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1d9:	c1 eb 0c             	shr    ebx,0xc
c000a1dc:	c1 e8 0c             	shr    eax,0xc
c000a1df:	39 d8                	cmp    eax,ebx
c000a1e1:	73 13                	jae    c000a1f6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a1e3:	6a 00                	push   0x0
c000a1e5:	8d 70 01             	lea    esi,[eax+0x1]
c000a1e8:	50                   	push   eax
c000a1e9:	e8 bb fd ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a1ee:	5a                   	pop    edx
c000a1ef:	89 f0                	mov    eax,esi
c000a1f1:	59                   	pop    ecx
c000a1f2:	39 f3                	cmp    ebx,esi
c000a1f4:	75 ed                	jne    c000a1e3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a1f6:	5b                   	pop    ebx
c000a1f7:	5e                   	pop    esi
c000a1f8:	c3                   	ret    

c000a1f9 <Phys::physicalMemorySetup(unsigned int)>:
c000a1f9:	55                   	push   ebp
c000a1fa:	57                   	push   edi
c000a1fb:	56                   	push   esi
c000a1fc:	53                   	push   ebx
c000a1fd:	31 db                	xor    ebx,ebx
c000a1ff:	83 ec 40             	sub    esp,0x40
c000a202:	6a 10                	push   0x10
c000a204:	6a 00                	push   0x0
c000a206:	68 bc 81 02 c0       	push   0xc00281bc
c000a20b:	e8 74 64 ff ff       	call   c0000684 <memset>
c000a210:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a214:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a219:	05 00 10 00 00       	add    eax,0x1000
c000a21e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a222:	5a                   	pop    edx
c000a223:	59                   	pop    ecx
c000a224:	50                   	push   eax
c000a225:	68 1b 44 02 c0       	push   0xc002441b
c000a22a:	e8 84 2a 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	83 ec 08             	sub    esp,0x8
c000a235:	6a 01                	push   0x1
c000a237:	53                   	push   ebx
c000a238:	43                   	inc    ebx
c000a239:	e8 6b fd ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a23e:	83 c4 10             	add    esp,0x10
c000a241:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a247:	75 e9                	jne    c000a232 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a249:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a250:	66 85 c0             	test   ax,ax
c000a253:	0f 84 8e 01 00 00    	je     c000a3e7 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a25d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a265:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a269:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a26e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a272:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a27a:	eb 15                	jmp    c000a291 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a27c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a280:	83 c3 18             	add    ebx,0x18
c000a283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a287:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a28b:	0f 84 66 01 00 00    	je     c000a3f7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a291:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a294:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a297:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a29a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a29e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2a2:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2a4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2a7:	01 f0                	add    eax,esi
c000a2a9:	55                   	push   ebp
c000a2aa:	11 fa                	adc    edx,edi
c000a2ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a2b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a2b8:	56                   	push   esi
c000a2b9:	68 dc 44 02 c0       	push   0xc00244dc
c000a2be:	e8 f0 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a2c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c7:	83 c4 10             	add    esp,0x10
c000a2ca:	09 f8                	or     eax,edi
c000a2cc:	0f 85 25 01 00 00    	jne    c000a3f7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2d2:	4d                   	dec    ebp
c000a2d3:	75 a7                	jne    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a2d5:	ba 00 00 08 00       	mov    edx,0x80000
c000a2da:	89 c1                	mov    ecx,eax
c000a2dc:	39 f2                	cmp    edx,esi
c000a2de:	19 f9                	sbb    ecx,edi
c000a2e0:	0f 82 a7 00 00 00    	jb     c000a38d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a2e6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a2ea:	89 c1                	mov    ecx,eax
c000a2ec:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a2f0:	0f 83 97 00 00 00    	jae    c000a38d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a2f6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a2fb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a2ff:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a303:	39 fa                	cmp    edx,edi
c000a305:	19 e8                	sbb    eax,ebp
c000a307:	0f 82 a5 01 00 00    	jb     c000a4b2 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a30d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a311:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a315:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a31b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a320:	83 d5 ff             	adc    ebp,0xffffffff
c000a323:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a327:	31 c0                	xor    eax,eax
c000a329:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a32d:	39 fa                	cmp    edx,edi
c000a32f:	89 c1                	mov    ecx,eax
c000a331:	19 e9                	sbb    ecx,ebp
c000a333:	0f 83 43 ff ff ff    	jae    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a339:	be 00 00 08 00       	mov    esi,0x80000
c000a33e:	57                   	push   edi
c000a33f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a343:	57                   	push   edi
c000a344:	56                   	push   esi
c000a345:	68 00 45 02 c0       	push   0xc0024500
c000a34a:	e8 64 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a34f:	5d                   	pop    ebp
c000a350:	58                   	pop    eax
c000a351:	57                   	push   edi
c000a352:	56                   	push   esi
c000a353:	e8 69 fe ff ff       	call   c000a1c1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a358:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a35c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a360:	83 c4 0c             	add    esp,0xc
c000a363:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a367:	03 05 b8 81 02 c0    	add    eax,DWORD PTR ds:0xc00281b8
c000a36d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a374:	a3 b8 81 02 c0       	mov    ds:0xc00281b8,eax
c000a379:	52                   	push   edx
c000a37a:	50                   	push   eax
c000a37b:	68 41 44 02 c0       	push   0xc0024441
c000a380:	e8 2e 29 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000a385:	83 c4 10             	add    esp,0x10
c000a388:	e9 ef fe ff ff       	jmp    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a38d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a391:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a399:	39 ea                	cmp    edx,ebp
c000a39b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a39f:	0f 82 d7 fe ff ff    	jb     c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3a5:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3aa:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3b2:	0f 83 c4 fe ff ff    	jae    c000a27c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3b8:	39 ee                	cmp    esi,ebp
c000a3ba:	89 f8                	mov    eax,edi
c000a3bc:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a3c0:	0f 83 78 ff ff ff    	jae    c000a33e <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a3c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a3ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a3ce:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a3d2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a3d6:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a3da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3e2:	e9 57 ff ff ff       	jmp    c000a33e <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a3e7:	83 ec 0c             	sub    esp,0xc
c000a3ea:	68 33 44 02 c0       	push   0xc0024433
c000a3ef:	e8 2b a4 00 00       	call   c001481f <Krnl::panic(char const*)>
c000a3f4:	83 c4 10             	add    esp,0x10
c000a3f7:	83 ec 08             	sub    esp,0x8
c000a3fa:	6a 00                	push   0x0
c000a3fc:	6a 05                	push   0x5
c000a3fe:	e8 a6 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a403:	58                   	pop    eax
c000a404:	5a                   	pop    edx
c000a405:	6a 00                	push   0x0
c000a407:	6a 06                	push   0x6
c000a409:	e8 9b fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a40e:	59                   	pop    ecx
c000a40f:	5b                   	pop    ebx
c000a410:	bb 60 00 00 00       	mov    ebx,0x60
c000a415:	6a 00                	push   0x0
c000a417:	6a 07                	push   0x7
c000a419:	e8 8b fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a41e:	83 05 b8 81 02 c0 03 	add    DWORD PTR ds:0xc00281b8,0x3
c000a425:	83 c4 10             	add    esp,0x10
c000a428:	83 ec 08             	sub    esp,0x8
c000a42b:	6a 00                	push   0x0
c000a42d:	53                   	push   ebx
c000a42e:	43                   	inc    ebx
c000a42f:	e8 75 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a434:	83 c4 10             	add    esp,0x10
c000a437:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a43d:	75 e9                	jne    c000a428 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a43f:	a1 b8 81 02 c0       	mov    eax,ds:0xc00281b8
c000a444:	bb 40 01 00 00       	mov    ebx,0x140
c000a449:	83 c0 20             	add    eax,0x20
c000a44c:	a3 b8 81 02 c0       	mov    ds:0xc00281b8,eax
c000a451:	eb 22                	jmp    c000a475 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a453:	83 ec 08             	sub    esp,0x8
c000a456:	6a 00                	push   0x0
c000a458:	53                   	push   ebx
c000a459:	43                   	inc    ebx
c000a45a:	e8 4a fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a45f:	a1 b8 81 02 c0       	mov    eax,ds:0xc00281b8
c000a464:	83 c4 10             	add    esp,0x10
c000a467:	40                   	inc    eax
c000a468:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a46e:	a3 b8 81 02 c0       	mov    ds:0xc00281b8,eax
c000a473:	74 07                	je     c000a47c <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a475:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a47a:	7e d7                	jle    c000a453 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a47c:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a481:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a486:	7f 22                	jg     c000a4aa <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a488:	83 ec 08             	sub    esp,0x8
c000a48b:	6a 00                	push   0x0
c000a48d:	53                   	push   ebx
c000a48e:	43                   	inc    ebx
c000a48f:	e8 15 fb ff ff       	call   c0009fa9 <Phys::setPageState(unsigned long, bool)>
c000a494:	a1 b8 81 02 c0       	mov    eax,ds:0xc00281b8
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	40                   	inc    eax
c000a49d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4a3:	a3 b8 81 02 c0       	mov    ds:0xc00281b8,eax
c000a4a8:	75 d7                	jne    c000a481 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4aa:	83 c4 3c             	add    esp,0x3c
c000a4ad:	5b                   	pop    ebx
c000a4ae:	5e                   	pop    esi
c000a4af:	5f                   	pop    edi
c000a4b0:	5d                   	pop    ebp
c000a4b1:	c3                   	ret    
c000a4b2:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a4ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a4c2:	e9 46 fe ff ff       	jmp    c000a30d <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a4c7:	90                   	nop

c000a4c8 <Pipe::isAtty()>:
c000a4c8:	31 c0                	xor    eax,eax
c000a4ca:	c3                   	ret    
c000a4cb:	90                   	nop

c000a4cc <Pipe::~Pipe()>:
c000a4cc:	83 ec 0c             	sub    esp,0xc
c000a4cf:	ba 6c 45 02 c0       	mov    edx,0xc002456c
c000a4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4d8:	89 10                	mov    DWORD PTR [eax],edx
c000a4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4de:	83 ec 0c             	sub    esp,0xc
c000a4e1:	50                   	push   eax
c000a4e2:	e8 45 12 00 00       	call   c000b72c <UnixFile::~UnixFile()>
c000a4e7:	83 c4 10             	add    esp,0x10
c000a4ea:	90                   	nop
c000a4eb:	83 c4 0c             	add    esp,0xc
c000a4ee:	c3                   	ret    
c000a4ef:	90                   	nop

c000a4f0 <Pipe::~Pipe()>:
c000a4f0:	83 ec 0c             	sub    esp,0xc
c000a4f3:	83 ec 0c             	sub    esp,0xc
c000a4f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4fa:	e8 cd ff ff ff       	call   c000a4cc <Pipe::~Pipe()>
c000a4ff:	83 c4 10             	add    esp,0x10
c000a502:	83 ec 08             	sub    esp,0x8
c000a505:	6a 20                	push   0x20
c000a507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a50b:	e8 c2 26 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000a510:	83 c4 10             	add    esp,0x10
c000a513:	83 c4 0c             	add    esp,0xc
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::read(unsigned long long, void*, int*)>:
c000a518:	55                   	push   ebp
c000a519:	57                   	push   edi
c000a51a:	56                   	push   esi
c000a51b:	53                   	push   ebx
c000a51c:	83 ec 1c             	sub    esp,0x1c
c000a51f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a523:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a527:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a52b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a52e:	89 c8                	mov    eax,ecx
c000a530:	99                   	cdq    
c000a531:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a535:	74 24                	je     c000a55b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a537:	39 f9                	cmp    ecx,edi
c000a539:	89 d1                	mov    ecx,edx
c000a53b:	19 f1                	sbb    ecx,esi
c000a53d:	73 1c                	jae    c000a55b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a53f:	fa                   	cli    
c000a540:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c000a546:	e8 a5 de 00 00       	call   c00183f0 <schedule()>
c000a54b:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000a550:	48                   	dec    eax
c000a551:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000a556:	75 d3                	jne    c000a52b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a558:	fb                   	sti    
c000a559:	eb d0                	jmp    c000a52b <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a55b:	39 f8                	cmp    eax,edi
c000a55d:	89 d1                	mov    ecx,edx
c000a55f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a562:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a566:	19 f1                	sbb    ecx,esi
c000a568:	73 07                	jae    c000a571 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a56a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a56d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a571:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a574:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a577:	29 f7                	sub    edi,esi
c000a579:	89 f8                	mov    eax,edi
c000a57b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a57f:	99                   	cdq    
c000a580:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a587:	19 d0                	sbb    eax,edx
c000a589:	73 07                	jae    c000a592 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a58b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a58e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a592:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a595:	89 ea                	mov    edx,ebp
c000a597:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a59b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5a0:	74 0d                	je     c000a5af <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5a2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5a5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5af:	85 d2                	test   edx,edx
c000a5b1:	74 11                	je     c000a5c4 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a5b7:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a5ba:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a5be:	89 d1                	mov    ecx,edx
c000a5c0:	89 c7                	mov    edi,eax
c000a5c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a5c7:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a5ca:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a5cd:	99                   	cdq    
c000a5ce:	89 f7                	mov    edi,esi
c000a5d0:	03 04 24             	add    eax,DWORD PTR [esp]
c000a5d3:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a5d7:	c1 ff 1f             	sar    edi,0x1f
c000a5da:	57                   	push   edi
c000a5db:	56                   	push   esi
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	e8 01 85 01 00       	call   c0022ae4 <__umoddi3>
c000a5e3:	83 c4 10             	add    esp,0x10
c000a5e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a5e9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a5ee:	75 10                	jne    c000a600 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	68 29 45 02 c0       	push   0xc0024529
c000a5f8:	e8 22 a2 00 00       	call   c001481f <Krnl::panic(char const*)>
c000a5fd:	83 c4 10             	add    esp,0x10
c000a600:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a604:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a607:	89 10                	mov    DWORD PTR [eax],edx
c000a609:	83 c4 1c             	add    esp,0x1c
c000a60c:	31 c0                	xor    eax,eax
c000a60e:	5b                   	pop    ebx
c000a60f:	5e                   	pop    esi
c000a610:	5f                   	pop    edi
c000a611:	5d                   	pop    ebp
c000a612:	c3                   	ret    
c000a613:	90                   	nop

c000a614 <Pipe::write(unsigned long long, void*, int*)>:
c000a614:	55                   	push   ebp
c000a615:	57                   	push   edi
c000a616:	56                   	push   esi
c000a617:	53                   	push   ebx
c000a618:	83 ec 1c             	sub    esp,0x1c
c000a61b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a61f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a623:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a626:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a62a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a62d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a631:	89 d8                	mov    eax,ebx
c000a633:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a636:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a63a:	89 d6                	mov    esi,edx
c000a63c:	89 d7                	mov    edi,edx
c000a63e:	c1 ff 1f             	sar    edi,0x1f
c000a641:	03 34 24             	add    esi,DWORD PTR [esp]
c000a644:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a648:	c1 f8 1f             	sar    eax,0x1f
c000a64b:	39 f3                	cmp    ebx,esi
c000a64d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a655:	19 f8                	sbb    eax,edi
c000a657:	b8 01 00 00 00       	mov    eax,0x1
c000a65c:	72 6e                	jb     c000a6cc <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a65e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a661:	01 d0                	add    eax,edx
c000a663:	99                   	cdq    
c000a664:	f7 fb                	idiv   ebx
c000a666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a66a:	29 d3                	sub    ebx,edx
c000a66c:	89 d7                	mov    edi,edx
c000a66e:	89 de                	mov    esi,ebx
c000a670:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a673:	c1 fb 1f             	sar    ebx,0x1f
c000a676:	39 f2                	cmp    edx,esi
c000a678:	19 d8                	sbb    eax,ebx
c000a67a:	b8 00 00 00 00       	mov    eax,0x0
c000a67f:	72 04                	jb     c000a685 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a681:	89 d0                	mov    eax,edx
c000a683:	29 f0                	sub    eax,esi
c000a685:	89 d3                	mov    ebx,edx
c000a687:	29 c3                	sub    ebx,eax
c000a689:	74 0b                	je     c000a696 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a68b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a68e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a692:	89 d9                	mov    ecx,ebx
c000a694:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a696:	85 c0                	test   eax,eax
c000a698:	74 0d                	je     c000a6a7 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a69a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a69e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6a1:	89 de                	mov    esi,ebx
c000a6a3:	89 c1                	mov    ecx,eax
c000a6a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6a7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6aa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6af:	75 10                	jne    c000a6c1 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6b1:	83 ec 0c             	sub    esp,0xc
c000a6b4:	68 45 45 02 c0       	push   0xc0024545
c000a6b9:	e8 61 a1 00 00       	call   c001481f <Krnl::panic(char const*)>
c000a6be:	83 c4 10             	add    esp,0x10
c000a6c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a6c5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a6c8:	89 08                	mov    DWORD PTR [eax],ecx
c000a6ca:	31 c0                	xor    eax,eax
c000a6cc:	83 c4 1c             	add    esp,0x1c
c000a6cf:	5b                   	pop    ebx
c000a6d0:	5e                   	pop    esi
c000a6d1:	5f                   	pop    edi
c000a6d2:	5d                   	pop    ebp
c000a6d3:	c3                   	ret    

c000a6d4 <Pipe::Pipe(int)>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6db:	83 ec 08             	sub    esp,0x8
c000a6de:	6a 00                	push   0x0
c000a6e0:	50                   	push   eax
c000a6e1:	e8 64 0e 00 00       	call   c000b54a <UnixFile::UnixFile(int)>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	ba 6c 45 02 c0       	mov    edx,0xc002456c
c000a6ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f2:	89 10                	mov    DWORD PTR [eax],edx
c000a6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a6fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a703:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a70e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a715:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a719:	83 ec 0c             	sub    esp,0xc
c000a71c:	50                   	push   eax
c000a71d:	e8 a1 f2 ff ff       	call   c00099c3 <malloc>
c000a722:	83 c4 10             	add    esp,0x10
c000a725:	89 c2                	mov    edx,eax
c000a727:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a72b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a732:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a736:	90                   	nop
c000a737:	83 c4 0c             	add    esp,0xc
c000a73a:	c3                   	ret    
c000a73b:	90                   	nop

c000a73c <VgaText::isAtty()>:
c000a73c:	b0 01                	mov    al,0x1
c000a73e:	c3                   	ret    
c000a73f:	90                   	nop

c000a740 <VgaText::~VgaText()>:
c000a740:	83 ec 0c             	sub    esp,0xc
c000a743:	ba f4 45 02 c0       	mov    edx,0xc00245f4
c000a748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74c:	89 10                	mov    DWORD PTR [eax],edx
c000a74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a752:	83 ec 0c             	sub    esp,0xc
c000a755:	50                   	push   eax
c000a756:	e8 d1 0f 00 00       	call   c000b72c <UnixFile::~UnixFile()>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	90                   	nop
c000a75f:	83 c4 0c             	add    esp,0xc
c000a762:	c3                   	ret    
c000a763:	90                   	nop

c000a764 <VgaText::~VgaText()>:
c000a764:	83 ec 0c             	sub    esp,0xc
c000a767:	83 ec 0c             	sub    esp,0xc
c000a76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a76e:	e8 cd ff ff ff       	call   c000a740 <VgaText::~VgaText()>
c000a773:	83 c4 10             	add    esp,0x10
c000a776:	83 ec 08             	sub    esp,0x8
c000a779:	68 c4 02 00 00       	push   0x2c4
c000a77e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a782:	e8 4b 24 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000a787:	83 c4 10             	add    esp,0x10
c000a78a:	83 c4 0c             	add    esp,0xc
c000a78d:	c3                   	ret    

c000a78e <VgaText::read(unsigned long long, void*, int*)>:
c000a78e:	83 ec 10             	sub    esp,0x10
c000a791:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a795:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79d:	e8 a0 57 00 00       	call   c000ff42 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7a6:	89 02                	mov    DWORD PTR [edx],eax
c000a7a8:	31 c0                	xor    eax,eax
c000a7aa:	83 c4 1c             	add    esp,0x1c
c000a7ad:	c3                   	ret    

c000a7ae <setTerminalScrollLock(bool)>:
c000a7ae:	c3                   	ret    

c000a7af <addToTerminalCycle(VgaText*)>:
c000a7af:	8b 15 00 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028200
c000a7b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7b9:	85 d2                	test   edx,edx
c000a7bb:	75 09                	jne    c000a7c6 <addToTerminalCycle(VgaText*)+0x17>
c000a7bd:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a7c0:	a3 00 82 02 c0       	mov    ds:0xc0028200,eax
c000a7c5:	c3                   	ret    
c000a7c6:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a7c9:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a7cc:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a7cf:	c3                   	ret    

c000a7d0 <installVgaTextImplementation()>:
c000a7d0:	83 ec 10             	sub    esp,0x10
c000a7d3:	6a 20                	push   0x20
c000a7d5:	6a 00                	push   0x0
c000a7d7:	68 e0 81 02 c0       	push   0xc00281e0
c000a7dc:	e8 a3 5e ff ff       	call   c0000684 <memset>
c000a7e1:	83 c4 1c             	add    esp,0x1c
c000a7e4:	c3                   	ret    

c000a7e5 <scrollTerminalScrollLock(int)>:
c000a7e5:	c3                   	ret    

c000a7e6 <VgaText::updateTitle()>:
c000a7e6:	53                   	push   ebx
c000a7e7:	31 c0                	xor    eax,eax
c000a7e9:	83 ec 58             	sub    esp,0x58
c000a7ec:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a7f0:	89 e1                	mov    ecx,esp
c000a7f2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a7f6:	40                   	inc    eax
c000a7f7:	83 f8 50             	cmp    eax,0x50
c000a7fa:	75 f6                	jne    c000a7f2 <VgaText::updateTitle()+0xc>
c000a7fc:	31 c0                	xor    eax,eax
c000a7fe:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a805:	84 db                	test   bl,bl
c000a807:	74 06                	je     c000a80f <VgaText::updateTitle()+0x29>
c000a809:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a80c:	40                   	inc    eax
c000a80d:	eb ef                	jmp    c000a7fe <VgaText::updateTitle()+0x18>
c000a80f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a812:	85 c0                	test   eax,eax
c000a814:	74 09                	je     c000a81f <VgaText::updateTitle()+0x39>
c000a816:	53                   	push   ebx
c000a817:	53                   	push   ebx
c000a818:	51                   	push   ecx
c000a819:	52                   	push   edx
c000a81a:	ff d0                	call   eax
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	83 c4 58             	add    esp,0x58
c000a822:	5b                   	pop    ebx
c000a823:	c3                   	ret    

c000a824 <VgaText::load()>:
c000a824:	53                   	push   ebx
c000a825:	31 c0                	xor    eax,eax
c000a827:	83 ec 58             	sub    esp,0x58
c000a82a:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a82e:	89 e2                	mov    edx,esp
c000a830:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a834:	40                   	inc    eax
c000a835:	83 f8 50             	cmp    eax,0x50
c000a838:	75 f6                	jne    c000a830 <VgaText::load()+0xc>
c000a83a:	31 c0                	xor    eax,eax
c000a83c:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a843:	84 c9                	test   cl,cl
c000a845:	74 06                	je     c000a84d <VgaText::load()+0x29>
c000a847:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a84a:	40                   	inc    eax
c000a84b:	eb ef                	jmp    c000a83c <VgaText::load()+0x18>
c000a84d:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a850:	85 c0                	test   eax,eax
c000a852:	74 09                	je     c000a85d <VgaText::load()+0x39>
c000a854:	51                   	push   ecx
c000a855:	51                   	push   ecx
c000a856:	52                   	push   edx
c000a857:	53                   	push   ebx
c000a858:	ff d0                	call   eax
c000a85a:	83 c4 10             	add    esp,0x10
c000a85d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a860:	85 c0                	test   eax,eax
c000a862:	74 09                	je     c000a86d <VgaText::load()+0x49>
c000a864:	83 ec 0c             	sub    esp,0xc
c000a867:	53                   	push   ebx
c000a868:	ff d0                	call   eax
c000a86a:	83 c4 10             	add    esp,0x10
c000a86d:	83 c4 58             	add    esp,0x58
c000a870:	5b                   	pop    ebx
c000a871:	c3                   	ret    

c000a872 <VgaText::updateCursor()>:
c000a872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a876:	39 05 04 82 02 c0    	cmp    DWORD PTR ds:0xc0028204,eax
c000a87c:	75 09                	jne    c000a887 <VgaText::updateCursor()+0x15>
c000a87e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a881:	85 c0                	test   eax,eax
c000a883:	74 02                	je     c000a887 <VgaText::updateCursor()+0x15>
c000a885:	ff e0                	jmp    eax
c000a887:	c3                   	ret    

c000a888 <VgaText::doANSI_SGR(int)>:
c000a888:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a88c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a890:	85 d2                	test   edx,edx
c000a892:	75 0b                	jne    c000a89f <VgaText::doANSI_SGR(int)+0x17>
c000a894:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a897:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a89a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a89d:	eb 59                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a89f:	83 fa 07             	cmp    edx,0x7
c000a8a2:	75 0b                	jne    c000a8af <VgaText::doANSI_SGR(int)+0x27>
c000a8a4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8a7:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8aa:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8ad:	eb 49                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a8af:	83 fa 1b             	cmp    edx,0x1b
c000a8b2:	74 e0                	je     c000a894 <VgaText::doANSI_SGR(int)+0xc>
c000a8b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a8b7:	83 f9 07             	cmp    ecx,0x7
c000a8ba:	77 09                	ja     c000a8c5 <VgaText::doANSI_SGR(int)+0x3d>
c000a8bc:	8b 14 8d 80 75 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8a80]
c000a8c3:	eb 20                	jmp    c000a8e5 <VgaText::doANSI_SGR(int)+0x5d>
c000a8c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a8c8:	83 f9 07             	cmp    ecx,0x7
c000a8cb:	77 09                	ja     c000a8d6 <VgaText::doANSI_SGR(int)+0x4e>
c000a8cd:	8b 14 8d 80 75 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8a80]
c000a8d4:	eb 22                	jmp    c000a8f8 <VgaText::doANSI_SGR(int)+0x70>
c000a8d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a8d9:	83 f9 07             	cmp    ecx,0x7
c000a8dc:	77 0b                	ja     c000a8e9 <VgaText::doANSI_SGR(int)+0x61>
c000a8de:	8b 14 95 38 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8bc8]
c000a8e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e8:	c3                   	ret    
c000a8e9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a8ec:	83 f9 07             	cmp    ecx,0x7
c000a8ef:	77 0a                	ja     c000a8fb <VgaText::doANSI_SGR(int)+0x73>
c000a8f1:	8b 14 95 10 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8bf0]
c000a8f8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a8fb:	c3                   	ret    

c000a8fc <VgaText::setDefaultBgColour(VgaColour)>:
c000a8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a904:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a907:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a90a:	c3                   	ret    
c000a90b:	90                   	nop

c000a90c <VgaText::setDefaultFgColour(VgaColour)>:
c000a90c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a910:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a914:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a917:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a91a:	c3                   	ret    
c000a91b:	90                   	nop

c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a91c:	53                   	push   ebx
c000a91d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a921:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a925:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a929:	51                   	push   ecx
c000a92a:	e8 cd ff ff ff       	call   c000a8fc <VgaText::setDefaultBgColour(VgaColour)>
c000a92f:	58                   	pop    eax
c000a930:	5a                   	pop    edx
c000a931:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a935:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a939:	5b                   	pop    ebx
c000a93a:	eb d0                	jmp    c000a90c <VgaText::setDefaultFgColour(VgaColour)>

c000a93c <VgaText::setTitleTextColour(VgaColour)>:
c000a93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a944:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a947:	e9 9a fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>

c000a94c <VgaText::setTitleColour(VgaColour)>:
c000a94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a950:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a954:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a957:	e9 8a fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>

c000a95c <VgaText::setTitle(char*)>:
c000a95c:	53                   	push   ebx
c000a95d:	83 ec 10             	sub    esp,0x10
c000a960:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a968:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a96e:	50                   	push   eax
c000a96f:	e8 cc 5d ff ff       	call   c0000740 <strcpy>
c000a974:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a978:	83 c4 18             	add    esp,0x18
c000a97b:	5b                   	pop    ebx
c000a97c:	e9 65 fe ff ff       	jmp    c000a7e6 <VgaText::updateTitle()>
c000a981:	90                   	nop

c000a982 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a982:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a986:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a98b:	83 e0 0f             	and    eax,0xf
c000a98e:	c1 e2 04             	shl    edx,0x4
c000a991:	09 d0                	or     eax,edx
c000a993:	c3                   	ret    

c000a994 <VgaText::scrollScreen()>:
c000a994:	55                   	push   ebp
c000a995:	b9 01 00 00 00       	mov    ecx,0x1
c000a99a:	57                   	push   edi
c000a99b:	56                   	push   esi
c000a99c:	53                   	push   ebx
c000a99d:	83 ec 0c             	sub    esp,0xc
c000a9a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9a4:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9aa:	31 ff                	xor    edi,edi
c000a9ac:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9af:	83 f9 17             	cmp    ecx,0x17
c000a9b2:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a9b5:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a9bc:	75 27                	jne    c000a9e5 <VgaText::scrollScreen()+0x51>
c000a9be:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a9c1:	01 f5                	add    ebp,esi
c000a9c3:	f7 c7 01 00 00 00    	test   edi,0x1
c000a9c9:	74 16                	je     c000a9e1 <VgaText::scrollScreen()+0x4d>
c000a9cb:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a9cf:	50                   	push   eax
c000a9d0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a9d4:	50                   	push   eax
c000a9d5:	e8 a8 ff ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000a9da:	5a                   	pop    edx
c000a9db:	5a                   	pop    edx
c000a9dc:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a9df:	eb 04                	jmp    c000a9e5 <VgaText::scrollScreen()+0x51>
c000a9e1:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a9e5:	47                   	inc    edi
c000a9e6:	46                   	inc    esi
c000a9e7:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a9ed:	75 bd                	jne    c000a9ac <VgaText::scrollScreen()+0x18>
c000a9ef:	41                   	inc    ecx
c000a9f0:	83 f9 18             	cmp    ecx,0x18
c000a9f3:	75 af                	jne    c000a9a4 <VgaText::scrollScreen()+0x10>
c000a9f5:	39 1d 04 82 02 c0    	cmp    DWORD PTR ds:0xc0028204,ebx
c000a9fb:	75 1b                	jne    c000aa18 <VgaText::scrollScreen()+0x84>
c000a9fd:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa01:	74 05                	je     c000aa08 <VgaText::scrollScreen()+0x74>
c000aa03:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa06:	eb 10                	jmp    c000aa18 <VgaText::scrollScreen()+0x84>
c000aa08:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa0b:	85 c0                	test   eax,eax
c000aa0d:	74 09                	je     c000aa18 <VgaText::scrollScreen()+0x84>
c000aa0f:	83 ec 0c             	sub    esp,0xc
c000aa12:	53                   	push   ebx
c000aa13:	ff d0                	call   eax
c000aa15:	83 c4 10             	add    esp,0x10
c000aa18:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa1c:	83 c4 0c             	add    esp,0xc
c000aa1f:	5b                   	pop    ebx
c000aa20:	5e                   	pop    esi
c000aa21:	5f                   	pop    edi
c000aa22:	5d                   	pop    ebp
c000aa23:	e9 4a fe ff ff       	jmp    c000a872 <VgaText::updateCursor()>

c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa28:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa2d:	c1 e0 08             	shl    eax,0x8
c000aa30:	89 c2                	mov    edx,eax
c000aa32:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa37:	09 d0                	or     eax,edx
c000aa39:	c3                   	ret    

c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa3a:	56                   	push   esi
c000aa3b:	53                   	push   ebx
c000aa3c:	51                   	push   ecx
c000aa3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa41:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa46:	50                   	push   eax
c000aa47:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa4c:	50                   	push   eax
c000aa4d:	e8 30 ff ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa52:	5b                   	pop    ebx
c000aa53:	0f b6 c0             	movzx  eax,al
c000aa56:	5e                   	pop    esi
c000aa57:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aa5c:	50                   	push   eax
c000aa5d:	53                   	push   ebx
c000aa5e:	e8 c5 ff ff ff       	call   c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>
c000aa63:	5a                   	pop    edx
c000aa64:	5e                   	pop    esi
c000aa65:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aa68:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aa6e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aa72:	0f b7 d2             	movzx  edx,dx
c000aa75:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aa79:	39 0d 04 82 02 c0    	cmp    DWORD PTR ds:0xc0028204,ecx
c000aa7f:	75 10                	jne    c000aa91 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa81:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 09                	je     c000aa91 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aa88:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aa8c:	5a                   	pop    edx
c000aa8d:	5b                   	pop    ebx
c000aa8e:	5e                   	pop    esi
c000aa8f:	ff e0                	jmp    eax
c000aa91:	58                   	pop    eax
c000aa92:	5b                   	pop    ebx
c000aa93:	5e                   	pop    esi
c000aa94:	c3                   	ret    
c000aa95:	90                   	nop

c000aa96 <VgaText::getCursorX()>:
c000aa96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa9a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aa9d:	c3                   	ret    

c000aa9e <VgaText::getCursorY()>:
c000aa9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaa5:	c3                   	ret    

c000aaa6 <VgaText::setCursor(int, int)>:
c000aaa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aaae:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aab1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aab5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aab8:	e9 b5 fd ff ff       	jmp    c000a872 <VgaText::updateCursor()>

c000aabd <setActiveTerminal(VgaText*)>:
c000aabd:	53                   	push   ebx
c000aabe:	83 ec 08             	sub    esp,0x8
c000aac1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aac5:	85 db                	test   ebx,ebx
c000aac7:	75 11                	jne    c000aada <setActiveTerminal(VgaText*)+0x1d>
c000aac9:	c7 44 24 10 80 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024580
c000aad1:	83 c4 08             	add    esp,0x8
c000aad4:	5b                   	pop    ebx
c000aad5:	e9 45 9d 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c000aada:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c000aadf:	85 c0                	test   eax,eax
c000aae1:	74 0c                	je     c000aaef <setActiveTerminal(VgaText*)+0x32>
c000aae3:	83 ec 0c             	sub    esp,0xc
c000aae6:	50                   	push   eax
c000aae7:	e8 86 fd ff ff       	call   c000a872 <VgaText::updateCursor()>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 1d 04 82 02 c0    	mov    DWORD PTR ds:0xc0028204,ebx
c000aaf5:	51                   	push   ecx
c000aaf6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aaf9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aafc:	53                   	push   ebx
c000aafd:	e8 a4 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab02:	83 c4 10             	add    esp,0x10
c000ab05:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab09:	75 07                	jne    c000ab12 <setActiveTerminal(VgaText*)+0x55>
c000ab0b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab12:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab16:	83 c4 08             	add    esp,0x8
c000ab19:	5b                   	pop    ebx
c000ab1a:	e9 05 fd ff ff       	jmp    c000a824 <VgaText::load()>

c000ab1f <doTerminalCycle()>:
c000ab1f:	83 ec 18             	sub    esp,0x18
c000ab22:	a1 00 82 02 c0       	mov    eax,ds:0xc0028200
c000ab27:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab2a:	50                   	push   eax
c000ab2b:	a3 00 82 02 c0       	mov    ds:0xc0028200,eax
c000ab30:	e8 88 ff ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c000ab35:	83 c4 1c             	add    esp,0x1c
c000ab38:	c3                   	ret    
c000ab39:	90                   	nop

c000ab3a <VgaText::setCursorX(int)>:
c000ab3a:	83 ec 10             	sub    esp,0x10
c000ab3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab41:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab48:	50                   	push   eax
c000ab49:	e8 58 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 1c             	add    esp,0x1c
c000ab51:	c3                   	ret    

c000ab52 <VgaText::setCursorY(int)>:
c000ab52:	83 ec 10             	sub    esp,0x10
c000ab55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab5d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ab60:	50                   	push   eax
c000ab61:	e8 40 ff ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ab66:	83 c4 1c             	add    esp,0x1c
c000ab69:	c3                   	ret    

c000ab6a <VgaText::incrementCursor(bool)>:
c000ab6a:	56                   	push   esi
c000ab6b:	53                   	push   ebx
c000ab6c:	51                   	push   ecx
c000ab6d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab71:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ab75:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ab78:	40                   	inc    eax
c000ab79:	83 f8 50             	cmp    eax,0x50
c000ab7c:	74 05                	je     c000ab83 <VgaText::incrementCursor(bool)+0x19>
c000ab7e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab81:	eb 24                	jmp    c000aba7 <VgaText::incrementCursor(bool)+0x3d>
c000ab83:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ab86:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ab8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ab90:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ab93:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ab96:	75 0f                	jne    c000aba7 <VgaText::incrementCursor(bool)+0x3d>
c000ab98:	83 ec 0c             	sub    esp,0xc
c000ab9b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ab9e:	53                   	push   ebx
c000ab9f:	e8 f0 fd ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000aba4:	83 c4 10             	add    esp,0x10
c000aba7:	89 f0                	mov    eax,esi
c000aba9:	84 c0                	test   al,al
c000abab:	74 0c                	je     c000abb9 <VgaText::incrementCursor(bool)+0x4f>
c000abad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abb1:	5a                   	pop    edx
c000abb2:	5b                   	pop    ebx
c000abb3:	5e                   	pop    esi
c000abb4:	e9 b9 fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000abb9:	58                   	pop    eax
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	c3                   	ret    
c000abbd:	90                   	nop

c000abbe <VgaText::decrementCursor(bool)>:
c000abbe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000abc6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000abc9:	85 c0                	test   eax,eax
c000abcb:	74 04                	je     c000abd1 <VgaText::decrementCursor(bool)+0x13>
c000abcd:	48                   	dec    eax
c000abce:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000abd1:	84 c9                	test   cl,cl
c000abd3:	74 09                	je     c000abde <VgaText::decrementCursor(bool)+0x20>
c000abd5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abd9:	e9 94 fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000abde:	c3                   	ret    
c000abdf:	90                   	nop

c000abe0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000abe0:	53                   	push   ebx
c000abe1:	83 ec 08             	sub    esp,0x8
c000abe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000abe8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000abf0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000abf4:	3c 07                	cmp    al,0x7
c000abf6:	75 2a                	jne    c000ac22 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000abf8:	a1 b8 82 02 c0       	mov    eax,ds:0xc00282b8
c000abfd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac05:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac0d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac19:	83 c4 08             	add    esp,0x8
c000ac1c:	5b                   	pop    ebx
c000ac1d:	e9 ac 2e 00 00       	jmp    c000dace <Buzzer::beep(int, int, bool)>
c000ac22:	3c 0d                	cmp    al,0xd
c000ac24:	75 09                	jne    c000ac2f <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac26:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac2d:	eb 2c                	jmp    c000ac5b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac2f:	3c 0a                	cmp    al,0xa
c000ac31:	75 31                	jne    c000ac64 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac3d:	8d 50 01             	lea    edx,[eax+0x1]
c000ac40:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac43:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac46:	75 0f                	jne    c000ac57 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac4e:	53                   	push   ebx
c000ac4f:	e8 40 fd ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000ac54:	83 c4 10             	add    esp,0x10
c000ac57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ac5b:	83 c4 08             	add    esp,0x8
c000ac5e:	5b                   	pop    ebx
c000ac5f:	e9 0e fc ff ff       	jmp    c000a872 <VgaText::updateCursor()>
c000ac64:	3c 08                	cmp    al,0x8
c000ac66:	75 25                	jne    c000ac8d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000ac68:	50                   	push   eax
c000ac69:	50                   	push   eax
c000ac6a:	6a 01                	push   0x1
c000ac6c:	53                   	push   ebx
c000ac6d:	e8 4c ff ff ff       	call   c000abbe <VgaText::decrementCursor(bool)>
c000ac72:	5a                   	pop    edx
c000ac73:	59                   	pop    ecx
c000ac74:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac77:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac7a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ac7d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ac80:	6a 20                	push   0x20
c000ac82:	53                   	push   ebx
c000ac83:	e8 b2 fd ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ac88:	83 c4 28             	add    esp,0x28
c000ac8b:	5b                   	pop    ebx
c000ac8c:	c3                   	ret    
c000ac8d:	83 ec 08             	sub    esp,0x8
c000ac90:	0f be c0             	movsx  eax,al
c000ac93:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ac96:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ac99:	51                   	push   ecx
c000ac9a:	52                   	push   edx
c000ac9b:	50                   	push   eax
c000ac9c:	53                   	push   ebx
c000ac9d:	e8 98 fd ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aca2:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aca6:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acae:	83 c4 28             	add    esp,0x28
c000acb1:	5b                   	pop    ebx
c000acb2:	e9 b3 fe ff ff       	jmp    c000ab6a <VgaText::incrementCursor(bool)>
c000acb7:	90                   	nop

c000acb8 <VgaText::doUpdate()>:
c000acb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acbc:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000acbf:	85 c0                	test   eax,eax
c000acc1:	74 02                	je     c000acc5 <VgaText::doUpdate()+0xd>
c000acc3:	ff e0                	jmp    eax
c000acc5:	c3                   	ret    

c000acc6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000acc6:	55                   	push   ebp
c000acc7:	31 ed                	xor    ebp,ebp
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	53                   	push   ebx
c000accc:	83 ec 1c             	sub    esp,0x1c
c000accf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000acd3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000acd8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000acdf:	50                   	push   eax
c000ace0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ace5:	50                   	push   eax
c000ace6:	e8 97 fc ff ff       	call   c000a982 <VgaText::combineColours(unsigned char, unsigned char)>
c000aceb:	59                   	pop    ecx
c000acec:	0f b6 c0             	movzx  eax,al
c000acef:	5e                   	pop    esi
c000acf0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000acf5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000acf9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000acfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad00:	0f b7 f6             	movzx  esi,si
c000ad03:	01 f6                	add    esi,esi
c000ad05:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad08:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad0b:	84 c0                	test   al,al
c000ad0d:	0f 84 fd 00 00 00    	je     c000ae10 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad13:	3c 0d                	cmp    al,0xd
c000ad15:	75 0c                	jne    c000ad23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad17:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad1e:	e9 e7 00 00 00       	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad23:	3c 0a                	cmp    al,0xa
c000ad25:	75 47                	jne    c000ad6e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad2a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad31:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad34:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad37:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad3a:	75 0f                	jne    c000ad4b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad3c:	83 ec 0c             	sub    esp,0xc
c000ad3f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad42:	53                   	push   ebx
c000ad43:	e8 4c fc ff ff       	call   c000a994 <VgaText::scrollScreen()>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	83 ec 0c             	sub    esp,0xc
c000ad4e:	31 ed                	xor    ebp,ebp
c000ad50:	53                   	push   ebx
c000ad51:	e8 1c fb ff ff       	call   c000a872 <VgaText::updateCursor()>
c000ad56:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad5b:	83 c4 10             	add    esp,0x10
c000ad5e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad61:	0f b7 f6             	movzx  esi,si
c000ad64:	01 f6                	add    esi,esi
c000ad66:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad69:	e9 9c 00 00 00       	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6e:	3c 08                	cmp    al,0x8
c000ad70:	75 35                	jne    c000ada7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000ad72:	56                   	push   esi
c000ad73:	56                   	push   esi
c000ad74:	6a 01                	push   0x1
c000ad76:	53                   	push   ebx
c000ad77:	e8 42 fe ff ff       	call   c000abbe <VgaText::decrementCursor(bool)>
c000ad7c:	58                   	pop    eax
c000ad7d:	5a                   	pop    edx
c000ad7e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ad81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ad84:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ad87:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ad8a:	6a 20                	push   0x20
c000ad8c:	53                   	push   ebx
c000ad8d:	e8 a8 fc ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ad92:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad97:	83 c4 20             	add    esp,0x20
c000ad9a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad9d:	0f b7 f6             	movzx  esi,si
c000ada0:	01 f6                	add    esi,esi
c000ada2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ada5:	eb 63                	jmp    c000ae0a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ada7:	51                   	push   ecx
c000ada8:	51                   	push   ecx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	50                   	push   eax
c000adae:	e8 75 fc ff ff       	call   c000aa28 <VgaText::combineCharAndColour(char, unsigned char)>
c000adb3:	83 c4 10             	add    esp,0x10
c000adb6:	66 89 06             	mov    WORD PTR [esi],ax
c000adb9:	39 1d 04 82 02 c0    	cmp    DWORD PTR ds:0xc0028204,ebx
c000adbf:	75 21                	jne    c000ade2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000adc1:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000adc4:	85 c0                	test   eax,eax
c000adc6:	74 1a                	je     c000ade2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000adc8:	52                   	push   edx
c000adc9:	52                   	push   edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000add4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000add8:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000addb:	51                   	push   ecx
c000addc:	53                   	push   ebx
c000addd:	ff d0                	call   eax
c000addf:	83 c4 20             	add    esp,0x20
c000ade2:	83 c6 02             	add    esi,0x2
c000ade5:	50                   	push   eax
c000ade6:	50                   	push   eax
c000ade7:	6a 00                	push   0x0
c000ade9:	53                   	push   ebx
c000adea:	e8 7b fd ff ff       	call   c000ab6a <VgaText::incrementCursor(bool)>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000adf6:	75 0d                	jne    c000ae05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000adf8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000adfd:	0f b7 f6             	movzx  esi,si
c000ae00:	01 f6                	add    esi,esi
c000ae02:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae05:	bd 01 00 00 00       	mov    ebp,0x1
c000ae0a:	47                   	inc    edi
c000ae0b:	e9 f8 fe ff ff       	jmp    c000ad08 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae10:	83 ec 0c             	sub    esp,0xc
c000ae13:	53                   	push   ebx
c000ae14:	e8 59 fa ff ff       	call   c000a872 <VgaText::updateCursor()>
c000ae19:	83 c4 10             	add    esp,0x10
c000ae1c:	89 e8                	mov    eax,ebp
c000ae1e:	84 c0                	test   al,al
c000ae20:	74 0c                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae22:	83 ec 0c             	sub    esp,0xc
c000ae25:	53                   	push   ebx
c000ae26:	e8 8d fe ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000ae2b:	83 c4 10             	add    esp,0x10
c000ae2e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae35:	83 c4 1c             	add    esp,0x1c
c000ae38:	5b                   	pop    ebx
c000ae39:	5e                   	pop    esi
c000ae3a:	5f                   	pop    edi
c000ae3b:	5d                   	pop    ebp
c000ae3c:	c3                   	ret    
c000ae3d:	90                   	nop

c000ae3e <VgaText::clearScreen()>:
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	31 f6                	xor    esi,esi
c000ae42:	53                   	push   ebx
c000ae43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae47:	52                   	push   edx
c000ae48:	6a 00                	push   0x0
c000ae4a:	6a 00                	push   0x0
c000ae4c:	53                   	push   ebx
c000ae4d:	e8 54 fc ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000ae52:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ae59:	83 c4 10             	add    esp,0x10
c000ae5c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000ae5f:	7e 20                	jle    c000ae81 <VgaText::clearScreen()+0x43>
c000ae61:	31 ff                	xor    edi,edi
c000ae63:	50                   	push   eax
c000ae64:	50                   	push   eax
c000ae65:	56                   	push   esi
c000ae66:	57                   	push   edi
c000ae67:	47                   	inc    edi
c000ae68:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000ae6b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ae6e:	6a 20                	push   0x20
c000ae70:	53                   	push   ebx
c000ae71:	e8 c4 fb ff ff       	call   c000aa3a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000ae76:	83 c4 20             	add    esp,0x20
c000ae79:	83 ff 50             	cmp    edi,0x50
c000ae7c:	75 e5                	jne    c000ae63 <VgaText::clearScreen()+0x25>
c000ae7e:	46                   	inc    esi
c000ae7f:	eb db                	jmp    c000ae5c <VgaText::clearScreen()+0x1e>
c000ae81:	83 ec 0c             	sub    esp,0xc
c000ae84:	53                   	push   ebx
c000ae85:	e8 2e fe ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000ae8a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	5b                   	pop    ebx
c000ae95:	5e                   	pop    esi
c000ae96:	5f                   	pop    edi
c000ae97:	c3                   	ret    

c000ae98 <VgaText::putchar(char)>:
c000ae98:	56                   	push   esi
c000ae99:	53                   	push   ebx
c000ae9a:	83 ec 14             	sub    esp,0x14
c000ae9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aea1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aea5:	3c 5b                	cmp    al,0x5b
c000aea7:	75 18                	jne    c000aec1 <VgaText::putchar(char)+0x29>
c000aea9:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aead:	74 1f                	je     c000aece <VgaText::putchar(char)+0x36>
c000aeaf:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000aeb5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000aebc:	e9 bd 00 00 00       	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000aec1:	3c 1b                	cmp    al,0x1b
c000aec3:	75 09                	jne    c000aece <VgaText::putchar(char)+0x36>
c000aec5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000aec9:	e9 b0 00 00 00       	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000aece:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000aed1:	84 c9                	test   cl,cl
c000aed3:	0f 84 92 00 00 00    	je     c000af6b <VgaText::putchar(char)+0xd3>
c000aed9:	8d 50 c0             	lea    edx,[eax-0x40]
c000aedc:	80 fa 3e             	cmp    dl,0x3e
c000aedf:	77 76                	ja     c000af57 <VgaText::putchar(char)+0xbf>
c000aee1:	3c 6d                	cmp    al,0x6d
c000aee3:	75 47                	jne    c000af2c <VgaText::putchar(char)+0x94>
c000aee5:	31 f6                	xor    esi,esi
c000aee7:	31 d2                	xor    edx,edx
c000aee9:	31 c0                	xor    eax,eax
c000aeeb:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000aeee:	7e 2d                	jle    c000af1d <VgaText::putchar(char)+0x85>
c000aef0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000aef5:	80 fa 3b             	cmp    dl,0x3b
c000aef8:	75 17                	jne    c000af11 <VgaText::putchar(char)+0x79>
c000aefa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000aefe:	50                   	push   eax
c000aeff:	53                   	push   ebx
c000af00:	e8 83 f9 ff ff       	call   c000a888 <VgaText::doANSI_SGR(int)>
c000af05:	59                   	pop    ecx
c000af06:	31 d2                	xor    edx,edx
c000af08:	58                   	pop    eax
c000af09:	31 c0                	xor    eax,eax
c000af0b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af0f:	eb 09                	jmp    c000af1a <VgaText::putchar(char)+0x82>
c000af11:	6b c0 0a             	imul   eax,eax,0xa
c000af14:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af18:	88 ca                	mov    dl,cl
c000af1a:	46                   	inc    esi
c000af1b:	eb ce                	jmp    c000aeeb <VgaText::putchar(char)+0x53>
c000af1d:	84 d2                	test   dl,dl
c000af1f:	74 2e                	je     c000af4f <VgaText::putchar(char)+0xb7>
c000af21:	50                   	push   eax
c000af22:	53                   	push   ebx
c000af23:	e8 60 f9 ff ff       	call   c000a888 <VgaText::doANSI_SGR(int)>
c000af28:	58                   	pop    eax
c000af29:	5a                   	pop    edx
c000af2a:	eb 23                	jmp    c000af4f <VgaText::putchar(char)+0xb7>
c000af2c:	3c 4a                	cmp    al,0x4a
c000af2e:	75 1f                	jne    c000af4f <VgaText::putchar(char)+0xb7>
c000af30:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af34:	75 19                	jne    c000af4f <VgaText::putchar(char)+0xb7>
c000af36:	83 ec 0c             	sub    esp,0xc
c000af39:	53                   	push   ebx
c000af3a:	e8 ff fe ff ff       	call   c000ae3e <VgaText::clearScreen()>
c000af3f:	83 c4 0c             	add    esp,0xc
c000af42:	6a 00                	push   0x0
c000af44:	6a 00                	push   0x0
c000af46:	53                   	push   ebx
c000af47:	e8 5a fb ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000af55:	eb 27                	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000af57:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000af5a:	83 fa 0e             	cmp    edx,0xe
c000af5d:	7f 1f                	jg     c000af7e <VgaText::putchar(char)+0xe6>
c000af5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000af62:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000af65:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000af69:	eb 13                	jmp    c000af7e <VgaText::putchar(char)+0xe6>
c000af6b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af6e:	0f be c0             	movsx  eax,al
c000af71:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af74:	50                   	push   eax
c000af75:	53                   	push   ebx
c000af76:	e8 65 fc ff ff       	call   c000abe0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000af7b:	83 c4 10             	add    esp,0x10
c000af7e:	83 c4 14             	add    esp,0x14
c000af81:	5b                   	pop    ebx
c000af82:	5e                   	pop    esi
c000af83:	c3                   	ret    

c000af84 <VgaText::putx(unsigned int)>:
c000af84:	57                   	push   edi
c000af85:	b9 11 00 00 00       	mov    ecx,0x11
c000af8a:	56                   	push   esi
c000af8b:	be 8e 45 02 c0       	mov    esi,0xc002458e
c000af90:	53                   	push   ebx
c000af91:	83 ec 20             	sub    esp,0x20
c000af94:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000af98:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000af9c:	fc                   	cld    
c000af9d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000af9f:	be 08 00 00 00       	mov    esi,0x8
c000afa4:	50                   	push   eax
c000afa5:	50                   	push   eax
c000afa6:	89 d8                	mov    eax,ebx
c000afa8:	c1 e3 04             	shl    ebx,0x4
c000afab:	c1 e8 1c             	shr    eax,0x1c
c000afae:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afb3:	50                   	push   eax
c000afb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000afb8:	e8 db fe ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000afbd:	83 c4 10             	add    esp,0x10
c000afc0:	4e                   	dec    esi
c000afc1:	75 e1                	jne    c000afa4 <VgaText::putx(unsigned int)+0x20>
c000afc3:	83 c4 20             	add    esp,0x20
c000afc6:	5b                   	pop    ebx
c000afc7:	5e                   	pop    esi
c000afc8:	5f                   	pop    edi
c000afc9:	c3                   	ret    

c000afca <VgaText::puts(char const*)>:
c000afca:	53                   	push   ebx
c000afcb:	83 ec 08             	sub    esp,0x8
c000afce:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000afd2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000afd5:	84 c0                	test   al,al
c000afd7:	74 12                	je     c000afeb <VgaText::puts(char const*)+0x21>
c000afd9:	43                   	inc    ebx
c000afda:	51                   	push   ecx
c000afdb:	51                   	push   ecx
c000afdc:	50                   	push   eax
c000afdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe1:	e8 b2 fe ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000afe6:	83 c4 10             	add    esp,0x10
c000afe9:	eb e7                	jmp    c000afd2 <VgaText::puts(char const*)+0x8>
c000afeb:	83 c4 08             	add    esp,0x8
c000afee:	5b                   	pop    ebx
c000afef:	c3                   	ret    

c000aff0 <VgaText::VgaText(char const*)>:
c000aff0:	57                   	push   edi
c000aff1:	56                   	push   esi
c000aff2:	53                   	push   ebx
c000aff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff7:	83 ec 08             	sub    esp,0x8
c000affa:	6a 00                	push   0x0
c000affc:	50                   	push   eax
c000affd:	e8 48 05 00 00       	call   c000b54a <UnixFile::UnixFile(int)>
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	ba f4 45 02 c0       	mov    edx,0xc00245f4
c000b00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00e:	89 10                	mov    DWORD PTR [eax],edx
c000b010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b014:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b032:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b045:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b050:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b066:	8d 50 60             	lea    edx,[eax+0x60]
c000b069:	bb e0 81 02 c0       	mov    ebx,0xc00281e0
c000b06e:	b8 08 00 00 00       	mov    eax,0x8
c000b073:	fc                   	cld    
c000b074:	89 d7                	mov    edi,edx
c000b076:	89 de                	mov    esi,ebx
c000b078:	89 c1                	mov    ecx,eax
c000b07a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b080:	05 82 00 00 00       	add    eax,0x82
c000b085:	83 ec 08             	sub    esp,0x8
c000b088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b08c:	50                   	push   eax
c000b08d:	e8 ae 56 ff ff       	call   c0000740 <strcpy>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b099:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0a0:	83 ec 0c             	sub    esp,0xc
c000b0a3:	6a 01                	push   0x1
c000b0a5:	e8 e3 08 00 00       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 c2                	mov    edx,eax
c000b0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b0b6:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c000b0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0c3:	89 c6                	mov    esi,eax
c000b0c5:	e8 b0 ef ff ff       	call   c000a07a <Phys::allocatePage()>
c000b0ca:	68 05 0c 00 00       	push   0xc05
c000b0cf:	56                   	push   esi
c000b0d0:	50                   	push   eax
c000b0d1:	53                   	push   ebx
c000b0d2:	e8 5d 0f 00 00       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b0e1:	83 ec 04             	sub    esp,0x4
c000b0e4:	68 00 0f 00 00       	push   0xf00
c000b0e9:	6a 00                	push   0x0
c000b0eb:	50                   	push   eax
c000b0ec:	e8 93 55 ff ff       	call   c0000684 <memset>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	83 ec 04             	sub    esp,0x4
c000b0f7:	6a 00                	push   0x0
c000b0f9:	6a 07                	push   0x7
c000b0fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0ff:	e8 18 f8 ff ff       	call   c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	83 ec 04             	sub    esp,0x4
c000b10a:	6a 00                	push   0x0
c000b10c:	6a 00                	push   0x0
c000b10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b112:	e8 8f f9 ff ff       	call   c000aaa6 <VgaText::setCursor(int, int)>
c000b117:	83 c4 10             	add    esp,0x10
c000b11a:	83 ec 0c             	sub    esp,0xc
c000b11d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b121:	e8 18 fd ff ff       	call   c000ae3e <VgaText::clearScreen()>
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b135:	05 02 01 00 00       	add    eax,0x102
c000b13a:	83 ec 04             	sub    esp,0x4
c000b13d:	68 96 00 00 00       	push   0x96
c000b142:	6a 00                	push   0x0
c000b144:	50                   	push   eax
c000b145:	e8 3a 55 ff ff       	call   c0000684 <memset>
c000b14a:	83 c4 10             	add    esp,0x10
c000b14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b151:	05 98 01 00 00       	add    eax,0x198
c000b156:	83 ec 04             	sub    esp,0x4
c000b159:	68 2c 01 00 00       	push   0x12c
c000b15e:	6a 00                	push   0x0
c000b160:	50                   	push   eax
c000b161:	e8 1e 55 ff ff       	call   c0000684 <memset>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	90                   	nop
c000b16a:	5b                   	pop    ebx
c000b16b:	5e                   	pop    esi
c000b16c:	5f                   	pop    edi
c000b16d:	c3                   	ret    

c000b16e <VgaText::receiveKey(unsigned char)>:
c000b16e:	55                   	push   ebp
c000b16f:	57                   	push   edi
c000b170:	56                   	push   esi
c000b171:	53                   	push   ebx
c000b172:	83 ec 1c             	sub    esp,0x1c
c000b175:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b179:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b17d:	84 db                	test   bl,bl
c000b17f:	0f 84 c9 00 00 00    	je     c000b24e <VgaText::receiveKey(unsigned char)+0xe0>
c000b185:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b18b:	80 fb 08             	cmp    bl,0x8
c000b18e:	75 2c                	jne    c000b1bc <VgaText::receiveKey(unsigned char)+0x4e>
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	57                   	push   edi
c000b194:	e8 07 55 ff ff       	call   c00006a0 <strlen>
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	85 c0                	test   eax,eax
c000b19e:	74 41                	je     c000b1e1 <VgaText::receiveKey(unsigned char)+0x73>
c000b1a0:	50                   	push   eax
c000b1a1:	50                   	push   eax
c000b1a2:	6a 08                	push   0x8
c000b1a4:	56                   	push   esi
c000b1a5:	e8 ee fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b1aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1ad:	e8 ee 54 ff ff       	call   c00006a0 <strlen>
c000b1b2:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b1ba:	eb 22                	jmp    c000b1de <VgaText::receiveKey(unsigned char)+0x70>
c000b1bc:	0f be c3             	movsx  eax,bl
c000b1bf:	52                   	push   edx
c000b1c0:	52                   	push   edx
c000b1c1:	50                   	push   eax
c000b1c2:	56                   	push   esi
c000b1c3:	e8 d0 fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b1c8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b1cc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b1d1:	59                   	pop    ecx
c000b1d2:	5d                   	pop    ebp
c000b1d3:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b1d7:	50                   	push   eax
c000b1d8:	57                   	push   edi
c000b1d9:	e8 a2 56 ff ff       	call   c0000880 <strcat>
c000b1de:	83 c4 10             	add    esp,0x10
c000b1e1:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b1e8:	75 05                	jne    c000b1ef <VgaText::receiveKey(unsigned char)+0x81>
c000b1ea:	80 fb 0a             	cmp    bl,0xa
c000b1ed:	75 53                	jne    c000b242 <VgaText::receiveKey(unsigned char)+0xd4>
c000b1ef:	83 ec 0c             	sub    esp,0xc
c000b1f2:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b1f8:	53                   	push   ebx
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b201:	89 c5                	mov    ebp,eax
c000b203:	e8 98 54 ff ff       	call   c00006a0 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b20f:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b214:	76 10                	jbe    c000b226 <VgaText::receiveKey(unsigned char)+0xb8>
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	68 9f 45 02 c0       	push   0xc002459f
c000b21e:	e8 fc 95 00 00       	call   c001481f <Krnl::panic(char const*)>
c000b223:	83 c4 10             	add    esp,0x10
c000b226:	50                   	push   eax
c000b227:	50                   	push   eax
c000b228:	57                   	push   edi
c000b229:	53                   	push   ebx
c000b22a:	e8 51 56 ff ff       	call   c0000880 <strcat>
c000b22f:	83 c4 0c             	add    esp,0xc
c000b232:	68 96 00 00 00       	push   0x96
c000b237:	6a 00                	push   0x0
c000b239:	57                   	push   edi
c000b23a:	e8 45 54 ff ff       	call   c0000684 <memset>
c000b23f:	83 c4 10             	add    esp,0x10
c000b242:	83 ec 0c             	sub    esp,0xc
c000b245:	56                   	push   esi
c000b246:	e8 6d fa ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000b24b:	83 c4 10             	add    esp,0x10
c000b24e:	83 c4 1c             	add    esp,0x1c
c000b251:	5b                   	pop    ebx
c000b252:	5e                   	pop    esi
c000b253:	5f                   	pop    edi
c000b254:	5d                   	pop    ebp
c000b255:	c3                   	ret    

c000b256 <VgaText::write(unsigned long long, void*, int*)>:
c000b256:	55                   	push   ebp
c000b257:	57                   	push   edi
c000b258:	56                   	push   esi
c000b259:	53                   	push   ebx
c000b25a:	83 ec 0c             	sub    esp,0xc
c000b25d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b261:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b265:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b269:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b270:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b273:	39 eb                	cmp    ebx,ebp
c000b275:	74 13                	je     c000b28a <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b277:	43                   	inc    ebx
c000b278:	50                   	push   eax
c000b279:	50                   	push   eax
c000b27a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b27e:	50                   	push   eax
c000b27f:	56                   	push   esi
c000b280:	e8 13 fc ff ff       	call   c000ae98 <VgaText::putchar(char)>
c000b285:	83 c4 10             	add    esp,0x10
c000b288:	eb e9                	jmp    c000b273 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b294:	56                   	push   esi
c000b295:	e8 1e fa ff ff       	call   c000acb8 <VgaText::doUpdate()>
c000b29a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b29e:	89 38                	mov    DWORD PTR [eax],edi
c000b2a0:	83 c4 1c             	add    esp,0x1c
c000b2a3:	31 c0                	xor    eax,eax
c000b2a5:	5b                   	pop    ebx
c000b2a6:	5e                   	pop    esi
c000b2a7:	5f                   	pop    edi
c000b2a8:	5d                   	pop    ebp
c000b2a9:	c3                   	ret    

c000b2aa <newTerminal(char*)>:
c000b2aa:	83 ec 28             	sub    esp,0x28
c000b2ad:	68 c4 02 00 00       	push   0x2c4
c000b2b2:	e8 0c e7 ff ff       	call   c00099c3 <malloc>
c000b2b7:	5a                   	pop    edx
c000b2b8:	59                   	pop    ecx
c000b2b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b2bd:	50                   	push   eax
c000b2be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2c2:	e8 29 fd ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c000b2c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2cb:	83 c4 2c             	add    esp,0x2c
c000b2ce:	c3                   	ret    
c000b2cf:	90                   	nop

c000b2d0 <TSS::TSS()>:
c000b2d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b2db:	90                   	nop
c000b2dc:	c3                   	ret    
c000b2dd:	90                   	nop
c000b2de:	66 90                	xchg   ax,ax

c000b2e0 <TSS::setESP(unsigned long)>:
c000b2e0:	55                   	push   ebp
c000b2e1:	89 e5                	mov    ebp,esp
c000b2e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b2ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b2ef:	90                   	nop
c000b2f0:	5d                   	pop    ebp
c000b2f1:	c3                   	ret    
c000b2f2:	66 90                	xchg   ax,ax

c000b2f4 <TSS::flush()>:
c000b2f4:	55                   	push   ebp
c000b2f5:	89 e5                	mov    ebp,esp
c000b2f7:	83 ec 10             	sub    esp,0x10
c000b2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b2fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b2ff:	83 c8 03             	or     eax,0x3
c000b302:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b306:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b30a:	66 89 d0             	mov    ax,dx
c000b30d:	0f 00 d8             	ltr    ax
c000b310:	90                   	nop
c000b311:	c9                   	leave  
c000b312:	c3                   	ret    
c000b313:	90                   	nop

c000b314 <TSS::setup(unsigned long, unsigned long)>:
c000b314:	55                   	push   ebp
c000b315:	89 e5                	mov    ebp,esp
c000b317:	83 ec 18             	sub    esp,0x18
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	6a 68                	push   0x68
c000b31f:	e8 9f e6 ff ff       	call   c00099c3 <malloc>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	89 c2                	mov    edx,eax
c000b329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	83 ec 04             	sub    esp,0x4
c000b338:	6a 68                	push   0x68
c000b33a:	6a 00                	push   0x0
c000b33c:	50                   	push   eax
c000b33d:	e8 42 53 ff ff       	call   c0000684 <memset>
c000b342:	83 c4 10             	add    esp,0x10
c000b345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b34b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b357:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b35d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b363:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b366:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b36c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b36f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b387:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b393:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b39c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b3ba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3dc:	0f 20 da             	mov    edx,cr3
c000b3df:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b3e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b3e5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b3e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ee:	83 ec 08             	sub    esp,0x8
c000b3f1:	50                   	push   eax
c000b3f2:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b3f5:	50                   	push   eax
c000b3f6:	e8 25 de ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b3fb:	83 c4 10             	add    esp,0x10
c000b3fe:	83 ec 08             	sub    esp,0x8
c000b401:	6a 68                	push   0x68
c000b403:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b406:	50                   	push   eax
c000b407:	e8 30 de ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b40c:	83 c4 10             	add    esp,0x10
c000b40f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b413:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b416:	83 e0 0f             	and    eax,0xf
c000b419:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b41c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b41f:	83 c8 40             	or     eax,0x40
c000b422:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b425:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000b42a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b430:	05 78 01 00 00       	add    eax,0x178
c000b435:	83 ec 04             	sub    esp,0x4
c000b438:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b43b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b43e:	50                   	push   eax
c000b43f:	e8 2c de ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b444:	83 c4 10             	add    esp,0x10
c000b447:	89 c2                	mov    edx,eax
c000b449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b44c:	89 10                	mov    DWORD PTR [eax],edx
c000b44e:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000b453:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b459:	05 78 01 00 00       	add    eax,0x178
c000b45e:	83 ec 0c             	sub    esp,0xc
c000b461:	50                   	push   eax
c000b462:	e8 33 de ff ff       	call   c000929a <GDT::flush()>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b46d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b46f:	c9                   	leave  
c000b470:	c3                   	ret    
c000b471:	90                   	nop

c000b472 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b472:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b476:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b47a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b47d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b482:	75 08                	jne    c000b48c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b484:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b48a:	eb 38                	jmp    c000b4c4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b48c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b491:	75 17                	jne    c000b4aa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b493:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b498:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b49b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4a7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4aa:	89 c1                	mov    ecx,eax
c000b4ac:	83 e1 fd             	and    ecx,0xfffffffd
c000b4af:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4b5:	74 cd                	je     c000b484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4b7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b4bc:	83 e0 ef             	and    eax,0xffffffef
c000b4bf:	83 f8 08             	cmp    eax,0x8
c000b4c2:	76 c0                	jbe    c000b484 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4c4:	31 c0                	xor    eax,eax
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <ReservedFilename::isAtty()>:
c000b4c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b4cf:	31 c0                	xor    eax,eax
c000b4d1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b4d7:	74 09                	je     c000b4e2 <ReservedFilename::isAtty()+0x1a>
c000b4d9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b4df:	0f 94 c0             	sete   al
c000b4e2:	c3                   	ret    
c000b4e3:	90                   	nop

c000b4e4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b4e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b4ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4f3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4f8:	75 08                	jne    c000b502 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b4fa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b500:	eb 3d                	jmp    c000b53f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b502:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b507:	75 17                	jne    c000b520 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b50e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b511:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b517:	8b 10                	mov    edx,DWORD PTR [eax]
c000b519:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b51d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b520:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b525:	75 04                	jne    c000b52b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b527:	89 0a                	mov    DWORD PTR [edx],ecx
c000b529:	eb 14                	jmp    c000b53f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b52b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b530:	74 c8                	je     c000b4fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b532:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b537:	83 e0 ef             	and    eax,0xffffffef
c000b53a:	83 f8 08             	cmp    eax,0x8
c000b53d:	76 bb                	jbe    c000b4fa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b53f:	31 c0                	xor    eax,eax
c000b541:	c3                   	ret    

c000b542 <UnixFile::getFileDescriptor()>:
c000b542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b549:	c3                   	ret    

c000b54a <UnixFile::UnixFile(int)>:
c000b54a:	53                   	push   ebx
c000b54b:	83 ec 28             	sub    esp,0x28
c000b54e:	ba bc 46 02 c0       	mov    edx,0xc00246bc
c000b553:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b557:	89 10                	mov    DWORD PTR [eax],edx
c000b559:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b561:	0f 8f 8c 01 00 00    	jg     c000b6f3 <UnixFile::UnixFile(int)+0x1a9>
c000b567:	a1 c0 75 02 c0       	mov    eax,ds:0xc00275c0
c000b56c:	8d 50 01             	lea    edx,[eax+0x1]
c000b56f:	89 15 c0 75 02 c0    	mov    DWORD PTR ds:0xc00275c0,edx
c000b575:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b579:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b57c:	83 ec 08             	sub    esp,0x8
c000b57f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b583:	68 98 82 02 c0       	push   0xc0028298
c000b588:	e8 3f 77 01 00       	call   c0022ccc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b58d:	83 c4 10             	add    esp,0x10
c000b590:	a0 94 82 02 c0       	mov    al,ds:0xc0028294
c000b595:	83 f0 01             	xor    eax,0x1
c000b598:	84 c0                	test   al,al
c000b59a:	0f 84 54 01 00 00    	je     c000b6f4 <UnixFile::UnixFile(int)+0x1aa>
c000b5a0:	c6 05 94 82 02 c0 01 	mov    BYTE PTR ds:0xc0028294,0x1
c000b5a7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5b6:	e8 08 e4 ff ff       	call   c00099c3 <malloc>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	89 c3                	mov    ebx,eax
c000b5c0:	83 ec 08             	sub    esp,0x8
c000b5c3:	68 03 ff ff 0f       	push   0xfffff03
c000b5c8:	53                   	push   ebx
c000b5c9:	e8 2c 01 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b5ce:	83 c4 10             	add    esp,0x10
c000b5d1:	89 1d 8c 82 02 c0    	mov    DWORD PTR ds:0xc002828c,ebx
c000b5d7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b5df:	83 ec 0c             	sub    esp,0xc
c000b5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e6:	e8 d8 e3 ff ff       	call   c00099c3 <malloc>
c000b5eb:	83 c4 10             	add    esp,0x10
c000b5ee:	89 c3                	mov    ebx,eax
c000b5f0:	83 ec 08             	sub    esp,0x8
c000b5f3:	68 01 ff ff 0f       	push   0xfffff01
c000b5f8:	53                   	push   ebx
c000b5f9:	e8 fc 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b5fe:	83 c4 10             	add    esp,0x10
c000b601:	89 1d 90 82 02 c0    	mov    DWORD PTR ds:0xc0028290,ebx
c000b607:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b60f:	83 ec 0c             	sub    esp,0xc
c000b612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b616:	e8 a8 e3 ff ff       	call   c00099c3 <malloc>
c000b61b:	83 c4 10             	add    esp,0x10
c000b61e:	89 c3                	mov    ebx,eax
c000b620:	83 ec 08             	sub    esp,0x8
c000b623:	68 00 ff ff 0f       	push   0xfffff00
c000b628:	53                   	push   ebx
c000b629:	e8 cc 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 1d 84 82 02 c0    	mov    DWORD PTR ds:0xc0028284,ebx
c000b637:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b63f:	83 ec 0c             	sub    esp,0xc
c000b642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b646:	e8 78 e3 ff ff       	call   c00099c3 <malloc>
c000b64b:	83 c4 10             	add    esp,0x10
c000b64e:	89 c3                	mov    ebx,eax
c000b650:	83 ec 08             	sub    esp,0x8
c000b653:	68 02 ff ff 0f       	push   0xfffff02
c000b658:	53                   	push   ebx
c000b659:	e8 9c 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b65e:	83 c4 10             	add    esp,0x10
c000b661:	89 1d 88 82 02 c0    	mov    DWORD PTR ds:0xc0028288,ebx
c000b667:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b66f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b674:	7f 7e                	jg     c000b6f4 <UnixFile::UnixFile(int)+0x1aa>
c000b676:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b67e:	83 ec 0c             	sub    esp,0xc
c000b681:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b685:	e8 39 e3 ff ff       	call   c00099c3 <malloc>
c000b68a:	83 c4 10             	add    esp,0x10
c000b68d:	89 c3                	mov    ebx,eax
c000b68f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b693:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b698:	83 ec 08             	sub    esp,0x8
c000b69b:	50                   	push   eax
c000b69c:	53                   	push   ebx
c000b69d:	e8 58 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b6a2:	83 c4 10             	add    esp,0x10
c000b6a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6a9:	89 1c 85 60 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7da0],ebx
c000b6b0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bf:	e8 ff e2 ff ff       	call   c00099c3 <malloc>
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	89 c3                	mov    ebx,eax
c000b6c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6cd:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b6d2:	83 ec 08             	sub    esp,0x8
c000b6d5:	50                   	push   eax
c000b6d6:	53                   	push   ebx
c000b6d7:	e8 1e 00 00 00       	call   c000b6fa <ReservedFilename::ReservedFilename(int)>
c000b6dc:	83 c4 10             	add    esp,0x10
c000b6df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6e3:	89 1c 85 20 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7de0],ebx
c000b6ea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b6ee:	e9 7c ff ff ff       	jmp    c000b66f <UnixFile::UnixFile(int)+0x125>
c000b6f3:	90                   	nop
c000b6f4:	83 c4 28             	add    esp,0x28
c000b6f7:	5b                   	pop    ebx
c000b6f8:	c3                   	ret    
c000b6f9:	90                   	nop

c000b6fa <ReservedFilename::ReservedFilename(int)>:
c000b6fa:	83 ec 0c             	sub    esp,0xc
c000b6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b701:	83 ec 08             	sub    esp,0x8
c000b704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b708:	50                   	push   eax
c000b709:	e8 3c fe ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000b70e:	83 c4 10             	add    esp,0x10
c000b711:	ba d8 46 02 c0       	mov    edx,0xc00246d8
c000b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71a:	89 10                	mov    DWORD PTR [eax],edx
c000b71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b720:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b724:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b727:	90                   	nop
c000b728:	83 c4 0c             	add    esp,0xc
c000b72b:	c3                   	ret    

c000b72c <UnixFile::~UnixFile()>:
c000b72c:	83 ec 1c             	sub    esp,0x1c
c000b72f:	ba bc 46 02 c0       	mov    edx,0xc00246bc
c000b734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b738:	89 10                	mov    DWORD PTR [eax],edx
c000b73a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b741:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b746:	7f 73                	jg     c000b7bb <UnixFile::~UnixFile()+0x8f>
c000b748:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	68 98 82 02 c0       	push   0xc0028298
c000b758:	e8 43 76 01 00       	call   c0022da0 <LinkedList<UnixFile>::getFirstElement()>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	68 98 82 02 c0       	push   0xc0028298
c000b76c:	e8 37 76 01 00       	call   c0022da8 <LinkedList<UnixFile>::removeFirst()>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b778:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b77c:	74 40                	je     c000b7be <UnixFile::~UnixFile()+0x92>
c000b77e:	83 ec 08             	sub    esp,0x8
c000b781:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b785:	68 98 82 02 c0       	push   0xc0028298
c000b78a:	e8 3d 75 01 00       	call   c0022ccc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b78f:	83 c4 10             	add    esp,0x10
c000b792:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b796:	8d 50 01             	lea    edx,[eax+0x1]
c000b799:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b79d:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7a2:	0f 94 c0             	sete   al
c000b7a5:	84 c0                	test   al,al
c000b7a7:	74 a7                	je     c000b750 <UnixFile::~UnixFile()+0x24>
c000b7a9:	83 ec 0c             	sub    esp,0xc
c000b7ac:	68 94 46 02 c0       	push   0xc0024694
c000b7b1:	e8 69 90 00 00       	call   c001481f <Krnl::panic(char const*)>
c000b7b6:	83 c4 10             	add    esp,0x10
c000b7b9:	eb 95                	jmp    c000b750 <UnixFile::~UnixFile()+0x24>
c000b7bb:	90                   	nop
c000b7bc:	eb 01                	jmp    c000b7bf <UnixFile::~UnixFile()+0x93>
c000b7be:	90                   	nop
c000b7bf:	90                   	nop
c000b7c0:	83 c4 1c             	add    esp,0x1c
c000b7c3:	c3                   	ret    

c000b7c4 <UnixFile::~UnixFile()>:
c000b7c4:	83 ec 0c             	sub    esp,0xc
c000b7c7:	83 ec 0c             	sub    esp,0xc
c000b7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ce:	e8 59 ff ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000b7d3:	83 c4 10             	add    esp,0x10
c000b7d6:	83 ec 08             	sub    esp,0x8
c000b7d9:	6a 0c                	push   0xc
c000b7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7df:	e8 ee 13 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000b7e4:	83 c4 10             	add    esp,0x10
c000b7e7:	83 c4 0c             	add    esp,0xc
c000b7ea:	c3                   	ret    
c000b7eb:	90                   	nop

c000b7ec <ReservedFilename::~ReservedFilename()>:
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	ba d8 46 02 c0       	mov    edx,0xc00246d8
c000b7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f8:	89 10                	mov    DWORD PTR [eax],edx
c000b7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fe:	83 ec 0c             	sub    esp,0xc
c000b801:	50                   	push   eax
c000b802:	e8 25 ff ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000b807:	83 c4 10             	add    esp,0x10
c000b80a:	90                   	nop
c000b80b:	83 c4 0c             	add    esp,0xc
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <ReservedFilename::~ReservedFilename()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 cd ff ff ff       	call   c000b7ec <ReservedFilename::~ReservedFilename()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 a2 13 00 00       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    

c000b837 <getFromFileDescriptor(int)>:
c000b837:	53                   	push   ebx
c000b838:	83 ec 08             	sub    esp,0x8
c000b83b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b83f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b845:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b84b:	7f 2c                	jg     c000b879 <getFromFileDescriptor(int)+0x42>
c000b84d:	83 ec 0c             	sub    esp,0xc
c000b850:	68 98 82 02 c0       	push   0xc0028298
c000b855:	e8 46 75 01 00       	call   c0022da0 <LinkedList<UnixFile>::getFirstElement()>
c000b85a:	83 c4 10             	add    esp,0x10
c000b85d:	85 c0                	test   eax,eax
c000b85f:	75 04                	jne    c000b865 <getFromFileDescriptor(int)+0x2e>
c000b861:	31 c0                	xor    eax,eax
c000b863:	eb 6e                	jmp    c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b865:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b868:	74 69                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b86a:	52                   	push   edx
c000b86b:	52                   	push   edx
c000b86c:	50                   	push   eax
c000b86d:	68 98 82 02 c0       	push   0xc0028298
c000b872:	e8 d3 75 01 00       	call   c0022e4a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b877:	eb e1                	jmp    c000b85a <getFromFileDescriptor(int)+0x23>
c000b879:	a1 8c 82 02 c0       	mov    eax,ds:0xc002828c
c000b87e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b884:	74 4d                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b886:	a1 90 82 02 c0       	mov    eax,ds:0xc0028290
c000b88b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b891:	74 40                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b893:	a1 88 82 02 c0       	mov    eax,ds:0xc0028288
c000b898:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b89e:	74 33                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8a0:	a1 84 82 02 c0       	mov    eax,ds:0xc0028284
c000b8a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8ab:	74 26                	je     c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8b3:	83 f8 08             	cmp    eax,0x8
c000b8b6:	77 09                	ja     c000b8c1 <getFromFileDescriptor(int)+0x8a>
c000b8b8:	8b 04 85 60 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7da0]
c000b8bf:	eb 12                	jmp    c000b8d3 <getFromFileDescriptor(int)+0x9c>
c000b8c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b8c7:	83 fb 08             	cmp    ebx,0x8
c000b8ca:	77 95                	ja     c000b861 <getFromFileDescriptor(int)+0x2a>
c000b8cc:	8b 04 9d 20 82 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7de0]
c000b8d3:	83 c4 08             	add    esp,0x8
c000b8d6:	5b                   	pop    ebx
c000b8d7:	c3                   	ret    

c000b8d8 <__static_initialization_and_destruction_0(int, int)>:
c000b8d8:	83 ec 0c             	sub    esp,0xc
c000b8db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b8e0:	75 34                	jne    c000b916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b8e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b8ea:	75 2a                	jne    c000b916 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b8ec:	83 ec 0c             	sub    esp,0xc
c000b8ef:	68 98 82 02 c0       	push   0xc0028298
c000b8f4:	e8 91 73 01 00       	call   c0022c8a <LinkedList<UnixFile>::LinkedList()>
c000b8f9:	83 c4 10             	add    esp,0x10
c000b8fc:	83 ec 04             	sub    esp,0x4
c000b8ff:	68 ec 73 02 c0       	push   0xc00273ec
c000b904:	68 98 82 02 c0       	push   0xc0028298
c000b909:	68 88 2c 02 c0       	push   0xc0022c88
c000b90e:	e8 39 12 00 00       	call   c000cb4c <__cxa_atexit>
c000b913:	83 c4 10             	add    esp,0x10
c000b916:	90                   	nop
c000b917:	83 c4 0c             	add    esp,0xc
c000b91a:	c3                   	ret    

c000b91b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	83 ec 08             	sub    esp,0x8
c000b921:	68 ff ff 00 00       	push   0xffff
c000b926:	6a 01                	push   0x1
c000b928:	e8 ab ff ff ff       	call   c000b8d8 <__static_initialization_and_destruction_0(int, int)>
c000b92d:	83 c4 10             	add    esp,0x10
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	c3                   	ret    

c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b934:	53                   	push   ebx
c000b935:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b939:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b93d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b943:	89 c8                	mov    eax,ecx
c000b945:	d1 e8                	shr    eax,1
c000b947:	03 05 c8 75 02 c0    	add    eax,DWORD PTR ds:0xc00275c8
c000b94d:	83 e1 01             	and    ecx,0x1
c000b950:	8a 10                	mov    dl,BYTE PTR [eax]
c000b952:	75 09                	jne    c000b95d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b954:	83 e2 f0             	and    edx,0xfffffff0
c000b957:	09 da                	or     edx,ebx
c000b959:	88 10                	mov    BYTE PTR [eax],dl
c000b95b:	5b                   	pop    ebx
c000b95c:	c3                   	ret    
c000b95d:	c1 e3 04             	shl    ebx,0x4
c000b960:	83 e2 0f             	and    edx,0xf
c000b963:	09 da                	or     edx,ebx
c000b965:	88 10                	mov    BYTE PTR [eax],dl
c000b967:	5b                   	pop    ebx
c000b968:	c3                   	ret    

c000b969 <Virt::getPageState(unsigned long)>:
c000b969:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b96d:	8b 0d c8 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275c8
c000b973:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b979:	89 d0                	mov    eax,edx
c000b97b:	d1 e8                	shr    eax,1
c000b97d:	83 e2 01             	and    edx,0x1
c000b980:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b983:	75 04                	jne    c000b989 <Virt::getPageState(unsigned long)+0x20>
c000b985:	83 e0 0f             	and    eax,0xf
c000b988:	c3                   	ret    
c000b989:	c0 e8 04             	shr    al,0x4
c000b98c:	c3                   	ret    

c000b98d <Virt::allocateKernelVirtualPages(int)>:
c000b98d:	55                   	push   ebp
c000b98e:	31 ed                	xor    ebp,ebp
c000b990:	57                   	push   edi
c000b991:	56                   	push   esi
c000b992:	53                   	push   ebx
c000b993:	31 db                	xor    ebx,ebx
c000b995:	83 ec 1c             	sub    esp,0x1c
c000b998:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b99c:	8b 3d c4 75 02 c0    	mov    edi,DWORD PTR ds:0xc00275c4
c000b9a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9a7:	57                   	push   edi
c000b9a8:	e8 bc ff ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000b9ad:	5a                   	pop    edx
c000b9ae:	84 c0                	test   al,al
c000b9b0:	75 3a                	jne    c000b9ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9b2:	85 db                	test   ebx,ebx
c000b9b4:	75 02                	jne    c000b9b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9b6:	89 fd                	mov    ebp,edi
c000b9b8:	43                   	inc    ebx
c000b9b9:	39 f3                	cmp    ebx,esi
c000b9bb:	74 5a                	je     c000ba17 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b9bd:	47                   	inc    edi
c000b9be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b9c4:	76 31                	jbe    c000b9f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b9c6:	c7 05 c4 75 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00275c4,0xc8000
c000b9d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b9d5:	75 28                	jne    c000b9ff <Virt::allocateKernelVirtualPages(int)+0x72>
c000b9d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b9dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b9e1:	57                   	push   edi
c000b9e2:	e8 82 ff ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000b9e7:	5a                   	pop    edx
c000b9e8:	84 c0                	test   al,al
c000b9ea:	74 c6                	je     c000b9b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b9ec:	31 db                	xor    ebx,ebx
c000b9ee:	47                   	inc    edi
c000b9ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b9f5:	77 cf                	ja     c000b9c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b9f7:	89 3d c4 75 02 c0    	mov    DWORD PTR ds:0xc00275c4,edi
c000b9fd:	eb a8                	jmp    c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b9ff:	83 ec 0c             	sub    esp,0xc
c000ba02:	68 ec 46 02 c0       	push   0xc00246ec
c000ba07:	e8 13 8e 00 00       	call   c001481f <Krnl::panic(char const*)>
c000ba0c:	8b 3d c4 75 02 c0    	mov    edi,DWORD PTR ds:0xc00275c4
c000ba12:	83 c4 10             	add    esp,0x10
c000ba15:	eb 90                	jmp    c000b9a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba17:	89 2d c4 75 02 c0    	mov    DWORD PTR ds:0xc00275c4,ebp
c000ba1d:	4b                   	dec    ebx
c000ba1e:	74 5f                	je     c000ba7f <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba20:	85 f6                	test   esi,esi
c000ba22:	74 3d                	je     c000ba61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba24:	89 e8                	mov    eax,ebp
c000ba26:	31 db                	xor    ebx,ebx
c000ba28:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba2b:	eb 14                	jmp    c000ba41 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba2d:	6a 01                	push   0x1
c000ba2f:	43                   	inc    ebx
c000ba30:	50                   	push   eax
c000ba31:	e8 fe fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba36:	58                   	pop    eax
c000ba37:	39 f3                	cmp    ebx,esi
c000ba39:	5a                   	pop    edx
c000ba3a:	74 25                	je     c000ba61 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba3c:	a1 c4 75 02 c0       	mov    eax,ds:0xc00275c4
c000ba41:	8d 50 01             	lea    edx,[eax+0x1]
c000ba44:	85 db                	test   ebx,ebx
c000ba46:	89 15 c4 75 02 c0    	mov    DWORD PTR ds:0xc00275c4,edx
c000ba4c:	74 20                	je     c000ba6e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba4e:	39 df                	cmp    edi,ebx
c000ba50:	75 db                	jne    c000ba2d <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba52:	6a 03                	push   0x3
c000ba54:	43                   	inc    ebx
c000ba55:	50                   	push   eax
c000ba56:	e8 d9 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba5b:	59                   	pop    ecx
c000ba5c:	39 f3                	cmp    ebx,esi
c000ba5e:	58                   	pop    eax
c000ba5f:	75 db                	jne    c000ba3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba61:	83 c4 1c             	add    esp,0x1c
c000ba64:	89 e8                	mov    eax,ebp
c000ba66:	5b                   	pop    ebx
c000ba67:	c1 e0 0c             	shl    eax,0xc
c000ba6a:	5e                   	pop    esi
c000ba6b:	5f                   	pop    edi
c000ba6c:	5d                   	pop    ebp
c000ba6d:	c3                   	ret    
c000ba6e:	6a 02                	push   0x2
c000ba70:	bb 01 00 00 00       	mov    ebx,0x1
c000ba75:	50                   	push   eax
c000ba76:	e8 b9 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7b:	58                   	pop    eax
c000ba7c:	5a                   	pop    edx
c000ba7d:	eb bd                	jmp    c000ba3c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000ba7f:	6a 04                	push   0x4
c000ba81:	8d 45 01             	lea    eax,[ebp+0x1]
c000ba84:	55                   	push   ebp
c000ba85:	a3 c4 75 02 c0       	mov    ds:0xc00275c4,eax
c000ba8a:	e8 a5 fe ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba8f:	59                   	pop    ecx
c000ba90:	89 e8                	mov    eax,ebp
c000ba92:	5b                   	pop    ebx
c000ba93:	c1 e0 0c             	shl    eax,0xc
c000ba96:	83 c4 1c             	add    esp,0x1c
c000ba99:	5b                   	pop    ebx
c000ba9a:	5e                   	pop    esi
c000ba9b:	5f                   	pop    edi
c000ba9c:	5d                   	pop    ebp
c000ba9d:	c3                   	ret    

c000ba9e <Virt::freeSwapfilePage(unsigned long)>:
c000ba9e:	53                   	push   ebx
c000ba9f:	8b 15 ac 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282ac
c000baa5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baa9:	b8 01 00 00 00       	mov    eax,0x1
c000baae:	89 cb                	mov    ebx,ecx
c000bab0:	d3 e0                	shl    eax,cl
c000bab2:	c1 eb 05             	shr    ebx,0x5
c000bab5:	f7 d0                	not    eax
c000bab7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000baba:	5b                   	pop    ebx
c000babb:	c3                   	ret    

c000babc <Virt::swapIDToSector(unsigned long)>:
c000babc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bac0:	0f af 05 cc 75 02 c0 	imul   eax,DWORD PTR ds:0xc00275cc
c000bac7:	03 05 d4 75 02 c0    	add    eax,DWORD PTR ds:0xc00275d4
c000bacd:	c3                   	ret    

c000bace <Virt::allocateSwapfilePage()>:
c000bace:	55                   	push   ebp
c000bacf:	31 d2                	xor    edx,edx
c000bad1:	57                   	push   edi
c000bad2:	56                   	push   esi
c000bad3:	53                   	push   ebx
c000bad4:	83 ec 0c             	sub    esp,0xc
c000bad7:	8b 0d cc 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275cc
c000badd:	a1 d0 75 02 c0       	mov    eax,ds:0xc00275d0
c000bae2:	f7 f1                	div    ecx
c000bae4:	39 0d d0 75 02 c0    	cmp    DWORD PTR ds:0xc00275d0,ecx
c000baea:	72 2d                	jb     c000bb19 <Virt::allocateSwapfilePage()+0x4b>
c000baec:	8b 35 ac 82 02 c0    	mov    esi,DWORD PTR ds:0xc00282ac
c000baf2:	8b 16                	mov    edx,DWORD PTR [esi]
c000baf4:	f6 c2 01             	test   dl,0x1
c000baf7:	74 3c                	je     c000bb35 <Virt::allocateSwapfilePage()+0x67>
c000baf9:	31 c9                	xor    ecx,ecx
c000bafb:	bf 01 00 00 00       	mov    edi,0x1
c000bb00:	eb 12                	jmp    c000bb14 <Virt::allocateSwapfilePage()+0x46>
c000bb02:	89 fd                	mov    ebp,edi
c000bb04:	89 ca                	mov    edx,ecx
c000bb06:	d3 e5                	shl    ebp,cl
c000bb08:	c1 ea 05             	shr    edx,0x5
c000bb0b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb0e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb10:	85 ea                	test   edx,ebp
c000bb12:	74 2a                	je     c000bb3e <Virt::allocateSwapfilePage()+0x70>
c000bb14:	41                   	inc    ecx
c000bb15:	39 c8                	cmp    eax,ecx
c000bb17:	77 e9                	ja     c000bb02 <Virt::allocateSwapfilePage()+0x34>
c000bb19:	83 ec 0c             	sub    esp,0xc
c000bb1c:	68 a4 48 02 c0       	push   0xc00248a4
c000bb21:	e8 f9 8c 00 00       	call   c001481f <Krnl::panic(char const*)>
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	31 c9                	xor    ecx,ecx
c000bb2b:	83 c4 0c             	add    esp,0xc
c000bb2e:	89 c8                	mov    eax,ecx
c000bb30:	5b                   	pop    ebx
c000bb31:	5e                   	pop    esi
c000bb32:	5f                   	pop    edi
c000bb33:	5d                   	pop    ebp
c000bb34:	c3                   	ret    
c000bb35:	89 f3                	mov    ebx,esi
c000bb37:	bd 01 00 00 00       	mov    ebp,0x1
c000bb3c:	31 c9                	xor    ecx,ecx
c000bb3e:	09 ea                	or     edx,ebp
c000bb40:	89 c8                	mov    eax,ecx
c000bb42:	89 13                	mov    DWORD PTR [ebx],edx
c000bb44:	83 c4 0c             	add    esp,0xc
c000bb47:	5b                   	pop    ebx
c000bb48:	5e                   	pop    esi
c000bb49:	5f                   	pop    edi
c000bb4a:	5d                   	pop    ebp
c000bb4b:	c3                   	ret    

c000bb4c <Virt::virtualMemorySetup()>:
c000bb4c:	53                   	push   ebx
c000bb4d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb52:	6a 0f                	push   0xf
c000bb54:	53                   	push   ebx
c000bb55:	43                   	inc    ebx
c000bb56:	e8 d9 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb5b:	58                   	pop    eax
c000bb5c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb62:	5a                   	pop    edx
c000bb63:	75 ed                	jne    c000bb52 <Virt::virtualMemorySetup()+0x6>
c000bb65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb6a:	6a 00                	push   0x0
c000bb6c:	53                   	push   ebx
c000bb6d:	43                   	inc    ebx
c000bb6e:	e8 c1 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb73:	59                   	pop    ecx
c000bb74:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bb7a:	58                   	pop    eax
c000bb7b:	75 ed                	jne    c000bb6a <Virt::virtualMemorySetup()+0x1e>
c000bb7d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bb82:	6a 0f                	push   0xf
c000bb84:	53                   	push   ebx
c000bb85:	43                   	inc    ebx
c000bb86:	e8 a9 fd ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb8b:	58                   	pop    eax
c000bb8c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bb92:	5a                   	pop    edx
c000bb93:	75 ed                	jne    c000bb82 <Virt::virtualMemorySetup()+0x36>
c000bb95:	5b                   	pop    ebx
c000bb96:	c3                   	ret    

c000bb97 <Virt::setupPageSwapping(int)>:
c000bb97:	53                   	push   ebx
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bb9f:	a1 48 87 02 c0       	mov    eax,ds:0xc0028748
c000bba4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbaa:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbac:	53                   	push   ebx
c000bbad:	c1 e3 0b             	shl    ebx,0xb
c000bbb0:	68 bb 48 02 c0       	push   0xc00248bb
c000bbb5:	50                   	push   eax
c000bbb6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bbb9:	89 1d d0 75 02 c0    	mov    DWORD PTR ds:0xc00275d0,ebx
c000bbbf:	c6 05 d8 75 02 c0 43 	mov    BYTE PTR ds:0xc00275d8,0x43
c000bbc6:	c1 eb 08             	shr    ebx,0x8
c000bbc9:	a3 d4 75 02 c0       	mov    ds:0xc00275d4,eax
c000bbce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bbd1:	c7 05 cc 75 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00275cc,0x8
c000bbdb:	e8 e3 dd ff ff       	call   c00099c3 <malloc>
c000bbe0:	83 c4 0c             	add    esp,0xc
c000bbe3:	89 c1                	mov    ecx,eax
c000bbe5:	a3 ac 82 02 c0       	mov    ds:0xc00282ac,eax
c000bbea:	31 d2                	xor    edx,edx
c000bbec:	a1 d0 75 02 c0       	mov    eax,ds:0xc00275d0
c000bbf1:	f7 35 cc 75 02 c0    	div    DWORD PTR ds:0xc00275cc
c000bbf7:	c1 e8 05             	shr    eax,0x5
c000bbfa:	50                   	push   eax
c000bbfb:	6a 00                	push   0x0
c000bbfd:	51                   	push   ecx
c000bbfe:	e8 81 4a ff ff       	call   c0000684 <memset>
c000bc03:	83 c4 18             	add    esp,0x18
c000bc06:	5b                   	pop    ebx
c000bc07:	c3                   	ret    

c000bc08 <VAS::VAS()>:
c000bc08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc17:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc22:	a3 b0 82 02 c0       	mov    ds:0xc00282b0,eax
c000bc27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc2b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc33:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc3a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc41:	90                   	nop
c000bc42:	c3                   	ret    
c000bc43:	90                   	nop

c000bc44 <VAS::VAS(VAS*)>:
c000bc44:	83 ec 0c             	sub    esp,0xc
c000bc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc56:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc5d:	83 ec 0c             	sub    esp,0xc
c000bc60:	68 0c 47 02 c0       	push   0xc002470c
c000bc65:	e8 b5 8b 00 00       	call   c001481f <Krnl::panic(char const*)>
c000bc6a:	83 c4 10             	add    esp,0x10
c000bc6d:	90                   	nop
c000bc6e:	83 c4 0c             	add    esp,0xc
c000bc71:	c3                   	ret    

c000bc72 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bc72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc76:	89 c2                	mov    edx,eax
c000bc78:	c1 e8 0a             	shr    eax,0xa
c000bc7b:	c1 ea 16             	shr    edx,0x16
c000bc7e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bc83:	19 c9                	sbb    ecx,ecx
c000bc85:	c1 e2 0c             	shl    edx,0xc
c000bc88:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bc8e:	25 fc 0f 00 00       	and    eax,0xffc
c000bc93:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bc9a:	01 d0                	add    eax,edx
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <VAS::getPageTableEntry(unsigned long)>:
c000bc9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bca2:	89 ca                	mov    edx,ecx
c000bca4:	c1 e9 0a             	shr    ecx,0xa
c000bca7:	c1 ea 16             	shr    edx,0x16
c000bcaa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcb0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcb6:	c1 e0 0c             	shl    eax,0xc
c000bcb9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bcbc:	c3                   	ret    

c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>:
c000bcbd:	57                   	push   edi
c000bcbe:	56                   	push   esi
c000bcbf:	be 01 00 00 00       	mov    esi,0x1
c000bcc4:	53                   	push   ebx
c000bcc5:	83 ec 10             	sub    esp,0x10
c000bcc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bccc:	c1 eb 0c             	shr    ebx,0xc
c000bccf:	eb 3f                	jmp    c000bd10 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bcd1:	83 ec 08             	sub    esp,0x8
c000bcd4:	57                   	push   edi
c000bcd5:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c000bcdb:	e8 be ff ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000bce0:	83 c4 10             	add    esp,0x10
c000bce3:	8b 00                	mov    eax,DWORD PTR [eax]
c000bce5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bce9:	f6 c4 04             	test   ah,0x4
c000bcec:	75 5f                	jne    c000bd4d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bcee:	80 fa 04             	cmp    dl,0x4
c000bcf1:	74 78                	je     c000bd6b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bcf3:	80 fa 02             	cmp    dl,0x2
c000bcf6:	0f 84 88 00 00 00    	je     c000bd84 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bcfc:	80 fa 03             	cmp    dl,0x3
c000bcff:	0f 84 ad 00 00 00    	je     c000bdb2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd05:	fe ca                	dec    dl
c000bd07:	0f 84 92 00 00 00    	je     c000bd9f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd0d:	43                   	inc    ebx
c000bd0e:	31 f6                	xor    esi,esi
c000bd10:	53                   	push   ebx
c000bd11:	89 df                	mov    edi,ebx
c000bd13:	e8 51 fc ff ff       	call   c000b969 <Virt::getPageState(unsigned long)>
c000bd18:	c1 e7 0c             	shl    edi,0xc
c000bd1b:	59                   	pop    ecx
c000bd1c:	84 c0                	test   al,al
c000bd1e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd22:	75 ad                	jne    c000bcd1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd24:	83 ec 0c             	sub    esp,0xc
c000bd27:	68 d2 48 02 c0       	push   0xc00248d2
c000bd2c:	e8 ee 8a 00 00       	call   c001481f <Krnl::panic(char const*)>
c000bd31:	58                   	pop    eax
c000bd32:	5a                   	pop    edx
c000bd33:	57                   	push   edi
c000bd34:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c000bd3a:	e8 5f ff ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000bd3f:	83 c4 10             	add    esp,0x10
c000bd42:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd44:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd48:	f6 c4 04             	test   ah,0x4
c000bd4b:	74 c0                	je     c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd4d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd51:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	50                   	push   eax
c000bd5a:	e8 98 e2 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bd5f:	83 c4 10             	add    esp,0x10
c000bd62:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd66:	80 fa 04             	cmp    dl,0x4
c000bd69:	75 88                	jne    c000bcf3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bd6b:	89 f0                	mov    eax,esi
c000bd6d:	84 c0                	test   al,al
c000bd6f:	75 47                	jne    c000bdb8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bd71:	c7 44 24 20 30 47 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024730
c000bd79:	83 c4 10             	add    esp,0x10
c000bd7c:	5b                   	pop    ebx
c000bd7d:	5e                   	pop    esi
c000bd7e:	5f                   	pop    edi
c000bd7f:	e9 9b 8a 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c000bd84:	89 f0                	mov    eax,esi
c000bd86:	84 c0                	test   al,al
c000bd88:	75 15                	jne    c000bd9f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd8a:	83 ec 0c             	sub    esp,0xc
c000bd8d:	68 ee 48 02 c0       	push   0xc00248ee
c000bd92:	e8 88 8a 00 00       	call   c001481f <Krnl::panic(char const*)>
c000bd97:	83 c4 10             	add    esp,0x10
c000bd9a:	e9 6e ff ff ff       	jmp    c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd9f:	83 ec 08             	sub    esp,0x8
c000bda2:	6a 00                	push   0x0
c000bda4:	53                   	push   ebx
c000bda5:	e8 8a fb ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdaa:	83 c4 10             	add    esp,0x10
c000bdad:	e9 5b ff ff ff       	jmp    c000bd0d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdb2:	89 f0                	mov    eax,esi
c000bdb4:	84 c0                	test   al,al
c000bdb6:	75 15                	jne    c000bdcd <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bdb8:	83 ec 08             	sub    esp,0x8
c000bdbb:	6a 00                	push   0x0
c000bdbd:	53                   	push   ebx
c000bdbe:	e8 71 fb ff ff       	call   c000b934 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdc3:	83 c4 10             	add    esp,0x10
c000bdc6:	83 c4 10             	add    esp,0x10
c000bdc9:	5b                   	pop    ebx
c000bdca:	5e                   	pop    esi
c000bdcb:	5f                   	pop    edi
c000bdcc:	c3                   	ret    
c000bdcd:	c7 44 24 20 0a 49 02 c0 	mov    DWORD PTR [esp+0x20],0xc002490a
c000bdd5:	83 c4 10             	add    esp,0x10
c000bdd8:	5b                   	pop    ebx
c000bdd9:	5e                   	pop    esi
c000bdda:	5f                   	pop    edi
c000bddb:	e9 3f 8a 00 00       	jmp    c001481f <Krnl::panic(char const*)>

c000bde0 <VAS::freeAllocatedPages(unsigned long)>:
c000bde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bde8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bdec:	74 09                	je     c000bdf7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bdee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bdf2:	e9 c6 fe ff ff       	jmp    c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000bdf7:	c7 44 24 04 54 47 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024754
c000bdff:	e9 af 0e 00 00       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>

c000be04 <VAS::virtualToPhysical(unsigned long)>:
c000be04:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be08:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be0c:	e8 8d fe ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000be11:	5a                   	pop    edx
c000be12:	8b 00                	mov    eax,DWORD PTR [eax]
c000be14:	59                   	pop    ecx
c000be15:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be1a:	c3                   	ret    
c000be1b:	90                   	nop

c000be1c <VAS::reflagRange(unsigned long, int, int, int)>:
c000be1c:	55                   	push   ebp
c000be1d:	57                   	push   edi
c000be1e:	56                   	push   esi
c000be1f:	53                   	push   ebx
c000be20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be24:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be2c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be30:	85 db                	test   ebx,ebx
c000be32:	7e 22                	jle    c000be56 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be34:	c1 e3 0c             	shl    ebx,0xc
c000be37:	01 f3                	add    ebx,esi
c000be39:	56                   	push   esi
c000be3a:	81 c6 00 10 00 00    	add    esi,0x1000
c000be40:	55                   	push   ebp
c000be41:	e8 58 fe ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000be46:	5a                   	pop    edx
c000be47:	59                   	pop    ecx
c000be48:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be4a:	21 f9                	and    ecx,edi
c000be4c:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be50:	39 f3                	cmp    ebx,esi
c000be52:	89 08                	mov    DWORD PTR [eax],ecx
c000be54:	75 e3                	jne    c000be39 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be56:	5b                   	pop    ebx
c000be57:	5e                   	pop    esi
c000be58:	5f                   	pop    edi
c000be59:	5d                   	pop    ebp
c000be5a:	c3                   	ret    
c000be5b:	90                   	nop

c000be5c <VAS::setToWriteCombining(unsigned long, int)>:
c000be5c:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000be61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000be67:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000be6e:	75 01                	jne    c000be71 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000be70:	c3                   	ret    
c000be71:	68 80 00 00 00       	push   0x80
c000be76:	6a ff                	push   0xffffffff
c000be78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be84:	e8 93 ff ff ff       	call   c000be1c <VAS::reflagRange(unsigned long, int, int, int)>
c000be89:	83 c4 14             	add    esp,0x14
c000be8c:	c3                   	ret    
c000be8d:	90                   	nop

c000be8e <VAS::mapOtherVASIn(bool, VAS*)>:
c000be8e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000be93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be97:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000be9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be9e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bea1:	19 c0                	sbb    eax,eax
c000bea3:	83 ca 03             	or     edx,0x3
c000bea6:	83 e0 fc             	and    eax,0xfffffffc
c000bea9:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000beb0:	0f 20 d8             	mov    eax,cr3
c000beb3:	0f 22 d8             	mov    cr3,eax
c000beb6:	c3                   	ret    
c000beb7:	90                   	nop

c000beb8 <VAS::~VAS()>:
c000beb8:	83 ec 2c             	sub    esp,0x2c
c000bebb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bec3:	fa                   	cli    
c000bec4:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000bec9:	40                   	inc    eax
c000beca:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000becf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bed4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bed6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bed9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bedf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bee3:	6a 01                	push   0x1
c000bee5:	50                   	push   eax
c000bee6:	e8 a3 ff ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c000beeb:	83 c4 0c             	add    esp,0xc
c000beee:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bef6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000befe:	0f 8f d4 00 00 00    	jg     c000bfd8 <VAS::~VAS()+0x120>
c000bf04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf0f:	c1 e2 02             	shl    edx,0x2
c000bf12:	01 d0                	add    eax,edx
c000bf14:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf16:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf1e:	83 e0 01             	and    eax,0x1
c000bf21:	0f 84 a8 00 00 00    	je     c000bfcf <VAS::~VAS()+0x117>
c000bf27:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf2f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf37:	7f 72                	jg     c000bfab <VAS::~VAS()+0xf3>
c000bf39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf3d:	c1 e0 0a             	shl    eax,0xa
c000bf40:	89 c2                	mov    edx,eax
c000bf42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf46:	01 d0                	add    eax,edx
c000bf48:	c1 e0 0c             	shl    eax,0xc
c000bf4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf4f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf54:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf59:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf63:	6a 01                	push   0x1
c000bf65:	50                   	push   eax
c000bf66:	e8 07 fd ff ff       	call   c000bc72 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bf6b:	83 c4 0c             	add    esp,0xc
c000bf6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf76:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bf7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf80:	25 01 04 00 00       	and    eax,0x401
c000bf85:	3d 01 04 00 00       	cmp    eax,0x401
c000bf8a:	75 19                	jne    c000bfa5 <VAS::~VAS()+0xed>
c000bf8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf90:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf95:	83 ec 0c             	sub    esp,0xc
c000bf98:	50                   	push   eax
c000bf99:	e8 59 e0 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfa5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bfa9:	eb 84                	jmp    c000bf2f <VAS::~VAS()+0x77>
c000bfab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfaf:	25 00 04 00 00       	and    eax,0x400
c000bfb4:	74 19                	je     c000bfcf <VAS::~VAS()+0x117>
c000bfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfba:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfbf:	83 ec 0c             	sub    esp,0xc
c000bfc2:	50                   	push   eax
c000bfc3:	e8 2f e0 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bfc8:	83 c4 10             	add    esp,0x10
c000bfcb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfcf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bfd3:	e9 1e ff ff ff       	jmp    c000bef6 <VAS::~VAS()+0x3e>
c000bfd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfdf:	83 ec 0c             	sub    esp,0xc
c000bfe2:	50                   	push   eax
c000bfe3:	e8 d5 fc ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000bfe8:	83 c4 10             	add    esp,0x10
c000bfeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bff2:	83 ec 0c             	sub    esp,0xc
c000bff5:	50                   	push   eax
c000bff6:	e8 fc df ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c006:	c1 e0 02             	shl    eax,0x2
c000c009:	83 ec 08             	sub    esp,0x8
c000c00c:	50                   	push   eax
c000c00d:	68 78 47 02 c0       	push   0xc0024778
c000c012:	e8 9c 0c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c01f:	48                   	dec    eax
c000c020:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000c025:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c02a:	85 c0                	test   eax,eax
c000c02c:	75 01                	jne    c000c02f <VAS::~VAS()+0x177>
c000c02e:	fb                   	sti    
c000c02f:	90                   	nop
c000c030:	83 c4 2c             	add    esp,0x2c
c000c033:	c3                   	ret    

c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c034:	55                   	push   ebp
c000c035:	57                   	push   edi
c000c036:	56                   	push   esi
c000c037:	53                   	push   ebx
c000c038:	83 ec 1c             	sub    esp,0x1c
c000c03b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c03f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c043:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c049:	77 08                	ja     c000c053 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c04b:	0f 20 d8             	mov    eax,cr3
c000c04e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c051:	75 47                	jne    c000c09a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c053:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c057:	09 d8                	or     eax,ebx
c000c059:	a9 ff 0f 00 00       	test   eax,0xfff
c000c05e:	75 57                	jne    c000c0b7 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c060:	89 de                	mov    esi,ebx
c000c062:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c065:	c1 ee 16             	shr    esi,0x16
c000c068:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c06f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c073:	74 54                	je     c000c0c9 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c075:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c079:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c07f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c083:	c1 e6 0c             	shl    esi,0xc
c000c086:	c1 eb 0a             	shr    ebx,0xa
c000c089:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c08f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c092:	83 c4 1c             	add    esp,0x1c
c000c095:	5b                   	pop    ebx
c000c096:	5e                   	pop    esi
c000c097:	5f                   	pop    edi
c000c098:	5d                   	pop    ebp
c000c099:	c3                   	ret    
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	68 98 47 02 c0       	push   0xc0024798
c000c0a2:	e8 0c 0c 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c0a7:	83 c4 10             	add    esp,0x10
c000c0aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0ae:	09 d8                	or     eax,ebx
c000c0b0:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0b5:	74 a9                	je     c000c060 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0b7:	83 ec 0c             	sub    esp,0xc
c000c0ba:	68 00 48 02 c0       	push   0xc0024800
c000c0bf:	e8 5b 87 00 00       	call   c001481f <Krnl::panic(char const*)>
c000c0c4:	83 c4 10             	add    esp,0x10
c000c0c7:	eb 97                	jmp    c000c060 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0cd:	e8 a8 df ff ff       	call   c000a07a <Phys::allocatePage()>
c000c0d2:	83 ec 0c             	sub    esp,0xc
c000c0d5:	89 c5                	mov    ebp,eax
c000c0d7:	8b 0d b0 82 02 c0    	mov    ecx,DWORD PTR ds:0xc00282b0
c000c0dd:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c0e1:	6a 01                	push   0x1
c000c0e3:	e8 a5 f8 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c0e8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c0ef:	6a 01                	push   0x1
c000c0f1:	50                   	push   eax
c000c0f2:	55                   	push   ebp
c000c0f3:	81 cd 07 04 00 00    	or     ebp,0x407
c000c0f9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c0fd:	51                   	push   ecx
c000c0fe:	e8 27 02 00 00       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c103:	83 c4 1c             	add    esp,0x1c
c000c106:	68 00 10 00 00       	push   0x1000
c000c10b:	6a 00                	push   0x0
c000c10d:	50                   	push   eax
c000c10e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c112:	e8 6d 45 ff ff       	call   c0000684 <memset>
c000c117:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c11b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c11e:	e8 9a fb ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000c123:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c127:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c130:	e9 40 ff ff ff       	jmp    c000c075 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c135:	90                   	nop

c000c136 <VAS::allocatePages(int, int)>:
c000c136:	55                   	push   ebp
c000c137:	57                   	push   edi
c000c138:	56                   	push   esi
c000c139:	53                   	push   ebx
c000c13a:	83 ec 1c             	sub    esp,0x1c
c000c13d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c141:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c146:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c14c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c152:	83 e0 01             	and    eax,0x1
c000c155:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c159:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c15d:	0f 85 cc 00 00 00    	jne    c000c22f <VAS::allocatePages(int, int)+0xf9>
c000c163:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c166:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c16a:	85 c0                	test   eax,eax
c000c16c:	0f 84 a1 00 00 00    	je     c000c213 <VAS::allocatePages(int, int)+0xdd>
c000c172:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c176:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c17a:	c1 e6 0c             	shl    esi,0xc
c000c17d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c181:	85 c0                	test   eax,eax
c000c183:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c186:	7e 33                	jle    c000c1bb <VAS::allocatePages(int, int)+0x85>
c000c188:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c18c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c190:	81 cd 00 04 00 00    	or     ebp,0x400
c000c196:	e8 df de ff ff       	call   c000a07a <Phys::allocatePage()>
c000c19b:	55                   	push   ebp
c000c19c:	53                   	push   ebx
c000c19d:	50                   	push   eax
c000c19e:	57                   	push   edi
c000c19f:	e8 90 fe ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1a4:	83 c4 10             	add    esp,0x10
c000c1a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1ac:	74 03                	je     c000c1b1 <VAS::allocatePages(int, int)+0x7b>
c000c1ae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1b1:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1b7:	39 de                	cmp    esi,ebx
c000c1b9:	75 db                	jne    c000c196 <VAS::allocatePages(int, int)+0x60>
c000c1bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1c0:	75 12                	jne    c000c1d4 <VAS::allocatePages(int, int)+0x9e>
c000c1c2:	0f 20 d8             	mov    eax,cr3
c000c1c5:	0f 22 d8             	mov    cr3,eax
c000c1c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c1cc:	83 c4 1c             	add    esp,0x1c
c000c1cf:	5b                   	pop    ebx
c000c1d0:	5e                   	pop    esi
c000c1d1:	5f                   	pop    edi
c000c1d2:	5d                   	pop    ebp
c000c1d3:	c3                   	ret    
c000c1d4:	c1 ee 0a             	shr    esi,0xa
c000c1d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1db:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c1e1:	c1 eb 0a             	shr    ebx,0xa
c000c1e4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c1ea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c1f0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c1f6:	39 c3                	cmp    ebx,eax
c000c1f8:	77 ce                	ja     c000c1c8 <VAS::allocatePages(int, int)+0x92>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 d8                	cmp    eax,ebx
c000c205:	73 f3                	jae    c000c1fa <VAS::allocatePages(int, int)+0xc4>
c000c207:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c20b:	83 c4 1c             	add    esp,0x1c
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	5f                   	pop    edi
c000c211:	5d                   	pop    ebp
c000c212:	c3                   	ret    
c000c213:	83 ec 0c             	sub    esp,0xc
c000c216:	68 24 48 02 c0       	push   0xc0024824
c000c21b:	e8 ff 85 00 00       	call   c001481f <Krnl::panic(char const*)>
c000c220:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c223:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c227:	83 c4 10             	add    esp,0x10
c000c22a:	e9 43 ff ff ff       	jmp    c000c172 <VAS::allocatePages(int, int)+0x3c>
c000c22f:	83 ec 0c             	sub    esp,0xc
c000c232:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c236:	e8 52 f7 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c23b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c23f:	83 c4 10             	add    esp,0x10
c000c242:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c247:	0f 87 9b 00 00 00    	ja     c000c2e8 <VAS::allocatePages(int, int)+0x1b2>
c000c24d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c251:	85 d2                	test   edx,edx
c000c253:	7e 3c                	jle    c000c291 <VAS::allocatePages(int, int)+0x15b>
c000c255:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c259:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c25d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c261:	c1 e5 0c             	shl    ebp,0xc
c000c264:	81 ce 00 04 00 00    	or     esi,0x400
c000c26a:	01 dd                	add    ebp,ebx
c000c26c:	e8 09 de ff ff       	call   c000a07a <Phys::allocatePage()>
c000c271:	56                   	push   esi
c000c272:	53                   	push   ebx
c000c273:	50                   	push   eax
c000c274:	57                   	push   edi
c000c275:	e8 ba fd ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c27a:	83 c4 10             	add    esp,0x10
c000c27d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c282:	74 03                	je     c000c287 <VAS::allocatePages(int, int)+0x151>
c000c284:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c287:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c28d:	39 dd                	cmp    ebp,ebx
c000c28f:	75 db                	jne    c000c26c <VAS::allocatePages(int, int)+0x136>
c000c291:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c296:	0f 84 26 ff ff ff    	je     c000c1c2 <VAS::allocatePages(int, int)+0x8c>
c000c29c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2a4:	89 d3                	mov    ebx,edx
c000c2a6:	c1 e0 0c             	shl    eax,0xc
c000c2a9:	c1 eb 0a             	shr    ebx,0xa
c000c2ac:	01 d0                	add    eax,edx
c000c2ae:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2b4:	c1 e8 0a             	shr    eax,0xa
c000c2b7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c2bd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c2c2:	2d 00 00 40 00       	sub    eax,0x400000
c000c2c7:	39 c3                	cmp    ebx,eax
c000c2c9:	0f 87 f9 fe ff ff    	ja     c000c1c8 <VAS::allocatePages(int, int)+0x92>
c000c2cf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d8:	39 d8                	cmp    eax,ebx
c000c2da:	73 f3                	jae    c000c2cf <VAS::allocatePages(int, int)+0x199>
c000c2dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2e0:	83 c4 1c             	add    esp,0x1c
c000c2e3:	5b                   	pop    ebx
c000c2e4:	5e                   	pop    esi
c000c2e5:	5f                   	pop    edi
c000c2e6:	5d                   	pop    ebp
c000c2e7:	c3                   	ret    
c000c2e8:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c2ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c2f3:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c2fa:	0f 84 4d ff ff ff    	je     c000c24d <VAS::allocatePages(int, int)+0x117>
c000c300:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c308:	e9 40 ff ff ff       	jmp    c000c24d <VAS::allocatePages(int, int)+0x117>
c000c30d:	90                   	nop

c000c30e <VAS::setCPUSpecific(unsigned long)>:
c000c30e:	83 ec 0c             	sub    esp,0xc
c000c311:	6a 05                	push   0x5
c000c313:	68 00 00 40 c2       	push   0xc2400000
c000c318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c31c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c320:	e8 0f fd ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c325:	83 c4 1c             	add    esp,0x1c
c000c328:	c3                   	ret    
c000c329:	90                   	nop

c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c32a:	55                   	push   ebp
c000c32b:	57                   	push   edi
c000c32c:	56                   	push   esi
c000c32d:	53                   	push   ebx
c000c32e:	83 ec 1c             	sub    esp,0x1c
c000c331:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c336:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c33a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c340:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c344:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c34a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c34e:	83 e0 01             	and    eax,0x1
c000c351:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c355:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c359:	85 c0                	test   eax,eax
c000c35b:	7e 39                	jle    c000c396 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c35d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c361:	89 f3                	mov    ebx,esi
c000c363:	c1 e0 0c             	shl    eax,0xc
c000c366:	01 f0                	add    eax,esi
c000c368:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c36c:	55                   	push   ebp
c000c36d:	53                   	push   ebx
c000c36e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c372:	29 f0                	sub    eax,esi
c000c374:	01 d8                	add    eax,ebx
c000c376:	50                   	push   eax
c000c377:	57                   	push   edi
c000c378:	e8 b7 fc ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c37d:	83 c4 10             	add    esp,0x10
c000c380:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c385:	74 03                	je     c000c38a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c387:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c38a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c390:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c394:	75 d6                	jne    c000c36c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c396:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c39b:	75 10                	jne    c000c3ad <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c39d:	0f 20 d8             	mov    eax,cr3
c000c3a0:	0f 22 d8             	mov    cr3,eax
c000c3a3:	83 c4 1c             	add    esp,0x1c
c000c3a6:	89 f0                	mov    eax,esi
c000c3a8:	5b                   	pop    ebx
c000c3a9:	5e                   	pop    esi
c000c3aa:	5f                   	pop    edi
c000c3ab:	5d                   	pop    ebp
c000c3ac:	c3                   	ret    
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3b3:	c1 eb 0a             	shr    ebx,0xa
c000c3b6:	c1 e0 0c             	shl    eax,0xc
c000c3b9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c3bf:	01 f0                	add    eax,esi
c000c3c1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c3c7:	c1 e8 0a             	shr    eax,0xa
c000c3ca:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c3cf:	2d 00 00 40 00       	sub    eax,0x400000
c000c3d4:	39 c3                	cmp    ebx,eax
c000c3d6:	77 cb                	ja     c000c3a3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c3d8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3db:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3e1:	39 d8                	cmp    eax,ebx
c000c3e3:	73 f3                	jae    c000c3d8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c3e5:	83 c4 1c             	add    esp,0x1c
c000c3e8:	89 f0                	mov    eax,esi
c000c3ea:	5b                   	pop    ebx
c000c3eb:	5e                   	pop    esi
c000c3ec:	5f                   	pop    edi
c000c3ed:	5d                   	pop    ebp
c000c3ee:	c3                   	ret    
c000c3ef:	90                   	nop

c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c3f0:	55                   	push   ebp
c000c3f1:	57                   	push   edi
c000c3f2:	56                   	push   esi
c000c3f3:	53                   	push   ebx
c000c3f4:	83 ec 1c             	sub    esp,0x1c
c000c3f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3fb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c3ff:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c403:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c407:	a9 ff 0f 00 00       	test   eax,0xfff
c000c40c:	75 4a                	jne    c000c458 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c40e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c412:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c415:	c1 eb 16             	shr    ebx,0x16
c000c418:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c41f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c423:	74 4d                	je     c000c472 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c425:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c429:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c42d:	c1 e8 0a             	shr    eax,0xa
c000c430:	80 fa 01             	cmp    dl,0x1
c000c433:	19 d2                	sbb    edx,edx
c000c435:	c1 e3 0c             	shl    ebx,0xc
c000c438:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c43c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c442:	25 fc 0f 00 00       	and    eax,0xffc
c000c447:	01 d8                	add    eax,ebx
c000c449:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c450:	83 c4 1c             	add    esp,0x1c
c000c453:	5b                   	pop    ebx
c000c454:	5e                   	pop    esi
c000c455:	5f                   	pop    edi
c000c456:	5d                   	pop    ebp
c000c457:	c3                   	ret    
c000c458:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c45c:	83 ec 0c             	sub    esp,0xc
c000c45f:	68 50 48 02 c0       	push   0xc0024850
c000c464:	e8 b6 83 00 00       	call   c001481f <Krnl::panic(char const*)>
c000c469:	83 c4 10             	add    esp,0x10
c000c46c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c470:	eb 9c                	jmp    c000c40e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c472:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c476:	e8 ff db ff ff       	call   c000a07a <Phys::allocatePage()>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	89 c5                	mov    ebp,eax
c000c480:	8b 0d b0 82 02 c0    	mov    ecx,DWORD PTR ds:0xc00282b0
c000c486:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c48a:	6a 01                	push   0x1
c000c48c:	e8 fc f4 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c491:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c498:	6a 01                	push   0x1
c000c49a:	50                   	push   eax
c000c49b:	55                   	push   ebp
c000c49c:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4a6:	51                   	push   ecx
c000c4a7:	e8 7e fe ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4ac:	83 c4 1c             	add    esp,0x1c
c000c4af:	68 00 10 00 00       	push   0x1000
c000c4b4:	6a 00                	push   0x0
c000c4b6:	50                   	push   eax
c000c4b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4bb:	e8 c4 41 ff ff       	call   c0000684 <memset>
c000c4c0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4c4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4c7:	e8 f1 f7 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c000c4cc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4cf:	83 c4 10             	add    esp,0x10
c000c4d2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c4d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c4d9:	e9 47 ff ff ff       	jmp    c000c425 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c4de <VAS::VAS(bool)>:
c000c4de:	53                   	push   ebx
c000c4df:	83 ec 28             	sub    esp,0x28
c000c4e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c4ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c4f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c4f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c504:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c508:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c50b:	e8 6a db ff ff       	call   c000a07a <Phys::allocatePage()>
c000c510:	89 c2                	mov    edx,eax
c000c512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c516:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c519:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c000c51f:	83 ec 0c             	sub    esp,0xc
c000c522:	6a 01                	push   0x1
c000c524:	e8 64 f4 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c000c529:	83 c4 10             	add    esp,0x10
c000c52c:	89 c2                	mov    edx,eax
c000c52e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c532:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c535:	83 ec 0c             	sub    esp,0xc
c000c538:	6a 03                	push   0x3
c000c53a:	6a 01                	push   0x1
c000c53c:	52                   	push   edx
c000c53d:	50                   	push   eax
c000c53e:	53                   	push   ebx
c000c53f:	e8 e6 fd ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c544:	83 c4 20             	add    esp,0x20
c000c547:	89 c2                	mov    edx,eax
c000c549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c54d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c550:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c558:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c560:	7f 1c                	jg     c000c57e <VAS::VAS(bool)+0xa0>
c000c562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c566:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c569:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c56d:	c1 e2 02             	shl    edx,0x2
c000c570:	01 d0                	add    eax,edx
c000c572:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c578:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c57c:	eb da                	jmp    c000c558 <VAS::VAS(bool)+0x7a>
c000c57e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c586:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c58e:	7f 7a                	jg     c000c60a <VAS::VAS(bool)+0x12c>
c000c590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c594:	2d 00 02 00 00       	sub    eax,0x200
c000c599:	c1 e0 0c             	shl    eax,0xc
c000c59c:	83 c8 03             	or     eax,0x3
c000c59f:	89 c2                	mov    edx,eax
c000c5a1:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c5a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5b2:	83 e0 10             	and    eax,0x10
c000c5b5:	84 c0                	test   al,al
c000c5b7:	74 07                	je     c000c5c0 <VAS::VAS(bool)+0xe2>
c000c5b9:	b8 00 01 00 00       	mov    eax,0x100
c000c5be:	eb 05                	jmp    c000c5c5 <VAS::VAS(bool)+0xe7>
c000c5c0:	b8 00 00 00 00       	mov    eax,0x0
c000c5c5:	09 d0                	or     eax,edx
c000c5c7:	89 c1                	mov    ecx,eax
c000c5c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c5d4:	c1 e2 02             	shl    edx,0x2
c000c5d7:	01 d0                	add    eax,edx
c000c5d9:	89 ca                	mov    edx,ecx
c000c5db:	89 10                	mov    DWORD PTR [eax],edx
c000c5dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e1:	2d 40 03 00 00       	sub    eax,0x340
c000c5e6:	83 f8 7f             	cmp    eax,0x7f
c000c5e9:	77 16                	ja     c000c601 <VAS::VAS(bool)+0x123>
c000c5eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c5f6:	c1 e2 02             	shl    edx,0x2
c000c5f9:	01 d0                	add    eax,edx
c000c5fb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c601:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c605:	e9 7c ff ff ff       	jmp    c000c586 <VAS::VAS(bool)+0xa8>
c000c60a:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c60f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c615:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c61b:	83 e0 10             	and    eax,0x10
c000c61e:	84 c0                	test   al,al
c000c620:	74 07                	je     c000c629 <VAS::VAS(bool)+0x14b>
c000c622:	b8 03 41 00 00       	mov    eax,0x4103
c000c627:	eb 05                	jmp    c000c62e <VAS::VAS(bool)+0x150>
c000c629:	b8 03 40 00 00       	mov    eax,0x4003
c000c62e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c632:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c635:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c63b:	89 02                	mov    DWORD PTR [edx],eax
c000c63d:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c642:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c648:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c64e:	83 ec 08             	sub    esp,0x8
c000c651:	50                   	push   eax
c000c652:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c656:	e8 b3 fc ff ff       	call   c000c30e <VAS::setCPUSpecific(unsigned long)>
c000c65b:	83 c4 10             	add    esp,0x10
c000c65e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c662:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c665:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c66a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c670:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c676:	83 e0 10             	and    eax,0x10
c000c679:	84 c0                	test   al,al
c000c67b:	74 07                	je     c000c684 <VAS::VAS(bool)+0x1a6>
c000c67d:	b8 00 01 00 00       	mov    eax,0x100
c000c682:	eb 05                	jmp    c000c689 <VAS::VAS(bool)+0x1ab>
c000c684:	b8 00 00 00 00       	mov    eax,0x0
c000c689:	09 c2                	or     edx,eax
c000c68b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c68f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c692:	05 fc 0f 00 00       	add    eax,0xffc
c000c697:	83 ca 03             	or     edx,0x3
c000c69a:	89 10                	mov    DWORD PTR [eax],edx
c000c69c:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c6a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	50                   	push   eax
c000c6ab:	e8 4a 1d 00 00       	call   c000e3fa <Device::getName()>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	83 ec 08             	sub    esp,0x8
c000c6b6:	68 24 49 02 c0       	push   0xc0024924
c000c6bb:	50                   	push   eax
c000c6bc:	e8 0b 41 ff ff       	call   c00007cc <strcmp>
c000c6c1:	83 c4 10             	add    esp,0x10
c000c6c4:	85 c0                	test   eax,eax
c000c6c6:	0f 94 c0             	sete   al
c000c6c9:	84 c0                	test   al,al
c000c6cb:	0f 84 87 00 00 00    	je     c000c758 <VAS::VAS(bool)+0x27a>
c000c6d1:	fa                   	cli    
c000c6d2:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c6d7:	40                   	inc    eax
c000c6d8:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000c6dd:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c6e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6e8:	05 7c 09 00 00       	add    eax,0x97c
c000c6ed:	83 ec 0c             	sub    esp,0xc
c000c6f0:	50                   	push   eax
c000c6f1:	e8 bc cd ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c6f6:	83 c4 10             	add    esp,0x10
c000c6f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6fe:	89 c3                	mov    ebx,eax
c000c700:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000c705:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c70b:	05 7c 09 00 00       	add    eax,0x97c
c000c710:	83 ec 0c             	sub    esp,0xc
c000c713:	50                   	push   eax
c000c714:	e8 99 cd ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	83 ec 08             	sub    esp,0x8
c000c71f:	50                   	push   eax
c000c720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c724:	e8 75 f5 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c72e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c733:	6a 11                	push   0x11
c000c735:	53                   	push   ebx
c000c736:	50                   	push   eax
c000c737:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73b:	e8 f4 f8 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c740:	83 c4 10             	add    esp,0x10
c000c743:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c748:	48                   	dec    eax
c000c749:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000c74e:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c753:	85 c0                	test   eax,eax
c000c755:	75 01                	jne    c000c758 <VAS::VAS(bool)+0x27a>
c000c757:	fb                   	sti    
c000c758:	90                   	nop
c000c759:	83 c4 28             	add    esp,0x28
c000c75c:	5b                   	pop    ebx
c000c75d:	c3                   	ret    

c000c75e <VAS::evict(unsigned long)>:
c000c75e:	55                   	push   ebp
c000c75f:	57                   	push   edi
c000c760:	56                   	push   esi
c000c761:	53                   	push   ebx
c000c762:	83 ec 1c             	sub    esp,0x1c
c000c765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c769:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c76d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c771:	e8 58 f3 ff ff       	call   c000bace <Virt::allocateSwapfilePage()>
c000c776:	89 c7                	mov    edi,eax
c000c778:	a1 cc 75 02 c0       	mov    eax,ds:0xc00275cc
c000c77d:	85 c0                	test   eax,eax
c000c77f:	7e 3d                	jle    c000c7be <VAS::evict(unsigned long)+0x60>
c000c781:	89 ee                	mov    esi,ebp
c000c783:	31 db                	xor    ebx,ebx
c000c785:	83 ec 0c             	sub    esp,0xc
c000c788:	57                   	push   edi
c000c789:	e8 2e f3 ff ff       	call   c000babc <Virt::swapIDToSector(unsigned long)>
c000c78e:	89 34 24             	mov    DWORD PTR [esp],esi
c000c791:	01 d8                	add    eax,ebx
c000c793:	6a 01                	push   0x1
c000c795:	31 d2                	xor    edx,edx
c000c797:	43                   	inc    ebx
c000c798:	52                   	push   edx
c000c799:	81 c6 00 02 00 00    	add    esi,0x200
c000c79f:	50                   	push   eax
c000c7a0:	0f be 05 d8 75 02 c0 	movsx  eax,BYTE PTR ds:0xc00275d8
c000c7a7:	ff 34 85 3c 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd79c4]
c000c7ae:	e8 89 3c 00 00       	call   c001043c <LogicalDisk::write(unsigned long long, int, void*)>
c000c7b3:	83 c4 20             	add    esp,0x20
c000c7b6:	39 1d cc 75 02 c0    	cmp    DWORD PTR ds:0xc00275cc,ebx
c000c7bc:	7f c7                	jg     c000c785 <VAS::evict(unsigned long)+0x27>
c000c7be:	83 ec 08             	sub    esp,0x8
c000c7c1:	c1 e7 0b             	shl    edi,0xb
c000c7c4:	55                   	push   ebp
c000c7c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7c9:	e8 d0 f4 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c7ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7d0:	89 d3                	mov    ebx,edx
c000c7d2:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c7d8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c7de:	09 d7                	or     edi,edx
c000c7e0:	89 38                	mov    DWORD PTR [eax],edi
c000c7e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c7e5:	ff 05 a8 82 02 c0    	inc    DWORD PTR ds:0xc00282a8
c000c7eb:	e8 07 d8 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c000c7f0:	0f 20 d8             	mov    eax,cr3
c000c7f3:	0f 22 d8             	mov    cr3,eax
c000c7f6:	ff 35 a8 82 02 c0    	push   DWORD PTR ds:0xc00282a8
c000c7fc:	55                   	push   ebp
c000c7fd:	53                   	push   ebx
c000c7fe:	68 74 48 02 c0       	push   0xc0024874
c000c803:	e8 ab 04 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c808:	a1 a4 82 02 c0       	mov    eax,ds:0xc00282a4
c000c80d:	c7 44 24 50 32 49 02 c0 	mov    DWORD PTR [esp+0x50],0xc0024932
c000c815:	8d 50 01             	lea    edx,[eax+0x1]
c000c818:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c81c:	89 15 a4 82 02 c0    	mov    DWORD PTR ds:0xc00282a4,edx
c000c822:	83 c4 3c             	add    esp,0x3c
c000c825:	5b                   	pop    ebx
c000c826:	5e                   	pop    esi
c000c827:	5f                   	pop    edi
c000c828:	5d                   	pop    ebp
c000c829:	e9 85 04 00 00       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>

c000c82e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c82e:	55                   	push   ebp
c000c82f:	57                   	push   edi
c000c830:	56                   	push   esi
c000c831:	53                   	push   ebx
c000c832:	83 ec 14             	sub    esp,0x14
c000c835:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c839:	68 43 49 02 c0       	push   0xc0024943
c000c83e:	e8 70 04 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c843:	83 c4 10             	add    esp,0x10
c000c846:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c84a:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c850:	74 20                	je     c000c872 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c852:	83 ec 08             	sub    esp,0x8
c000c855:	55                   	push   ebp
c000c856:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c85a:	e8 3f f4 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c85f:	83 c4 10             	add    esp,0x10
c000c862:	89 c3                	mov    ebx,eax
c000c864:	85 c0                	test   eax,eax
c000c866:	74 0a                	je     c000c872 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c868:	8b 38                	mov    edi,DWORD PTR [eax]
c000c86a:	f7 c7 01 00 00 00    	test   edi,0x1
c000c870:	74 0a                	je     c000c87c <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c872:	31 c0                	xor    eax,eax
c000c874:	83 c4 0c             	add    esp,0xc
c000c877:	5b                   	pop    ebx
c000c878:	5e                   	pop    esi
c000c879:	5f                   	pop    edi
c000c87a:	5d                   	pop    ebp
c000c87b:	c3                   	ret    
c000c87c:	e8 f9 d7 ff ff       	call   c000a07a <Phys::allocatePage()>
c000c881:	c1 ef 0b             	shr    edi,0xb
c000c884:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c886:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c88c:	09 c2                	or     edx,eax
c000c88e:	81 ca 01 08 00 00    	or     edx,0x801
c000c894:	89 13                	mov    DWORD PTR [ebx],edx
c000c896:	8b 0d cc 75 02 c0    	mov    ecx,DWORD PTR ds:0xc00275cc
c000c89c:	85 c9                	test   ecx,ecx
c000c89e:	7e 3d                	jle    c000c8dd <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8a0:	89 ee                	mov    esi,ebp
c000c8a2:	31 db                	xor    ebx,ebx
c000c8a4:	83 ec 0c             	sub    esp,0xc
c000c8a7:	57                   	push   edi
c000c8a8:	e8 0f f2 ff ff       	call   c000babc <Virt::swapIDToSector(unsigned long)>
c000c8ad:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8b0:	01 d8                	add    eax,ebx
c000c8b2:	6a 01                	push   0x1
c000c8b4:	31 d2                	xor    edx,edx
c000c8b6:	43                   	inc    ebx
c000c8b7:	52                   	push   edx
c000c8b8:	81 c6 00 02 00 00    	add    esi,0x200
c000c8be:	50                   	push   eax
c000c8bf:	0f be 05 d8 75 02 c0 	movsx  eax,BYTE PTR ds:0xc00275d8
c000c8c6:	ff 34 85 3c 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd79c4]
c000c8cd:	e8 fe 3a 00 00       	call   c00103d0 <LogicalDisk::read(unsigned long long, int, void*)>
c000c8d2:	83 c4 20             	add    esp,0x20
c000c8d5:	39 1d cc 75 02 c0    	cmp    DWORD PTR ds:0xc00275cc,ebx
c000c8db:	7f c7                	jg     c000c8a4 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c8dd:	a1 a8 82 02 c0       	mov    eax,ds:0xc00282a8
c000c8e2:	48                   	dec    eax
c000c8e3:	52                   	push   edx
c000c8e4:	a3 a8 82 02 c0       	mov    ds:0xc00282a8,eax
c000c8e9:	50                   	push   eax
c000c8ea:	55                   	push   ebp
c000c8eb:	68 56 49 02 c0       	push   0xc0024956
c000c8f0:	e8 be 03 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c8f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c8f8:	e8 a1 f1 ff ff       	call   c000ba9e <Virt::freeSwapfilePage(unsigned long)>
c000c8fd:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	48                   	dec    eax
c000c906:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000c90b:	85 c0                	test   eax,eax
c000c90d:	74 1d                	je     c000c92c <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c90f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c913:	25 ff 0f 00 00       	and    eax,0xfff
c000c918:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c91d:	77 10                	ja     c000c92f <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c91f:	0f 20 d8             	mov    eax,cr3
c000c922:	0f 22 d8             	mov    cr3,eax
c000c925:	b0 01                	mov    al,0x1
c000c927:	e9 48 ff ff ff       	jmp    c000c874 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c92c:	fb                   	sti    
c000c92d:	eb e0                	jmp    c000c90f <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c92f:	83 ec 0c             	sub    esp,0xc
c000c932:	68 6b 49 02 c0       	push   0xc002496b
c000c937:	e8 77 03 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	eb de                	jmp    c000c91f <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c941:	90                   	nop

c000c942 <VAS::scanForEviction()>:
c000c942:	57                   	push   edi
c000c943:	31 ff                	xor    edi,edi
c000c945:	56                   	push   esi
c000c946:	53                   	push   ebx
c000c947:	83 ec 10             	sub    esp,0x10
c000c94a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c94e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c951:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c957:	75 0e                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c959:	89 da                	mov    edx,ebx
c000c95b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c95e:	c1 ea 16             	shr    edx,0x16
c000c961:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c965:	74 4e                	je     c000c9b5 <VAS::scanForEviction()+0x73>
c000c967:	53                   	push   ebx
c000c968:	56                   	push   esi
c000c969:	e8 30 f3 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000c96e:	5a                   	pop    edx
c000c96f:	8b 10                	mov    edx,DWORD PTR [eax]
c000c971:	59                   	pop    ecx
c000c972:	89 d1                	mov    ecx,edx
c000c974:	81 e1 01 08 00 00    	and    ecx,0x801
c000c97a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c980:	74 3e                	je     c000c9c0 <VAS::scanForEviction()+0x7e>
c000c982:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c988:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c98e:	76 2b                	jbe    c000c9bb <VAS::scanForEviction()+0x79>
c000c990:	47                   	inc    edi
c000c991:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c998:	83 ff 03             	cmp    edi,0x3
c000c99b:	74 32                	je     c000c9cf <VAS::scanForEviction()+0x8d>
c000c99d:	31 db                	xor    ebx,ebx
c000c99f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a5:	75 c0                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c9a7:	89 da                	mov    edx,ebx
c000c9a9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9ac:	c1 ea 16             	shr    edx,0x16
c000c9af:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b3:	75 b2                	jne    c000c967 <VAS::scanForEviction()+0x25>
c000c9b5:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c9bb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c9be:	eb 91                	jmp    c000c951 <VAS::scanForEviction()+0xf>
c000c9c0:	f6 c2 20             	test   dl,0x20
c000c9c3:	74 13                	je     c000c9d8 <VAS::scanForEviction()+0x96>
c000c9c5:	83 e2 df             	and    edx,0xffffffdf
c000c9c8:	89 10                	mov    DWORD PTR [eax],edx
c000c9ca:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c9cd:	eb b3                	jmp    c000c982 <VAS::scanForEviction()+0x40>
c000c9cf:	83 c4 10             	add    esp,0x10
c000c9d2:	31 c0                	xor    eax,eax
c000c9d4:	5b                   	pop    ebx
c000c9d5:	5e                   	pop    esi
c000c9d6:	5f                   	pop    edi
c000c9d7:	c3                   	ret    
c000c9d8:	83 ec 08             	sub    esp,0x8
c000c9db:	89 d0                	mov    eax,edx
c000c9dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c9e6:	53                   	push   ebx
c000c9e7:	68 7b 49 02 c0       	push   0xc002497b
c000c9ec:	e8 c2 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000c9f1:	58                   	pop    eax
c000c9f2:	5a                   	pop    edx
c000c9f3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c9f6:	56                   	push   esi
c000c9f7:	e8 62 fd ff ff       	call   c000c75e <VAS::evict(unsigned long)>
c000c9fc:	59                   	pop    ecx
c000c9fd:	5b                   	pop    ebx
c000c9fe:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca01:	68 8f 49 02 c0       	push   0xc002498f
c000ca06:	e8 a8 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ca0b:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca12:	83 c4 10             	add    esp,0x10
c000ca15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca19:	83 c4 10             	add    esp,0x10
c000ca1c:	5b                   	pop    ebx
c000ca1d:	5e                   	pop    esi
c000ca1e:	5f                   	pop    edi
c000ca1f:	c3                   	ret    

c000ca20 <mapVASFirstTime>:
c000ca20:	55                   	push   ebp
c000ca21:	57                   	push   edi
c000ca22:	56                   	push   esi
c000ca23:	53                   	push   ebx
c000ca24:	83 ec 0c             	sub    esp,0xc
c000ca27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca2c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca2f:	4a                   	dec    edx
c000ca30:	0f 84 fe 00 00 00    	je     c000cb34 <mapVASFirstTime+0x114>
c000ca36:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca39:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca3c:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca41:	c1 e5 15             	shl    ebp,0x15
c000ca44:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca49:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca4f:	29 eb                	sub    ebx,ebp
c000ca51:	29 ef                	sub    edi,ebp
c000ca53:	83 ec 08             	sub    esp,0x8
c000ca56:	53                   	push   ebx
c000ca57:	68 bb 49 02 c0       	push   0xc00249bb
c000ca5c:	e8 52 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ca61:	e8 14 d6 ff ff       	call   c000a07a <Phys::allocatePage()>
c000ca66:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ca6d:	6a 01                	push   0x1
c000ca6f:	53                   	push   ebx
c000ca70:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ca76:	50                   	push   eax
c000ca77:	56                   	push   esi
c000ca78:	e8 ad f8 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ca7d:	83 c4 20             	add    esp,0x20
c000ca80:	39 fb                	cmp    ebx,edi
c000ca82:	75 cf                	jne    c000ca53 <mapVASFirstTime+0x33>
c000ca84:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ca89:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ca8e:	29 eb                	sub    ebx,ebp
c000ca90:	29 ef                	sub    edi,ebp
c000ca92:	83 ec 08             	sub    esp,0x8
c000ca95:	53                   	push   ebx
c000ca96:	68 d7 49 02 c0       	push   0xc00249d7
c000ca9b:	e8 13 02 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000caa0:	58                   	pop    eax
c000caa1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caa5:	5a                   	pop    edx
c000caa6:	19 c0                	sbb    eax,eax
c000caa8:	83 e0 04             	and    eax,0x4
c000caab:	05 03 04 00 00       	add    eax,0x403
c000cab0:	50                   	push   eax
c000cab1:	68 eb 49 02 c0       	push   0xc00249eb
c000cab6:	e8 f8 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cabb:	e8 ba d5 ff ff       	call   c000a07a <Phys::allocatePage()>
c000cac0:	59                   	pop    ecx
c000cac1:	89 c5                	mov    ebp,eax
c000cac3:	58                   	pop    eax
c000cac4:	55                   	push   ebp
c000cac5:	68 f9 49 02 c0       	push   0xc00249f9
c000caca:	e8 e4 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cacf:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cad3:	19 d2                	sbb    edx,edx
c000cad5:	83 e2 04             	and    edx,0x4
c000cad8:	81 c2 03 04 00 00    	add    edx,0x403
c000cade:	89 14 24             	mov    DWORD PTR [esp],edx
c000cae1:	6a 01                	push   0x1
c000cae3:	53                   	push   ebx
c000cae4:	55                   	push   ebp
c000cae5:	56                   	push   esi
c000cae6:	e8 3f f8 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000caeb:	83 c4 18             	add    esp,0x18
c000caee:	53                   	push   ebx
c000caef:	56                   	push   esi
c000caf0:	e8 a9 f1 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c000caf5:	5a                   	pop    edx
c000caf6:	59                   	pop    ecx
c000caf7:	ff 30                	push   DWORD PTR [eax]
c000caf9:	68 15 4a 02 c0       	push   0xc0024a15
c000cafe:	e8 b0 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb03:	0f 20 d8             	mov    eax,cr3
c000cb06:	83 c4 0c             	add    esp,0xc
c000cb09:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb0f:	56                   	push   esi
c000cb10:	50                   	push   eax
c000cb11:	68 20 4a 02 c0       	push   0xc0024a20
c000cb16:	e8 98 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	39 df                	cmp    edi,ebx
c000cb20:	0f 85 6c ff ff ff    	jne    c000ca92 <mapVASFirstTime+0x72>
c000cb26:	0f 20 d8             	mov    eax,cr3
c000cb29:	0f 22 d8             	mov    cr3,eax
c000cb2c:	83 c4 0c             	add    esp,0xc
c000cb2f:	5b                   	pop    ebx
c000cb30:	5e                   	pop    esi
c000cb31:	5f                   	pop    edi
c000cb32:	5d                   	pop    ebp
c000cb33:	c3                   	ret    
c000cb34:	83 ec 0c             	sub    esp,0xc
c000cb37:	68 a2 49 02 c0       	push   0xc00249a2
c000cb3c:	e8 72 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	83 c4 0c             	add    esp,0xc
c000cb47:	5b                   	pop    ebx
c000cb48:	5e                   	pop    esi
c000cb49:	5f                   	pop    edi
c000cb4a:	5d                   	pop    ebp
c000cb4b:	c3                   	ret    

c000cb4c <__cxa_atexit>:
c000cb4c:	31 c0                	xor    eax,eax
c000cb4e:	c3                   	ret    

c000cb4f <__cxa_finalize>:
c000cb4f:	c3                   	ret    

c000cb50 <__stack_chk_fail>:
c000cb50:	55                   	push   ebp
c000cb51:	89 e5                	mov    ebp,esp
c000cb53:	83 ec 14             	sub    esp,0x14
c000cb56:	68 38 4a 02 c0       	push   0xc0024a38
c000cb5b:	e8 53 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb60:	58                   	pop    eax
c000cb61:	5a                   	pop    edx
c000cb62:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb65:	68 88 4a 02 c0       	push   0xc0024a88
c000cb6a:	e8 44 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb6f:	59                   	pop    ecx
c000cb70:	58                   	pop    eax
c000cb71:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb74:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb77:	68 88 4a 02 c0       	push   0xc0024a88
c000cb7c:	e8 32 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb81:	5a                   	pop    edx
c000cb82:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb85:	59                   	pop    ecx
c000cb86:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb88:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cb8b:	68 88 4a 02 c0       	push   0xc0024a88
c000cb90:	e8 1e 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cb95:	5a                   	pop    edx
c000cb96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb99:	59                   	pop    ecx
c000cb9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cba1:	68 88 4a 02 c0       	push   0xc0024a88
c000cba6:	e8 08 01 00 00       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000cbab:	c7 04 24 90 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a90
c000cbb2:	e8 68 7c 00 00       	call   c001481f <Krnl::panic(char const*)>
c000cbb7:	83 c4 10             	add    esp,0x10
c000cbba:	c9                   	leave  
c000cbbb:	c3                   	ret    

c000cbbc <__cxa_pure_virtual>:
c000cbbc:	83 ec 18             	sub    esp,0x18
c000cbbf:	68 a8 4a 02 c0       	push   0xc0024aa8
c000cbc4:	e8 56 7c 00 00       	call   c001481f <Krnl::panic(char const*)>
c000cbc9:	83 c4 1c             	add    esp,0x1c
c000cbcc:	c3                   	ret    

c000cbcd <operator new[](unsigned long)>:
c000cbcd:	e9 f1 cd ff ff       	jmp    c00099c3 <malloc>

c000cbd2 <operator delete(void*, unsigned long)>:
c000cbd2:	e9 0c ce ff ff       	jmp    c00099e3 <rfree>

c000cbd7 <operator delete[](void*)>:
c000cbd7:	e9 07 ce ff ff       	jmp    c00099e3 <rfree>

c000cbdc <operator delete[](void*, unsigned long)>:
c000cbdc:	e9 02 ce ff ff       	jmp    c00099e3 <rfree>

c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cbe1:	55                   	push   ebp
c000cbe2:	b9 11 00 00 00       	mov    ecx,0x11
c000cbe7:	57                   	push   edi
c000cbe8:	56                   	push   esi
c000cbe9:	be 8e 45 02 c0       	mov    esi,0xc002458e
c000cbee:	53                   	push   ebx
c000cbef:	83 ec 20             	sub    esp,0x20
c000cbf2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cbf6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cbfa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cbfe:	fc                   	cld    
c000cbff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc01:	89 ee                	mov    esi,ebp
c000cc03:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc07:	eb 02                	jmp    c000cc0b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc09:	89 c6                	mov    esi,eax
c000cc0b:	31 d2                	xor    edx,edx
c000cc0d:	41                   	inc    ecx
c000cc0e:	89 f0                	mov    eax,esi
c000cc10:	f7 f3                	div    ebx
c000cc12:	39 de                	cmp    esi,ebx
c000cc14:	73 f3                	jae    c000cc09 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc16:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc19:	eb 02                	jmp    c000cc1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc1b:	89 c5                	mov    ebp,eax
c000cc1d:	31 d2                	xor    edx,edx
c000cc1f:	49                   	dec    ecx
c000cc20:	89 e8                	mov    eax,ebp
c000cc22:	f7 f3                	div    ebx
c000cc24:	39 dd                	cmp    ebp,ebx
c000cc26:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc2a:	88 11                	mov    BYTE PTR [ecx],dl
c000cc2c:	73 ed                	jae    c000cc1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc32:	83 c4 20             	add    esp,0x20
c000cc35:	5b                   	pop    ebx
c000cc36:	5e                   	pop    esi
c000cc37:	5f                   	pop    edi
c000cc38:	5d                   	pop    ebp
c000cc39:	c3                   	ret    

c000cc3a <Dbg::logc(char)>:
c000cc3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc3e:	f6 05 a0 81 02 c0 10 	test   BYTE PTR ds:0xc00281a0,0x10
c000cc45:	75 12                	jne    c000cc59 <Dbg::logc(char)+0x1f>
c000cc47:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc4c:	ec                   	in     al,dx
c000cc4d:	a8 20                	test   al,0x20
c000cc4f:	74 fb                	je     c000cc4c <Dbg::logc(char)+0x12>
c000cc51:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc56:	88 c8                	mov    al,cl
c000cc58:	ee                   	out    dx,al
c000cc59:	c3                   	ret    

c000cc5a <Dbg::logs(char*)>:
c000cc5a:	53                   	push   ebx
c000cc5b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cc5f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc62:	84 c0                	test   al,al
c000cc64:	74 0f                	je     c000cc75 <Dbg::logs(char*)+0x1b>
c000cc66:	50                   	push   eax
c000cc67:	43                   	inc    ebx
c000cc68:	e8 cd ff ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cc6d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cc70:	5a                   	pop    edx
c000cc71:	84 c0                	test   al,al
c000cc73:	75 f1                	jne    c000cc66 <Dbg::logs(char*)+0xc>
c000cc75:	5b                   	pop    ebx
c000cc76:	c3                   	ret    

c000cc77 <Dbg::logWriteInt(unsigned int)>:
c000cc77:	83 ec 10             	sub    esp,0x10
c000cc7a:	6a 0a                	push   0xa
c000cc7c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc85:	e8 57 ff ff ff       	call   c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cc8a:	50                   	push   eax
c000cc8b:	e8 ca ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000cc90:	83 c4 20             	add    esp,0x20
c000cc93:	c3                   	ret    

c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cc94:	83 ec 10             	sub    esp,0x10
c000cc97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc9b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cc9f:	50                   	push   eax
c000cca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca4:	e8 38 ff ff ff       	call   c000cbe1 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cca9:	50                   	push   eax
c000ccaa:	e8 ab ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000ccaf:	83 c4 20             	add    esp,0x20
c000ccb2:	c3                   	ret    

c000ccb3 <Dbg::kprintf(char const*, ...)>:
c000ccb3:	55                   	push   ebp
c000ccb4:	57                   	push   edi
c000ccb5:	56                   	push   esi
c000ccb6:	53                   	push   ebx
c000ccb7:	83 ec 0c             	sub    esp,0xc
c000ccba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccbe:	f6 05 a0 81 02 c0 10 	test   BYTE PTR ds:0xc00281a0,0x10
c000ccc5:	74 08                	je     c000cccf <Dbg::kprintf(char const*, ...)+0x1c>
c000ccc7:	83 c4 0c             	add    esp,0xc
c000ccca:	5b                   	pop    ebx
c000cccb:	5e                   	pop    esi
c000cccc:	5f                   	pop    edi
c000cccd:	5d                   	pop    ebp
c000ccce:	c3                   	ret    
c000cccf:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ccd3:	31 db                	xor    ebx,ebx
c000ccd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccd9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000ccdc:	84 c0                	test   al,al
c000ccde:	74 e7                	je     c000ccc7 <Dbg::kprintf(char const*, ...)+0x14>
c000cce0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cce3:	3c 25                	cmp    al,0x25
c000cce5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cce8:	75 44                	jne    c000cd2e <Dbg::kprintf(char const*, ...)+0x7b>
c000ccea:	83 c3 02             	add    ebx,0x2
c000cced:	8a 07                	mov    al,BYTE PTR [edi]
c000ccef:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000ccf2:	83 e8 25             	sub    eax,0x25
c000ccf5:	3c 53                	cmp    al,0x53
c000ccf7:	0f 87 c9 00 00 00    	ja     c000cdc6 <Dbg::kprintf(char const*, ...)+0x113>
c000ccfd:	0f b6 c0             	movzx  eax,al
c000cd00:	ff 24 85 bc 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb544]
c000cd07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd0b:	89 c8                	mov    eax,ecx
c000cd0d:	83 c1 04             	add    ecx,0x4
c000cd10:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd14:	ff 30                	push   DWORD PTR [eax]
c000cd16:	e8 5c ff ff ff       	call   c000cc77 <Dbg::logWriteInt(unsigned int)>
c000cd1b:	5f                   	pop    edi
c000cd1c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd20:	84 c0                	test   al,al
c000cd22:	74 a3                	je     c000ccc7 <Dbg::kprintf(char const*, ...)+0x14>
c000cd24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd27:	3c 25                	cmp    al,0x25
c000cd29:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd2c:	74 bc                	je     c000ccea <Dbg::kprintf(char const*, ...)+0x37>
c000cd2e:	50                   	push   eax
c000cd2f:	89 eb                	mov    ebx,ebp
c000cd31:	e8 04 ff ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cd36:	89 fd                	mov    ebp,edi
c000cd38:	58                   	pop    eax
c000cd39:	eb e1                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd3f:	89 c8                	mov    eax,ecx
c000cd41:	83 c1 04             	add    ecx,0x4
c000cd44:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd48:	ff 30                	push   DWORD PTR [eax]
c000cd4a:	e8 0b ff ff ff       	call   c000cc5a <Dbg::logs(char*)>
c000cd4f:	58                   	pop    eax
c000cd50:	eb ca                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd52:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd56:	89 d0                	mov    eax,edx
c000cd58:	83 c2 04             	add    edx,0x4
c000cd5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd5f:	ff 30                	push   DWORD PTR [eax]
c000cd61:	e8 11 ff ff ff       	call   c000cc77 <Dbg::logWriteInt(unsigned int)>
c000cd66:	58                   	pop    eax
c000cd67:	eb b3                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd6d:	89 d0                	mov    eax,edx
c000cd6f:	83 c2 04             	add    edx,0x4
c000cd72:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cd75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cd79:	50                   	push   eax
c000cd7a:	e8 bb fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cd7f:	58                   	pop    eax
c000cd80:	eb 9a                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd86:	89 c8                	mov    eax,ecx
c000cd88:	83 c1 04             	add    ecx,0x4
c000cd8b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd8f:	6a 10                	push   0x10
c000cd91:	ff 30                	push   DWORD PTR [eax]
c000cd93:	e8 fc fe ff ff       	call   c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>
c000cd98:	59                   	pop    ecx
c000cd99:	5f                   	pop    edi
c000cd9a:	eb 80                	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cd9c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda0:	89 d0                	mov    eax,edx
c000cda2:	83 c2 08             	add    edx,0x8
c000cda5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda9:	6a 10                	push   0x10
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 e2 fe ff ff       	call   c000cc94 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	5a                   	pop    edx
c000cdb4:	e9 63 ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cdb9:	6a 25                	push   0x25
c000cdbb:	e8 7a fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdc0:	58                   	pop    eax
c000cdc1:	e9 56 ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cdc6:	6a 25                	push   0x25
c000cdc8:	e8 6d fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdcd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cdd0:	50                   	push   eax
c000cdd1:	e8 64 fe ff ff       	call   c000cc3a <Dbg::logc(char)>
c000cdd6:	5a                   	pop    edx
c000cdd7:	59                   	pop    ecx
c000cdd8:	e9 3f ff ff ff       	jmp    c000cd1c <Dbg::kprintf(char const*, ...)+0x69>
c000cddd:	90                   	nop

c000cdde <File::read(unsigned long long, void*, int*)>:
c000cdde:	53                   	push   ebx
c000cddf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cde3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cde7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cdee:	3c 19                	cmp    al,0x19
c000cdf0:	77 35                	ja     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000cdf2:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c000cdf9:	85 c0                	test   eax,eax
c000cdfb:	74 2a                	je     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000cdfd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce03:	85 c0                	test   eax,eax
c000ce05:	74 20                	je     c000ce27 <File::read(unsigned long long, void*, int*)+0x49>
c000ce07:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce0b:	74 21                	je     c000ce2e <File::read(unsigned long long, void*, int*)+0x50>
c000ce0d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce13:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce21:	5b                   	pop    ebx
c000ce22:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce25:	ff e0                	jmp    eax
c000ce27:	b8 0b 00 00 00       	mov    eax,0xb
c000ce2c:	eb 05                	jmp    c000ce33 <File::read(unsigned long long, void*, int*)+0x55>
c000ce2e:	b8 05 00 00 00       	mov    eax,0x5
c000ce33:	5b                   	pop    ebx
c000ce34:	c3                   	ret    
c000ce35:	90                   	nop

c000ce36 <File::write(unsigned long long, void*, int*)>:
c000ce36:	53                   	push   ebx
c000ce37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce3f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce46:	3c 19                	cmp    al,0x19
c000ce48:	77 35                	ja     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce4a:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c000ce51:	85 c0                	test   eax,eax
c000ce53:	74 2a                	je     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce5b:	85 c0                	test   eax,eax
c000ce5d:	74 20                	je     c000ce7f <File::write(unsigned long long, void*, int*)+0x49>
c000ce5f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce63:	74 21                	je     c000ce86 <File::write(unsigned long long, void*, int*)+0x50>
c000ce65:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce67:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce6b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce79:	5b                   	pop    ebx
c000ce7a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ce7d:	ff e0                	jmp    eax
c000ce7f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce84:	eb 05                	jmp    c000ce8b <File::write(unsigned long long, void*, int*)+0x55>
c000ce86:	b8 05 00 00 00       	mov    eax,0x5
c000ce8b:	5b                   	pop    ebx
c000ce8c:	c3                   	ret    
c000ce8d:	90                   	nop

c000ce8e <Directory::read(unsigned long long, void*, int*)>:
c000ce8e:	53                   	push   ebx
c000ce8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce93:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce97:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce9e:	3c 19                	cmp    al,0x19
c000cea0:	77 35                	ja     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cea2:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c000cea9:	85 c0                	test   eax,eax
c000ceab:	74 2a                	je     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cead:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceb3:	85 c0                	test   eax,eax
c000ceb5:	74 20                	je     c000ced7 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceb7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cebb:	74 21                	je     c000cede <Directory::read(unsigned long long, void*, int*)+0x50>
c000cebd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cebf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cec3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cec9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cecd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ced1:	5b                   	pop    ebx
c000ced2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000ced5:	ff e0                	jmp    eax
c000ced7:	b8 0b 00 00 00       	mov    eax,0xb
c000cedc:	eb 05                	jmp    c000cee3 <Directory::read(unsigned long long, void*, int*)+0x55>
c000cede:	b8 05 00 00 00       	mov    eax,0x5
c000cee3:	5b                   	pop    ebx
c000cee4:	c3                   	ret    
c000cee5:	90                   	nop

c000cee6 <Directory::write(unsigned long long, void*, int*)>:
c000cee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ceea:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cef1:	b8 0b 00 00 00       	mov    eax,0xb
c000cef6:	80 fa 19             	cmp    dl,0x19
c000cef9:	77 18                	ja     c000cf13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cefb:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000cf02:	85 d2                	test   edx,edx
c000cf04:	74 0d                	je     c000cf13 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf06:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf0d:	19 c0                	sbb    eax,eax
c000cf0f:	83 e0 0a             	and    eax,0xa
c000cf12:	40                   	inc    eax
c000cf13:	c3                   	ret    

c000cf14 <File::isAtty()>:
c000cf14:	31 c0                	xor    eax,eax
c000cf16:	c3                   	ret    
c000cf17:	90                   	nop

c000cf18 <Directory::isAtty()>:
c000cf18:	31 c0                	xor    eax,eax
c000cf1a:	c3                   	ret    
c000cf1b:	90                   	nop

c000cf1c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf1c:	b8 0a 00 00 00       	mov    eax,0xa
c000cf21:	c3                   	ret    

c000cf22 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf22:	b8 0a 00 00 00       	mov    eax,0xa
c000cf27:	c3                   	ret    

c000cf28 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf28:	31 c0                	xor    eax,eax
c000cf2a:	31 d2                	xor    edx,edx
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <File::~File()>:
c000cf2e:	83 ec 0c             	sub    esp,0xc
c000cf31:	ba 7c 4c 02 c0       	mov    edx,0xc0024c7c
c000cf36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf3a:	89 10                	mov    DWORD PTR [eax],edx
c000cf3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf40:	83 ec 0c             	sub    esp,0xc
c000cf43:	50                   	push   eax
c000cf44:	e8 e3 e7 ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	90                   	nop
c000cf4d:	83 c4 0c             	add    esp,0xc
c000cf50:	c3                   	ret    
c000cf51:	90                   	nop

c000cf52 <File::~File()>:
c000cf52:	83 ec 0c             	sub    esp,0xc
c000cf55:	83 ec 0c             	sub    esp,0xc
c000cf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf5c:	e8 cd ff ff ff       	call   c000cf2e <File::~File()>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	83 ec 08             	sub    esp,0x8
c000cf67:	68 14 01 00 00       	push   0x114
c000cf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf70:	e8 5d fc ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000cf75:	83 c4 10             	add    esp,0x10
c000cf78:	83 c4 0c             	add    esp,0xc
c000cf7b:	c3                   	ret    

c000cf7c <Directory::~Directory()>:
c000cf7c:	83 ec 0c             	sub    esp,0xc
c000cf7f:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c000cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf88:	89 10                	mov    DWORD PTR [eax],edx
c000cf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8e:	83 ec 0c             	sub    esp,0xc
c000cf91:	50                   	push   eax
c000cf92:	e8 95 e7 ff ff       	call   c000b72c <UnixFile::~UnixFile()>
c000cf97:	83 c4 10             	add    esp,0x10
c000cf9a:	90                   	nop
c000cf9b:	83 c4 0c             	add    esp,0xc
c000cf9e:	c3                   	ret    
c000cf9f:	90                   	nop

c000cfa0 <Directory::~Directory()>:
c000cfa0:	83 ec 0c             	sub    esp,0xc
c000cfa3:	83 ec 0c             	sub    esp,0xc
c000cfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfaa:	e8 cd ff ff ff       	call   c000cf7c <Directory::~Directory()>
c000cfaf:	83 c4 10             	add    esp,0x10
c000cfb2:	83 ec 08             	sub    esp,0x8
c000cfb5:	68 14 01 00 00       	push   0x114
c000cfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbe:	e8 0f fc ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000cfc3:	83 c4 10             	add    esp,0x10
c000cfc6:	83 c4 0c             	add    esp,0xc
c000cfc9:	c3                   	ret    

c000cfca <Filesystem::Filesystem()>:
c000cfca:	ba 14 4c 02 c0       	mov    edx,0xc0024c14
c000cfcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfd3:	89 10                	mov    DWORD PTR [eax],edx
c000cfd5:	8b 15 b4 82 02 c0    	mov    edx,DWORD PTR ds:0xc00282b4
c000cfdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cfe6:	a3 b4 82 02 c0       	mov    ds:0xc00282b4,eax
c000cfeb:	90                   	nop
c000cfec:	c3                   	ret    
c000cfed:	90                   	nop

c000cfee <Filesystem::~Filesystem()>:
c000cfee:	ba 14 4c 02 c0       	mov    edx,0xc0024c14
c000cff3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cff7:	89 10                	mov    DWORD PTR [eax],edx
c000cff9:	90                   	nop
c000cffa:	c3                   	ret    
c000cffb:	90                   	nop

c000cffc <Filesystem::~Filesystem()>:
c000cffc:	83 ec 0c             	sub    esp,0xc
c000cfff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d003:	e8 e6 ff ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c000d008:	83 c4 04             	add    esp,0x4
c000d00b:	83 ec 08             	sub    esp,0x8
c000d00e:	6a 08                	push   0x8
c000d010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d014:	e8 b9 fb ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	83 c4 0c             	add    esp,0xc
c000d01f:	c3                   	ret    

c000d020 <Fs::getcwd(Process*, char*, int)>:
c000d020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d024:	31 c0                	xor    eax,eax
c000d026:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d029:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d02d:	7d 15                	jge    c000d044 <Fs::getcwd(Process*, char*, int)+0x24>
c000d02f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d033:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d03a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d03d:	84 c9                	test   cl,cl
c000d03f:	74 06                	je     c000d047 <Fs::getcwd(Process*, char*, int)+0x27>
c000d041:	40                   	inc    eax
c000d042:	eb e2                	jmp    c000d026 <Fs::getcwd(Process*, char*, int)+0x6>
c000d044:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d047:	31 c0                	xor    eax,eax
c000d049:	c3                   	ret    

c000d04a <Fs::initVFS()>:
c000d04a:	83 ec 18             	sub    esp,0x18
c000d04d:	6a 08                	push   0x8
c000d04f:	e8 6f c9 ff ff       	call   c00099c3 <malloc>
c000d054:	89 04 24             	mov    DWORD PTR [esp],eax
c000d057:	e8 18 e6 00 00       	call   c001b674 <FAT::FAT()>
c000d05c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d063:	e8 5b c9 ff ff       	call   c00099c3 <malloc>
c000d068:	89 04 24             	mov    DWORD PTR [esp],eax
c000d06b:	e8 62 f8 00 00       	call   c001c8d2 <ISO9660::ISO9660()>
c000d070:	83 c4 1c             	add    esp,0x1c
c000d073:	c3                   	ret    

c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d074:	55                   	push   ebp
c000d075:	57                   	push   edi
c000d076:	56                   	push   esi
c000d077:	53                   	push   ebx
c000d078:	81 ec 10 04 00 00    	sub    esp,0x410
c000d07e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d085:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d08c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d093:	68 00 04 00 00       	push   0x400
c000d098:	6a 00                	push   0x0
c000d09a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d09e:	56                   	push   esi
c000d09f:	e8 e0 35 ff ff       	call   c0000684 <memset>
c000d0a4:	83 c4 10             	add    esp,0x10
c000d0a7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0ab:	75 0b                	jne    c000d0b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0ad:	50                   	push   eax
c000d0ae:	50                   	push   eax
c000d0af:	57                   	push   edi
c000d0b0:	56                   	push   esi
c000d0b1:	e8 8a 36 ff ff       	call   c0000740 <strcpy>
c000d0b6:	eb 41                	jmp    c000d0f9 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d0b8:	8a 07                	mov    al,BYTE PTR [edi]
c000d0ba:	3c 5c                	cmp    al,0x5c
c000d0bc:	74 04                	je     c000d0c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d0be:	3c 2f                	cmp    al,0x2f
c000d0c0:	75 18                	jne    c000d0da <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d0c2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d0c5:	3c 60                	cmp    al,0x60
c000d0c7:	7e 03                	jle    c000d0cc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d0c9:	83 e8 20             	sub    eax,0x20
c000d0cc:	88 04 24             	mov    BYTE PTR [esp],al
c000d0cf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d0d6:	50                   	push   eax
c000d0d7:	50                   	push   eax
c000d0d8:	eb 18                	jmp    c000d0f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d0da:	50                   	push   eax
c000d0db:	50                   	push   eax
c000d0dc:	55                   	push   ebp
c000d0dd:	56                   	push   esi
c000d0de:	e8 5d 36 ff ff       	call   c0000740 <strcpy>
c000d0e3:	5a                   	pop    edx
c000d0e4:	59                   	pop    ecx
c000d0e5:	68 32 62 02 c0       	push   0xc0026232
c000d0ea:	56                   	push   esi
c000d0eb:	e8 90 37 ff ff       	call   c0000880 <strcat>
c000d0f0:	5d                   	pop    ebp
c000d0f1:	58                   	pop    eax
c000d0f2:	57                   	push   edi
c000d0f3:	56                   	push   esi
c000d0f4:	e8 87 37 ff ff       	call   c0000880 <strcat>
c000d0f9:	83 c4 10             	add    esp,0x10
c000d0fc:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d0ff:	3c 60                	cmp    al,0x60
c000d101:	7e 03                	jle    c000d106 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d103:	83 e8 20             	sub    eax,0x20
c000d106:	88 04 24             	mov    BYTE PTR [esp],al
c000d109:	88 03                	mov    BYTE PTR [ebx],al
c000d10b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d112:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d118:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d11c:	bf 03 00 00 00       	mov    edi,0x3
c000d121:	b8 03 00 00 00       	mov    eax,0x3
c000d126:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d129:	84 d2                	test   dl,dl
c000d12b:	0f 84 91 00 00 00    	je     c000d1c2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d131:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d134:	80 fa 5c             	cmp    dl,0x5c
c000d137:	74 05                	je     c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d139:	80 fa 2f             	cmp    dl,0x2f
c000d13c:	75 12                	jne    c000d150 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d13e:	89 c5                	mov    ebp,eax
c000d140:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d145:	74 09                	je     c000d150 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d147:	40                   	inc    eax
c000d148:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d14c:	89 cf                	mov    edi,ecx
c000d14e:	eb d6                	jmp    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d150:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d155:	75 5b                	jne    c000d1b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d157:	80 fa 2e             	cmp    dl,0x2e
c000d15a:	75 56                	jne    c000d1b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d15c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d160:	74 19                	je     c000d17b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d162:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d167:	74 53                	je     c000d1bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d169:	89 f9                	mov    ecx,edi
c000d16b:	41                   	inc    ecx
c000d16c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d16f:	80 fa 2f             	cmp    dl,0x2f
c000d172:	74 f7                	je     c000d16b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d174:	80 fa 5c             	cmp    dl,0x5c
c000d177:	74 f2                	je     c000d16b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d179:	eb d1                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d17b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d180:	74 3a                	je     c000d1bc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d182:	83 f8 03             	cmp    eax,0x3
c000d185:	74 c5                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d187:	41                   	inc    ecx
c000d188:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d18b:	80 fa 2f             	cmp    dl,0x2f
c000d18e:	74 f7                	je     c000d187 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d190:	80 fa 5c             	cmp    dl,0x5c
c000d193:	74 f2                	je     c000d187 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d195:	48                   	dec    eax
c000d196:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d19a:	75 06                	jne    c000d1a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d19c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1a0:	eb f3                	jmp    c000d195 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1a2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1a6:	74 07                	je     c000d1af <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1a8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ac:	48                   	dec    eax
c000d1ad:	eb f3                	jmp    c000d1a2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1af:	40                   	inc    eax
c000d1b0:	eb 9a                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1b2:	80 fa 2f             	cmp    dl,0x2f
c000d1b5:	74 95                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1b7:	80 fa 5c             	cmp    dl,0x5c
c000d1ba:	74 90                	je     c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1bc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d1bf:	40                   	inc    eax
c000d1c0:	eb 8a                	jmp    c000d14c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1c6:	83 ec 0c             	sub    esp,0xc
c000d1c9:	53                   	push   ebx
c000d1ca:	e8 d1 34 ff ff       	call   c00006a0 <strlen>
c000d1cf:	83 c4 10             	add    esp,0x10
c000d1d2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d1d7:	75 26                	jne    c000d1ff <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d1d9:	83 ec 0c             	sub    esp,0xc
c000d1dc:	53                   	push   ebx
c000d1dd:	e8 be 34 ff ff       	call   c00006a0 <strlen>
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d1ea:	74 26                	je     c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d1ec:	83 ec 0c             	sub    esp,0xc
c000d1ef:	53                   	push   ebx
c000d1f0:	e8 ab 34 ff ff       	call   c00006a0 <strlen>
c000d1f5:	83 c4 10             	add    esp,0x10
c000d1f8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d1fd:	eb c7                	jmp    c000d1c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d1ff:	83 ec 0c             	sub    esp,0xc
c000d202:	53                   	push   ebx
c000d203:	e8 98 34 ff ff       	call   c00006a0 <strlen>
c000d208:	83 c4 10             	add    esp,0x10
c000d20b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d210:	74 c7                	je     c000d1d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d212:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d218:	5b                   	pop    ebx
c000d219:	5e                   	pop    esi
c000d21a:	5f                   	pop    edi
c000d21b:	5d                   	pop    ebp
c000d21c:	c3                   	ret    
c000d21d:	90                   	nop

c000d21e <File::File(char const*, Process*)>:
c000d21e:	83 ec 0c             	sub    esp,0xc
c000d221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d225:	83 ec 08             	sub    esp,0x8
c000d228:	6a 00                	push   0x0
c000d22a:	50                   	push   eax
c000d22b:	e8 1a e3 ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	ba 7c 4c 02 c0       	mov    edx,0xc0024c7c
c000d238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d23c:	89 10                	mov    DWORD PTR [eax],edx
c000d23e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d242:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	83 c0 0d             	add    eax,0xd
c000d24f:	83 ec 04             	sub    esp,0x4
c000d252:	52                   	push   edx
c000d253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d257:	50                   	push   eax
c000d258:	e8 17 fe ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d25d:	83 c4 10             	add    esp,0x10
c000d260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d264:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d267:	8d 50 bf             	lea    edx,[eax-0x41]
c000d26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d278:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d27c:	90                   	nop
c000d27d:	83 c4 0c             	add    esp,0xc
c000d280:	c3                   	ret    
c000d281:	90                   	nop

c000d282 <File::open(FileOpenMode)>:
c000d282:	53                   	push   ebx
c000d283:	b8 0b 00 00 00       	mov    eax,0xb
c000d288:	83 ec 08             	sub    esp,0x8
c000d28b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d28f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d296:	80 fa 19             	cmp    dl,0x19
c000d299:	77 40                	ja     c000d2db <File::open(FileOpenMode)+0x59>
c000d29b:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000d2a2:	85 d2                	test   edx,edx
c000d2a4:	74 35                	je     c000d2db <File::open(FileOpenMode)+0x59>
c000d2a6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d2ac:	85 d2                	test   edx,edx
c000d2ae:	74 2b                	je     c000d2db <File::open(FileOpenMode)+0x59>
c000d2b0:	b8 06 00 00 00       	mov    eax,0x6
c000d2b5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d2b9:	75 20                	jne    c000d2db <File::open(FileOpenMode)+0x59>
c000d2bb:	8b 02                	mov    eax,DWORD PTR [edx]
c000d2bd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d2c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c7:	51                   	push   ecx
c000d2c8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d2cb:	51                   	push   ecx
c000d2cc:	52                   	push   edx
c000d2cd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d2d0:	83 c4 10             	add    esp,0x10
c000d2d3:	85 c0                	test   eax,eax
c000d2d5:	75 04                	jne    c000d2db <File::open(FileOpenMode)+0x59>
c000d2d7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d2db:	83 c4 08             	add    esp,0x8
c000d2de:	5b                   	pop    ebx
c000d2df:	c3                   	ret    

c000d2e0 <File::close()>:
c000d2e0:	53                   	push   ebx
c000d2e1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2e6:	83 ec 08             	sub    esp,0x8
c000d2e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d2ed:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d2f4:	80 fa 19             	cmp    dl,0x19
c000d2f7:	77 41                	ja     c000d33a <File::close()+0x5a>
c000d2f9:	8b 1c 95 40 87 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd78c0]
c000d300:	85 db                	test   ebx,ebx
c000d302:	74 36                	je     c000d33a <File::close()+0x5a>
c000d304:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d30b:	74 2d                	je     c000d33a <File::close()+0x5a>
c000d30d:	b8 05 00 00 00       	mov    eax,0x5
c000d312:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d316:	74 22                	je     c000d33a <File::close()+0x5a>
c000d318:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d31c:	8b 04 95 40 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd78c0]
c000d323:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d329:	53                   	push   ebx
c000d32a:	53                   	push   ebx
c000d32b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d32d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d333:	50                   	push   eax
c000d334:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d337:	83 c4 10             	add    esp,0x10
c000d33a:	83 c4 08             	add    esp,0x8
c000d33d:	5b                   	pop    ebx
c000d33e:	c3                   	ret    
c000d33f:	90                   	nop

c000d340 <File::seek(unsigned long long)>:
c000d340:	56                   	push   esi
c000d341:	53                   	push   ebx
c000d342:	b8 0b 00 00 00       	mov    eax,0xb
c000d347:	51                   	push   ecx
c000d348:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d34c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d350:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d357:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d35b:	80 fa 19             	cmp    dl,0x19
c000d35e:	77 31                	ja     c000d391 <File::seek(unsigned long long)+0x51>
c000d360:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000d367:	85 d2                	test   edx,edx
c000d369:	74 26                	je     c000d391 <File::seek(unsigned long long)+0x51>
c000d36b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d371:	85 d2                	test   edx,edx
c000d373:	74 1c                	je     c000d391 <File::seek(unsigned long long)+0x51>
c000d375:	b8 05 00 00 00       	mov    eax,0x5
c000d37a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d37e:	74 11                	je     c000d391 <File::seek(unsigned long long)+0x51>
c000d380:	8b 02                	mov    eax,DWORD PTR [edx]
c000d382:	53                   	push   ebx
c000d383:	51                   	push   ecx
c000d384:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d38a:	52                   	push   edx
c000d38b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	5a                   	pop    edx
c000d392:	5b                   	pop    ebx
c000d393:	5e                   	pop    esi
c000d394:	c3                   	ret    
c000d395:	90                   	nop

c000d396 <File::tell(unsigned long long*)>:
c000d396:	83 ec 0c             	sub    esp,0xc
c000d399:	b8 0b 00 00 00       	mov    eax,0xb
c000d39e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d3a2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d3a9:	80 fa 19             	cmp    dl,0x19
c000d3ac:	77 34                	ja     c000d3e2 <File::tell(unsigned long long*)+0x4c>
c000d3ae:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000d3b5:	85 d2                	test   edx,edx
c000d3b7:	74 29                	je     c000d3e2 <File::tell(unsigned long long*)+0x4c>
c000d3b9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d3bf:	85 d2                	test   edx,edx
c000d3c1:	74 1f                	je     c000d3e2 <File::tell(unsigned long long*)+0x4c>
c000d3c3:	b8 05 00 00 00       	mov    eax,0x5
c000d3c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3cc:	74 14                	je     c000d3e2 <File::tell(unsigned long long*)+0x4c>
c000d3ce:	50                   	push   eax
c000d3cf:	8b 02                	mov    eax,DWORD PTR [edx]
c000d3d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3db:	52                   	push   edx
c000d3dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d3df:	83 c4 10             	add    esp,0x10
c000d3e2:	83 c4 0c             	add    esp,0xc
c000d3e5:	c3                   	ret    

c000d3e6 <File::rewind()>:
c000d3e6:	83 ec 10             	sub    esp,0x10
c000d3e9:	6a 00                	push   0x0
c000d3eb:	6a 00                	push   0x0
c000d3ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f1:	e8 4a ff ff ff       	call   c000d340 <File::seek(unsigned long long)>
c000d3f6:	83 c4 1c             	add    esp,0x1c
c000d3f9:	c3                   	ret    

c000d3fa <File::unlink()>:
c000d3fa:	83 ec 0c             	sub    esp,0xc
c000d3fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d406:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d40d:	80 f9 19             	cmp    cl,0x19
c000d410:	77 2f                	ja     c000d441 <File::unlink()+0x47>
c000d412:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d419:	85 c9                	test   ecx,ecx
c000d41b:	74 24                	je     c000d441 <File::unlink()+0x47>
c000d41d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d423:	85 c9                	test   ecx,ecx
c000d425:	74 1a                	je     c000d441 <File::unlink()+0x47>
c000d427:	b8 06 00 00 00       	mov    eax,0x6
c000d42c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d430:	75 0f                	jne    c000d441 <File::unlink()+0x47>
c000d432:	83 c2 0d             	add    edx,0xd
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d439:	52                   	push   edx
c000d43a:	51                   	push   ecx
c000d43b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d43e:	83 c4 10             	add    esp,0x10
c000d441:	83 c4 0c             	add    esp,0xc
c000d444:	c3                   	ret    
c000d445:	90                   	nop

c000d446 <File::rename(char const*)>:
c000d446:	83 ec 0c             	sub    esp,0xc
c000d449:	b8 0b 00 00 00       	mov    eax,0xb
c000d44e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d452:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d459:	80 f9 19             	cmp    cl,0x19
c000d45c:	77 32                	ja     c000d490 <File::rename(char const*)+0x4a>
c000d45e:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d465:	85 c9                	test   ecx,ecx
c000d467:	74 27                	je     c000d490 <File::rename(char const*)+0x4a>
c000d469:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d46f:	85 c9                	test   ecx,ecx
c000d471:	74 1d                	je     c000d490 <File::rename(char const*)+0x4a>
c000d473:	b8 06 00 00 00       	mov    eax,0x6
c000d478:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d47c:	75 12                	jne    c000d490 <File::rename(char const*)+0x4a>
c000d47e:	83 c2 0d             	add    edx,0xd
c000d481:	50                   	push   eax
c000d482:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d488:	52                   	push   edx
c000d489:	51                   	push   ecx
c000d48a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d48d:	83 c4 10             	add    esp,0x10
c000d490:	83 c4 0c             	add    esp,0xc
c000d493:	c3                   	ret    

c000d494 <File::chfatattr(unsigned char, unsigned char)>:
c000d494:	57                   	push   edi
c000d495:	b8 0b 00 00 00       	mov    eax,0xb
c000d49a:	56                   	push   esi
c000d49b:	53                   	push   ebx
c000d49c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d4a4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4ab:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d4af:	80 f9 19             	cmp    cl,0x19
c000d4b2:	77 37                	ja     c000d4eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4b4:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d4bb:	85 c9                	test   ecx,ecx
c000d4bd:	74 2c                	je     c000d4eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4c5:	85 c9                	test   ecx,ecx
c000d4c7:	74 22                	je     c000d4eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4c9:	b8 06 00 00 00       	mov    eax,0x6
c000d4ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4d2:	75 17                	jne    c000d4eb <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d4d4:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d4d6:	89 f0                	mov    eax,esi
c000d4d8:	83 c2 0d             	add    edx,0xd
c000d4db:	0f b6 f0             	movzx  esi,al
c000d4de:	0f b6 db             	movzx  ebx,bl
c000d4e1:	56                   	push   esi
c000d4e2:	53                   	push   ebx
c000d4e3:	52                   	push   edx
c000d4e4:	51                   	push   ecx
c000d4e5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	5b                   	pop    ebx
c000d4ec:	5e                   	pop    esi
c000d4ed:	5f                   	pop    edi
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <File::exists()>:
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	31 c0                	xor    eax,eax
c000d4f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4f9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d500:	80 f9 19             	cmp    cl,0x19
c000d503:	77 24                	ja     c000d529 <File::exists()+0x39>
c000d505:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d50c:	85 c9                	test   ecx,ecx
c000d50e:	74 19                	je     c000d529 <File::exists()+0x39>
c000d510:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d516:	85 c9                	test   ecx,ecx
c000d518:	74 0f                	je     c000d529 <File::exists()+0x39>
c000d51a:	83 c2 0d             	add    edx,0xd
c000d51d:	50                   	push   eax
c000d51e:	50                   	push   eax
c000d51f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d521:	52                   	push   edx
c000d522:	51                   	push   ecx
c000d523:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d526:	83 c4 10             	add    esp,0x10
c000d529:	83 c4 0c             	add    esp,0xc
c000d52c:	c3                   	ret    
c000d52d:	90                   	nop

c000d52e <File::stat(unsigned long long*, bool*)>:
c000d52e:	56                   	push   esi
c000d52f:	53                   	push   ebx
c000d530:	50                   	push   eax
c000d531:	b8 0b 00 00 00       	mov    eax,0xb
c000d536:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d53a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d53e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d545:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d549:	80 f9 19             	cmp    cl,0x19
c000d54c:	77 3d                	ja     c000d58b <File::stat(unsigned long long*, bool*)+0x5d>
c000d54e:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d555:	85 c9                	test   ecx,ecx
c000d557:	74 32                	je     c000d58b <File::stat(unsigned long long*, bool*)+0x5d>
c000d559:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d55f:	85 c9                	test   ecx,ecx
c000d561:	74 28                	je     c000d58b <File::stat(unsigned long long*, bool*)+0x5d>
c000d563:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d565:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d569:	74 13                	je     c000d57e <File::stat(unsigned long long*, bool*)+0x50>
c000d56b:	83 ec 04             	sub    esp,0x4
c000d56e:	56                   	push   esi
c000d56f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d575:	51                   	push   ecx
c000d576:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d579:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d57c:	eb 0a                	jmp    c000d588 <File::stat(unsigned long long*, bool*)+0x5a>
c000d57e:	53                   	push   ebx
c000d57f:	83 c2 0d             	add    edx,0xd
c000d582:	56                   	push   esi
c000d583:	52                   	push   edx
c000d584:	51                   	push   ecx
c000d585:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d588:	83 c4 10             	add    esp,0x10
c000d58b:	5a                   	pop    edx
c000d58c:	5b                   	pop    ebx
c000d58d:	5e                   	pop    esi
c000d58e:	c3                   	ret    

c000d58f <Fs::setcwd(Process*, char*)>:
c000d58f:	55                   	push   ebp
c000d590:	57                   	push   edi
c000d591:	56                   	push   esi
c000d592:	53                   	push   ebx
c000d593:	81 ec 20 02 00 00    	sub    esp,0x220
c000d599:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d5a0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d5a6:	57                   	push   edi
c000d5a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d5ae:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d5b2:	56                   	push   esi
c000d5b3:	e8 bc fa ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d5b8:	89 34 24             	mov    DWORD PTR [esp],esi
c000d5bb:	e8 e0 30 ff ff       	call   c00006a0 <strlen>
c000d5c0:	83 c4 10             	add    esp,0x10
c000d5c3:	83 f8 02             	cmp    eax,0x2
c000d5c6:	77 17                	ja     c000d5df <Fs::setcwd(Process*, char*)+0x50>
c000d5c8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d5cd:	83 e8 41             	sub    eax,0x41
c000d5d0:	83 f8 19             	cmp    eax,0x19
c000d5d3:	76 24                	jbe    c000d5f9 <Fs::setcwd(Process*, char*)+0x6a>
c000d5d5:	b8 03 00 00 00       	mov    eax,0x3
c000d5da:	e9 e0 00 00 00       	jmp    c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	56                   	push   esi
c000d5e3:	e8 b8 30 ff ff       	call   c00006a0 <strlen>
c000d5e8:	83 c4 10             	add    esp,0x10
c000d5eb:	83 f8 03             	cmp    eax,0x3
c000d5ee:	75 34                	jne    c000d624 <Fs::setcwd(Process*, char*)+0x95>
c000d5f0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d5f5:	75 2d                	jne    c000d624 <Fs::setcwd(Process*, char*)+0x95>
c000d5f7:	eb cf                	jmp    c000d5c8 <Fs::setcwd(Process*, char*)+0x39>
c000d5f9:	8b 14 85 40 87 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd78c0]
c000d600:	b8 05 00 00 00       	mov    eax,0x5
c000d605:	85 d2                	test   edx,edx
c000d607:	0f 84 b2 00 00 00    	je     c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d60d:	b8 06 00 00 00       	mov    eax,0x6
c000d612:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d619:	0f 85 92 00 00 00    	jne    c000d6b1 <Fs::setcwd(Process*, char*)+0x122>
c000d61f:	e9 9b 00 00 00       	jmp    c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d624:	83 ec 0c             	sub    esp,0xc
c000d627:	68 14 01 00 00       	push   0x114
c000d62c:	e8 92 c3 ff ff       	call   c00099c3 <malloc>
c000d631:	83 c4 0c             	add    esp,0xc
c000d634:	89 c3                	mov    ebx,eax
c000d636:	55                   	push   ebp
c000d637:	56                   	push   esi
c000d638:	50                   	push   eax
c000d639:	e8 e0 fb ff ff       	call   c000d21e <File::File(char const*, Process*)>
c000d63e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d643:	83 c4 0c             	add    esp,0xc
c000d646:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d64a:	50                   	push   eax
c000d64b:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d64f:	50                   	push   eax
c000d650:	53                   	push   ebx
c000d651:	e8 d8 fe ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c000d656:	83 c4 10             	add    esp,0x10
c000d659:	83 f8 02             	cmp    eax,0x2
c000d65c:	74 04                	je     c000d662 <Fs::setcwd(Process*, char*)+0xd3>
c000d65e:	85 c0                	test   eax,eax
c000d660:	74 1c                	je     c000d67e <Fs::setcwd(Process*, char*)+0xef>
c000d662:	b8 01 00 00 00       	mov    eax,0x1
c000d667:	85 db                	test   ebx,ebx
c000d669:	74 54                	je     c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d66b:	83 ec 0c             	sub    esp,0xc
c000d66e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d670:	53                   	push   ebx
c000d671:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d674:	83 c4 10             	add    esp,0x10
c000d677:	b8 01 00 00 00       	mov    eax,0x1
c000d67c:	eb 41                	jmp    c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d67e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d683:	75 1c                	jne    c000d6a1 <Fs::setcwd(Process*, char*)+0x112>
c000d685:	b8 02 00 00 00       	mov    eax,0x2
c000d68a:	85 db                	test   ebx,ebx
c000d68c:	74 31                	je     c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d68e:	83 ec 0c             	sub    esp,0xc
c000d691:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d693:	53                   	push   ebx
c000d694:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	b8 02 00 00 00       	mov    eax,0x2
c000d69f:	eb 1e                	jmp    c000d6bf <Fs::setcwd(Process*, char*)+0x130>
c000d6a1:	85 db                	test   ebx,ebx
c000d6a3:	74 0c                	je     c000d6b1 <Fs::setcwd(Process*, char*)+0x122>
c000d6a5:	83 ec 0c             	sub    esp,0xc
c000d6a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6aa:	53                   	push   ebx
c000d6ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d6ae:	83 c4 10             	add    esp,0x10
c000d6b1:	50                   	push   eax
c000d6b2:	50                   	push   eax
c000d6b3:	56                   	push   esi
c000d6b4:	57                   	push   edi
c000d6b5:	e8 86 30 ff ff       	call   c0000740 <strcpy>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	31 c0                	xor    eax,eax
c000d6bf:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d6c5:	5b                   	pop    ebx
c000d6c6:	5e                   	pop    esi
c000d6c7:	5f                   	pop    edi
c000d6c8:	5d                   	pop    ebp
c000d6c9:	c3                   	ret    

c000d6ca <Directory::Directory(char const*, Process*)>:
c000d6ca:	83 ec 0c             	sub    esp,0xc
c000d6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d1:	83 ec 08             	sub    esp,0x8
c000d6d4:	6a 00                	push   0x0
c000d6d6:	50                   	push   eax
c000d6d7:	e8 6e de ff ff       	call   c000b54a <UnixFile::UnixFile(int)>
c000d6dc:	83 c4 10             	add    esp,0x10
c000d6df:	ba 98 4c 02 c0       	mov    edx,0xc0024c98
c000d6e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e8:	89 10                	mov    DWORD PTR [eax],edx
c000d6ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d6ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f8:	83 c0 0d             	add    eax,0xd
c000d6fb:	83 ec 04             	sub    esp,0x4
c000d6fe:	52                   	push   edx
c000d6ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d703:	50                   	push   eax
c000d704:	e8 6b f9 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d710:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d713:	8d 50 bf             	lea    edx,[eax-0x41]
c000d716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d724:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d728:	90                   	nop
c000d729:	83 c4 0c             	add    esp,0xc
c000d72c:	c3                   	ret    
c000d72d:	90                   	nop

c000d72e <Directory::open()>:
c000d72e:	53                   	push   ebx
c000d72f:	b8 0b 00 00 00       	mov    eax,0xb
c000d734:	83 ec 08             	sub    esp,0x8
c000d737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d73b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d742:	80 fa 19             	cmp    dl,0x19
c000d745:	77 3d                	ja     c000d784 <Directory::open()+0x56>
c000d747:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000d74e:	85 d2                	test   edx,edx
c000d750:	74 32                	je     c000d784 <Directory::open()+0x56>
c000d752:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d758:	85 d2                	test   edx,edx
c000d75a:	74 28                	je     c000d784 <Directory::open()+0x56>
c000d75c:	b8 06 00 00 00       	mov    eax,0x6
c000d761:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d765:	75 1d                	jne    c000d784 <Directory::open()+0x56>
c000d767:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d76d:	50                   	push   eax
c000d76e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d770:	51                   	push   ecx
c000d771:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d774:	51                   	push   ecx
c000d775:	52                   	push   edx
c000d776:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d779:	83 c4 10             	add    esp,0x10
c000d77c:	85 c0                	test   eax,eax
c000d77e:	75 04                	jne    c000d784 <Directory::open()+0x56>
c000d780:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d784:	83 c4 08             	add    esp,0x8
c000d787:	5b                   	pop    ebx
c000d788:	c3                   	ret    
c000d789:	90                   	nop

c000d78a <Directory::close()>:
c000d78a:	53                   	push   ebx
c000d78b:	b8 0b 00 00 00       	mov    eax,0xb
c000d790:	83 ec 08             	sub    esp,0x8
c000d793:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d797:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d79e:	80 fa 19             	cmp    dl,0x19
c000d7a1:	77 41                	ja     c000d7e4 <Directory::close()+0x5a>
c000d7a3:	8b 1c 95 40 87 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd78c0]
c000d7aa:	85 db                	test   ebx,ebx
c000d7ac:	74 36                	je     c000d7e4 <Directory::close()+0x5a>
c000d7ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d7b5:	74 2d                	je     c000d7e4 <Directory::close()+0x5a>
c000d7b7:	b8 05 00 00 00       	mov    eax,0x5
c000d7bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7c0:	74 22                	je     c000d7e4 <Directory::close()+0x5a>
c000d7c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d7c6:	8b 04 95 40 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd78c0]
c000d7cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d7d3:	53                   	push   ebx
c000d7d4:	53                   	push   ebx
c000d7d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d7d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7dd:	50                   	push   eax
c000d7de:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	83 c4 08             	add    esp,0x8
c000d7e7:	5b                   	pop    ebx
c000d7e8:	c3                   	ret    
c000d7e9:	90                   	nop

c000d7ea <Directory::unlink()>:
c000d7ea:	83 ec 0c             	sub    esp,0xc
c000d7ed:	b8 0b 00 00 00       	mov    eax,0xb
c000d7f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7f6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7fd:	80 f9 19             	cmp    cl,0x19
c000d800:	77 2f                	ja     c000d831 <Directory::unlink()+0x47>
c000d802:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d809:	85 c9                	test   ecx,ecx
c000d80b:	74 24                	je     c000d831 <Directory::unlink()+0x47>
c000d80d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d813:	85 c9                	test   ecx,ecx
c000d815:	74 1a                	je     c000d831 <Directory::unlink()+0x47>
c000d817:	b8 06 00 00 00       	mov    eax,0x6
c000d81c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d820:	75 0f                	jne    c000d831 <Directory::unlink()+0x47>
c000d822:	83 c2 0d             	add    edx,0xd
c000d825:	50                   	push   eax
c000d826:	50                   	push   eax
c000d827:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d829:	52                   	push   edx
c000d82a:	51                   	push   ecx
c000d82b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d82e:	83 c4 10             	add    esp,0x10
c000d831:	83 c4 0c             	add    esp,0xc
c000d834:	c3                   	ret    
c000d835:	90                   	nop

c000d836 <Directory::rename(char const*)>:
c000d836:	83 ec 0c             	sub    esp,0xc
c000d839:	b8 0b 00 00 00       	mov    eax,0xb
c000d83e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d842:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d849:	80 f9 19             	cmp    cl,0x19
c000d84c:	77 32                	ja     c000d880 <Directory::rename(char const*)+0x4a>
c000d84e:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d855:	85 c9                	test   ecx,ecx
c000d857:	74 27                	je     c000d880 <Directory::rename(char const*)+0x4a>
c000d859:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d85f:	85 c9                	test   ecx,ecx
c000d861:	74 1d                	je     c000d880 <Directory::rename(char const*)+0x4a>
c000d863:	b8 06 00 00 00       	mov    eax,0x6
c000d868:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d86c:	75 12                	jne    c000d880 <Directory::rename(char const*)+0x4a>
c000d86e:	83 c2 0d             	add    edx,0xd
c000d871:	50                   	push   eax
c000d872:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d874:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d878:	52                   	push   edx
c000d879:	51                   	push   ecx
c000d87a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d87d:	83 c4 10             	add    esp,0x10
c000d880:	83 c4 0c             	add    esp,0xc
c000d883:	c3                   	ret    

c000d884 <Directory::exists()>:
c000d884:	83 ec 0c             	sub    esp,0xc
c000d887:	31 c0                	xor    eax,eax
c000d889:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d88d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d894:	80 f9 19             	cmp    cl,0x19
c000d897:	77 24                	ja     c000d8bd <Directory::exists()+0x39>
c000d899:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d8a0:	85 c9                	test   ecx,ecx
c000d8a2:	74 19                	je     c000d8bd <Directory::exists()+0x39>
c000d8a4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8aa:	85 c9                	test   ecx,ecx
c000d8ac:	74 0f                	je     c000d8bd <Directory::exists()+0x39>
c000d8ae:	83 c2 0d             	add    edx,0xd
c000d8b1:	50                   	push   eax
c000d8b2:	50                   	push   eax
c000d8b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8b5:	52                   	push   edx
c000d8b6:	51                   	push   ecx
c000d8b7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8ba:	83 c4 10             	add    esp,0x10
c000d8bd:	83 c4 0c             	add    esp,0xc
c000d8c0:	c3                   	ret    
c000d8c1:	90                   	nop

c000d8c2 <Directory::read(dirent*)>:
c000d8c2:	83 ec 1c             	sub    esp,0x1c
c000d8c5:	b8 0b 00 00 00       	mov    eax,0xb
c000d8ca:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d8ce:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d8d5:	80 fa 19             	cmp    dl,0x19
c000d8d8:	77 30                	ja     c000d90a <Directory::read(dirent*)+0x48>
c000d8da:	8b 14 95 40 87 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd78c0]
c000d8e1:	85 d2                	test   edx,edx
c000d8e3:	74 25                	je     c000d90a <Directory::read(dirent*)+0x48>
c000d8e5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d8ec:	74 1c                	je     c000d90a <Directory::read(dirent*)+0x48>
c000d8ee:	83 ec 0c             	sub    esp,0xc
c000d8f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d8f7:	52                   	push   edx
c000d8f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fc:	6a 00                	push   0x0
c000d8fe:	68 10 01 00 00       	push   0x110
c000d903:	51                   	push   ecx
c000d904:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d907:	83 c4 20             	add    esp,0x20
c000d90a:	83 c4 1c             	add    esp,0x1c
c000d90d:	c3                   	ret    

c000d90e <Directory::create()>:
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	b8 0b 00 00 00       	mov    eax,0xb
c000d916:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d921:	80 f9 19             	cmp    cl,0x19
c000d924:	77 2f                	ja     c000d955 <Directory::create()+0x47>
c000d926:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c000d92d:	85 c9                	test   ecx,ecx
c000d92f:	74 24                	je     c000d955 <Directory::create()+0x47>
c000d931:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d937:	85 c9                	test   ecx,ecx
c000d939:	74 1a                	je     c000d955 <Directory::create()+0x47>
c000d93b:	b8 06 00 00 00       	mov    eax,0x6
c000d940:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d944:	75 0f                	jne    c000d955 <Directory::create()+0x47>
c000d946:	83 c2 0d             	add    edx,0xd
c000d949:	50                   	push   eax
c000d94a:	50                   	push   eax
c000d94b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d94d:	52                   	push   edx
c000d94e:	51                   	push   ecx
c000d94f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d952:	83 c4 10             	add    esp,0x10
c000d955:	83 c4 0c             	add    esp,0xc
c000d958:	c3                   	ret    
c000d959:	90                   	nop

c000d95a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d95a:	b8 0a 00 00 00       	mov    eax,0xa
c000d95f:	c3                   	ret    

c000d960 <Bus::Bus(char const*)>:
c000d960:	83 ec 0c             	sub    esp,0xc
c000d963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d967:	83 ec 08             	sub    esp,0x8
c000d96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d96e:	50                   	push   eax
c000d96f:	e8 8a 09 00 00       	call   c000e2fe <Device::Device(char const*)>
c000d974:	83 c4 10             	add    esp,0x10
c000d977:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000d97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d980:	89 10                	mov    DWORD PTR [eax],edx
c000d982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d986:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d990:	90                   	nop
c000d991:	83 c4 0c             	add    esp,0xc
c000d994:	c3                   	ret    
c000d995:	90                   	nop
c000d996:	66 90                	xchg   ax,ax

c000d998 <Bus::~Bus()>:
c000d998:	83 ec 0c             	sub    esp,0xc
c000d99b:	ba b4 4c 02 c0       	mov    edx,0xc0024cb4
c000d9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a4:	89 10                	mov    DWORD PTR [eax],edx
c000d9a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9aa:	83 ec 0c             	sub    esp,0xc
c000d9ad:	50                   	push   eax
c000d9ae:	e8 15 06 00 00       	call   c000dfc8 <Device::~Device()>
c000d9b3:	83 c4 10             	add    esp,0x10
c000d9b6:	90                   	nop
c000d9b7:	83 c4 0c             	add    esp,0xc
c000d9ba:	c3                   	ret    
c000d9bb:	90                   	nop

c000d9bc <Bus::~Bus()>:
c000d9bc:	83 ec 0c             	sub    esp,0xc
c000d9bf:	83 ec 0c             	sub    esp,0xc
c000d9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c6:	e8 cd ff ff ff       	call   c000d998 <Bus::~Bus()>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	83 ec 08             	sub    esp,0x8
c000d9d1:	68 58 01 00 00       	push   0x158
c000d9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9da:	e8 f3 f1 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000d9df:	83 c4 10             	add    esp,0x10
c000d9e2:	83 c4 0c             	add    esp,0xc
c000d9e5:	c3                   	ret    
c000d9e6:	66 90                	xchg   ax,ax

c000d9e8 <Buzzer::Buzzer(char const*)>:
c000d9e8:	83 ec 0c             	sub    esp,0xc
c000d9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ef:	83 ec 08             	sub    esp,0x8
c000d9f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9f6:	50                   	push   eax
c000d9f7:	e8 02 09 00 00       	call   c000e2fe <Device::Device(char const*)>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	ba e0 4c 02 c0       	mov    edx,0xc0024ce0
c000da04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da08:	89 10                	mov    DWORD PTR [eax],edx
c000da0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da0e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000da18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da1c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000da26:	90                   	nop
c000da27:	83 c4 0c             	add    esp,0xc
c000da2a:	c3                   	ret    
c000da2b:	90                   	nop

c000da2c <Buzzer::~Buzzer()>:
c000da2c:	83 ec 0c             	sub    esp,0xc
c000da2f:	ba e0 4c 02 c0       	mov    edx,0xc0024ce0
c000da34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da38:	89 10                	mov    DWORD PTR [eax],edx
c000da3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da3e:	83 ec 0c             	sub    esp,0xc
c000da41:	50                   	push   eax
c000da42:	e8 81 05 00 00       	call   c000dfc8 <Device::~Device()>
c000da47:	83 c4 10             	add    esp,0x10
c000da4a:	90                   	nop
c000da4b:	83 c4 0c             	add    esp,0xc
c000da4e:	c3                   	ret    
c000da4f:	90                   	nop

c000da50 <Buzzer::~Buzzer()>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	83 ec 0c             	sub    esp,0xc
c000da56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5a:	e8 cd ff ff ff       	call   c000da2c <Buzzer::~Buzzer()>
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	83 ec 08             	sub    esp,0x8
c000da65:	68 5c 01 00 00       	push   0x15c
c000da6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6e:	e8 5f f1 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000da73:	83 c4 10             	add    esp,0x10
c000da76:	83 c4 0c             	add    esp,0xc
c000da79:	c3                   	ret    

c000da7a <Buzzer::stop()>:
c000da7a:	83 ec 14             	sub    esp,0x14
c000da7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da81:	8b 10                	mov    edx,DWORD PTR [eax]
c000da83:	6a 00                	push   0x0
c000da85:	50                   	push   eax
c000da86:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da89:	83 c4 1c             	add    esp,0x1c
c000da8c:	c3                   	ret    

c000da8d <beepThread(void*)>:
c000da8d:	53                   	push   ebx
c000da8e:	83 ec 08             	sub    esp,0x8
c000da91:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000da96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da9a:	48                   	dec    eax
c000da9b:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000daa0:	75 02                	jne    c000daa4 <beepThread(void*)+0x17>
c000daa2:	fb                   	sti    
c000daa3:	90                   	nop
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000daae:	50                   	push   eax
c000daaf:	e8 34 ac 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c000dab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dab7:	e8 be ff ff ff       	call   c000da7a <Buzzer::stop()>
c000dabc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dac4:	83 c4 18             	add    esp,0x18
c000dac7:	5b                   	pop    ebx
c000dac8:	e9 1b ab 00 00       	jmp    c00185e8 <blockTask(TaskState)>
c000dacd:	90                   	nop

c000dace <Buzzer::beep(int, int, bool)>:
c000dace:	57                   	push   edi
c000dacf:	56                   	push   esi
c000dad0:	53                   	push   ebx
c000dad1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dad5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dad9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dadd:	50                   	push   eax
c000dade:	50                   	push   eax
c000dadf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dae1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae5:	53                   	push   ebx
c000dae6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dae9:	83 c4 10             	add    esp,0x10
c000daec:	89 f8                	mov    eax,edi
c000daee:	84 c0                	test   al,al
c000daf0:	74 1e                	je     c000db10 <Buzzer::beep(int, int, bool)+0x42>
c000daf2:	83 ec 0c             	sub    esp,0xc
c000daf5:	6b f6 0a             	imul   esi,esi,0xa
c000daf8:	56                   	push   esi
c000daf9:	e8 ea ab 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db05:	5b                   	pop    ebx
c000db06:	5e                   	pop    esi
c000db07:	5f                   	pop    edi
c000db08:	e9 6d ff ff ff       	jmp    c000da7a <Buzzer::stop()>
c000db0d:	8d 76 00             	lea    esi,[esi+0x0]
c000db10:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000db16:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000db1b:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000db23:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db27:	c7 44 24 14 8d da 00 c0 	mov    DWORD PTR [esp+0x14],0xc000da8d
c000db2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db33:	5b                   	pop    ebx
c000db34:	5e                   	pop    esi
c000db35:	5f                   	pop    edi
c000db36:	e9 99 a6 00 00       	jmp    c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000db3b:	90                   	nop

c000db3c <User::loadClockSettings(int)>:
c000db3c:	53                   	push   ebx
c000db3d:	83 ec 14             	sub    esp,0x14
c000db40:	68 14 01 00 00       	push   0x114
c000db45:	e8 79 be ff ff       	call   c00099c3 <malloc>
c000db4a:	83 c4 0c             	add    esp,0xc
c000db4d:	89 c3                	mov    ebx,eax
c000db4f:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c000db55:	68 08 4d 02 c0       	push   0xc0024d08
c000db5a:	50                   	push   eax
c000db5b:	e8 be f6 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c000db60:	58                   	pop    eax
c000db61:	5a                   	pop    edx
c000db62:	6a 01                	push   0x1
c000db64:	53                   	push   ebx
c000db65:	e8 18 f7 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c000db6a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db6d:	e8 6e f7 ff ff       	call   c000d2e0 <File::close()>
c000db72:	83 c4 10             	add    esp,0x10
c000db75:	85 db                	test   ebx,ebx
c000db77:	74 0f                	je     c000db88 <User::loadClockSettings(int)+0x4c>
c000db79:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000db7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000db82:	83 c4 08             	add    esp,0x8
c000db85:	5b                   	pop    ebx
c000db86:	ff e0                	jmp    eax
c000db88:	83 c4 08             	add    esp,0x8
c000db8b:	5b                   	pop    ebx
c000db8c:	c3                   	ret    
c000db8d:	90                   	nop

c000db8e <Clock::Clock(char const*)>:
c000db8e:	83 ec 0c             	sub    esp,0xc
c000db91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db95:	83 ec 08             	sub    esp,0x8
c000db98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9c:	50                   	push   eax
c000db9d:	e8 5c 07 00 00       	call   c000e2fe <Device::Device(char const*)>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c000dbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbae:	89 10                	mov    DWORD PTR [eax],edx
c000dbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dbbe:	90                   	nop
c000dbbf:	83 c4 0c             	add    esp,0xc
c000dbc2:	c3                   	ret    
c000dbc3:	90                   	nop

c000dbc4 <Clock::~Clock()>:
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	ba 30 4d 02 c0       	mov    edx,0xc0024d30
c000dbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd0:	89 10                	mov    DWORD PTR [eax],edx
c000dbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd6:	83 ec 0c             	sub    esp,0xc
c000dbd9:	50                   	push   eax
c000dbda:	e8 e9 03 00 00       	call   c000dfc8 <Device::~Device()>
c000dbdf:	83 c4 10             	add    esp,0x10
c000dbe2:	90                   	nop
c000dbe3:	83 c4 0c             	add    esp,0xc
c000dbe6:	c3                   	ret    
c000dbe7:	90                   	nop

c000dbe8 <Clock::~Clock()>:
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	83 ec 0c             	sub    esp,0xc
c000dbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf2:	e8 cd ff ff ff       	call   c000dbc4 <Clock::~Clock()>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	83 ec 08             	sub    esp,0x8
c000dbfd:	68 58 01 00 00       	push   0x158
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	e8 c7 ef ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000dc0b:	83 c4 10             	add    esp,0x10
c000dc0e:	83 c4 0c             	add    esp,0xc
c000dc11:	c3                   	ret    

c000dc12 <Clock::timeInSecondsLocal()>:
c000dc12:	53                   	push   ebx
c000dc13:	83 ec 14             	sub    esp,0x14
c000dc16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc1a:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc1c:	50                   	push   eax
c000dc1d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dc20:	0f b6 0d bc 82 02 c0 	movzx  ecx,BYTE PTR ds:0xc00282bc
c000dc27:	03 0d c0 82 02 c0    	add    ecx,DWORD PTR ds:0xc00282c0
c000dc2d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc33:	89 cb                	mov    ebx,ecx
c000dc35:	c1 fb 1f             	sar    ebx,0x1f
c000dc38:	01 c8                	add    eax,ecx
c000dc3a:	11 da                	adc    edx,ebx
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	31 c9                	xor    ecx,ecx
c000dc41:	80 3d bd 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282bd,0x0
c000dc48:	74 05                	je     c000dc4f <Clock::timeInSecondsLocal()+0x3d>
c000dc4a:	b9 08 07 00 00       	mov    ecx,0x708
c000dc4f:	31 db                	xor    ebx,ebx
c000dc51:	01 c8                	add    eax,ecx
c000dc53:	11 da                	adc    edx,ebx
c000dc55:	83 c4 08             	add    esp,0x8
c000dc58:	5b                   	pop    ebx
c000dc59:	c3                   	ret    

c000dc5a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dc5a:	57                   	push   edi
c000dc5b:	56                   	push   esi
c000dc5c:	53                   	push   ebx
c000dc5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc61:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dc65:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dc6b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dc6e:	0f b6 05 bc 82 02 c0 	movzx  eax,BYTE PTR ds:0xc00282bc
c000dc75:	03 05 c0 82 02 c0    	add    eax,DWORD PTR ds:0xc00282c0
c000dc7b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dc81:	99                   	cdq    
c000dc82:	29 c6                	sub    esi,eax
c000dc84:	19 d7                	sbb    edi,edx
c000dc86:	89 f0                	mov    eax,esi
c000dc88:	89 fa                	mov    edx,edi
c000dc8a:	31 f6                	xor    esi,esi
c000dc8c:	80 3d bd 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282bd,0x0
c000dc93:	74 05                	je     c000dc9a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000dc95:	be 08 07 00 00       	mov    esi,0x708
c000dc9a:	31 ff                	xor    edi,edi
c000dc9c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dca0:	29 f0                	sub    eax,esi
c000dca2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dca6:	19 fa                	sbb    edx,edi
c000dca8:	89 d8                	mov    eax,ebx
c000dcaa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcae:	5b                   	pop    ebx
c000dcaf:	5e                   	pop    esi
c000dcb0:	5f                   	pop    edi
c000dcb1:	ff e0                	jmp    eax

c000dcb3 <datetimeToSeconds(datetime_t)>:
c000dcb3:	55                   	push   ebp
c000dcb4:	57                   	push   edi
c000dcb5:	56                   	push   esi
c000dcb6:	53                   	push   ebx
c000dcb7:	83 ec 14             	sub    esp,0x14
c000dcba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dcbe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dcc2:	89 d3                	mov    ebx,edx
c000dcc4:	0f b6 c6             	movzx  eax,dh
c000dcc7:	c1 eb 10             	shr    ebx,0x10
c000dcca:	48                   	dec    eax
c000dccb:	66 81 eb 6c 07       	sub    bx,0x76c
c000dcd0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dcd4:	0f b6 f5             	movzx  esi,ch
c000dcd7:	89 cf                	mov    edi,ecx
c000dcd9:	6b f6 3c             	imul   esi,esi,0x3c
c000dcdc:	c1 ef 10             	shr    edi,0x10
c000dcdf:	0f b6 c9             	movzx  ecx,cl
c000dce2:	89 f8                	mov    eax,edi
c000dce4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dcea:	0f b6 f8             	movzx  edi,al
c000dced:	0f b6 d2             	movzx  edx,dl
c000dcf0:	01 fe                	add    esi,edi
c000dcf2:	01 f1                	add    ecx,esi
c000dcf4:	0f b7 f3             	movzx  esi,bx
c000dcf7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dcfb:	c1 f9 1f             	sar    ecx,0x1f
c000dcfe:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000dd03:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dd07:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000dd0c:	8b 0c 8d 80 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb280]
c000dd13:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000dd17:	76 29                	jbe    c000dd42 <datetimeToSeconds(datetime_t)+0x8f>
c000dd19:	f6 c3 03             	test   bl,0x3
c000dd1c:	75 24                	jne    c000dd42 <datetimeToSeconds(datetime_t)+0x8f>
c000dd1e:	31 d2                	xor    edx,edx
c000dd20:	bf 64 00 00 00       	mov    edi,0x64
c000dd25:	89 d8                	mov    eax,ebx
c000dd27:	66 f7 f7             	div    di
c000dd2a:	66 85 d2             	test   dx,dx
c000dd2d:	75 12                	jne    c000dd41 <datetimeToSeconds(datetime_t)+0x8e>
c000dd2f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dd35:	bf 90 01 00 00       	mov    edi,0x190
c000dd3a:	99                   	cdq    
c000dd3b:	f7 ff                	idiv   edi
c000dd3d:	85 d2                	test   edx,edx
c000dd3f:	75 01                	jne    c000dd42 <datetimeToSeconds(datetime_t)+0x8f>
c000dd41:	41                   	inc    ecx
c000dd42:	66 83 fb 46          	cmp    bx,0x46
c000dd46:	76 45                	jbe    c000dd8d <datetimeToSeconds(datetime_t)+0xda>
c000dd48:	bb 46 00 00 00       	mov    ebx,0x46
c000dd4d:	bf 64 00 00 00       	mov    edi,0x64
c000dd52:	bd 90 01 00 00       	mov    ebp,0x190
c000dd57:	b8 6d 01 00 00       	mov    eax,0x16d
c000dd5c:	f6 c3 03             	test   bl,0x3
c000dd5f:	75 23                	jne    c000dd84 <datetimeToSeconds(datetime_t)+0xd1>
c000dd61:	89 d8                	mov    eax,ebx
c000dd63:	99                   	cdq    
c000dd64:	f7 ff                	idiv   edi
c000dd66:	b8 6e 01 00 00       	mov    eax,0x16e
c000dd6b:	85 d2                	test   edx,edx
c000dd6d:	75 15                	jne    c000dd84 <datetimeToSeconds(datetime_t)+0xd1>
c000dd6f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dd75:	99                   	cdq    
c000dd76:	f7 fd                	idiv   ebp
c000dd78:	83 fa 01             	cmp    edx,0x1
c000dd7b:	19 c0                	sbb    eax,eax
c000dd7d:	f7 d0                	not    eax
c000dd7f:	05 6e 01 00 00       	add    eax,0x16e
c000dd84:	01 c1                	add    ecx,eax
c000dd86:	43                   	inc    ebx
c000dd87:	39 f3                	cmp    ebx,esi
c000dd89:	7c cc                	jl     c000dd57 <datetimeToSeconds(datetime_t)+0xa4>
c000dd8b:	eb 35                	jmp    c000ddc2 <datetimeToSeconds(datetime_t)+0x10f>
c000dd8d:	74 33                	je     c000ddc2 <datetimeToSeconds(datetime_t)+0x10f>
c000dd8f:	b8 45 00 00 00       	mov    eax,0x45
c000dd94:	89 c2                	mov    edx,eax
c000dd96:	83 e2 03             	and    edx,0x3
c000dd99:	39 f0                	cmp    eax,esi
c000dd9b:	7e 0f                	jle    c000ddac <datetimeToSeconds(datetime_t)+0xf9>
c000dd9d:	83 fa 01             	cmp    edx,0x1
c000dda0:	19 d2                	sbb    edx,edx
c000dda2:	48                   	dec    eax
c000dda3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ddaa:	eb e8                	jmp    c000dd94 <datetimeToSeconds(datetime_t)+0xe1>
c000ddac:	b8 6d 01 00 00       	mov    eax,0x16d
c000ddb1:	85 d2                	test   edx,edx
c000ddb3:	75 0b                	jne    c000ddc0 <datetimeToSeconds(datetime_t)+0x10d>
c000ddb5:	66 83 fb 01          	cmp    bx,0x1
c000ddb9:	19 c0                	sbb    eax,eax
c000ddbb:	05 6e 01 00 00       	add    eax,0x16e
c000ddc0:	29 c1                	sub    ecx,eax
c000ddc2:	b8 80 51 01 00       	mov    eax,0x15180
c000ddc7:	f7 e9                	imul   ecx
c000ddc9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ddcd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ddd1:	83 c4 14             	add    esp,0x14
c000ddd4:	5b                   	pop    ebx
c000ddd5:	5e                   	pop    esi
c000ddd6:	5f                   	pop    edi
c000ddd7:	5d                   	pop    ebp
c000ddd8:	c3                   	ret    
c000ddd9:	90                   	nop

c000ddda <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000ddda:	57                   	push   edi
c000dddb:	56                   	push   esi
c000dddc:	53                   	push   ebx
c000dddd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dde1:	8b 06                	mov    eax,DWORD PTR [esi]
c000dde3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dde6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ddee:	e8 c0 fe ff ff       	call   c000dcb3 <datetimeToSeconds(datetime_t)>
c000ddf3:	59                   	pop    ecx
c000ddf4:	0f b6 0d bc 82 02 c0 	movzx  ecx,BYTE PTR ds:0xc00282bc
c000ddfb:	5b                   	pop    ebx
c000ddfc:	03 0d c0 82 02 c0    	add    ecx,DWORD PTR ds:0xc00282c0
c000de02:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de08:	89 cb                	mov    ebx,ecx
c000de0a:	c1 fb 1f             	sar    ebx,0x1f
c000de0d:	29 c8                	sub    eax,ecx
c000de0f:	19 da                	sbb    edx,ebx
c000de11:	31 c9                	xor    ecx,ecx
c000de13:	80 3d bd 82 02 c0 00 	cmp    BYTE PTR ds:0xc00282bd,0x0
c000de1a:	74 05                	je     c000de21 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000de1c:	b9 08 07 00 00       	mov    ecx,0x708
c000de21:	31 db                	xor    ebx,ebx
c000de23:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000de27:	29 c8                	sub    eax,ecx
c000de29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de2d:	19 da                	sbb    edx,ebx
c000de2f:	89 f8                	mov    eax,edi
c000de31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de35:	5b                   	pop    ebx
c000de36:	5e                   	pop    esi
c000de37:	5f                   	pop    edi
c000de38:	ff e0                	jmp    eax

c000de3a <secondsToDatetime(unsigned long long)>:
c000de3a:	55                   	push   ebp
c000de3b:	57                   	push   edi
c000de3c:	56                   	push   esi
c000de3d:	53                   	push   ebx
c000de3e:	83 ec 1c             	sub    esp,0x1c
c000de41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de45:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000de49:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000de4d:	6a 00                	push   0x0
c000de4f:	68 80 51 01 00       	push   0x15180
c000de54:	55                   	push   ebp
c000de55:	57                   	push   edi
c000de56:	e8 89 4b 01 00       	call   c00229e4 <__udivdi3>
c000de5b:	83 c4 10             	add    esp,0x10
c000de5e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000de64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de68:	6a 00                	push   0x0
c000de6a:	68 80 51 01 00       	push   0x15180
c000de6f:	55                   	push   ebp
c000de70:	57                   	push   edi
c000de71:	bf 10 0e 00 00       	mov    edi,0xe10
c000de76:	e8 69 4c 01 00       	call   c0022ae4 <__umoddi3>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	99                   	cdq    
c000de7f:	f7 ff                	idiv   edi
c000de81:	bf 3c 00 00 00       	mov    edi,0x3c
c000de86:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000de89:	89 d0                	mov    eax,edx
c000de8b:	99                   	cdq    
c000de8c:	f7 ff                	idiv   edi
c000de8e:	85 db                	test   ebx,ebx
c000de90:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000de93:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000de96:	79 11                	jns    c000dea9 <secondsToDatetime(unsigned long long)+0x6f>
c000de98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000de9c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dea2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dea7:	eb 07                	jmp    c000deb0 <secondsToDatetime(unsigned long long)+0x76>
c000dea9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000deae:	89 d8                	mov    eax,ebx
c000deb0:	bf b4 05 00 00       	mov    edi,0x5b4
c000deb5:	99                   	cdq    
c000deb6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000debb:	f7 f9                	idiv   ecx
c000debd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec6:	31 d2                	xor    edx,edx
c000dec8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000ded0:	01 c3                	add    ebx,eax
c000ded2:	89 d8                	mov    eax,ebx
c000ded4:	f7 f1                	div    ecx
c000ded6:	31 d2                	xor    edx,edx
c000ded8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dedb:	89 d8                	mov    eax,ebx
c000dedd:	f7 f7                	div    edi
c000dedf:	31 d2                	xor    edx,edx
c000dee1:	29 c1                	sub    ecx,eax
c000dee3:	89 d8                	mov    eax,ebx
c000dee5:	f7 f5                	div    ebp
c000dee7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000deec:	29 c1                	sub    ecx,eax
c000deee:	31 d2                	xor    edx,edx
c000def0:	89 c8                	mov    eax,ecx
c000def2:	f7 f5                	div    ebp
c000def4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000def9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000defd:	31 d2                	xor    edx,edx
c000deff:	89 c8                	mov    eax,ecx
c000df01:	f7 f5                	div    ebp
c000df03:	31 d2                	xor    edx,edx
c000df05:	01 c3                	add    ebx,eax
c000df07:	89 c8                	mov    eax,ecx
c000df09:	f7 f7                	div    edi
c000df0b:	bf 99 00 00 00       	mov    edi,0x99
c000df10:	29 c3                	sub    ebx,eax
c000df12:	31 d2                	xor    edx,edx
c000df14:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000df1c:	29 c3                	sub    ebx,eax
c000df1e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000df21:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000df24:	bb 05 00 00 00       	mov    ebx,0x5
c000df29:	83 c1 02             	add    ecx,0x2
c000df2c:	89 c8                	mov    eax,ecx
c000df2e:	f7 f7                	div    edi
c000df30:	31 d2                	xor    edx,edx
c000df32:	89 c7                	mov    edi,eax
c000df34:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000df3a:	83 c0 02             	add    eax,0x2
c000df3d:	f7 f3                	div    ebx
c000df3f:	89 eb                	mov    ebx,ebp
c000df41:	29 c3                	sub    ebx,eax
c000df43:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000df49:	88 1e                	mov    BYTE PTR [esi],bl
c000df4b:	19 c0                	sbb    eax,eax
c000df4d:	31 d2                	xor    edx,edx
c000df4f:	83 e0 0c             	and    eax,0xc
c000df52:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000df56:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000df5e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000df62:	83 f9 01             	cmp    ecx,0x1
c000df65:	0f 96 c2             	setbe  dl
c000df68:	41                   	inc    ecx
c000df69:	01 d0                	add    eax,edx
c000df6b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000df6e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000df72:	83 c4 1c             	add    esp,0x1c
c000df75:	89 f0                	mov    eax,esi
c000df77:	5b                   	pop    ebx
c000df78:	5e                   	pop    esi
c000df79:	5f                   	pop    edi
c000df7a:	5d                   	pop    ebp
c000df7b:	c2 04 00             	ret    0x4

c000df7e <Clock::timeInDatetimeLocal()>:
c000df7e:	53                   	push   ebx
c000df7f:	83 ec 14             	sub    esp,0x14
c000df82:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000df8a:	e8 83 fc ff ff       	call   c000dc12 <Clock::timeInSecondsLocal()>
c000df8f:	83 c4 0c             	add    esp,0xc
c000df92:	52                   	push   edx
c000df93:	50                   	push   eax
c000df94:	53                   	push   ebx
c000df95:	e8 a0 fe ff ff       	call   c000de3a <secondsToDatetime(unsigned long long)>
c000df9a:	89 d8                	mov    eax,ebx
c000df9c:	83 c4 14             	add    esp,0x14
c000df9f:	5b                   	pop    ebx
c000dfa0:	c2 04 00             	ret    0x4
c000dfa3:	90                   	nop

c000dfa4 <Device::hibernate()>:
c000dfa4:	c3                   	ret    
c000dfa5:	90                   	nop

c000dfa6 <Device::wake()>:
c000dfa6:	c3                   	ret    
c000dfa7:	90                   	nop

c000dfa8 <Device::detect()>:
c000dfa8:	c3                   	ret    
c000dfa9:	90                   	nop

c000dfaa <Device::disableLegacy()>:
c000dfaa:	c3                   	ret    
c000dfab:	90                   	nop

c000dfac <Device::powerSaving(PowerSavingLevel)>:
c000dfac:	c3                   	ret    
c000dfad:	90                   	nop

c000dfae <DriverlessDevice::close(int, int, void*)>:
c000dfae:	31 c0                	xor    eax,eax
c000dfb0:	c3                   	ret    
c000dfb1:	90                   	nop

c000dfb2 <DriverlessDevice::detect()>:
c000dfb2:	c3                   	ret    
c000dfb3:	90                   	nop

c000dfb4 <DriverlessDevice::open(int, int, void*)>:
c000dfb4:	83 ec 18             	sub    esp,0x18
c000dfb7:	68 b0 4d 02 c0       	push   0xc0024db0
c000dfbc:	e8 5e 68 00 00       	call   c001481f <Krnl::panic(char const*)>
c000dfc1:	83 c8 ff             	or     eax,0xffffffff
c000dfc4:	83 c4 1c             	add    esp,0x1c
c000dfc7:	c3                   	ret    

c000dfc8 <Device::~Device()>:
c000dfc8:	ba 10 4e 02 c0       	mov    edx,0xc0024e10
c000dfcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfd1:	89 10                	mov    DWORD PTR [eax],edx
c000dfd3:	90                   	nop
c000dfd4:	c3                   	ret    
c000dfd5:	90                   	nop

c000dfd6 <Device::~Device()>:
c000dfd6:	83 ec 0c             	sub    esp,0xc
c000dfd9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfdd:	e8 e6 ff ff ff       	call   c000dfc8 <Device::~Device()>
c000dfe2:	83 c4 04             	add    esp,0x4
c000dfe5:	83 ec 08             	sub    esp,0x8
c000dfe8:	68 58 01 00 00       	push   0x158
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	e8 dc eb ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	83 c4 0c             	add    esp,0xc
c000dffc:	c3                   	ret    
c000dffd:	90                   	nop

c000dffe <Device::findAndLoadDriver()>:
c000dffe:	c7 44 24 04 ce 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024dce
c000e006:	e9 a8 ec ff ff       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>
c000e00b:	90                   	nop

c000e00c <Device::preOpenPCI(PCIDeviceInfo)>:
c000e00c:	57                   	push   edi
c000e00d:	b9 09 00 00 00       	mov    ecx,0x9
c000e012:	56                   	push   esi
c000e013:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e017:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e01b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e025:	81 c7 18 01 00 00    	add    edi,0x118
c000e02b:	fc                   	cld    
c000e02c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e02e:	5e                   	pop    esi
c000e02f:	5f                   	pop    edi
c000e030:	c3                   	ret    
c000e031:	90                   	nop

c000e032 <Device::preOpenACPI(void*, char*, char*)>:
c000e032:	57                   	push   edi
c000e033:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e038:	56                   	push   esi
c000e039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e03d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e041:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e04b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e051:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e057:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e05b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e05d:	b9 0e 00 00 00       	mov    ecx,0xe
c000e062:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e068:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e06c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e06e:	5e                   	pop    esi
c000e06f:	5f                   	pop    edi
c000e070:	c3                   	ret    
c000e071:	90                   	nop

c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e076:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e07b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e082:	75 0b                	jne    c000e08f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e084:	8b 00                	mov    eax,DWORD PTR [eax]
c000e086:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e08a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e08d:	eb 1e                	jmp    c000e0ad <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e08f:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000e094:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e09a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e0a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0a2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0aa:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e0ad:	ff e0                	jmp    eax
c000e0af:	90                   	nop

c000e0b0 <Device::getParent()>:
c000e0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0b4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e0ba:	c3                   	ret    
c000e0bb:	90                   	nop

c000e0bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e0c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e0cc:	75 0b                	jne    c000e0d9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e0ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000e0d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0d4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e0d7:	eb 1e                	jmp    c000e0f7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e0d9:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000e0de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e0e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e0ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e0f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e0f4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e0f7:	ff e0                	jmp    eax
c000e0f9:	90                   	nop

c000e0fa <Device::addChild(Device*)>:
c000e0fa:	53                   	push   ebx
c000e0fb:	83 ec 08             	sub    esp,0x8
c000e0fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e102:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e106:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e10c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e112:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e114:	85 d2                	test   edx,edx
c000e116:	74 04                	je     c000e11c <Device::addChild(Device*)+0x22>
c000e118:	89 d3                	mov    ebx,edx
c000e11a:	eb f6                	jmp    c000e112 <Device::addChild(Device*)+0x18>
c000e11c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e11f:	83 ec 0c             	sub    esp,0xc
c000e122:	6a 08                	push   0x8
c000e124:	e8 9a b8 ff ff       	call   c00099c3 <malloc>
c000e129:	89 03                	mov    DWORD PTR [ebx],eax
c000e12b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e131:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e138:	83 c4 18             	add    esp,0x18
c000e13b:	5b                   	pop    ebx
c000e13c:	c3                   	ret    
c000e13d:	90                   	nop

c000e13e <Device::removeAllChildren()>:
c000e13e:	56                   	push   esi
c000e13f:	53                   	push   ebx
c000e140:	52                   	push   edx
c000e141:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e145:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e14b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e14e:	74 17                	je     c000e167 <Device::removeAllChildren()+0x29>
c000e150:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e153:	85 c0                	test   eax,eax
c000e155:	74 0c                	je     c000e163 <Device::removeAllChildren()+0x25>
c000e157:	83 ec 0c             	sub    esp,0xc
c000e15a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e15c:	50                   	push   eax
c000e15d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e160:	83 c4 10             	add    esp,0x10
c000e163:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e165:	eb e4                	jmp    c000e14b <Device::removeAllChildren()+0xd>
c000e167:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e16d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e173:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e179:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e180:	58                   	pop    eax
c000e181:	5b                   	pop    ebx
c000e182:	5e                   	pop    esi
c000e183:	c3                   	ret    

c000e184 <Device::hibernateAll()>:
c000e184:	53                   	push   ebx
c000e185:	83 ec 14             	sub    esp,0x14
c000e188:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e18c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e18e:	53                   	push   ebx
c000e18f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e192:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e198:	83 c4 10             	add    esp,0x10
c000e19b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e19e:	74 0f                	je     c000e1af <Device::hibernateAll()+0x2b>
c000e1a0:	83 ec 0c             	sub    esp,0xc
c000e1a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1a6:	e8 d9 ff ff ff       	call   c000e184 <Device::hibernateAll()>
c000e1ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1ad:	eb e9                	jmp    c000e198 <Device::hibernateAll()+0x14>
c000e1af:	83 c4 08             	add    esp,0x8
c000e1b2:	5b                   	pop    ebx
c000e1b3:	c3                   	ret    

c000e1b4 <Device::wakeAll()>:
c000e1b4:	53                   	push   ebx
c000e1b5:	83 ec 14             	sub    esp,0x14
c000e1b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1be:	53                   	push   ebx
c000e1bf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e1c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1c8:	83 c4 10             	add    esp,0x10
c000e1cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1ce:	74 0f                	je     c000e1df <Device::wakeAll()+0x2b>
c000e1d0:	83 ec 0c             	sub    esp,0xc
c000e1d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e1d6:	e8 d9 ff ff ff       	call   c000e1b4 <Device::wakeAll()>
c000e1db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e1dd:	eb e9                	jmp    c000e1c8 <Device::wakeAll()+0x14>
c000e1df:	83 c4 08             	add    esp,0x8
c000e1e2:	5b                   	pop    ebx
c000e1e3:	c3                   	ret    

c000e1e4 <Device::detectAll()>:
c000e1e4:	53                   	push   ebx
c000e1e5:	83 ec 14             	sub    esp,0x14
c000e1e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e1ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e1ee:	53                   	push   ebx
c000e1ef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e1f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e1f8:	83 c4 10             	add    esp,0x10
c000e1fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e1fe:	74 0f                	je     c000e20f <Device::detectAll()+0x2b>
c000e200:	83 ec 0c             	sub    esp,0xc
c000e203:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e206:	e8 d9 ff ff ff       	call   c000e1e4 <Device::detectAll()>
c000e20b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e20d:	eb e9                	jmp    c000e1f8 <Device::detectAll()+0x14>
c000e20f:	83 c4 08             	add    esp,0x8
c000e212:	5b                   	pop    ebx
c000e213:	c3                   	ret    

c000e214 <Device::disableLegacyAll()>:
c000e214:	53                   	push   ebx
c000e215:	83 ec 14             	sub    esp,0x14
c000e218:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e21c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e21e:	53                   	push   ebx
c000e21f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e222:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e22e:	74 0f                	je     c000e23f <Device::disableLegacyAll()+0x2b>
c000e230:	83 ec 0c             	sub    esp,0xc
c000e233:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e236:	e8 d9 ff ff ff       	call   c000e214 <Device::disableLegacyAll()>
c000e23b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e23d:	eb e9                	jmp    c000e228 <Device::disableLegacyAll()+0x14>
c000e23f:	83 c4 08             	add    esp,0x8
c000e242:	5b                   	pop    ebx
c000e243:	c3                   	ret    

c000e244 <Device::loadDriversForAll()>:
c000e244:	53                   	push   ebx
c000e245:	83 ec 08             	sub    esp,0x8
c000e248:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e24c:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e253:	75 0c                	jne    c000e261 <Device::loadDriversForAll()+0x1d>
c000e255:	83 ec 0c             	sub    esp,0xc
c000e258:	53                   	push   ebx
c000e259:	e8 a0 fd ff ff       	call   c000dffe <Device::findAndLoadDriver()>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e267:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e26a:	74 12                	je     c000e27e <Device::loadDriversForAll()+0x3a>
c000e26c:	83 ec 0c             	sub    esp,0xc
c000e26f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e272:	e8 cd ff ff ff       	call   c000e244 <Device::loadDriversForAll()>
c000e277:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e279:	83 c4 10             	add    esp,0x10
c000e27c:	eb e9                	jmp    c000e267 <Device::loadDriversForAll()+0x23>
c000e27e:	83 c4 08             	add    esp,0x8
c000e281:	5b                   	pop    ebx
c000e282:	c3                   	ret    
c000e283:	90                   	nop

c000e284 <Device::closeAll()>:
c000e284:	53                   	push   ebx
c000e285:	83 ec 08             	sub    esp,0x8
c000e288:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e28c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e28e:	6a 00                	push   0x0
c000e290:	6a 00                	push   0x0
c000e292:	6a 00                	push   0x0
c000e294:	53                   	push   ebx
c000e295:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e298:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2a4:	74 0f                	je     c000e2b5 <Device::closeAll()+0x31>
c000e2a6:	83 ec 0c             	sub    esp,0xc
c000e2a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2ac:	e8 d3 ff ff ff       	call   c000e284 <Device::closeAll()>
c000e2b1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2b3:	eb e9                	jmp    c000e29e <Device::closeAll()+0x1a>
c000e2b5:	83 c4 08             	add    esp,0x8
c000e2b8:	5b                   	pop    ebx
c000e2b9:	c3                   	ret    

c000e2ba <Device::powerSavingAll(PowerSavingLevel)>:
c000e2ba:	56                   	push   esi
c000e2bb:	53                   	push   ebx
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e2c3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e2c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2c9:	56                   	push   esi
c000e2ca:	53                   	push   ebx
c000e2cb:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e2ce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2da:	74 0f                	je     c000e2eb <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e2dc:	52                   	push   edx
c000e2dd:	52                   	push   edx
c000e2de:	56                   	push   esi
c000e2df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2e2:	e8 d3 ff ff ff       	call   c000e2ba <Device::powerSavingAll(PowerSavingLevel)>
c000e2e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2e9:	eb e9                	jmp    c000e2d4 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e2eb:	58                   	pop    eax
c000e2ec:	5b                   	pop    ebx
c000e2ed:	5e                   	pop    esi
c000e2ee:	c3                   	ret    
c000e2ef:	90                   	nop

c000e2f0 <Device::setName(char const*)>:
c000e2f0:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e2f8:	e9 43 24 ff ff       	jmp    c0000740 <strcpy>
c000e2fd:	90                   	nop

c000e2fe <Device::Device(char const*)>:
c000e2fe:	83 ec 1c             	sub    esp,0x1c
c000e301:	ba 10 4e 02 c0       	mov    edx,0xc0024e10
c000e306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30a:	89 10                	mov    DWORD PTR [eax],edx
c000e30c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e310:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e31a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e31e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e328:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e344:	83 ec 08             	sub    esp,0x8
c000e347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34f:	e8 9c ff ff ff       	call   c000e2f0 <Device::setName(char const*)>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e35f:	83 ec 0c             	sub    esp,0xc
c000e362:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e366:	e8 58 b6 ff ff       	call   c00099c3 <malloc>
c000e36b:	83 c4 10             	add    esp,0x10
c000e36e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e374:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e37b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e37f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e385:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e389:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e38f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e399:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e39f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3aa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b5:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e3bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ce:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3dc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e3e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ea:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e3f4:	90                   	nop
c000e3f5:	83 c4 1c             	add    esp,0x1c
c000e3f8:	c3                   	ret    
c000e3f9:	90                   	nop

c000e3fa <Device::getName()>:
c000e3fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fe:	05 d0 00 00 00       	add    eax,0xd0
c000e403:	c3                   	ret    

c000e404 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e404:	83 ec 0c             	sub    esp,0xc
c000e407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e40b:	83 ec 08             	sub    esp,0x8
c000e40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e412:	50                   	push   eax
c000e413:	e8 e6 fe ff ff       	call   c000e2fe <Device::Device(char const*)>
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	ba 3c 4e 02 c0       	mov    edx,0xc0024e3c
c000e420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e424:	89 10                	mov    DWORD PTR [eax],edx
c000e426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e42a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e434:	90                   	nop
c000e435:	83 c4 0c             	add    esp,0xc
c000e438:	c3                   	ret    
c000e439:	90                   	nop

c000e43a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e43a:	57                   	push   edi
c000e43b:	56                   	push   esi
c000e43c:	53                   	push   ebx
c000e43d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e441:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e445:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e449:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e44f:	75 0c                	jne    c000e45d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e451:	52                   	push   edx
c000e452:	52                   	push   edx
c000e453:	53                   	push   ebx
c000e454:	56                   	push   esi
c000e455:	e8 3c 4a 01 00       	call   c0022e96 <LinkedList<Device>::addElement(Device*)>
c000e45a:	83 c4 10             	add    esp,0x10
c000e45d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e463:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e466:	74 12                	je     c000e47a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e468:	50                   	push   eax
c000e469:	57                   	push   edi
c000e46a:	56                   	push   esi
c000e46b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e46e:	e8 c7 ff ff ff       	call   c000e43a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e473:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e475:	83 c4 10             	add    esp,0x10
c000e478:	eb e9                	jmp    c000e463 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e47a:	5b                   	pop    ebx
c000e47b:	5e                   	pop    esi
c000e47c:	5f                   	pop    edi
c000e47d:	c3                   	ret    

c000e47e <getDevicesOfType(DeviceType)>:
c000e47e:	53                   	push   ebx
c000e47f:	83 ec 14             	sub    esp,0x14
c000e482:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e486:	53                   	push   ebx
c000e487:	e8 e6 4a 01 00       	call   c0022f72 <LinkedList<Device>::LinkedList()>
c000e48c:	83 c4 0c             	add    esp,0xc
c000e48f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e493:	53                   	push   ebx
c000e494:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c000e49a:	e8 9b ff ff ff       	call   c000e43a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e49f:	89 d8                	mov    eax,ebx
c000e4a1:	83 c4 18             	add    esp,0x18
c000e4a4:	5b                   	pop    ebx
c000e4a5:	c2 04 00             	ret    0x4

c000e4a8 <HardDiskController::HardDiskController(char const*)>:
c000e4a8:	83 ec 0c             	sub    esp,0xc
c000e4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4af:	83 ec 08             	sub    esp,0x8
c000e4b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b6:	50                   	push   eax
c000e4b7:	e8 42 fe ff ff       	call   c000e2fe <Device::Device(char const*)>
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	ba 68 4e 02 c0       	mov    edx,0xc0024e68
c000e4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4c8:	89 10                	mov    DWORD PTR [eax],edx
c000e4ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e4d8:	90                   	nop
c000e4d9:	83 c4 0c             	add    esp,0xc
c000e4dc:	c3                   	ret    
c000e4dd:	90                   	nop
c000e4de:	66 90                	xchg   ax,ax

c000e4e0 <HardDiskController::~HardDiskController()>:
c000e4e0:	83 ec 0c             	sub    esp,0xc
c000e4e3:	ba 68 4e 02 c0       	mov    edx,0xc0024e68
c000e4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4ec:	89 10                	mov    DWORD PTR [eax],edx
c000e4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4f2:	83 ec 0c             	sub    esp,0xc
c000e4f5:	50                   	push   eax
c000e4f6:	e8 cd fa ff ff       	call   c000dfc8 <Device::~Device()>
c000e4fb:	83 c4 10             	add    esp,0x10
c000e4fe:	90                   	nop
c000e4ff:	83 c4 0c             	add    esp,0xc
c000e502:	c3                   	ret    
c000e503:	90                   	nop

c000e504 <HardDiskController::~HardDiskController()>:
c000e504:	83 ec 0c             	sub    esp,0xc
c000e507:	83 ec 0c             	sub    esp,0xc
c000e50a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50e:	e8 cd ff ff ff       	call   c000e4e0 <HardDiskController::~HardDiskController()>
c000e513:	83 c4 10             	add    esp,0x10
c000e516:	83 ec 08             	sub    esp,0x8
c000e519:	68 58 01 00 00       	push   0x158
c000e51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e522:	e8 ab e6 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e527:	83 c4 10             	add    esp,0x10
c000e52a:	83 c4 0c             	add    esp,0xc
c000e52d:	c3                   	ret    

c000e52e <PhysicalDisk::eject()>:
c000e52e:	83 c8 ff             	or     eax,0xffffffff
c000e531:	c3                   	ret    

c000e532 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e532:	83 ec 0c             	sub    esp,0xc
c000e535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e539:	83 ec 08             	sub    esp,0x8
c000e53c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e540:	50                   	push   eax
c000e541:	e8 b8 fd ff ff       	call   c000e2fe <Device::Device(char const*)>
c000e546:	83 c4 10             	add    esp,0x10
c000e549:	ba 94 4e 02 c0       	mov    edx,0xc0024e94
c000e54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e552:	89 10                	mov    DWORD PTR [eax],edx
c000e554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e558:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e563:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e580:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e594:	90                   	nop
c000e595:	83 c4 0c             	add    esp,0xc
c000e598:	c3                   	ret    
c000e599:	90                   	nop

c000e59a <PhysicalDisk::startCache()>:
c000e59a:	56                   	push   esi
c000e59b:	53                   	push   ebx
c000e59c:	83 ec 10             	sub    esp,0x10
c000e59f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5a3:	6a 44                	push   0x44
c000e5a5:	e8 19 b4 ff ff       	call   c00099c3 <malloc>
c000e5aa:	89 c6                	mov    esi,eax
c000e5ac:	58                   	pop    eax
c000e5ad:	5a                   	pop    edx
c000e5ae:	53                   	push   ebx
c000e5af:	56                   	push   esi
c000e5b0:	e8 2f 26 00 00       	call   c0010be4 <VCache::VCache(PhysicalDisk*)>
c000e5b5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e5bb:	83 c4 14             	add    esp,0x14
c000e5be:	5b                   	pop    ebx
c000e5bf:	5e                   	pop    esi
c000e5c0:	c3                   	ret    
c000e5c1:	90                   	nop

c000e5c2 <PhysicalDisk::~PhysicalDisk()>:
c000e5c2:	83 ec 0c             	sub    esp,0xc
c000e5c5:	ba 94 4e 02 c0       	mov    edx,0xc0024e94
c000e5ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ce:	89 10                	mov    DWORD PTR [eax],edx
c000e5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d4:	83 ec 0c             	sub    esp,0xc
c000e5d7:	50                   	push   eax
c000e5d8:	e8 eb f9 ff ff       	call   c000dfc8 <Device::~Device()>
c000e5dd:	83 c4 10             	add    esp,0x10
c000e5e0:	90                   	nop
c000e5e1:	83 c4 0c             	add    esp,0xc
c000e5e4:	c3                   	ret    
c000e5e5:	90                   	nop

c000e5e6 <PhysicalDisk::~PhysicalDisk()>:
c000e5e6:	83 ec 0c             	sub    esp,0xc
c000e5e9:	83 ec 0c             	sub    esp,0xc
c000e5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5f0:	e8 cd ff ff ff       	call   c000e5c2 <PhysicalDisk::~PhysicalDisk()>
c000e5f5:	83 c4 10             	add    esp,0x10
c000e5f8:	83 ec 08             	sub    esp,0x8
c000e5fb:	68 6c 01 00 00       	push   0x16c
c000e600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e604:	e8 c9 e5 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	83 c4 0c             	add    esp,0xc
c000e60f:	c3                   	ret    

c000e610 <FPU::FPU(char const*)>:
c000e610:	83 ec 0c             	sub    esp,0xc
c000e613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e617:	83 ec 08             	sub    esp,0x8
c000e61a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e61e:	50                   	push   eax
c000e61f:	e8 da fc ff ff       	call   c000e2fe <Device::Device(char const*)>
c000e624:	83 c4 10             	add    esp,0x10
c000e627:	ba d8 4e 02 c0       	mov    edx,0xc0024ed8
c000e62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e630:	89 10                	mov    DWORD PTR [eax],edx
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e640:	90                   	nop
c000e641:	83 c4 0c             	add    esp,0xc
c000e644:	c3                   	ret    
c000e645:	90                   	nop
c000e646:	66 90                	xchg   ax,ax

c000e648 <FPU::~FPU()>:
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	ba d8 4e 02 c0       	mov    edx,0xc0024ed8
c000e650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e654:	89 10                	mov    DWORD PTR [eax],edx
c000e656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e65a:	83 ec 0c             	sub    esp,0xc
c000e65d:	50                   	push   eax
c000e65e:	e8 65 f9 ff ff       	call   c000dfc8 <Device::~Device()>
c000e663:	83 c4 10             	add    esp,0x10
c000e666:	90                   	nop
c000e667:	83 c4 0c             	add    esp,0xc
c000e66a:	c3                   	ret    
c000e66b:	90                   	nop

c000e66c <FPU::~FPU()>:
c000e66c:	83 ec 0c             	sub    esp,0xc
c000e66f:	83 ec 0c             	sub    esp,0xc
c000e672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e676:	e8 cd ff ff ff       	call   c000e648 <FPU::~FPU()>
c000e67b:	83 c4 10             	add    esp,0x10
c000e67e:	83 ec 08             	sub    esp,0x8
c000e681:	68 58 01 00 00       	push   0x158
c000e686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e68a:	e8 43 e5 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	83 c4 0c             	add    esp,0xc
c000e695:	c3                   	ret    

c000e696 <setupFPU()>:
c000e696:	53                   	push   ebx
c000e697:	83 ec 08             	sub    esp,0x8
c000e69a:	8b 15 88 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028188
c000e6a0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e6a7:	74 1b                	je     c000e6c4 <setupFPU()+0x2e>
c000e6a9:	83 ec 0c             	sub    esp,0xc
c000e6ac:	68 58 01 00 00       	push   0x158
c000e6b1:	e8 0d b3 ff ff       	call   c00099c3 <malloc>
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6bb:	e8 bc 2e 01 00       	call   c002157c <AVX::AVX()>
c000e6c0:	eb 62                	jmp    c000e724 <setupFPU()+0x8e>
c000e6c2:	66 90                	xchg   ax,ax
c000e6c4:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e6ca:	84 c0                	test   al,al
c000e6cc:	79 1a                	jns    c000e6e8 <setupFPU()+0x52>
c000e6ce:	83 ec 0c             	sub    esp,0xc
c000e6d1:	68 58 01 00 00       	push   0x158
c000e6d6:	e8 e8 b2 ff ff       	call   c00099c3 <malloc>
c000e6db:	89 c3                	mov    ebx,eax
c000e6dd:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6e0:	e8 c7 2f 01 00       	call   c00216ac <SSE::SSE()>
c000e6e5:	eb 3d                	jmp    c000e724 <setupFPU()+0x8e>
c000e6e7:	90                   	nop
c000e6e8:	a8 20                	test   al,0x20
c000e6ea:	74 1c                	je     c000e708 <setupFPU()+0x72>
c000e6ec:	83 ec 0c             	sub    esp,0xc
c000e6ef:	68 58 01 00 00       	push   0x158
c000e6f4:	e8 ca b2 ff ff       	call   c00099c3 <malloc>
c000e6f9:	89 c3                	mov    ebx,eax
c000e6fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6fe:	e8 0d 2f 01 00       	call   c0021610 <MMX::MMX()>
c000e703:	eb 1f                	jmp    c000e724 <setupFPU()+0x8e>
c000e705:	8d 76 00             	lea    esi,[esi+0x0]
c000e708:	a8 10                	test   al,0x10
c000e70a:	74 20                	je     c000e72c <setupFPU()+0x96>
c000e70c:	83 ec 0c             	sub    esp,0xc
c000e70f:	68 58 01 00 00       	push   0x158
c000e714:	e8 aa b2 ff ff       	call   c00099c3 <malloc>
c000e719:	89 c3                	mov    ebx,eax
c000e71b:	89 04 24             	mov    DWORD PTR [esp],eax
c000e71e:	e8 1d 30 01 00       	call   c0021740 <x87::x87()>
c000e723:	90                   	nop
c000e724:	83 c4 10             	add    esp,0x10
c000e727:	eb 27                	jmp    c000e750 <setupFPU()+0xba>
c000e729:	8d 76 00             	lea    esi,[esi+0x0]
c000e72c:	83 e0 ef             	and    eax,0xffffffef
c000e72f:	83 ec 0c             	sub    esp,0xc
c000e732:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e738:	68 c4 4e 02 c0       	push   0xc0024ec4
c000e73d:	e8 71 e5 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000e742:	0f 20 c0             	mov    eax,cr0
c000e745:	83 c8 04             	or     eax,0x4
c000e748:	0f 22 c0             	mov    cr0,eax
c000e74b:	31 db                	xor    ebx,ebx
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	89 d8                	mov    eax,ebx
c000e752:	83 c4 08             	add    esp,0x8
c000e755:	5b                   	pop    ebx
c000e756:	c3                   	ret    
c000e757:	90                   	nop

c000e758 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e758:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e760:	c1 e0 04             	shl    eax,0x4
c000e763:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e767:	8d 50 10             	lea    edx,[eax+0x10]
c000e76a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e770:	74 08                	je     c000e77a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e772:	83 c0 04             	add    eax,0x4
c000e775:	39 d0                	cmp    eax,edx
c000e777:	75 f1                	jne    c000e76a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e779:	c3                   	ret    
c000e77a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e784:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e78e:	eb e2                	jmp    c000e772 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e790 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e790:	57                   	push   edi
c000e791:	31 c0                	xor    eax,eax
c000e793:	56                   	push   esi
c000e794:	53                   	push   ebx
c000e795:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e799:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e79d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e7a1:	89 da                	mov    edx,ebx
c000e7a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e7a7:	c1 e2 04             	shl    edx,0x4
c000e7aa:	01 ca                	add    edx,ecx
c000e7ac:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e7b4:	74 16                	je     c000e7cc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e7b6:	40                   	inc    eax
c000e7b7:	83 f8 04             	cmp    eax,0x4
c000e7ba:	75 f0                	jne    c000e7ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e7bc:	c7 44 24 10 08 4f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024f08
c000e7c4:	5b                   	pop    ebx
c000e7c5:	5e                   	pop    esi
c000e7c6:	5f                   	pop    edi
c000e7c7:	e9 53 60 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c000e7cc:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e7cf:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e7d2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e7d8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e7de:	5b                   	pop    ebx
c000e7df:	5e                   	pop    esi
c000e7e0:	5f                   	pop    edi
c000e7e1:	c3                   	ret    

c000e7e2 <doubleFault(regs*, void*)>:
c000e7e2:	55                   	push   ebp
c000e7e3:	89 e5                	mov    ebp,esp
c000e7e5:	83 ec 08             	sub    esp,0x8
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	68 15 4f 02 c0       	push   0xc0024f15
c000e7f0:	e8 2a 60 00 00       	call   c001481f <Krnl::panic(char const*)>
c000e7f5:	83 c4 10             	add    esp,0x10
c000e7f8:	90                   	nop
c000e7f9:	c9                   	leave  
c000e7fa:	c3                   	ret    
c000e7fb:	90                   	nop

c000e7fc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e7fc:	56                   	push   esi
c000e7fd:	53                   	push   ebx
c000e7fe:	50                   	push   eax
c000e7ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e803:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e807:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e80c:	75 35                	jne    c000e843 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e80e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e811:	31 d2                	xor    edx,edx
c000e813:	89 c1                	mov    ecx,eax
c000e815:	c1 e1 04             	shl    ecx,0x4
c000e818:	01 f1                	add    ecx,esi
c000e81a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e822:	74 3e                	je     c000e862 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e824:	42                   	inc    edx
c000e825:	83 fa 04             	cmp    edx,0x4
c000e828:	75 f0                	jne    c000e81a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e82a:	83 ec 0c             	sub    esp,0xc
c000e82d:	68 2f 4f 02 c0       	push   0xc0024f2f
c000e832:	e8 e8 5f 00 00       	call   c001481f <Krnl::panic(char const*)>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e83f:	5a                   	pop    edx
c000e840:	5b                   	pop    ebx
c000e841:	5e                   	pop    esi
c000e842:	c3                   	ret    
c000e843:	83 ec 0c             	sub    esp,0xc
c000e846:	56                   	push   esi
c000e847:	e8 ae fb ff ff       	call   c000e3fa <Device::getName()>
c000e84c:	83 c4 10             	add    esp,0x10
c000e84f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e852:	75 ba                	jne    c000e80e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e854:	83 fb 0f             	cmp    ebx,0xf
c000e857:	7f 29                	jg     c000e882 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e859:	0f b6 9b 80 78 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8780]
c000e860:	eb ac                	jmp    c000e80e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e862:	8d 04 82             	lea    eax,[edx+eax*4]
c000e865:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e869:	8d 04 86             	lea    eax,[esi+eax*4]
c000e86c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e872:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e876:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e87c:	89 d8                	mov    eax,ebx
c000e87e:	5a                   	pop    edx
c000e87f:	5b                   	pop    ebx
c000e880:	5e                   	pop    esi
c000e881:	c3                   	ret    
c000e882:	83 ec 0c             	sub    esp,0xc
c000e885:	68 22 4f 02 c0       	push   0xc0024f22
c000e88a:	e8 90 5f 00 00       	call   c001481f <Krnl::panic(char const*)>
c000e88f:	83 c4 10             	add    esp,0x10
c000e892:	e9 77 ff ff ff       	jmp    c000e80e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e897:	90                   	nop

c000e898 <InterruptController::clearAllHandlers(int, bool)>:
c000e898:	56                   	push   esi
c000e899:	53                   	push   ebx
c000e89a:	52                   	push   edx
c000e89b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e89f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8a3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e8a8:	75 61                	jne    c000e90b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e8aa:	8d 46 20             	lea    eax,[esi+0x20]
c000e8ad:	c1 e6 04             	shl    esi,0x4
c000e8b0:	c1 e0 04             	shl    eax,0x4
c000e8b3:	01 de                	add    esi,ebx
c000e8b5:	01 d8                	add    eax,ebx
c000e8b7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e8c1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e8cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e8d5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8df:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e8e9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e8f3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e8fd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e907:	58                   	pop    eax
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	c3                   	ret    
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	53                   	push   ebx
c000e90f:	e8 e6 fa ff ff       	call   c000e3fa <Device::getName()>
c000e914:	83 c4 10             	add    esp,0x10
c000e917:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e91a:	75 8e                	jne    c000e8aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e91c:	83 fe 0f             	cmp    esi,0xf
c000e91f:	7f 09                	jg     c000e92a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e921:	0f b6 b6 80 78 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8780]
c000e928:	eb 80                	jmp    c000e8aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e92a:	83 ec 0c             	sub    esp,0xc
c000e92d:	68 3c 4f 02 c0       	push   0xc0024f3c
c000e932:	e8 e8 5e 00 00       	call   c001481f <Krnl::panic(char const*)>
c000e937:	83 c4 10             	add    esp,0x10
c000e93a:	e9 6b ff ff ff       	jmp    c000e8aa <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e93f:	90                   	nop

c000e940 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e940:	56                   	push   esi
c000e941:	53                   	push   ebx
c000e942:	52                   	push   edx
c000e943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e947:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e94b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e950:	75 3a                	jne    c000e98c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e952:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e956:	8d 50 20             	lea    edx,[eax+0x20]
c000e959:	c1 e2 04             	shl    edx,0x4
c000e95c:	8d 04 16             	lea    eax,[esi+edx*1]
c000e95f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e963:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e969:	74 0b                	je     c000e976 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e96b:	83 c0 04             	add    eax,0x4
c000e96e:	39 d0                	cmp    eax,edx
c000e970:	75 f1                	jne    c000e963 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e972:	58                   	pop    eax
c000e973:	5b                   	pop    ebx
c000e974:	5e                   	pop    esi
c000e975:	c3                   	ret    
c000e976:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e980:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e98a:	eb df                	jmp    c000e96b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e98c:	83 ec 0c             	sub    esp,0xc
c000e98f:	56                   	push   esi
c000e990:	e8 65 fa ff ff       	call   c000e3fa <Device::getName()>
c000e995:	83 c4 10             	add    esp,0x10
c000e998:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e99b:	75 b5                	jne    c000e952 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e99d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e9a2:	7f 11                	jg     c000e9b5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e9a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a8:	0f b6 80 80 78 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8780]
c000e9af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e9b3:	eb 9d                	jmp    c000e952 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e9b5:	83 ec 0c             	sub    esp,0xc
c000e9b8:	68 49 4f 02 c0       	push   0xc0024f49
c000e9bd:	e8 5d 5e 00 00       	call   c001481f <Krnl::panic(char const*)>
c000e9c2:	83 c4 10             	add    esp,0x10
c000e9c5:	eb 8b                	jmp    c000e952 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e9c7 <nmiHandler(regs*, void*)>:
c000e9c7:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000e9cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e9d0:	e9 b9 a7 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e9d5 <int_handler>:
c000e9d5:	55                   	push   ebp
c000e9d6:	57                   	push   edi
c000e9d7:	56                   	push   esi
c000e9d8:	53                   	push   ebx
c000e9d9:	83 ec 0c             	sub    esp,0xc
c000e9dc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e9e0:	80 3d 64 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c64,0x0
c000e9e7:	74 0b                	je     c000e9f4 <int_handler+0x1f>
c000e9e9:	fa                   	cli    
c000e9ea:	f4                   	hlt    
c000e9eb:	80 3d 64 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c64,0x0
c000e9f2:	75 f5                	jne    c000e9e9 <int_handler+0x14>
c000e9f4:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000e9f9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e9fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ea02:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000ea08:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea0b:	83 f8 17             	cmp    eax,0x17
c000ea0e:	77 13                	ja     c000ea23 <int_handler+0x4e>
c000ea10:	83 ec 08             	sub    esp,0x8
c000ea13:	8b 17                	mov    edx,DWORD PTR [edi]
c000ea15:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ea18:	0f b6 c0             	movzx  eax,al
c000ea1b:	50                   	push   eax
c000ea1c:	57                   	push   edi
c000ea1d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ea20:	83 c4 10             	add    esp,0x10
c000ea23:	83 c3 15             	add    ebx,0x15
c000ea26:	c1 e3 04             	shl    ebx,0x4
c000ea29:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ea2d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ea34:	31 db                	xor    ebx,ebx
c000ea36:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ea3a:	85 c0                	test   eax,eax
c000ea3c:	74 13                	je     c000ea51 <int_handler+0x7c>
c000ea3e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ea41:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ea45:	74 1c                	je     c000ea63 <int_handler+0x8e>
c000ea47:	83 ec 08             	sub    esp,0x8
c000ea4a:	52                   	push   edx
c000ea4b:	56                   	push   esi
c000ea4c:	ff d0                	call   eax
c000ea4e:	83 c4 10             	add    esp,0x10
c000ea51:	43                   	inc    ebx
c000ea52:	83 fb 04             	cmp    ebx,0x4
c000ea55:	75 df                	jne    c000ea36 <int_handler+0x61>
c000ea57:	83 c4 0c             	add    esp,0xc
c000ea5a:	31 c0                	xor    eax,eax
c000ea5c:	5b                   	pop    ebx
c000ea5d:	31 d2                	xor    edx,edx
c000ea5f:	5e                   	pop    esi
c000ea60:	5f                   	pop    edi
c000ea61:	5d                   	pop    ebp
c000ea62:	c3                   	ret    
c000ea63:	83 ec 08             	sub    esp,0x8
c000ea66:	52                   	push   edx
c000ea67:	56                   	push   esi
c000ea68:	ff d0                	call   eax
c000ea6a:	83 c4 10             	add    esp,0x10
c000ea6d:	83 c4 0c             	add    esp,0xc
c000ea70:	5b                   	pop    ebx
c000ea71:	5e                   	pop    esi
c000ea72:	5f                   	pop    edi
c000ea73:	5d                   	pop    ebp
c000ea74:	c3                   	ret    
c000ea75:	90                   	nop

c000ea76 <InterruptController::InterruptController(char const*)>:
c000ea76:	83 ec 1c             	sub    esp,0x1c
c000ea79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7d:	83 ec 08             	sub    esp,0x8
c000ea80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea84:	50                   	push   eax
c000ea85:	e8 74 f8 ff ff       	call   c000e2fe <Device::Device(char const*)>
c000ea8a:	83 c4 10             	add    esp,0x10
c000ea8d:	ba 00 52 02 c0       	mov    edx,0xc0025200
c000ea92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea96:	89 10                	mov    DWORD PTR [eax],edx
c000ea98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea9c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000eaa6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eaae:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000eab6:	7f 5e                	jg     c000eb16 <InterruptController::InterruptController(char const*)+0xa0>
c000eab8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eac0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000eac5:	7f 49                	jg     c000eb10 <InterruptController::InterruptController(char const*)+0x9a>
c000eac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eacb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eacf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ead6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eada:	01 ca                	add    edx,ecx
c000eadc:	83 c2 54             	add    edx,0x54
c000eadf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaeb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eaef:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eafa:	01 ca                	add    edx,ecx
c000eafc:	81 c2 54 04 00 00    	add    edx,0x454
c000eb02:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000eb0a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000eb0e:	eb b0                	jmp    c000eac0 <InterruptController::InterruptController(char const*)+0x4a>
c000eb10:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eb14:	eb 98                	jmp    c000eaae <InterruptController::InterruptController(char const*)+0x38>
c000eb16:	90                   	nop
c000eb17:	83 c4 1c             	add    esp,0x1c
c000eb1a:	c3                   	ret    
c000eb1b:	90                   	nop

c000eb1c <InterruptController::~InterruptController()>:
c000eb1c:	83 ec 0c             	sub    esp,0xc
c000eb1f:	ba 00 52 02 c0       	mov    edx,0xc0025200
c000eb24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb28:	89 10                	mov    DWORD PTR [eax],edx
c000eb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2e:	83 ec 0c             	sub    esp,0xc
c000eb31:	50                   	push   eax
c000eb32:	e8 91 f4 ff ff       	call   c000dfc8 <Device::~Device()>
c000eb37:	83 c4 10             	add    esp,0x10
c000eb3a:	90                   	nop
c000eb3b:	83 c4 0c             	add    esp,0xc
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <InterruptController::~InterruptController()>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	83 ec 0c             	sub    esp,0xc
c000eb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4a:	e8 cd ff ff ff       	call   c000eb1c <InterruptController::~InterruptController()>
c000eb4f:	83 c4 10             	add    esp,0x10
c000eb52:	83 ec 08             	sub    esp,0x8
c000eb55:	68 58 21 00 00       	push   0x2158
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	e8 6f e0 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	83 c4 0c             	add    esp,0xc
c000eb69:	c3                   	ret    

c000eb6a <displayDebugInfo(regs*)>:
c000eb6a:	55                   	push   ebp
c000eb6b:	57                   	push   edi
c000eb6c:	56                   	push   esi
c000eb6d:	53                   	push   ebx
c000eb6e:	83 ec 24             	sub    esp,0x24
c000eb71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eb75:	0f 20 c2             	mov    edx,cr0
c000eb78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000eb7c:	0f 20 d7             	mov    edi,cr2
c000eb7f:	0f 20 de             	mov    esi,cr3
c000eb82:	0f 20 e5             	mov    ebp,cr4
c000eb85:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eb88:	68 56 4f 02 c0       	push   0xc0024f56
c000eb8d:	e8 21 e1 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000eb92:	59                   	pop    ecx
c000eb93:	58                   	pop    eax
c000eb94:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000eb97:	68 61 4f 02 c0       	push   0xc0024f61
c000eb9c:	e8 12 e1 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000eba1:	58                   	pop    eax
c000eba2:	5a                   	pop    edx
c000eba3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000eba6:	68 6c 4f 02 c0       	push   0xc0024f6c
c000ebab:	e8 03 e1 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebb0:	59                   	pop    ecx
c000ebb1:	58                   	pop    eax
c000ebb2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ebb5:	68 77 4f 02 c0       	push   0xc0024f77
c000ebba:	e8 f4 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebbf:	58                   	pop    eax
c000ebc0:	5a                   	pop    edx
c000ebc1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ebc4:	68 82 4f 02 c0       	push   0xc0024f82
c000ebc9:	e8 e5 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebce:	59                   	pop    ecx
c000ebcf:	58                   	pop    eax
c000ebd0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ebd3:	68 8d 4f 02 c0       	push   0xc0024f8d
c000ebd8:	e8 d6 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebdd:	58                   	pop    eax
c000ebde:	5a                   	pop    edx
c000ebdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ebe2:	68 98 4f 02 c0       	push   0xc0024f98
c000ebe7:	e8 c7 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebec:	59                   	pop    ecx
c000ebed:	58                   	pop    eax
c000ebee:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ebf1:	68 a3 4f 02 c0       	push   0xc0024fa3
c000ebf6:	e8 b8 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ebfb:	58                   	pop    eax
c000ebfc:	5a                   	pop    edx
c000ebfd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ec00:	68 ae 4f 02 c0       	push   0xc0024fae
c000ec05:	e8 a9 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec0a:	59                   	pop    ecx
c000ec0b:	58                   	pop    eax
c000ec0c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ec0f:	68 bd 4f 02 c0       	push   0xc0024fbd
c000ec14:	e8 9a e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec19:	58                   	pop    eax
c000ec1a:	5a                   	pop    edx
c000ec1b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ec1e:	68 c8 4f 02 c0       	push   0xc0024fc8
c000ec23:	e8 8b e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec28:	59                   	pop    ecx
c000ec29:	58                   	pop    eax
c000ec2a:	57                   	push   edi
c000ec2b:	68 d3 4f 02 c0       	push   0xc0024fd3
c000ec30:	e8 7e e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec35:	58                   	pop    eax
c000ec36:	5a                   	pop    edx
c000ec37:	56                   	push   esi
c000ec38:	68 de 4f 02 c0       	push   0xc0024fde
c000ec3d:	e8 71 e0 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ec42:	59                   	pop    ecx
c000ec43:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ec48:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec4e:	e8 6a be ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c000ec53:	58                   	pop    eax
c000ec54:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ec57:	5a                   	pop    edx
c000ec58:	c1 e0 05             	shl    eax,0x5
c000ec5b:	05 e0 75 02 c0       	add    eax,0xc00275e0
c000ec60:	50                   	push   eax
c000ec61:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ec66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec6c:	e8 59 c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ec71:	59                   	pop    ecx
c000ec72:	58                   	pop    eax
c000ec73:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ec78:	68 e9 4f 02 c0       	push   0xc0024fe9
c000ec7d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec83:	e8 42 c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ec88:	58                   	pop    eax
c000ec89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ec8e:	5a                   	pop    edx
c000ec8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ec92:	83 c0 0c             	add    eax,0xc
c000ec95:	50                   	push   eax
c000ec96:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ec9b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca1:	e8 24 c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eca6:	59                   	pop    ecx
c000eca7:	58                   	pop    eax
c000eca8:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ecad:	68 f2 4f 02 c0       	push   0xc0024ff2
c000ecb2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecb8:	e8 0d c3 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ecbd:	58                   	pop    eax
c000ecbe:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ecc3:	5a                   	pop    edx
c000ecc4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ecc7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eccd:	e8 b2 c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ecd2:	59                   	pop    ecx
c000ecd3:	58                   	pop    eax
c000ecd4:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ecd9:	68 fa 4f 02 c0       	push   0xc0024ffa
c000ecde:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece4:	e8 e1 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ece9:	58                   	pop    eax
c000ecea:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ecef:	5a                   	pop    edx
c000ecf0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ecf3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecf9:	e8 86 c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ecfe:	59                   	pop    ecx
c000ecff:	58                   	pop    eax
c000ed00:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed05:	68 02 50 02 c0       	push   0xc0025002
c000ed0a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed10:	e8 b5 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed15:	58                   	pop    eax
c000ed16:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed1b:	5a                   	pop    edx
c000ed1c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed1f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed25:	e8 5a c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed2a:	59                   	pop    ecx
c000ed2b:	58                   	pop    eax
c000ed2c:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed31:	68 0a 50 02 c0       	push   0xc002500a
c000ed36:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed3c:	e8 89 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed41:	58                   	pop    eax
c000ed42:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed47:	5a                   	pop    edx
c000ed48:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ed4b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed51:	e8 2e c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed56:	59                   	pop    ecx
c000ed57:	58                   	pop    eax
c000ed58:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed5d:	68 12 50 02 c0       	push   0xc0025012
c000ed62:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed68:	e8 5d c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed6d:	58                   	pop    eax
c000ed6e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed73:	5a                   	pop    edx
c000ed74:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed77:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7d:	e8 02 c2 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ed82:	59                   	pop    ecx
c000ed83:	58                   	pop    eax
c000ed84:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed89:	68 1a 50 02 c0       	push   0xc002501a
c000ed8e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed94:	e8 31 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ed99:	58                   	pop    eax
c000ed9a:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ed9f:	5a                   	pop    edx
c000eda0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eda3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda9:	e8 d6 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000edae:	59                   	pop    ecx
c000edaf:	58                   	pop    eax
c000edb0:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000edb5:	68 22 50 02 c0       	push   0xc0025022
c000edba:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc0:	e8 05 c2 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000edc5:	58                   	pop    eax
c000edc6:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000edcb:	5a                   	pop    edx
c000edcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000edd0:	52                   	push   edx
c000edd1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edd7:	e8 a8 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000eddc:	59                   	pop    ecx
c000eddd:	58                   	pop    eax
c000edde:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ede3:	68 2b 50 02 c0       	push   0xc002502b
c000ede8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edee:	e8 d7 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000edf3:	58                   	pop    eax
c000edf4:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000edf9:	5a                   	pop    edx
c000edfa:	57                   	push   edi
c000edfb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee01:	e8 7e c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee06:	59                   	pop    ecx
c000ee07:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee0c:	5f                   	pop    edi
c000ee0d:	68 33 50 02 c0       	push   0xc0025033
c000ee12:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee18:	e8 ad c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee1d:	58                   	pop    eax
c000ee1e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee23:	5a                   	pop    edx
c000ee24:	56                   	push   esi
c000ee25:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee2b:	e8 54 c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee30:	59                   	pop    ecx
c000ee31:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee36:	5e                   	pop    esi
c000ee37:	68 3b 50 02 c0       	push   0xc002503b
c000ee3c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee42:	e8 83 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee47:	5f                   	pop    edi
c000ee48:	58                   	pop    eax
c000ee49:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee4e:	55                   	push   ebp
c000ee4f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee55:	e8 2a c1 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee5a:	58                   	pop    eax
c000ee5b:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee60:	5a                   	pop    edx
c000ee61:	68 43 50 02 c0       	push   0xc0025043
c000ee66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee6c:	e8 59 c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee71:	0f 21 c0             	mov    eax,db0
c000ee74:	59                   	pop    ecx
c000ee75:	5e                   	pop    esi
c000ee76:	50                   	push   eax
c000ee77:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee7c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee82:	e8 fd c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ee87:	5f                   	pop    edi
c000ee88:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ee8d:	5d                   	pop    ebp
c000ee8e:	68 4c 50 02 c0       	push   0xc002504c
c000ee93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee99:	e8 2c c1 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ee9e:	0f 21 c8             	mov    eax,db1
c000eea1:	5a                   	pop    edx
c000eea2:	59                   	pop    ecx
c000eea3:	50                   	push   eax
c000eea4:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000eea9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeaf:	e8 d0 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000eeb4:	5e                   	pop    esi
c000eeb5:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000eeba:	5f                   	pop    edi
c000eebb:	68 54 50 02 c0       	push   0xc0025054
c000eec0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec6:	e8 ff c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eecb:	0f 21 d0             	mov    eax,db2
c000eece:	5d                   	pop    ebp
c000eecf:	5a                   	pop    edx
c000eed0:	50                   	push   eax
c000eed1:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000eed6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eedc:	e8 a3 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000eee1:	59                   	pop    ecx
c000eee2:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000eee7:	5e                   	pop    esi
c000eee8:	68 5c 50 02 c0       	push   0xc002505c
c000eeed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eef3:	e8 d2 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000eef8:	0f 21 d8             	mov    eax,db3
c000eefb:	5f                   	pop    edi
c000eefc:	5d                   	pop    ebp
c000eefd:	50                   	push   eax
c000eefe:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef09:	e8 76 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef0e:	58                   	pop    eax
c000ef0f:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef14:	5a                   	pop    edx
c000ef15:	68 64 50 02 c0       	push   0xc0025064
c000ef1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef20:	e8 a5 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef25:	0f 21 f0             	mov    eax,db6
c000ef28:	59                   	pop    ecx
c000ef29:	5e                   	pop    esi
c000ef2a:	50                   	push   eax
c000ef2b:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef30:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef36:	e8 49 c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef3b:	5f                   	pop    edi
c000ef3c:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef41:	5d                   	pop    ebp
c000ef42:	68 6c 50 02 c0       	push   0xc002506c
c000ef47:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef4d:	e8 78 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef52:	0f 21 f8             	mov    eax,db7
c000ef55:	5a                   	pop    edx
c000ef56:	59                   	pop    ecx
c000ef57:	50                   	push   eax
c000ef58:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef5d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef63:	e8 1c c0 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000ef68:	5e                   	pop    esi
c000ef69:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ef6c:	e8 48 8a 00 00       	call   c00179b9 <Thr::getDriverNameFromAddress(unsigned long)>
c000ef71:	83 c4 10             	add    esp,0x10
c000ef74:	85 c0                	test   eax,eax
c000ef76:	74 7d                	je     c000eff5 <displayDebugInfo(regs*)+0x48b>
c000ef78:	89 c6                	mov    esi,eax
c000ef7a:	50                   	push   eax
c000ef7b:	50                   	push   eax
c000ef7c:	56                   	push   esi
c000ef7d:	68 74 50 02 c0       	push   0xc0025074
c000ef82:	e8 2c dd ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000ef87:	5a                   	pop    edx
c000ef88:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000ef8d:	59                   	pop    ecx
c000ef8e:	68 82 50 02 c0       	push   0xc0025082
c000ef93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef99:	e8 2c c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000ef9e:	5f                   	pop    edi
c000ef9f:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000efa4:	5d                   	pop    ebp
c000efa5:	56                   	push   esi
c000efa6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efac:	e8 19 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000efb1:	58                   	pop    eax
c000efb2:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000efb7:	5a                   	pop    edx
c000efb8:	68 8e 50 02 c0       	push   0xc002508e
c000efbd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc3:	e8 02 c0 ff ff       	call   c000afca <VgaText::puts(char const*)>
c000efc8:	59                   	pop    ecx
c000efc9:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000efce:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000efd4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000efd7:	e8 14 8a 00 00       	call   c00179f0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000efdc:	5b                   	pop    ebx
c000efdd:	5d                   	pop    ebp
c000efde:	50                   	push   eax
c000efdf:	57                   	push   edi
c000efe0:	e8 9f bf ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c000efe5:	58                   	pop    eax
c000efe6:	5a                   	pop    edx
c000efe7:	56                   	push   esi
c000efe8:	68 9a 50 02 c0       	push   0xc002509a
c000efed:	e8 c1 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000eff2:	83 c4 10             	add    esp,0x10
c000eff5:	fa                   	cli    
c000eff6:	f4                   	hlt    
c000eff7:	eb fe                	jmp    c000eff7 <displayDebugInfo(regs*)+0x48d>

c000eff9 <x87EmulHandler(regs*, void*)>:
c000eff9:	83 ec 0c             	sub    esp,0xc
c000effc:	0f 20 c2             	mov    edx,cr0
c000efff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f004:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f008:	75 4b                	jne    c000f055 <x87EmulHandler(regs*, void*)+0x5c>
c000f00a:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f00f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f015:	85 c0                	test   eax,eax
c000f017:	74 05                	je     c000f01e <x87EmulHandler(regs*, void*)+0x25>
c000f019:	83 e2 08             	and    edx,0x8
c000f01c:	75 17                	jne    c000f035 <x87EmulHandler(regs*, void*)+0x3c>
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f025:	e8 3c ae 00 00       	call   c0019e66 <Vm::x87Handler(regs*)>
c000f02a:	83 c4 10             	add    esp,0x10
c000f02d:	84 c0                	test   al,al
c000f02f:	74 24                	je     c000f055 <x87EmulHandler(regs*, void*)+0x5c>
c000f031:	83 c4 0c             	add    esp,0xc
c000f034:	c3                   	ret    
c000f035:	83 ec 0c             	sub    esp,0xc
c000f038:	68 c0 50 02 c0       	push   0xc00250c0
c000f03d:	e8 71 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f042:	0f 06                	clts   
c000f044:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f049:	83 c4 10             	add    esp,0x10
c000f04c:	a3 c8 82 02 c0       	mov    ds:0xc00282c8,eax
c000f051:	83 c4 0c             	add    esp,0xc
c000f054:	c3                   	ret    
c000f055:	83 ec 0c             	sub    esp,0xc
c000f058:	68 aa 50 02 c0       	push   0xc00250aa
c000f05d:	e8 51 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f062:	5a                   	pop    edx
c000f063:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f067:	e8 fe fa ff ff       	call   c000eb6a <displayDebugInfo(regs*)>

c000f06c <gpFault(regs*, void*)>:
c000f06c:	53                   	push   ebx
c000f06d:	83 ec 14             	sub    esp,0x14
c000f070:	c7 05 c4 82 02 c0 22 93 01 c0 	mov    DWORD PTR ds:0xc00282c4,0xc0019322
c000f07a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f07e:	53                   	push   ebx
c000f07f:	e8 9e a2 00 00       	call   c0019322 <Vm::faultHandler(regs*)>
c000f084:	83 c4 10             	add    esp,0x10
c000f087:	84 c0                	test   al,al
c000f089:	74 05                	je     c000f090 <gpFault(regs*, void*)+0x24>
c000f08b:	83 c4 08             	add    esp,0x8
c000f08e:	5b                   	pop    ebx
c000f08f:	c3                   	ret    
c000f090:	83 ec 0c             	sub    esp,0xc
c000f093:	68 cd 50 02 c0       	push   0xc00250cd
c000f098:	e8 16 dc ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f09d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0a0:	e8 c5 fa ff ff       	call   c000eb6a <displayDebugInfo(regs*)>

c000f0a5 <pgFault(regs*, void*)>:
c000f0a5:	53                   	push   ebx
c000f0a6:	83 ec 10             	sub    esp,0x10
c000f0a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f0ad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0b0:	68 e8 50 02 c0       	push   0xc00250e8
c000f0b5:	e8 f9 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f0ba:	0f 20 d0             	mov    eax,cr2
c000f0bd:	5a                   	pop    edx
c000f0be:	59                   	pop    ecx
c000f0bf:	50                   	push   eax
c000f0c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f0c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f0ce:	e8 5b d7 ff ff       	call   c000c82e <VAS::tryLoadBackOffDisk(unsigned long)>
c000f0d3:	83 c4 10             	add    esp,0x10
c000f0d6:	84 c0                	test   al,al
c000f0d8:	74 05                	je     c000f0df <pgFault(regs*, void*)+0x3a>
c000f0da:	83 c4 08             	add    esp,0x8
c000f0dd:	5b                   	pop    ebx
c000f0de:	c3                   	ret    
c000f0df:	83 ec 0c             	sub    esp,0xc
c000f0e2:	68 fd 50 02 c0       	push   0xc00250fd
c000f0e7:	e8 c7 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f0ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f0ef:	e8 76 fa ff ff       	call   c000eb6a <displayDebugInfo(regs*)>

c000f0f4 <otherISRHandler(regs*, void*)>:
c000f0f4:	53                   	push   ebx
c000f0f5:	83 ec 0c             	sub    esp,0xc
c000f0f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f0ff:	50                   	push   eax
c000f100:	50                   	push   eax
c000f101:	68 0a 51 02 c0       	push   0xc002510a
c000f106:	e8 a8 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f10b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f10e:	e8 57 fa ff ff       	call   c000eb6a <displayDebugInfo(regs*)>

c000f113 <opcodeFault(regs*, void*)>:
c000f113:	55                   	push   ebp
c000f114:	89 e5                	mov    ebp,esp
c000f116:	56                   	push   esi
c000f117:	53                   	push   ebx
c000f118:	83 ec 30             	sub    esp,0x30
c000f11b:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f120:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f126:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f12c:	84 c0                	test   al,al
c000f12e:	74 24                	je     c000f154 <opcodeFault(regs*, void*)+0x41>
c000f130:	83 ec 0c             	sub    esp,0xc
c000f133:	68 28 51 02 c0       	push   0xc0025128
c000f138:	e8 76 db ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f13d:	83 c4 10             	add    esp,0x10
c000f140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f143:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f146:	8d 50 19             	lea    edx,[eax+0x19]
c000f149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f14c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f14f:	e9 7b 03 00 00       	jmp    c000f4cf <opcodeFault(regs*, void*)+0x3bc>
c000f154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f157:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f15a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f15d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f164:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f167:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f16a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f16d:	8a 00                	mov    al,BYTE PTR [eax]
c000f16f:	3c f0                	cmp    al,0xf0
c000f171:	75 17                	jne    c000f18a <opcodeFault(regs*, void*)+0x77>
c000f173:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f179:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f17c:	8d 50 01             	lea    edx,[eax+0x1]
c000f17f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f182:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f185:	e9 d6 00 00 00       	jmp    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f18a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f18d:	8a 00                	mov    al,BYTE PTR [eax]
c000f18f:	3c f2                	cmp    al,0xf2
c000f191:	74 09                	je     c000f19c <opcodeFault(regs*, void*)+0x89>
c000f193:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f196:	8a 00                	mov    al,BYTE PTR [eax]
c000f198:	3c f3                	cmp    al,0xf3
c000f19a:	75 1b                	jne    c000f1b7 <opcodeFault(regs*, void*)+0xa4>
c000f19c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1a0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1a9:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1af:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1b2:	e9 a9 00 00 00       	jmp    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f1b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1ba:	8a 00                	mov    al,BYTE PTR [eax]
c000f1bc:	3c 66                	cmp    al,0x66
c000f1be:	75 1b                	jne    c000f1db <opcodeFault(regs*, void*)+0xc8>
c000f1c0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1c4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1cd:	8d 50 01             	lea    edx,[eax+0x1]
c000f1d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1d6:	e9 85 00 00 00       	jmp    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f1db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1de:	8a 00                	mov    al,BYTE PTR [eax]
c000f1e0:	3c 67                	cmp    al,0x67
c000f1e2:	75 18                	jne    c000f1fc <opcodeFault(regs*, void*)+0xe9>
c000f1e4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f1e8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f1eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1f1:	8d 50 01             	lea    edx,[eax+0x1]
c000f1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1f7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1fa:	eb 64                	jmp    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f1fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f1ff:	8a 00                	mov    al,BYTE PTR [eax]
c000f201:	3c 2e                	cmp    al,0x2e
c000f203:	74 09                	je     c000f20e <opcodeFault(regs*, void*)+0xfb>
c000f205:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f208:	8a 00                	mov    al,BYTE PTR [eax]
c000f20a:	3c 3e                	cmp    al,0x3e
c000f20c:	75 18                	jne    c000f226 <opcodeFault(regs*, void*)+0x113>
c000f20e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f212:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f218:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f21b:	8d 50 01             	lea    edx,[eax+0x1]
c000f21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f221:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f224:	eb 3a                	jmp    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f226:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f229:	8a 00                	mov    al,BYTE PTR [eax]
c000f22b:	3c 36                	cmp    al,0x36
c000f22d:	74 1b                	je     c000f24a <opcodeFault(regs*, void*)+0x137>
c000f22f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f232:	8a 00                	mov    al,BYTE PTR [eax]
c000f234:	3c 26                	cmp    al,0x26
c000f236:	74 12                	je     c000f24a <opcodeFault(regs*, void*)+0x137>
c000f238:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f23b:	8a 00                	mov    al,BYTE PTR [eax]
c000f23d:	3c 64                	cmp    al,0x64
c000f23f:	74 09                	je     c000f24a <opcodeFault(regs*, void*)+0x137>
c000f241:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f244:	8a 00                	mov    al,BYTE PTR [eax]
c000f246:	3c 65                	cmp    al,0x65
c000f248:	75 16                	jne    c000f260 <opcodeFault(regs*, void*)+0x14d>
c000f24a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f24e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f257:	8d 50 01             	lea    edx,[eax+0x1]
c000f25a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f263:	8a 00                	mov    al,BYTE PTR [eax]
c000f265:	3c 0f                	cmp    al,0xf
c000f267:	0f 85 8d 01 00 00    	jne    c000f3fa <opcodeFault(regs*, void*)+0x2e7>
c000f26d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f270:	40                   	inc    eax
c000f271:	8a 00                	mov    al,BYTE PTR [eax]
c000f273:	3c c7                	cmp    al,0xc7
c000f275:	0f 85 7f 01 00 00    	jne    c000f3fa <opcodeFault(regs*, void*)+0x2e7>
c000f27b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f27e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f281:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f284:	8d 50 01             	lea    edx,[eax+0x1]
c000f287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f28a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f28d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f290:	50                   	push   eax
c000f291:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f294:	50                   	push   eax
c000f295:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f298:	50                   	push   eax
c000f299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f29c:	e8 97 4c 00 00       	call   c0013f38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f2a1:	83 c4 10             	add    esp,0x10
c000f2a4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f2a7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f2aa:	83 f0 01             	xor    eax,0x1
c000f2ad:	84 c0                	test   al,al
c000f2af:	0f 84 45 01 00 00    	je     c000f3fa <opcodeFault(regs*, void*)+0x2e7>
c000f2b5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f2b8:	3c 01                	cmp    al,0x1
c000f2ba:	0f 85 3a 01 00 00    	jne    c000f3fa <opcodeFault(regs*, void*)+0x2e7>
c000f2c0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f2c3:	83 f0 01             	xor    eax,0x1
c000f2c6:	84 c0                	test   al,al
c000f2c8:	0f 84 2c 01 00 00    	je     c000f3fa <opcodeFault(regs*, void*)+0x2e7>
c000f2ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2d1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f2d4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f2d7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f2de:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f2e1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f2e4:	89 c2                	mov    edx,eax
c000f2e6:	b8 00 00 00 00       	mov    eax,0x0
c000f2eb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f2ee:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f2f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f2f7:	ba 00 00 00 00       	mov    edx,0x0
c000f2fc:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f2ff:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f305:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f308:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f30b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f312:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f315:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f318:	89 c2                	mov    edx,eax
c000f31a:	b8 00 00 00 00       	mov    eax,0x0
c000f31f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f322:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f328:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f32b:	ba 00 00 00 00       	mov    edx,0x0
c000f330:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f333:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f336:	fa                   	cli    
c000f337:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f33c:	40                   	inc    eax
c000f33d:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000f342:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f345:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f348:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34a:	89 c1                	mov    ecx,eax
c000f34c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f34f:	89 cb                	mov    ebx,ecx
c000f351:	89 d0                	mov    eax,edx
c000f353:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f356:	89 c6                	mov    esi,eax
c000f358:	89 f0                	mov    eax,esi
c000f35a:	09 d8                	or     eax,ebx
c000f35c:	85 c0                	test   eax,eax
c000f35e:	75 21                	jne    c000f381 <opcodeFault(regs*, void*)+0x26e>
c000f360:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f363:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f366:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f369:	89 01                	mov    DWORD PTR [ecx],eax
c000f36b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f371:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f374:	83 c8 40             	or     eax,0x40
c000f377:	89 c2                	mov    edx,eax
c000f379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f37c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f37f:	eb 3e                	jmp    c000f3bf <opcodeFault(regs*, void*)+0x2ac>
c000f381:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f384:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f387:	8b 00                	mov    eax,DWORD PTR [eax]
c000f389:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f38c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f38f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f395:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f398:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f39b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f39e:	89 d0                	mov    eax,edx
c000f3a0:	31 d2                	xor    edx,edx
c000f3a2:	89 c3                	mov    ebx,eax
c000f3a4:	89 d6                	mov    esi,edx
c000f3a6:	89 da                	mov    edx,ebx
c000f3a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ab:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f3ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f3b4:	83 e0 bf             	and    eax,0xffffffbf
c000f3b7:	89 c2                	mov    edx,eax
c000f3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3bc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f3bf:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f3c4:	48                   	dec    eax
c000f3c5:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000f3ca:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f3cf:	85 c0                	test   eax,eax
c000f3d1:	75 01                	jne    c000f3d4 <opcodeFault(regs*, void*)+0x2c1>
c000f3d3:	fb                   	sti    
c000f3d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f3dd:	01 c2                	add    edx,eax
c000f3df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3e2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3e5:	83 ec 0c             	sub    esp,0xc
c000f3e8:	68 4b 51 02 c0       	push   0xc002514b
c000f3ed:	e8 c1 d8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f3f2:	83 c4 10             	add    esp,0x10
c000f3f5:	e9 d5 00 00 00       	jmp    c000f4cf <opcodeFault(regs*, void*)+0x3bc>
c000f3fa:	83 ec 0c             	sub    esp,0xc
c000f3fd:	68 5e 51 02 c0       	push   0xc002515e
c000f402:	e8 ac d8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f407:	83 c4 10             	add    esp,0x10
c000f40a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f40d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f413:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f416:	c1 e0 04             	shl    eax,0x4
c000f419:	01 d0                	add    eax,edx
c000f41b:	83 c0 03             	add    eax,0x3
c000f41e:	8a 00                	mov    al,BYTE PTR [eax]
c000f420:	0f b6 d8             	movzx  ebx,al
c000f423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f426:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f42c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f42f:	c1 e0 04             	shl    eax,0x4
c000f432:	01 d0                	add    eax,edx
c000f434:	83 c0 02             	add    eax,0x2
c000f437:	8a 00                	mov    al,BYTE PTR [eax]
c000f439:	0f b6 c8             	movzx  ecx,al
c000f43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f43f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f448:	c1 e0 04             	shl    eax,0x4
c000f44b:	01 d0                	add    eax,edx
c000f44d:	40                   	inc    eax
c000f44e:	8a 00                	mov    al,BYTE PTR [eax]
c000f450:	0f b6 d0             	movzx  edx,al
c000f453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f456:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f45c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f45f:	c1 e0 04             	shl    eax,0x4
c000f462:	01 f0                	add    eax,esi
c000f464:	8a 00                	mov    al,BYTE PTR [eax]
c000f466:	0f b6 c0             	movzx  eax,al
c000f469:	83 ec 0c             	sub    esp,0xc
c000f46c:	53                   	push   ebx
c000f46d:	51                   	push   ecx
c000f46e:	52                   	push   edx
c000f46f:	50                   	push   eax
c000f470:	68 70 51 02 c0       	push   0xc0025170
c000f475:	e8 39 d8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f47a:	83 c4 20             	add    esp,0x20
c000f47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f480:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f483:	83 c0 03             	add    eax,0x3
c000f486:	8a 00                	mov    al,BYTE PTR [eax]
c000f488:	0f b6 d8             	movzx  ebx,al
c000f48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f48e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f491:	83 c0 02             	add    eax,0x2
c000f494:	8a 00                	mov    al,BYTE PTR [eax]
c000f496:	0f b6 c8             	movzx  ecx,al
c000f499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f49c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f49f:	40                   	inc    eax
c000f4a0:	8a 00                	mov    al,BYTE PTR [eax]
c000f4a2:	0f b6 d0             	movzx  edx,al
c000f4a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	83 ec 0c             	sub    esp,0xc
c000f4b3:	53                   	push   ebx
c000f4b4:	51                   	push   ecx
c000f4b5:	52                   	push   edx
c000f4b6:	50                   	push   eax
c000f4b7:	68 98 51 02 c0       	push   0xc0025198
c000f4bc:	e8 f2 d7 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c000f4c1:	83 c4 20             	add    esp,0x20
c000f4c4:	83 ec 0c             	sub    esp,0xc
c000f4c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f4ca:	e8 9b f6 ff ff       	call   c000eb6a <displayDebugInfo(regs*)>
c000f4cf:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f4d2:	5b                   	pop    ebx
c000f4d3:	5e                   	pop    esi
c000f4d4:	5d                   	pop    ebp
c000f4d5:	c3                   	ret    

c000f4d6 <displayProgramFault(char const*)>:
c000f4d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f4de:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f4e4:	85 c0                	test   eax,eax
c000f4e6:	74 15                	je     c000f4fd <displayProgramFault(char const*)+0x27>
c000f4e8:	83 ec 0c             	sub    esp,0xc
c000f4eb:	6a 04                	push   0x4
c000f4ed:	6a 0f                	push   0xf
c000f4ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4f3:	50                   	push   eax
c000f4f4:	e8 cd b7 ff ff       	call   c000acc6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f4f9:	83 c4 1c             	add    esp,0x1c
c000f4fc:	c3                   	ret    
c000f4fd:	c3                   	ret    

c000f4fe <setupInterruptController()>:
c000f4fe:	55                   	push   ebp
c000f4ff:	89 e5                	mov    ebp,esp
c000f501:	53                   	push   ebx
c000f502:	83 ec 24             	sub    esp,0x24
c000f505:	b8 00 00 00 00       	mov    eax,0x0
c000f50a:	85 c0                	test   eax,eax
c000f50c:	0f 95 c0             	setne  al
c000f50f:	84 c0                	test   al,al
c000f511:	74 5b                	je     c000f56e <setupInterruptController()+0x70>
c000f513:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f51a:	83 ec 0c             	sub    esp,0xc
c000f51d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f520:	e8 9e a4 ff ff       	call   c00099c3 <malloc>
c000f525:	83 c4 10             	add    esp,0x10
c000f528:	89 c3                	mov    ebx,eax
c000f52a:	83 ec 0c             	sub    esp,0xc
c000f52d:	53                   	push   ebx
c000f52e:	e8 4b 24 01 00       	call   c002197e <APIC::APIC()>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f539:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f53c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f53f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f541:	83 c0 08             	add    eax,0x8
c000f544:	8b 00                	mov    eax,DWORD PTR [eax]
c000f546:	6a 00                	push   0x0
c000f548:	6a 00                	push   0x0
c000f54a:	6a 00                	push   0x0
c000f54c:	52                   	push   edx
c000f54d:	ff d0                	call   eax
c000f54f:	83 c4 10             	add    esp,0x10
c000f552:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f557:	83 ec 08             	sub    esp,0x8
c000f55a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f55d:	50                   	push   eax
c000f55e:	e8 97 eb ff ff       	call   c000e0fa <Device::addChild(Device*)>
c000f563:	83 c4 10             	add    esp,0x10
c000f566:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f569:	e9 79 03 00 00       	jmp    c000f8e7 <setupInterruptController()+0x3e9>
c000f56e:	a0 a0 8a 02 c0       	mov    al,ds:0xc0028aa0
c000f573:	84 c0                	test   al,al
c000f575:	75 14                	jne    c000f58b <setupInterruptController()+0x8d>
c000f577:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f57c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f582:	83 e2 fe             	and    edx,0xfffffffe
c000f585:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f58b:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f590:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f596:	83 e0 01             	and    eax,0x1
c000f599:	84 c0                	test   al,al
c000f59b:	0f 95 c0             	setne  al
c000f59e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f5a1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f5a8:	83 ec 0c             	sub    esp,0xc
c000f5ab:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f5ae:	e8 10 a4 ff ff       	call   c00099c3 <malloc>
c000f5b3:	83 c4 10             	add    esp,0x10
c000f5b6:	89 c3                	mov    ebx,eax
c000f5b8:	83 ec 0c             	sub    esp,0xc
c000f5bb:	53                   	push   ebx
c000f5bc:	e8 15 29 01 00       	call   c0021ed6 <PIC::PIC()>
c000f5c1:	83 c4 10             	add    esp,0x10
c000f5c4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f5c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f5ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5cf:	83 c0 08             	add    eax,0x8
c000f5d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d4:	6a 00                	push   0x0
c000f5d6:	6a 00                	push   0x0
c000f5d8:	6a 00                	push   0x0
c000f5da:	52                   	push   edx
c000f5db:	ff d0                	call   eax
c000f5dd:	83 c4 10             	add    esp,0x10
c000f5e0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f5e4:	74 73                	je     c000f659 <setupInterruptController()+0x15b>
c000f5e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f5e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ee:	83 c0 0c             	add    eax,0xc
c000f5f1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5f3:	6a 00                	push   0x0
c000f5f5:	6a 00                	push   0x0
c000f5f7:	6a 00                	push   0x0
c000f5f9:	52                   	push   edx
c000f5fa:	ff d0                	call   eax
c000f5fc:	83 c4 10             	add    esp,0x10
c000f5ff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f603:	74 15                	je     c000f61a <setupInterruptController()+0x11c>
c000f605:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f608:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60a:	83 c0 04             	add    eax,0x4
c000f60d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f60f:	83 ec 0c             	sub    esp,0xc
c000f612:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f615:	ff d0                	call   eax
c000f617:	83 c4 10             	add    esp,0x10
c000f61a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f621:	83 ec 0c             	sub    esp,0xc
c000f624:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f627:	e8 97 a3 ff ff       	call   c00099c3 <malloc>
c000f62c:	83 c4 10             	add    esp,0x10
c000f62f:	89 c3                	mov    ebx,eax
c000f631:	83 ec 0c             	sub    esp,0xc
c000f634:	53                   	push   ebx
c000f635:	e8 44 23 01 00       	call   c002197e <APIC::APIC()>
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f640:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f643:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f646:	8b 00                	mov    eax,DWORD PTR [eax]
c000f648:	83 c0 08             	add    eax,0x8
c000f64b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f64d:	6a 00                	push   0x0
c000f64f:	6a 00                	push   0x0
c000f651:	6a 00                	push   0x0
c000f653:	52                   	push   edx
c000f654:	ff d0                	call   eax
c000f656:	83 c4 10             	add    esp,0x10
c000f659:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c000f65e:	83 ec 08             	sub    esp,0x8
c000f661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f664:	50                   	push   eax
c000f665:	e8 90 ea ff ff       	call   c000e0fa <Device::addChild(Device*)>
c000f66a:	83 c4 10             	add    esp,0x10
c000f66d:	c7 05 c8 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00282c8,0x0
c000f677:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f67a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f67c:	83 c0 24             	add    eax,0x24
c000f67f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f681:	6a 00                	push   0x0
c000f683:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f688:	6a 00                	push   0x0
c000f68a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f68d:	ff d0                	call   eax
c000f68f:	83 c4 10             	add    esp,0x10
c000f692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f695:	8b 00                	mov    eax,DWORD PTR [eax]
c000f697:	83 c0 24             	add    eax,0x24
c000f69a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f69c:	6a 00                	push   0x0
c000f69e:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f6a3:	6a 01                	push   0x1
c000f6a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6a8:	ff d0                	call   eax
c000f6aa:	83 c4 10             	add    esp,0x10
c000f6ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b2:	83 c0 24             	add    eax,0x24
c000f6b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6b7:	6a 00                	push   0x0
c000f6b9:	68 c7 e9 00 c0       	push   0xc000e9c7
c000f6be:	6a 02                	push   0x2
c000f6c0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6c3:	ff d0                	call   eax
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6cd:	83 c0 24             	add    eax,0x24
c000f6d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6d2:	6a 00                	push   0x0
c000f6d4:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f6d9:	6a 03                	push   0x3
c000f6db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6de:	ff d0                	call   eax
c000f6e0:	83 c4 10             	add    esp,0x10
c000f6e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6e6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e8:	83 c0 24             	add    eax,0x24
c000f6eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ed:	6a 00                	push   0x0
c000f6ef:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f6f4:	6a 04                	push   0x4
c000f6f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6f9:	ff d0                	call   eax
c000f6fb:	83 c4 10             	add    esp,0x10
c000f6fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f701:	8b 00                	mov    eax,DWORD PTR [eax]
c000f703:	83 c0 24             	add    eax,0x24
c000f706:	8b 00                	mov    eax,DWORD PTR [eax]
c000f708:	6a 00                	push   0x0
c000f70a:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f70f:	6a 05                	push   0x5
c000f711:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f714:	ff d0                	call   eax
c000f716:	83 c4 10             	add    esp,0x10
c000f719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f71c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71e:	83 c0 24             	add    eax,0x24
c000f721:	8b 00                	mov    eax,DWORD PTR [eax]
c000f723:	6a 00                	push   0x0
c000f725:	68 13 f1 00 c0       	push   0xc000f113
c000f72a:	6a 06                	push   0x6
c000f72c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f72f:	ff d0                	call   eax
c000f731:	83 c4 10             	add    esp,0x10
c000f734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f737:	8b 00                	mov    eax,DWORD PTR [eax]
c000f739:	83 c0 24             	add    eax,0x24
c000f73c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f73e:	6a 00                	push   0x0
c000f740:	68 f9 ef 00 c0       	push   0xc000eff9
c000f745:	6a 07                	push   0x7
c000f747:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f74a:	ff d0                	call   eax
c000f74c:	83 c4 10             	add    esp,0x10
c000f74f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f752:	8b 00                	mov    eax,DWORD PTR [eax]
c000f754:	83 c0 24             	add    eax,0x24
c000f757:	8b 00                	mov    eax,DWORD PTR [eax]
c000f759:	6a 00                	push   0x0
c000f75b:	68 e2 e7 00 c0       	push   0xc000e7e2
c000f760:	6a 08                	push   0x8
c000f762:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f765:	ff d0                	call   eax
c000f767:	83 c4 10             	add    esp,0x10
c000f76a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f76d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f76f:	83 c0 24             	add    eax,0x24
c000f772:	8b 00                	mov    eax,DWORD PTR [eax]
c000f774:	6a 00                	push   0x0
c000f776:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f77b:	6a 09                	push   0x9
c000f77d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f780:	ff d0                	call   eax
c000f782:	83 c4 10             	add    esp,0x10
c000f785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f788:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78a:	83 c0 24             	add    eax,0x24
c000f78d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78f:	6a 00                	push   0x0
c000f791:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f796:	6a 0a                	push   0xa
c000f798:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f79b:	ff d0                	call   eax
c000f79d:	83 c4 10             	add    esp,0x10
c000f7a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a5:	83 c0 24             	add    eax,0x24
c000f7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7aa:	6a 00                	push   0x0
c000f7ac:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f7b1:	6a 0b                	push   0xb
c000f7b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7b6:	ff d0                	call   eax
c000f7b8:	83 c4 10             	add    esp,0x10
c000f7bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c0:	83 c0 24             	add    eax,0x24
c000f7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c5:	6a 00                	push   0x0
c000f7c7:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f7cc:	6a 0c                	push   0xc
c000f7ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d1:	ff d0                	call   eax
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7db:	83 c0 24             	add    eax,0x24
c000f7de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e0:	6a 00                	push   0x0
c000f7e2:	68 6c f0 00 c0       	push   0xc000f06c
c000f7e7:	6a 0d                	push   0xd
c000f7e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ec:	ff d0                	call   eax
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f6:	83 c0 24             	add    eax,0x24
c000f7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fb:	6a 00                	push   0x0
c000f7fd:	68 a5 f0 00 c0       	push   0xc000f0a5
c000f802:	6a 0e                	push   0xe
c000f804:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f807:	ff d0                	call   eax
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f811:	83 c0 24             	add    eax,0x24
c000f814:	8b 00                	mov    eax,DWORD PTR [eax]
c000f816:	6a 00                	push   0x0
c000f818:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f81d:	6a 0f                	push   0xf
c000f81f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f822:	ff d0                	call   eax
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82c:	83 c0 24             	add    eax,0x24
c000f82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f831:	6a 00                	push   0x0
c000f833:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f838:	6a 10                	push   0x10
c000f83a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83d:	ff d0                	call   eax
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f845:	8b 00                	mov    eax,DWORD PTR [eax]
c000f847:	83 c0 24             	add    eax,0x24
c000f84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84c:	6a 00                	push   0x0
c000f84e:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f853:	6a 11                	push   0x11
c000f855:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f858:	ff d0                	call   eax
c000f85a:	83 c4 10             	add    esp,0x10
c000f85d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f860:	8b 00                	mov    eax,DWORD PTR [eax]
c000f862:	83 c0 24             	add    eax,0x24
c000f865:	8b 00                	mov    eax,DWORD PTR [eax]
c000f867:	6a 00                	push   0x0
c000f869:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f86e:	6a 12                	push   0x12
c000f870:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f873:	ff d0                	call   eax
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87d:	83 c0 24             	add    eax,0x24
c000f880:	8b 00                	mov    eax,DWORD PTR [eax]
c000f882:	6a 00                	push   0x0
c000f884:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f889:	6a 13                	push   0x13
c000f88b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88e:	ff d0                	call   eax
c000f890:	83 c4 10             	add    esp,0x10
c000f893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f896:	8b 00                	mov    eax,DWORD PTR [eax]
c000f898:	83 c0 24             	add    eax,0x24
c000f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89d:	6a 00                	push   0x0
c000f89f:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f8a4:	6a 14                	push   0x14
c000f8a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a9:	ff d0                	call   eax
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b3:	83 c0 24             	add    eax,0x24
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	6a 00                	push   0x0
c000f8ba:	68 f4 f0 00 c0       	push   0xc000f0f4
c000f8bf:	6a 1e                	push   0x1e
c000f8c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c4:	ff d0                	call   eax
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ce:	83 c0 24             	add    eax,0x24
c000f8d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d3:	6a 00                	push   0x0
c000f8d5:	68 2f 6a 01 c0       	push   0xc0016a2f
c000f8da:	6a 60                	push   0x60
c000f8dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8df:	ff d0                	call   eax
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f8ea:	c9                   	leave  
c000f8eb:	c3                   	ret    

c000f8ec <InterruptController::convertLegacyIRQNumber(int)>:
c000f8ec:	55                   	push   ebp
c000f8ed:	89 e5                	mov    ebp,esp
c000f8ef:	83 ec 08             	sub    esp,0x8
c000f8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f5:	83 ec 0c             	sub    esp,0xc
c000f8f8:	50                   	push   eax
c000f8f9:	e8 fc ea ff ff       	call   c000e3fa <Device::getName()>
c000f8fe:	83 c4 10             	add    esp,0x10
c000f901:	8a 00                	mov    al,BYTE PTR [eax]
c000f903:	3c 41                	cmp    al,0x41
c000f905:	0f 94 c0             	sete   al
c000f908:	84 c0                	test   al,al
c000f90a:	74 28                	je     c000f934 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f90c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f910:	7f 12                	jg     c000f924 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f915:	05 80 78 02 c0       	add    eax,0xc0027880
c000f91a:	8a 00                	mov    al,BYTE PTR [eax]
c000f91c:	0f b6 c0             	movzx  eax,al
c000f91f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f922:	eb 10                	jmp    c000f934 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f924:	83 ec 0c             	sub    esp,0xc
c000f927:	68 c0 51 02 c0       	push   0xc00251c0
c000f92c:	e8 ee 4e 00 00       	call   c001481f <Krnl::panic(char const*)>
c000f931:	83 c4 10             	add    esp,0x10
c000f934:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f937:	c9                   	leave  
c000f938:	c3                   	ret    
c000f939:	90                   	nop

c000f93a <startGUI(void*)>:
c000f93a:	55                   	push   ebp
c000f93b:	89 e5                	mov    ebp,esp
c000f93d:	53                   	push   ebx
c000f93e:	83 ec 04             	sub    esp,0x4
c000f941:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f946:	48                   	dec    eax
c000f947:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000f94c:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f951:	85 c0                	test   eax,eax
c000f953:	75 01                	jne    c000f956 <startGUI(void*)+0x1c>
c000f955:	fb                   	sti    
c000f956:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c000f95c:	83 ec 08             	sub    esp,0x8
c000f95f:	6a 01                	push   0x1
c000f961:	68 40 52 02 c0       	push   0xc0025240
c000f966:	e8 9f 80 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c000f96b:	83 c4 10             	add    esp,0x10
c000f96e:	83 ec 08             	sub    esp,0x8
c000f971:	53                   	push   ebx
c000f972:	50                   	push   eax
c000f973:	e8 c3 82 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c000f978:	83 c4 10             	add    esp,0x10
c000f97b:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c000f981:	83 ec 08             	sub    esp,0x8
c000f984:	6a 01                	push   0x1
c000f986:	68 5a 52 02 c0       	push   0xc002525a
c000f98b:	e8 7a 80 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c000f990:	83 c4 10             	add    esp,0x10
c000f993:	83 ec 08             	sub    esp,0x8
c000f996:	53                   	push   ebx
c000f997:	50                   	push   eax
c000f998:	e8 9e 82 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c000f99d:	83 c4 10             	add    esp,0x10
c000f9a0:	90                   	nop
c000f9a1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f9a4:	c9                   	leave  
c000f9a5:	c3                   	ret    

c000f9a6 <startGUIVESA(void*)>:
c000f9a6:	55                   	push   ebp
c000f9a7:	89 e5                	mov    ebp,esp
c000f9a9:	53                   	push   ebx
c000f9aa:	83 ec 04             	sub    esp,0x4
c000f9ad:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f9b2:	48                   	dec    eax
c000f9b3:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000f9b8:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000f9bd:	85 c0                	test   eax,eax
c000f9bf:	75 01                	jne    c000f9c2 <startGUIVESA(void*)+0x1c>
c000f9c1:	fb                   	sti    
c000f9c2:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c000f9c8:	83 ec 08             	sub    esp,0x8
c000f9cb:	6a 01                	push   0x1
c000f9cd:	68 74 52 02 c0       	push   0xc0025274
c000f9d2:	e8 33 80 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c000f9d7:	83 c4 10             	add    esp,0x10
c000f9da:	83 ec 08             	sub    esp,0x8
c000f9dd:	53                   	push   ebx
c000f9de:	50                   	push   eax
c000f9df:	e8 57 82 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c000f9e4:	83 c4 10             	add    esp,0x10
c000f9e7:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c000f9ed:	83 ec 08             	sub    esp,0x8
c000f9f0:	6a 01                	push   0x1
c000f9f2:	68 5a 52 02 c0       	push   0xc002525a
c000f9f7:	e8 0e 80 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c000f9fc:	83 c4 10             	add    esp,0x10
c000f9ff:	83 ec 08             	sub    esp,0x8
c000fa02:	53                   	push   ebx
c000fa03:	50                   	push   eax
c000fa04:	e8 32 82 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c000fa09:	83 c4 10             	add    esp,0x10
c000fa0c:	90                   	nop
c000fa0d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa10:	c9                   	leave  
c000fa11:	c3                   	ret    

c000fa12 <sendKeyToTerminal(unsigned char)>:
c000fa12:	55                   	push   ebp
c000fa13:	89 e5                	mov    ebp,esp
c000fa15:	83 ec 28             	sub    esp,0x28
c000fa18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa1b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fa1e:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c000fa23:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fa27:	83 ec 08             	sub    esp,0x8
c000fa2a:	52                   	push   edx
c000fa2b:	50                   	push   eax
c000fa2c:	e8 3d b7 ff ff       	call   c000b16e <VgaText::receiveKey(unsigned char)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fa38:	0f 85 8f 00 00 00    	jne    c000facd <sendKeyToTerminal(unsigned char)+0xbb>
c000fa3e:	fa                   	cli    
c000fa3f:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000fa44:	40                   	inc    eax
c000fa45:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000fa4a:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c000fa4f:	40                   	inc    eax
c000fa50:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c000fa55:	a1 e0 82 02 c0       	mov    eax,ds:0xc00282e0
c000fa5a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fa5d:	c7 05 e0 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00282e0,0x0
c000fa67:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fa6b:	74 1f                	je     c000fa8c <sendKeyToTerminal(unsigned char)+0x7a>
c000fa6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa70:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fa73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fa76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fa79:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fa7c:	83 ec 0c             	sub    esp,0xc
c000fa7f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fa82:	e8 25 8e 00 00       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c000fa87:	83 c4 10             	add    esp,0x10
c000fa8a:	eb db                	jmp    c000fa67 <sendKeyToTerminal(unsigned char)+0x55>
c000fa8c:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c000fa91:	48                   	dec    eax
c000fa92:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c000fa97:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c000fa9c:	85 c0                	test   eax,eax
c000fa9e:	75 18                	jne    c000fab8 <sendKeyToTerminal(unsigned char)+0xa6>
c000faa0:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c000faa5:	85 c0                	test   eax,eax
c000faa7:	74 0f                	je     c000fab8 <sendKeyToTerminal(unsigned char)+0xa6>
c000faa9:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c000fab3:	e8 38 89 00 00       	call   c00183f0 <schedule()>
c000fab8:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000fabd:	48                   	dec    eax
c000fabe:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000fac3:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000fac8:	85 c0                	test   eax,eax
c000faca:	75 01                	jne    c000facd <sendKeyToTerminal(unsigned char)+0xbb>
c000facc:	fb                   	sti    
c000facd:	90                   	nop
c000face:	c9                   	leave  
c000facf:	c3                   	ret    

c000fad0 <sendKeyboardToken(KeyboardToken)>:
c000fad0:	55                   	push   ebp
c000fad1:	89 e5                	mov    ebp,esp
c000fad3:	83 ec 18             	sub    esp,0x18
c000fad6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fadc:	0f b7 c0             	movzx  eax,ax
c000fadf:	83 f2 01             	xor    edx,0x1
c000fae2:	88 90 00 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7d00],dl
c000fae8:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c000faed:	85 c0                	test   eax,eax
c000faef:	74 24                	je     c000fb15 <sendKeyboardToken(KeyboardToken)+0x45>
c000faf1:	8b 0d e8 82 02 c0    	mov    ecx,DWORD PTR ds:0xc00282e8
c000faf7:	83 ec 04             	sub    esp,0x4
c000fafa:	68 00 83 02 c0       	push   0xc0028300
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	89 e2                	mov    edx,esp
c000fb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb07:	89 02                	mov    DWORD PTR [edx],eax
c000fb09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fb0c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fb10:	ff d1                	call   ecx
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb18:	66 3d 03 02          	cmp    ax,0x203
c000fb1c:	75 07                	jne    c000fb25 <sendKeyboardToken(KeyboardToken)+0x55>
c000fb1e:	a0 00 84 02 c0       	mov    al,ds:0xc0028400
c000fb23:	84 c0                	test   al,al
c000fb25:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb29:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fb2c:	a0 08 87 02 c0       	mov    al,ds:0xc0028708
c000fb31:	38 c2                	cmp    dl,al
c000fb33:	74 1c                	je     c000fb51 <sendKeyboardToken(KeyboardToken)+0x81>
c000fb35:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fb38:	a2 08 87 02 c0       	mov    ds:0xc0028708,al
c000fb3d:	a0 08 87 02 c0       	mov    al,ds:0xc0028708
c000fb42:	0f b6 c0             	movzx  eax,al
c000fb45:	83 ec 0c             	sub    esp,0xc
c000fb48:	50                   	push   eax
c000fb49:	e8 60 ac ff ff       	call   c000a7ae <setTerminalScrollLock(bool)>
c000fb4e:	83 c4 10             	add    esp,0x10
c000fb51:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fb54:	84 c0                	test   al,al
c000fb56:	0f 84 ae 00 00 00    	je     c000fc0a <sendKeyboardToken(KeyboardToken)+0x13a>
c000fb5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5f:	66 3d 10 03          	cmp    ax,0x310
c000fb63:	75 06                	jne    c000fb6b <sendKeyboardToken(KeyboardToken)+0x9b>
c000fb65:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fb6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6e:	66 3d 11 03          	cmp    ax,0x311
c000fb72:	75 06                	jne    c000fb7a <sendKeyboardToken(KeyboardToken)+0xaa>
c000fb74:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fb7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7d:	66 3d 12 03          	cmp    ax,0x312
c000fb81:	75 06                	jne    c000fb89 <sendKeyboardToken(KeyboardToken)+0xb9>
c000fb83:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fb89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8c:	66 3d 13 03          	cmp    ax,0x313
c000fb90:	75 06                	jne    c000fb98 <sendKeyboardToken(KeyboardToken)+0xc8>
c000fb92:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fb98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb9b:	66 3d 14 03          	cmp    ax,0x314
c000fb9f:	75 06                	jne    c000fba7 <sendKeyboardToken(KeyboardToken)+0xd7>
c000fba1:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbaa:	66 3d 15 03          	cmp    ax,0x315
c000fbae:	75 06                	jne    c000fbb6 <sendKeyboardToken(KeyboardToken)+0xe6>
c000fbb0:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fbb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbb9:	66 3d 16 03          	cmp    ax,0x316
c000fbbd:	75 06                	jne    c000fbc5 <sendKeyboardToken(KeyboardToken)+0xf5>
c000fbbf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fbc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbc8:	66 3d 17 03          	cmp    ax,0x317
c000fbcc:	75 06                	jne    c000fbd4 <sendKeyboardToken(KeyboardToken)+0x104>
c000fbce:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fbd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbd7:	66 3d 18 03          	cmp    ax,0x318
c000fbdb:	75 06                	jne    c000fbe3 <sendKeyboardToken(KeyboardToken)+0x113>
c000fbdd:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fbe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbe6:	66 3d 19 03          	cmp    ax,0x319
c000fbea:	75 06                	jne    c000fbf2 <sendKeyboardToken(KeyboardToken)+0x122>
c000fbec:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fbf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf5:	66 3d 1a 03          	cmp    ax,0x31a
c000fbf9:	0f 85 c9 00 00 00    	jne    c000fcc8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fbff:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fc05:	e9 be 00 00 00       	jmp    c000fcc8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fc0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc0d:	66 3d 10 03          	cmp    ax,0x310
c000fc11:	75 0a                	jne    c000fc1d <sendKeyboardToken(KeyboardToken)+0x14d>
c000fc13:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fc19:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc20:	66 3d 11 03          	cmp    ax,0x311
c000fc24:	75 0a                	jne    c000fc30 <sendKeyboardToken(KeyboardToken)+0x160>
c000fc26:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fc2c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc33:	66 3d 12 03          	cmp    ax,0x312
c000fc37:	75 0a                	jne    c000fc43 <sendKeyboardToken(KeyboardToken)+0x173>
c000fc39:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fc3f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc46:	66 3d 13 03          	cmp    ax,0x313
c000fc4a:	75 0a                	jne    c000fc56 <sendKeyboardToken(KeyboardToken)+0x186>
c000fc4c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fc52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc59:	66 3d 14 03          	cmp    ax,0x314
c000fc5d:	75 0a                	jne    c000fc69 <sendKeyboardToken(KeyboardToken)+0x199>
c000fc5f:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fc65:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc6c:	66 3d 15 03          	cmp    ax,0x315
c000fc70:	75 0a                	jne    c000fc7c <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fc72:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fc78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7f:	66 3d 16 03          	cmp    ax,0x316
c000fc83:	75 0a                	jne    c000fc8f <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fc85:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fc8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fc8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc92:	66 3d 17 03          	cmp    ax,0x317
c000fc96:	75 0a                	jne    c000fca2 <sendKeyboardToken(KeyboardToken)+0x1d2>
c000fc98:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fc9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca5:	66 3d 18 03          	cmp    ax,0x318
c000fca9:	75 0a                	jne    c000fcb5 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fcab:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fcb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb8:	66 3d 19 03          	cmp    ax,0x319
c000fcbc:	75 0a                	jne    c000fcc8 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fcbe:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fcc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fcc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fccb:	66 3d 00 02          	cmp    ax,0x200
c000fccf:	75 2c                	jne    c000fcfd <sendKeyboardToken(KeyboardToken)+0x22d>
c000fcd1:	a0 00 87 02 c0       	mov    al,ds:0xc0028700
c000fcd6:	83 f0 01             	xor    eax,0x1
c000fcd9:	84 c0                	test   al,al
c000fcdb:	74 20                	je     c000fcfd <sendKeyboardToken(KeyboardToken)+0x22d>
c000fcdd:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000fce2:	6a 01                	push   0x1
c000fce4:	6a 00                	push   0x0
c000fce6:	68 3a f9 00 c0       	push   0xc000f93a
c000fceb:	50                   	push   eax
c000fcec:	e8 e3 84 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000fcf1:	83 c4 10             	add    esp,0x10
c000fcf4:	c6 05 00 87 02 c0 01 	mov    BYTE PTR ds:0xc0028700,0x1
c000fcfb:	eb 33                	jmp    c000fd30 <sendKeyboardToken(KeyboardToken)+0x260>
c000fcfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd00:	66 3d 01 02          	cmp    ax,0x201
c000fd04:	75 2a                	jne    c000fd30 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd06:	a0 00 87 02 c0       	mov    al,ds:0xc0028700
c000fd0b:	83 f0 01             	xor    eax,0x1
c000fd0e:	84 c0                	test   al,al
c000fd10:	74 1e                	je     c000fd30 <sendKeyboardToken(KeyboardToken)+0x260>
c000fd12:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c000fd17:	6a 01                	push   0x1
c000fd19:	6a 00                	push   0x0
c000fd1b:	68 a6 f9 00 c0       	push   0xc000f9a6
c000fd20:	50                   	push   eax
c000fd21:	e8 ae 84 00 00       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	c6 05 00 87 02 c0 01 	mov    BYTE PTR ds:0xc0028700,0x1
c000fd30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd33:	66 3d 1d 03          	cmp    ax,0x31d
c000fd37:	75 06                	jne    c000fd3f <sendKeyboardToken(KeyboardToken)+0x26f>
c000fd39:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fd3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd42:	66 3d 1c 03          	cmp    ax,0x31c
c000fd46:	75 06                	jne    c000fd4e <sendKeyboardToken(KeyboardToken)+0x27e>
c000fd48:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fd4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd51:	66 3d 1b 03          	cmp    ax,0x31b
c000fd55:	75 06                	jne    c000fd5d <sendKeyboardToken(KeyboardToken)+0x28d>
c000fd57:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fd5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd60:	66 3d 1e 03          	cmp    ax,0x31e
c000fd64:	75 06                	jne    c000fd6c <sendKeyboardToken(KeyboardToken)+0x29c>
c000fd66:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fd6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd6f:	66 3d 1f 03          	cmp    ax,0x31f
c000fd73:	75 06                	jne    c000fd7b <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fd75:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fd7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd7e:	66 3d 1a 03          	cmp    ax,0x31a
c000fd82:	75 06                	jne    c000fd8a <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fd84:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fd8a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fd8e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd91:	83 f0 01             	xor    eax,0x1
c000fd94:	84 c0                	test   al,al
c000fd96:	74 77                	je     c000fe0f <sendKeyboardToken(KeyboardToken)+0x33f>
c000fd98:	a0 01 84 02 c0       	mov    al,ds:0xc0028401
c000fd9d:	84 c0                	test   al,al
c000fd9f:	74 41                	je     c000fde2 <sendKeyboardToken(KeyboardToken)+0x312>
c000fda1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fda5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fda9:	74 2b                	je     c000fdd6 <sendKeyboardToken(KeyboardToken)+0x306>
c000fdab:	8b 15 04 87 02 c0    	mov    edx,DWORD PTR ds:0xc0028704
c000fdb1:	89 d0                	mov    eax,edx
c000fdb3:	c1 e0 02             	shl    eax,0x2
c000fdb6:	01 d0                	add    eax,edx
c000fdb8:	01 c0                	add    eax,eax
c000fdba:	a3 04 87 02 c0       	mov    ds:0xc0028704,eax
c000fdbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc2:	0f b7 c0             	movzx  eax,ax
c000fdc5:	8d 50 d0             	lea    edx,[eax-0x30]
c000fdc8:	a1 04 87 02 c0       	mov    eax,ds:0xc0028704
c000fdcd:	01 d0                	add    eax,edx
c000fdcf:	a3 04 87 02 c0       	mov    ds:0xc0028704,eax
c000fdd4:	eb 6d                	jmp    c000fe43 <sendKeyboardToken(KeyboardToken)+0x373>
c000fdd6:	c7 05 04 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028704,0x0
c000fde0:	eb 61                	jmp    c000fe43 <sendKeyboardToken(KeyboardToken)+0x373>
c000fde2:	a1 04 87 02 c0       	mov    eax,ds:0xc0028704
c000fde7:	85 c0                	test   eax,eax
c000fde9:	74 18                	je     c000fe03 <sendKeyboardToken(KeyboardToken)+0x333>
c000fdeb:	a1 04 87 02 c0       	mov    eax,ds:0xc0028704
c000fdf0:	0f b6 c0             	movzx  eax,al
c000fdf3:	83 ec 0c             	sub    esp,0xc
c000fdf6:	50                   	push   eax
c000fdf7:	e8 16 fc ff ff       	call   c000fa12 <sendKeyToTerminal(unsigned char)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe03:	c7 05 04 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028704,0x0
c000fe0d:	eb 34                	jmp    c000fe43 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe12:	66 3d 01 01          	cmp    ax,0x101
c000fe16:	75 2b                	jne    c000fe43 <sendKeyboardToken(KeyboardToken)+0x373>
c000fe18:	a1 04 87 02 c0       	mov    eax,ds:0xc0028704
c000fe1d:	85 c0                	test   eax,eax
c000fe1f:	74 18                	je     c000fe39 <sendKeyboardToken(KeyboardToken)+0x369>
c000fe21:	a1 04 87 02 c0       	mov    eax,ds:0xc0028704
c000fe26:	0f b6 c0             	movzx  eax,al
c000fe29:	83 ec 0c             	sub    esp,0xc
c000fe2c:	50                   	push   eax
c000fe2d:	e8 e0 fb ff ff       	call   c000fa12 <sendKeyToTerminal(unsigned char)>
c000fe32:	83 c4 10             	add    esp,0x10
c000fe35:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fe39:	c7 05 04 87 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028704,0x0
c000fe43:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fe46:	83 f0 01             	xor    eax,0x1
c000fe49:	84 c0                	test   al,al
c000fe4b:	74 4c                	je     c000fe99 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe4d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fe50:	83 f0 01             	xor    eax,0x1
c000fe53:	84 c0                	test   al,al
c000fe55:	74 42                	je     c000fe99 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe57:	a0 00 84 02 c0       	mov    al,ds:0xc0028400
c000fe5c:	83 f0 01             	xor    eax,0x1
c000fe5f:	84 c0                	test   al,al
c000fe61:	74 36                	je     c000fe99 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe66:	66 83 f8 1f          	cmp    ax,0x1f
c000fe6a:	76 09                	jbe    c000fe75 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fe6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe6f:	66 83 f8 7e          	cmp    ax,0x7e
c000fe73:	76 12                	jbe    c000fe87 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fe75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe78:	66 83 f8 0a          	cmp    ax,0xa
c000fe7c:	74 09                	je     c000fe87 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fe7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe81:	66 83 f8 08          	cmp    ax,0x8
c000fe85:	75 12                	jne    c000fe99 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fe87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe8a:	0f b6 c0             	movzx  eax,al
c000fe8d:	83 ec 0c             	sub    esp,0xc
c000fe90:	50                   	push   eax
c000fe91:	e8 7c fb ff ff       	call   c000fa12 <sendKeyToTerminal(unsigned char)>
c000fe96:	83 c4 10             	add    esp,0x10
c000fe99:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fe9c:	83 f0 01             	xor    eax,0x1
c000fe9f:	84 c0                	test   al,al
c000fea1:	74 4f                	je     c000fef2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fea3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fea6:	83 f0 01             	xor    eax,0x1
c000fea9:	84 c0                	test   al,al
c000feab:	74 45                	je     c000fef2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fead:	a0 00 84 02 c0       	mov    al,ds:0xc0028400
c000feb2:	84 c0                	test   al,al
c000feb4:	74 3c                	je     c000fef2 <sendKeyboardToken(KeyboardToken)+0x422>
c000feb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb9:	66 83 f8 3f          	cmp    ax,0x3f
c000febd:	76 33                	jbe    c000fef2 <sendKeyboardToken(KeyboardToken)+0x422>
c000febf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec2:	66 83 f8 7f          	cmp    ax,0x7f
c000fec6:	77 2a                	ja     c000fef2 <sendKeyboardToken(KeyboardToken)+0x422>
c000fec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fecb:	88 c2                	mov    dl,al
c000fecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fed0:	66 83 f8 5f          	cmp    ax,0x5f
c000fed4:	76 04                	jbe    c000feda <sendKeyboardToken(KeyboardToken)+0x40a>
c000fed6:	b0 20                	mov    al,0x20
c000fed8:	eb 02                	jmp    c000fedc <sendKeyboardToken(KeyboardToken)+0x40c>
c000feda:	b0 00                	mov    al,0x0
c000fedc:	29 c2                	sub    edx,eax
c000fede:	88 d0                	mov    al,dl
c000fee0:	83 e8 40             	sub    eax,0x40
c000fee3:	0f b6 c0             	movzx  eax,al
c000fee6:	83 ec 0c             	sub    esp,0xc
c000fee9:	50                   	push   eax
c000feea:	e8 23 fb ff ff       	call   c000fa12 <sendKeyToTerminal(unsigned char)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fef5:	66 3d 00 03          	cmp    ax,0x300
c000fef9:	75 0f                	jne    c000ff0a <sendKeyboardToken(KeyboardToken)+0x43a>
c000fefb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fefe:	83 f0 01             	xor    eax,0x1
c000ff01:	84 c0                	test   al,al
c000ff03:	74 05                	je     c000ff0a <sendKeyboardToken(KeyboardToken)+0x43a>
c000ff05:	e8 15 ac ff ff       	call   c000ab1f <doTerminalCycle()>
c000ff0a:	90                   	nop
c000ff0b:	c9                   	leave  
c000ff0c:	c3                   	ret    

c000ff0d <clearInternalKeybuffer(VgaText*)>:
c000ff0d:	55                   	push   ebp
c000ff0e:	89 e5                	mov    ebp,esp
c000ff10:	83 ec 08             	sub    esp,0x8
c000ff13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff16:	05 98 01 00 00       	add    eax,0x198
c000ff1b:	83 ec 0c             	sub    esp,0xc
c000ff1e:	50                   	push   eax
c000ff1f:	e8 7c 07 ff ff       	call   c00006a0 <strlen>
c000ff24:	83 c4 10             	add    esp,0x10
c000ff27:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ff2a:	81 c2 98 01 00 00    	add    edx,0x198
c000ff30:	83 ec 04             	sub    esp,0x4
c000ff33:	50                   	push   eax
c000ff34:	6a 00                	push   0x0
c000ff36:	52                   	push   edx
c000ff37:	e8 48 07 ff ff       	call   c0000684 <memset>
c000ff3c:	83 c4 10             	add    esp,0x10
c000ff3f:	90                   	nop
c000ff40:	c9                   	leave  
c000ff41:	c3                   	ret    

c000ff42 <readKeyboard(VgaText*, char*, unsigned long)>:
c000ff42:	55                   	push   ebp
c000ff43:	89 e5                	mov    ebp,esp
c000ff45:	83 ec 18             	sub    esp,0x18
c000ff48:	a1 e8 82 02 c0       	mov    eax,ds:0xc00282e8
c000ff4d:	85 c0                	test   eax,eax
c000ff4f:	74 2a                	je     c000ff7b <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000ff51:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000ff57:	8b 0d e8 82 02 c0    	mov    ecx,DWORD PTR ds:0xc00282e8
c000ff5d:	83 ec 04             	sub    esp,0x4
c000ff60:	68 00 83 02 c0       	push   0xc0028300
c000ff65:	83 ec 08             	sub    esp,0x8
c000ff68:	89 e2                	mov    edx,esp
c000ff6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ff6d:	89 02                	mov    DWORD PTR [edx],eax
c000ff6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ff72:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ff76:	ff d1                	call   ecx
c000ff78:	83 c4 10             	add    esp,0x10
c000ff7b:	fb                   	sti    
c000ff7c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ff83:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ff87:	0f 84 a1 00 00 00    	je     c001002e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000ff8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff90:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ff96:	84 c0                	test   al,al
c000ff98:	75 28                	jne    c000ffc2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000ff9a:	fa                   	cli    
c000ff9b:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000ffa0:	40                   	inc    eax
c000ffa1:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000ffa6:	e8 45 84 00 00       	call   c00183f0 <schedule()>
c000ffab:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000ffb0:	48                   	dec    eax
c000ffb1:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c000ffb6:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c000ffbb:	85 c0                	test   eax,eax
c000ffbd:	75 ce                	jne    c000ff8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ffbf:	fb                   	sti    
c000ffc0:	eb cb                	jmp    c000ff8d <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ffc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ffc5:	8d 50 01             	lea    edx,[eax+0x1]
c000ffc8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ffcb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ffce:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000ffd4:	88 10                	mov    BYTE PTR [eax],dl
c000ffd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000ffdf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ffe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe5:	05 98 01 00 00       	add    eax,0x198
c000ffea:	83 ec 0c             	sub    esp,0xc
c000ffed:	50                   	push   eax
c000ffee:	e8 ad 06 ff ff       	call   c00006a0 <strlen>
c000fff3:	83 c4 10             	add    esp,0x10
c000fff6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fff9:	81 c2 98 01 00 00    	add    edx,0x198
c000ffff:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010002:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010005:	81 c2 98 01 00 00    	add    edx,0x198
c001000b:	83 ec 04             	sub    esp,0x4
c001000e:	50                   	push   eax
c001000f:	51                   	push   ecx
c0010010:	52                   	push   edx
c0010011:	e8 a6 05 ff ff       	call   c00005bc <memmove>
c0010016:	83 c4 10             	add    esp,0x10
c0010019:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001001c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001001f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010023:	0f 85 5a ff ff ff    	jne    c000ff83 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010029:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001002c:	eb 03                	jmp    c0010031 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c001002e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010031:	c9                   	leave  
c0010032:	c3                   	ret    
c0010033:	90                   	nop

c0010034 <Keyboard::Keyboard(char const*)>:
c0010034:	83 ec 0c             	sub    esp,0xc
c0010037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003b:	83 ec 08             	sub    esp,0x8
c001003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010042:	50                   	push   eax
c0010043:	e8 b6 e2 ff ff       	call   c000e2fe <Device::Device(char const*)>
c0010048:	83 c4 10             	add    esp,0x10
c001004b:	ba 98 52 02 c0       	mov    edx,0xc0025298
c0010050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010054:	89 10                	mov    DWORD PTR [eax],edx
c0010056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001005a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010064:	c6 05 e4 82 02 c0 01 	mov    BYTE PTR ds:0xc00282e4,0x1
c001006b:	90                   	nop
c001006c:	83 c4 0c             	add    esp,0xc
c001006f:	c3                   	ret    

c0010070 <Keyboard::~Keyboard()>:
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	ba 98 52 02 c0       	mov    edx,0xc0025298
c0010078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001007c:	89 10                	mov    DWORD PTR [eax],edx
c001007e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010082:	83 ec 0c             	sub    esp,0xc
c0010085:	50                   	push   eax
c0010086:	e8 3d df ff ff       	call   c000dfc8 <Device::~Device()>
c001008b:	83 c4 10             	add    esp,0x10
c001008e:	90                   	nop
c001008f:	83 c4 0c             	add    esp,0xc
c0010092:	c3                   	ret    
c0010093:	90                   	nop

c0010094 <Keyboard::~Keyboard()>:
c0010094:	83 ec 0c             	sub    esp,0xc
c0010097:	83 ec 0c             	sub    esp,0xc
c001009a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009e:	e8 cd ff ff ff       	call   c0010070 <Keyboard::~Keyboard()>
c00100a3:	83 c4 10             	add    esp,0x10
c00100a6:	83 ec 08             	sub    esp,0x8
c00100a9:	68 5c 01 00 00       	push   0x15c
c00100ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b2:	e8 1b cb ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00100b7:	83 c4 10             	add    esp,0x10
c00100ba:	83 c4 0c             	add    esp,0xc
c00100bd:	c3                   	ret    

c00100be <LogicalDisk::close(int, int, void*)>:
c00100be:	83 c8 ff             	or     eax,0xffffffff
c00100c1:	c3                   	ret    

c00100c2 <LogicalDisk::~LogicalDisk()>:
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	ba 10 53 02 c0       	mov    edx,0xc0025310
c00100ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ce:	89 10                	mov    DWORD PTR [eax],edx
c00100d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	50                   	push   eax
c00100d8:	e8 eb de ff ff       	call   c000dfc8 <Device::~Device()>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	90                   	nop
c00100e1:	83 c4 0c             	add    esp,0xc
c00100e4:	c3                   	ret    
c00100e5:	90                   	nop

c00100e6 <LogicalDisk::~LogicalDisk()>:
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	83 ec 0c             	sub    esp,0xc
c00100ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f0:	e8 cd ff ff ff       	call   c00100c2 <LogicalDisk::~LogicalDisk()>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	83 ec 08             	sub    esp,0x8
c00100fb:	68 74 01 00 00       	push   0x174
c0010100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010104:	e8 c9 ca ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	83 c4 0c             	add    esp,0xc
c001010f:	c3                   	ret    

c0010110 <LogicalDisk::open(int, int, void*)>:
c0010110:	83 ec 18             	sub    esp,0x18
c0010113:	68 c4 52 02 c0       	push   0xc00252c4
c0010118:	e8 02 47 00 00       	call   c001481f <Krnl::panic(char const*)>
c001011d:	83 c8 ff             	or     eax,0xffffffff
c0010120:	83 c4 1c             	add    esp,0x1c
c0010123:	c3                   	ret    

c0010124 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010124:	53                   	push   ebx
c0010125:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001012d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010131:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0010137:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001013d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010143:	77 10                	ja     c0010155 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010145:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001014b:	89 d3                	mov    ebx,edx
c001014d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010153:	72 05                	jb     c001015a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010155:	83 c8 ff             	or     eax,0xffffffff
c0010158:	89 c2                	mov    edx,eax
c001015a:	5b                   	pop    ebx
c001015b:	c3                   	ret    

c001015c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001015c:	56                   	push   esi
c001015d:	83 c8 ff             	or     eax,0xffffffff
c0010160:	53                   	push   ebx
c0010161:	89 c2                	mov    edx,eax
c0010163:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010167:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001016b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001016f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010175:	77 27                	ja     c001019e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010177:	89 d8                	mov    eax,ebx
c0010179:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001017f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010185:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001018a:	89 c2                	mov    edx,eax
c001018c:	73 10                	jae    c001019e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001018e:	89 c8                	mov    eax,ecx
c0010190:	89 da                	mov    edx,ebx
c0010192:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0010198:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001019e:	5b                   	pop    ebx
c001019f:	5e                   	pop    esi
c00101a0:	c3                   	ret    
c00101a1:	90                   	nop

c00101a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00101a2:	83 ec 1c             	sub    esp,0x1c
c00101a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00101a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00101ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00101b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00101bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00101c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101c8:	83 ec 08             	sub    esp,0x8
c00101cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00101cf:	50                   	push   eax
c00101d0:	e8 29 e1 ff ff       	call   c000e2fe <Device::Device(char const*)>
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	ba 10 53 02 c0       	mov    edx,0xc0025310
c00101dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101e1:	89 10                	mov    DWORD PTR [eax],edx
c00101e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101e7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00101ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101f2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00101f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00101fd:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010207:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001020b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001020f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010213:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010219:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001021f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010223:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010226:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001022a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010230:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010236:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001023a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001023e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010248:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010252:	90                   	nop
c0010253:	83 c4 1c             	add    esp,0x1c
c0010256:	c3                   	ret    
c0010257:	90                   	nop

c0010258 <LogicalDisk::assignDriveLetter()>:
c0010258:	55                   	push   ebp
c0010259:	57                   	push   edi
c001025a:	56                   	push   esi
c001025b:	53                   	push   ebx
c001025c:	83 ec 14             	sub    esp,0x14
c001025f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010263:	8b 3d 20 87 02 c0    	mov    edi,DWORD PTR ds:0xc0028720
c0010269:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001026f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010273:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010279:	8b 3d 24 87 02 c0    	mov    edi,DWORD PTR ds:0xc0028724
c001027f:	3c 01                	cmp    al,0x1
c0010281:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010285:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010289:	19 c0                	sbb    eax,eax
c001028b:	83 e0 02             	and    eax,0x2
c001028e:	83 c0 41             	add    eax,0x41
c0010291:	0f be e8             	movsx  ebp,al
c0010294:	3c 43                	cmp    al,0x43
c0010296:	75 10                	jne    c00102a8 <LogicalDisk::assignDriveLetter()+0x50>
c0010298:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001029f:	75 5d                	jne    c00102fe <LogicalDisk::assignDriveLetter()+0xa6>
c00102a1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00102a6:	75 56                	jne    c00102fe <LogicalDisk::assignDriveLetter()+0xa6>
c00102a8:	8d 75 bf             	lea    esi,[ebp-0x41]
c00102ab:	ba 01 00 00 00       	mov    edx,0x1
c00102b0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00102b4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00102b8:	d3 e2                	shl    edx,cl
c00102ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102be:	89 d7                	mov    edi,edx
c00102c0:	89 d6                	mov    esi,edx
c00102c2:	c1 ff 1f             	sar    edi,0x1f
c00102c5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00102c9:	21 f9                	and    ecx,edi
c00102cb:	09 d1                	or     ecx,edx
c00102cd:	75 2f                	jne    c00102fe <LogicalDisk::assignDriveLetter()+0xa6>
c00102cf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00102d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00102dd:	09 f2                	or     edx,esi
c00102df:	89 15 20 87 02 c0    	mov    DWORD PTR ds:0xc0028720,edx
c00102e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102e9:	09 fa                	or     edx,edi
c00102eb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00102ef:	89 15 24 87 02 c0    	mov    DWORD PTR ds:0xc0028724,edx
c00102f5:	89 1c bd 40 87 02 c0 	mov    DWORD PTR [edi*4-0x3ffd78c0],ebx
c00102fc:	eb 08                	jmp    c0010306 <LogicalDisk::assignDriveLetter()+0xae>
c00102fe:	45                   	inc    ebp
c00102ff:	40                   	inc    eax
c0010300:	3c 5b                	cmp    al,0x5b
c0010302:	75 90                	jne    c0010294 <LogicalDisk::assignDriveLetter()+0x3c>
c0010304:	31 c0                	xor    eax,eax
c0010306:	83 c4 14             	add    esp,0x14
c0010309:	5b                   	pop    ebx
c001030a:	5e                   	pop    esi
c001030b:	5f                   	pop    edi
c001030c:	5d                   	pop    ebp
c001030d:	c3                   	ret    

c001030e <LogicalDisk::mount()>:
c001030e:	56                   	push   esi
c001030f:	53                   	push   ebx
c0010310:	53                   	push   ebx
c0010311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010315:	8b 1d b4 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b4
c001031b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010325:	85 db                	test   ebx,ebx
c0010327:	74 27                	je     c0010350 <LogicalDisk::mount()+0x42>
c0010329:	51                   	push   ecx
c001032a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010331:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010333:	83 e8 41             	sub    eax,0x41
c0010336:	50                   	push   eax
c0010337:	56                   	push   esi
c0010338:	53                   	push   ebx
c0010339:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001033c:	83 c4 10             	add    esp,0x10
c001033f:	84 c0                	test   al,al
c0010341:	74 08                	je     c001034b <LogicalDisk::mount()+0x3d>
c0010343:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010349:	eb 07                	jmp    c0010352 <LogicalDisk::mount()+0x44>
c001034b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001034e:	eb d5                	jmp    c0010325 <LogicalDisk::mount()+0x17>
c0010350:	31 c0                	xor    eax,eax
c0010352:	5a                   	pop    edx
c0010353:	5b                   	pop    ebx
c0010354:	5e                   	pop    esi
c0010355:	c3                   	ret    

c0010356 <LogicalDisk::unmount()>:
c0010356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001035a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010364:	c3                   	ret    
c0010365:	90                   	nop

c0010366 <LogicalDisk::eject()>:
c0010366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001036a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010370:	8b 10                	mov    edx,DWORD PTR [eax]
c0010372:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010376:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010379:	90                   	nop

c001037a <LogicalDisk::unassignDriveLetter()>:
c001037a:	57                   	push   edi
c001037b:	56                   	push   esi
c001037c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010380:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010387:	84 c9                	test   cl,cl
c0010389:	75 0f                	jne    c001039a <LogicalDisk::unassignDriveLetter()+0x20>
c001038b:	c7 44 24 0c e8 52 02 c0 	mov    DWORD PTR [esp+0xc],0xc00252e8
c0010393:	5e                   	pop    esi
c0010394:	5f                   	pop    edi
c0010395:	e9 85 44 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c001039a:	83 e9 41             	sub    ecx,0x41
c001039d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00103a4:	b8 01 00 00 00       	mov    eax,0x1
c00103a9:	c7 04 8d 40 87 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd78c0],0x0
c00103b4:	d3 e0                	shl    eax,cl
c00103b6:	89 c7                	mov    edi,eax
c00103b8:	f7 d0                	not    eax
c00103ba:	c1 ff 1f             	sar    edi,0x1f
c00103bd:	21 05 20 87 02 c0    	and    DWORD PTR ds:0xc0028720,eax
c00103c3:	89 fe                	mov    esi,edi
c00103c5:	f7 d6                	not    esi
c00103c7:	21 35 24 87 02 c0    	and    DWORD PTR ds:0xc0028724,esi
c00103cd:	5e                   	pop    esi
c00103ce:	5f                   	pop    edi
c00103cf:	c3                   	ret    

c00103d0 <LogicalDisk::read(unsigned long long, int, void*)>:
c00103d0:	57                   	push   edi
c00103d1:	56                   	push   esi
c00103d2:	53                   	push   ebx
c00103d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103db:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103e3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00103e9:	77 41                	ja     c001042c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00103eb:	99                   	cdq    
c00103ec:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00103f2:	01 c8                	add    eax,ecx
c00103f4:	11 da                	adc    edx,ebx
c00103f6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00103fc:	19 d7                	sbb    edi,edx
c00103fe:	72 33                	jb     c0010433 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010400:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010406:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001040c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010410:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010414:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001041a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010420:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010424:	5b                   	pop    ebx
c0010425:	5e                   	pop    esi
c0010426:	5f                   	pop    edi
c0010427:	e9 e2 0a 00 00       	jmp    c0010f0e <VCache::read(unsigned long long, int, void*)>
c001042c:	b8 05 00 00 00       	mov    eax,0x5
c0010431:	eb 05                	jmp    c0010438 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010433:	b8 07 00 00 00       	mov    eax,0x7
c0010438:	5b                   	pop    ebx
c0010439:	5e                   	pop    esi
c001043a:	5f                   	pop    edi
c001043b:	c3                   	ret    

c001043c <LogicalDisk::write(unsigned long long, int, void*)>:
c001043c:	57                   	push   edi
c001043d:	56                   	push   esi
c001043e:	53                   	push   ebx
c001043f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010443:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010447:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001044b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001044f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010455:	77 41                	ja     c0010498 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010457:	99                   	cdq    
c0010458:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001045e:	01 c8                	add    eax,ecx
c0010460:	11 da                	adc    edx,ebx
c0010462:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010468:	19 d7                	sbb    edi,edx
c001046a:	72 33                	jb     c001049f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001046c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010472:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010478:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001047c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010480:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010486:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001048c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010490:	5b                   	pop    ebx
c0010491:	5e                   	pop    esi
c0010492:	5f                   	pop    edi
c0010493:	e9 7c 09 00 00       	jmp    c0010e14 <VCache::write(unsigned long long, int, void*)>
c0010498:	b8 05 00 00 00       	mov    eax,0x5
c001049d:	eb 05                	jmp    c00104a4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001049f:	b8 07 00 00 00       	mov    eax,0x7
c00104a4:	5b                   	pop    ebx
c00104a5:	5e                   	pop    esi
c00104a6:	5f                   	pop    edi
c00104a7:	c3                   	ret    

c00104a8 <Mouse::Mouse(char const*)>:
c00104a8:	83 ec 0c             	sub    esp,0xc
c00104ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104af:	83 ec 08             	sub    esp,0x8
c00104b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104b6:	50                   	push   eax
c00104b7:	e8 42 de ff ff       	call   c000e2fe <Device::Device(char const*)>
c00104bc:	83 c4 10             	add    esp,0x10
c00104bf:	ba 3c 53 02 c0       	mov    edx,0xc002533c
c00104c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c8:	89 10                	mov    DWORD PTR [eax],edx
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00104d8:	90                   	nop
c00104d9:	83 c4 0c             	add    esp,0xc
c00104dc:	c3                   	ret    
c00104dd:	90                   	nop
c00104de:	66 90                	xchg   ax,ax

c00104e0 <Mouse::~Mouse()>:
c00104e0:	83 ec 0c             	sub    esp,0xc
c00104e3:	ba 3c 53 02 c0       	mov    edx,0xc002533c
c00104e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ec:	89 10                	mov    DWORD PTR [eax],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	50                   	push   eax
c00104f6:	e8 cd da ff ff       	call   c000dfc8 <Device::~Device()>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	90                   	nop
c00104ff:	83 c4 0c             	add    esp,0xc
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <Mouse::~Mouse()>:
c0010504:	83 ec 0c             	sub    esp,0xc
c0010507:	83 ec 0c             	sub    esp,0xc
c001050a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050e:	e8 cd ff ff ff       	call   c00104e0 <Mouse::~Mouse()>
c0010513:	83 c4 10             	add    esp,0x10
c0010516:	83 ec 08             	sub    esp,0x8
c0010519:	68 58 01 00 00       	push   0x158
c001051e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010522:	e8 ab c6 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001052e:	55                   	push   ebp
c001052f:	57                   	push   edi
c0010530:	56                   	push   esi
c0010531:	53                   	push   ebx
c0010532:	81 ec 28 01 00 00    	sub    esp,0x128
c0010538:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001053f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010546:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001054d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010554:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010558:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001055c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010563:	e8 92 de ff ff       	call   c000e3fa <Device::getName()>
c0010568:	5a                   	pop    edx
c0010569:	59                   	pop    ecx
c001056a:	50                   	push   eax
c001056b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001056f:	55                   	push   ebp
c0010570:	e8 cb 01 ff ff       	call   c0000740 <strcpy>
c0010575:	5b                   	pop    ebx
c0010576:	58                   	pop    eax
c0010577:	68 60 53 02 c0       	push   0xc0025360
c001057c:	55                   	push   ebp
c001057d:	e8 fe 02 ff ff       	call   c0000880 <strcat>
c0010582:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010589:	e8 35 94 ff ff       	call   c00099c3 <malloc>
c001058e:	83 c4 0c             	add    esp,0xc
c0010591:	89 c3                	mov    ebx,eax
c0010593:	57                   	push   edi
c0010594:	56                   	push   esi
c0010595:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010599:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001059d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00105a4:	55                   	push   ebp
c00105a5:	50                   	push   eax
c00105a6:	e8 f7 fb ff ff       	call   c00101a2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00105ab:	83 c4 14             	add    esp,0x14
c00105ae:	53                   	push   ebx
c00105af:	e8 a4 fc ff ff       	call   c0010258 <LogicalDisk::assignDriveLetter()>
c00105b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00105b7:	e8 52 fd ff ff       	call   c001030e <LogicalDisk::mount()>
c00105bc:	58                   	pop    eax
c00105bd:	5a                   	pop    edx
c00105be:	53                   	push   ebx
c00105bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00105c6:	e8 2f db ff ff       	call   c000e0fa <Device::addChild(Device*)>
c00105cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00105d1:	5b                   	pop    ebx
c00105d2:	5e                   	pop    esi
c00105d3:	5f                   	pop    edi
c00105d4:	5d                   	pop    ebp
c00105d5:	c3                   	ret    

c00105d6 <createPartitionsForDisk(PhysicalDisk*)>:
c00105d6:	55                   	push   ebp
c00105d7:	57                   	push   edi
c00105d8:	56                   	push   esi
c00105d9:	53                   	push   ebx
c00105da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00105e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00105e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00105ed:	3d 00 02 00 00       	cmp    eax,0x200
c00105f2:	74 27                	je     c001061b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00105f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00105fa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010600:	83 ec 10             	sub    esp,0x10
c0010603:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010607:	99                   	cdq    
c0010608:	c1 e6 0a             	shl    esi,0xa
c001060b:	52                   	push   edx
c001060c:	89 fd                	mov    ebp,edi
c001060e:	50                   	push   eax
c001060f:	55                   	push   ebp
c0010610:	56                   	push   esi
c0010611:	e8 ce 23 01 00       	call   c00229e4 <__udivdi3>
c0010616:	e9 b1 00 00 00       	jmp    c00106cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001061b:	83 ec 0c             	sub    esp,0xc
c001061e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010620:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010624:	56                   	push   esi
c0010625:	6a 01                	push   0x1
c0010627:	6a 00                	push   0x0
c0010629:	6a 00                	push   0x0
c001062b:	53                   	push   ebx
c001062c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001062f:	83 c4 20             	add    esp,0x20
c0010632:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001063a:	75 0a                	jne    c0010646 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001063c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010644:	74 2c                	je     c0010672 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010646:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001064c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010652:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010658:	83 ec 10             	sub    esp,0x10
c001065b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001065f:	89 f7                	mov    edi,esi
c0010661:	c1 e0 0a             	shl    eax,0xa
c0010664:	c1 ff 1f             	sar    edi,0x1f
c0010667:	57                   	push   edi
c0010668:	56                   	push   esi
c0010669:	52                   	push   edx
c001066a:	50                   	push   eax
c001066b:	e8 74 23 01 00       	call   c00229e4 <__udivdi3>
c0010670:	eb 5a                	jmp    c00106cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010672:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010679:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010680:	83 e1 7f             	and    ecx,0x7f
c0010683:	83 e0 7f             	and    eax,0x7f
c0010686:	01 c1                	add    ecx,eax
c0010688:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001068f:	83 e0 7f             	and    eax,0x7f
c0010692:	01 c1                	add    ecx,eax
c0010694:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001069b:	83 e0 7f             	and    eax,0x7f
c001069e:	00 c1                	add    cl,al
c00106a0:	74 41                	je     c00106e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00106a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00106a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00106ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00106b4:	83 ec 10             	sub    esp,0x10
c00106b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00106bb:	89 f7                	mov    edi,esi
c00106bd:	c1 e0 0a             	shl    eax,0xa
c00106c0:	c1 ff 1f             	sar    edi,0x1f
c00106c3:	57                   	push   edi
c00106c4:	56                   	push   esi
c00106c5:	52                   	push   edx
c00106c6:	50                   	push   eax
c00106c7:	e8 18 23 01 00       	call   c00229e4 <__udivdi3>
c00106cc:	83 c4 14             	add    esp,0x14
c00106cf:	52                   	push   edx
c00106d0:	50                   	push   eax
c00106d1:	6a 00                	push   0x0
c00106d3:	6a 00                	push   0x0
c00106d5:	53                   	push   ebx
c00106d6:	e8 53 fe ff ff       	call   c001052e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00106db:	83 c4 20             	add    esp,0x20
c00106de:	e9 79 01 00 00       	jmp    c001085c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00106e3:	89 f0                	mov    eax,esi
c00106e5:	31 f6                	xor    esi,esi
c00106e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00106ee:	75 02                	jne    c00106f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00106f0:	89 f1                	mov    ecx,esi
c00106f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00106f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010700:	c1 e2 08             	shl    edx,0x8
c0010703:	c1 e7 10             	shl    edi,0x10
c0010706:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001070e:	09 fa                	or     edx,edi
c0010710:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010718:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001071f:	83 c0 10             	add    eax,0x10
c0010722:	09 fa                	or     edx,edi
c0010724:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001072b:	c1 e7 18             	shl    edi,0x18
c001072e:	09 fa                	or     edx,edi
c0010730:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010737:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001073b:	c1 e7 10             	shl    edi,0x10
c001073e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010745:	c1 e2 08             	shl    edx,0x8
c0010748:	09 fa                	or     edx,edi
c001074a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010751:	09 fa                	or     edx,edi
c0010753:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001075a:	c1 e7 18             	shl    edi,0x18
c001075d:	09 fa                	or     edx,edi
c001075f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010763:	46                   	inc    esi
c0010764:	83 fe 04             	cmp    esi,0x4
c0010767:	0f 85 7a ff ff ff    	jne    c00106e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001076d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010771:	83 f0 01             	xor    eax,0x1
c0010774:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010778:	75 57                	jne    c00107d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001077a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001077e:	83 f0 01             	xor    eax,0x1
c0010781:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010785:	75 4a                	jne    c00107d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010787:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001078b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010793:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001079b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107b1:	89 f7                	mov    edi,esi
c00107b3:	c1 e0 0a             	shl    eax,0xa
c00107b6:	c1 ff 1f             	sar    edi,0x1f
c00107b9:	57                   	push   edi
c00107ba:	56                   	push   esi
c00107bb:	52                   	push   edx
c00107bc:	50                   	push   eax
c00107bd:	e8 22 22 01 00       	call   c00229e4 <__udivdi3>
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00107c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00107cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00107d1:	84 c9                	test   cl,cl
c00107d3:	74 53                	je     c0010828 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00107d5:	0f b6 c9             	movzx  ecx,cl
c00107d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00107e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00107e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00107f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00107f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00107f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00107fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010804:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010808:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c001080c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010810:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010814:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010818:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001081c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010820:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010824:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010828:	31 ed                	xor    ebp,ebp
c001082a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001082e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010832:	89 f8                	mov    eax,edi
c0010834:	09 f0                	or     eax,esi
c0010836:	74 1e                	je     c0010856 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010838:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001083c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010840:	89 d1                	mov    ecx,edx
c0010842:	09 c1                	or     ecx,eax
c0010844:	74 10                	je     c0010856 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010846:	83 ec 0c             	sub    esp,0xc
c0010849:	57                   	push   edi
c001084a:	56                   	push   esi
c001084b:	52                   	push   edx
c001084c:	50                   	push   eax
c001084d:	53                   	push   ebx
c001084e:	e8 db fc ff ff       	call   c001052e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010853:	83 c4 20             	add    esp,0x20
c0010856:	45                   	inc    ebp
c0010857:	83 fd 04             	cmp    ebp,0x4
c001085a:	75 ce                	jne    c001082a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001085c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010862:	5b                   	pop    ebx
c0010863:	5e                   	pop    esi
c0010864:	5f                   	pop    edi
c0010865:	5d                   	pop    ebp
c0010866:	c3                   	ret    
c0010867:	90                   	nop

c0010868 <Serial::Serial(char const*)>:
c0010868:	83 ec 0c             	sub    esp,0xc
c001086b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001086f:	83 ec 08             	sub    esp,0x8
c0010872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010876:	50                   	push   eax
c0010877:	e8 82 da ff ff       	call   c000e2fe <Device::Device(char const*)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	ba 74 53 02 c0       	mov    edx,0xc0025374
c0010884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010888:	89 10                	mov    DWORD PTR [eax],edx
c001088a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010898:	90                   	nop
c0010899:	83 c4 0c             	add    esp,0xc
c001089c:	c3                   	ret    
c001089d:	90                   	nop
c001089e:	66 90                	xchg   ax,ax

c00108a0 <Serial::~Serial()>:
c00108a0:	83 ec 0c             	sub    esp,0xc
c00108a3:	ba 74 53 02 c0       	mov    edx,0xc0025374
c00108a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ac:	89 10                	mov    DWORD PTR [eax],edx
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	83 ec 0c             	sub    esp,0xc
c00108b5:	50                   	push   eax
c00108b6:	e8 0d d7 ff ff       	call   c000dfc8 <Device::~Device()>
c00108bb:	83 c4 10             	add    esp,0x10
c00108be:	90                   	nop
c00108bf:	83 c4 0c             	add    esp,0xc
c00108c2:	c3                   	ret    
c00108c3:	90                   	nop

c00108c4 <Serial::~Serial()>:
c00108c4:	83 ec 0c             	sub    esp,0xc
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108ce:	e8 cd ff ff ff       	call   c00108a0 <Serial::~Serial()>
c00108d3:	83 c4 10             	add    esp,0x10
c00108d6:	83 ec 08             	sub    esp,0x8
c00108d9:	68 58 01 00 00       	push   0x158
c00108de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e2:	e8 eb c2 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00108e7:	83 c4 10             	add    esp,0x10
c00108ea:	83 c4 0c             	add    esp,0xc
c00108ed:	c3                   	ret    
c00108ee:	66 90                	xchg   ax,ax

c00108f0 <Timer::Timer(char const*)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 fa d9 ff ff       	call   c000e2fe <Device::Device(char const*)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	ba b8 53 02 c0       	mov    edx,0xc00253b8
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	89 10                	mov    DWORD PTR [eax],edx
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010920:	90                   	nop
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	90                   	nop
c0010926:	66 90                	xchg   ax,ax

c0010928 <Timer::~Timer()>:
c0010928:	83 ec 0c             	sub    esp,0xc
c001092b:	ba b8 53 02 c0       	mov    edx,0xc00253b8
c0010930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010934:	89 10                	mov    DWORD PTR [eax],edx
c0010936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093a:	83 ec 0c             	sub    esp,0xc
c001093d:	50                   	push   eax
c001093e:	e8 85 d6 ff ff       	call   c000dfc8 <Device::~Device()>
c0010943:	83 c4 10             	add    esp,0x10
c0010946:	90                   	nop
c0010947:	83 c4 0c             	add    esp,0xc
c001094a:	c3                   	ret    
c001094b:	90                   	nop

c001094c <Timer::~Timer()>:
c001094c:	83 ec 0c             	sub    esp,0xc
c001094f:	83 ec 0c             	sub    esp,0xc
c0010952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010956:	e8 cd ff ff ff       	call   c0010928 <Timer::~Timer()>
c001095b:	83 c4 10             	add    esp,0x10
c001095e:	83 ec 08             	sub    esp,0x8
c0010961:	68 5c 01 00 00       	push   0x15c
c0010966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001096a:	e8 63 c2 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001096f:	83 c4 10             	add    esp,0x10
c0010972:	83 c4 0c             	add    esp,0xc
c0010975:	c3                   	ret    

c0010976 <Timer::read()>:
c0010976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001097a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010980:	c3                   	ret    

c0010981 <timerHandler(unsigned int)>:
c0010981:	56                   	push   esi
c0010982:	53                   	push   ebx
c0010983:	51                   	push   ecx
c0010984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010988:	01 05 ac 87 02 c0    	add    DWORD PTR ds:0xc00287ac,eax
c001098e:	80 3d 8d 81 02 c0 00 	cmp    BYTE PTR ds:0xc002818d,0x0
c0010995:	0f 84 49 01 00 00    	je     c0010ae4 <timerHandler(unsigned int)+0x163>
c001099b:	fa                   	cli    
c001099c:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00109a2:	83 ec 0c             	sub    esp,0xc
c00109a5:	ff 05 44 96 02 c0    	inc    DWORD PTR ds:0xc0029644
c00109ab:	68 58 96 02 c0       	push   0xc0029658
c00109b0:	e8 ff 25 01 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	84 c0                	test   al,al
c00109ba:	0f 85 a0 00 00 00    	jne    c0010a60 <timerHandler(unsigned int)+0xdf>
c00109c0:	83 ec 0c             	sub    esp,0xc
c00109c3:	68 58 96 02 c0       	push   0xc0029658
c00109c8:	e8 03 26 01 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00109cd:	83 c4 10             	add    esp,0x10
c00109d0:	89 c6                	mov    esi,eax
c00109d2:	66 90                	xchg   ax,ax
c00109d4:	83 ec 0c             	sub    esp,0xc
c00109d7:	68 58 96 02 c0       	push   0xc0029658
c00109dc:	e8 ef 25 01 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00109e1:	c7 04 24 58 96 02 c0 	mov    DWORD PTR [esp],0xc0029658
c00109e8:	89 c3                	mov    ebx,eax
c00109ea:	e8 e9 25 01 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00109ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	3b 05 ac 87 02 c0    	cmp    eax,DWORD PTR ds:0xc00287ac
c00109fb:	77 23                	ja     c0010a20 <timerHandler(unsigned int)+0x9f>
c00109fd:	83 ec 0c             	sub    esp,0xc
c0010a00:	53                   	push   ebx
c0010a01:	e8 a6 7e 00 00       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0010a06:	83 c4 10             	add    esp,0x10
c0010a09:	39 de                	cmp    esi,ebx
c0010a0b:	75 27                	jne    c0010a34 <timerHandler(unsigned int)+0xb3>
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	68 58 96 02 c0       	push   0xc0029658
c0010a15:	e8 b6 25 01 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a1a:	89 c6                	mov    esi,eax
c0010a1c:	eb 12                	jmp    c0010a30 <timerHandler(unsigned int)+0xaf>
c0010a1e:	66 90                	xchg   ax,ax
c0010a20:	52                   	push   edx
c0010a21:	52                   	push   edx
c0010a22:	53                   	push   ebx
c0010a23:	68 58 96 02 c0       	push   0xc0029658
c0010a28:	e8 63 26 01 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a30:	83 c4 10             	add    esp,0x10
c0010a33:	90                   	nop
c0010a34:	83 ec 0c             	sub    esp,0xc
c0010a37:	68 58 96 02 c0       	push   0xc0029658
c0010a3c:	e8 73 25 01 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010a41:	83 c4 10             	add    esp,0x10
c0010a44:	84 c0                	test   al,al
c0010a46:	75 18                	jne    c0010a60 <timerHandler(unsigned int)+0xdf>
c0010a48:	83 ec 0c             	sub    esp,0xc
c0010a4b:	68 58 96 02 c0       	push   0xc0029658
c0010a50:	e8 7b 25 01 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010a55:	83 c4 10             	add    esp,0x10
c0010a58:	39 f0                	cmp    eax,esi
c0010a5a:	0f 85 74 ff ff ff    	jne    c00109d4 <timerHandler(unsigned int)+0x53>
c0010a60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a65:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010a69:	74 41                	je     c0010aac <timerHandler(unsigned int)+0x12b>
c0010a6b:	80 3d 8c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002818c,0x0
c0010a72:	74 38                	je     c0010aac <timerHandler(unsigned int)+0x12b>
c0010a74:	fa                   	cli    
c0010a75:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0010a7b:	a1 ac 87 02 c0       	mov    eax,ds:0xc00287ac
c0010a80:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a86:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010a89:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a8f:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010a92:	72 08                	jb     c0010a9c <timerHandler(unsigned int)+0x11b>
c0010a94:	e8 57 79 00 00       	call   c00183f0 <schedule()>
c0010a99:	8d 76 00             	lea    esi,[esi+0x0]
c0010a9c:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0010aa1:	48                   	dec    eax
c0010aa2:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0010aa7:	75 03                	jne    c0010aac <timerHandler(unsigned int)+0x12b>
c0010aa9:	fb                   	sti    
c0010aaa:	66 90                	xchg   ax,ax
c0010aac:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0010ab1:	48                   	dec    eax
c0010ab2:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0010ab7:	75 1b                	jne    c0010ad4 <timerHandler(unsigned int)+0x153>
c0010ab9:	83 3d 40 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029640,0x0
c0010ac0:	74 12                	je     c0010ad4 <timerHandler(unsigned int)+0x153>
c0010ac2:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c0010acc:	e8 1f 79 00 00       	call   c00183f0 <schedule()>
c0010ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ad4:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0010ad9:	48                   	dec    eax
c0010ada:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0010adf:	75 03                	jne    c0010ae4 <timerHandler(unsigned int)+0x163>
c0010ae1:	fb                   	sti    
c0010ae2:	66 90                	xchg   ax,ax
c0010ae4:	58                   	pop    eax
c0010ae5:	5b                   	pop    ebx
c0010ae6:	5e                   	pop    esi
c0010ae7:	c3                   	ret    

c0010ae8 <setupTimer(int)>:
c0010ae8:	57                   	push   edi
c0010ae9:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0010aee:	56                   	push   esi
c0010aef:	53                   	push   ebx
c0010af0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010af4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010afa:	83 ec 0c             	sub    esp,0xc
c0010afd:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b03:	e8 f2 d8 ff ff       	call   c000e3fa <Device::getName()>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010b0e:	0f 85 94 00 00 00    	jne    c0010ba8 <setupTimer(int)+0xc0>
c0010b14:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0010b19:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010b20:	0f 84 82 00 00 00    	je     c0010ba8 <setupTimer(int)+0xc0>
c0010b26:	83 ec 0c             	sub    esp,0xc
c0010b29:	68 5c 01 00 00       	push   0x15c
c0010b2e:	e8 90 8e ff ff       	call   c00099c3 <malloc>
c0010b33:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b36:	89 c3                	mov    ebx,eax
c0010b38:	e8 83 1a 01 00       	call   c00225c0 <PIT::PIT()>
c0010b3d:	59                   	pop    ecx
c0010b3e:	5f                   	pop    edi
c0010b3f:	53                   	push   ebx
c0010b40:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c0010b46:	e8 af d5 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c0010b4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b4d:	6a 00                	push   0x0
c0010b4f:	6a 00                	push   0x0
c0010b51:	56                   	push   esi
c0010b52:	53                   	push   ebx
c0010b53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b56:	83 c4 14             	add    esp,0x14
c0010b59:	68 60 01 00 00       	push   0x160
c0010b5e:	e8 60 8e ff ff       	call   c00099c3 <malloc>
c0010b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b66:	89 c7                	mov    edi,eax
c0010b68:	e8 07 19 01 00       	call   c0022474 <APICTimer::APICTimer()>
c0010b6d:	6a 00                	push   0x0
c0010b6f:	6a 00                	push   0x0
c0010b71:	56                   	push   esi
c0010b72:	57                   	push   edi
c0010b73:	e8 fc 17 01 00       	call   c0022374 <APICTimer::open(int, int, void*)>
c0010b78:	83 c4 20             	add    esp,0x20
c0010b7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b7d:	6a 00                	push   0x0
c0010b7f:	6a 00                	push   0x0
c0010b81:	6a 00                	push   0x0
c0010b83:	53                   	push   ebx
c0010b84:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010b87:	58                   	pop    eax
c0010b88:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0010b8d:	5a                   	pop    edx
c0010b8e:	57                   	push   edi
c0010b8f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010b95:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010b9b:	e8 5a d5 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c0010ba0:	83 c4 10             	add    esp,0x10
c0010ba3:	eb 37                	jmp    c0010bdc <setupTimer(int)+0xf4>
c0010ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	68 5c 01 00 00       	push   0x15c
c0010bb0:	e8 0e 8e ff ff       	call   c00099c3 <malloc>
c0010bb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb8:	89 c3                	mov    ebx,eax
c0010bba:	e8 01 1a 01 00       	call   c00225c0 <PIT::PIT()>
c0010bbf:	58                   	pop    eax
c0010bc0:	5a                   	pop    edx
c0010bc1:	53                   	push   ebx
c0010bc2:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c0010bc8:	e8 2d d5 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c0010bcd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010bcf:	6a 00                	push   0x0
c0010bd1:	6a 00                	push   0x0
c0010bd3:	56                   	push   esi
c0010bd4:	53                   	push   ebx
c0010bd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010bd8:	83 c4 20             	add    esp,0x20
c0010bdb:	90                   	nop
c0010bdc:	89 d8                	mov    eax,ebx
c0010bde:	5b                   	pop    ebx
c0010bdf:	5e                   	pop    esi
c0010be0:	5f                   	pop    edi
c0010be1:	c3                   	ret    
c0010be2:	66 90                	xchg   ax,ax

c0010be4 <VCache::VCache(PhysicalDisk*)>:
c0010be4:	53                   	push   ebx
c0010be5:	83 ec 18             	sub    esp,0x18
c0010be8:	ba e8 53 02 c0       	mov    edx,0xc00253e8
c0010bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf1:	89 10                	mov    DWORD PTR [eax],edx
c0010bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010bf7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c02:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c0d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010c14:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c1f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010c26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010c2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c44:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010c4b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010c52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c56:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c5e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010c6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c6e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010c75:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010c7d:	83 ec 0c             	sub    esp,0xc
c0010c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c84:	e8 3a 8d ff ff       	call   c00099c3 <malloc>
c0010c89:	83 c4 10             	add    esp,0x10
c0010c8c:	89 c3                	mov    ebx,eax
c0010c8e:	83 ec 0c             	sub    esp,0xc
c0010c91:	53                   	push   ebx
c0010c92:	e8 29 75 00 00       	call   c00181c0 <Mutex::Mutex()>
c0010c97:	83 c4 10             	add    esp,0x10
c0010c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010c9e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ca5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ca9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cb0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010cb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cbb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010cc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010cc5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cc8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ccc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010cd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cd8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010cdc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010cdf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010ce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ce6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010cea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010cee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010cf4:	05 00 01 00 00       	add    eax,0x100
c0010cf9:	c1 e0 04             	shl    eax,0x4
c0010cfc:	83 ec 0c             	sub    esp,0xc
c0010cff:	50                   	push   eax
c0010d00:	e8 be 8c ff ff       	call   c00099c3 <malloc>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	89 c2                	mov    edx,eax
c0010d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d15:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010d24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010d28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d2e:	c1 e0 06             	shl    eax,0x6
c0010d31:	83 ec 0c             	sub    esp,0xc
c0010d34:	50                   	push   eax
c0010d35:	e8 89 8c ff ff       	call   c00099c3 <malloc>
c0010d3a:	83 c4 10             	add    esp,0x10
c0010d3d:	89 c2                	mov    edx,eax
c0010d3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d43:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010d46:	90                   	nop
c0010d47:	83 c4 18             	add    esp,0x18
c0010d4a:	5b                   	pop    ebx
c0010d4b:	c3                   	ret    

c0010d4c <VCache::invalidateReadBuffer()>:
c0010d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d50:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010d56:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010d5a:	c3                   	ret    
c0010d5b:	90                   	nop

c0010d5c <VCache::writeWriteBuffer()>:
c0010d5c:	53                   	push   ebx
c0010d5d:	83 ec 14             	sub    esp,0x14
c0010d60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010d64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d69:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010d6c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010d6f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010d72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010d75:	50                   	push   eax
c0010d76:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d79:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010d80:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010d87:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010d8b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010d92:	83 c4 28             	add    esp,0x28
c0010d95:	5b                   	pop    ebx
c0010d96:	c3                   	ret    
c0010d97:	90                   	nop

c0010d98 <VCache::~VCache()>:
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	ba e8 53 02 c0       	mov    edx,0xc00253e8
c0010da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010da4:	89 10                	mov    DWORD PTR [eax],edx
c0010da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010daa:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010dad:	84 c0                	test   al,al
c0010daf:	74 0f                	je     c0010dc0 <VCache::~VCache()+0x28>
c0010db1:	83 ec 0c             	sub    esp,0xc
c0010db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db8:	e8 9f ff ff ff       	call   c0010d5c <VCache::writeWriteBuffer()>
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dc4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010dc7:	83 ec 0c             	sub    esp,0xc
c0010dca:	50                   	push   eax
c0010dcb:	e8 03 8c ff ff       	call   c00099d3 <free>
c0010dd0:	83 c4 10             	add    esp,0x10
c0010dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010dda:	83 ec 0c             	sub    esp,0xc
c0010ddd:	50                   	push   eax
c0010dde:	e8 f0 8b ff ff       	call   c00099d3 <free>
c0010de3:	83 c4 10             	add    esp,0x10
c0010de6:	90                   	nop
c0010de7:	83 c4 0c             	add    esp,0xc
c0010dea:	c3                   	ret    
c0010deb:	90                   	nop

c0010dec <VCache::~VCache()>:
c0010dec:	83 ec 0c             	sub    esp,0xc
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df6:	e8 9d ff ff ff       	call   c0010d98 <VCache::~VCache()>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	83 ec 08             	sub    esp,0x8
c0010e01:	6a 44                	push   0x44
c0010e03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e07:	e8 c6 bd ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0010e0c:	83 c4 10             	add    esp,0x10
c0010e0f:	83 c4 0c             	add    esp,0xc
c0010e12:	c3                   	ret    
c0010e13:	90                   	nop

c0010e14 <VCache::write(unsigned long long, int, void*)>:
c0010e14:	55                   	push   ebp
c0010e15:	31 c0                	xor    eax,eax
c0010e17:	57                   	push   edi
c0010e18:	56                   	push   esi
c0010e19:	53                   	push   ebx
c0010e1a:	83 ec 0c             	sub    esp,0xc
c0010e1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010e21:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010e25:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e29:	8d 76 00             	lea    esi,[esi+0x0]
c0010e2c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010e30:	7d 1a                	jge    c0010e4c <VCache::write(unsigned long long, int, void*)+0x38>
c0010e32:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010e35:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010e3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010e3f:	0f af c8             	imul   ecx,eax
c0010e42:	01 ca                	add    edx,ecx
c0010e44:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010e46:	40                   	inc    eax
c0010e47:	eb e3                	jmp    c0010e2c <VCache::write(unsigned long long, int, void*)+0x18>
c0010e49:	8d 76 00             	lea    esi,[esi+0x0]
c0010e4c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e50:	74 0a                	je     c0010e5c <VCache::write(unsigned long long, int, void*)+0x48>
c0010e52:	53                   	push   ebx
c0010e53:	e8 f4 fe ff ff       	call   c0010d4c <VCache::invalidateReadBuffer()>
c0010e58:	58                   	pop    eax
c0010e59:	8d 76 00             	lea    esi,[esi+0x0]
c0010e5c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010e60:	74 5e                	je     c0010ec0 <VCache::write(unsigned long long, int, void*)+0xac>
c0010e62:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010e65:	89 e8                	mov    eax,ebp
c0010e67:	99                   	cdq    
c0010e68:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010e6b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010e6e:	89 c1                	mov    ecx,eax
c0010e70:	89 d0                	mov    eax,edx
c0010e72:	31 f1                	xor    ecx,esi
c0010e74:	31 f8                	xor    eax,edi
c0010e76:	09 c1                	or     ecx,eax
c0010e78:	75 3a                	jne    c0010eb4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010e7a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010e7f:	75 33                	jne    c0010eb4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010e81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e84:	89 ef                	mov    edi,ebp
c0010e86:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e90:	0f af f9             	imul   edi,ecx
c0010e93:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e98:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e9b:	40                   	inc    eax
c0010e9c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010e9f:	83 f8 40             	cmp    eax,0x40
c0010ea2:	75 60                	jne    c0010f04 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010ea4:	83 ec 0c             	sub    esp,0xc
c0010ea7:	53                   	push   ebx
c0010ea8:	e8 af fe ff ff       	call   c0010d5c <VCache::writeWriteBuffer()>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	eb 52                	jmp    c0010f04 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010eb2:	66 90                	xchg   ax,ax
c0010eb4:	83 ec 0c             	sub    esp,0xc
c0010eb7:	53                   	push   ebx
c0010eb8:	e8 9f fe ff ff       	call   c0010d5c <VCache::writeWriteBuffer()>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ec3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010ec8:	7f 22                	jg     c0010eec <VCache::write(unsigned long long, int, void*)+0xd8>
c0010eca:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0010ecd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0010ed0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010ed4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010ed8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0010edb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010ede:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010ee4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ee8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eea:	eb 18                	jmp    c0010f04 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010eec:	83 ec 0c             	sub    esp,0xc
c0010eef:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ef1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ef5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ef9:	57                   	push   edi
c0010efa:	56                   	push   esi
c0010efb:	50                   	push   eax
c0010efc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010eff:	83 c4 20             	add    esp,0x20
c0010f02:	66 90                	xchg   ax,ax
c0010f04:	83 c4 0c             	add    esp,0xc
c0010f07:	31 c0                	xor    eax,eax
c0010f09:	5b                   	pop    ebx
c0010f0a:	5e                   	pop    esi
c0010f0b:	5f                   	pop    edi
c0010f0c:	5d                   	pop    ebp
c0010f0d:	c3                   	ret    

c0010f0e <VCache::read(unsigned long long, int, void*)>:
c0010f0e:	55                   	push   ebp
c0010f0f:	31 c0                	xor    eax,eax
c0010f11:	57                   	push   edi
c0010f12:	56                   	push   esi
c0010f13:	53                   	push   ebx
c0010f14:	83 ec 1c             	sub    esp,0x1c
c0010f17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010f1b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010f1f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f23:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010f27:	90                   	nop
c0010f28:	39 e8                	cmp    eax,ebp
c0010f2a:	7d 18                	jge    c0010f44 <VCache::read(unsigned long long, int, void*)+0x36>
c0010f2c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010f2f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010f35:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010f39:	0f af c8             	imul   ecx,eax
c0010f3c:	01 ca                	add    edx,ecx
c0010f3e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010f40:	40                   	inc    eax
c0010f41:	eb e5                	jmp    c0010f28 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010f43:	90                   	nop
c0010f44:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010f48:	74 0e                	je     c0010f58 <VCache::read(unsigned long long, int, void*)+0x4a>
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	53                   	push   ebx
c0010f4e:	e8 09 fe ff ff       	call   c0010d5c <VCache::writeWriteBuffer()>
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	66 90                	xchg   ax,ax
c0010f58:	83 fd 01             	cmp    ebp,0x1
c0010f5b:	0f 85 87 00 00 00    	jne    c0010fe8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010f61:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010f64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f68:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010f6f:	75 77                	jne    c0010fe8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010f71:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010f74:	89 e9                	mov    ecx,ebp
c0010f76:	f7 d9                	neg    ecx
c0010f78:	89 c8                	mov    eax,ecx
c0010f7a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f7e:	c1 f8 1f             	sar    eax,0x1f
c0010f81:	21 f1                	and    ecx,esi
c0010f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f87:	89 c8                	mov    eax,ecx
c0010f89:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f8d:	21 f9                	and    ecx,edi
c0010f8f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010f93:	89 ca                	mov    edx,ecx
c0010f95:	74 0d                	je     c0010fa4 <VCache::read(unsigned long long, int, void*)+0x96>
c0010f97:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010f9a:	75 08                	jne    c0010fa4 <VCache::read(unsigned long long, int, void*)+0x96>
c0010f9c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0010f9f:	74 27                	je     c0010fc8 <VCache::read(unsigned long long, int, void*)+0xba>
c0010fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa4:	83 ec 0c             	sub    esp,0xc
c0010fa7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010fab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010faf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0010fb2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0010fb5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0010fb7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fba:	55                   	push   ebp
c0010fbb:	52                   	push   edx
c0010fbc:	50                   	push   eax
c0010fbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010fc1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010fc4:	83 c4 20             	add    esp,0x20
c0010fc7:	90                   	nop
c0010fc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010fcb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010fcf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010fd5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010fd8:	48                   	dec    eax
c0010fd9:	21 c6                	and    esi,eax
c0010fdb:	0f af f1             	imul   esi,ecx
c0010fde:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010fe1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010fe3:	eb 23                	jmp    c0011008 <VCache::read(unsigned long long, int, void*)+0xfa>
c0010fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fe8:	83 ec 0c             	sub    esp,0xc
c0010feb:	53                   	push   ebx
c0010fec:	e8 5b fd ff ff       	call   c0010d4c <VCache::invalidateReadBuffer()>
c0010ff1:	5a                   	pop    edx
c0010ff2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ff5:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ffb:	55                   	push   ebp
c0010ffc:	57                   	push   edi
c0010ffd:	56                   	push   esi
c0010ffe:	50                   	push   eax
c0010fff:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011002:	83 c4 20             	add    esp,0x20
c0011005:	8d 76 00             	lea    esi,[esi+0x0]
c0011008:	83 c4 1c             	add    esp,0x1c
c001100b:	31 c0                	xor    eax,eax
c001100d:	5b                   	pop    ebx
c001100e:	5e                   	pop    esi
c001100f:	5f                   	pop    edi
c0011010:	5d                   	pop    ebp
c0011011:	c3                   	ret    

c0011012 <Video::putrect(int, int, int, int, unsigned int)>:
c0011012:	55                   	push   ebp
c0011013:	57                   	push   edi
c0011014:	56                   	push   esi
c0011015:	53                   	push   ebx
c0011016:	83 ec 1c             	sub    esp,0x1c
c0011019:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001101d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011021:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011025:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0011029:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001102d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011031:	01 df                	add    edi,ebx
c0011033:	39 fb                	cmp    ebx,edi
c0011035:	7d 1f                	jge    c0011056 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0011037:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001103b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001103f:	7d 12                	jge    c0011053 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011041:	8b 16                	mov    edx,DWORD PTR [esi]
c0011043:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011047:	53                   	push   ebx
c0011048:	55                   	push   ebp
c0011049:	45                   	inc    ebp
c001104a:	56                   	push   esi
c001104b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001104e:	83 c4 10             	add    esp,0x10
c0011051:	eb e8                	jmp    c001103b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011053:	43                   	inc    ebx
c0011054:	eb dd                	jmp    c0011033 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0011056:	83 c4 1c             	add    esp,0x1c
c0011059:	5b                   	pop    ebx
c001105a:	5e                   	pop    esi
c001105b:	5f                   	pop    edi
c001105c:	5d                   	pop    ebp
c001105d:	c3                   	ret    

c001105e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001105e:	55                   	push   ebp
c001105f:	57                   	push   edi
c0011060:	31 ff                	xor    edi,edi
c0011062:	56                   	push   esi
c0011063:	53                   	push   ebx
c0011064:	83 ec 1c             	sub    esp,0x1c
c0011067:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001106b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001106f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0011076:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001107b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001107f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011083:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011087:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001108a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001108e:	01 f9                	add    ecx,edi
c0011090:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0011094:	7d 2f                	jge    c00110c5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0011096:	31 f6                	xor    esi,esi
c0011098:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001109c:	01 f2                	add    edx,esi
c001109e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00110a2:	7d 1a                	jge    c00110be <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00110a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110a7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00110aa:	46                   	inc    esi
c00110ab:	51                   	push   ecx
c00110ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00110b0:	52                   	push   edx
c00110b1:	55                   	push   ebp
c00110b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00110b5:	83 c4 10             	add    esp,0x10
c00110b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00110bc:	eb da                	jmp    c0011098 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00110be:	47                   	inc    edi
c00110bf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00110c3:	eb c5                	jmp    c001108a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00110c5:	83 c4 1c             	add    esp,0x1c
c00110c8:	5b                   	pop    ebx
c00110c9:	5e                   	pop    esi
c00110ca:	5f                   	pop    edi
c00110cb:	5d                   	pop    ebp
c00110cc:	c3                   	ret    
c00110cd:	90                   	nop

c00110ce <Video::blit(unsigned int*, int, int, int, int)>:
c00110ce:	55                   	push   ebp
c00110cf:	57                   	push   edi
c00110d0:	56                   	push   esi
c00110d1:	53                   	push   ebx
c00110d2:	83 ec 1c             	sub    esp,0x1c
c00110d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00110d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110dd:	85 c0                	test   eax,eax
c00110df:	79 02                	jns    c00110e3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00110e1:	31 c0                	xor    eax,eax
c00110e3:	c1 e0 02             	shl    eax,0x2
c00110e6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00110ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00110f2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00110f6:	39 d8                	cmp    eax,ebx
c00110f8:	7e 49                	jle    c0011143 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00110fa:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011100:	7c 41                	jl     c0011143 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011102:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011106:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001110a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001110e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011112:	39 f9                	cmp    ecx,edi
c0011114:	7e 22                	jle    c0011138 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0011116:	83 c5 04             	add    ebp,0x4
c0011119:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001111f:	7c 14                	jl     c0011135 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011121:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011123:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0011126:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001112a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001112e:	56                   	push   esi
c001112f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011132:	83 c4 10             	add    esp,0x10
c0011135:	47                   	inc    edi
c0011136:	eb d2                	jmp    c001110a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0011138:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113c:	43                   	inc    ebx
c001113d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011141:	eb ab                	jmp    c00110ee <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011143:	83 c4 1c             	add    esp,0x1c
c0011146:	5b                   	pop    ebx
c0011147:	5e                   	pop    esi
c0011148:	5f                   	pop    edi
c0011149:	5d                   	pop    ebp
c001114a:	c3                   	ret    
c001114b:	90                   	nop

c001114c <Video::clearScreen(unsigned int)>:
c001114c:	57                   	push   edi
c001114d:	56                   	push   esi
c001114e:	53                   	push   ebx
c001114f:	31 db                	xor    ebx,ebx
c0011151:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011155:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001115b:	7e 1f                	jle    c001117c <Video::clearScreen(unsigned int)+0x30>
c001115d:	31 ff                	xor    edi,edi
c001115f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011165:	7e 12                	jle    c0011179 <Video::clearScreen(unsigned int)+0x2d>
c0011167:	8b 06                	mov    eax,DWORD PTR [esi]
c0011169:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001116d:	53                   	push   ebx
c001116e:	57                   	push   edi
c001116f:	47                   	inc    edi
c0011170:	56                   	push   esi
c0011171:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	eb e6                	jmp    c001115f <Video::clearScreen(unsigned int)+0x13>
c0011179:	43                   	inc    ebx
c001117a:	eb d9                	jmp    c0011155 <Video::clearScreen(unsigned int)+0x9>
c001117c:	5b                   	pop    ebx
c001117d:	5e                   	pop    esi
c001117e:	5f                   	pop    edi
c001117f:	c3                   	ret    

c0011180 <Video::putpixel(int, int, unsigned int)>:
c0011180:	c7 44 24 04 f0 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc00253f0
c0011188:	e9 92 36 00 00       	jmp    c001481f <Krnl::panic(char const*)>
c001118d:	90                   	nop

c001118e <Video::Video(char const*)>:
c001118e:	83 ec 0c             	sub    esp,0xc
c0011191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011195:	83 ec 08             	sub    esp,0x8
c0011198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119c:	50                   	push   eax
c001119d:	e8 5c d1 ff ff       	call   c000e2fe <Device::Device(char const*)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	ba 60 54 02 c0       	mov    edx,0xc0025460
c00111aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ae:	89 10                	mov    DWORD PTR [eax],edx
c00111b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00111be:	90                   	nop
c00111bf:	83 c4 0c             	add    esp,0xc
c00111c2:	c3                   	ret    
c00111c3:	90                   	nop

c00111c4 <Video::~Video()>:
c00111c4:	83 ec 0c             	sub    esp,0xc
c00111c7:	ba 60 54 02 c0       	mov    edx,0xc0025460
c00111cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d0:	89 10                	mov    DWORD PTR [eax],edx
c00111d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d6:	83 ec 0c             	sub    esp,0xc
c00111d9:	50                   	push   eax
c00111da:	e8 e9 cd ff ff       	call   c000dfc8 <Device::~Device()>
c00111df:	83 c4 10             	add    esp,0x10
c00111e2:	90                   	nop
c00111e3:	83 c4 0c             	add    esp,0xc
c00111e6:	c3                   	ret    
c00111e7:	90                   	nop

c00111e8 <Video::~Video()>:
c00111e8:	83 ec 0c             	sub    esp,0xc
c00111eb:	83 ec 0c             	sub    esp,0xc
c00111ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f2:	e8 cd ff ff ff       	call   c00111c4 <Video::~Video()>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	83 ec 08             	sub    esp,0x8
c00111fd:	68 64 01 00 00       	push   0x164
c0011202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011206:	e8 c7 b9 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	83 c4 0c             	add    esp,0xc
c0011211:	c3                   	ret    

c0011212 <Video::isMonochrome()>:
c0011212:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011216:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001121c:	c3                   	ret    
c001121d:	90                   	nop

c001121e <Video::getWidth()>:
c001121e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011222:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0011228:	c3                   	ret    
c0011229:	90                   	nop

c001122a <Video::getHeight()>:
c001122a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001122e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011234:	c3                   	ret    
c0011235:	90                   	nop

c0011236 <Video::drawCursor(int, int, unsigned char*, int)>:
c0011236:	55                   	push   ebp
c0011237:	57                   	push   edi
c0011238:	56                   	push   esi
c0011239:	53                   	push   ebx
c001123a:	83 ec 2c             	sub    esp,0x2c
c001123d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011241:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011245:	83 f8 01             	cmp    eax,0x1
c0011248:	19 c9                	sbb    ecx,ecx
c001124a:	31 db                	xor    ebx,ebx
c001124c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011250:	89 cd                	mov    ebp,ecx
c0011252:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001125a:	f7 d5                	not    ebp
c001125c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011262:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011266:	01 d8                	add    eax,ebx
c0011268:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001126c:	56                   	push   esi
c001126d:	e8 b8 ff ff ff       	call   c001122a <Video::getHeight()>
c0011272:	59                   	pop    ecx
c0011273:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011277:	7e 70                	jle    c00112e9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011279:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001127d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011281:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011284:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011288:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001128c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011293:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011297:	89 f8                	mov    eax,edi
c0011299:	83 c0 20             	add    eax,0x20
c001129c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112a0:	56                   	push   esi
c00112a1:	e8 78 ff ff ff       	call   c001121e <Video::getWidth()>
c00112a6:	5a                   	pop    edx
c00112a7:	39 c7                	cmp    edi,eax
c00112a9:	7d 34                	jge    c00112df <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00112ab:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00112b0:	74 05                	je     c00112b7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00112b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00112b4:	55                   	push   ebp
c00112b5:	eb 0d                	jmp    c00112c4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00112b7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00112bc:	74 12                	je     c00112d0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00112be:	8b 06                	mov    eax,DWORD PTR [esi]
c00112c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00112c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112c8:	57                   	push   edi
c00112c9:	56                   	push   esi
c00112ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00112d4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00112d8:	47                   	inc    edi
c00112d9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00112dd:	75 c1                	jne    c00112a0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00112df:	43                   	inc    ebx
c00112e0:	83 fb 20             	cmp    ebx,0x20
c00112e3:	0f 85 79 ff ff ff    	jne    c0011262 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00112e9:	83 c4 2c             	add    esp,0x2c
c00112ec:	5b                   	pop    ebx
c00112ed:	5e                   	pop    esi
c00112ee:	5f                   	pop    edi
c00112ef:	5d                   	pop    ebp
c00112f0:	c3                   	ret    
c00112f1:	90                   	nop

c00112f2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00112f2:	55                   	push   ebp
c00112f3:	57                   	push   edi
c00112f4:	56                   	push   esi
c00112f5:	53                   	push   ebx
c00112f6:	83 ec 28             	sub    esp,0x28
c00112f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00112fd:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011301:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011305:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011309:	c1 e6 08             	shl    esi,0x8
c001130c:	01 c6                	add    esi,eax
c001130e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011312:	c1 e0 08             	shl    eax,0x8
c0011315:	01 d0                	add    eax,edx
c0011317:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001131b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001131f:	0f af c6             	imul   eax,esi
c0011322:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0011329:	50                   	push   eax
c001132a:	e8 94 86 ff ff       	call   c00099c3 <malloc>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	89 c7                	mov    edi,eax
c0011334:	85 c0                	test   eax,eax
c0011336:	75 10                	jne    c0011348 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0011338:	83 ec 0c             	sub    esp,0xc
c001133b:	68 11 54 02 c0       	push   0xc0025411
c0011340:	e8 da 34 00 00       	call   c001481f <Krnl::panic(char const*)>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001134b:	ba 12 00 00 00       	mov    edx,0x12
c0011350:	84 c0                	test   al,al
c0011352:	74 11                	je     c0011365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011354:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0011358:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001135c:	c1 fa 03             	sar    edx,0x3
c001135f:	0f af d1             	imul   edx,ecx
c0011362:	83 c2 12             	add    edx,0x12
c0011365:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0011369:	74 04                	je     c001136f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001136b:	85 f6                	test   esi,esi
c001136d:	75 12                	jne    c0011381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	68 21 54 02 c0       	push   0xc0025421
c0011377:	e8 37 b9 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001137c:	e9 b8 00 00 00       	jmp    c0011439 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011381:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011385:	80 f9 02             	cmp    cl,0x2
c0011388:	0f 85 96 00 00 00    	jne    c0011424 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001138e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011393:	75 0e                	jne    c00113a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011395:	84 c0                	test   al,al
c0011397:	75 0a                	jne    c00113a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011399:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001139c:	83 e8 18             	sub    eax,0x18
c001139f:	a8 f7                	test   al,0xf7
c00113a1:	74 0a                	je     c00113ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00113a3:	83 ec 0c             	sub    esp,0xc
c00113a6:	68 36 54 02 c0       	push   0xc0025436
c00113ab:	eb 7f                	jmp    c001142c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00113ad:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00113bd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00113c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00113c9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00113cd:	75 0c                	jne    c00113db <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00113cf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00113d4:	c1 e0 18             	shl    eax,0x18
c00113d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113db:	45                   	inc    ebp
c00113dc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00113e1:	c1 e1 10             	shl    ecx,0x10
c00113e4:	89 c8                	mov    eax,ecx
c00113e6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00113eb:	c1 e1 08             	shl    ecx,0x8
c00113ee:	09 c1                	or     ecx,eax
c00113f0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00113f4:	09 c1                	or     ecx,eax
c00113f6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00113fa:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00113fe:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011402:	c1 f8 03             	sar    eax,0x3
c0011405:	01 c2                	add    edx,eax
c0011407:	89 e8                	mov    eax,ebp
c0011409:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001140d:	39 c6                	cmp    esi,eax
c001140f:	7f b0                	jg     c00113c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011411:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011415:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011419:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001141c:	7e 22                	jle    c0011440 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001141e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011422:	eb 99                	jmp    c00113bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011424:	50                   	push   eax
c0011425:	50                   	push   eax
c0011426:	51                   	push   ecx
c0011427:	68 44 54 02 c0       	push   0xc0025444
c001142c:	e8 82 b8 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0011431:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011434:	e8 9a 85 ff ff       	call   c00099d3 <free>
c0011439:	83 c4 10             	add    esp,0x10
c001143c:	31 ff                	xor    edi,edi
c001143e:	eb 0f                	jmp    c001144f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011440:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011444:	89 30                	mov    DWORD PTR [eax],esi
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001144d:	89 30                	mov    DWORD PTR [eax],esi
c001144f:	83 c4 1c             	add    esp,0x1c
c0011452:	89 f8                	mov    eax,edi
c0011454:	5b                   	pop    ebx
c0011455:	5e                   	pop    esi
c0011456:	5f                   	pop    edi
c0011457:	5d                   	pop    ebp
c0011458:	c3                   	ret    
c0011459:	90                   	nop

c001145a <Video::putTGA(int, int, unsigned char*, int)>:
c001145a:	55                   	push   ebp
c001145b:	57                   	push   edi
c001145c:	56                   	push   esi
c001145d:	53                   	push   ebx
c001145e:	83 ec 28             	sub    esp,0x28
c0011461:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011465:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011469:	50                   	push   eax
c001146a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001146e:	50                   	push   eax
c001146f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011473:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011477:	56                   	push   esi
c0011478:	e8 75 fe ff ff       	call   c00112f2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001147d:	83 c4 20             	add    esp,0x20
c0011480:	85 c0                	test   eax,eax
c0011482:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011486:	74 35                	je     c00114bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011488:	89 c7                	mov    edi,eax
c001148a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001148e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011492:	39 d8                	cmp    eax,ebx
c0011494:	7e 27                	jle    c00114bd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011496:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001149a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001149e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00114a2:	39 e8                	cmp    eax,ebp
c00114a4:	7e 14                	jle    c00114ba <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00114a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00114a8:	83 c7 04             	add    edi,0x4
c00114ab:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00114ae:	53                   	push   ebx
c00114af:	55                   	push   ebp
c00114b0:	45                   	inc    ebp
c00114b1:	56                   	push   esi
c00114b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114b5:	83 c4 10             	add    esp,0x10
c00114b8:	eb e0                	jmp    c001149a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00114ba:	43                   	inc    ebx
c00114bb:	eb cd                	jmp    c001148a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00114bd:	83 c4 1c             	add    esp,0x1c
c00114c0:	5b                   	pop    ebx
c00114c1:	5e                   	pop    esi
c00114c2:	5f                   	pop    edi
c00114c3:	5d                   	pop    ebp
c00114c4:	c3                   	ret    
c00114c5:	66 90                	xchg   ax,ax
c00114c7:	90                   	nop

c00114c8 <ACPI::close(int, int, void*)>:
c00114c8:	83 ec 1c             	sub    esp,0x1c
c00114cb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00114d3:	74 0b                	je     c00114e0 <ACPI::close(int, int, void*)+0x18>
c00114d5:	b8 00 00 00 00       	mov    eax,0x0
c00114da:	e9 99 00 00 00       	jmp    c0011578 <ACPI::close(int, int, void*)+0xb0>
c00114df:	90                   	nop
c00114e0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00114e5:	75 29                	jne    c0011510 <ACPI::close(int, int, void*)+0x48>
c00114e7:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c00114ec:	85 c0                	test   eax,eax
c00114ee:	74 08                	je     c00114f8 <ACPI::close(int, int, void*)+0x30>
c00114f0:	a1 c8 87 02 c0       	mov    eax,ds:0xc00287c8
c00114f5:	ff d0                	call   eax
c00114f7:	90                   	nop
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	68 a0 54 02 c0       	push   0xc00254a0
c0011500:	e8 1a 33 00 00       	call   c001481f <Krnl::panic(char const*)>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001150d:	eb 69                	jmp    c0011578 <ACPI::close(int, int, void*)+0xb0>
c001150f:	90                   	nop
c0011510:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011515:	75 59                	jne    c0011570 <ACPI::close(int, int, void*)+0xa8>
c0011517:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c001151c:	85 c0                	test   eax,eax
c001151e:	74 08                	je     c0011528 <ACPI::close(int, int, void*)+0x60>
c0011520:	a1 c4 87 02 c0       	mov    eax,ds:0xc00287c4
c0011525:	ff d0                	call   eax
c0011527:	90                   	nop
c0011528:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001152d:	8d 76 00             	lea    esi,[esi+0x0]
c0011530:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011535:	83 e0 02             	and    eax,0x2
c0011538:	74 1e                	je     c0011558 <ACPI::close(int, int, void*)+0x90>
c001153a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011545:	89 c2                	mov    edx,eax
c0011547:	ec                   	in     al,dx
c0011548:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001154c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011550:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011554:	eb da                	jmp    c0011530 <ACPI::close(int, int, void*)+0x68>
c0011556:	66 90                	xchg   ax,ax
c0011558:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001155f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011564:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011568:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001156c:	ee                   	out    dx,al
c001156d:	8d 76 00             	lea    esi,[esi+0x0]
c0011570:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011575:	8d 76 00             	lea    esi,[esi+0x0]
c0011578:	83 c4 1c             	add    esp,0x1c
c001157b:	c3                   	ret    

c001157c <findRSDP()>:
c001157c:	83 ec 1c             	sub    esp,0x1c
c001157f:	83 ec 0c             	sub    esp,0xc
c0011582:	68 c3 55 02 c0       	push   0xc00255c3
c0011587:	e8 91 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011594:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001159a:	83 e0 04             	and    eax,0x4
c001159d:	84 c0                	test   al,al
c001159f:	75 0b                	jne    c00115ac <findRSDP()+0x30>
c00115a1:	b8 00 00 00 00       	mov    eax,0x0
c00115a6:	e9 a1 00 00 00       	jmp    c001164c <findRSDP()+0xd0>
c00115ab:	90                   	nop
c00115ac:	a1 b8 81 02 c0       	mov    eax,ds:0xc00281b8
c00115b1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00115b6:	7f 1c                	jg     c00115d4 <findRSDP()+0x58>
c00115b8:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00115bd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00115c3:	83 e2 fb             	and    edx,0xfffffffb
c00115c6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00115cc:	b8 00 00 00 00       	mov    eax,0x0
c00115d1:	eb 79                	jmp    c001164c <findRSDP()+0xd0>
c00115d3:	90                   	nop
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	68 d3 55 02 c0       	push   0xc00255d3
c00115dc:	e8 3c 84 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00115e1:	83 c4 10             	add    esp,0x10
c00115e4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00115ec:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00115f4:	77 3e                	ja     c0011634 <findRSDP()+0xb8>
c00115f6:	83 ec 04             	sub    esp,0x4
c00115f9:	6a 08                	push   0x8
c00115fb:	68 ec 55 02 c0       	push   0xc00255ec
c0011600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011604:	e8 77 ef fe ff       	call   c0000580 <memcmp>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	85 c0                	test   eax,eax
c001160e:	0f 94 c0             	sete   al
c0011611:	84 c0                	test   al,al
c0011613:	74 17                	je     c001162c <findRSDP()+0xb0>
c0011615:	83 ec 0c             	sub    esp,0xc
c0011618:	68 f5 55 02 c0       	push   0xc00255f5
c001161d:	e8 fb 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011629:	eb 21                	jmp    c001164c <findRSDP()+0xd0>
c001162b:	90                   	nop
c001162c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011631:	eb b9                	jmp    c00115ec <findRSDP()+0x70>
c0011633:	90                   	nop
c0011634:	83 ec 0c             	sub    esp,0xc
c0011637:	68 03 56 02 c0       	push   0xc0025603
c001163c:	e8 dc 83 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011641:	83 c4 10             	add    esp,0x10
c0011644:	b8 00 00 00 00       	mov    eax,0x0
c0011649:	8d 76 00             	lea    esi,[esi+0x0]
c001164c:	83 c4 1c             	add    esp,0x1c
c001164f:	c3                   	ret    

c0011650 <loadACPITables(unsigned char*)>:
c0011650:	57                   	push   edi
c0011651:	56                   	push   esi
c0011652:	53                   	push   ebx
c0011653:	83 ec 60             	sub    esp,0x60
c0011656:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001165b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011661:	83 e0 04             	and    eax,0x4
c0011664:	84 c0                	test   al,al
c0011666:	0f 84 3c 02 00 00    	je     c00118a8 <loadACPITables(unsigned char*)+0x258>
c001166c:	a0 e0 89 02 c0       	mov    al,ds:0xc00289e0
c0011671:	84 c0                	test   al,al
c0011673:	74 77                	je     c00116ec <loadACPITables(unsigned char*)+0x9c>
c0011675:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011679:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001167d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011684:	83 e8 24             	sub    eax,0x24
c0011687:	c1 e8 03             	shr    eax,0x3
c001168a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001168e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011696:	66 90                	xchg   ax,ax
c0011698:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001169c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00116a0:	0f 8d b6 00 00 00    	jge    c001175c <loadACPITables(unsigned char*)+0x10c>
c00116a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116aa:	83 c0 24             	add    eax,0x24
c00116ad:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00116b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00116b5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00116b9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00116bd:	c1 e0 03             	shl    eax,0x3
c00116c0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00116c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00116c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00116cd:	89 c1                	mov    ecx,eax
c00116cf:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c00116d4:	8d 50 01             	lea    edx,[eax+0x1]
c00116d7:	89 15 cc 87 02 c0    	mov    DWORD PTR ds:0xc00287cc,edx
c00116dd:	89 ca                	mov    edx,ecx
c00116df:	89 14 c5 e4 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd781c],edx
c00116e6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00116ea:	eb ac                	jmp    c0011698 <loadACPITables(unsigned char*)+0x48>
c00116ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00116f0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00116f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00116f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116fb:	83 e8 24             	sub    eax,0x24
c00116fe:	c1 e8 02             	shr    eax,0x2
c0011701:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011705:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001170d:	8d 76 00             	lea    esi,[esi+0x0]
c0011710:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011714:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011718:	7d 42                	jge    c001175c <loadACPITables(unsigned char*)+0x10c>
c001171a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001171e:	83 c0 24             	add    eax,0x24
c0011721:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011725:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011729:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001172d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011731:	c1 e0 02             	shl    eax,0x2
c0011734:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011738:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001173c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001173e:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c0011743:	8d 50 01             	lea    edx,[eax+0x1]
c0011746:	89 15 cc 87 02 c0    	mov    DWORD PTR ds:0xc00287cc,edx
c001174c:	89 ca                	mov    edx,ecx
c001174e:	89 14 c5 e4 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd781c],edx
c0011755:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011759:	eb b5                	jmp    c0011710 <loadACPITables(unsigned char*)+0xc0>
c001175b:	90                   	nop
c001175c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011764:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c0011769:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001176d:	0f 8d 39 01 00 00    	jge    c00118ac <loadACPITables(unsigned char*)+0x25c>
c0011773:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011777:	8b 04 c5 e4 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd781c]
c001177e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011782:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011786:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001178a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178e:	25 ff 0f 00 00       	and    eax,0xfff
c0011793:	89 c6                	mov    esi,eax
c0011795:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c001179b:	83 ec 0c             	sub    esp,0xc
c001179e:	6a 01                	push   0x1
c00117a0:	e8 e8 a1 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00117ac:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00117b2:	83 ec 0c             	sub    esp,0xc
c00117b5:	6a 01                	push   0x1
c00117b7:	6a 01                	push   0x1
c00117b9:	50                   	push   eax
c00117ba:	52                   	push   edx
c00117bb:	53                   	push   ebx
c00117bc:	e8 69 ab ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00117c1:	83 c4 20             	add    esp,0x20
c00117c4:	09 f0                	or     eax,esi
c00117c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117ca:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00117ce:	c1 e0 03             	shl    eax,0x3
c00117d1:	05 e0 87 02 c0       	add    eax,0xc00287e0
c00117d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00117e2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00117ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00117fe:	89 c6                	mov    esi,eax
c0011800:	89 d7                	mov    edi,edx
c0011802:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011804:	89 c8                	mov    eax,ecx
c0011806:	89 fa                	mov    edx,edi
c0011808:	89 f3                	mov    ebx,esi
c001180a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001180e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011812:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011816:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001181a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001181d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011821:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011825:	05 00 10 00 00       	add    eax,0x1000
c001182a:	c1 e8 0c             	shr    eax,0xc
c001182d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011835:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001183d:	25 ff 0f 00 00       	and    eax,0xfff
c0011842:	89 c6                	mov    esi,eax
c0011844:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011851:	e8 37 a1 ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001185d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011863:	83 ec 0c             	sub    esp,0xc
c0011866:	6a 01                	push   0x1
c0011868:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001186c:	50                   	push   eax
c001186d:	52                   	push   edx
c001186e:	53                   	push   ebx
c001186f:	e8 b6 aa ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011874:	83 c4 20             	add    esp,0x20
c0011877:	09 f0                	or     eax,esi
c0011879:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001187d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011881:	83 ec 0c             	sub    esp,0xc
c0011884:	50                   	push   eax
c0011885:	e8 33 a4 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c001188a:	83 c4 10             	add    esp,0x10
c001188d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011891:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011895:	89 14 c5 e4 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd781c],edx
c001189c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00118a0:	e9 bf fe ff ff       	jmp    c0011764 <loadACPITables(unsigned char*)+0x114>
c00118a5:	8d 76 00             	lea    esi,[esi+0x0]
c00118a8:	90                   	nop
c00118a9:	8d 76 00             	lea    esi,[esi+0x0]
c00118ac:	83 c4 60             	add    esp,0x60
c00118af:	5b                   	pop    ebx
c00118b0:	5e                   	pop    esi
c00118b1:	5f                   	pop    edi
c00118b2:	c3                   	ret    
c00118b3:	90                   	nop

c00118b4 <findRSDT(unsigned char*)>:
c00118b4:	57                   	push   edi
c00118b5:	56                   	push   esi
c00118b6:	53                   	push   ebx
c00118b7:	83 ec 50             	sub    esp,0x50
c00118ba:	83 ec 0c             	sub    esp,0xc
c00118bd:	68 17 56 02 c0       	push   0xc0025617
c00118c2:	e8 56 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118c7:	83 c4 10             	add    esp,0x10
c00118ca:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00118cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00118d5:	83 e0 04             	and    eax,0x4
c00118d8:	84 c0                	test   al,al
c00118da:	75 0c                	jne    c00118e8 <findRSDT(unsigned char*)+0x34>
c00118dc:	b8 00 00 00 00       	mov    eax,0x0
c00118e1:	e9 86 01 00 00       	jmp    c0011a6c <findRSDT(unsigned char*)+0x1b8>
c00118e6:	66 90                	xchg   ax,ax
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	68 29 56 02 c0       	push   0xc0025629
c00118f0:	e8 28 81 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	89 e0                	mov    eax,esp
c00118fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00118fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011902:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011906:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001190e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011912:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011916:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001191a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001191e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011922:	89 c6                	mov    esi,eax
c0011924:	89 d7                	mov    edi,edx
c0011926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011928:	89 c8                	mov    eax,ecx
c001192a:	89 fa                	mov    edx,edi
c001192c:	89 f3                	mov    ebx,esi
c001192e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011932:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011936:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	68 3b 56 02 c0       	push   0xc002563b
c0011942:	e8 d6 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001194e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011952:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	68 4d 56 02 c0       	push   0xc002564d
c0011962:	e8 b6 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011967:	83 c4 10             	add    esp,0x10
c001196a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001196e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011972:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001197a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001197e:	83 ec 04             	sub    esp,0x4
c0011981:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011985:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011989:	68 c4 54 02 c0       	push   0xc00254c4
c001198e:	e8 20 b3 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001199a:	25 ff 0f 00 00       	and    eax,0xfff
c001199f:	89 c6                	mov    esi,eax
c00119a1:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c00119a7:	83 ec 0c             	sub    esp,0xc
c00119aa:	6a 02                	push   0x2
c00119ac:	e8 dc 9f ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00119b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	6a 01                	push   0x1
c00119c3:	6a 02                	push   0x2
c00119c5:	50                   	push   eax
c00119c6:	52                   	push   edx
c00119c7:	53                   	push   ebx
c00119c8:	e8 5d a9 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119cd:	83 c4 20             	add    esp,0x20
c00119d0:	09 f0                	or     eax,esi
c00119d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00119d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00119da:	25 ff 0f 00 00       	and    eax,0xfff
c00119df:	89 c6                	mov    esi,eax
c00119e1:	8b 1d b0 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b0
c00119e7:	83 ec 0c             	sub    esp,0xc
c00119ea:	6a 02                	push   0x2
c00119ec:	e8 9c 9f ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00119f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119fe:	83 ec 0c             	sub    esp,0xc
c0011a01:	6a 01                	push   0x1
c0011a03:	6a 02                	push   0x2
c0011a05:	50                   	push   eax
c0011a06:	52                   	push   edx
c0011a07:	53                   	push   ebx
c0011a08:	e8 1d a9 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a0d:	83 c4 20             	add    esp,0x20
c0011a10:	09 f0                	or     eax,esi
c0011a12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011a16:	83 ec 04             	sub    esp,0x4
c0011a19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011a21:	68 e4 54 02 c0       	push   0xc00254e4
c0011a26:	e8 88 b2 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011a33:	75 13                	jne    c0011a48 <findRSDT(unsigned char*)+0x194>
c0011a35:	c6 05 e0 89 02 c0 00 	mov    BYTE PTR ds:0xc00289e0,0x0
c0011a3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a40:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011a44:	eb 22                	jmp    c0011a68 <findRSDT(unsigned char*)+0x1b4>
c0011a46:	66 90                	xchg   ax,ax
c0011a48:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011a4d:	75 11                	jne    c0011a60 <findRSDT(unsigned char*)+0x1ac>
c0011a4f:	c6 05 e0 89 02 c0 01 	mov    BYTE PTR ds:0xc00289e0,0x1
c0011a56:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011a5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011a5e:	eb 08                	jmp    c0011a68 <findRSDT(unsigned char*)+0x1b4>
c0011a60:	b8 00 00 00 00       	mov    eax,0x0
c0011a65:	eb 05                	jmp    c0011a6c <findRSDT(unsigned char*)+0x1b8>
c0011a67:	90                   	nop
c0011a68:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011a6c:	83 c4 50             	add    esp,0x50
c0011a6f:	5b                   	pop    ebx
c0011a70:	5e                   	pop    esi
c0011a71:	5f                   	pop    edi
c0011a72:	c3                   	ret    
c0011a73:	90                   	nop

c0011a74 <findDataTable(unsigned char*, char*)>:
c0011a74:	83 ec 1c             	sub    esp,0x1c
c0011a77:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011a7c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a82:	83 e0 04             	and    eax,0x4
c0011a85:	84 c0                	test   al,al
c0011a87:	75 07                	jne    c0011a90 <findDataTable(unsigned char*, char*)+0x1c>
c0011a89:	b8 00 00 00 00       	mov    eax,0x0
c0011a8e:	eb 58                	jmp    c0011ae8 <findDataTable(unsigned char*, char*)+0x74>
c0011a90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011a98:	a1 cc 87 02 c0       	mov    eax,ds:0xc00287cc
c0011a9d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011aa1:	7d 3d                	jge    c0011ae0 <findDataTable(unsigned char*, char*)+0x6c>
c0011aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aa7:	c1 e0 03             	shl    eax,0x3
c0011aaa:	05 e0 87 02 c0       	add    eax,0xc00287e0
c0011aaf:	83 ec 04             	sub    esp,0x4
c0011ab2:	6a 04                	push   0x4
c0011ab4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ab8:	50                   	push   eax
c0011ab9:	e8 c2 ea fe ff       	call   c0000580 <memcmp>
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	85 c0                	test   eax,eax
c0011ac3:	0f 94 c0             	sete   al
c0011ac6:	84 c0                	test   al,al
c0011ac8:	74 0e                	je     c0011ad8 <findDataTable(unsigned char*, char*)+0x64>
c0011aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ace:	8b 04 c5 e4 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd781c]
c0011ad5:	eb 11                	jmp    c0011ae8 <findDataTable(unsigned char*, char*)+0x74>
c0011ad7:	90                   	nop
c0011ad8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011adc:	eb ba                	jmp    c0011a98 <findDataTable(unsigned char*, char*)+0x24>
c0011ade:	66 90                	xchg   ax,ax
c0011ae0:	b8 00 00 00 00       	mov    eax,0x0
c0011ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ae8:	83 c4 1c             	add    esp,0x1c
c0011aeb:	c3                   	ret    

c0011aec <scanMADT()>:
c0011aec:	53                   	push   ebx
c0011aed:	83 ec 38             	sub    esp,0x38
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	68 5f 56 02 c0       	push   0xc002565f
c0011af8:	e8 20 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011afd:	83 c4 10             	add    esp,0x10
c0011b00:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c0011b05:	25 00 04 00 00       	and    eax,0x400
c0011b0a:	74 14                	je     c0011b20 <scanMADT()+0x34>
c0011b0c:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011b11:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b17:	83 e2 fb             	and    edx,0xfffffffb
c0011b1a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b20:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011b25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b2b:	83 e0 04             	and    eax,0x4
c0011b2e:	84 c0                	test   al,al
c0011b30:	0f 84 82 04 00 00    	je     c0011fb8 <scanMADT()+0x4cc>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	68 6c 56 02 c0       	push   0xc002566c
c0011b3e:	e8 da 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	e8 31 fa ff ff       	call   c001157c <findRSDP()>
c0011b4b:	a3 ec 89 02 c0       	mov    ds:0xc00289ec,eax
c0011b50:	a1 ec 89 02 c0       	mov    eax,ds:0xc00289ec
c0011b55:	85 c0                	test   eax,eax
c0011b57:	75 1b                	jne    c0011b74 <scanMADT()+0x88>
c0011b59:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011b5e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011b64:	83 e2 fb             	and    edx,0xfffffffb
c0011b67:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011b6d:	e9 4e 04 00 00       	jmp    c0011fc0 <scanMADT()+0x4d4>
c0011b72:	66 90                	xchg   ax,ax
c0011b74:	83 ec 0c             	sub    esp,0xc
c0011b77:	68 7e 56 02 c0       	push   0xc002567e
c0011b7c:	e8 9c 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011b81:	83 c4 10             	add    esp,0x10
c0011b84:	a1 ec 89 02 c0       	mov    eax,ds:0xc00289ec
c0011b89:	83 ec 0c             	sub    esp,0xc
c0011b8c:	50                   	push   eax
c0011b8d:	e8 22 fd ff ff       	call   c00118b4 <findRSDT(unsigned char*)>
c0011b92:	83 c4 10             	add    esp,0x10
c0011b95:	a3 e8 89 02 c0       	mov    ds:0xc00289e8,eax
c0011b9a:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011b9f:	85 c0                	test   eax,eax
c0011ba1:	75 19                	jne    c0011bbc <scanMADT()+0xd0>
c0011ba3:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011ba8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bae:	83 e2 fb             	and    edx,0xfffffffb
c0011bb1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011bb7:	e9 04 04 00 00       	jmp    c0011fc0 <scanMADT()+0x4d4>
c0011bbc:	83 ec 0c             	sub    esp,0xc
c0011bbf:	68 8e 56 02 c0       	push   0xc002568e
c0011bc4:	e8 54 7e ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011bc9:	83 c4 10             	add    esp,0x10
c0011bcc:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011bd1:	83 ec 0c             	sub    esp,0xc
c0011bd4:	50                   	push   eax
c0011bd5:	e8 76 fa ff ff       	call   c0011650 <loadACPITables(unsigned char*)>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0011be2:	83 ec 08             	sub    esp,0x8
c0011be5:	68 a6 56 02 c0       	push   0xc00256a6
c0011bea:	50                   	push   eax
c0011beb:	e8 84 fe ff ff       	call   c0011a74 <findDataTable(unsigned char*, char*)>
c0011bf0:	83 c4 10             	add    esp,0x10
c0011bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011bf7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011bfc:	75 1a                	jne    c0011c18 <scanMADT()+0x12c>
c0011bfe:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0011c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c09:	83 e2 fe             	and    edx,0xfffffffe
c0011c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c12:	e9 a9 03 00 00       	jmp    c0011fc0 <scanMADT()+0x4d4>
c0011c17:	90                   	nop
c0011c18:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c27:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011c2b:	0f 87 8f 03 00 00    	ja     c0011fc0 <scanMADT()+0x4d4>
c0011c31:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011c39:	0f 87 81 03 00 00    	ja     c0011fc0 <scanMADT()+0x4d4>
c0011c3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011c47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c4b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c56:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c5a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011c5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c62:	8d 50 01             	lea    edx,[eax+0x1]
c0011c65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c6d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011c71:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011c75:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011c7a:	0f 86 3c 03 00 00    	jbe    c0011fbc <scanMADT()+0x4d0>
c0011c80:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011c85:	75 59                	jne    c0011ce0 <scanMADT()+0x1f4>
c0011c87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011c92:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c0011c98:	0f b6 d2             	movzx  edx,dl
c0011c9b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011c9f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011ca3:	88 82 20 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd73e0],al
c0011ca9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cad:	8d 50 01             	lea    edx,[eax+0x1]
c0011cb0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cb4:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c0011cba:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011cbd:	88 0d e0 8b 02 c0    	mov    BYTE PTR ds:0xc0028be0,cl
c0011cc3:	0f b6 d2             	movzx  edx,dl
c0011cc6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011cca:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011cce:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c0011cd4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011cd9:	e9 c6 02 00 00       	jmp    c0011fa4 <scanMADT()+0x4b8>
c0011cde:	66 90                	xchg   ax,ax
c0011ce0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011ce5:	0f 85 15 01 00 00    	jne    c0011e00 <scanMADT()+0x314>
c0011ceb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cef:	8d 50 01             	lea    edx,[eax+0x1]
c0011cf2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cf6:	8a 15 a0 8a 02 c0    	mov    dl,BYTE PTR ds:0xc0028aa0
c0011cfc:	0f b6 d2             	movzx  edx,dl
c0011cff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011d03:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011d07:	88 82 c0 8a 02 c0    	mov    BYTE PTR [edx-0x3ffd7540],al
c0011d0d:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011d11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d19:	01 d0                	add    eax,edx
c0011d1b:	83 c0 2c             	add    eax,0x2c
c0011d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0011d20:	0f b6 d0             	movzx  edx,al
c0011d23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d27:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d2e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011d32:	0f b6 c0             	movzx  eax,al
c0011d35:	c1 e0 08             	shl    eax,0x8
c0011d38:	89 d1                	mov    ecx,edx
c0011d3a:	09 c1                	or     ecx,eax
c0011d3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d40:	8d 50 02             	lea    edx,[eax+0x2]
c0011d43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d4b:	0f b6 c0             	movzx  eax,al
c0011d4e:	c1 e0 10             	shl    eax,0x10
c0011d51:	09 c1                	or     ecx,eax
c0011d53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d57:	8d 50 03             	lea    edx,[eax+0x3]
c0011d5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d62:	0f b6 c0             	movzx  eax,al
c0011d65:	c1 e0 18             	shl    eax,0x18
c0011d68:	09 c1                	or     ecx,eax
c0011d6a:	89 ca                	mov    edx,ecx
c0011d6c:	a0 a0 8a 02 c0       	mov    al,ds:0xc0028aa0
c0011d71:	0f b6 c0             	movzx  eax,al
c0011d74:	89 14 85 e0 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7520],edx
c0011d7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d88:	01 d0                	add    eax,edx
c0011d8a:	83 c0 2c             	add    eax,0x2c
c0011d8d:	8a 00                	mov    al,BYTE PTR [eax]
c0011d8f:	0f b6 d0             	movzx  edx,al
c0011d92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d96:	8d 48 01             	lea    ecx,[eax+0x1]
c0011d99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d9d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011da1:	0f b6 c0             	movzx  eax,al
c0011da4:	c1 e0 08             	shl    eax,0x8
c0011da7:	89 d1                	mov    ecx,edx
c0011da9:	09 c1                	or     ecx,eax
c0011dab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011daf:	8d 50 02             	lea    edx,[eax+0x2]
c0011db2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011db6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dba:	0f b6 c0             	movzx  eax,al
c0011dbd:	c1 e0 10             	shl    eax,0x10
c0011dc0:	09 c1                	or     ecx,eax
c0011dc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc6:	8d 50 03             	lea    edx,[eax+0x3]
c0011dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dcd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011dd1:	0f b6 c0             	movzx  eax,al
c0011dd4:	c1 e0 18             	shl    eax,0x18
c0011dd7:	09 c1                	or     ecx,eax
c0011dd9:	89 ca                	mov    edx,ecx
c0011ddb:	a0 a0 8a 02 c0       	mov    al,ds:0xc0028aa0
c0011de0:	0f b6 c0             	movzx  eax,al
c0011de3:	89 14 85 60 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74a0],edx
c0011dea:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011def:	a0 a0 8a 02 c0       	mov    al,ds:0xc0028aa0
c0011df4:	40                   	inc    eax
c0011df5:	a2 a0 8a 02 c0       	mov    ds:0xc0028aa0,al
c0011dfa:	e9 a5 01 00 00       	jmp    c0011fa4 <scanMADT()+0x4b8>
c0011dff:	90                   	nop
c0011e00:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011e05:	0f 85 e9 00 00 00    	jne    c0011ef4 <scanMADT()+0x408>
c0011e0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0011e12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e1a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e1e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011e22:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e26:	8d 50 01             	lea    edx,[eax+0x1]
c0011e29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e2d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e31:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011e35:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011e39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e41:	01 d0                	add    eax,edx
c0011e43:	83 c0 2c             	add    eax,0x2c
c0011e46:	8a 00                	mov    al,BYTE PTR [eax]
c0011e48:	0f b6 d0             	movzx  edx,al
c0011e4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e4f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e56:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e5a:	0f b6 c0             	movzx  eax,al
c0011e5d:	c1 e0 08             	shl    eax,0x8
c0011e60:	89 d1                	mov    ecx,edx
c0011e62:	09 c1                	or     ecx,eax
c0011e64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e68:	8d 50 02             	lea    edx,[eax+0x2]
c0011e6b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e6f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e73:	0f b6 c0             	movzx  eax,al
c0011e76:	c1 e0 10             	shl    eax,0x10
c0011e79:	09 c1                	or     ecx,eax
c0011e7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e7f:	8d 50 03             	lea    edx,[eax+0x3]
c0011e82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011e8a:	0f b6 c0             	movzx  eax,al
c0011e8d:	c1 e0 18             	shl    eax,0x18
c0011e90:	09 c8                	or     eax,ecx
c0011e92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e96:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e9b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea3:	01 d0                	add    eax,edx
c0011ea5:	83 c0 2c             	add    eax,0x2c
c0011ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0011eaa:	0f b6 c0             	movzx  eax,al
c0011ead:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011eb1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011eb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011eb8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011ebc:	0f b6 d2             	movzx  edx,dl
c0011ebf:	c1 e2 08             	shl    edx,0x8
c0011ec2:	09 d0                	or     eax,edx
c0011ec4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011ec9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011ece:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011ed3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ed7:	88 90 80 78 02 c0    	mov    BYTE PTR [eax-0x3ffd8780],dl
c0011edd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011ee2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011ee7:	66 89 84 12 80 8a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7580],ax
c0011eef:	e9 b0 00 00 00       	jmp    c0011fa4 <scanMADT()+0x4b8>
c0011ef4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011ef9:	0f 85 99 00 00 00    	jne    c0011f98 <scanMADT()+0x4ac>
c0011eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f03:	8d 50 01             	lea    edx,[eax+0x1]
c0011f06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f12:	0f b6 c0             	movzx  eax,al
c0011f15:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f21:	01 d0                	add    eax,edx
c0011f23:	83 c0 2c             	add    eax,0x2c
c0011f26:	8a 00                	mov    al,BYTE PTR [eax]
c0011f28:	0f b6 d0             	movzx  edx,al
c0011f2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f36:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f3a:	0f b6 c0             	movzx  eax,al
c0011f3d:	c1 e0 08             	shl    eax,0x8
c0011f40:	09 d0                	or     eax,edx
c0011f42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011f46:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011f4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4f:	8d 50 01             	lea    edx,[eax+0x1]
c0011f52:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f5a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f5e:	0f b6 c0             	movzx  eax,al
c0011f61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f69:	c1 e0 08             	shl    eax,0x8
c0011f6c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011f70:	89 c1                	mov    ecx,eax
c0011f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f76:	c1 e0 18             	shl    eax,0x18
c0011f79:	89 c3                	mov    ebx,eax
c0011f7b:	a1 f0 89 02 c0       	mov    eax,ds:0xc00289f0
c0011f80:	8d 50 01             	lea    edx,[eax+0x1]
c0011f83:	89 15 f0 89 02 c0    	mov    DWORD PTR ds:0xc00289f0,edx
c0011f89:	09 d9                	or     ecx,ebx
c0011f8b:	89 ca                	mov    edx,ecx
c0011f8d:	89 14 85 00 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7600],edx
c0011f94:	eb 0e                	jmp    c0011fa4 <scanMADT()+0x4b8>
c0011f96:	66 90                	xchg   ax,ax
c0011f98:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011f9d:	75 05                	jne    c0011fa4 <scanMADT()+0x4b8>
c0011f9f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011fa4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011fa9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011fad:	01 d0                	add    eax,edx
c0011faf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011fb3:	e9 68 fc ff ff       	jmp    c0011c20 <scanMADT()+0x134>
c0011fb8:	90                   	nop
c0011fb9:	eb 05                	jmp    c0011fc0 <scanMADT()+0x4d4>
c0011fbb:	90                   	nop
c0011fbc:	90                   	nop
c0011fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0011fc0:	83 c4 38             	add    esp,0x38
c0011fc3:	5b                   	pop    ebx
c0011fc4:	c3                   	ret    
c0011fc5:	90                   	nop
c0011fc6:	66 90                	xchg   ax,ax

c0011fc8 <ACPI::ACPI()>:
c0011fc8:	83 ec 0c             	sub    esp,0xc
c0011fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fcf:	83 ec 08             	sub    esp,0x8
c0011fd2:	68 ab 56 02 c0       	push   0xc00256ab
c0011fd7:	50                   	push   eax
c0011fd8:	e8 21 c3 ff ff       	call   c000e2fe <Device::Device(char const*)>
c0011fdd:	83 c4 10             	add    esp,0x10
c0011fe0:	ba 44 58 02 c0       	mov    edx,0xc0025844
c0011fe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fe9:	89 10                	mov    DWORD PTR [eax],edx
c0011feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fef:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011ff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ffa:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012008:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012012:	83 ec 0c             	sub    esp,0xc
c0012015:	68 b0 56 02 c0       	push   0xc00256b0
c001201a:	e8 fe 79 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	e8 c5 fa ff ff       	call   c0011aec <scanMADT()>
c0012027:	90                   	nop
c0012028:	83 c4 0c             	add    esp,0xc
c001202b:	c3                   	ret    

c001202c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001202c:	83 ec 2c             	sub    esp,0x2c
c001202f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012033:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012037:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001203b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001203f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012044:	88 d0                	mov    al,dl
c0012046:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001204a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001204f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012057:	90                   	nop
c0012058:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001205c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012062:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012066:	0f 8d 9c 00 00 00    	jge    c0012108 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c001206c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012070:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012074:	83 c2 2a             	add    edx,0x2a
c0012077:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001207b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012080:	75 7a                	jne    c00120fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012082:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012086:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001208a:	83 c2 2a             	add    edx,0x2a
c001208d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012091:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0012095:	75 65                	jne    c00120fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012097:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001209c:	74 3a                	je     c00120d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001209e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120a6:	83 c2 2a             	add    edx,0x2a
c00120a9:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00120ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120b4:	39 c2                	cmp    edx,eax
c00120b6:	74 10                	je     c00120c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00120b8:	83 ec 0c             	sub    esp,0xc
c00120bb:	68 04 55 02 c0       	push   0xc0025504
c00120c0:	e8 5a 27 00 00       	call   c001481f <Krnl::panic(char const*)>
c00120c5:	83 c4 10             	add    esp,0x10
c00120c8:	83 ec 0c             	sub    esp,0xc
c00120cb:	68 be 56 02 c0       	push   0xc00256be
c00120d0:	e8 4a 27 00 00       	call   c001481f <Krnl::panic(char const*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00120dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120e4:	83 c2 2a             	add    edx,0x2a
c00120e7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00120eb:	8b 02                	mov    eax,DWORD PTR [edx]
c00120ed:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00120f0:	89 01                	mov    DWORD PTR [ecx],eax
c00120f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00120f5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120fa:	66 90                	xchg   ax,ax
c00120fc:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012100:	e9 53 ff ff ff       	jmp    c0012058 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012105:	8d 76 00             	lea    esi,[esi+0x0]
c0012108:	90                   	nop
c0012109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001210d:	83 c4 2c             	add    esp,0x2c
c0012110:	c2 04 00             	ret    0x4
c0012113:	90                   	nop

c0012114 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012114:	83 ec 1c             	sub    esp,0x1c
c0012117:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001211b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001211f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012123:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012128:	88 c8                	mov    al,cl
c001212a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001212e:	88 d0                	mov    al,dl
c0012130:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012138:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001213e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012142:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012145:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0012149:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001214d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012151:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012157:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001215b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001215e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012162:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0012167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001216b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012171:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012175:	8d 48 01             	lea    ecx,[eax+0x1]
c0012178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001217c:	83 c2 2a             	add    edx,0x2a
c001217f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012187:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001218d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012191:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012194:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012198:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001219c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121a0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121a6:	8d 50 01             	lea    edx,[eax+0x1]
c00121a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121ad:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00121b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00121b7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121bd:	3d 00 02 00 00       	cmp    eax,0x200
c00121c2:	75 10                	jne    c00121d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00121c4:	83 ec 0c             	sub    esp,0xc
c00121c7:	68 cd 56 02 c0       	push   0xc00256cd
c00121cc:	e8 4e 26 00 00       	call   c001481f <Krnl::panic(char const*)>
c00121d1:	83 c4 10             	add    esp,0x10
c00121d4:	90                   	nop
c00121d5:	83 c4 1c             	add    esp,0x1c
c00121d8:	c3                   	ret    
c00121d9:	90                   	nop
c00121da:	66 90                	xchg   ax,ax

c00121dc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00121dc:	b8 00 00 00 00       	mov    eax,0x0
c00121e1:	c3                   	ret    
c00121e2:	66 90                	xchg   ax,ax

c00121e4 <ACPI::detectPCI()>:
c00121e4:	53                   	push   ebx
c00121e5:	83 ec 68             	sub    esp,0x68
c00121e8:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00121ed:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00121f2:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00121f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00121fd:	83 e0 04             	and    eax,0x4
c0012200:	84 c0                	test   al,al
c0012202:	74 2c                	je     c0012230 <ACPI::detectPCI()+0x4c>
c0012204:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012209:	83 ec 08             	sub    esp,0x8
c001220c:	68 ea 56 02 c0       	push   0xc00256ea
c0012211:	50                   	push   eax
c0012212:	e8 5d f8 ff ff       	call   c0011a74 <findDataTable(unsigned char*, char*)>
c0012217:	83 c4 10             	add    esp,0x10
c001221a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001221e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012223:	74 0b                	je     c0012230 <ACPI::detectPCI()+0x4c>
c0012225:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001222a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001222f:	90                   	nop
c0012230:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0012238:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001223c:	8a 00                	mov    al,BYTE PTR [eax]
c001223e:	3c 01                	cmp    al,0x1
c0012240:	75 0e                	jne    c0012250 <ACPI::detectPCI()+0x6c>
c0012242:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012247:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001224c:	eb 2a                	jmp    c0012278 <ACPI::detectPCI()+0x94>
c001224e:	66 90                	xchg   ax,ax
c0012250:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012254:	8a 00                	mov    al,BYTE PTR [eax]
c0012256:	3c 02                	cmp    al,0x2
c0012258:	75 1e                	jne    c0012278 <ACPI::detectPCI()+0x94>
c001225a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001225f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012264:	74 12                	je     c0012278 <ACPI::detectPCI()+0x94>
c0012266:	83 ec 0c             	sub    esp,0xc
c0012269:	68 34 55 02 c0       	push   0xc0025534
c001226e:	e8 ac 25 00 00       	call   c001481f <Krnl::panic(char const*)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	66 90                	xchg   ax,ax
c0012278:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001227c:	83 f0 01             	xor    eax,0x1
c001227f:	84 c0                	test   al,al
c0012281:	74 41                	je     c00122c4 <ACPI::detectPCI()+0xe0>
c0012283:	e8 c8 de fe ff       	call   c0000150 <manualPCIProbe>
c0012288:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001228c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012291:	75 0d                	jne    c00122a0 <ACPI::detectPCI()+0xbc>
c0012293:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012298:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001229d:	eb 25                	jmp    c00122c4 <ACPI::detectPCI()+0xe0>
c001229f:	90                   	nop
c00122a0:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00122a5:	75 1d                	jne    c00122c4 <ACPI::detectPCI()+0xe0>
c00122a7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00122ac:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122b1:	74 11                	je     c00122c4 <ACPI::detectPCI()+0xe0>
c00122b3:	83 ec 0c             	sub    esp,0xc
c00122b6:	68 34 55 02 c0       	push   0xc0025534
c00122bb:	e8 5f 25 00 00       	call   c001481f <Krnl::panic(char const*)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	90                   	nop
c00122c4:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00122c9:	0f 84 49 03 00 00    	je     c0012618 <ACPI::detectPCI()+0x434>
c00122cf:	83 ec 0c             	sub    esp,0xc
c00122d2:	68 ef 56 02 c0       	push   0xc00256ef
c00122d7:	e8 41 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00122dc:	83 c4 10             	add    esp,0x10
c00122df:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00122e4:	0f 84 8e 00 00 00    	je     c0012378 <ACPI::detectPCI()+0x194>
c00122ea:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c00122ef:	25 00 08 00 00       	and    eax,0x800
c00122f4:	0f 84 16 01 00 00    	je     c0012410 <ACPI::detectPCI()+0x22c>
c00122fa:	83 ec 0c             	sub    esp,0xc
c00122fd:	68 5c 55 02 c0       	push   0xc002555c
c0012302:	e8 16 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012307:	83 c4 10             	add    esp,0x10
c001230a:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001230f:	25 80 00 00 00       	and    eax,0x80
c0012314:	0f 85 f6 00 00 00    	jne    c0012410 <ACPI::detectPCI()+0x22c>
c001231a:	66 90                	xchg   ax,ax
c001231c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012323:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0012328:	89 c2                	mov    edx,eax
c001232a:	ec                   	in     al,dx
c001232b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001232f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012333:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0012337:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c001233c:	74 0a                	je     c0012348 <ACPI::detectPCI()+0x164>
c001233e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012343:	74 03                	je     c0012348 <ACPI::detectPCI()+0x164>
c0012345:	eb d5                	jmp    c001231c <ACPI::detectPCI()+0x138>
c0012347:	90                   	nop
c0012348:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001234f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012354:	89 c2                	mov    edx,eax
c0012356:	ec                   	in     al,dx
c0012357:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001235b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001235f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012363:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0012368:	74 de                	je     c0012348 <ACPI::detectPCI()+0x164>
c001236a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001236f:	0f 85 93 00 00 00    	jne    c0012408 <ACPI::detectPCI()+0x224>
c0012375:	eb d1                	jmp    c0012348 <ACPI::detectPCI()+0x164>
c0012377:	90                   	nop
c0012378:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c001237c:	83 f0 01             	xor    eax,0x1
c001237f:	84 c0                	test   al,al
c0012381:	0f 84 89 00 00 00    	je     c0012410 <ACPI::detectPCI()+0x22c>
c0012387:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001238c:	25 00 08 00 00       	and    eax,0x800
c0012391:	74 7d                	je     c0012410 <ACPI::detectPCI()+0x22c>
c0012393:	83 ec 0c             	sub    esp,0xc
c0012396:	68 80 55 02 c0       	push   0xc0025580
c001239b:	e8 7d 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123a0:	83 c4 10             	add    esp,0x10
c00123a3:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c00123a8:	25 80 00 00 00       	and    eax,0x80
c00123ad:	75 61                	jne    c0012410 <ACPI::detectPCI()+0x22c>
c00123af:	90                   	nop
c00123b0:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00123b7:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00123bc:	89 c2                	mov    edx,eax
c00123be:	ec                   	in     al,dx
c00123bf:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00123c3:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00123c7:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00123cb:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00123d0:	74 0a                	je     c00123dc <ACPI::detectPCI()+0x1f8>
c00123d2:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00123d7:	74 03                	je     c00123dc <ACPI::detectPCI()+0x1f8>
c00123d9:	eb d5                	jmp    c00123b0 <ACPI::detectPCI()+0x1cc>
c00123db:	90                   	nop
c00123dc:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00123e3:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00123e8:	89 c2                	mov    edx,eax
c00123ea:	ec                   	in     al,dx
c00123eb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00123ef:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00123f3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00123f7:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00123fc:	74 de                	je     c00123dc <ACPI::detectPCI()+0x1f8>
c00123fe:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012403:	75 07                	jne    c001240c <ACPI::detectPCI()+0x228>
c0012405:	eb d5                	jmp    c00123dc <ACPI::detectPCI()+0x1f8>
c0012407:	90                   	nop
c0012408:	90                   	nop
c0012409:	eb 05                	jmp    c0012410 <ACPI::detectPCI()+0x22c>
c001240b:	90                   	nop
c001240c:	90                   	nop
c001240d:	8d 76 00             	lea    esi,[esi+0x0]
c0012410:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012418:	83 ec 0c             	sub    esp,0xc
c001241b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001241f:	e8 9f 75 ff ff       	call   c00099c3 <malloc>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	89 c3                	mov    ebx,eax
c0012429:	83 ec 0c             	sub    esp,0xc
c001242c:	53                   	push   ebx
c001242d:	e8 7c ab 00 00       	call   c001cfae <PCI::PCI()>
c0012432:	83 c4 10             	add    esp,0x10
c0012435:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012439:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001243e:	25 00 08 00 00       	and    eax,0x800
c0012443:	74 7b                	je     c00124c0 <ACPI::detectPCI()+0x2dc>
c0012445:	83 ec 0c             	sub    esp,0xc
c0012448:	68 07 57 02 c0       	push   0xc0025707
c001244d:	e8 cb 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012452:	83 c4 10             	add    esp,0x10
c0012455:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001245a:	25 80 00 00 00       	and    eax,0x80
c001245f:	75 5f                	jne    c00124c0 <ACPI::detectPCI()+0x2dc>
c0012461:	8d 76 00             	lea    esi,[esi+0x0]
c0012464:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001246b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012470:	89 c2                	mov    edx,eax
c0012472:	ec                   	in     al,dx
c0012473:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012477:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001247b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001247f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012484:	74 0a                	je     c0012490 <ACPI::detectPCI()+0x2ac>
c0012486:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001248b:	74 03                	je     c0012490 <ACPI::detectPCI()+0x2ac>
c001248d:	eb d5                	jmp    c0012464 <ACPI::detectPCI()+0x280>
c001248f:	90                   	nop
c0012490:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012497:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c001249c:	89 c2                	mov    edx,eax
c001249e:	ec                   	in     al,dx
c001249f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00124a3:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c00124a7:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00124ab:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00124b0:	74 de                	je     c0012490 <ACPI::detectPCI()+0x2ac>
c00124b2:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00124b7:	75 03                	jne    c00124bc <ACPI::detectPCI()+0x2d8>
c00124b9:	eb d5                	jmp    c0012490 <ACPI::detectPCI()+0x2ac>
c00124bb:	90                   	nop
c00124bc:	90                   	nop
c00124bd:	8d 76 00             	lea    esi,[esi+0x0]
c00124c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00124c4:	83 ec 08             	sub    esp,0x8
c00124c7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124cb:	50                   	push   eax
c00124cc:	e8 29 bc ff ff       	call   c000e0fa <Device::addChild(Device*)>
c00124d1:	83 c4 10             	add    esp,0x10
c00124d4:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c00124d9:	25 00 08 00 00       	and    eax,0x800
c00124de:	74 78                	je     c0012558 <ACPI::detectPCI()+0x374>
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	68 0d 57 02 c0       	push   0xc002570d
c00124e8:	e8 30 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00124ed:	83 c4 10             	add    esp,0x10
c00124f0:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c00124f5:	25 80 00 00 00       	and    eax,0x80
c00124fa:	75 5c                	jne    c0012558 <ACPI::detectPCI()+0x374>
c00124fc:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012503:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012508:	89 c2                	mov    edx,eax
c001250a:	ec                   	in     al,dx
c001250b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001250f:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012513:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012517:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c001251c:	74 0a                	je     c0012528 <ACPI::detectPCI()+0x344>
c001251e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012523:	74 03                	je     c0012528 <ACPI::detectPCI()+0x344>
c0012525:	eb d5                	jmp    c00124fc <ACPI::detectPCI()+0x318>
c0012527:	90                   	nop
c0012528:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c001252f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012534:	89 c2                	mov    edx,eax
c0012536:	ec                   	in     al,dx
c0012537:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001253b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001253f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012543:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012548:	74 de                	je     c0012528 <ACPI::detectPCI()+0x344>
c001254a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c001254f:	75 03                	jne    c0012554 <ACPI::detectPCI()+0x370>
c0012551:	eb d5                	jmp    c0012528 <ACPI::detectPCI()+0x344>
c0012553:	90                   	nop
c0012554:	90                   	nop
c0012555:	8d 76 00             	lea    esi,[esi+0x0]
c0012558:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001255c:	8b 00                	mov    eax,DWORD PTR [eax]
c001255e:	83 c0 08             	add    eax,0x8
c0012561:	8b 00                	mov    eax,DWORD PTR [eax]
c0012563:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012568:	74 0a                	je     c0012574 <ACPI::detectPCI()+0x390>
c001256a:	ba 01 00 00 00       	mov    edx,0x1
c001256f:	eb 0b                	jmp    c001257c <ACPI::detectPCI()+0x398>
c0012571:	8d 76 00             	lea    esi,[esi+0x0]
c0012574:	ba 02 00 00 00       	mov    edx,0x2
c0012579:	8d 76 00             	lea    esi,[esi+0x0]
c001257c:	6a 00                	push   0x0
c001257e:	6a 00                	push   0x0
c0012580:	52                   	push   edx
c0012581:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012585:	ff d0                	call   eax
c0012587:	83 c4 10             	add    esp,0x10
c001258a:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001258f:	25 00 08 00 00       	and    eax,0x800
c0012594:	0f 84 26 01 00 00    	je     c00126c0 <ACPI::detectPCI()+0x4dc>
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	68 13 57 02 c0       	push   0xc0025713
c00125a2:	e8 76 74 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c00125af:	25 80 00 00 00       	and    eax,0x80
c00125b4:	0f 85 06 01 00 00    	jne    c00126c0 <ACPI::detectPCI()+0x4dc>
c00125ba:	66 90                	xchg   ax,ax
c00125bc:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c00125c3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00125c8:	89 c2                	mov    edx,eax
c00125ca:	ec                   	in     al,dx
c00125cb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00125cf:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00125d3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00125d7:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00125dc:	74 0a                	je     c00125e8 <ACPI::detectPCI()+0x404>
c00125de:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00125e3:	74 03                	je     c00125e8 <ACPI::detectPCI()+0x404>
c00125e5:	eb d5                	jmp    c00125bc <ACPI::detectPCI()+0x3d8>
c00125e7:	90                   	nop
c00125e8:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00125ef:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00125f4:	89 c2                	mov    edx,eax
c00125f6:	ec                   	in     al,dx
c00125f7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00125fb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00125ff:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012603:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012608:	74 de                	je     c00125e8 <ACPI::detectPCI()+0x404>
c001260a:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c001260f:	0f 85 a7 00 00 00    	jne    c00126bc <ACPI::detectPCI()+0x4d8>
c0012615:	eb d1                	jmp    c00125e8 <ACPI::detectPCI()+0x404>
c0012617:	90                   	nop
c0012618:	83 ec 0c             	sub    esp,0xc
c001261b:	68 19 57 02 c0       	push   0xc0025719
c0012620:	e8 8e a6 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0012625:	83 c4 10             	add    esp,0x10
c0012628:	83 ec 0c             	sub    esp,0xc
c001262b:	68 24 57 02 c0       	push   0xc0025724
c0012630:	e8 e8 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012640:	83 ec 0c             	sub    esp,0xc
c0012643:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012647:	e8 77 73 ff ff       	call   c00099c3 <malloc>
c001264c:	83 c4 10             	add    esp,0x10
c001264f:	89 c3                	mov    ebx,eax
c0012651:	83 ec 0c             	sub    esp,0xc
c0012654:	53                   	push   ebx
c0012655:	e8 20 c3 00 00       	call   c001e97a <IDE::IDE()>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012661:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012665:	83 ec 08             	sub    esp,0x8
c0012668:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001266c:	50                   	push   eax
c001266d:	e8 88 ba ff ff       	call   c000e0fa <Device::addChild(Device*)>
c0012672:	83 c4 10             	add    esp,0x10
c0012675:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012679:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012683:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012687:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012690:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012694:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001269d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a3:	83 c0 08             	add    eax,0x8
c00126a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00126a8:	6a 00                	push   0x0
c00126aa:	6a 00                	push   0x0
c00126ac:	6a 00                	push   0x0
c00126ae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00126b2:	ff d0                	call   eax
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	eb 07                	jmp    c00126c0 <ACPI::detectPCI()+0x4dc>
c00126b9:	8d 76 00             	lea    esi,[esi+0x0]
c00126bc:	90                   	nop
c00126bd:	8d 76 00             	lea    esi,[esi+0x0]
c00126c0:	90                   	nop
c00126c1:	83 c4 68             	add    esp,0x68
c00126c4:	5b                   	pop    ebx
c00126c5:	c3                   	ret    
c00126c6:	66 90                	xchg   ax,ax

c00126c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00126c8:	83 ec 1c             	sub    esp,0x1c
c00126cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126cf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00126d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00126d6:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00126db:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00126e0:	83 ec 08             	sub    esp,0x8
c00126e3:	52                   	push   edx
c00126e4:	50                   	push   eax
c00126e5:	e8 aa 68 ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00126ea:	83 c4 10             	add    esp,0x10
c00126ed:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00126f1:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00126f6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00126fb:	83 ec 04             	sub    esp,0x4
c00126fe:	6a 01                	push   0x1
c0012700:	52                   	push   edx
c0012701:	50                   	push   eax
c0012702:	e8 69 6a ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c0012707:	83 c4 10             	add    esp,0x10
c001270a:	90                   	nop
c001270b:	83 c4 1c             	add    esp,0x1c
c001270e:	c3                   	ret    
c001270f:	90                   	nop

c0012710 <ACPI::sleep()>:
c0012710:	83 ec 0c             	sub    esp,0xc
c0012713:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0012718:	85 c0                	test   eax,eax
c001271a:	74 08                	je     c0012724 <ACPI::sleep()+0x14>
c001271c:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0012721:	ff d0                	call   eax
c0012723:	90                   	nop
c0012724:	90                   	nop
c0012725:	83 c4 0c             	add    esp,0xc
c0012728:	c3                   	ret    
c0012729:	90                   	nop
c001272a:	66 90                	xchg   ax,ax

c001272c <ACPI::open(int, int, void*)>:
c001272c:	57                   	push   edi
c001272d:	56                   	push   esi
c001272e:	53                   	push   ebx
c001272f:	81 ec 70 01 00 00    	sub    esp,0x170
c0012735:	83 ec 0c             	sub    esp,0xc
c0012738:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001273f:	e8 a0 fa ff ff       	call   c00121e4 <ACPI::detectPCI()>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	83 ec 0c             	sub    esp,0xc
c001274a:	68 a4 55 02 c0       	push   0xc00255a4
c001274f:	e8 c9 72 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012754:	83 c4 10             	add    esp,0x10
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	68 39 57 02 c0       	push   0xc0025739
c001275f:	e8 2f 48 00 00       	call   c0016f93 <Thr::loadKernelSymbolTable(char const*)>
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001276f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001277a:	83 ec 0c             	sub    esp,0xc
c001277d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012784:	e8 3a 72 ff ff       	call   c00099c3 <malloc>
c0012789:	83 c4 10             	add    esp,0x10
c001278c:	89 c3                	mov    ebx,eax
c001278e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0012793:	83 ec 04             	sub    esp,0x4
c0012796:	50                   	push   eax
c0012797:	68 57 57 02 c0       	push   0xc0025757
c001279c:	53                   	push   ebx
c001279d:	e8 7c aa ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00127a2:	83 c4 10             	add    esp,0x10
c00127a5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c00127ac:	83 ec 08             	sub    esp,0x8
c00127af:	6a 01                	push   0x1
c00127b1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00127b8:	e8 c5 aa ff ff       	call   c000d282 <File::open(FileOpenMode)>
c00127bd:	83 c4 10             	add    esp,0x10
c00127c0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c00127c7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c00127cf:	75 17                	jne    c00127e8 <ACPI::open(int, int, void*)+0xbc>
c00127d1:	83 ec 0c             	sub    esp,0xc
c00127d4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00127db:	e8 00 ab ff ff       	call   c000d2e0 <File::close()>
c00127e0:	83 c4 10             	add    esp,0x10
c00127e3:	eb 0b                	jmp    c00127f0 <ACPI::open(int, int, void*)+0xc4>
c00127e5:	8d 76 00             	lea    esi,[esi+0x0]
c00127e8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00127f0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00127f8:	74 1e                	je     c0012818 <ACPI::open(int, int, void*)+0xec>
c00127fa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012801:	8b 00                	mov    eax,DWORD PTR [eax]
c0012803:	83 c0 08             	add    eax,0x8
c0012806:	8b 00                	mov    eax,DWORD PTR [eax]
c0012808:	83 ec 0c             	sub    esp,0xc
c001280b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012812:	ff d0                	call   eax
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	90                   	nop
c0012818:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001281f:	83 f0 01             	xor    eax,0x1
c0012822:	84 c0                	test   al,al
c0012824:	74 42                	je     c0012868 <ACPI::open(int, int, void*)+0x13c>
c0012826:	83 ec 0c             	sub    esp,0xc
c0012829:	68 75 57 02 c0       	push   0xc0025775
c001282e:	e8 ea 71 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012833:	83 c4 10             	add    esp,0x10
c0012836:	83 ec 04             	sub    esp,0x4
c0012839:	6a 0c                	push   0xc
c001283b:	68 90 57 02 c0       	push   0xc0025790
c0012840:	68 a1 57 02 c0       	push   0xc00257a1
c0012845:	e8 b3 2d 00 00       	call   c00155fd <Reg::readIntWithDefault(char*, char*, int)>
c001284a:	83 c4 10             	add    esp,0x10
c001284d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012854:	83 ec 0c             	sub    esp,0xc
c0012857:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001285e:	e8 34 93 ff ff       	call   c000bb97 <Virt::setupPageSwapping(int)>
c0012863:	83 c4 10             	add    esp,0x10
c0012866:	66 90                	xchg   ax,ax
c0012868:	83 ec 0c             	sub    esp,0xc
c001286b:	68 c6 3f 02 c0       	push   0xc0023fc6
c0012870:	e8 a8 71 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012875:	83 c4 10             	add    esp,0x10
c0012878:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c001287e:	83 ec 08             	sub    esp,0x8
c0012881:	6a 01                	push   0x1
c0012883:	68 a8 57 02 c0       	push   0xc00257a8
c0012888:	e8 7d 51 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c001288d:	83 c4 10             	add    esp,0x10
c0012890:	83 ec 08             	sub    esp,0x8
c0012893:	53                   	push   ebx
c0012894:	50                   	push   eax
c0012895:	e8 a1 53 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00128a4:	83 ec 08             	sub    esp,0x8
c00128a7:	6a 12                	push   0x12
c00128a9:	50                   	push   eax
c00128aa:	e8 cf bb ff ff       	call   c000e47e <getDevicesOfType(DeviceType)>
c00128af:	83 c4 0c             	add    esp,0xc
c00128b2:	66 90                	xchg   ax,ax
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00128be:	50                   	push   eax
c00128bf:	e8 fc 08 01 00       	call   c00231c0 <LinkedList<Device>::isEmpty()>
c00128c4:	83 c4 10             	add    esp,0x10
c00128c7:	83 f0 01             	xor    eax,0x1
c00128ca:	84 c0                	test   al,al
c00128cc:	0f 84 46 01 00 00    	je     c0012a18 <ACPI::open(int, int, void*)+0x2ec>
c00128d2:	83 ec 0c             	sub    esp,0xc
c00128d5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00128dc:	50                   	push   eax
c00128dd:	e8 fa 08 01 00       	call   c00231dc <LinkedList<Device>::getFirstElement()>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00128ec:	83 ec 0c             	sub    esp,0xc
c00128ef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00128f6:	50                   	push   eax
c00128f7:	e8 e8 08 01 00       	call   c00231e4 <LinkedList<Device>::removeFirst()>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012906:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001290d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012914:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012918:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001291e:	ba 09 00 00 00       	mov    edx,0x9
c0012923:	fc                   	cld    
c0012924:	89 c7                	mov    edi,eax
c0012926:	89 de                	mov    esi,ebx
c0012928:	89 d1                	mov    ecx,edx
c001292a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012933:	50                   	push   eax
c0012934:	83 ec 24             	sub    esp,0x24
c0012937:	89 e0                	mov    eax,esp
c0012939:	89 c3                	mov    ebx,eax
c001293b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001293f:	ba 09 00 00 00       	mov    edx,0x9
c0012944:	89 df                	mov    edi,ebx
c0012946:	89 c6                	mov    esi,eax
c0012948:	89 d1                	mov    ecx,edx
c001294a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001294c:	e8 3b ab 00 00       	call   c001d48c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012951:	83 c4 30             	add    esp,0x30
c0012954:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001295b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012963:	0f 84 4b ff ff ff    	je     c00128b4 <ACPI::open(int, int, void*)+0x188>
c0012969:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012974:	83 ec 0c             	sub    esp,0xc
c0012977:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001297e:	e8 40 70 ff ff       	call   c00099c3 <malloc>
c0012983:	83 c4 10             	add    esp,0x10
c0012986:	89 c3                	mov    ebx,eax
c0012988:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c001298d:	83 ec 04             	sub    esp,0x4
c0012990:	50                   	push   eax
c0012991:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012998:	53                   	push   ebx
c0012999:	e8 80 a8 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c00129a8:	83 ec 0c             	sub    esp,0xc
c00129ab:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00129b2:	e8 39 ab ff ff       	call   c000d4f0 <File::exists()>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	84 c0                	test   al,al
c00129bc:	74 2a                	je     c00129e8 <ACPI::open(int, int, void*)+0x2bc>
c00129be:	83 ec 08             	sub    esp,0x8
c00129c1:	6a 01                	push   0x1
c00129c3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00129ca:	e8 3b 50 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c00129cf:	83 c4 10             	add    esp,0x10
c00129d2:	83 ec 08             	sub    esp,0x8
c00129d5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c00129dc:	50                   	push   eax
c00129dd:	e8 59 52 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	8d 76 00             	lea    esi,[esi+0x0]
c00129e8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00129f0:	0f 84 be fe ff ff    	je     c00128b4 <ACPI::open(int, int, void*)+0x188>
c00129f6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00129fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ff:	83 c0 08             	add    eax,0x8
c0012a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a04:	83 ec 0c             	sub    esp,0xc
c0012a07:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012a0e:	ff d0                	call   eax
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	e9 9c fe ff ff       	jmp    c00128b4 <ACPI::open(int, int, void*)+0x188>
c0012a18:	83 ec 0c             	sub    esp,0xc
c0012a1b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a22:	50                   	push   eax
c0012a23:	e8 94 07 01 00       	call   c00231bc <LinkedList<Device>::~LinkedList()>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c0012a31:	83 ec 08             	sub    esp,0x8
c0012a34:	6a 01                	push   0x1
c0012a36:	68 c3 57 02 c0       	push   0xc00257c3
c0012a3b:	e8 ca 4f 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	83 ec 08             	sub    esp,0x8
c0012a46:	53                   	push   ebx
c0012a47:	50                   	push   eax
c0012a48:	e8 ee 51 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c0012a4d:	83 c4 10             	add    esp,0x10
c0012a50:	8b 1d 88 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028188
c0012a56:	83 ec 08             	sub    esp,0x8
c0012a59:	6a 01                	push   0x1
c0012a5b:	68 e0 57 02 c0       	push   0xc00257e0
c0012a60:	e8 a5 4f 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c0012a65:	83 c4 10             	add    esp,0x10
c0012a68:	83 ec 08             	sub    esp,0x8
c0012a6b:	53                   	push   ebx
c0012a6c:	50                   	push   eax
c0012a6d:	e8 c9 51 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c0012a72:	83 c4 10             	add    esp,0x10
c0012a75:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0012a7a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012a80:	83 e0 04             	and    eax,0x4
c0012a83:	84 c0                	test   al,al
c0012a85:	0f 84 15 01 00 00    	je     c0012ba0 <ACPI::open(int, int, void*)+0x474>
c0012a8b:	83 ec 0c             	sub    esp,0xc
c0012a8e:	68 fd 57 02 c0       	push   0xc00257fd
c0012a93:	e8 85 6f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012aa6:	83 ec 0c             	sub    esp,0xc
c0012aa9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012ab0:	e8 0e 6f ff ff       	call   c00099c3 <malloc>
c0012ab5:	83 c4 10             	add    esp,0x10
c0012ab8:	89 c3                	mov    ebx,eax
c0012aba:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0012abf:	83 ec 04             	sub    esp,0x4
c0012ac2:	50                   	push   eax
c0012ac3:	68 1a 58 02 c0       	push   0xc002581a
c0012ac8:	53                   	push   ebx
c0012ac9:	e8 50 a7 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0012ace:	83 c4 10             	add    esp,0x10
c0012ad1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012ad8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012ae0:	74 1a                	je     c0012afc <ACPI::open(int, int, void*)+0x3d0>
c0012ae2:	83 ec 0c             	sub    esp,0xc
c0012ae5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012aec:	e8 ff a9 ff ff       	call   c000d4f0 <File::exists()>
c0012af1:	83 c4 10             	add    esp,0x10
c0012af4:	84 c0                	test   al,al
c0012af6:	74 04                	je     c0012afc <ACPI::open(int, int, void*)+0x3d0>
c0012af8:	b0 01                	mov    al,0x1
c0012afa:	eb 04                	jmp    c0012b00 <ACPI::open(int, int, void*)+0x3d4>
c0012afc:	b0 00                	mov    al,0x0
c0012afe:	66 90                	xchg   ax,ax
c0012b00:	84 c0                	test   al,al
c0012b02:	74 28                	je     c0012b2c <ACPI::open(int, int, void*)+0x400>
c0012b04:	83 ec 08             	sub    esp,0x8
c0012b07:	6a 01                	push   0x1
c0012b09:	68 1a 58 02 c0       	push   0xc002581a
c0012b0e:	e8 f7 4e 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c0012b13:	83 c4 10             	add    esp,0x10
c0012b16:	83 ec 08             	sub    esp,0x8
c0012b19:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012b20:	50                   	push   eax
c0012b21:	e8 15 51 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c0012b26:	83 c4 10             	add    esp,0x10
c0012b29:	8d 76 00             	lea    esi,[esi+0x0]
c0012b2c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b34:	74 2a                	je     c0012b60 <ACPI::open(int, int, void*)+0x434>
c0012b36:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012b3e:	74 20                	je     c0012b60 <ACPI::open(int, int, void*)+0x434>
c0012b40:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b49:	83 c0 08             	add    eax,0x8
c0012b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b4e:	83 ec 0c             	sub    esp,0xc
c0012b51:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012b58:	ff d0                	call   eax
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b60:	a1 e8 89 02 c0       	mov    eax,ds:0xc00289e8
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	68 37 58 02 c0       	push   0xc0025837
c0012b6d:	50                   	push   eax
c0012b6e:	e8 01 ef ff ff       	call   c0011a74 <findDataTable(unsigned char*, char*)>
c0012b73:	83 c4 10             	add    esp,0x10
c0012b76:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012b7d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012b85:	74 19                	je     c0012ba0 <ACPI::open(int, int, void*)+0x474>
c0012b87:	83 ec 08             	sub    esp,0x8
c0012b8a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012b91:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012b98:	e8 2b fb ff ff       	call   c00126c8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012b9d:	83 c4 10             	add    esp,0x10
c0012ba0:	b8 00 00 00 00       	mov    eax,0x0
c0012ba5:	81 c4 70 01 00 00    	add    esp,0x170
c0012bab:	5b                   	pop    ebx
c0012bac:	5e                   	pop    esi
c0012bad:	5f                   	pop    edi
c0012bae:	c3                   	ret    
c0012baf:	90                   	nop

c0012bb0 <CPU::close(int, int, void*)>:
c0012bb0:	31 c0                	xor    eax,eax
c0012bb2:	c3                   	ret    
c0012bb3:	90                   	nop

c0012bb4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012bb4:	55                   	push   ebp
c0012bb5:	57                   	push   edi
c0012bb6:	56                   	push   esi
c0012bb7:	53                   	push   ebx
c0012bb8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012bbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012bc0:	89 ce                	mov    esi,ecx
c0012bc2:	89 d5                	mov    ebp,edx
c0012bc4:	80 f9 04             	cmp    cl,0x4
c0012bc7:	75 28                	jne    c0012bf1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012bc9:	8d 42 f9             	lea    eax,[edx-0x7]
c0012bcc:	3c 03                	cmp    al,0x3
c0012bce:	0f 86 63 01 00 00    	jbe    c0012d37 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012bd4:	80 fa 03             	cmp    dl,0x3
c0012bd7:	0f 84 5a 01 00 00    	je     c0012d37 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012bdd:	8d 7a f2             	lea    edi,[edx-0xe]
c0012be0:	b8 50 7a 02 c0       	mov    eax,0xc0027a50
c0012be5:	89 fb                	mov    ebx,edi
c0012be7:	80 fb 01             	cmp    bl,0x1
c0012bea:	77 4e                	ja     c0012c3a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012bec:	e9 52 01 00 00       	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012bf1:	80 f9 05             	cmp    cl,0x5
c0012bf4:	75 4d                	jne    c0012c43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012bf6:	b8 60 7a 02 c0       	mov    eax,0xc0027a60
c0012bfb:	80 fa 03             	cmp    dl,0x3
c0012bfe:	0f 86 3f 01 00 00    	jbe    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c04:	8d 7a fa             	lea    edi,[edx-0x6]
c0012c07:	b8 70 7a 02 c0       	mov    eax,0xc0027a70
c0012c0c:	89 fb                	mov    ebx,edi
c0012c0e:	80 fb 01             	cmp    bl,0x1
c0012c11:	0f 86 2c 01 00 00    	jbe    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c17:	b8 80 7a 02 c0       	mov    eax,0xc0027a80
c0012c1c:	80 fa 08             	cmp    dl,0x8
c0012c1f:	0f 84 1e 01 00 00    	je     c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c25:	89 d7                	mov    edi,edx
c0012c27:	b8 90 7a 02 c0       	mov    eax,0xc0027a90
c0012c2c:	83 e7 fb             	and    edi,0xfffffffb
c0012c2f:	89 fb                	mov    ebx,edi
c0012c31:	80 fb 09             	cmp    bl,0x9
c0012c34:	0f 84 09 01 00 00    	je     c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	89 eb                	mov    ebx,ebp
c0012c3e:	0f b6 fb             	movzx  edi,bl
c0012c41:	eb 30                	jmp    c0012c73 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012c43:	31 c0                	xor    eax,eax
c0012c45:	80 f9 06             	cmp    cl,0x6
c0012c48:	75 f2                	jne    c0012c3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c4a:	80 fa 0a             	cmp    dl,0xa
c0012c4d:	77 ed                	ja     c0012c3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c4f:	bf de 05 00 00       	mov    edi,0x5de
c0012c54:	0f a3 d7             	bt     edi,edx
c0012c57:	73 e3                	jae    c0012c3c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012c59:	b8 a0 7a 02 c0       	mov    eax,0xc0027aa0
c0012c5e:	e9 e0 00 00 00       	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012c63:	39 c7                	cmp    edi,eax
c0012c65:	0f 84 d3 00 00 00    	je     c0012d3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012c6b:	40                   	inc    eax
c0012c6c:	3d d0 00 00 00       	cmp    eax,0xd0
c0012c71:	74 09                	je     c0012c7c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012c73:	89 f3                	mov    ebx,esi
c0012c75:	80 fb 0f             	cmp    bl,0xf
c0012c78:	75 f1                	jne    c0012c6b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012c7a:	eb e7                	jmp    c0012c63 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012c7c:	80 f9 10             	cmp    cl,0x10
c0012c7f:	75 14                	jne    c0012c95 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012c81:	8d 42 fc             	lea    eax,[edx-0x4]
c0012c84:	83 e0 fb             	and    eax,0xfffffffb
c0012c87:	3c 02                	cmp    al,0x2
c0012c89:	76 34                	jbe    c0012cbf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012c8b:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012c90:	80 fa 02             	cmp    dl,0x2
c0012c93:	eb 24                	jmp    c0012cb9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012c95:	80 f9 11             	cmp    cl,0x11
c0012c98:	75 13                	jne    c0012cad <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012c9a:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012c9f:	80 fa 03             	cmp    dl,0x3
c0012ca2:	0f 85 9b 00 00 00    	jne    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ca8:	e9 91 00 00 00       	jmp    c0012d3e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012cad:	80 f9 12             	cmp    cl,0x12
c0012cb0:	75 14                	jne    c0012cc6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012cb2:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012cb7:	fe ca                	dec    dl
c0012cb9:	0f 85 84 00 00 00    	jne    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cbf:	b8 c0 7a 02 c0       	mov    eax,0xc0027ac0
c0012cc4:	eb 7d                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cc6:	80 f9 14             	cmp    cl,0x14
c0012cc9:	75 12                	jne    c0012cdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012ccb:	4a                   	dec    edx
c0012ccc:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012cd1:	80 fa 01             	cmp    dl,0x1
c0012cd4:	77 6d                	ja     c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cd6:	b8 d0 7a 02 c0       	mov    eax,0xc0027ad0
c0012cdb:	eb 66                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cdd:	80 f9 15             	cmp    cl,0x15
c0012ce0:	75 31                	jne    c0012d13 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012ce2:	b8 e0 7a 02 c0       	mov    eax,0xc0027ae0
c0012ce7:	80 fa 01             	cmp    dl,0x1
c0012cea:	74 57                	je     c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cec:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012cf1:	80 fa 13             	cmp    dl,0x13
c0012cf4:	76 0c                	jbe    c0012d02 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012cf6:	80 fa 30             	cmp    dl,0x30
c0012cf9:	75 48                	jne    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012cfb:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0012d00:	eb 41                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d02:	b9 04 00 09 00       	mov    ecx,0x90004
c0012d07:	0f a3 d1             	bt     ecx,edx
c0012d0a:	73 37                	jae    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d0c:	b8 f0 7a 02 c0       	mov    eax,0xc0027af0
c0012d11:	eb 30                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d13:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012d18:	80 f9 16             	cmp    cl,0x16
c0012d1b:	75 26                	jne    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d1d:	b8 10 7b 02 c0       	mov    eax,0xc0027b10
c0012d22:	84 d2                	test   dl,dl
c0012d24:	74 1d                	je     c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d26:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012d2b:	80 fa 30             	cmp    dl,0x30
c0012d2e:	75 13                	jne    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d30:	b8 20 7b 02 c0       	mov    eax,0xc0027b20
c0012d35:	eb 0c                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d37:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c0012d3c:	eb 05                	jmp    c0012d43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d3e:	b8 b0 7a 02 c0       	mov    eax,0xc0027ab0
c0012d43:	5b                   	pop    ebx
c0012d44:	5e                   	pop    esi
c0012d45:	5f                   	pop    edi
c0012d46:	5d                   	pop    ebp
c0012d47:	c3                   	ret    

c0012d48 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012d48:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d50:	80 f9 04             	cmp    cl,0x4
c0012d53:	75 6b                	jne    c0012dc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012d55:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0012d5a:	80 fa 01             	cmp    dl,0x1
c0012d5d:	0f 86 92 02 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d63:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c0012d68:	80 fa 02             	cmp    dl,0x2
c0012d6b:	0f 84 84 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d71:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0012d76:	80 fa 03             	cmp    dl,0x3
c0012d79:	0f 84 76 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d7f:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0012d84:	80 fa 04             	cmp    dl,0x4
c0012d87:	0f 84 68 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d8d:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0012d92:	80 fa 05             	cmp    dl,0x5
c0012d95:	0f 84 5a 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012d9b:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0012da0:	80 fa 07             	cmp    dl,0x7
c0012da3:	0f 84 4c 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012da9:	83 ea 08             	sub    edx,0x8
c0012dac:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012db1:	80 fa 01             	cmp    dl,0x1
c0012db4:	0f 87 3b 02 00 00    	ja     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dba:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c0012dbf:	c3                   	ret    
c0012dc0:	80 f9 05             	cmp    cl,0x5
c0012dc3:	75 45                	jne    c0012e0a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012dc5:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012dc8:	b8 00 79 02 c0       	mov    eax,0xc0027900
c0012dcd:	80 f9 02             	cmp    cl,0x2
c0012dd0:	0f 86 1f 02 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012dd6:	80 fa 04             	cmp    dl,0x4
c0012dd9:	0f 84 f3 01 00 00    	je     c0012fd2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012ddf:	80 fa 07             	cmp    dl,0x7
c0012de2:	0f 84 0d 02 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012de8:	b8 10 79 02 c0       	mov    eax,0xc0027910
c0012ded:	80 fa 08             	cmp    dl,0x8
c0012df0:	0f 84 ff 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012df6:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012dfb:	80 fa 09             	cmp    dl,0x9
c0012dfe:	0f 85 f1 01 00 00    	jne    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e04:	b8 20 79 02 c0       	mov    eax,0xc0027920
c0012e09:	c3                   	ret    
c0012e0a:	80 f9 06             	cmp    cl,0x6
c0012e0d:	0f 85 85 01 00 00    	jne    c0012f98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012e13:	b8 30 79 02 c0       	mov    eax,0xc0027930
c0012e18:	80 fa 01             	cmp    dl,0x1
c0012e1b:	0f 84 d4 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e21:	8d 42 fb             	lea    eax,[edx-0x5]
c0012e24:	3c 01                	cmp    al,0x1
c0012e26:	0f 86 ac 01 00 00    	jbe    c0012fd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012e2c:	80 fa 03             	cmp    dl,0x3
c0012e2f:	0f 84 a3 01 00 00    	je     c0012fd8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012e35:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012e38:	b8 50 79 02 c0       	mov    eax,0xc0027950
c0012e3d:	80 f9 01             	cmp    cl,0x1
c0012e40:	0f 86 af 01 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e46:	80 fa 09             	cmp    dl,0x9
c0012e49:	0f 84 8f 01 00 00    	je     c0012fde <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012e4f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012e52:	80 f9 01             	cmp    cl,0x1
c0012e55:	0f 86 9a 01 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e5b:	b8 60 79 02 c0       	mov    eax,0xc0027960
c0012e60:	80 fa 0d             	cmp    dl,0xd
c0012e63:	0f 84 8c 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e69:	b8 70 79 02 c0       	mov    eax,0xc0027970
c0012e6e:	80 fa 0e             	cmp    dl,0xe
c0012e71:	0f 84 7e 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e77:	b8 80 79 02 c0       	mov    eax,0xc0027980
c0012e7c:	80 fa 0f             	cmp    dl,0xf
c0012e7f:	0f 84 70 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e85:	b8 60 79 02 c0       	mov    eax,0xc0027960
c0012e8a:	80 fa 15             	cmp    dl,0x15
c0012e8d:	0f 84 62 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012e93:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012e96:	b8 80 79 02 c0       	mov    eax,0xc0027980
c0012e9b:	80 f9 01             	cmp    cl,0x1
c0012e9e:	0f 86 51 01 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ea4:	80 fa 1a             	cmp    dl,0x1a
c0012ea7:	0f 84 37 01 00 00    	je     c0012fe4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012ead:	80 fa 1c             	cmp    dl,0x1c
c0012eb0:	0f 84 34 01 00 00    	je     c0012fea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012eb6:	80 fa 1d             	cmp    dl,0x1d
c0012eb9:	0f 84 36 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ebf:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012ec4:	80 fa 25             	cmp    dl,0x25
c0012ec7:	0f 84 28 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ecd:	8d 4a da             	lea    ecx,[edx-0x26]
c0012ed0:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012ed5:	80 f9 01             	cmp    cl,0x1
c0012ed8:	0f 86 17 01 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ede:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0012ee3:	80 fa 2a             	cmp    dl,0x2a
c0012ee6:	0f 84 09 01 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012eec:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012ef1:	80 fa 2c             	cmp    dl,0x2c
c0012ef4:	0f 84 fb 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012efa:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0012eff:	80 fa 2d             	cmp    dl,0x2d
c0012f02:	0f 84 ed 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f08:	b8 90 79 02 c0       	mov    eax,0xc0027990
c0012f0d:	80 fa 2e             	cmp    dl,0x2e
c0012f10:	0f 84 df 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f16:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012f1b:	80 fa 2f             	cmp    dl,0x2f
c0012f1e:	0f 84 d1 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f24:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012f27:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012f2c:	80 f9 01             	cmp    cl,0x1
c0012f2f:	0f 86 c0 00 00 00    	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f35:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c0012f3a:	80 fa 37             	cmp    dl,0x37
c0012f3d:	0f 84 b2 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f43:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c0012f48:	80 fa 3a             	cmp    dl,0x3a
c0012f4b:	0f 84 a4 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f51:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c0012f56:	80 fa 3c             	cmp    dl,0x3c
c0012f59:	0f 84 96 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f5f:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0012f64:	80 fa 3d             	cmp    dl,0x3d
c0012f67:	0f 84 88 00 00 00    	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f6d:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c0012f72:	80 fa 3e             	cmp    dl,0x3e
c0012f75:	74 7e                	je     c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f77:	8d 42 bb             	lea    eax,[edx-0x45]
c0012f7a:	3c 01                	cmp    al,0x1
c0012f7c:	76 72                	jbe    c0012ff0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012f7e:	80 fa 3f             	cmp    dl,0x3f
c0012f81:	74 6d                	je     c0012ff0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012f83:	80 fa 4a             	cmp    dl,0x4a
c0012f86:	74 0a                	je     c0012f92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012f88:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012f8d:	80 fa 4d             	cmp    dl,0x4d
c0012f90:	75 63                	jne    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f92:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c0012f97:	c3                   	ret    
c0012f98:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012f9d:	80 f9 0b             	cmp    cl,0xb
c0012fa0:	75 0a                	jne    c0012fac <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012fa2:	fe ca                	dec    dl
c0012fa4:	75 4f                	jne    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa6:	b8 10 7a 02 c0       	mov    eax,0xc0027a10
c0012fab:	c3                   	ret    
c0012fac:	80 f9 0f             	cmp    cl,0xf
c0012faf:	75 44                	jne    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fb1:	b8 20 7a 02 c0       	mov    eax,0xc0027a20
c0012fb6:	80 fa 02             	cmp    dl,0x2
c0012fb9:	76 3a                	jbe    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fbb:	8d 42 fd             	lea    eax,[edx-0x3]
c0012fbe:	3c 01                	cmp    al,0x1
c0012fc0:	76 0a                	jbe    c0012fcc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012fc2:	b8 bd 59 02 c0       	mov    eax,0xc00259bd
c0012fc7:	80 fa 06             	cmp    dl,0x6
c0012fca:	75 29                	jne    c0012ff5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fcc:	b8 30 7a 02 c0       	mov    eax,0xc0027a30
c0012fd1:	c3                   	ret    
c0012fd2:	b8 10 79 02 c0       	mov    eax,0xc0027910
c0012fd7:	c3                   	ret    
c0012fd8:	b8 40 79 02 c0       	mov    eax,0xc0027940
c0012fdd:	c3                   	ret    
c0012fde:	b8 60 79 02 c0       	mov    eax,0xc0027960
c0012fe3:	c3                   	ret    
c0012fe4:	b8 90 79 02 c0       	mov    eax,0xc0027990
c0012fe9:	c3                   	ret    
c0012fea:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012fef:	c3                   	ret    
c0012ff0:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c0012ff5:	c3                   	ret    

c0012ff6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012ff6:	60                   	pusha  
c0012ff7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012fff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013003:	9c                   	pushf  
c0013004:	fa                   	cli    
c0013005:	0f 09                	wbinvd 
c0013007:	0f 30                	wrmsr  
c0013009:	9d                   	popf   
c001300a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001300e:	89 02                	mov    DWORD PTR [edx],eax
c0013010:	61                   	popa   
c0013011:	c3                   	ret    

c0013012 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013012:	60                   	pusha  
c0013013:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013017:	9c                   	pushf  
c0013018:	fa                   	cli    
c0013019:	0f 09                	wbinvd 
c001301b:	31 c0                	xor    eax,eax
c001301d:	31 d2                	xor    edx,edx
c001301f:	0f 32                	rdmsr  
c0013021:	9d                   	popf   
c0013022:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013026:	89 02                	mov    DWORD PTR [edx],eax
c0013028:	61                   	popa   
c0013029:	c3                   	ret    

c001302a <CPU::AMD_K6_writeback(int, int, int)>:
c001302a:	56                   	push   esi
c001302b:	53                   	push   ebx
c001302c:	83 ec 10             	sub    esp,0x10
c001302f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013033:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013038:	75 5d                	jne    c0013097 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001303a:	83 f8 08             	cmp    eax,0x8
c001303d:	75 09                	jne    c0013048 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001303f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013044:	7e 13                	jle    c0013059 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013046:	eb 30                	jmp    c0013078 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013048:	83 f8 06             	cmp    eax,0x6
c001304b:	7c 4a                	jl     c0013097 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001304d:	83 f8 07             	cmp    eax,0x7
c0013050:	7e 07                	jle    c0013059 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013052:	83 f8 09             	cmp    eax,0x9
c0013055:	74 21                	je     c0013078 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0013057:	eb 3e                	jmp    c0013097 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013059:	89 e6                	mov    esi,esp
c001305b:	8b 1d ac 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281ac
c0013061:	56                   	push   esi
c0013062:	c1 eb 15             	shr    ebx,0x15
c0013065:	68 82 00 00 c0       	push   0xc0000082
c001306a:	83 e3 7e             	and    ebx,0x7e
c001306d:	e8 a0 ff ff ff       	call   c0013012 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013072:	56                   	push   esi
c0013073:	6a 00                	push   0x0
c0013075:	53                   	push   ebx
c0013076:	eb 12                	jmp    c001308a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013078:	89 e3                	mov    ebx,esp
c001307a:	53                   	push   ebx
c001307b:	68 82 00 00 c0       	push   0xc0000082
c0013080:	e8 8d ff ff ff       	call   c0013012 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013085:	53                   	push   ebx
c0013086:	6a 00                	push   0x0
c0013088:	6a 00                	push   0x0
c001308a:	68 82 00 00 c0       	push   0xc0000082
c001308f:	e8 62 ff ff ff       	call   c0012ff6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013094:	83 c4 18             	add    esp,0x18
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	5b                   	pop    ebx
c001309b:	5e                   	pop    esi
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001309e:	55                   	push   ebp
c001309f:	57                   	push   edi
c00130a0:	56                   	push   esi
c00130a1:	53                   	push   ebx
c00130a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130a6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130aa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00130ae:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00130b2:	39 05 40 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b40,eax
c00130b8:	75 23                	jne    c00130dd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00130ba:	a1 4c 8c 02 c0       	mov    eax,ds:0xc0028c4c
c00130bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00130c3:	89 06                	mov    DWORD PTR [esi],eax
c00130c5:	a1 48 8c 02 c0       	mov    eax,ds:0xc0028c48
c00130ca:	89 07                	mov    DWORD PTR [edi],eax
c00130cc:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c00130d1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00130d4:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c00130d9:	89 02                	mov    DWORD PTR [edx],eax
c00130db:	eb 3f                	jmp    c001311c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00130dd:	31 c9                	xor    ecx,ecx
c00130df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130e3:	0f a2                	cpuid  
c00130e5:	89 06                	mov    DWORD PTR [esi],eax
c00130e7:	89 1f                	mov    DWORD PTR [edi],ebx
c00130e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00130ed:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00130f0:	89 10                	mov    DWORD PTR [eax],edx
c00130f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130f6:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c00130fb:	8b 06                	mov    eax,DWORD PTR [esi]
c00130fd:	a3 4c 8c 02 c0       	mov    ds:0xc0028c4c,eax
c0013102:	8b 07                	mov    eax,DWORD PTR [edi]
c0013104:	a3 48 8c 02 c0       	mov    ds:0xc0028c48,eax
c0013109:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001310c:	a3 44 8c 02 c0       	mov    ds:0xc0028c44,eax
c0013111:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013115:	8b 00                	mov    eax,DWORD PTR [eax]
c0013117:	a3 40 8c 02 c0       	mov    ds:0xc0028c40,eax
c001311c:	5b                   	pop    ebx
c001311d:	5e                   	pop    esi
c001311e:	5f                   	pop    edi
c001311f:	5d                   	pop    ebp
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <CPU::cpuidCheckEDX(unsigned int)>:
c0013122:	83 ec 10             	sub    esp,0x10
c0013125:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013129:	50                   	push   eax
c001312a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001312e:	50                   	push   eax
c001312f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013133:	50                   	push   eax
c0013134:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013138:	50                   	push   eax
c0013139:	6a 01                	push   0x1
c001313b:	e8 5e ff ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013144:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013148:	0f 95 c0             	setne  al
c001314b:	83 c4 24             	add    esp,0x24
c001314e:	c3                   	ret    
c001314f:	90                   	nop

c0013150 <CPU::cpuidCheckECX(unsigned int)>:
c0013150:	83 ec 10             	sub    esp,0x10
c0013153:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013157:	50                   	push   eax
c0013158:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001315c:	50                   	push   eax
c001315d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013161:	50                   	push   eax
c0013162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013166:	50                   	push   eax
c0013167:	6a 01                	push   0x1
c0013169:	e8 30 ff ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001316e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013172:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013176:	0f 95 c0             	setne  al
c0013179:	83 c4 24             	add    esp,0x24
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001317e:	83 ec 10             	sub    esp,0x10
c0013181:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013185:	50                   	push   eax
c0013186:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001318a:	50                   	push   eax
c001318b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001318f:	50                   	push   eax
c0013190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013194:	50                   	push   eax
c0013195:	6a 07                	push   0x7
c0013197:	e8 02 ff ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001319c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131a0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00131a4:	0f 95 c0             	setne  al
c00131a7:	83 c4 24             	add    esp,0x24
c00131aa:	c3                   	ret    
c00131ab:	90                   	nop

c00131ac <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00131ac:	83 ec 10             	sub    esp,0x10
c00131af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131b3:	50                   	push   eax
c00131b4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131b8:	50                   	push   eax
c00131b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131bd:	50                   	push   eax
c00131be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00131c2:	50                   	push   eax
c00131c3:	6a 07                	push   0x7
c00131c5:	e8 d4 fe ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00131ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00131ce:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00131d2:	0f 95 c0             	setne  al
c00131d5:	83 c4 24             	add    esp,0x24
c00131d8:	c3                   	ret    
c00131d9:	90                   	nop

c00131da <CPU::CPU()>:
c00131da:	83 ec 0c             	sub    esp,0xc
c00131dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e1:	83 ec 08             	sub    esp,0x8
c00131e4:	68 bd 59 02 c0       	push   0xc00259bd
c00131e9:	50                   	push   eax
c00131ea:	e8 0f b1 ff ff       	call   c000e2fe <Device::Device(char const*)>
c00131ef:	83 c4 10             	add    esp,0x10
c00131f2:	ba 20 5c 02 c0       	mov    edx,0xc0025c20
c00131f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fb:	89 10                	mov    DWORD PTR [eax],edx
c00131fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013201:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001320b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320f:	05 78 01 00 00       	add    eax,0x178
c0013214:	83 ec 0c             	sub    esp,0xc
c0013217:	50                   	push   eax
c0013218:	e8 3d 60 ff ff       	call   c000925a <GDT::GDT()>
c001321d:	83 c4 10             	add    esp,0x10
c0013220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013224:	05 7c 09 00 00       	add    eax,0x97c
c0013229:	83 ec 0c             	sub    esp,0xc
c001322c:	50                   	push   eax
c001322d:	e8 7e 62 ff ff       	call   c00094b0 <IDT::IDT()>
c0013232:	83 c4 10             	add    esp,0x10
c0013235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013239:	05 7c 11 00 00       	add    eax,0x117c
c001323e:	83 ec 0c             	sub    esp,0xc
c0013241:	50                   	push   eax
c0013242:	e8 89 80 ff ff       	call   c000b2d0 <TSS::TSS()>
c0013247:	83 c4 10             	add    esp,0x10
c001324a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013259:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013263:	90                   	nop
c0013264:	83 c4 0c             	add    esp,0xc
c0013267:	c3                   	ret    

c0013268 <CPU::displayFeatures()>:
c0013268:	c3                   	ret    
c0013269:	90                   	nop

c001326a <CPU::detectFeatures()>:
c001326a:	55                   	push   ebp
c001326b:	57                   	push   edi
c001326c:	56                   	push   esi
c001326d:	53                   	push   ebx
c001326e:	83 ec 50             	sub    esp,0x50
c0013271:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013275:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001327f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013286:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001328c:	6a 0d                	push   0xd
c001328e:	6a 00                	push   0x0
c0013290:	55                   	push   ebp
c0013291:	e8 ee d3 fe ff       	call   c0000684 <memset>
c0013296:	83 c4 10             	add    esp,0x10
c0013299:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001329e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00132a5:	0f 84 22 09 00 00    	je     c0013bcd <CPU::detectFeatures()+0x963>
c00132ab:	83 ec 0c             	sub    esp,0xc
c00132ae:	89 ef                	mov    edi,ebp
c00132b0:	6a 10                	push   0x10
c00132b2:	e8 6b fe ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c00132b7:	83 e0 01             	and    eax,0x1
c00132ba:	8d 14 00             	lea    edx,[eax+eax*1]
c00132bd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00132c3:	83 e0 fd             	and    eax,0xfffffffd
c00132c6:	09 d0                	or     eax,edx
c00132c8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00132ce:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00132d5:	e8 48 fe ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c00132da:	83 e0 01             	and    eax,0x1
c00132dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00132e4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00132ea:	83 e0 fb             	and    eax,0xfffffffb
c00132ed:	09 d0                	or     eax,edx
c00132ef:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00132f5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00132fc:	e8 21 fe ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0013301:	83 e0 01             	and    eax,0x1
c0013304:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001330b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013311:	83 e0 f7             	and    eax,0xfffffff7
c0013314:	09 d0                	or     eax,edx
c0013316:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001331c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013323:	e8 fa fd ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0013328:	83 e0 01             	and    eax,0x1
c001332b:	c1 e0 04             	shl    eax,0x4
c001332e:	88 c2                	mov    dl,al
c0013330:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013336:	83 e0 ef             	and    eax,0xffffffef
c0013339:	09 d0                	or     eax,edx
c001333b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013341:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013348:	e8 d5 fd ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c001334d:	83 e0 01             	and    eax,0x1
c0013350:	c1 e0 05             	shl    eax,0x5
c0013353:	88 c2                	mov    dl,al
c0013355:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001335b:	83 e0 df             	and    eax,0xffffffdf
c001335e:	09 d0                	or     eax,edx
c0013360:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013366:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001336d:	e8 b0 fd ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0013372:	83 e0 01             	and    eax,0x1
c0013375:	8d 14 00             	lea    edx,[eax+eax*1]
c0013378:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001337e:	83 e0 fd             	and    eax,0xfffffffd
c0013381:	09 d0                	or     eax,edx
c0013383:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013389:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013390:	e8 8d fd ff ff       	call   c0013122 <CPU::cpuidCheckEDX(unsigned int)>
c0013395:	83 e0 01             	and    eax,0x1
c0013398:	c1 e0 06             	shl    eax,0x6
c001339b:	88 c2                	mov    dl,al
c001339d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00133a3:	83 e0 bf             	and    eax,0xffffffbf
c00133a6:	09 d0                	or     eax,edx
c00133a8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00133ae:	58                   	pop    eax
c00133af:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133b3:	50                   	push   eax
c00133b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133b8:	50                   	push   eax
c00133b9:	8d 74 24 28          	lea    esi,[esp+0x28]
c00133bd:	56                   	push   esi
c00133be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133c2:	50                   	push   eax
c00133c3:	6a 00                	push   0x0
c00133c5:	e8 d4 fc ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133ca:	b8 04 00 00 00       	mov    eax,0x4
c00133cf:	89 c1                	mov    ecx,eax
c00133d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133d3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c00133d9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00133dd:	89 c1                	mov    ecx,eax
c00133df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133e1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00133e7:	8d 74 24 38          	lea    esi,[esp+0x38]
c00133eb:	89 c1                	mov    ecx,eax
c00133ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00133ef:	83 c4 18             	add    esp,0x18
c00133f2:	68 68 58 02 c0       	push   0xc0025868
c00133f7:	55                   	push   ebp
c00133f8:	e8 cf d3 fe ff       	call   c00007cc <strcmp>
c00133fd:	83 c4 10             	add    esp,0x10
c0013400:	85 c0                	test   eax,eax
c0013402:	75 0f                	jne    c0013413 <CPU::detectFeatures()+0x1a9>
c0013404:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001340e:	e9 22 02 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013413:	50                   	push   eax
c0013414:	50                   	push   eax
c0013415:	68 75 58 02 c0       	push   0xc0025875
c001341a:	55                   	push   ebp
c001341b:	e8 ac d3 fe ff       	call   c00007cc <strcmp>
c0013420:	83 c4 10             	add    esp,0x10
c0013423:	85 c0                	test   eax,eax
c0013425:	74 dd                	je     c0013404 <CPU::detectFeatures()+0x19a>
c0013427:	50                   	push   eax
c0013428:	50                   	push   eax
c0013429:	68 82 58 02 c0       	push   0xc0025882
c001342e:	55                   	push   ebp
c001342f:	e8 98 d3 fe ff       	call   c00007cc <strcmp>
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	85 c0                	test   eax,eax
c0013439:	74 2a                	je     c0013465 <CPU::detectFeatures()+0x1fb>
c001343b:	50                   	push   eax
c001343c:	50                   	push   eax
c001343d:	68 8f 58 02 c0       	push   0xc002588f
c0013442:	55                   	push   ebp
c0013443:	e8 84 d3 fe ff       	call   c00007cc <strcmp>
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	85 c0                	test   eax,eax
c001344d:	74 16                	je     c0013465 <CPU::detectFeatures()+0x1fb>
c001344f:	50                   	push   eax
c0013450:	50                   	push   eax
c0013451:	68 9c 58 02 c0       	push   0xc002589c
c0013456:	55                   	push   ebp
c0013457:	e8 70 d3 fe ff       	call   c00007cc <strcmp>
c001345c:	83 c4 10             	add    esp,0x10
c001345f:	85 c0                	test   eax,eax
c0013461:	74 48                	je     c00134ab <CPU::detectFeatures()+0x241>
c0013463:	eb 0f                	jmp    c0013474 <CPU::detectFeatures()+0x20a>
c0013465:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001346f:	e9 c1 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013474:	50                   	push   eax
c0013475:	50                   	push   eax
c0013476:	68 a9 58 02 c0       	push   0xc00258a9
c001347b:	55                   	push   ebp
c001347c:	e8 4b d3 fe ff       	call   c00007cc <strcmp>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	85 c0                	test   eax,eax
c0013486:	74 23                	je     c00134ab <CPU::detectFeatures()+0x241>
c0013488:	57                   	push   edi
c0013489:	57                   	push   edi
c001348a:	68 b6 58 02 c0       	push   0xc00258b6
c001348f:	55                   	push   ebp
c0013490:	e8 37 d3 fe ff       	call   c00007cc <strcmp>
c0013495:	83 c4 10             	add    esp,0x10
c0013498:	85 c0                	test   eax,eax
c001349a:	75 1e                	jne    c00134ba <CPU::detectFeatures()+0x250>
c001349c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00134a6:	e9 8a 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00134ab:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00134b5:	e9 7b 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00134ba:	56                   	push   esi
c00134bb:	56                   	push   esi
c00134bc:	68 c3 58 02 c0       	push   0xc00258c3
c00134c1:	55                   	push   ebp
c00134c2:	e8 05 d3 fe ff       	call   c00007cc <strcmp>
c00134c7:	83 c4 10             	add    esp,0x10
c00134ca:	85 c0                	test   eax,eax
c00134cc:	75 0f                	jne    c00134dd <CPU::detectFeatures()+0x273>
c00134ce:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00134d8:	e9 58 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00134dd:	51                   	push   ecx
c00134de:	51                   	push   ecx
c00134df:	68 82 58 02 c0       	push   0xc0025882
c00134e4:	55                   	push   ebp
c00134e5:	e8 e2 d2 fe ff       	call   c00007cc <strcmp>
c00134ea:	83 c4 10             	add    esp,0x10
c00134ed:	85 c0                	test   eax,eax
c00134ef:	75 0f                	jne    c0013500 <CPU::detectFeatures()+0x296>
c00134f1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00134fb:	e9 35 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013500:	52                   	push   edx
c0013501:	52                   	push   edx
c0013502:	68 d0 58 02 c0       	push   0xc00258d0
c0013507:	55                   	push   ebp
c0013508:	e8 bf d2 fe ff       	call   c00007cc <strcmp>
c001350d:	83 c4 10             	add    esp,0x10
c0013510:	85 c0                	test   eax,eax
c0013512:	75 0f                	jne    c0013523 <CPU::detectFeatures()+0x2b9>
c0013514:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001351e:	e9 12 01 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013523:	50                   	push   eax
c0013524:	50                   	push   eax
c0013525:	68 dd 58 02 c0       	push   0xc00258dd
c001352a:	55                   	push   ebp
c001352b:	e8 9c d2 fe ff       	call   c00007cc <strcmp>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	85 c0                	test   eax,eax
c0013535:	75 0f                	jne    c0013546 <CPU::detectFeatures()+0x2dc>
c0013537:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013541:	e9 ef 00 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013546:	50                   	push   eax
c0013547:	50                   	push   eax
c0013548:	68 ea 58 02 c0       	push   0xc00258ea
c001354d:	55                   	push   ebp
c001354e:	e8 79 d2 fe ff       	call   c00007cc <strcmp>
c0013553:	83 c4 10             	add    esp,0x10
c0013556:	85 c0                	test   eax,eax
c0013558:	75 0f                	jne    c0013569 <CPU::detectFeatures()+0x2ff>
c001355a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013564:	e9 cc 00 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c0013569:	50                   	push   eax
c001356a:	50                   	push   eax
c001356b:	68 f7 58 02 c0       	push   0xc00258f7
c0013570:	55                   	push   ebp
c0013571:	e8 56 d2 fe ff       	call   c00007cc <strcmp>
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	85 c0                	test   eax,eax
c001357b:	75 0f                	jne    c001358c <CPU::detectFeatures()+0x322>
c001357d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013587:	e9 a9 00 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c001358c:	50                   	push   eax
c001358d:	50                   	push   eax
c001358e:	68 04 59 02 c0       	push   0xc0025904
c0013593:	55                   	push   ebp
c0013594:	e8 33 d2 fe ff       	call   c00007cc <strcmp>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	85 c0                	test   eax,eax
c001359e:	75 0f                	jne    c00135af <CPU::detectFeatures()+0x345>
c00135a0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00135aa:	e9 86 00 00 00       	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00135af:	50                   	push   eax
c00135b0:	50                   	push   eax
c00135b1:	68 11 59 02 c0       	push   0xc0025911
c00135b6:	55                   	push   ebp
c00135b7:	e8 10 d2 fe ff       	call   c00007cc <strcmp>
c00135bc:	83 c4 10             	add    esp,0x10
c00135bf:	85 c0                	test   eax,eax
c00135c1:	75 0c                	jne    c00135cf <CPU::detectFeatures()+0x365>
c00135c3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00135cd:	eb 66                	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00135cf:	50                   	push   eax
c00135d0:	50                   	push   eax
c00135d1:	68 1e 59 02 c0       	push   0xc002591e
c00135d6:	55                   	push   ebp
c00135d7:	e8 f0 d1 fe ff       	call   c00007cc <strcmp>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	85 c0                	test   eax,eax
c00135e1:	75 0c                	jne    c00135ef <CPU::detectFeatures()+0x385>
c00135e3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00135ed:	eb 46                	jmp    c0013635 <CPU::detectFeatures()+0x3cb>
c00135ef:	57                   	push   edi
c00135f0:	57                   	push   edi
c00135f1:	68 2b 59 02 c0       	push   0xc002592b
c00135f6:	55                   	push   ebp
c00135f7:	e8 d0 d1 fe ff       	call   c00007cc <strcmp>
c00135fc:	83 c4 10             	add    esp,0x10
c00135ff:	85 c0                	test   eax,eax
c0013601:	74 e0                	je     c00135e3 <CPU::detectFeatures()+0x379>
c0013603:	56                   	push   esi
c0013604:	56                   	push   esi
c0013605:	68 38 59 02 c0       	push   0xc0025938
c001360a:	55                   	push   ebp
c001360b:	e8 bc d1 fe ff       	call   c00007cc <strcmp>
c0013610:	83 c4 10             	add    esp,0x10
c0013613:	85 c0                	test   eax,eax
c0013615:	74 cc                	je     c00135e3 <CPU::detectFeatures()+0x379>
c0013617:	51                   	push   ecx
c0013618:	51                   	push   ecx
c0013619:	68 45 59 02 c0       	push   0xc0025945
c001361e:	55                   	push   ebp
c001361f:	e8 a8 d1 fe ff       	call   c00007cc <strcmp>
c0013624:	83 c4 10             	add    esp,0x10
c0013627:	85 c0                	test   eax,eax
c0013629:	74 b8                	je     c00135e3 <CPU::detectFeatures()+0x379>
c001362b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013635:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001363a:	0f 86 be 00 00 00    	jbe    c00136fe <CPU::detectFeatures()+0x494>
c0013640:	83 ec 0c             	sub    esp,0xc
c0013643:	68 80 00 00 00       	push   0x80
c0013648:	e8 31 fb ff ff       	call   c001317e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001364d:	83 e0 01             	and    eax,0x1
c0013650:	c1 e0 06             	shl    eax,0x6
c0013653:	88 c2                	mov    dl,al
c0013655:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001365b:	83 e0 bf             	and    eax,0xffffffbf
c001365e:	09 d0                	or     eax,edx
c0013660:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013666:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001366d:	e8 0c fb ff ff       	call   c001317e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013672:	83 e0 01             	and    eax,0x1
c0013675:	c1 e0 04             	shl    eax,0x4
c0013678:	88 c2                	mov    dl,al
c001367a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013680:	83 e0 ef             	and    eax,0xffffffef
c0013683:	09 d0                	or     eax,edx
c0013685:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001368b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013692:	e8 e7 fa ff ff       	call   c001317e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013697:	c1 e0 07             	shl    eax,0x7
c001369a:	88 c2                	mov    dl,al
c001369c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00136a2:	83 e0 7f             	and    eax,0x7f
c00136a5:	09 d0                	or     eax,edx
c00136a7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00136ad:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00136b4:	e8 f3 fa ff ff       	call   c00131ac <CPU::cpuidCheckExtendedECX(unsigned int)>
c00136b9:	83 e0 01             	and    eax,0x1
c00136bc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00136c3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00136c9:	83 e0 f7             	and    eax,0xfffffff7
c00136cc:	09 d0                	or     eax,edx
c00136ce:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00136d4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00136db:	e8 cc fa ff ff       	call   c00131ac <CPU::cpuidCheckExtendedECX(unsigned int)>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	83 e0 01             	and    eax,0x1
c00136e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00136ed:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00136f3:	83 e0 fb             	and    eax,0xfffffffb
c00136f6:	09 d0                	or     eax,edx
c00136f8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00136fe:	83 ec 0c             	sub    esp,0xc
c0013701:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013705:	50                   	push   eax
c0013706:	8d 44 24 28          	lea    eax,[esp+0x28]
c001370a:	50                   	push   eax
c001370b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001370f:	56                   	push   esi
c0013710:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013714:	50                   	push   eax
c0013715:	6a 01                	push   0x1
c0013717:	e8 82 f9 ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001371c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013720:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013726:	88 ca                	mov    dl,cl
c0013728:	83 e0 f0             	and    eax,0xfffffff0
c001372b:	83 e2 0f             	and    edx,0xf
c001372e:	09 d0                	or     eax,edx
c0013730:	88 ca                	mov    dl,cl
c0013732:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0013738:	c0 ea 04             	shr    dl,0x4
c001373b:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001373f:	0f b6 c2             	movzx  eax,dl
c0013742:	83 c4 20             	add    esp,0x20
c0013745:	c1 e0 06             	shl    eax,0x6
c0013748:	89 c7                	mov    edi,eax
c001374a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013750:	66 25 3f c0          	and    ax,0xc03f
c0013754:	09 f8                	or     eax,edi
c0013756:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001375d:	89 c8                	mov    eax,ecx
c001375f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013766:	c1 e8 08             	shr    eax,0x8
c0013769:	83 e5 3f             	and    ebp,0x3f
c001376c:	83 e0 0f             	and    eax,0xf
c001376f:	89 c7                	mov    edi,eax
c0013771:	c1 e7 06             	shl    edi,0x6
c0013774:	09 ef                	or     edi,ebp
c0013776:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001377d:	89 fa                	mov    edx,edi
c001377f:	83 e5 c0             	and    ebp,0xffffffc0
c0013782:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013788:	88 c2                	mov    dl,al
c001378a:	c0 ea 02             	shr    dl,0x2
c001378d:	89 d7                	mov    edi,edx
c001378f:	09 ef                	or     edi,ebp
c0013791:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013797:	89 fa                	mov    edx,edi
c0013799:	83 e5 cf             	and    ebp,0xffffffcf
c001379c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00137a2:	89 cf                	mov    edi,ecx
c00137a4:	c1 ef 0c             	shr    edi,0xc
c00137a7:	83 e7 03             	and    edi,0x3
c00137aa:	c1 e7 04             	shl    edi,0x4
c00137ad:	09 ef                	or     edi,ebp
c00137af:	3c 06                	cmp    al,0x6
c00137b1:	89 fa                	mov    edx,edi
c00137b3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00137b9:	74 04                	je     c00137bf <CPU::detectFeatures()+0x555>
c00137bb:	3c 0f                	cmp    al,0xf
c00137bd:	75 5c                	jne    c001381b <CPU::detectFeatures()+0x5b1>
c00137bf:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00137c3:	89 cf                	mov    edi,ecx
c00137c5:	c1 ef 10             	shr    edi,0x10
c00137c8:	c1 e7 04             	shl    edi,0x4
c00137cb:	09 fa                	or     edx,edi
c00137cd:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00137d3:	0f b6 d2             	movzx  edx,dl
c00137d6:	66 81 e7 3f c0       	and    di,0xc03f
c00137db:	c1 e2 06             	shl    edx,0x6
c00137de:	09 fa                	or     edx,edi
c00137e0:	3c 0f                	cmp    al,0xf
c00137e2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00137e9:	75 30                	jne    c001381b <CPU::detectFeatures()+0x5b1>
c00137eb:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00137f1:	c1 e9 14             	shr    ecx,0x14
c00137f4:	83 e0 3f             	and    eax,0x3f
c00137f7:	83 c1 0f             	add    ecx,0xf
c00137fa:	88 ca                	mov    dl,cl
c00137fc:	c0 e9 02             	shr    cl,0x2
c00137ff:	c1 e2 06             	shl    edx,0x6
c0013802:	09 d0                	or     eax,edx
c0013804:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001380a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013810:	83 e0 c0             	and    eax,0xffffffc0
c0013813:	09 c1                	or     ecx,eax
c0013815:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001381b:	83 ec 0c             	sub    esp,0xc
c001381e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013825:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013829:	50                   	push   eax
c001382a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001382e:	55                   	push   ebp
c001382f:	56                   	push   esi
c0013830:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0013834:	57                   	push   edi
c0013835:	68 00 00 00 80       	push   0x80000000
c001383a:	e8 5f f8 ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001383f:	83 c4 20             	add    esp,0x20
c0013842:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001384a:	76 22                	jbe    c001386e <CPU::detectFeatures()+0x604>
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013853:	50                   	push   eax
c0013854:	55                   	push   ebp
c0013855:	56                   	push   esi
c0013856:	57                   	push   edi
c0013857:	68 01 00 00 80       	push   0x80000001
c001385c:	e8 3d f8 ff ff       	call   c001309e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013861:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001386b:	83 c4 20             	add    esp,0x20
c001386e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013874:	83 f8 01             	cmp    eax,0x1
c0013877:	75 6f                	jne    c00138e8 <CPU::detectFeatures()+0x67e>
c0013879:	51                   	push   ecx
c001387a:	51                   	push   ecx
c001387b:	68 51 59 02 c0       	push   0xc0025951
c0013880:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013884:	56                   	push   esi
c0013885:	e8 b6 ce fe ff       	call   c0000740 <strcpy>
c001388a:	5f                   	pop    edi
c001388b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013891:	5d                   	pop    ebp
c0013892:	66 c1 e8 06          	shr    ax,0x6
c0013896:	0f b6 c0             	movzx  eax,al
c0013899:	50                   	push   eax
c001389a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138a0:	c1 e8 0e             	shr    eax,0xe
c00138a3:	0f b6 c0             	movzx  eax,al
c00138a6:	50                   	push   eax
c00138a7:	e8 9c f4 ff ff       	call   c0012d48 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00138ac:	5a                   	pop    edx
c00138ad:	59                   	pop    ecx
c00138ae:	50                   	push   eax
c00138af:	56                   	push   esi
c00138b0:	e8 cb cf fe ff       	call   c0000880 <strcat>
c00138b5:	5f                   	pop    edi
c00138b6:	5d                   	pop    ebp
c00138b7:	56                   	push   esi
c00138b8:	53                   	push   ebx
c00138b9:	e8 32 aa ff ff       	call   c000e2f0 <Device::setName(char const*)>
c00138be:	58                   	pop    eax
c00138bf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00138c5:	5a                   	pop    edx
c00138c6:	68 58 59 02 c0       	push   0xc0025958
c00138cb:	50                   	push   eax
c00138cc:	e8 fb ce fe ff       	call   c00007cc <strcmp>
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	85 c0                	test   eax,eax
c00138d6:	0f 85 71 03 00 00    	jne    c0013c4d <CPU::detectFeatures()+0x9e3>
c00138dc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00138e3:	e9 65 03 00 00       	jmp    c0013c4d <CPU::detectFeatures()+0x9e3>
c00138e8:	83 f8 02             	cmp    eax,0x2
c00138eb:	0f 85 b5 00 00 00    	jne    c00139a6 <CPU::detectFeatures()+0x73c>
c00138f1:	57                   	push   edi
c00138f2:	57                   	push   edi
c00138f3:	68 6a 59 02 c0       	push   0xc002596a
c00138f8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00138fc:	56                   	push   esi
c00138fd:	e8 3e ce fe ff       	call   c0000740 <strcpy>
c0013902:	5d                   	pop    ebp
c0013903:	58                   	pop    eax
c0013904:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001390a:	66 c1 e8 06          	shr    ax,0x6
c001390e:	0f b6 c0             	movzx  eax,al
c0013911:	50                   	push   eax
c0013912:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013918:	c1 e8 0e             	shr    eax,0xe
c001391b:	0f b6 c0             	movzx  eax,al
c001391e:	50                   	push   eax
c001391f:	e8 90 f2 ff ff       	call   c0012bb4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013924:	5a                   	pop    edx
c0013925:	59                   	pop    ecx
c0013926:	50                   	push   eax
c0013927:	56                   	push   esi
c0013928:	e8 53 cf fe ff       	call   c0000880 <strcat>
c001392d:	5f                   	pop    edi
c001392e:	5d                   	pop    ebp
c001392f:	56                   	push   esi
c0013930:	53                   	push   ebx
c0013931:	e8 ba a9 ff ff       	call   c000e2f0 <Device::setName(char const*)>
c0013936:	58                   	pop    eax
c0013937:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001393d:	5a                   	pop    edx
c001393e:	68 6f 59 02 c0       	push   0xc002596f
c0013943:	50                   	push   eax
c0013944:	e8 83 ce fe ff       	call   c00007cc <strcmp>
c0013949:	83 c4 10             	add    esp,0x10
c001394c:	85 c0                	test   eax,eax
c001394e:	75 20                	jne    c0013970 <CPU::detectFeatures()+0x706>
c0013950:	8b 15 88 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028188
c0013956:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001395c:	a8 01                	test   al,0x1
c001395e:	74 10                	je     c0013970 <CPU::detectFeatures()+0x706>
c0013960:	83 e0 fe             	and    eax,0xfffffffe
c0013963:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013969:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013970:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013976:	c1 e8 0e             	shr    eax,0xe
c0013979:	3c 05                	cmp    al,0x5
c001397b:	0f 85 cc 02 00 00    	jne    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013981:	56                   	push   esi
c0013982:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013988:	83 e0 0f             	and    eax,0xf
c001398b:	50                   	push   eax
c001398c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013992:	66 c1 e8 06          	shr    ax,0x6
c0013996:	0f b6 c0             	movzx  eax,al
c0013999:	50                   	push   eax
c001399a:	6a 05                	push   0x5
c001399c:	e8 89 f6 ff ff       	call   c001302a <CPU::AMD_K6_writeback(int, int, int)>
c00139a1:	e9 1f 02 00 00       	jmp    c0013bc5 <CPU::detectFeatures()+0x95b>
c00139a6:	8d 50 fd             	lea    edx,[eax-0x3]
c00139a9:	83 fa 01             	cmp    edx,0x1
c00139ac:	76 09                	jbe    c00139b7 <CPU::detectFeatures()+0x74d>
c00139ae:	83 f8 06             	cmp    eax,0x6
c00139b1:	0f 85 91 01 00 00    	jne    c0013b48 <CPU::detectFeatures()+0x8de>
c00139b7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00139bd:	c1 ea 0e             	shr    edx,0xe
c00139c0:	80 fa 05             	cmp    dl,0x5
c00139c3:	75 7b                	jne    c0013a40 <CPU::detectFeatures()+0x7d6>
c00139c5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00139cb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00139d0:	66 81 fa 00 01       	cmp    dx,0x100
c00139d5:	75 0c                	jne    c00139e3 <CPU::detectFeatures()+0x779>
c00139d7:	51                   	push   ecx
c00139d8:	51                   	push   ecx
c00139d9:	68 76 59 02 c0       	push   0xc0025976
c00139de:	e9 dc 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c00139e3:	66 81 fa 00 02       	cmp    dx,0x200
c00139e8:	75 0c                	jne    c00139f6 <CPU::detectFeatures()+0x78c>
c00139ea:	52                   	push   edx
c00139eb:	52                   	push   edx
c00139ec:	68 89 59 02 c0       	push   0xc0025989
c00139f1:	e9 c9 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c00139f6:	66 81 fa 40 02       	cmp    dx,0x240
c00139fb:	75 0c                	jne    c0013a09 <CPU::detectFeatures()+0x79f>
c00139fd:	50                   	push   eax
c00139fe:	50                   	push   eax
c00139ff:	68 9b 59 02 c0       	push   0xc002599b
c0013a04:	e9 b6 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a09:	83 f8 06             	cmp    eax,0x6
c0013a0c:	75 0c                	jne    c0013a1a <CPU::detectFeatures()+0x7b0>
c0013a0e:	50                   	push   eax
c0013a0f:	50                   	push   eax
c0013a10:	68 ad 59 02 c0       	push   0xc00259ad
c0013a15:	e9 a5 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a1a:	83 f8 04             	cmp    eax,0x4
c0013a1d:	75 0c                	jne    c0013a2b <CPU::detectFeatures()+0x7c1>
c0013a1f:	50                   	push   eax
c0013a20:	50                   	push   eax
c0013a21:	68 b9 59 02 c0       	push   0xc00259b9
c0013a26:	e9 94 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a2b:	83 f8 03             	cmp    eax,0x3
c0013a2e:	0f 85 19 02 00 00    	jne    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013a34:	50                   	push   eax
c0013a35:	50                   	push   eax
c0013a36:	68 c1 59 02 c0       	push   0xc00259c1
c0013a3b:	e9 7f 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a40:	80 fa 06             	cmp    dl,0x6
c0013a43:	0f 85 db 00 00 00    	jne    c0013b24 <CPU::detectFeatures()+0x8ba>
c0013a49:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013a4f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013a54:	66 81 fa 80 01       	cmp    dx,0x180
c0013a59:	75 0c                	jne    c0013a67 <CPU::detectFeatures()+0x7fd>
c0013a5b:	50                   	push   eax
c0013a5c:	50                   	push   eax
c0013a5d:	68 cc 59 02 c0       	push   0xc00259cc
c0013a62:	e9 58 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a67:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013a6d:	66 f7 c1 80 ff       	test   cx,0xff80
c0013a72:	75 0c                	jne    c0013a80 <CPU::detectFeatures()+0x816>
c0013a74:	50                   	push   eax
c0013a75:	50                   	push   eax
c0013a76:	68 dc 59 02 c0       	push   0xc00259dc
c0013a7b:	e9 3f 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a80:	66 81 fa 40 02       	cmp    dx,0x240
c0013a85:	75 0c                	jne    c0013a93 <CPU::detectFeatures()+0x829>
c0013a87:	55                   	push   ebp
c0013a88:	55                   	push   ebp
c0013a89:	68 e3 59 02 c0       	push   0xc00259e3
c0013a8e:	e9 2c 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013a93:	66 81 fa 80 02       	cmp    dx,0x280
c0013a98:	75 0c                	jne    c0013aa6 <CPU::detectFeatures()+0x83c>
c0013a9a:	57                   	push   edi
c0013a9b:	57                   	push   edi
c0013a9c:	68 ec 59 02 c0       	push   0xc00259ec
c0013aa1:	e9 19 01 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013aa6:	66 81 fa 40 03       	cmp    dx,0x340
c0013aab:	74 ed                	je     c0013a9a <CPU::detectFeatures()+0x830>
c0013aad:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013ab2:	75 0c                	jne    c0013ac0 <CPU::detectFeatures()+0x856>
c0013ab4:	56                   	push   esi
c0013ab5:	56                   	push   esi
c0013ab6:	68 f3 59 02 c0       	push   0xc00259f3
c0013abb:	e9 ff 00 00 00       	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013ac0:	83 f8 06             	cmp    eax,0x6
c0013ac3:	0f 84 45 ff ff ff    	je     c0013a0e <CPU::detectFeatures()+0x7a4>
c0013ac9:	83 f8 04             	cmp    eax,0x4
c0013acc:	0f 84 4d ff ff ff    	je     c0013a1f <CPU::detectFeatures()+0x7b5>
c0013ad2:	83 f8 03             	cmp    eax,0x3
c0013ad5:	0f 85 72 01 00 00    	jne    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013adb:	51                   	push   ecx
c0013adc:	51                   	push   ecx
c0013add:	68 fc 59 02 c0       	push   0xc00259fc
c0013ae2:	53                   	push   ebx
c0013ae3:	e8 08 a8 ff ff       	call   c000e2f0 <Device::setName(char const*)>
c0013ae8:	b1 c1                	mov    cl,0xc1
c0013aea:	88 c8                	mov    al,cl
c0013aec:	e6 22                	out    0x22,al
c0013aee:	e4 23                	in     al,0x23
c0013af0:	88 c2                	mov    dl,al
c0013af2:	88 c8                	mov    al,cl
c0013af4:	e6 22                	out    0x22,al
c0013af6:	88 d0                	mov    al,dl
c0013af8:	83 c8 10             	or     eax,0x10
c0013afb:	e6 23                	out    0x23,al
c0013afd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013b04:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013b07:	89 d0                	mov    eax,edx
c0013b09:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013b0f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013b13:	40                   	inc    eax
c0013b14:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013b1a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013b1f:	e9 a1 00 00 00       	jmp    c0013bc5 <CPU::detectFeatures()+0x95b>
c0013b24:	83 f8 06             	cmp    eax,0x6
c0013b27:	0f 84 e1 fe ff ff    	je     c0013a0e <CPU::detectFeatures()+0x7a4>
c0013b2d:	83 f8 04             	cmp    eax,0x4
c0013b30:	0f 84 e9 fe ff ff    	je     c0013a1f <CPU::detectFeatures()+0x7b5>
c0013b36:	83 f8 03             	cmp    eax,0x3
c0013b39:	0f 85 0e 01 00 00    	jne    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013b3f:	52                   	push   edx
c0013b40:	52                   	push   edx
c0013b41:	68 07 5a 02 c0       	push   0xc0025a07
c0013b46:	eb 77                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b48:	83 f8 07             	cmp    eax,0x7
c0013b4b:	75 09                	jne    c0013b56 <CPU::detectFeatures()+0x8ec>
c0013b4d:	50                   	push   eax
c0013b4e:	50                   	push   eax
c0013b4f:	68 11 5a 02 c0       	push   0xc0025a11
c0013b54:	eb 69                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b56:	83 f8 0a             	cmp    eax,0xa
c0013b59:	75 09                	jne    c0013b64 <CPU::detectFeatures()+0x8fa>
c0013b5b:	50                   	push   eax
c0013b5c:	50                   	push   eax
c0013b5d:	68 1c 5a 02 c0       	push   0xc0025a1c
c0013b62:	eb 5b                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b64:	83 f8 0b             	cmp    eax,0xb
c0013b67:	75 09                	jne    c0013b72 <CPU::detectFeatures()+0x908>
c0013b69:	50                   	push   eax
c0013b6a:	50                   	push   eax
c0013b6b:	68 24 5a 02 c0       	push   0xc0025a24
c0013b70:	eb 4d                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b72:	83 f8 08             	cmp    eax,0x8
c0013b75:	75 09                	jne    c0013b80 <CPU::detectFeatures()+0x916>
c0013b77:	50                   	push   eax
c0013b78:	50                   	push   eax
c0013b79:	68 2d 5a 02 c0       	push   0xc0025a2d
c0013b7e:	eb 3f                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b80:	83 f8 09             	cmp    eax,0x9
c0013b83:	75 09                	jne    c0013b8e <CPU::detectFeatures()+0x924>
c0013b85:	50                   	push   eax
c0013b86:	50                   	push   eax
c0013b87:	68 35 5a 02 c0       	push   0xc0025a35
c0013b8c:	eb 31                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b8e:	83 f8 05             	cmp    eax,0x5
c0013b91:	75 09                	jne    c0013b9c <CPU::detectFeatures()+0x932>
c0013b93:	50                   	push   eax
c0013b94:	50                   	push   eax
c0013b95:	68 3d 5a 02 c0       	push   0xc0025a3d
c0013b9a:	eb 23                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013b9c:	83 f8 0c             	cmp    eax,0xc
c0013b9f:	75 09                	jne    c0013baa <CPU::detectFeatures()+0x940>
c0013ba1:	55                   	push   ebp
c0013ba2:	55                   	push   ebp
c0013ba3:	68 4b 5a 02 c0       	push   0xc0025a4b
c0013ba8:	eb 15                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013baa:	83 f8 0d             	cmp    eax,0xd
c0013bad:	75 09                	jne    c0013bb8 <CPU::detectFeatures()+0x94e>
c0013baf:	57                   	push   edi
c0013bb0:	57                   	push   edi
c0013bb1:	68 56 5a 02 c0       	push   0xc0025a56
c0013bb6:	eb 07                	jmp    c0013bbf <CPU::detectFeatures()+0x955>
c0013bb8:	56                   	push   esi
c0013bb9:	56                   	push   esi
c0013bba:	68 6a 5a 02 c0       	push   0xc0025a6a
c0013bbf:	53                   	push   ebx
c0013bc0:	e8 2b a7 ff ff       	call   c000e2f0 <Device::setName(char const*)>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	e9 80 00 00 00       	jmp    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013bcd:	51                   	push   ecx
c0013bce:	51                   	push   ecx
c0013bcf:	68 b6 58 02 c0       	push   0xc00258b6
c0013bd4:	55                   	push   ebp
c0013bd5:	e8 66 cb fe ff       	call   c0000740 <strcpy>
c0013bda:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013be4:	e8 fa c5 fe ff       	call   c00001e3 <is486>
c0013be9:	83 c4 10             	add    esp,0x10
c0013bec:	85 c0                	test   eax,eax
c0013bee:	74 2b                	je     c0013c1b <CPU::detectFeatures()+0x9b1>
c0013bf0:	52                   	push   edx
c0013bf1:	52                   	push   edx
c0013bf2:	68 76 5a 02 c0       	push   0xc0025a76
c0013bf7:	53                   	push   ebx
c0013bf8:	e8 f3 a6 ff ff       	call   c000e2f0 <Device::setName(char const*)>
c0013bfd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013c04:	0f 20 c0             	mov    eax,cr0
c0013c07:	83 e0 14             	and    eax,0x14
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	83 f8 04             	cmp    eax,0x4
c0013c10:	75 1f                	jne    c0013c31 <CPU::detectFeatures()+0x9c7>
c0013c12:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013c19:	eb 32                	jmp    c0013c4d <CPU::detectFeatures()+0x9e3>
c0013c1b:	50                   	push   eax
c0013c1c:	50                   	push   eax
c0013c1d:	68 81 5a 02 c0       	push   0xc0025a81
c0013c22:	53                   	push   ebx
c0013c23:	e8 c8 a6 ff ff       	call   c000e2f0 <Device::setName(char const*)>
c0013c28:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013c2f:	eb d3                	jmp    c0013c04 <CPU::detectFeatures()+0x99a>
c0013c31:	e8 88 c5 fe ff       	call   c00001be <hasLegacyFPU>
c0013c36:	83 e0 01             	and    eax,0x1
c0013c39:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c3c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013c42:	83 e0 fd             	and    eax,0xfffffffd
c0013c45:	09 d0                	or     eax,edx
c0013c47:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013c4d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013c54:	83 c4 4c             	add    esp,0x4c
c0013c57:	5b                   	pop    ebx
c0013c58:	5e                   	pop    esi
c0013c59:	5f                   	pop    edi
c0013c5a:	5d                   	pop    ebp
c0013c5b:	c3                   	ret    

c0013c5c <CPU::setupSMEP()>:
c0013c5c:	0f 20 e0             	mov    eax,cr4
c0013c5f:	0d 00 00 10 00       	or     eax,0x100000
c0013c64:	0f 22 e0             	mov    cr4,eax
c0013c67:	c3                   	ret    

c0013c68 <CPU::setupUMIP()>:
c0013c68:	0f 20 e0             	mov    eax,cr4
c0013c6b:	80 cc 08             	or     ah,0x8
c0013c6e:	0f 22 e0             	mov    cr4,eax
c0013c71:	c3                   	ret    

c0013c72 <CPU::setupTSC()>:
c0013c72:	0f 20 e0             	mov    eax,cr4
c0013c75:	83 c8 04             	or     eax,0x4
c0013c78:	0f 22 e0             	mov    cr4,eax
c0013c7b:	c3                   	ret    

c0013c7c <CPU::setupLargePages()>:
c0013c7c:	0f 20 e0             	mov    eax,cr4
c0013c7f:	83 c8 10             	or     eax,0x10
c0013c82:	0f 22 e0             	mov    cr4,eax
c0013c85:	c3                   	ret    

c0013c86 <CPU::setupPAT()>:
c0013c86:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0013c8b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013c92:	74 2c                	je     c0013cc0 <CPU::setupPAT()+0x3a>
c0013c94:	53                   	push   ebx
c0013c95:	83 ec 10             	sub    esp,0x10
c0013c98:	68 77 02 00 00       	push   0x277
c0013c9d:	50                   	push   eax
c0013c9e:	e8 81 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013ca3:	83 e2 f8             	and    edx,0xfffffff8
c0013ca6:	83 ca 01             	or     edx,0x1
c0013ca9:	52                   	push   edx
c0013caa:	50                   	push   eax
c0013cab:	68 77 02 00 00       	push   0x277
c0013cb0:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c0013cb6:	e8 95 52 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013cbb:	83 c4 28             	add    esp,0x28
c0013cbe:	5b                   	pop    ebx
c0013cbf:	c3                   	ret    
c0013cc0:	c3                   	ret    
c0013cc1:	90                   	nop

c0013cc2 <CPU::setupMTRR()>:
c0013cc2:	c3                   	ret    
c0013cc3:	90                   	nop

c0013cc4 <CPU::setupGlobalPages()>:
c0013cc4:	0f 20 e0             	mov    eax,cr4
c0013cc7:	0c 80                	or     al,0x80
c0013cc9:	0f 22 e0             	mov    cr4,eax
c0013ccc:	c3                   	ret    
c0013ccd:	90                   	nop

c0013cce <CPU::allowUsermodeDataAccess()>:
c0013cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cd2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013cd9:	74 03                	je     c0013cde <CPU::allowUsermodeDataAccess()+0x10>
c0013cdb:	0f 01 cb             	stac   
c0013cde:	c3                   	ret    
c0013cdf:	90                   	nop

c0013ce0 <CPU::prohibitUsermodeDataAccess()>:
c0013ce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ce4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013ceb:	74 03                	je     c0013cf0 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013ced:	0f 01 ca             	clac   
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <CPU::setupSMAP()>:
c0013cf2:	0f 20 e0             	mov    eax,cr4
c0013cf5:	0d 00 00 20 00       	or     eax,0x200000
c0013cfa:	0f 22 e0             	mov    cr4,eax
c0013cfd:	eb e1                	jmp    c0013ce0 <CPU::prohibitUsermodeDataAccess()>
c0013cff:	90                   	nop

c0013d00 <CPU::setupFeatures()>:
c0013d00:	53                   	push   ebx
c0013d01:	83 ec 08             	sub    esp,0x8
c0013d04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d08:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013d0f:	74 18                	je     c0013d29 <CPU::setupFeatures()+0x29>
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	68 8c 5a 02 c0       	push   0xc0025a8c
c0013d19:	e8 95 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d21:	e8 42 ff ff ff       	call   c0013c68 <CPU::setupUMIP()>
c0013d26:	83 c4 10             	add    esp,0x10
c0013d29:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013d30:	74 18                	je     c0013d4a <CPU::setupFeatures()+0x4a>
c0013d32:	83 ec 0c             	sub    esp,0xc
c0013d35:	68 96 5a 02 c0       	push   0xc0025a96
c0013d3a:	e8 74 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d3f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d42:	e8 2b ff ff ff       	call   c0013c72 <CPU::setupTSC()>
c0013d47:	83 c4 10             	add    esp,0x10
c0013d4a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013d51:	74 18                	je     c0013d6b <CPU::setupFeatures()+0x6b>
c0013d53:	83 ec 0c             	sub    esp,0xc
c0013d56:	68 9f 5a 02 c0       	push   0xc0025a9f
c0013d5b:	e8 53 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d63:	e8 14 ff ff ff       	call   c0013c7c <CPU::setupLargePages()>
c0013d68:	83 c4 10             	add    esp,0x10
c0013d6b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013d72:	74 18                	je     c0013d8c <CPU::setupFeatures()+0x8c>
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	68 a8 5a 02 c0       	push   0xc0025aa8
c0013d7c:	e8 32 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013d81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d84:	e8 3b ff ff ff       	call   c0013cc4 <CPU::setupGlobalPages()>
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013d93:	74 18                	je     c0013dad <CPU::setupFeatures()+0xad>
c0013d95:	83 ec 0c             	sub    esp,0xc
c0013d98:	68 ba 5a 02 c0       	push   0xc0025aba
c0013d9d:	e8 11 8f ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013da2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013da5:	e8 dc fe ff ff       	call   c0013c86 <CPU::setupPAT()>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013db4:	74 11                	je     c0013dc7 <CPU::setupFeatures()+0xc7>
c0013db6:	c7 44 24 10 c3 5a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025ac3
c0013dbe:	83 c4 08             	add    esp,0x8
c0013dc1:	5b                   	pop    ebx
c0013dc2:	e9 ec 8e ff ff       	jmp    c000ccb3 <Dbg::kprintf(char const*, ...)>
c0013dc7:	83 c4 08             	add    esp,0x8
c0013dca:	5b                   	pop    ebx
c0013dcb:	c3                   	ret    

c0013dcc <CPU::open(int, int, void*)>:
c0013dcc:	57                   	push   edi
c0013dcd:	56                   	push   esi
c0013dce:	53                   	push   ebx
c0013dcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dd7:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013ddd:	83 ec 0c             	sub    esp,0xc
c0013de0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013de6:	68 cd 5a 02 c0       	push   0xc0025acd
c0013deb:	e8 2d 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013df0:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013df6:	89 04 24             	mov    DWORD PTR [esp],eax
c0013df9:	e8 be 54 ff ff       	call   c00092bc <GDT::setup()>
c0013dfe:	c7 04 24 df 5a 02 c0 	mov    DWORD PTR [esp],0xc0025adf
c0013e05:	e8 13 5c ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e0a:	83 c4 0c             	add    esp,0xc
c0013e0d:	6a 00                	push   0x0
c0013e0f:	68 ef be ad de       	push   0xdeadbeef
c0013e14:	57                   	push   edi
c0013e15:	e8 fa 74 ff ff       	call   c000b314 <TSS::setup(unsigned long, unsigned long)>
c0013e1a:	c7 04 24 f1 5a 02 c0 	mov    DWORD PTR [esp],0xc0025af1
c0013e21:	e8 f7 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013e29:	e8 c6 74 ff ff       	call   c000b2f4 <TSS::flush()>
c0013e2e:	c7 04 24 05 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b05
c0013e35:	e8 e3 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e3a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e43:	e8 de 56 ff ff       	call   c0009526 <IDT::setup()>
c0013e48:	c7 04 24 17 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b17
c0013e4f:	e8 c9 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e54:	b8 00 04 00 00       	mov    eax,0x400
c0013e59:	0f 23 f8             	mov    db7,eax
c0013e5c:	c7 04 24 35 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b35
c0013e63:	e8 b5 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e68:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013e72:	e8 03 62 ff ff       	call   c000a07a <Phys::allocatePage()>
c0013e77:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013e7d:	89 30                	mov    DWORD PTR [eax],esi
c0013e7f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0013e85:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013e88:	c7 04 24 57 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b57
c0013e8f:	e8 89 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013e94:	58                   	pop    eax
c0013e95:	5a                   	pop    edx
c0013e96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013e9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ea0:	e8 69 84 ff ff       	call   c000c30e <VAS::setCPUSpecific(unsigned long)>
c0013ea5:	c7 04 24 7f 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b7f
c0013eac:	e8 6c 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eb4:	e8 b1 f3 ff ff       	call   c001326a <CPU::detectFeatures()>
c0013eb9:	c7 04 24 a2 5b 02 c0 	mov    DWORD PTR [esp],0xc0025ba2
c0013ec0:	e8 58 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013ec5:	e8 34 b6 ff ff       	call   c000f4fe <setupInterruptController()>
c0013eca:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013ed0:	c7 04 24 c6 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bc6
c0013ed7:	e8 41 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013edc:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c0013ee1:	83 e0 10             	and    eax,0x10
c0013ee4:	83 f8 01             	cmp    eax,0x1
c0013ee7:	19 c0                	sbb    eax,eax
c0013ee9:	83 e0 46             	and    eax,0x46
c0013eec:	83 c0 1e             	add    eax,0x1e
c0013eef:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ef2:	e8 f1 cb ff ff       	call   c0010ae8 <setupTimer(int)>
c0013ef7:	83 c4 10             	add    esp,0x10
c0013efa:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013f00:	f6 05 a0 81 02 c0 20 	test   BYTE PTR ds:0xc00281a0,0x20
c0013f07:	74 18                	je     c0013f21 <CPU::open(int, int, void*)+0x155>
c0013f09:	83 ec 0c             	sub    esp,0xc
c0013f0c:	68 e1 5b 02 c0       	push   0xc0025be1
c0013f11:	e8 07 5b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f19:	e8 e2 fd ff ff       	call   c0013d00 <CPU::setupFeatures()>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	83 ec 0c             	sub    esp,0xc
c0013f24:	68 fc 5b 02 c0       	push   0xc0025bfc
c0013f29:	e8 ef 5a ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	31 c0                	xor    eax,eax
c0013f33:	5b                   	pop    ebx
c0013f34:	5e                   	pop    esi
c0013f35:	5f                   	pop    edi
c0013f36:	c3                   	ret    
c0013f37:	90                   	nop

c0013f38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013f38:	57                   	push   edi
c0013f39:	56                   	push   esi
c0013f3a:	53                   	push   ebx
c0013f3b:	51                   	push   ecx
c0013f3c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f40:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013f43:	0f 02 c0             	lar    eax,ax
c0013f46:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013f49:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013f4d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013f50:	88 ca                	mov    dl,cl
c0013f52:	c0 ea 06             	shr    dl,0x6
c0013f55:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013f59:	89 ca                	mov    edx,ecx
c0013f5b:	66 c1 ea 03          	shr    dx,0x3
c0013f5f:	83 e2 07             	and    edx,0x7
c0013f62:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013f67:	88 17                	mov    BYTE PTR [edi],dl
c0013f69:	0f 84 a6 01 00 00    	je     c0014115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013f6f:	83 e1 07             	and    ecx,0x7
c0013f72:	80 f9 04             	cmp    cl,0x4
c0013f75:	0f 84 98 00 00 00    	je     c0014013 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013f7b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013f80:	0f 95 c0             	setne  al
c0013f83:	80 f9 05             	cmp    cl,0x5
c0013f86:	0f 95 c2             	setne  dl
c0013f89:	08 c2                	or     dl,al
c0013f8b:	74 79                	je     c0014006 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013f8d:	84 c9                	test   cl,cl
c0013f8f:	75 05                	jne    c0013f96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013f91:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013f94:	eb 3c                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013f96:	80 f9 01             	cmp    cl,0x1
c0013f99:	75 05                	jne    c0013fa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013f9b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013f9e:	eb 32                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fa0:	80 f9 02             	cmp    cl,0x2
c0013fa3:	75 05                	jne    c0013faa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013fa5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013fa8:	eb 28                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013faa:	31 c0                	xor    eax,eax
c0013fac:	80 f9 03             	cmp    cl,0x3
c0013faf:	75 05                	jne    c0013fb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013fb1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013fb4:	eb 1c                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fb6:	80 f9 05             	cmp    cl,0x5
c0013fb9:	75 05                	jne    c0013fc0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013fbb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013fbe:	eb 12                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fc0:	80 f9 06             	cmp    cl,0x6
c0013fc3:	75 05                	jne    c0013fca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013fc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013fc8:	eb 08                	jmp    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fca:	80 f9 07             	cmp    cl,0x7
c0013fcd:	75 03                	jne    c0013fd2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013fcf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013fd2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013fd7:	75 10                	jne    c0013fe9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013fd9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013fdd:	b9 03 00 00 00       	mov    ecx,0x3
c0013fe2:	01 d0                	add    eax,edx
c0013fe4:	e9 37 01 00 00       	jmp    c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013fe9:	b9 02 00 00 00       	mov    ecx,0x2
c0013fee:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013ff3:	0f 85 27 01 00 00    	jne    c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013ff9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013ffc:	b9 06 00 00 00       	mov    ecx,0x6
c0014001:	e9 1a 01 00 00       	jmp    c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014006:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0014009:	b9 06 00 00 00       	mov    ecx,0x6
c001400e:	e9 0f 01 00 00       	jmp    c0014122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014013:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014016:	88 ca                	mov    dl,cl
c0014018:	c0 ea 06             	shr    dl,0x6
c001401b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001401f:	89 ca                	mov    edx,ecx
c0014021:	66 c1 ea 03          	shr    dx,0x3
c0014025:	83 e2 07             	and    edx,0x7
c0014028:	80 e1 07             	and    cl,0x7
c001402b:	75 05                	jne    c0014032 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001402d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014030:	eb 4c                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014032:	80 f9 01             	cmp    cl,0x1
c0014035:	75 05                	jne    c001403c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014037:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001403a:	eb 42                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001403c:	80 f9 02             	cmp    cl,0x2
c001403f:	75 05                	jne    c0014046 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014041:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014044:	eb 38                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014046:	80 f9 03             	cmp    cl,0x3
c0014049:	75 05                	jne    c0014050 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001404b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001404e:	eb 2e                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014050:	80 f9 04             	cmp    cl,0x4
c0014053:	75 12                	jne    c0014067 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014055:	f6 c4 60             	test   ah,0x60
c0014058:	75 08                	jne    c0014062 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001405a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001405d:	8d 78 14             	lea    edi,[eax+0x14]
c0014060:	eb 1c                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014062:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014065:	eb 17                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014067:	80 f9 05             	cmp    cl,0x5
c001406a:	75 05                	jne    c0014071 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001406c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001406f:	eb 0d                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014071:	80 f9 06             	cmp    cl,0x6
c0014074:	75 05                	jne    c001407b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014076:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014079:	eb 03                	jmp    c001407e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001407b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001407e:	84 d2                	test   dl,dl
c0014080:	75 05                	jne    c0014087 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014082:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014085:	eb 3c                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014087:	80 fa 01             	cmp    dl,0x1
c001408a:	75 05                	jne    c0014091 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001408c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001408f:	eb 32                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014091:	80 fa 02             	cmp    dl,0x2
c0014094:	75 05                	jne    c001409b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0014096:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014099:	eb 28                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001409b:	80 fa 03             	cmp    dl,0x3
c001409e:	75 05                	jne    c00140a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00140a0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00140a3:	eb 1e                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140a5:	31 c0                	xor    eax,eax
c00140a7:	80 fa 04             	cmp    dl,0x4
c00140aa:	74 17                	je     c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140ac:	80 fa 05             	cmp    dl,0x5
c00140af:	75 05                	jne    c00140b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00140b1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00140b4:	eb 0d                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140b6:	80 fa 06             	cmp    dl,0x6
c00140b9:	75 05                	jne    c00140c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00140bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140be:	eb 03                	jmp    c00140c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00140c0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00140c3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00140c8:	0f 94 c2             	sete   dl
c00140cb:	80 f9 05             	cmp    cl,0x5
c00140ce:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00140d2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00140d7:	d3 e0                	shl    eax,cl
c00140d9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00140dd:	74 0a                	je     c00140e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00140df:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00140e2:	b9 07 00 00 00       	mov    ecx,0x7
c00140e7:	eb 37                	jmp    c0014120 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00140e9:	01 f8                	add    eax,edi
c00140eb:	b9 03 00 00 00       	mov    ecx,0x3
c00140f0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00140f5:	74 2b                	je     c0014122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00140f7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00140fc:	75 0d                	jne    c001410b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00140fe:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014102:	01 c8                	add    eax,ecx
c0014104:	b9 04 00 00 00       	mov    ecx,0x4
c0014109:	eb 17                	jmp    c0014122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001410b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001410e:	b9 07 00 00 00       	mov    ecx,0x7
c0014113:	eb 0d                	jmp    c0014122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014115:	b9 02 00 00 00       	mov    ecx,0x2
c001411a:	b2 01                	mov    dl,0x1
c001411c:	31 c0                	xor    eax,eax
c001411e:	eb 02                	jmp    c0014122 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014120:	31 d2                	xor    edx,edx
c0014122:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014126:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014128:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001412c:	88 11                	mov    BYTE PTR [ecx],dl
c001412e:	5a                   	pop    edx
c001412f:	5b                   	pop    ebx
c0014130:	5e                   	pop    esi
c0014131:	5f                   	pop    edi
c0014132:	c3                   	ret    

c0014133 <Krnl::smpEntry()>:
c0014133:	eb fe                	jmp    c0014133 <Krnl::smpEntry()>

c0014135 <Krnl::startCPU(int)>:
c0014135:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001413a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014141:	0f 84 36 01 00 00    	je     c001427d <Krnl::startCPU(int)+0x148>
c0014147:	53                   	push   ebx
c0014148:	83 ec 10             	sub    esp,0x10
c001414b:	fa                   	cli    
c001414c:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0014152:	6a 1b                	push   0x1b
c0014154:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c001415a:	e8 c5 4d ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001415f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014164:	89 c3                	mov    ebx,eax
c0014166:	58                   	pop    eax
c0014167:	5a                   	pop    edx
c0014168:	53                   	push   ebx
c0014169:	68 44 5c 02 c0       	push   0xc0025c44
c001416e:	e8 40 8b ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0014173:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001417d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014181:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001418b:	c1 e0 18             	shl    eax,0x18
c001418e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001419d:	09 c2                	or     edx,eax
c001419f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00141a5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00141ab:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00141b1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00141b7:	80 cd c5             	or     ch,0xc5
c00141ba:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00141c0:	f3 90                	pause  
c00141c2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00141c4:	0f ba e1 0c          	bt     ecx,0xc
c00141c8:	72 f6                	jb     c00141c0 <Krnl::startCPU(int)+0x8b>
c00141ca:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00141d0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00141d6:	09 c1                	or     ecx,eax
c00141d8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00141de:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00141e4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00141ea:	80 cd 85             	or     ch,0x85
c00141ed:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00141f3:	f3 90                	pause  
c00141f5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00141f7:	0f ba e1 0c          	bt     ecx,0xc
c00141fb:	72 f6                	jb     c00141f3 <Krnl::startCPU(int)+0xbe>
c00141fd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014207:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001420d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014213:	09 c1                	or     ecx,eax
c0014215:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001421b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014221:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014227:	81 c9 02 06 00 00    	or     ecx,0x602
c001422d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014233:	f3 90                	pause  
c0014235:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014237:	0f ba e1 0c          	bt     ecx,0xc
c001423b:	72 f6                	jb     c0014233 <Krnl::startCPU(int)+0xfe>
c001423d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014247:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001424d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014253:	09 c8                	or     eax,ecx
c0014255:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001425b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014261:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014266:	0d 02 06 00 00       	or     eax,0x602
c001426b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014271:	f3 90                	pause  
c0014273:	8b 02                	mov    eax,DWORD PTR [edx]
c0014275:	0f ba e0 0c          	bt     eax,0xc
c0014279:	72 f6                	jb     c0014271 <Krnl::startCPU(int)+0x13c>
c001427b:	eb fe                	jmp    c001427b <Krnl::startCPU(int)+0x146>
c001427d:	c3                   	ret    

c001427e <Krnl::startCPUs()>:
c001427e:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0014283:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014289:	88 c2                	mov    dl,al
c001428b:	83 e2 0a             	and    edx,0xa
c001428e:	80 fa 0a             	cmp    dl,0xa
c0014291:	75 09                	jne    c001429c <Krnl::startCPUs()+0x1e>
c0014293:	a8 01                	test   al,0x1
c0014295:	74 05                	je     c001429c <Krnl::startCPUs()+0x1e>
c0014297:	e9 ff be fe ff       	jmp    c000019b <prepareTramp>
c001429c:	c3                   	ret    
c001429d:	90                   	nop

c001429e <EnvVarContainer::getEnv(char const*)>:
c001429e:	57                   	push   edi
c001429f:	56                   	push   esi
c00142a0:	53                   	push   ebx
c00142a1:	31 db                	xor    ebx,ebx
c00142a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142a7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00142a9:	7e 2b                	jle    c00142d6 <EnvVarContainer::getEnv(char const*)+0x38>
c00142ab:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00142b2:	50                   	push   eax
c00142b3:	50                   	push   eax
c00142b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142b7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00142ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142be:	e8 09 c5 fe ff       	call   c00007cc <strcmp>
c00142c3:	83 c4 10             	add    esp,0x10
c00142c6:	85 c0                	test   eax,eax
c00142c8:	75 09                	jne    c00142d3 <EnvVarContainer::getEnv(char const*)+0x35>
c00142ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00142cd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00142d1:	eb 05                	jmp    c00142d8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00142d3:	43                   	inc    ebx
c00142d4:	eb d1                	jmp    c00142a7 <EnvVarContainer::getEnv(char const*)+0x9>
c00142d6:	31 c0                	xor    eax,eax
c00142d8:	5b                   	pop    ebx
c00142d9:	5e                   	pop    esi
c00142da:	5f                   	pop    edi
c00142db:	c3                   	ret    

c00142dc <EnvVarContainer::setEnv(char const*, char const*)>:
c00142dc:	55                   	push   ebp
c00142dd:	57                   	push   edi
c00142de:	56                   	push   esi
c00142df:	53                   	push   ebx
c00142e0:	83 ec 28             	sub    esp,0x28
c00142e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00142e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00142eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00142ef:	56                   	push   esi
c00142f0:	e8 ab c3 fe ff       	call   c00006a0 <strlen>
c00142f5:	40                   	inc    eax
c00142f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f9:	e8 c5 56 ff ff       	call   c00099c3 <malloc>
c00142fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014301:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014305:	e8 96 c3 fe ff       	call   c00006a0 <strlen>
c001430a:	40                   	inc    eax
c001430b:	89 04 24             	mov    DWORD PTR [esp],eax
c001430e:	e8 b0 56 ff ff       	call   c00099c3 <malloc>
c0014313:	89 34 24             	mov    DWORD PTR [esp],esi
c0014316:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001431a:	e8 81 c3 fe ff       	call   c00006a0 <strlen>
c001431f:	83 c4 0c             	add    esp,0xc
c0014322:	40                   	inc    eax
c0014323:	50                   	push   eax
c0014324:	6a 00                	push   0x0
c0014326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001432a:	e8 55 c3 fe ff       	call   c0000684 <memset>
c001432f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014332:	e8 69 c3 fe ff       	call   c00006a0 <strlen>
c0014337:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001433b:	8d 48 01             	lea    ecx,[eax+0x1]
c001433e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014343:	89 de                	mov    esi,ebx
c0014345:	e8 56 c3 fe ff       	call   c00006a0 <strlen>
c001434a:	83 c4 0c             	add    esp,0xc
c001434d:	40                   	inc    eax
c001434e:	50                   	push   eax
c001434f:	6a 00                	push   0x0
c0014351:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014355:	e8 2a c3 fe ff       	call   c0000684 <memset>
c001435a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001435d:	e8 3e c3 fe ff       	call   c00006a0 <strlen>
c0014362:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014366:	8d 48 01             	lea    ecx,[eax+0x1]
c0014369:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001436b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001436e:	40                   	inc    eax
c001436f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014372:	c1 e0 03             	shl    eax,0x3
c0014375:	5a                   	pop    edx
c0014376:	59                   	pop    ecx
c0014377:	50                   	push   eax
c0014378:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001437b:	e8 2f 56 ff ff       	call   c00099af <realloc>
c0014380:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014384:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014387:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001438a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001438e:	b9 08 00 00 00       	mov    ecx,0x8
c0014393:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014395:	83 c4 2c             	add    esp,0x2c
c0014398:	5b                   	pop    ebx
c0014399:	5e                   	pop    esi
c001439a:	5f                   	pop    edi
c001439b:	5d                   	pop    ebp
c001439c:	c3                   	ret    
c001439d:	90                   	nop

c001439e <EnvVarContainer::deleteEnv(char const*)>:
c001439e:	c3                   	ret    
c001439f:	90                   	nop

c00143a0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00143a0:	55                   	push   ebp
c00143a1:	57                   	push   edi
c00143a2:	56                   	push   esi
c00143a3:	53                   	push   ebx
c00143a4:	81 ec 38 01 00 00    	sub    esp,0x138
c00143aa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00143b1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00143b8:	68 14 01 00 00       	push   0x114
c00143bd:	e8 01 56 ff ff       	call   c00099c3 <malloc>
c00143c2:	83 c4 0c             	add    esp,0xc
c00143c5:	89 c3                	mov    ebx,eax
c00143c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00143ca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00143d1:	50                   	push   eax
c00143d2:	e8 47 8e ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00143d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143da:	e8 11 91 ff ff       	call   c000d4f0 <File::exists()>
c00143df:	83 c4 10             	add    esp,0x10
c00143e2:	84 c0                	test   al,al
c00143e4:	75 31                	jne    c0014417 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00143e6:	50                   	push   eax
c00143e7:	50                   	push   eax
c00143e8:	6a 12                	push   0x12
c00143ea:	53                   	push   ebx
c00143eb:	e8 92 8e ff ff       	call   c000d282 <File::open(FileOpenMode)>
c00143f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143f2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00143f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00143f8:	e8 a3 c2 fe ff       	call   c00006a0 <strlen>
c00143fd:	5a                   	pop    edx
c00143fe:	31 d2                	xor    edx,edx
c0014400:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014404:	51                   	push   ecx
c0014405:	56                   	push   esi
c0014406:	52                   	push   edx
c0014407:	50                   	push   eax
c0014408:	53                   	push   ebx
c0014409:	ff d7                	call   edi
c001440b:	83 c4 14             	add    esp,0x14
c001440e:	53                   	push   ebx
c001440f:	e8 cc 8e ff ff       	call   c000d2e0 <File::close()>
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	56                   	push   esi
c0014418:	31 f6                	xor    esi,esi
c001441a:	68 00 01 00 00       	push   0x100
c001441f:	6a 00                	push   0x0
c0014421:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014425:	50                   	push   eax
c0014426:	e8 59 c2 fe ff       	call   c0000684 <memset>
c001442b:	5f                   	pop    edi
c001442c:	58                   	pop    eax
c001442d:	6a 01                	push   0x1
c001442f:	53                   	push   ebx
c0014430:	e8 4d 8e ff ff       	call   c000d282 <File::open(FileOpenMode)>
c0014435:	83 c4 10             	add    esp,0x10
c0014438:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014440:	83 ec 0c             	sub    esp,0xc
c0014443:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014445:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014449:	51                   	push   ecx
c001444a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001444e:	52                   	push   edx
c001444f:	6a 00                	push   0x0
c0014451:	6a 01                	push   0x1
c0014453:	53                   	push   ebx
c0014454:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014457:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001445b:	83 c4 20             	add    esp,0x20
c001445e:	3c 0d                	cmp    al,0xd
c0014460:	0f 84 09 01 00 00    	je     c001456f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014466:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001446b:	0f 84 ef 00 00 00    	je     c0014560 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014471:	3c 0a                	cmp    al,0xa
c0014473:	74 13                	je     c0014488 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014475:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001447a:	74 0c                	je     c0014488 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001447c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014482:	0f 8e d8 00 00 00    	jle    c0014560 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	8d 78 01             	lea    edi,[eax+0x1]
c0014492:	57                   	push   edi
c0014493:	e8 2b 55 ff ff       	call   c00099c3 <malloc>
c0014498:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001449c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00144a0:	8d 56 04             	lea    edx,[esi+0x4]
c00144a3:	89 14 24             	mov    DWORD PTR [esp],edx
c00144a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00144aa:	e8 14 55 ff ff       	call   c00099c3 <malloc>
c00144af:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00144b3:	83 c4 0c             	add    esp,0xc
c00144b6:	57                   	push   edi
c00144b7:	6a 00                	push   0x0
c00144b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144bd:	e8 c2 c1 fe ff       	call   c0000684 <memset>
c00144c2:	8d 74 24 30          	lea    esi,[esp+0x30]
c00144c6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144ca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00144ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144d0:	83 c4 0c             	add    esp,0xc
c00144d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00144d7:	52                   	push   edx
c00144d8:	6a 00                	push   0x0
c00144da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00144de:	e8 a1 c1 fe ff       	call   c0000684 <memset>
c00144e3:	8d 74 24 30          	lea    esi,[esp+0x30]
c00144e7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00144eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144ee:	e8 ad c1 fe ff       	call   c00006a0 <strlen>
c00144f3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00144f7:	89 c1                	mov    ecx,eax
c00144f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144fb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144fe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014501:	40                   	inc    eax
c0014502:	83 c4 10             	add    esp,0x10
c0014505:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014508:	85 d2                	test   edx,edx
c001450a:	75 0c                	jne    c0014518 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001450c:	83 ec 0c             	sub    esp,0xc
c001450f:	6a 08                	push   0x8
c0014511:	e8 ad 54 ff ff       	call   c00099c3 <malloc>
c0014516:	eb 0c                	jmp    c0014524 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014518:	c1 e0 03             	shl    eax,0x3
c001451b:	51                   	push   ecx
c001451c:	51                   	push   ecx
c001451d:	50                   	push   eax
c001451e:	52                   	push   edx
c001451f:	e8 8b 54 ff ff       	call   c00099af <realloc>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001452a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001452d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014530:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014534:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014538:	b9 08 00 00 00       	mov    ecx,0x8
c001453d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001453f:	31 f6                	xor    esi,esi
c0014541:	50                   	push   eax
c0014542:	68 00 01 00 00       	push   0x100
c0014547:	6a 00                	push   0x0
c0014549:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001454d:	50                   	push   eax
c001454e:	e8 31 c1 fe ff       	call   c0000684 <memset>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001455e:	eb 0f                	jmp    c001456f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014560:	3c 3d                	cmp    al,0x3d
c0014562:	74 07                	je     c001456b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014564:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014568:	46                   	inc    esi
c0014569:	eb 04                	jmp    c001456f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001456b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001456f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014574:	0f 85 c6 fe ff ff    	jne    c0014440 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001457a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014580:	5b                   	pop    ebx
c0014581:	5e                   	pop    esi
c0014582:	5f                   	pop    edi
c0014583:	5d                   	pop    ebp
c0014584:	c3                   	ret    
c0014585:	90                   	nop

c0014586 <EnvVarContainer::__loadSystem()>:
c0014586:	83 ec 10             	sub    esp,0x10
c0014589:	68 60 7b 02 c0       	push   0xc0027b60
c001458e:	68 55 5c 02 c0       	push   0xc0025c55
c0014593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014597:	e8 04 fe ff ff       	call   c00143a0 <EnvVarContainer::loadFrom(char const*, char const*)>
c001459c:	83 c4 1c             	add    esp,0x1c
c001459f:	c3                   	ret    

c00145a0 <EnvVarContainer::__loadUser()>:
c00145a0:	c3                   	ret    
c00145a1:	90                   	nop

c00145a2 <EnvVarContainer::EnvVarContainer(Process*)>:
c00145a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00145ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00145b4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00145b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145bb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145c2:	90                   	nop
c00145c3:	c3                   	ret    

c00145c4 <EnvVarContainer::~EnvVarContainer()>:
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145ce:	85 c0                	test   eax,eax
c00145d0:	74 1d                	je     c00145ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c00145d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00145d8:	85 c0                	test   eax,eax
c00145da:	74 13                	je     c00145ef <EnvVarContainer::~EnvVarContainer()+0x2b>
c00145dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	50                   	push   eax
c00145e7:	e8 e7 53 ff ff       	call   c00099d3 <free>
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	90                   	nop
c00145f0:	83 c4 0c             	add    esp,0xc
c00145f3:	c3                   	ret    

c00145f4 <Krnl::getEnv(Process*, char const*)>:
c00145f4:	53                   	push   ebx
c00145f5:	83 ec 08             	sub    esp,0x8
c00145f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014600:	39 05 70 96 02 c0    	cmp    DWORD PTR ds:0xc0029670,eax
c0014606:	74 04                	je     c001460c <Krnl::getEnv(Process*, char const*)+0x18>
c0014608:	85 c0                	test   eax,eax
c001460a:	75 0b                	jne    c0014617 <Krnl::getEnv(Process*, char const*)+0x23>
c001460c:	a1 54 8c 02 c0       	mov    eax,ds:0xc0028c54
c0014611:	85 c0                	test   eax,eax
c0014613:	75 19                	jne    c001462e <Krnl::getEnv(Process*, char const*)+0x3a>
c0014615:	eb 27                	jmp    c001463e <Krnl::getEnv(Process*, char const*)+0x4a>
c0014617:	52                   	push   edx
c0014618:	52                   	push   edx
c0014619:	53                   	push   ebx
c001461a:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014620:	e8 79 fc ff ff       	call   c001429e <EnvVarContainer::getEnv(char const*)>
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	85 c0                	test   eax,eax
c001462a:	75 28                	jne    c0014654 <Krnl::getEnv(Process*, char const*)+0x60>
c001462c:	eb de                	jmp    c001460c <Krnl::getEnv(Process*, char const*)+0x18>
c001462e:	52                   	push   edx
c001462f:	52                   	push   edx
c0014630:	53                   	push   ebx
c0014631:	50                   	push   eax
c0014632:	e8 67 fc ff ff       	call   c001429e <EnvVarContainer::getEnv(char const*)>
c0014637:	83 c4 10             	add    esp,0x10
c001463a:	85 c0                	test   eax,eax
c001463c:	75 16                	jne    c0014654 <Krnl::getEnv(Process*, char const*)+0x60>
c001463e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014642:	a1 58 8c 02 c0       	mov    eax,ds:0xc0028c58
c0014647:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001464b:	83 c4 08             	add    esp,0x8
c001464e:	5b                   	pop    ebx
c001464f:	e9 4a fc ff ff       	jmp    c001429e <EnvVarContainer::getEnv(char const*)>
c0014654:	83 c4 08             	add    esp,0x8
c0014657:	5b                   	pop    ebx
c0014658:	c3                   	ret    

c0014659 <Krnl::setEnvSystem(char const*, char const*)>:
c0014659:	83 ec 10             	sub    esp,0x10
c001465c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014664:	ff 35 58 8c 02 c0    	push   DWORD PTR ds:0xc0028c58
c001466a:	e8 6d fc ff ff       	call   c00142dc <EnvVarContainer::setEnv(char const*, char const*)>
c001466f:	83 c4 1c             	add    esp,0x1c
c0014672:	c3                   	ret    

c0014673 <Krnl::setEnvUser(char const*, char const*)>:
c0014673:	a1 54 8c 02 c0       	mov    eax,ds:0xc0028c54
c0014678:	85 c0                	test   eax,eax
c001467a:	74 15                	je     c0014691 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001467c:	83 ec 10             	sub    esp,0x10
c001467f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014683:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014687:	50                   	push   eax
c0014688:	e8 4f fc ff ff       	call   c00142dc <EnvVarContainer::setEnv(char const*, char const*)>
c001468d:	83 c4 1c             	add    esp,0x1c
c0014690:	c3                   	ret    
c0014691:	c3                   	ret    

c0014692 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014696:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001469c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146a0:	e9 37 fc ff ff       	jmp    c00142dc <EnvVarContainer::setEnv(char const*, char const*)>

c00146a5 <Krnl::deleteEnvSystem(char const*)>:
c00146a5:	c3                   	ret    

c00146a6 <Krnl::deleteEnvUser(char const*)>:
c00146a6:	c3                   	ret    

c00146a7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00146a7:	c3                   	ret    

c00146a8 <Krnl::newProcessEnv(Process*)>:
c00146a8:	83 ec 28             	sub    esp,0x28
c00146ab:	6a 0c                	push   0xc
c00146ad:	e8 11 53 ff ff       	call   c00099c3 <malloc>
c00146b2:	5a                   	pop    edx
c00146b3:	59                   	pop    ecx
c00146b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00146b8:	50                   	push   eax
c00146b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146bd:	e8 e0 fe ff ff       	call   c00145a2 <EnvVarContainer::EnvVarContainer(Process*)>
c00146c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146c6:	83 c4 2c             	add    esp,0x2c
c00146c9:	c3                   	ret    

c00146ca <Krnl::copyProcessEnv(Process*, Process*)>:
c00146ca:	57                   	push   edi
c00146cb:	56                   	push   esi
c00146cc:	53                   	push   ebx
c00146cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d1:	83 ec 0c             	sub    esp,0xc
c00146d4:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00146da:	6a 0c                	push   0xc
c00146dc:	e8 e2 52 ff ff       	call   c00099c3 <malloc>
c00146e1:	89 c3                	mov    ebx,eax
c00146e3:	58                   	pop    eax
c00146e4:	5a                   	pop    edx
c00146e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146e9:	53                   	push   ebx
c00146ea:	e8 b3 fe ff ff       	call   c00145a2 <EnvVarContainer::EnvVarContainer(Process*)>
c00146ef:	8b 07                	mov    eax,DWORD PTR [edi]
c00146f1:	89 03                	mov    DWORD PTR [ebx],eax
c00146f3:	c1 e0 03             	shl    eax,0x3
c00146f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00146f9:	e8 c5 52 ff ff       	call   c00099c3 <malloc>
c00146fe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014701:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014703:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014706:	c1 e1 03             	shl    ecx,0x3
c0014709:	89 c7                	mov    edi,eax
c001470b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	89 d8                	mov    eax,ebx
c0014712:	5b                   	pop    ebx
c0014713:	5e                   	pop    esi
c0014714:	5f                   	pop    edi
c0014715:	c3                   	ret    

c0014716 <Krnl::loadSystemEnv()>:
c0014716:	53                   	push   ebx
c0014717:	83 ec 14             	sub    esp,0x14
c001471a:	6a 0c                	push   0xc
c001471c:	e8 a2 52 ff ff       	call   c00099c3 <malloc>
c0014721:	89 c3                	mov    ebx,eax
c0014723:	58                   	pop    eax
c0014724:	5a                   	pop    edx
c0014725:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c001472b:	53                   	push   ebx
c001472c:	e8 71 fe ff ff       	call   c00145a2 <EnvVarContainer::EnvVarContainer(Process*)>
c0014731:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014734:	89 1d 58 8c 02 c0    	mov    DWORD PTR ds:0xc0028c58,ebx
c001473a:	e8 47 fe ff ff       	call   c0014586 <EnvVarContainer::__loadSystem()>
c001473f:	83 c4 18             	add    esp,0x18
c0014742:	5b                   	pop    ebx
c0014743:	c3                   	ret    

c0014744 <Krnl::loadUserEnv()>:
c0014744:	53                   	push   ebx
c0014745:	83 ec 14             	sub    esp,0x14
c0014748:	6a 0c                	push   0xc
c001474a:	e8 74 52 ff ff       	call   c00099c3 <malloc>
c001474f:	89 c3                	mov    ebx,eax
c0014751:	58                   	pop    eax
c0014752:	5a                   	pop    edx
c0014753:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0014759:	53                   	push   ebx
c001475a:	e8 43 fe ff ff       	call   c00145a2 <EnvVarContainer::EnvVarContainer(Process*)>
c001475f:	89 1d 54 8c 02 c0    	mov    DWORD PTR ds:0xc0028c54,ebx
c0014765:	83 c4 18             	add    esp,0x18
c0014768:	5b                   	pop    ebx
c0014769:	c3                   	ret    

c001476a <Krnl::flushEnv()>:
c001476a:	c3                   	ret    

c001476b <Krnl::getProcessTotalEnvCount(Process*)>:
c001476b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001476f:	8b 15 54 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c54
c0014775:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001477b:	a1 58 8c 02 c0       	mov    eax,ds:0xc0028c58
c0014780:	8b 00                	mov    eax,DWORD PTR [eax]
c0014782:	03 01                	add    eax,DWORD PTR [ecx]
c0014784:	85 d2                	test   edx,edx
c0014786:	74 02                	je     c001478a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014788:	03 02                	add    eax,DWORD PTR [edx]
c001478a:	c3                   	ret    

c001478b <Krnl::getProcessEnvPair(Process*, int)>:
c001478b:	57                   	push   edi
c001478c:	56                   	push   esi
c001478d:	8b 35 54 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c54
c0014793:	53                   	push   ebx
c0014794:	85 f6                	test   esi,esi
c0014796:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001479a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001479e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00147a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00147a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00147aa:	75 16                	jne    c00147c2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00147ac:	39 c2                	cmp    edx,eax
c00147ae:	7c 16                	jl     c00147c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00147b0:	8b 0d 58 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028c58
c00147b6:	8b 31                	mov    esi,DWORD PTR [ecx]
c00147b8:	01 c6                	add    esi,eax
c00147ba:	39 d6                	cmp    esi,edx
c00147bc:	7e 3c                	jle    c00147fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00147be:	29 c2                	sub    edx,eax
c00147c0:	eb 04                	jmp    c00147c6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00147c2:	39 c2                	cmp    edx,eax
c00147c4:	7d 05                	jge    c00147cb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00147c6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00147c9:	eb 20                	jmp    c00147eb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00147cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00147cd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00147d0:	39 d1                	cmp    ecx,edx
c00147d2:	7e 04                	jle    c00147d8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00147d4:	29 c2                	sub    edx,eax
c00147d6:	eb 10                	jmp    c00147e8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00147d8:	8b 35 58 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028c58
c00147de:	03 0e                	add    ecx,DWORD PTR [esi]
c00147e0:	39 d1                	cmp    ecx,edx
c00147e2:	7e 16                	jle    c00147fa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00147e4:	29 c2                	sub    edx,eax
c00147e6:	29 fa                	sub    edx,edi
c00147e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00147eb:	8d 14 d0             	lea    edx,[eax+edx*8]
c00147ee:	8b 02                	mov    eax,DWORD PTR [edx]
c00147f0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00147f3:	89 03                	mov    DWORD PTR [ebx],eax
c00147f5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00147f8:	eb 1d                	jmp    c0014817 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00147fa:	83 ec 0c             	sub    esp,0xc
c00147fd:	68 77 5c 02 c0       	push   0xc0025c77
c0014802:	e8 18 00 00 00       	call   c001481f <Krnl::panic(char const*)>
c0014807:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001480d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	89 d8                	mov    eax,ebx
c0014819:	5b                   	pop    ebx
c001481a:	5e                   	pop    esi
c001481b:	5f                   	pop    edi
c001481c:	c2 04 00             	ret    0x4

c001481f <Krnl::panic(char const*)>:
c001481f:	55                   	push   ebp
c0014820:	89 e5                	mov    ebp,esp
c0014822:	53                   	push   ebx
c0014823:	83 ec 10             	sub    esp,0x10
c0014826:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0014829:	fa                   	cli    
c001482a:	c6 05 64 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c64,0x1
c0014831:	53                   	push   ebx
c0014832:	e8 e6 51 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014837:	58                   	pop    eax
c0014838:	c6 05 60 75 02 c0 00 	mov    BYTE PTR ds:0xc0027560,0x0
c001483f:	5a                   	pop    edx
c0014840:	53                   	push   ebx
c0014841:	68 91 5c 02 c0       	push   0xc0025c91
c0014846:	e8 68 84 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001484b:	59                   	pop    ecx
c001484c:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014851:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014857:	e8 61 62 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c001485c:	83 c4 0c             	add    esp,0xc
c001485f:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014864:	6a 01                	push   0x1
c0014866:	6a 0f                	push   0xf
c0014868:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001486e:	e8 a9 60 ff ff       	call   c000a91c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014873:	58                   	pop    eax
c0014874:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014879:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001487f:	e8 ba 65 ff ff       	call   c000ae3e <VgaText::clearScreen()>
c0014884:	58                   	pop    eax
c0014885:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c001488a:	5a                   	pop    edx
c001488b:	68 aa 5c 02 c0       	push   0xc0025caa
c0014890:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014896:	e8 2f 67 ff ff       	call   c000afca <VgaText::puts(char const*)>
c001489b:	59                   	pop    ecx
c001489c:	58                   	pop    eax
c001489d:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00148a2:	68 50 5d 02 c0       	push   0xc0025d50
c00148a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148ad:	e8 18 67 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148b2:	58                   	pop    eax
c00148b3:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00148b8:	5a                   	pop    edx
c00148b9:	68 c6 5c 02 c0       	push   0xc0025cc6
c00148be:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148c4:	e8 01 67 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148c9:	59                   	pop    ecx
c00148ca:	58                   	pop    eax
c00148cb:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00148d0:	53                   	push   ebx
c00148d1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148d7:	e8 ee 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148dc:	58                   	pop    eax
c00148dd:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00148e2:	5a                   	pop    edx
c00148e3:	68 e6 5c 02 c0       	push   0xc0025ce6
c00148e8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00148ee:	e8 d7 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00148f3:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c00148f8:	83 c4 10             	add    esp,0x10
c00148fb:	85 c0                	test   eax,eax
c00148fd:	74 02                	je     c0014901 <Krnl::panic(char const*)+0xe2>
c00148ff:	ff d0                	call   eax
c0014901:	83 ec 0c             	sub    esp,0xc
c0014904:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014907:	e8 ad 30 00 00       	call   c00179b9 <Thr::getDriverNameFromAddress(unsigned long)>
c001490c:	83 c4 10             	add    esp,0x10
c001490f:	89 c3                	mov    ebx,eax
c0014911:	85 c0                	test   eax,eax
c0014913:	0f 84 4e 02 00 00    	je     c0014b67 <Krnl::panic(char const*)+0x348>
c0014919:	83 ec 08             	sub    esp,0x8
c001491c:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014921:	68 8c 5d 02 c0       	push   0xc0025d8c
c0014926:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001492c:	e8 99 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014931:	58                   	pop    eax
c0014932:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014937:	5a                   	pop    edx
c0014938:	68 c6 5c 02 c0       	push   0xc0025cc6
c001493d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014943:	e8 82 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014948:	59                   	pop    ecx
c0014949:	58                   	pop    eax
c001494a:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c001494f:	53                   	push   ebx
c0014950:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014956:	e8 6f 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c001495b:	83 c4 10             	add    esp,0x10
c001495e:	83 ec 08             	sub    esp,0x8
c0014961:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014966:	68 e5 5c 02 c0       	push   0xc0025ce5
c001496b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014971:	e8 54 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014976:	58                   	pop    eax
c0014977:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c001497c:	5a                   	pop    edx
c001497d:	68 e4 5d 02 c0       	push   0xc0025de4
c0014982:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014988:	e8 3d 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c001498d:	59                   	pop    ecx
c001498e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014993:	5b                   	pop    ebx
c0014994:	68 24 5e 02 c0       	push   0xc0025e24
c0014999:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001499f:	e8 26 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149a4:	58                   	pop    eax
c00149a5:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00149aa:	5a                   	pop    edx
c00149ab:	68 d1 5c 02 c0       	push   0xc0025cd1
c00149b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149b6:	e8 0f 66 ff ff       	call   c000afca <VgaText::puts(char const*)>
c00149bb:	59                   	pop    ecx
c00149bc:	5b                   	pop    ebx
c00149bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00149c0:	68 e9 5c 02 c0       	push   0xc0025ce9
c00149c5:	e8 e9 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00149ca:	58                   	pop    eax
c00149cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149ce:	5a                   	pop    edx
c00149cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00149d2:	68 f2 5c 02 c0       	push   0xc0025cf2
c00149d7:	e8 d7 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00149dc:	59                   	pop    ecx
c00149dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149e0:	5b                   	pop    ebx
c00149e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00149e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00149e6:	68 fb 5c 02 c0       	push   0xc0025cfb
c00149eb:	e8 c3 82 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00149f0:	58                   	pop    eax
c00149f1:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c00149f6:	5a                   	pop    edx
c00149f7:	68 68 5e 02 c0       	push   0xc0025e68
c00149fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a02:	e8 c3 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a07:	59                   	pop    ecx
c0014a08:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a0d:	5b                   	pop    ebx
c0014a0e:	68 04 5d 02 c0       	push   0xc0025d04
c0014a13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a19:	e8 ac 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a1e:	0f 20 c0             	mov    eax,cr0
c0014a21:	5a                   	pop    edx
c0014a22:	59                   	pop    ecx
c0014a23:	50                   	push   eax
c0014a24:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a29:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a2f:	e8 50 65 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014a34:	5b                   	pop    ebx
c0014a35:	58                   	pop    eax
c0014a36:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a3b:	68 0e 5d 02 c0       	push   0xc0025d0e
c0014a40:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a46:	e8 7f 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a4b:	0f 20 d0             	mov    eax,cr2
c0014a4e:	5a                   	pop    edx
c0014a4f:	59                   	pop    ecx
c0014a50:	50                   	push   eax
c0014a51:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a56:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a5c:	e8 23 65 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014a61:	5b                   	pop    ebx
c0014a62:	58                   	pop    eax
c0014a63:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a68:	68 18 5d 02 c0       	push   0xc0025d18
c0014a6d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a73:	e8 52 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014a78:	0f 20 d8             	mov    eax,cr3
c0014a7b:	5a                   	pop    edx
c0014a7c:	59                   	pop    ecx
c0014a7d:	50                   	push   eax
c0014a7e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a83:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a89:	e8 f6 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014a8e:	5b                   	pop    ebx
c0014a8f:	58                   	pop    eax
c0014a90:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014a95:	68 2b 5d 02 c0       	push   0xc0025d2b
c0014a9a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aa0:	e8 25 65 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014aa5:	0f 20 e0             	mov    eax,cr4
c0014aa8:	5a                   	pop    edx
c0014aa9:	59                   	pop    ecx
c0014aaa:	50                   	push   eax
c0014aab:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014ab0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ab6:	e8 c9 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014abb:	5b                   	pop    ebx
c0014abc:	58                   	pop    eax
c0014abd:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014ac2:	68 35 5d 02 c0       	push   0xc0025d35
c0014ac7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014acd:	e8 f8 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014ad2:	5a                   	pop    edx
c0014ad3:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014ad8:	59                   	pop    ecx
c0014ad9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014adf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014ae2:	50                   	push   eax
c0014ae3:	e8 9c 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014ae8:	5b                   	pop    ebx
c0014ae9:	58                   	pop    eax
c0014aea:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014aef:	68 4c 5d 02 c0       	push   0xc0025d4c
c0014af4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014afa:	e8 cb 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014aff:	5a                   	pop    edx
c0014b00:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014b05:	59                   	pop    ecx
c0014b06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b0f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014b12:	50                   	push   eax
c0014b13:	e8 6c 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014b18:	5b                   	pop    ebx
c0014b19:	58                   	pop    eax
c0014b1a:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014b1f:	68 4c 5d 02 c0       	push   0xc0025d4c
c0014b24:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b2a:	e8 9b 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b2f:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014b34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014b37:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b3d:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b3f:	59                   	pop    ecx
c0014b40:	5b                   	pop    ebx
c0014b41:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014b44:	50                   	push   eax
c0014b45:	e8 3a 64 ff ff       	call   c000af84 <VgaText::putx(unsigned int)>
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	b2 fe                	mov    dl,0xfe
c0014b4f:	e4 60                	in     al,0x60
c0014b51:	3c 1c                	cmp    al,0x1c
c0014b53:	74 04                	je     c0014b59 <Krnl::panic(char const*)+0x33a>
c0014b55:	3c 5a                	cmp    al,0x5a
c0014b57:	75 f6                	jne    c0014b4f <Krnl::panic(char const*)+0x330>
c0014b59:	e4 64                	in     al,0x64
c0014b5b:	a8 02                	test   al,0x2
c0014b5d:	75 fa                	jne    c0014b59 <Krnl::panic(char const*)+0x33a>
c0014b5f:	88 d0                	mov    al,dl
c0014b61:	e6 64                	out    0x64,al
c0014b63:	fa                   	cli    
c0014b64:	f4                   	hlt    
c0014b65:	eb e8                	jmp    c0014b4f <Krnl::panic(char const*)+0x330>
c0014b67:	50                   	push   eax
c0014b68:	50                   	push   eax
c0014b69:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014b6e:	68 b8 5d 02 c0       	push   0xc0025db8
c0014b73:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b79:	e8 4c 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b7e:	58                   	pop    eax
c0014b7f:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014b84:	5a                   	pop    edx
c0014b85:	68 c6 5c 02 c0       	push   0xc0025cc6
c0014b8a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b90:	e8 35 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014b95:	59                   	pop    ecx
c0014b96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b9b:	5b                   	pop    ebx
c0014b9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b9f:	83 c0 0c             	add    eax,0xc
c0014ba2:	50                   	push   eax
c0014ba3:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0014ba8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bae:	e8 17 64 ff ff       	call   c000afca <VgaText::puts(char const*)>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	e9 a3 fd ff ff       	jmp    c001495e <Krnl::panic(char const*)+0x13f>
c0014bbb:	90                   	nop

c0014bbc <Net::switchEndian16(unsigned short)>:
c0014bbc:	83 ec 04             	sub    esp,0x4
c0014bbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014bc3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014bc7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014bcb:	c1 f8 08             	sar    eax,0x8
c0014bce:	89 c2                	mov    edx,eax
c0014bd0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014bd4:	c1 e0 08             	shl    eax,0x8
c0014bd7:	09 d0                	or     eax,edx
c0014bd9:	83 c4 04             	add    esp,0x4
c0014bdc:	c3                   	ret    
c0014bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0014be0 <Net::switchEndian32(unsigned int)>:
c0014be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014be4:	c1 e8 18             	shr    eax,0x18
c0014be7:	89 c2                	mov    edx,eax
c0014be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bed:	c1 e0 08             	shl    eax,0x8
c0014bf0:	25 00 00 ff 00       	and    eax,0xff0000
c0014bf5:	09 c2                	or     edx,eax
c0014bf7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bfb:	c1 e8 08             	shr    eax,0x8
c0014bfe:	25 00 ff 00 00       	and    eax,0xff00
c0014c03:	09 c2                	or     edx,eax
c0014c05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c09:	c1 e0 18             	shl    eax,0x18
c0014c0c:	09 d0                	or     eax,edx
c0014c0e:	c3                   	ret    
c0014c0f:	90                   	nop

c0014c10 <Net::crc32Calc(unsigned char*, int)>:
c0014c10:	83 ec 10             	sub    esp,0x10
c0014c13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c18:	75 0a                	jne    c0014c24 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014c1a:	b8 00 00 00 00       	mov    eax,0x0
c0014c1f:	e9 8c 00 00 00       	jmp    c0014cb0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014c24:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014c29:	7f 09                	jg     c0014c34 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014c2b:	b8 00 00 00 00       	mov    eax,0x0
c0014c30:	eb 7e                	jmp    c0014cb0 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014c32:	66 90                	xchg   ax,ax
c0014c34:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014c3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c48:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014c4c:	7d 5a                	jge    c0014ca8 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c56:	01 d0                	add    eax,edx
c0014c58:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5a:	0f b6 c0             	movzx  eax,al
c0014c5d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014c61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c69:	8d 76 00             	lea    esi,[esi+0x0]
c0014c6c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014c71:	7f 2d                	jg     c0014ca0 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014c73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c77:	83 e0 01             	and    eax,0x1
c0014c7a:	74 10                	je     c0014c8c <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c80:	d1 e8                	shr    eax,1
c0014c82:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014c87:	eb 0b                	jmp    c0014c94 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014c89:	8d 76 00             	lea    esi,[esi+0x0]
c0014c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c90:	d1 e8                	shr    eax,1
c0014c92:	66 90                	xchg   ax,ax
c0014c94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c98:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c9c:	eb ce                	jmp    c0014c6c <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014c9e:	66 90                	xchg   ax,ax
c0014ca0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014ca4:	eb 9e                	jmp    c0014c44 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014ca6:	66 90                	xchg   ax,ax
c0014ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014cac:	f7 d0                	not    eax
c0014cae:	66 90                	xchg   ax,ax
c0014cb0:	83 c4 10             	add    esp,0x10
c0014cb3:	c3                   	ret    

c0014cb4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014cb4:	57                   	push   edi
c0014cb5:	56                   	push   esi
c0014cb6:	53                   	push   ebx
c0014cb7:	83 ec 60             	sub    esp,0x60
c0014cba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014cc1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014cc5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd0:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014cd5:	7f 1d                	jg     c0014cf4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014cd7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014cde:	8d 50 01             	lea    edx,[eax+0x1]
c0014ce1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ce8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014ceb:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014cef:	eb df                	jmp    c0014cd0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014cf1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cf4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014cfb:	8d 50 01             	lea    edx,[eax+0x1]
c0014cfe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014d05:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014d08:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d13:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014d17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d1b:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014d23:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014d2f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014d33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014d37:	89 c6                	mov    esi,eax
c0014d39:	89 d7                	mov    edi,edx
c0014d3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d3d:	89 c8                	mov    eax,ecx
c0014d3f:	89 fa                	mov    edx,edi
c0014d41:	89 f3                	mov    ebx,esi
c0014d43:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014d47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014d4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014d4e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014d56:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014d5d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014d61:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014d65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d69:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014d71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014d75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d7d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014d81:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014d85:	89 c6                	mov    esi,eax
c0014d87:	89 d7                	mov    edi,edx
c0014d89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014d8b:	89 c8                	mov    eax,ecx
c0014d8d:	89 fa                	mov    edx,edi
c0014d8f:	89 f3                	mov    ebx,esi
c0014d91:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014d95:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014d99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d9d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014da5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014dac:	0f b7 c0             	movzx  eax,ax
c0014daf:	c1 f8 08             	sar    eax,0x8
c0014db2:	89 c1                	mov    ecx,eax
c0014db4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014dbb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dbe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014dc5:	88 ca                	mov    dl,cl
c0014dc7:	88 10                	mov    BYTE PTR [eax],dl
c0014dc9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014dd0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014dd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0014dda:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014de1:	88 10                	mov    BYTE PTR [eax],dl
c0014de3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014de7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014deb:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014df2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014df6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014dfa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014dfe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014e02:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014e06:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014e0a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014e0e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014e12:	89 c6                	mov    esi,eax
c0014e14:	89 d7                	mov    edi,edx
c0014e16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e18:	89 c8                	mov    eax,ecx
c0014e1a:	89 fa                	mov    edx,edi
c0014e1c:	89 f3                	mov    ebx,esi
c0014e1e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014e22:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014e26:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014e2a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014e2e:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014e35:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e3c:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0014e40:	50                   	push   eax
c0014e41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014e45:	e8 c6 fd ff ff       	call   c0014c10 <Net::crc32Calc(unsigned char*, int)>
c0014e4a:	83 c4 08             	add    esp,0x8
c0014e4d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014e51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014e55:	c1 e8 18             	shr    eax,0x18
c0014e58:	89 c1                	mov    ecx,eax
c0014e5a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e61:	8d 50 01             	lea    edx,[eax+0x1]
c0014e64:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014e6b:	88 ca                	mov    dl,cl
c0014e6d:	88 10                	mov    BYTE PTR [eax],dl
c0014e6f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014e73:	c1 e8 10             	shr    eax,0x10
c0014e76:	89 c1                	mov    ecx,eax
c0014e78:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e7f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e82:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014e89:	88 ca                	mov    dl,cl
c0014e8b:	88 10                	mov    BYTE PTR [eax],dl
c0014e8d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0014e91:	c1 e8 08             	shr    eax,0x8
c0014e94:	89 c1                	mov    ecx,eax
c0014e96:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ea7:	88 ca                	mov    dl,cl
c0014ea9:	88 10                	mov    BYTE PTR [eax],dl
c0014eab:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014eb2:	8d 50 01             	lea    edx,[eax+0x1]
c0014eb5:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ebc:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014ec0:	88 10                	mov    BYTE PTR [eax],dl
c0014ec2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014ec6:	83 c4 60             	add    esp,0x60
c0014ec9:	5b                   	pop    ebx
c0014eca:	5e                   	pop    esi
c0014ecb:	5f                   	pop    edi
c0014ecc:	c3                   	ret    
c0014ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0014ed0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014ed0:	57                   	push   edi
c0014ed1:	56                   	push   esi
c0014ed2:	53                   	push   ebx
c0014ed3:	83 ec 70             	sub    esp,0x70
c0014ed6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014edd:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014ee1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014ee9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ef0:	83 c0 0e             	add    eax,0xe
c0014ef3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014ef7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014efe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f02:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014f0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f16:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014f1a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014f1e:	89 c6                	mov    esi,eax
c0014f20:	89 d7                	mov    edi,edx
c0014f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f24:	89 c8                	mov    eax,ecx
c0014f26:	89 fa                	mov    edx,edi
c0014f28:	89 f3                	mov    ebx,esi
c0014f2a:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014f2e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014f32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f36:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014f3e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014f45:	83 c0 08             	add    eax,0x8
c0014f48:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014f4c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f53:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014f57:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014f5f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014f63:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014f67:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014f6b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014f6f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014f73:	89 c6                	mov    esi,eax
c0014f75:	89 d7                	mov    edi,edx
c0014f77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f79:	89 c8                	mov    eax,ecx
c0014f7b:	89 fa                	mov    edx,edi
c0014f7d:	89 f3                	mov    ebx,esi
c0014f7f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014f83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014f87:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014f8b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014f93:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f9a:	8d 50 01             	lea    edx,[eax+0x1]
c0014f9d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fa4:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa6:	0f b6 c0             	movzx  eax,al
c0014fa9:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014fae:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014fb5:	8d 50 01             	lea    edx,[eax+0x1]
c0014fb8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014fbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc1:	0f b6 c0             	movzx  eax,al
c0014fc4:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014fc9:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014fce:	c1 e0 08             	shl    eax,0x8
c0014fd1:	89 c2                	mov    edx,eax
c0014fd3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014fd7:	09 d0                	or     eax,edx
c0014fd9:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014fe0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014fe4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014fec:	75 46                	jne    c0015034 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014fee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014ff5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014ff8:	66 3d dc 05          	cmp    ax,0x5dc
c0014ffc:	77 16                	ja     c0015014 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014ffe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015005:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015008:	0f b7 c0             	movzx  eax,ax
c001500b:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015012:	eb 20                	jmp    c0015034 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015014:	83 ec 0c             	sub    esp,0xc
c0015017:	68 90 5e 02 c0       	push   0xc0025e90
c001501c:	e8 92 7c ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0015021:	83 c4 10             	add    esp,0x10
c0015024:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001502b:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001502f:	e9 18 01 00 00       	jmp    c001514c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015034:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001503b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015042:	8b 12                	mov    edx,DWORD PTR [edx]
c0015044:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015048:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001504f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015053:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001505b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001505f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015063:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015067:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001506b:	89 c6                	mov    esi,eax
c001506d:	89 d7                	mov    edi,edx
c001506f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015071:	89 c8                	mov    eax,ecx
c0015073:	89 fa                	mov    edx,edi
c0015075:	89 f3                	mov    ebx,esi
c0015077:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001507b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001507f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015082:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015089:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015090:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015097:	8d 50 01             	lea    edx,[eax+0x1]
c001509a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150a1:	8a 00                	mov    al,BYTE PTR [eax]
c00150a3:	0f b6 c0             	movzx  eax,al
c00150a6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00150aa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150b1:	8d 50 01             	lea    edx,[eax+0x1]
c00150b4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150bb:	8a 00                	mov    al,BYTE PTR [eax]
c00150bd:	0f b6 c0             	movzx  eax,al
c00150c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00150c4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150cb:	8d 50 01             	lea    edx,[eax+0x1]
c00150ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150d5:	8a 00                	mov    al,BYTE PTR [eax]
c00150d7:	0f b6 c0             	movzx  eax,al
c00150da:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c00150de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150e5:	8d 50 01             	lea    edx,[eax+0x1]
c00150e8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00150ef:	8a 00                	mov    al,BYTE PTR [eax]
c00150f1:	0f b6 c0             	movzx  eax,al
c00150f4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00150f8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00150fc:	c1 e0 18             	shl    eax,0x18
c00150ff:	89 c2                	mov    edx,eax
c0015101:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015105:	c1 e0 10             	shl    eax,0x10
c0015108:	09 c2                	or     edx,eax
c001510a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001510e:	c1 e0 08             	shl    eax,0x8
c0015111:	09 d0                	or     eax,edx
c0015113:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015117:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001511b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015122:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015126:	83 e8 04             	sub    eax,0x4
c0015129:	83 ec 08             	sub    esp,0x8
c001512c:	50                   	push   eax
c001512d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015131:	e8 da fa ff ff       	call   c0014c10 <Net::crc32Calc(unsigned char*, int)>
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001513d:	0f 94 c2             	sete   dl
c0015140:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015147:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001514a:	90                   	nop
c001514b:	90                   	nop
c001514c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015153:	83 c4 70             	add    esp,0x70
c0015156:	5b                   	pop    ebx
c0015157:	5e                   	pop    esi
c0015158:	5f                   	pop    edi
c0015159:	c2 04 00             	ret    0x4

c001515c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001515c:	55                   	push   ebp
c001515d:	57                   	push   edi
c001515e:	56                   	push   esi
c001515f:	53                   	push   ebx
c0015160:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015166:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001516d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001516f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015172:	80 fb 40             	cmp    bl,0x40
c0015175:	75 1b                	jne    c0015192 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015177:	8a 16                	mov    dl,BYTE PTR [esi]
c0015179:	84 d2                	test   dl,dl
c001517b:	0f 84 f1 00 00 00    	je     c0015272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015181:	8d 46 01             	lea    eax,[esi+0x1]
c0015184:	80 fa 3a             	cmp    dl,0x3a
c0015187:	74 04                	je     c001518d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015189:	89 c6                	mov    esi,eax
c001518b:	eb ea                	jmp    c0015177 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001518d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015190:	89 c6                	mov    esi,eax
c0015192:	50                   	push   eax
c0015193:	6a 40                	push   0x40
c0015195:	6a 00                	push   0x0
c0015197:	8d 44 24 24          	lea    eax,[esp+0x24]
c001519b:	50                   	push   eax
c001519c:	e8 e3 b4 fe ff       	call   c0000684 <memset>
c00151a1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00151a8:	31 c0                	xor    eax,eax
c00151aa:	83 c4 10             	add    esp,0x10
c00151ad:	8a 0f                	mov    cl,BYTE PTR [edi]
c00151af:	84 c9                	test   cl,cl
c00151b1:	0f 84 bb 00 00 00    	je     c0015272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151b7:	3d c7 00 00 00       	cmp    eax,0xc7
c00151bc:	0f 8f b0 00 00 00    	jg     c0015272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00151c2:	80 f9 0a             	cmp    cl,0xa
c00151c5:	0f 85 98 00 00 00    	jne    c0015263 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00151cb:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00151d0:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00151d4:	a8 df                	test   al,0xdf
c00151d6:	0f 94 c1             	sete   cl
c00151d9:	3c 23                	cmp    al,0x23
c00151db:	0f 94 c2             	sete   dl
c00151de:	08 d1                	or     cl,dl
c00151e0:	75 4a                	jne    c001522c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151e2:	8d 50 f7             	lea    edx,[eax-0x9]
c00151e5:	80 fa 01             	cmp    dl,0x1
c00151e8:	76 42                	jbe    c001522c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151ea:	3c 5b                	cmp    al,0x5b
c00151ec:	75 42                	jne    c0015230 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00151ee:	80 fb 40             	cmp    bl,0x40
c00151f1:	75 39                	jne    c001522c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	8d 54 24 65          	lea    edx,[esp+0x65]
c00151fa:	52                   	push   edx
c00151fb:	e8 a0 b4 fe ff       	call   c00006a0 <strlen>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	83 f8 3f             	cmp    eax,0x3f
c0015206:	77 6a                	ja     c0015272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015208:	50                   	push   eax
c0015209:	50                   	push   eax
c001520a:	8d 54 24 61          	lea    edx,[esp+0x61]
c001520e:	52                   	push   edx
c001520f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015213:	52                   	push   edx
c0015214:	e8 27 b5 fe ff       	call   c0000740 <strcpy>
c0015219:	58                   	pop    eax
c001521a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001521e:	52                   	push   edx
c001521f:	e8 7c b4 fe ff       	call   c00006a0 <strlen>
c0015224:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015229:	83 c4 10             	add    esp,0x10
c001522c:	31 d2                	xor    edx,edx
c001522e:	eb 3a                	jmp    c001526a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015230:	80 fb 40             	cmp    bl,0x40
c0015233:	74 06                	je     c001523b <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015235:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015239:	eb 20                	jmp    c001525b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001523b:	50                   	push   eax
c001523c:	50                   	push   eax
c001523d:	55                   	push   ebp
c001523e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015242:	50                   	push   eax
c0015243:	e8 84 b5 fe ff       	call   c00007cc <strcmp>
c0015248:	83 c4 10             	add    esp,0x10
c001524b:	85 c0                	test   eax,eax
c001524d:	75 dd                	jne    c001522c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001524f:	eb e4                	jmp    c0015235 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015251:	8d 50 01             	lea    edx,[eax+0x1]
c0015254:	80 f9 3d             	cmp    cl,0x3d
c0015257:	74 1d                	je     c0015276 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015259:	89 d0                	mov    eax,edx
c001525b:	8a 08                	mov    cl,BYTE PTR [eax]
c001525d:	84 c9                	test   cl,cl
c001525f:	75 f0                	jne    c0015251 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015261:	eb 0f                	jmp    c0015272 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015263:	8d 50 01             	lea    edx,[eax+0x1]
c0015266:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001526a:	47                   	inc    edi
c001526b:	89 d0                	mov    eax,edx
c001526d:	e9 3b ff ff ff       	jmp    c00151ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015272:	31 c0                	xor    eax,eax
c0015274:	eb 33                	jmp    c00152a9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015276:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001527a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001527d:	50                   	push   eax
c001527e:	50                   	push   eax
c001527f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015283:	50                   	push   eax
c0015284:	56                   	push   esi
c0015285:	e8 42 b5 fe ff       	call   c00007cc <strcmp>
c001528a:	83 c4 10             	add    esp,0x10
c001528d:	85 c0                	test   eax,eax
c001528f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015293:	75 97                	jne    c001522c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015295:	51                   	push   ecx
c0015296:	51                   	push   ecx
c0015297:	52                   	push   edx
c0015298:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001529f:	e8 9c b4 fe ff       	call   c0000740 <strcpy>
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	b0 01                	mov    al,0x1
c00152a9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00152af:	5b                   	pop    ebx
c00152b0:	5e                   	pop    esi
c00152b1:	5f                   	pop    edi
c00152b2:	5d                   	pop    ebp
c00152b3:	c3                   	ret    

c00152b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00152b4:	57                   	push   edi
c00152b5:	56                   	push   esi
c00152b6:	53                   	push   ebx
c00152b7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00152bd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00152c4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00152cb:	53                   	push   ebx
c00152cc:	e8 cf b3 fe ff       	call   c00006a0 <strlen>
c00152d1:	89 34 24             	mov    DWORD PTR [esp],esi
c00152d4:	89 c7                	mov    edi,eax
c00152d6:	e8 c5 b3 fe ff       	call   c00006a0 <strlen>
c00152db:	83 c4 10             	add    esp,0x10
c00152de:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00152e2:	3d ff 00 00 00       	cmp    eax,0xff
c00152e7:	0f 87 d3 00 00 00    	ja     c00153c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00152ed:	57                   	push   edi
c00152ee:	57                   	push   edi
c00152ef:	56                   	push   esi
c00152f0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00152f4:	56                   	push   esi
c00152f5:	e8 46 b4 fe ff       	call   c0000740 <strcpy>
c00152fa:	58                   	pop    eax
c00152fb:	5a                   	pop    edx
c00152fc:	68 32 62 02 c0       	push   0xc0026232
c0015301:	56                   	push   esi
c0015302:	e8 79 b5 fe ff       	call   c0000880 <strcat>
c0015307:	59                   	pop    ecx
c0015308:	5f                   	pop    edi
c0015309:	53                   	push   ebx
c001530a:	56                   	push   esi
c001530b:	e8 70 b5 fe ff       	call   c0000880 <strcat>
c0015310:	58                   	pop    eax
c0015311:	5a                   	pop    edx
c0015312:	68 dc 5e 02 c0       	push   0xc0025edc
c0015317:	56                   	push   esi
c0015318:	e8 63 b5 fe ff       	call   c0000880 <strcat>
c001531d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015324:	e8 9a 46 ff ff       	call   c00099c3 <malloc>
c0015329:	83 c4 0c             	add    esp,0xc
c001532c:	89 c3                	mov    ebx,eax
c001532e:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0015334:	56                   	push   esi
c0015335:	50                   	push   eax
c0015336:	e8 e3 7e ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001533b:	83 c4 10             	add    esp,0x10
c001533e:	85 db                	test   ebx,ebx
c0015340:	74 7e                	je     c00153c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015342:	51                   	push   ecx
c0015343:	51                   	push   ecx
c0015344:	6a 01                	push   0x1
c0015346:	53                   	push   ebx
c0015347:	e8 36 7f ff ff       	call   c000d282 <File::open(FileOpenMode)>
c001534c:	83 c4 10             	add    esp,0x10
c001534f:	85 c0                	test   eax,eax
c0015351:	74 08                	je     c001535b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015353:	83 ec 0c             	sub    esp,0xc
c0015356:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015358:	53                   	push   ebx
c0015359:	eb 5f                	jmp    c00153ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001535b:	52                   	push   edx
c001535c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015360:	50                   	push   eax
c0015361:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015365:	50                   	push   eax
c0015366:	53                   	push   ebx
c0015367:	e8 c2 81 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c001536c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015370:	83 c4 10             	add    esp,0x10
c0015373:	89 c1                	mov    ecx,eax
c0015375:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015379:	74 31                	je     c00153ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001537b:	83 ec 0c             	sub    esp,0xc
c001537e:	50                   	push   eax
c001537f:	e8 3f 46 ff ff       	call   c00099c3 <malloc>
c0015384:	89 c6                	mov    esi,eax
c0015386:	58                   	pop    eax
c0015387:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015389:	8d 54 24 20          	lea    edx,[esp+0x20]
c001538d:	52                   	push   edx
c001538e:	56                   	push   esi
c001538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015393:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015397:	53                   	push   ebx
c0015398:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001539b:	83 c4 20             	add    esp,0x20
c001539e:	85 c0                	test   eax,eax
c00153a0:	75 0a                	jne    c00153ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00153a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00153a6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00153aa:	74 18                	je     c00153c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00153ac:	83 ec 0c             	sub    esp,0xc
c00153af:	53                   	push   ebx
c00153b0:	e8 2b 7f ff ff       	call   c000d2e0 <File::close()>
c00153b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	31 c0                	xor    eax,eax
c00153c2:	eb 3b                	jmp    c00153ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00153c4:	83 ec 0c             	sub    esp,0xc
c00153c7:	53                   	push   ebx
c00153c8:	e8 13 7f ff ff       	call   c000d2e0 <File::close()>
c00153cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00153cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00153d5:	83 c4 0c             	add    esp,0xc
c00153d8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00153df:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00153e6:	56                   	push   esi
c00153e7:	e8 70 fd ff ff       	call   c001515c <Reg::findLineFromLoadedData(char*, char*, char*)>
c00153ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00153ef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00153f3:	e8 db 45 ff ff       	call   c00099d3 <free>
c00153f8:	83 c4 10             	add    esp,0x10
c00153fb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00153ff:	81 c4 20 01 00 00    	add    esp,0x120
c0015405:	5b                   	pop    ebx
c0015406:	5e                   	pop    esi
c0015407:	5f                   	pop    edi
c0015408:	c3                   	ret    

c0015409 <Reg::getLine(char*, char*, char*)>:
c0015409:	57                   	push   edi
c001540a:	56                   	push   esi
c001540b:	53                   	push   ebx
c001540c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015410:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015414:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015418:	57                   	push   edi
c0015419:	56                   	push   esi
c001541a:	53                   	push   ebx
c001541b:	68 e1 5e 02 c0       	push   0xc0025ee1
c0015420:	e8 8f fe ff ff       	call   c00152b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	84 c0                	test   al,al
c001542a:	75 10                	jne    c001543c <Reg::getLine(char*, char*, char*)+0x33>
c001542c:	57                   	push   edi
c001542d:	56                   	push   esi
c001542e:	53                   	push   ebx
c001542f:	68 06 5f 02 c0       	push   0xc0025f06
c0015434:	e8 7b fe ff ff       	call   c00152b4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015439:	83 c4 10             	add    esp,0x10
c001543c:	5b                   	pop    ebx
c001543d:	5e                   	pop    esi
c001543e:	5f                   	pop    edi
c001543f:	c3                   	ret    

c0015440 <Reg::readInt(char*, char*, int*)>:
c0015440:	55                   	push   ebp
c0015441:	57                   	push   edi
c0015442:	56                   	push   esi
c0015443:	53                   	push   ebx
c0015444:	81 ec f0 00 00 00    	sub    esp,0xf0
c001544a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001544e:	57                   	push   edi
c001544f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015456:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001545d:	e8 a7 ff ff ff       	call   c0015409 <Reg::getLine(char*, char*, char*)>
c0015462:	83 c4 10             	add    esp,0x10
c0015465:	84 c0                	test   al,al
c0015467:	0f 84 b3 00 00 00    	je     c0015520 <Reg::readInt(char*, char*, int*)+0xe0>
c001546d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015471:	80 fa 2b             	cmp    dl,0x2b
c0015474:	74 0c                	je     c0015482 <Reg::readInt(char*, char*, int*)+0x42>
c0015476:	80 fa 2d             	cmp    dl,0x2d
c0015479:	75 0e                	jne    c0015489 <Reg::readInt(char*, char*, int*)+0x49>
c001547b:	ba 01 00 00 00       	mov    edx,0x1
c0015480:	eb 0b                	jmp    c001548d <Reg::readInt(char*, char*, int*)+0x4d>
c0015482:	ba 01 00 00 00       	mov    edx,0x1
c0015487:	eb 02                	jmp    c001548b <Reg::readInt(char*, char*, int*)+0x4b>
c0015489:	31 d2                	xor    edx,edx
c001548b:	31 c0                	xor    eax,eax
c001548d:	be 0a 00 00 00       	mov    esi,0xa
c0015492:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015497:	75 20                	jne    c00154b9 <Reg::readInt(char*, char*, int*)+0x79>
c0015499:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001549d:	80 f9 78             	cmp    cl,0x78
c00154a0:	75 0a                	jne    c00154ac <Reg::readInt(char*, char*, int*)+0x6c>
c00154a2:	83 c2 02             	add    edx,0x2
c00154a5:	be 10 00 00 00       	mov    esi,0x10
c00154aa:	eb 0d                	jmp    c00154b9 <Reg::readInt(char*, char*, int*)+0x79>
c00154ac:	80 f9 62             	cmp    cl,0x62
c00154af:	75 08                	jne    c00154b9 <Reg::readInt(char*, char*, int*)+0x79>
c00154b1:	83 c2 02             	add    edx,0x2
c00154b4:	be 02 00 00 00       	mov    esi,0x2
c00154b9:	01 d7                	add    edi,edx
c00154bb:	31 d2                	xor    edx,edx
c00154bd:	8a 1f                	mov    bl,BYTE PTR [edi]
c00154bf:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00154c3:	80 fb 0d             	cmp    bl,0xd
c00154c6:	0f 94 c3             	sete   bl
c00154c9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00154ce:	0f 94 c1             	sete   cl
c00154d1:	08 cb                	or     bl,cl
c00154d3:	75 3a                	jne    c001550f <Reg::readInt(char*, char*, int*)+0xcf>
c00154d5:	0f af d6             	imul   edx,esi
c00154d8:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00154dd:	83 fe 10             	cmp    esi,0x10
c00154e0:	75 26                	jne    c0015508 <Reg::readInt(char*, char*, int*)+0xc8>
c00154e2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00154e6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00154e9:	89 e9                	mov    ecx,ebp
c00154eb:	80 f9 05             	cmp    cl,0x5
c00154ee:	77 06                	ja     c00154f6 <Reg::readInt(char*, char*, int*)+0xb6>
c00154f0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00154f4:	eb 16                	jmp    c001550c <Reg::readInt(char*, char*, int*)+0xcc>
c00154f6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00154fa:	83 e9 61             	sub    ecx,0x61
c00154fd:	80 f9 05             	cmp    cl,0x5
c0015500:	77 06                	ja     c0015508 <Reg::readInt(char*, char*, int*)+0xc8>
c0015502:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015506:	eb 04                	jmp    c001550c <Reg::readInt(char*, char*, int*)+0xcc>
c0015508:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001550c:	47                   	inc    edi
c001550d:	eb ae                	jmp    c00154bd <Reg::readInt(char*, char*, int*)+0x7d>
c001550f:	84 c0                	test   al,al
c0015511:	74 02                	je     c0015515 <Reg::readInt(char*, char*, int*)+0xd5>
c0015513:	f7 da                	neg    edx
c0015515:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001551c:	89 10                	mov    DWORD PTR [eax],edx
c001551e:	88 d8                	mov    al,bl
c0015520:	81 c4 ec 00 00 00    	add    esp,0xec
c0015526:	5b                   	pop    ebx
c0015527:	5e                   	pop    esi
c0015528:	5f                   	pop    edi
c0015529:	5d                   	pop    ebp
c001552a:	c3                   	ret    

c001552b <Reg::readString(char*, char*, char*, int)>:
c001552b:	57                   	push   edi
c001552c:	56                   	push   esi
c001552d:	53                   	push   ebx
c001552e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015534:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001553b:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001553f:	57                   	push   edi
c0015540:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015547:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001554e:	e8 b6 fe ff ff       	call   c0015409 <Reg::getLine(char*, char*, char*)>
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	89 c6                	mov    esi,eax
c0015558:	84 c0                	test   al,al
c001555a:	74 44                	je     c00155a0 <Reg::readString(char*, char*, char*, int)+0x75>
c001555c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015563:	31 c0                	xor    eax,eax
c0015565:	4a                   	dec    edx
c0015566:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015569:	84 c9                	test   cl,cl
c001556b:	74 0f                	je     c001557c <Reg::readString(char*, char*, char*, int)+0x51>
c001556d:	39 c2                	cmp    edx,eax
c001556f:	7e 0b                	jle    c001557c <Reg::readString(char*, char*, char*, int)+0x51>
c0015571:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015574:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015579:	40                   	inc    eax
c001557a:	eb ea                	jmp    c0015566 <Reg::readString(char*, char*, char*, int)+0x3b>
c001557c:	83 ec 0c             	sub    esp,0xc
c001557f:	53                   	push   ebx
c0015580:	e8 1b b1 fe ff       	call   c00006a0 <strlen>
c0015585:	83 c4 10             	add    esp,0x10
c0015588:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001558d:	75 11                	jne    c00155a0 <Reg::readString(char*, char*, char*, int)+0x75>
c001558f:	83 ec 0c             	sub    esp,0xc
c0015592:	53                   	push   ebx
c0015593:	e8 08 b1 fe ff       	call   c00006a0 <strlen>
c0015598:	83 c4 10             	add    esp,0x10
c001559b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00155a0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00155a6:	89 f0                	mov    eax,esi
c00155a8:	5b                   	pop    ebx
c00155a9:	5e                   	pop    esi
c00155aa:	5f                   	pop    edi
c00155ab:	c3                   	ret    

c00155ac <Reg::readBool(char*, char*, bool*)>:
c00155ac:	83 ec 20             	sub    esp,0x20
c00155af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00155b3:	50                   	push   eax
c00155b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155bc:	e8 7f fe ff ff       	call   c0015440 <Reg::readInt(char*, char*, int*)>
c00155c1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00155c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155ca:	0f 95 02             	setne  BYTE PTR [edx]
c00155cd:	83 c4 2c             	add    esp,0x2c
c00155d0:	c3                   	ret    

c00155d1 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00155d1:	53                   	push   ebx
c00155d2:	83 ec 1c             	sub    esp,0x1c
c00155d5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00155d9:	8d 44 24 13          	lea    eax,[esp+0x13]
c00155dd:	50                   	push   eax
c00155de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e6:	e8 c1 ff ff ff       	call   c00155ac <Reg::readBool(char*, char*, bool*)>
c00155eb:	83 c4 10             	add    esp,0x10
c00155ee:	84 c0                	test   al,al
c00155f0:	74 04                	je     c00155f6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00155f2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00155f6:	88 d8                	mov    al,bl
c00155f8:	83 c4 18             	add    esp,0x18
c00155fb:	5b                   	pop    ebx
c00155fc:	c3                   	ret    

c00155fd <Reg::readIntWithDefault(char*, char*, int)>:
c00155fd:	53                   	push   ebx
c00155fe:	83 ec 1c             	sub    esp,0x1c
c0015601:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015605:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015609:	50                   	push   eax
c001560a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001560e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015612:	e8 29 fe ff ff       	call   c0015440 <Reg::readInt(char*, char*, int*)>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	84 c0                	test   al,al
c001561c:	74 04                	je     c0015622 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001561e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015622:	89 d8                	mov    eax,ebx
c0015624:	83 c4 18             	add    esp,0x18
c0015627:	5b                   	pop    ebx
c0015628:	c3                   	ret    

c0015629 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015629:	57                   	push   edi
c001562a:	56                   	push   esi
c001562b:	56                   	push   esi
c001562c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015630:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015634:	56                   	push   esi
c0015635:	57                   	push   edi
c0015636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001563a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001563e:	e8 e8 fe ff ff       	call   c001552b <Reg::readString(char*, char*, char*, int)>
c0015643:	83 c4 10             	add    esp,0x10
c0015646:	84 c0                	test   al,al
c0015648:	75 1a                	jne    c0015664 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001564a:	51                   	push   ecx
c001564b:	56                   	push   esi
c001564c:	6a 00                	push   0x0
c001564e:	57                   	push   edi
c001564f:	e8 30 b0 fe ff       	call   c0000684 <memset>
c0015654:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015657:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001565b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001565d:	83 c4 10             	add    esp,0x10
c0015660:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015664:	89 f8                	mov    eax,edi
c0015666:	5a                   	pop    edx
c0015667:	5e                   	pop    esi
c0015668:	5f                   	pop    edi
c0015669:	c3                   	ret    

c001566a <Sys::eject(regs*)>:
c001566a:	83 ec 0c             	sub    esp,0xc
c001566d:	83 ca ff             	or     edx,0xffffffff
c0015670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015674:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015677:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001567c:	83 e9 41             	sub    ecx,0x41
c001567f:	83 f9 19             	cmp    ecx,0x19
c0015682:	77 18                	ja     c001569c <Sys::eject(regs*)+0x32>
c0015684:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c001568b:	85 c9                	test   ecx,ecx
c001568d:	74 0d                	je     c001569c <Sys::eject(regs*)+0x32>
c001568f:	83 ec 0c             	sub    esp,0xc
c0015692:	51                   	push   ecx
c0015693:	e8 ce ac ff ff       	call   c0010366 <LogicalDisk::eject()>
c0015698:	83 c4 10             	add    esp,0x10
c001569b:	99                   	cdq    
c001569c:	83 c4 0c             	add    esp,0xc
c001569f:	c3                   	ret    

c00156a0 <Sys::exit(regs*)>:
c00156a0:	83 ec 18             	sub    esp,0x18
c00156a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156a7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00156aa:	e8 59 36 00 00       	call   c0018d08 <terminateTask(int)>
c00156af:	83 c8 ff             	or     eax,0xffffffff
c00156b2:	83 c4 1c             	add    esp,0x1c
c00156b5:	89 c2                	mov    edx,eax
c00156b7:	c3                   	ret    

c00156b8 <Sys::getCwd(regs*)>:
c00156b8:	83 ec 10             	sub    esp,0x10
c00156bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156bf:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00156c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00156c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156ca:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00156cd:	e8 4e 79 ff ff       	call   c000d020 <Fs::getcwd(Process*, char*, int)>
c00156d2:	83 c4 1c             	add    esp,0x1c
c00156d5:	99                   	cdq    
c00156d6:	c3                   	ret    

c00156d7 <Sys::getPID(regs*)>:
c00156d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156df:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e1:	99                   	cdq    
c00156e2:	c3                   	ret    

c00156e3 <Sys::getRAMData(regs*)>:
c00156e3:	8b 0d b8 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281b8
c00156e9:	69 05 b4 81 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00281b4,0xc8
c00156f3:	99                   	cdq    
c00156f4:	f7 f9                	idiv   ecx
c00156f6:	c1 e0 18             	shl    eax,0x18
c00156f9:	09 c8                	or     eax,ecx
c00156fb:	99                   	cdq    
c00156fc:	c3                   	ret    

c00156fd <Sys::getVGAPtr(regs*)>:
c00156fd:	55                   	push   ebp
c00156fe:	57                   	push   edi
c00156ff:	56                   	push   esi
c0015700:	53                   	push   ebx
c0015701:	83 ec 18             	sub    esp,0x18
c0015704:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015708:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001570b:	e8 fc 30 00 00       	call   c001880c <Thr::processFromPID(int)>
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	89 c1                	mov    ecx,eax
c0015715:	b8 01 00 00 00       	mov    eax,0x1
c001571a:	85 c9                	test   ecx,ecx
c001571c:	74 59                	je     c0015777 <Sys::getVGAPtr(regs*)+0x7a>
c001571e:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015724:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015728:	74 0c                	je     c0015736 <Sys::getVGAPtr(regs*)+0x39>
c001572a:	83 ec 0c             	sub    esp,0xc
c001572d:	53                   	push   ebx
c001572e:	e8 8a 53 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015739:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001573c:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015741:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015743:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015746:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015749:	81 c3 82 00 00 00    	add    ebx,0x82
c001574f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015755:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015758:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001575b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015761:	50                   	push   eax
c0015762:	50                   	push   eax
c0015763:	53                   	push   ebx
c0015764:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015767:	05 a8 0f 00 00       	add    eax,0xfa8
c001576c:	50                   	push   eax
c001576d:	e8 ce af fe ff       	call   c0000740 <strcpy>
c0015772:	83 c4 10             	add    esp,0x10
c0015775:	31 c0                	xor    eax,eax
c0015777:	83 c4 0c             	add    esp,0xc
c001577a:	31 d2                	xor    edx,edx
c001577c:	5b                   	pop    ebx
c001577d:	5e                   	pop    esi
c001577e:	5f                   	pop    edi
c001577f:	5d                   	pop    ebp
c0015780:	c3                   	ret    

c0015781 <Sys::loadDLL(regs*)>:
c0015781:	56                   	push   esi
c0015782:	53                   	push   ebx
c0015783:	31 d2                	xor    edx,edx
c0015785:	51                   	push   ecx
c0015786:	b8 01 00 00 00       	mov    eax,0x1
c001578b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001578f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015793:	0f 84 8c 00 00 00    	je     c0015825 <Sys::loadDLL(regs*)+0xa4>
c0015799:	83 ec 0c             	sub    esp,0xc
c001579c:	68 14 01 00 00       	push   0x114
c00157a1:	e8 1d 42 ff ff       	call   c00099c3 <malloc>
c00157a6:	83 c4 0c             	add    esp,0xc
c00157a9:	89 c3                	mov    ebx,eax
c00157ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157b0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00157b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00157b6:	53                   	push   ebx
c00157b7:	e8 62 7a ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	31 d2                	xor    edx,edx
c00157c1:	b8 02 00 00 00       	mov    eax,0x2
c00157c6:	85 db                	test   ebx,ebx
c00157c8:	74 5b                	je     c0015825 <Sys::loadDLL(regs*)+0xa4>
c00157ca:	83 ec 0c             	sub    esp,0xc
c00157cd:	53                   	push   ebx
c00157ce:	e8 1d 7d ff ff       	call   c000d4f0 <File::exists()>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	84 c0                	test   al,al
c00157d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157da:	75 11                	jne    c00157ed <Sys::loadDLL(regs*)+0x6c>
c00157dc:	83 ec 0c             	sub    esp,0xc
c00157df:	53                   	push   ebx
c00157e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157e3:	83 c4 10             	add    esp,0x10
c00157e6:	b8 03 00 00 00       	mov    eax,0x3
c00157eb:	eb 36                	jmp    c0015823 <Sys::loadDLL(regs*)+0xa2>
c00157ed:	83 ec 0c             	sub    esp,0xc
c00157f0:	53                   	push   ebx
c00157f1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157f4:	58                   	pop    eax
c00157f5:	5a                   	pop    edx
c00157f6:	6a 00                	push   0x0
c00157f8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00157fb:	e8 0a 22 00 00       	call   c0017a0a <Thr::loadDLL(char const*, bool)>
c0015800:	83 c4 10             	add    esp,0x10
c0015803:	89 c1                	mov    ecx,eax
c0015805:	31 d2                	xor    edx,edx
c0015807:	b8 04 00 00 00       	mov    eax,0x4
c001580c:	85 c9                	test   ecx,ecx
c001580e:	74 15                	je     c0015825 <Sys::loadDLL(regs*)+0xa4>
c0015810:	53                   	push   ebx
c0015811:	53                   	push   ebx
c0015812:	ff 35 88 81 02 c0    	push   DWORD PTR ds:0xc0028188
c0015818:	51                   	push   ecx
c0015819:	e8 1d 24 00 00       	call   c0017c3b <Thr::executeDLL(unsigned long, void*)>
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	31 c0                	xor    eax,eax
c0015823:	31 d2                	xor    edx,edx
c0015825:	59                   	pop    ecx
c0015826:	5b                   	pop    ebx
c0015827:	5e                   	pop    esi
c0015828:	c3                   	ret    

c0015829 <Sys::read(regs*)>:
c0015829:	57                   	push   edi
c001582a:	56                   	push   esi
c001582b:	53                   	push   ebx
c001582c:	83 ec 10             	sub    esp,0x10
c001582f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015833:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015836:	83 f8 02             	cmp    eax,0x2
c0015839:	77 10                	ja     c001584b <Sys::read(regs*)+0x22>
c001583b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015840:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015843:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015849:	eb 0e                	jmp    c0015859 <Sys::read(regs*)+0x30>
c001584b:	83 ec 0c             	sub    esp,0xc
c001584e:	50                   	push   eax
c001584f:	e8 e3 5f ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015854:	83 c4 10             	add    esp,0x10
c0015857:	89 c1                	mov    ecx,eax
c0015859:	83 c8 ff             	or     eax,0xffffffff
c001585c:	85 c9                	test   ecx,ecx
c001585e:	89 c2                	mov    edx,eax
c0015860:	74 28                	je     c001588a <Sys::read(regs*)+0x61>
c0015862:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001586a:	31 ff                	xor    edi,edi
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015871:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015875:	52                   	push   edx
c0015876:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015879:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001587c:	57                   	push   edi
c001587d:	56                   	push   esi
c001587e:	51                   	push   ecx
c001587f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015882:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015886:	83 c4 20             	add    esp,0x20
c0015889:	99                   	cdq    
c001588a:	83 c4 10             	add    esp,0x10
c001588d:	5b                   	pop    ebx
c001588e:	5e                   	pop    esi
c001588f:	5f                   	pop    edi
c0015890:	c3                   	ret    

c0015891 <Sys::sbrk(regs*)>:
c0015891:	56                   	push   esi
c0015892:	53                   	push   ebx
c0015893:	50                   	push   eax
c0015894:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015899:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001589d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158a0:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00158a3:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00158a9:	85 db                	test   ebx,ebx
c00158ab:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00158ae:	74 02                	je     c00158b2 <Sys::sbrk(regs*)+0x21>
c00158b0:	79 06                	jns    c00158b8 <Sys::sbrk(regs*)+0x27>
c00158b2:	89 f0                	mov    eax,esi
c00158b4:	31 d2                	xor    edx,edx
c00158b6:	eb 2a                	jmp    c00158e2 <Sys::sbrk(regs*)+0x51>
c00158b8:	83 c8 ff             	or     eax,0xffffffff
c00158bb:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00158c1:	89 c2                	mov    edx,eax
c00158c3:	77 1d                	ja     c00158e2 <Sys::sbrk(regs*)+0x51>
c00158c5:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00158cb:	50                   	push   eax
c00158cc:	c1 ea 0c             	shr    edx,0xc
c00158cf:	68 07 0c 00 00       	push   0xc07
c00158d4:	52                   	push   edx
c00158d5:	51                   	push   ecx
c00158d6:	e8 5b 68 ff ff       	call   c000c136 <VAS::allocatePages(int, int)>
c00158db:	89 f0                	mov    eax,esi
c00158dd:	31 d2                	xor    edx,edx
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	59                   	pop    ecx
c00158e3:	5b                   	pop    ebx
c00158e4:	5e                   	pop    esi
c00158e5:	c3                   	ret    

c00158e6 <Sys::setCwd(regs*)>:
c00158e6:	83 ec 14             	sub    esp,0x14
c00158e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158ed:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00158f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158f5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00158f8:	e8 92 7c ff ff       	call   c000d58f <Fs::setcwd(Process*, char*)>
c00158fd:	83 c4 1c             	add    esp,0x1c
c0015900:	99                   	cdq    
c0015901:	c3                   	ret    

c0015902 <Sys::setTime(regs*)>:
c0015902:	55                   	push   ebp
c0015903:	31 c9                	xor    ecx,ecx
c0015905:	57                   	push   edi
c0015906:	bd 0c 00 00 00       	mov    ebp,0xc
c001590b:	56                   	push   esi
c001590c:	53                   	push   ebx
c001590d:	31 db                	xor    ebx,ebx
c001590f:	83 ec 10             	sub    esp,0x10
c0015912:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015916:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015919:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001591c:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001591f:	89 c2                	mov    edx,eax
c0015921:	66 81 ef 6c 07       	sub    di,0x76c
c0015926:	83 e2 1f             	and    edx,0x1f
c0015929:	c1 e7 10             	shl    edi,0x10
c001592c:	42                   	inc    edx
c001592d:	c1 e8 05             	shr    eax,0x5
c0015930:	88 d1                	mov    cl,dl
c0015932:	31 d2                	xor    edx,edx
c0015934:	f7 f5                	div    ebp
c0015936:	89 dd                	mov    ebp,ebx
c0015938:	88 d5                	mov    ch,dl
c001593a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015940:	0f b7 c1             	movzx  eax,cx
c0015943:	31 d2                	xor    edx,edx
c0015945:	09 f8                	or     eax,edi
c0015947:	bf 3c 00 00 00       	mov    edi,0x3c
c001594c:	89 c1                	mov    ecx,eax
c001594e:	89 f0                	mov    eax,esi
c0015950:	f7 f7                	div    edi
c0015952:	c1 e2 10             	shl    edx,0x10
c0015955:	09 d5                	or     ebp,edx
c0015957:	31 d2                	xor    edx,edx
c0015959:	89 eb                	mov    ebx,ebp
c001595b:	f7 f7                	div    edi
c001595d:	bf 10 0e 00 00       	mov    edi,0xe10
c0015962:	88 d7                	mov    bh,dl
c0015964:	89 f0                	mov    eax,esi
c0015966:	31 d2                	xor    edx,edx
c0015968:	f7 f7                	div    edi
c001596a:	bf 18 00 00 00       	mov    edi,0x18
c001596f:	31 d2                	xor    edx,edx
c0015971:	f7 f7                	div    edi
c0015973:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0015978:	88 d3                	mov    bl,dl
c001597a:	53                   	push   ebx
c001597b:	51                   	push   ecx
c001597c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015982:	e8 53 84 ff ff       	call   c000ddda <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015987:	83 c4 1c             	add    esp,0x1c
c001598a:	83 f0 01             	xor    eax,0x1
c001598d:	5b                   	pop    ebx
c001598e:	0f b6 c0             	movzx  eax,al
c0015991:	5e                   	pop    esi
c0015992:	31 d2                	xor    edx,edx
c0015994:	5f                   	pop    edi
c0015995:	5d                   	pop    ebp
c0015996:	c3                   	ret    

c0015997 <Sys::timezone(regs*)>:
c0015997:	53                   	push   ebx
c0015998:	83 ec 08             	sub    esp,0x8
c001599b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001599f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00159a3:	75 17                	jne    c00159bc <Sys::timezone(regs*)+0x25>
c00159a5:	83 ec 0c             	sub    esp,0xc
c00159a8:	68 21 5f 02 c0       	push   0xc0025f21
c00159ad:	e8 01 73 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00159b2:	83 c8 ff             	or     eax,0xffffffff
c00159b5:	83 c4 10             	add    esp,0x10
c00159b8:	89 c2                	mov    edx,eax
c00159ba:	eb 20                	jmp    c00159dc <Sys::timezone(regs*)+0x45>
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	68 36 5f 02 c0       	push   0xc0025f36
c00159c4:	e8 ea 72 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00159c9:	58                   	pop    eax
c00159ca:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00159cd:	e8 6a 81 ff ff       	call   c000db3c <User::loadClockSettings(int)>
c00159d2:	83 c4 10             	add    esp,0x10
c00159d5:	b8 01 00 00 00       	mov    eax,0x1
c00159da:	31 d2                	xor    edx,edx
c00159dc:	83 c4 08             	add    esp,0x8
c00159df:	5b                   	pop    ebx
c00159e0:	c3                   	ret    

c00159e1 <Sys::write(regs*)>:
c00159e1:	57                   	push   edi
c00159e2:	56                   	push   esi
c00159e3:	53                   	push   ebx
c00159e4:	83 ec 10             	sub    esp,0x10
c00159e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159ee:	83 f8 02             	cmp    eax,0x2
c00159f1:	77 10                	ja     c0015a03 <Sys::write(regs*)+0x22>
c00159f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00159fb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015a01:	eb 0e                	jmp    c0015a11 <Sys::write(regs*)+0x30>
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	50                   	push   eax
c0015a07:	e8 2b 5e ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	89 c1                	mov    ecx,eax
c0015a11:	83 c8 ff             	or     eax,0xffffffff
c0015a14:	85 c9                	test   ecx,ecx
c0015a16:	89 c2                	mov    edx,eax
c0015a18:	74 28                	je     c0015a42 <Sys::write(regs*)+0x61>
c0015a1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a22:	31 ff                	xor    edi,edi
c0015a24:	83 ec 0c             	sub    esp,0xc
c0015a27:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015a29:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015a2d:	52                   	push   edx
c0015a2e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a31:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015a34:	57                   	push   edi
c0015a35:	56                   	push   esi
c0015a36:	51                   	push   ecx
c0015a37:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015a3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a3e:	83 c4 20             	add    esp,0x20
c0015a41:	99                   	cdq    
c0015a42:	83 c4 10             	add    esp,0x10
c0015a45:	5b                   	pop    ebx
c0015a46:	5e                   	pop    esi
c0015a47:	5f                   	pop    edi
c0015a48:	c3                   	ret    

c0015a49 <Sys::wsbe(regs*)>:
c0015a49:	57                   	push   edi
c0015a4a:	b9 0b 00 00 00       	mov    ecx,0xb
c0015a4f:	56                   	push   esi
c0015a50:	be 75 5f 02 c0       	mov    esi,0xc0025f75
c0015a55:	53                   	push   ebx
c0015a56:	83 ec 30             	sub    esp,0x30
c0015a59:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015a5d:	fc                   	cld    
c0015a5e:	83 ec 0c             	sub    esp,0xc
c0015a61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015a63:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015a67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a6f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015a75:	8b 06                	mov    eax,DWORD PTR [esi]
c0015a77:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015a7a:	57                   	push   edi
c0015a7b:	e8 20 ac fe ff       	call   c00006a0 <strlen>
c0015a80:	5a                   	pop    edx
c0015a81:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015a85:	52                   	push   edx
c0015a86:	31 d2                	xor    edx,edx
c0015a88:	57                   	push   edi
c0015a89:	52                   	push   edx
c0015a8a:	50                   	push   eax
c0015a8b:	56                   	push   esi
c0015a8c:	ff d3                	call   ebx
c0015a8e:	83 c4 14             	add    esp,0x14
c0015a91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a95:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015a98:	e8 6b 32 00 00       	call   c0018d08 <terminateTask(int)>
c0015a9d:	83 c4 40             	add    esp,0x40
c0015aa0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015aa5:	5b                   	pop    ebx
c0015aa6:	31 d2                	xor    edx,edx
c0015aa8:	5e                   	pop    esi
c0015aa9:	5f                   	pop    edi
c0015aaa:	c3                   	ret    

c0015aab <Sys::yield(regs*)>:
c0015aab:	83 ec 0c             	sub    esp,0xc
c0015aae:	fa                   	cli    
c0015aaf:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0015ab5:	e8 36 29 00 00       	call   c00183f0 <schedule()>
c0015aba:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0015abf:	48                   	dec    eax
c0015ac0:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0015ac5:	75 01                	jne    c0015ac8 <Sys::yield(regs*)+0x1d>
c0015ac7:	fb                   	sti    
c0015ac8:	8b 15 ac 87 02 c0    	mov    edx,DWORD PTR ds:0xc00287ac
c0015ace:	83 c4 0c             	add    esp,0xc
c0015ad1:	89 d0                	mov    eax,edx
c0015ad3:	c1 ea 11             	shr    edx,0x11
c0015ad6:	c1 e0 07             	shl    eax,0x7
c0015ad9:	25 80 30 0f 00       	and    eax,0xf3080
c0015ade:	31 d0                	xor    eax,edx
c0015ae0:	31 d2                	xor    edx,edx
c0015ae2:	c3                   	ret    

c0015ae3 <sysCallSeekDir(regs*)>:
c0015ae3:	31 c0                	xor    eax,eax
c0015ae5:	31 d2                	xor    edx,edx
c0015ae7:	c3                   	ret    

c0015ae8 <sysCallTellDir(regs*)>:
c0015ae8:	31 c0                	xor    eax,eax
c0015aea:	31 d2                	xor    edx,edx
c0015aec:	c3                   	ret    

c0015aed <sysCallVerify(regs*)>:
c0015aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015af1:	31 d2                	xor    edx,edx
c0015af3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015af6:	c3                   	ret    

c0015af7 <sysCallGetArgc(regs*)>:
c0015af7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015afc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015aff:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015b05:	99                   	cdq    
c0015b06:	c3                   	ret    

c0015b07 <sysFormatDisk(regs*)>:
c0015b07:	56                   	push   esi
c0015b08:	53                   	push   ebx
c0015b09:	53                   	push   ebx
c0015b0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b0e:	8b 1d b4 82 02 c0    	mov    ebx,DWORD PTR ds:0xc00282b4
c0015b14:	eb 25                	jmp    c0015b3b <sysFormatDisk(regs*)+0x34>
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b1c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015b1e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015b21:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015b24:	50                   	push   eax
c0015b25:	ff 34 85 40 87 02 c0 	push   DWORD PTR [eax*4-0x3ffd78c0]
c0015b2c:	53                   	push   ebx
c0015b2d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015b30:	83 c4 20             	add    esp,0x20
c0015b33:	83 f8 08             	cmp    eax,0x8
c0015b36:	75 12                	jne    c0015b4a <sysFormatDisk(regs*)+0x43>
c0015b38:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015b3b:	85 db                	test   ebx,ebx
c0015b3d:	75 d7                	jne    c0015b16 <sysFormatDisk(regs*)+0xf>
c0015b3f:	59                   	pop    ecx
c0015b40:	b8 03 00 00 00       	mov    eax,0x3
c0015b45:	31 d2                	xor    edx,edx
c0015b47:	5b                   	pop    ebx
c0015b48:	5e                   	pop    esi
c0015b49:	c3                   	ret    
c0015b4a:	85 c0                	test   eax,eax
c0015b4c:	74 1b                	je     c0015b69 <sysFormatDisk(regs*)+0x62>
c0015b4e:	83 f8 09             	cmp    eax,0x9
c0015b51:	74 0b                	je     c0015b5e <sysFormatDisk(regs*)+0x57>
c0015b53:	59                   	pop    ecx
c0015b54:	b8 02 00 00 00       	mov    eax,0x2
c0015b59:	31 d2                	xor    edx,edx
c0015b5b:	5b                   	pop    ebx
c0015b5c:	5e                   	pop    esi
c0015b5d:	c3                   	ret    
c0015b5e:	59                   	pop    ecx
c0015b5f:	b8 01 00 00 00       	mov    eax,0x1
c0015b64:	31 d2                	xor    edx,edx
c0015b66:	5b                   	pop    ebx
c0015b67:	5e                   	pop    esi
c0015b68:	c3                   	ret    
c0015b69:	59                   	pop    ecx
c0015b6a:	31 c0                	xor    eax,eax
c0015b6c:	31 d2                	xor    edx,edx
c0015b6e:	5b                   	pop    ebx
c0015b6f:	5e                   	pop    esi
c0015b70:	c3                   	ret    

c0015b71 <sysSetDiskVolumeLabel(regs*)>:
c0015b71:	56                   	push   esi
c0015b72:	53                   	push   ebx
c0015b73:	53                   	push   ebx
c0015b74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b78:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b7b:	83 f8 19             	cmp    eax,0x19
c0015b7e:	77 2d                	ja     c0015bad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b80:	8b 0c 85 40 87 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd78c0]
c0015b87:	85 c9                	test   ecx,ecx
c0015b89:	74 22                	je     c0015bad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b8b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015b8e:	85 db                	test   ebx,ebx
c0015b90:	74 1b                	je     c0015bad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b92:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015b98:	85 d2                	test   edx,edx
c0015b9a:	74 11                	je     c0015bad <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015b9c:	8b 32                	mov    esi,DWORD PTR [edx]
c0015b9e:	53                   	push   ebx
c0015b9f:	50                   	push   eax
c0015ba0:	51                   	push   ecx
c0015ba1:	52                   	push   edx
c0015ba2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015ba5:	83 c4 10             	add    esp,0x10
c0015ba8:	99                   	cdq    
c0015ba9:	59                   	pop    ecx
c0015baa:	5b                   	pop    ebx
c0015bab:	5e                   	pop    esi
c0015bac:	c3                   	ret    
c0015bad:	59                   	pop    ecx
c0015bae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015bb3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bb8:	5b                   	pop    ebx
c0015bb9:	5e                   	pop    esi
c0015bba:	c3                   	ret    

c0015bbb <sysGetDiskVolumeLabel(regs*)>:
c0015bbb:	57                   	push   edi
c0015bbc:	56                   	push   esi
c0015bbd:	53                   	push   ebx
c0015bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bc2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bc5:	83 fa 19             	cmp    edx,0x19
c0015bc8:	77 38                	ja     c0015c02 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bca:	8b 0c 95 40 87 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd78c0]
c0015bd1:	85 c9                	test   ecx,ecx
c0015bd3:	74 2d                	je     c0015c02 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bd5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015bd8:	85 db                	test   ebx,ebx
c0015bda:	74 26                	je     c0015c02 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bdc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015bdf:	85 f6                	test   esi,esi
c0015be1:	74 1f                	je     c0015c02 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015be3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015be9:	85 c0                	test   eax,eax
c0015beb:	74 15                	je     c0015c02 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015bed:	83 ec 0c             	sub    esp,0xc
c0015bf0:	8b 38                	mov    edi,DWORD PTR [eax]
c0015bf2:	56                   	push   esi
c0015bf3:	53                   	push   ebx
c0015bf4:	52                   	push   edx
c0015bf5:	51                   	push   ecx
c0015bf6:	50                   	push   eax
c0015bf7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015bfa:	83 c4 20             	add    esp,0x20
c0015bfd:	99                   	cdq    
c0015bfe:	5b                   	pop    ebx
c0015bff:	5e                   	pop    esi
c0015c00:	5f                   	pop    edi
c0015c01:	c3                   	ret    
c0015c02:	5b                   	pop    ebx
c0015c03:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015c08:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c0d:	5e                   	pop    esi
c0015c0e:	5f                   	pop    edi
c0015c0f:	c3                   	ret    

c0015c10 <sysShutdown(regs*)>:
c0015c10:	83 ec 0c             	sub    esp,0xc
c0015c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015c1a:	85 c0                	test   eax,eax
c0015c1c:	74 18                	je     c0015c36 <sysShutdown(regs*)+0x26>
c0015c1e:	83 f8 01             	cmp    eax,0x1
c0015c21:	74 38                	je     c0015c5b <sysShutdown(regs*)+0x4b>
c0015c23:	83 f8 02             	cmp    eax,0x2
c0015c26:	74 24                	je     c0015c4c <sysShutdown(regs*)+0x3c>
c0015c28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c2d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c32:	83 c4 0c             	add    esp,0xc
c0015c35:	c3                   	ret    
c0015c36:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0015c3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c3d:	6a 00                	push   0x0
c0015c3f:	6a 00                	push   0x0
c0015c41:	6a 00                	push   0x0
c0015c43:	50                   	push   eax
c0015c44:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015c47:	83 c4 10             	add    esp,0x10
c0015c4a:	eb dc                	jmp    c0015c28 <sysShutdown(regs*)+0x18>
c0015c4c:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0015c51:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c53:	6a 00                	push   0x0
c0015c55:	6a 00                	push   0x0
c0015c57:	6a 01                	push   0x1
c0015c59:	eb e8                	jmp    c0015c43 <sysShutdown(regs*)+0x33>
c0015c5b:	a1 c0 87 02 c0       	mov    eax,ds:0xc00287c0
c0015c60:	85 c0                	test   eax,eax
c0015c62:	74 02                	je     c0015c66 <sysShutdown(regs*)+0x56>
c0015c64:	ff d0                	call   eax
c0015c66:	31 c0                	xor    eax,eax
c0015c68:	31 d2                	xor    edx,edx
c0015c6a:	83 c4 0c             	add    esp,0xc
c0015c6d:	c3                   	ret    

c0015c6e <sysCallRealpath(regs*)>:
c0015c6e:	83 ec 0c             	sub    esp,0xc
c0015c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c75:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015c78:	85 d2                	test   edx,edx
c0015c7a:	74 07                	je     c0015c83 <sysCallRealpath(regs*)+0x15>
c0015c7c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015c7f:	85 c0                	test   eax,eax
c0015c81:	75 0b                	jne    c0015c8e <sysCallRealpath(regs*)+0x20>
c0015c83:	b8 01 00 00 00       	mov    eax,0x1
c0015c88:	31 d2                	xor    edx,edx
c0015c8a:	83 c4 0c             	add    esp,0xc
c0015c8d:	c3                   	ret    
c0015c8e:	51                   	push   ecx
c0015c8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015c95:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015c98:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015c9e:	51                   	push   ecx
c0015c9f:	52                   	push   edx
c0015ca0:	50                   	push   eax
c0015ca1:	e8 ce 73 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015ca6:	83 c4 10             	add    esp,0x10
c0015ca9:	31 c0                	xor    eax,eax
c0015cab:	31 d2                	xor    edx,edx
c0015cad:	83 c4 0c             	add    esp,0xc
c0015cb0:	c3                   	ret    

c0015cb1 <sysCallReadDir(regs*)>:
c0015cb1:	53                   	push   ebx
c0015cb2:	83 ec 18             	sub    esp,0x18
c0015cb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015cb9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015cbc:	83 f8 02             	cmp    eax,0x2
c0015cbf:	76 60                	jbe    c0015d21 <sysCallReadDir(regs*)+0x70>
c0015cc1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015cc8:	77 48                	ja     c0015d12 <sysCallReadDir(regs*)+0x61>
c0015cca:	83 ec 0c             	sub    esp,0xc
c0015ccd:	50                   	push   eax
c0015cce:	e8 64 5b ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015cd3:	83 c4 10             	add    esp,0x10
c0015cd6:	85 c0                	test   eax,eax
c0015cd8:	74 38                	je     c0015d12 <sysCallReadDir(regs*)+0x61>
c0015cda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ce7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015ceb:	51                   	push   ecx
c0015cec:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015cef:	6a 00                	push   0x0
c0015cf1:	68 10 01 00 00       	push   0x110
c0015cf6:	50                   	push   eax
c0015cf7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015cfa:	83 c4 20             	add    esp,0x20
c0015cfd:	85 c0                	test   eax,eax
c0015cff:	74 29                	je     c0015d2a <sysCallReadDir(regs*)+0x79>
c0015d01:	83 f8 07             	cmp    eax,0x7
c0015d04:	74 1b                	je     c0015d21 <sysCallReadDir(regs*)+0x70>
c0015d06:	b8 02 00 00 00       	mov    eax,0x2
c0015d0b:	31 d2                	xor    edx,edx
c0015d0d:	83 c4 18             	add    esp,0x18
c0015d10:	5b                   	pop    ebx
c0015d11:	c3                   	ret    
c0015d12:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d17:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d1c:	83 c4 18             	add    esp,0x18
c0015d1f:	5b                   	pop    ebx
c0015d20:	c3                   	ret    
c0015d21:	b8 01 00 00 00       	mov    eax,0x1
c0015d26:	31 d2                	xor    edx,edx
c0015d28:	eb e3                	jmp    c0015d0d <sysCallReadDir(regs*)+0x5c>
c0015d2a:	31 c0                	xor    eax,eax
c0015d2c:	31 d2                	xor    edx,edx
c0015d2e:	eb dd                	jmp    c0015d0d <sysCallReadDir(regs*)+0x5c>

c0015d30 <sysCallIsATTY(regs*)>:
c0015d30:	83 ec 0c             	sub    esp,0xc
c0015d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015d3a:	83 f8 02             	cmp    eax,0x2
c0015d3d:	76 07                	jbe    c0015d46 <sysCallIsATTY(regs*)+0x16>
c0015d3f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015d44:	75 26                	jne    c0015d6c <sysCallIsATTY(regs*)+0x3c>
c0015d46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d54:	85 c0                	test   eax,eax
c0015d56:	74 24                	je     c0015d7c <sysCallIsATTY(regs*)+0x4c>
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d5d:	50                   	push   eax
c0015d5e:	ff 12                	call   DWORD PTR [edx]
c0015d60:	31 d2                	xor    edx,edx
c0015d62:	0f b6 c0             	movzx  eax,al
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	83 c4 0c             	add    esp,0xc
c0015d6b:	c3                   	ret    
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	50                   	push   eax
c0015d70:	e8 c2 5a ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015d75:	83 c4 10             	add    esp,0x10
c0015d78:	85 c0                	test   eax,eax
c0015d7a:	75 dc                	jne    c0015d58 <sysCallIsATTY(regs*)+0x28>
c0015d7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d86:	83 c4 0c             	add    esp,0xc
c0015d89:	c3                   	ret    

c0015d8a <sysCallSeek(regs*)>:
c0015d8a:	53                   	push   ebx
c0015d8b:	83 ec 08             	sub    esp,0x8
c0015d8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d92:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d95:	8d 50 fd             	lea    edx,[eax-0x3]
c0015d98:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015d9e:	77 32                	ja     c0015dd2 <sysCallSeek(regs*)+0x48>
c0015da0:	83 ec 0c             	sub    esp,0xc
c0015da3:	50                   	push   eax
c0015da4:	e8 8e 5a ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015da9:	83 c4 0c             	add    esp,0xc
c0015dac:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015daf:	31 db                	xor    ebx,ebx
c0015db1:	53                   	push   ebx
c0015db2:	51                   	push   ecx
c0015db3:	50                   	push   eax
c0015db4:	e8 87 75 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	85 c0                	test   eax,eax
c0015dbe:	0f 95 c0             	setne  al
c0015dc1:	31 d2                	xor    edx,edx
c0015dc3:	0f b6 c0             	movzx  eax,al
c0015dc6:	f7 d8                	neg    eax
c0015dc8:	83 d2 00             	adc    edx,0x0
c0015dcb:	83 c4 08             	add    esp,0x8
c0015dce:	f7 da                	neg    edx
c0015dd0:	5b                   	pop    ebx
c0015dd1:	c3                   	ret    
c0015dd2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dd7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ddc:	83 c4 08             	add    esp,0x8
c0015ddf:	5b                   	pop    ebx
c0015de0:	c3                   	ret    

c0015de1 <sysCallTell(regs*)>:
c0015de1:	53                   	push   ebx
c0015de2:	83 ec 08             	sub    esp,0x8
c0015de5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015de9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015dec:	83 f8 02             	cmp    eax,0x2
c0015def:	76 4d                	jbe    c0015e3e <sysCallTell(regs*)+0x5d>
c0015df1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015df6:	76 19                	jbe    c0015e11 <sysCallTell(regs*)+0x30>
c0015df8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015dfb:	31 d2                	xor    edx,edx
c0015dfd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e03:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e0a:	31 c0                	xor    eax,eax
c0015e0c:	83 c4 08             	add    esp,0x8
c0015e0f:	5b                   	pop    ebx
c0015e10:	c3                   	ret    
c0015e11:	83 ec 0c             	sub    esp,0xc
c0015e14:	50                   	push   eax
c0015e15:	e8 1d 5a ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015e1a:	5a                   	pop    edx
c0015e1b:	59                   	pop    ecx
c0015e1c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e1f:	50                   	push   eax
c0015e20:	e8 71 75 ff ff       	call   c000d396 <File::tell(unsigned long long*)>
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	85 c0                	test   eax,eax
c0015e2a:	0f 95 c0             	setne  al
c0015e2d:	31 d2                	xor    edx,edx
c0015e2f:	0f b6 c0             	movzx  eax,al
c0015e32:	f7 d8                	neg    eax
c0015e34:	83 d2 00             	adc    edx,0x0
c0015e37:	83 c4 08             	add    esp,0x8
c0015e3a:	f7 da                	neg    edx
c0015e3c:	5b                   	pop    ebx
c0015e3d:	c3                   	ret    
c0015e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015e48:	83 c4 08             	add    esp,0x8
c0015e4b:	5b                   	pop    ebx
c0015e4c:	c3                   	ret    

c0015e4d <sysCallSize(regs*)>:
c0015e4d:	53                   	push   ebx
c0015e4e:	83 ec 18             	sub    esp,0x18
c0015e51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e58:	83 f8 02             	cmp    eax,0x2
c0015e5b:	76 53                	jbe    c0015eb0 <sysCallSize(regs*)+0x63>
c0015e5d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015e62:	76 19                	jbe    c0015e7d <sysCallSize(regs*)+0x30>
c0015e64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e67:	31 d2                	xor    edx,edx
c0015e69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015e6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e76:	31 c0                	xor    eax,eax
c0015e78:	83 c4 18             	add    esp,0x18
c0015e7b:	5b                   	pop    ebx
c0015e7c:	c3                   	ret    
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	50                   	push   eax
c0015e81:	e8 b1 59 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015e86:	83 c4 0c             	add    esp,0xc
c0015e89:	8d 54 24 13          	lea    edx,[esp+0x13]
c0015e8d:	52                   	push   edx
c0015e8e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015e91:	50                   	push   eax
c0015e92:	e8 97 76 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	85 c0                	test   eax,eax
c0015e9c:	0f 95 c0             	setne  al
c0015e9f:	31 d2                	xor    edx,edx
c0015ea1:	0f b6 c0             	movzx  eax,al
c0015ea4:	f7 d8                	neg    eax
c0015ea6:	83 d2 00             	adc    edx,0x0
c0015ea9:	83 c4 18             	add    esp,0x18
c0015eac:	f7 da                	neg    edx
c0015eae:	5b                   	pop    ebx
c0015eaf:	c3                   	ret    
c0015eb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015eb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015eba:	83 c4 18             	add    esp,0x18
c0015ebd:	5b                   	pop    ebx
c0015ebe:	c3                   	ret    

c0015ebf <sysCallSizeFromFilename(regs*)>:
c0015ebf:	57                   	push   edi
c0015ec0:	56                   	push   esi
c0015ec1:	53                   	push   ebx
c0015ec2:	83 ec 20             	sub    esp,0x20
c0015ec5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015ec9:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015ecc:	83 fb 02             	cmp    ebx,0x2
c0015ecf:	0f 86 88 00 00 00    	jbe    c0015f5d <sysCallSizeFromFilename(regs*)+0x9e>
c0015ed5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015edb:	76 1b                	jbe    c0015ef8 <sysCallSizeFromFilename(regs*)+0x39>
c0015edd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015ee0:	31 d2                	xor    edx,edx
c0015ee2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ee8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015eef:	83 c4 20             	add    esp,0x20
c0015ef2:	31 c0                	xor    eax,eax
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	5f                   	pop    edi
c0015ef7:	c3                   	ret    
c0015ef8:	83 ec 0c             	sub    esp,0xc
c0015efb:	68 14 01 00 00       	push   0x114
c0015f00:	e8 be 3a ff ff       	call   c00099c3 <malloc>
c0015f05:	83 c4 0c             	add    esp,0xc
c0015f08:	89 c7                	mov    edi,eax
c0015f0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015f12:	53                   	push   ebx
c0015f13:	57                   	push   edi
c0015f14:	e8 05 73 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0015f19:	83 c4 0c             	add    esp,0xc
c0015f1c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015f20:	50                   	push   eax
c0015f21:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015f24:	57                   	push   edi
c0015f25:	e8 04 76 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	85 ff                	test   edi,edi
c0015f2f:	74 14                	je     c0015f45 <sysCallSizeFromFilename(regs*)+0x86>
c0015f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f35:	8b 17                	mov    edx,DWORD PTR [edi]
c0015f37:	83 ec 0c             	sub    esp,0xc
c0015f3a:	57                   	push   edi
c0015f3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015f3e:	83 c4 10             	add    esp,0x10
c0015f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f45:	85 c0                	test   eax,eax
c0015f47:	0f 95 c0             	setne  al
c0015f4a:	31 d2                	xor    edx,edx
c0015f4c:	0f b6 c0             	movzx  eax,al
c0015f4f:	f7 d8                	neg    eax
c0015f51:	83 d2 00             	adc    edx,0x0
c0015f54:	83 c4 20             	add    esp,0x20
c0015f57:	f7 da                	neg    edx
c0015f59:	5b                   	pop    ebx
c0015f5a:	5e                   	pop    esi
c0015f5b:	5f                   	pop    edi
c0015f5c:	c3                   	ret    
c0015f5d:	83 c4 20             	add    esp,0x20
c0015f60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f65:	5b                   	pop    ebx
c0015f66:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f6b:	5e                   	pop    esi
c0015f6c:	5f                   	pop    edi
c0015f6d:	c3                   	ret    

c0015f6e <sysCallClose(regs*)>:
c0015f6e:	53                   	push   ebx
c0015f6f:	83 ec 08             	sub    esp,0x8
c0015f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f79:	83 f8 02             	cmp    eax,0x2
c0015f7c:	76 41                	jbe    c0015fbf <sysCallClose(regs*)+0x51>
c0015f7e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015f84:	83 fa 01             	cmp    edx,0x1
c0015f87:	76 2d                	jbe    c0015fb6 <sysCallClose(regs*)+0x48>
c0015f89:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015f8e:	77 2f                	ja     c0015fbf <sysCallClose(regs*)+0x51>
c0015f90:	83 ec 0c             	sub    esp,0xc
c0015f93:	50                   	push   eax
c0015f94:	e8 9e 58 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0015f99:	89 c3                	mov    ebx,eax
c0015f9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f9e:	e8 3d 73 ff ff       	call   c000d2e0 <File::close()>
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	85 db                	test   ebx,ebx
c0015fa8:	74 0c                	je     c0015fb6 <sysCallClose(regs*)+0x48>
c0015faa:	83 ec 0c             	sub    esp,0xc
c0015fad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015faf:	53                   	push   ebx
c0015fb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fb3:	83 c4 10             	add    esp,0x10
c0015fb6:	31 c0                	xor    eax,eax
c0015fb8:	31 d2                	xor    edx,edx
c0015fba:	83 c4 08             	add    esp,0x8
c0015fbd:	5b                   	pop    ebx
c0015fbe:	c3                   	ret    
c0015fbf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fc4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015fc9:	83 c4 08             	add    esp,0x8
c0015fcc:	5b                   	pop    ebx
c0015fcd:	c3                   	ret    

c0015fce <sysCallOpenDir(regs*)>:
c0015fce:	56                   	push   esi
c0015fcf:	53                   	push   ebx
c0015fd0:	53                   	push   ebx
c0015fd1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fd5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015fd8:	85 f6                	test   esi,esi
c0015fda:	74 59                	je     c0016035 <sysCallOpenDir(regs*)+0x67>
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	68 14 01 00 00       	push   0x114
c0015fe4:	e8 da 39 ff ff       	call   c00099c3 <malloc>
c0015fe9:	83 c4 0c             	add    esp,0xc
c0015fec:	89 c6                	mov    esi,eax
c0015fee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ff6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015ff9:	56                   	push   esi
c0015ffa:	e8 cb 76 ff ff       	call   c000d6ca <Directory::Directory(char const*, Process*)>
c0015fff:	83 c4 10             	add    esp,0x10
c0016002:	85 f6                	test   esi,esi
c0016004:	74 2f                	je     c0016035 <sysCallOpenDir(regs*)+0x67>
c0016006:	83 ec 0c             	sub    esp,0xc
c0016009:	56                   	push   esi
c001600a:	e8 1f 77 ff ff       	call   c000d72e <Directory::open()>
c001600f:	83 c4 10             	add    esp,0x10
c0016012:	85 c0                	test   eax,eax
c0016014:	75 1f                	jne    c0016035 <sysCallOpenDir(regs*)+0x67>
c0016016:	83 ec 0c             	sub    esp,0xc
c0016019:	56                   	push   esi
c001601a:	e8 23 55 ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c001601f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016022:	83 c4 10             	add    esp,0x10
c0016025:	89 02                	mov    DWORD PTR [edx],eax
c0016027:	c1 f8 1f             	sar    eax,0x1f
c001602a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001602d:	31 c0                	xor    eax,eax
c001602f:	59                   	pop    ecx
c0016030:	31 d2                	xor    edx,edx
c0016032:	5b                   	pop    ebx
c0016033:	5e                   	pop    esi
c0016034:	c3                   	ret    
c0016035:	59                   	pop    ecx
c0016036:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001603b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016040:	5b                   	pop    ebx
c0016041:	5e                   	pop    esi
c0016042:	c3                   	ret    

c0016043 <sysCallCloseDir(regs*)>:
c0016043:	53                   	push   ebx
c0016044:	83 ec 08             	sub    esp,0x8
c0016047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001604b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001604e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016051:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016057:	77 2f                	ja     c0016088 <sysCallCloseDir(regs*)+0x45>
c0016059:	83 ec 0c             	sub    esp,0xc
c001605c:	50                   	push   eax
c001605d:	e8 d5 57 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c0016062:	89 c3                	mov    ebx,eax
c0016064:	89 04 24             	mov    DWORD PTR [esp],eax
c0016067:	e8 1e 77 ff ff       	call   c000d78a <Directory::close()>
c001606c:	83 c4 10             	add    esp,0x10
c001606f:	85 db                	test   ebx,ebx
c0016071:	74 0c                	je     c001607f <sysCallCloseDir(regs*)+0x3c>
c0016073:	83 ec 0c             	sub    esp,0xc
c0016076:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016078:	53                   	push   ebx
c0016079:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001607c:	83 c4 10             	add    esp,0x10
c001607f:	31 c0                	xor    eax,eax
c0016081:	31 d2                	xor    edx,edx
c0016083:	83 c4 08             	add    esp,0x8
c0016086:	5b                   	pop    ebx
c0016087:	c3                   	ret    
c0016088:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001608d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016092:	83 c4 08             	add    esp,0x8
c0016095:	5b                   	pop    ebx
c0016096:	c3                   	ret    

c0016097 <sysCallMakeDir(regs*)>:
c0016097:	56                   	push   esi
c0016098:	53                   	push   ebx
c0016099:	83 ec 10             	sub    esp,0x10
c001609c:	68 14 01 00 00       	push   0x114
c00160a1:	e8 1d 39 ff ff       	call   c00099c3 <malloc>
c00160a6:	83 c4 0c             	add    esp,0xc
c00160a9:	89 c3                	mov    ebx,eax
c00160ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160b0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00160b7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00160ba:	53                   	push   ebx
c00160bb:	e8 0a 76 ff ff       	call   c000d6ca <Directory::Directory(char const*, Process*)>
c00160c0:	83 c4 10             	add    esp,0x10
c00160c3:	85 db                	test   ebx,ebx
c00160c5:	74 32                	je     c00160f9 <sysCallMakeDir(regs*)+0x62>
c00160c7:	83 ec 0c             	sub    esp,0xc
c00160ca:	53                   	push   ebx
c00160cb:	e8 3e 78 ff ff       	call   c000d90e <Directory::create()>
c00160d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160d3:	89 c6                	mov    esi,eax
c00160d5:	e8 b0 76 ff ff       	call   c000d78a <Directory::close()>
c00160da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	31 c0                	xor    eax,eax
c00160e7:	59                   	pop    ecx
c00160e8:	85 f6                	test   esi,esi
c00160ea:	5b                   	pop    ebx
c00160eb:	0f 95 c0             	setne  al
c00160ee:	5e                   	pop    esi
c00160ef:	31 d2                	xor    edx,edx
c00160f1:	f7 d8                	neg    eax
c00160f3:	83 d2 00             	adc    edx,0x0
c00160f6:	f7 da                	neg    edx
c00160f8:	c3                   	ret    
c00160f9:	59                   	pop    ecx
c00160fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016104:	5b                   	pop    ebx
c0016105:	5e                   	pop    esi
c0016106:	c3                   	ret    

c0016107 <sysCallWait(regs*)>:
c0016107:	83 ec 10             	sub    esp,0x10
c001610a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001610e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016111:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016114:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016117:	e8 fc 24 00 00       	call   c0018618 <waitTask(int, int*, int)>
c001611c:	83 c4 1c             	add    esp,0x1c
c001611f:	99                   	cdq    
c0016120:	c3                   	ret    

c0016121 <sysCallNotImpl(regs*)>:
c0016121:	83 ec 18             	sub    esp,0x18
c0016124:	68 a1 5f 02 c0       	push   0xc0025fa1
c0016129:	e8 f1 e6 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001612e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016133:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016138:	83 c4 1c             	add    esp,0x1c
c001613b:	c3                   	ret    

c001613c <sysPanic(regs*)>:
c001613c:	83 ec 18             	sub    esp,0x18
c001613f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016143:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016146:	e8 d4 e6 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001614b:	b8 01 00 00 00       	mov    eax,0x1
c0016150:	31 d2                	xor    edx,edx
c0016152:	83 c4 1c             	add    esp,0x1c
c0016155:	c3                   	ret    

c0016156 <sysCallRmdir(regs*)>:
c0016156:	56                   	push   esi
c0016157:	53                   	push   ebx
c0016158:	83 ec 20             	sub    esp,0x20
c001615b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001615f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016162:	68 14 01 00 00       	push   0x114
c0016167:	e8 57 38 ff ff       	call   c00099c3 <malloc>
c001616c:	83 c4 0c             	add    esp,0xc
c001616f:	89 c3                	mov    ebx,eax
c0016171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016176:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016179:	56                   	push   esi
c001617a:	53                   	push   ebx
c001617b:	e8 9e 70 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016180:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016183:	e8 72 72 ff ff       	call   c000d3fa <File::unlink()>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	85 db                	test   ebx,ebx
c001618d:	74 14                	je     c00161a3 <sysCallRmdir(regs*)+0x4d>
c001618f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016193:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016195:	83 ec 0c             	sub    esp,0xc
c0016198:	53                   	push   ebx
c0016199:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00161a3:	85 c0                	test   eax,eax
c00161a5:	0f 95 c0             	setne  al
c00161a8:	31 d2                	xor    edx,edx
c00161aa:	0f b6 c0             	movzx  eax,al
c00161ad:	f7 d8                	neg    eax
c00161af:	83 d2 00             	adc    edx,0x0
c00161b2:	83 c4 14             	add    esp,0x14
c00161b5:	f7 da                	neg    edx
c00161b7:	5b                   	pop    ebx
c00161b8:	5e                   	pop    esi
c00161b9:	c3                   	ret    

c00161ba <sysCallUnlink(regs*)>:
c00161ba:	56                   	push   esi
c00161bb:	53                   	push   ebx
c00161bc:	83 ec 20             	sub    esp,0x20
c00161bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00161c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00161c6:	68 14 01 00 00       	push   0x114
c00161cb:	e8 f3 37 ff ff       	call   c00099c3 <malloc>
c00161d0:	83 c4 0c             	add    esp,0xc
c00161d3:	89 c3                	mov    ebx,eax
c00161d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161da:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161dd:	56                   	push   esi
c00161de:	53                   	push   ebx
c00161df:	e8 3a 70 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00161e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161e7:	e8 0e 72 ff ff       	call   c000d3fa <File::unlink()>
c00161ec:	83 c4 10             	add    esp,0x10
c00161ef:	85 db                	test   ebx,ebx
c00161f1:	74 14                	je     c0016207 <sysCallUnlink(regs*)+0x4d>
c00161f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161f9:	83 ec 0c             	sub    esp,0xc
c00161fc:	53                   	push   ebx
c00161fd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016200:	83 c4 10             	add    esp,0x10
c0016203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016207:	85 c0                	test   eax,eax
c0016209:	0f 95 c0             	setne  al
c001620c:	31 d2                	xor    edx,edx
c001620e:	0f b6 c0             	movzx  eax,al
c0016211:	f7 d8                	neg    eax
c0016213:	83 d2 00             	adc    edx,0x0
c0016216:	83 c4 14             	add    esp,0x14
c0016219:	f7 da                	neg    edx
c001621b:	5b                   	pop    ebx
c001621c:	5e                   	pop    esi
c001621d:	c3                   	ret    

c001621e <sysCallGetArgv(regs*)>:
c001621e:	83 ec 0c             	sub    esp,0xc
c0016221:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016225:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016228:	85 c0                	test   eax,eax
c001622a:	78 2b                	js     c0016257 <sysCallGetArgv(regs*)+0x39>
c001622c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016232:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016235:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001623b:	7d 1a                	jge    c0016257 <sysCallGetArgv(regs*)+0x39>
c001623d:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016244:	85 c0                	test   eax,eax
c0016246:	74 17                	je     c001625f <sysCallGetArgv(regs*)+0x41>
c0016248:	83 ec 08             	sub    esp,0x8
c001624b:	50                   	push   eax
c001624c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001624f:	e8 ec a4 fe ff       	call   c0000740 <strcpy>
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	31 c0                	xor    eax,eax
c0016259:	31 d2                	xor    edx,edx
c001625b:	83 c4 0c             	add    esp,0xc
c001625e:	c3                   	ret    
c001625f:	b8 01 00 00 00       	mov    eax,0x1
c0016264:	31 d2                	xor    edx,edx
c0016266:	83 c4 0c             	add    esp,0xc
c0016269:	c3                   	ret    

c001626a <sysCallTTYName(regs*)>:
c001626a:	56                   	push   esi
c001626b:	53                   	push   ebx
c001626c:	53                   	push   ebx
c001626d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016271:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016274:	85 c0                	test   eax,eax
c0016276:	74 5f                	je     c00162d7 <sysCallTTYName(regs*)+0x6d>
c0016278:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001627b:	83 f8 02             	cmp    eax,0x2
c001627e:	77 3e                	ja     c00162be <sysCallTTYName(regs*)+0x54>
c0016280:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016285:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016288:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001628e:	85 db                	test   ebx,ebx
c0016290:	74 45                	je     c00162d7 <sysCallTTYName(regs*)+0x6d>
c0016292:	83 ec 0c             	sub    esp,0xc
c0016295:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016297:	53                   	push   ebx
c0016298:	ff 10                	call   DWORD PTR [eax]
c001629a:	83 c4 10             	add    esp,0x10
c001629d:	84 c0                	test   al,al
c001629f:	74 41                	je     c00162e2 <sysCallTTYName(regs*)+0x78>
c00162a1:	83 ec 08             	sub    esp,0x8
c00162a4:	81 c3 82 00 00 00    	add    ebx,0x82
c00162aa:	53                   	push   ebx
c00162ab:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00162ae:	e8 8d a4 fe ff       	call   c0000740 <strcpy>
c00162b3:	83 c4 10             	add    esp,0x10
c00162b6:	31 c0                	xor    eax,eax
c00162b8:	59                   	pop    ecx
c00162b9:	31 d2                	xor    edx,edx
c00162bb:	5b                   	pop    ebx
c00162bc:	5e                   	pop    esi
c00162bd:	c3                   	ret    
c00162be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00162c3:	74 bb                	je     c0016280 <sysCallTTYName(regs*)+0x16>
c00162c5:	83 ec 0c             	sub    esp,0xc
c00162c8:	50                   	push   eax
c00162c9:	e8 69 55 ff ff       	call   c000b837 <getFromFileDescriptor(int)>
c00162ce:	83 c4 10             	add    esp,0x10
c00162d1:	89 c3                	mov    ebx,eax
c00162d3:	85 db                	test   ebx,ebx
c00162d5:	75 bb                	jne    c0016292 <sysCallTTYName(regs*)+0x28>
c00162d7:	59                   	pop    ecx
c00162d8:	b8 01 00 00 00       	mov    eax,0x1
c00162dd:	31 d2                	xor    edx,edx
c00162df:	5b                   	pop    ebx
c00162e0:	5e                   	pop    esi
c00162e1:	c3                   	ret    
c00162e2:	59                   	pop    ecx
c00162e3:	b8 02 00 00 00       	mov    eax,0x2
c00162e8:	31 d2                	xor    edx,edx
c00162ea:	5b                   	pop    ebx
c00162eb:	5e                   	pop    esi
c00162ec:	c3                   	ret    

c00162ed <sysCallUSleep(regs*)>:
c00162ed:	83 ec 1c             	sub    esp,0x1c
c00162f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00162f4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00162f7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00162fa:	6a 00                	push   0x0
c00162fc:	6a 64                	push   0x64
c00162fe:	52                   	push   edx
c00162ff:	50                   	push   eax
c0016300:	e8 df c6 00 00       	call   c00229e4 <__udivdi3>
c0016305:	83 c4 14             	add    esp,0x14
c0016308:	50                   	push   eax
c0016309:	e8 da 23 00 00       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001630e:	31 c0                	xor    eax,eax
c0016310:	31 d2                	xor    edx,edx
c0016312:	83 c4 1c             	add    esp,0x1c
c0016315:	c3                   	ret    

c0016316 <sysCallSpawn(regs*)>:
c0016316:	56                   	push   esi
c0016317:	53                   	push   ebx
c0016318:	50                   	push   eax
c0016319:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001631d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016320:	85 c0                	test   eax,eax
c0016322:	75 08                	jne    c001632c <sysCallSpawn(regs*)+0x16>
c0016324:	59                   	pop    ecx
c0016325:	31 c0                	xor    eax,eax
c0016327:	31 d2                	xor    edx,edx
c0016329:	5b                   	pop    ebx
c001632a:	5e                   	pop    esi
c001632b:	c3                   	ret    
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	68 1f 07 00 00       	push   0x71f
c0016334:	e8 8a 36 ff ff       	call   c00099c3 <malloc>
c0016339:	83 c4 10             	add    esp,0x10
c001633c:	89 c6                	mov    esi,eax
c001633e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016341:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016344:	85 c0                	test   eax,eax
c0016346:	75 32                	jne    c001637a <sysCallSpawn(regs*)+0x64>
c0016348:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001634d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016350:	52                   	push   edx
c0016351:	50                   	push   eax
c0016352:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016355:	56                   	push   esi
c0016356:	e8 85 1a 00 00       	call   c0017de0 <Process::Process(char const*, Process*, char**)>
c001635b:	83 c4 10             	add    esp,0x10
c001635e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016365:	75 bd                	jne    c0016324 <sysCallSpawn(regs*)+0xe>
c0016367:	83 ec 0c             	sub    esp,0xc
c001636a:	56                   	push   esi
c001636b:	e8 5c 1f 00 00       	call   c00182cc <Process::createUserThread()>
c0016370:	8b 06                	mov    eax,DWORD PTR [esi]
c0016372:	83 c4 10             	add    esp,0x10
c0016375:	99                   	cdq    
c0016376:	59                   	pop    ecx
c0016377:	5b                   	pop    ebx
c0016378:	5e                   	pop    esi
c0016379:	c3                   	ret    
c001637a:	31 c0                	xor    eax,eax
c001637c:	eb d2                	jmp    c0016350 <sysCallSpawn(regs*)+0x3a>

c001637e <sysCallGetEnv(regs*)>:
c001637e:	57                   	push   edi
c001637f:	56                   	push   esi
c0016380:	53                   	push   ebx
c0016381:	83 ec 1c             	sub    esp,0x1c
c0016384:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016388:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001638d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016390:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016393:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016396:	e8 d0 e3 ff ff       	call   c001476b <Krnl::getProcessTotalEnvCount(Process*)>
c001639b:	83 c4 10             	add    esp,0x10
c001639e:	39 c7                	cmp    edi,eax
c00163a0:	7c 14                	jl     c00163b6 <sysCallGetEnv(regs*)+0x38>
c00163a2:	85 f6                	test   esi,esi
c00163a4:	75 0b                	jne    c00163b1 <sysCallGetEnv(regs*)+0x33>
c00163a6:	83 c4 10             	add    esp,0x10
c00163a9:	31 c0                	xor    eax,eax
c00163ab:	5b                   	pop    ebx
c00163ac:	31 d2                	xor    edx,edx
c00163ae:	5e                   	pop    esi
c00163af:	5f                   	pop    edi
c00163b0:	c3                   	ret    
c00163b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00163b4:	eb f0                	jmp    c00163a6 <sysCallGetEnv(regs*)+0x28>
c00163b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163ba:	52                   	push   edx
c00163bb:	57                   	push   edi
c00163bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163c2:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c00163c5:	50                   	push   eax
c00163c6:	e8 c0 e3 ff ff       	call   c001478b <Krnl::getProcessEnvPair(Process*, int)>
c00163cb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00163ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00163d2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00163d6:	83 c4 0c             	add    esp,0xc
c00163d9:	85 c9                	test   ecx,ecx
c00163db:	75 23                	jne    c0016400 <sysCallGetEnv(regs*)+0x82>
c00163dd:	83 ec 0c             	sub    esp,0xc
c00163e0:	50                   	push   eax
c00163e1:	e8 ba a2 fe ff       	call   c00006a0 <strlen>
c00163e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00163e9:	89 c3                	mov    ebx,eax
c00163eb:	e8 b0 a2 fe ff       	call   c00006a0 <strlen>
c00163f0:	83 c4 10             	add    esp,0x10
c00163f3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00163f7:	83 c4 10             	add    esp,0x10
c00163fa:	31 d2                	xor    edx,edx
c00163fc:	5b                   	pop    ebx
c00163fd:	5e                   	pop    esi
c00163fe:	5f                   	pop    edi
c00163ff:	c3                   	ret    
c0016400:	83 ec 08             	sub    esp,0x8
c0016403:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016406:	50                   	push   eax
c0016407:	56                   	push   esi
c0016408:	e8 33 a3 fe ff       	call   c0000740 <strcpy>
c001640d:	58                   	pop    eax
c001640e:	5a                   	pop    edx
c001640f:	68 bb 5f 02 c0       	push   0xc0025fbb
c0016414:	56                   	push   esi
c0016415:	e8 66 a4 fe ff       	call   c0000880 <strcat>
c001641a:	59                   	pop    ecx
c001641b:	5b                   	pop    ebx
c001641c:	57                   	push   edi
c001641d:	56                   	push   esi
c001641e:	e8 5d a4 fe ff       	call   c0000880 <strcat>
c0016423:	83 c4 10             	add    esp,0x10
c0016426:	e9 7b ff ff ff       	jmp    c00163a6 <sysCallGetEnv(regs*)+0x28>

c001642b <sysAppSettings(regs*)>:
c001642b:	57                   	push   edi
c001642c:	56                   	push   esi
c001642d:	56                   	push   esi
c001642e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016432:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016435:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001643b:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016440:	66 3d c0 09          	cmp    ax,0x9c0
c0016444:	75 2e                	jne    c0016474 <sysAppSettings(regs*)+0x49>
c0016446:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001644c:	83 e0 1f             	and    eax,0x1f
c001644f:	3c 01                	cmp    al,0x1
c0016451:	74 2c                	je     c001647f <sysAppSettings(regs*)+0x54>
c0016453:	3c 07                	cmp    al,0x7
c0016455:	0f 84 b3 00 00 00    	je     c001650e <sysAppSettings(regs*)+0xe3>
c001645b:	84 c0                	test   al,al
c001645d:	0f 84 d2 00 00 00    	je     c0016535 <sysAppSettings(regs*)+0x10a>
c0016463:	3c 08                	cmp    al,0x8
c0016465:	74 63                	je     c00164ca <sysAppSettings(regs*)+0x9f>
c0016467:	59                   	pop    ecx
c0016468:	0f b6 c0             	movzx  eax,al
c001646b:	5e                   	pop    esi
c001646c:	05 e8 03 00 00       	add    eax,0x3e8
c0016471:	5f                   	pop    edi
c0016472:	99                   	cdq    
c0016473:	c3                   	ret    
c0016474:	b8 01 00 00 00       	mov    eax,0x1
c0016479:	59                   	pop    ecx
c001647a:	31 d2                	xor    edx,edx
c001647c:	5e                   	pop    esi
c001647d:	5f                   	pop    edi
c001647e:	c3                   	ret    
c001647f:	50                   	push   eax
c0016480:	68 00 01 00 00       	push   0x100
c0016485:	6a 00                	push   0x0
c0016487:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001648c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001648f:	83 c0 0c             	add    eax,0xc
c0016492:	50                   	push   eax
c0016493:	e8 ec a1 fe ff       	call   c0000684 <memset>
c0016498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649d:	b9 ff 00 00 00       	mov    ecx,0xff
c00164a2:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00164a5:	83 c7 0c             	add    edi,0xc
c00164a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00164aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164af:	5a                   	pop    edx
c00164b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164b3:	59                   	pop    ecx
c00164b4:	8d 50 0c             	lea    edx,[eax+0xc]
c00164b7:	52                   	push   edx
c00164b8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164be:	e8 99 44 ff ff       	call   c000a95c <VgaText::setTitle(char*)>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	31 c0                	xor    eax,eax
c00164c8:	eb af                	jmp    c0016479 <sysAppSettings(regs*)+0x4e>
c00164ca:	83 ec 08             	sub    esp,0x8
c00164cd:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00164d3:	83 e0 0f             	and    eax,0xf
c00164d6:	50                   	push   eax
c00164d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00164df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00164e5:	e8 62 44 ff ff       	call   c000a94c <VgaText::setTitleColour(VgaColour)>
c00164ea:	5f                   	pop    edi
c00164eb:	58                   	pop    eax
c00164ec:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00164f2:	c1 e8 04             	shr    eax,0x4
c00164f5:	83 e0 0f             	and    eax,0xf
c00164f8:	50                   	push   eax
c00164f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016501:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016507:	e8 30 44 ff ff       	call   c000a93c <VgaText::setTitleTextColour(VgaColour)>
c001650c:	eb b5                	jmp    c00164c3 <sysAppSettings(regs*)+0x98>
c001650e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016513:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016516:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001651c:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016522:	c0 e8 06             	shr    al,0x6
c0016525:	83 e0 01             	and    eax,0x1
c0016528:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001652e:	31 c0                	xor    eax,eax
c0016530:	e9 44 ff ff ff       	jmp    c0016479 <sysAppSettings(regs*)+0x4e>
c0016535:	b8 02 00 00 00       	mov    eax,0x2
c001653a:	e9 3a ff ff ff       	jmp    c0016479 <sysAppSettings(regs*)+0x4e>

c001653f <sysSetFatAttrib(regs*)>:
c001653f:	57                   	push   edi
c0016540:	56                   	push   esi
c0016541:	53                   	push   ebx
c0016542:	83 ec 1c             	sub    esp,0x1c
c0016545:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016549:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001654c:	68 14 01 00 00       	push   0x114
c0016551:	e8 6d 34 ff ff       	call   c00099c3 <malloc>
c0016556:	83 c4 0c             	add    esp,0xc
c0016559:	89 c3                	mov    ebx,eax
c001655b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016560:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016563:	57                   	push   edi
c0016564:	53                   	push   ebx
c0016565:	e8 b4 6c ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001656a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001656d:	83 c4 0c             	add    esp,0xc
c0016570:	0f b6 d4             	movzx  edx,ah
c0016573:	0f b6 c0             	movzx  eax,al
c0016576:	52                   	push   edx
c0016577:	50                   	push   eax
c0016578:	53                   	push   ebx
c0016579:	e8 16 6f ff ff       	call   c000d494 <File::chfatattr(unsigned char, unsigned char)>
c001657e:	83 c4 10             	add    esp,0x10
c0016581:	85 db                	test   ebx,ebx
c0016583:	74 14                	je     c0016599 <sysSetFatAttrib(regs*)+0x5a>
c0016585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016589:	8b 13                	mov    edx,DWORD PTR [ebx]
c001658b:	83 ec 0c             	sub    esp,0xc
c001658e:	53                   	push   ebx
c001658f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016592:	83 c4 10             	add    esp,0x10
c0016595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016599:	85 c0                	test   eax,eax
c001659b:	0f 95 c0             	setne  al
c001659e:	31 d2                	xor    edx,edx
c00165a0:	0f b6 c0             	movzx  eax,al
c00165a3:	f7 d8                	neg    eax
c00165a5:	83 d2 00             	adc    edx,0x0
c00165a8:	83 c4 10             	add    esp,0x10
c00165ab:	f7 da                	neg    edx
c00165ad:	5b                   	pop    ebx
c00165ae:	5e                   	pop    esi
c00165af:	5f                   	pop    edi
c00165b0:	c3                   	ret    

c00165b1 <sysPipe(regs*)>:
c00165b1:	57                   	push   edi
c00165b2:	56                   	push   esi
c00165b3:	53                   	push   ebx
c00165b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00165be:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00165c1:	6a 20                	push   0x20
c00165c3:	e8 fb 33 ff ff       	call   c00099c3 <malloc>
c00165c8:	89 c3                	mov    ebx,eax
c00165ca:	58                   	pop    eax
c00165cb:	5a                   	pop    edx
c00165cc:	68 00 50 00 00       	push   0x5000
c00165d1:	53                   	push   ebx
c00165d2:	e8 fd 40 ff ff       	call   c000a6d4 <Pipe::Pipe(int)>
c00165d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165da:	e8 63 4f ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c00165df:	89 07                	mov    DWORD PTR [edi],eax
c00165e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165e4:	e8 59 4f ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c00165e9:	83 c4 10             	add    esp,0x10
c00165ec:	89 06                	mov    DWORD PTR [esi],eax
c00165ee:	31 d2                	xor    edx,edx
c00165f0:	5b                   	pop    ebx
c00165f1:	31 c0                	xor    eax,eax
c00165f3:	5e                   	pop    esi
c00165f4:	5f                   	pop    edi
c00165f5:	c3                   	ret    

c00165f6 <sysGetUnixTime(regs*)>:
c00165f6:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00165fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016605:	e9 08 76 ff ff       	jmp    c000dc12 <Clock::timeInSecondsLocal()>

c001660a <string_ends_with(char const*, char const*)>:
c001660a:	57                   	push   edi
c001660b:	56                   	push   esi
c001660c:	53                   	push   ebx
c001660d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016611:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016615:	83 ec 0c             	sub    esp,0xc
c0016618:	53                   	push   ebx
c0016619:	e8 82 a0 fe ff       	call   c00006a0 <strlen>
c001661e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016621:	89 c6                	mov    esi,eax
c0016623:	e8 78 a0 fe ff       	call   c00006a0 <strlen>
c0016628:	83 c4 10             	add    esp,0x10
c001662b:	39 c6                	cmp    esi,eax
c001662d:	7d 06                	jge    c0016635 <string_ends_with(char const*, char const*)+0x2b>
c001662f:	5b                   	pop    ebx
c0016630:	31 c0                	xor    eax,eax
c0016632:	5e                   	pop    esi
c0016633:	5f                   	pop    edi
c0016634:	c3                   	ret    
c0016635:	83 ec 08             	sub    esp,0x8
c0016638:	29 c6                	sub    esi,eax
c001663a:	57                   	push   edi
c001663b:	01 f3                	add    ebx,esi
c001663d:	53                   	push   ebx
c001663e:	e8 89 a1 fe ff       	call   c00007cc <strcmp>
c0016643:	83 c4 10             	add    esp,0x10
c0016646:	85 c0                	test   eax,eax
c0016648:	5b                   	pop    ebx
c0016649:	0f 94 c0             	sete   al
c001664c:	5e                   	pop    esi
c001664d:	0f b6 c0             	movzx  eax,al
c0016650:	5f                   	pop    edi
c0016651:	c3                   	ret    

c0016652 <sysCallOpen(regs*)>:
c0016652:	56                   	push   esi
c0016653:	53                   	push   ebx
c0016654:	81 ec 04 01 00 00    	sub    esp,0x104
c001665a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016661:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016664:	85 c9                	test   ecx,ecx
c0016666:	0f 84 ad 01 00 00    	je     c0016819 <sysCallOpen(regs*)+0x1c7>
c001666c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001666f:	85 c0                	test   eax,eax
c0016671:	0f 84 a2 01 00 00    	je     c0016819 <sysCallOpen(regs*)+0x1c7>
c0016677:	52                   	push   edx
c0016678:	68 bd 5f 02 c0       	push   0xc0025fbd
c001667d:	50                   	push   eax
c001667e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016682:	56                   	push   esi
c0016683:	e8 ec 69 ff ff       	call   c000d074 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016688:	89 34 24             	mov    DWORD PTR [esp],esi
c001668b:	e8 10 a0 fe ff       	call   c00006a0 <strlen>
c0016690:	83 c4 10             	add    esp,0x10
c0016693:	48                   	dec    eax
c0016694:	74 1d                	je     c00166b3 <sysCallOpen(regs*)+0x61>
c0016696:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016699:	eb 0f                	jmp    c00166aa <sysCallOpen(regs*)+0x58>
c001669b:	80 fa 3a             	cmp    dl,0x3a
c001669e:	74 0f                	je     c00166af <sysCallOpen(regs*)+0x5d>
c00166a0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00166a4:	48                   	dec    eax
c00166a5:	74 0c                	je     c00166b3 <sysCallOpen(regs*)+0x61>
c00166a7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00166aa:	80 fa 2e             	cmp    dl,0x2e
c00166ad:	75 ec                	jne    c001669b <sysCallOpen(regs*)+0x49>
c00166af:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00166b3:	83 ec 08             	sub    esp,0x8
c00166b6:	68 c1 5f 02 c0       	push   0xc0025fc1
c00166bb:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166be:	e8 47 ff ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c00166c3:	83 c4 10             	add    esp,0x10
c00166c6:	85 c0                	test   eax,eax
c00166c8:	74 1d                	je     c00166e7 <sysCallOpen(regs*)+0x95>
c00166ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00166cd:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00166d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00166da:	81 c4 04 01 00 00    	add    esp,0x104
c00166e0:	31 c0                	xor    eax,eax
c00166e2:	31 d2                	xor    edx,edx
c00166e4:	5b                   	pop    ebx
c00166e5:	5e                   	pop    esi
c00166e6:	c3                   	ret    
c00166e7:	83 ec 08             	sub    esp,0x8
c00166ea:	68 c6 5f 02 c0       	push   0xc0025fc6
c00166ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00166f2:	e8 13 ff ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	85 c0                	test   eax,eax
c00166fc:	75 cc                	jne    c00166ca <sysCallOpen(regs*)+0x78>
c00166fe:	83 ec 08             	sub    esp,0x8
c0016701:	68 c2 5f 02 c0       	push   0xc0025fc2
c0016706:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016709:	e8 be a0 fe ff       	call   c00007cc <strcmp>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	85 c0                	test   eax,eax
c0016713:	74 b5                	je     c00166ca <sysCallOpen(regs*)+0x78>
c0016715:	83 ec 08             	sub    esp,0x8
c0016718:	68 c1 5f 02 c0       	push   0xc0025fc1
c001671d:	56                   	push   esi
c001671e:	e8 e7 fe ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c0016723:	83 c4 10             	add    esp,0x10
c0016726:	85 c0                	test   eax,eax
c0016728:	75 a0                	jne    c00166ca <sysCallOpen(regs*)+0x78>
c001672a:	83 ec 08             	sub    esp,0x8
c001672d:	68 cb 5f 02 c0       	push   0xc0025fcb
c0016732:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016735:	e8 d0 fe ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	85 c0                	test   eax,eax
c001673f:	0f 85 e7 00 00 00    	jne    c001682c <sysCallOpen(regs*)+0x1da>
c0016745:	83 ec 08             	sub    esp,0x8
c0016748:	68 d0 5f 02 c0       	push   0xc0025fd0
c001674d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016750:	e8 b5 fe ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	85 c0                	test   eax,eax
c001675a:	0f 85 cc 00 00 00    	jne    c001682c <sysCallOpen(regs*)+0x1da>
c0016760:	83 ec 08             	sub    esp,0x8
c0016763:	68 cc 5f 02 c0       	push   0xc0025fcc
c0016768:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001676b:	e8 5c a0 fe ff       	call   c00007cc <strcmp>
c0016770:	83 c4 10             	add    esp,0x10
c0016773:	85 c0                	test   eax,eax
c0016775:	0f 84 b1 00 00 00    	je     c001682c <sysCallOpen(regs*)+0x1da>
c001677b:	83 ec 08             	sub    esp,0x8
c001677e:	68 cb 5f 02 c0       	push   0xc0025fcb
c0016783:	56                   	push   esi
c0016784:	e8 81 fe ff ff       	call   c001660a <string_ends_with(char const*, char const*)>
c0016789:	83 c4 10             	add    esp,0x10
c001678c:	85 c0                	test   eax,eax
c001678e:	0f 85 98 00 00 00    	jne    c001682c <sysCallOpen(regs*)+0x1da>
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	68 14 01 00 00       	push   0x114
c001679c:	e8 22 32 ff ff       	call   c00099c3 <malloc>
c00167a1:	83 c4 0c             	add    esp,0xc
c00167a4:	89 c6                	mov    esi,eax
c00167a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ab:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00167ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00167b1:	56                   	push   esi
c00167b2:	e8 67 6a ff ff       	call   c000d21e <File::File(char const*, Process*)>
c00167b7:	83 c4 10             	add    esp,0x10
c00167ba:	85 f6                	test   esi,esi
c00167bc:	74 5b                	je     c0016819 <sysCallOpen(regs*)+0x1c7>
c00167be:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00167c1:	0f b6 c2             	movzx  eax,dl
c00167c4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00167c7:	89 d0                	mov    eax,edx
c00167c9:	83 e0 01             	and    eax,0x1
c00167cc:	f6 c2 02             	test   dl,0x2
c00167cf:	74 03                	je     c00167d4 <sysCallOpen(regs*)+0x182>
c00167d1:	83 c8 02             	or     eax,0x2
c00167d4:	f6 c2 04             	test   dl,0x4
c00167d7:	74 03                	je     c00167dc <sysCallOpen(regs*)+0x18a>
c00167d9:	83 c8 04             	or     eax,0x4
c00167dc:	f6 c2 08             	test   dl,0x8
c00167df:	74 03                	je     c00167e4 <sysCallOpen(regs*)+0x192>
c00167e1:	83 c8 0a             	or     eax,0xa
c00167e4:	83 e2 10             	and    edx,0x10
c00167e7:	74 03                	je     c00167ec <sysCallOpen(regs*)+0x19a>
c00167e9:	83 c8 12             	or     eax,0x12
c00167ec:	83 ec 08             	sub    esp,0x8
c00167ef:	50                   	push   eax
c00167f0:	56                   	push   esi
c00167f1:	e8 8c 6a ff ff       	call   c000d282 <File::open(FileOpenMode)>
c00167f6:	83 c4 10             	add    esp,0x10
c00167f9:	85 c0                	test   eax,eax
c00167fb:	75 1c                	jne    c0016819 <sysCallOpen(regs*)+0x1c7>
c00167fd:	83 ec 0c             	sub    esp,0xc
c0016800:	56                   	push   esi
c0016801:	e8 3c 4d ff ff       	call   c000b542 <UnixFile::getFileDescriptor()>
c0016806:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016809:	83 c4 10             	add    esp,0x10
c001680c:	89 02                	mov    DWORD PTR [edx],eax
c001680e:	c1 f8 1f             	sar    eax,0x1f
c0016811:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016814:	e9 c1 fe ff ff       	jmp    c00166da <sysCallOpen(regs*)+0x88>
c0016819:	81 c4 04 01 00 00    	add    esp,0x104
c001681f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016824:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016829:	5b                   	pop    ebx
c001682a:	5e                   	pop    esi
c001682b:	c3                   	ret    
c001682c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001682f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016835:	e9 99 fe ff ff       	jmp    c00166d3 <sysCallOpen(regs*)+0x81>

c001683a <Sys::loadSyscalls()>:
c001683a:	c7 05 80 8c 02 c0 ab 5a 01 c0 	mov    DWORD PTR ds:0xc0028c80,0xc0015aab
c0016844:	c7 05 84 8c 02 c0 a0 56 01 c0 	mov    DWORD PTR ds:0xc0028c84,0xc00156a0
c001684e:	c7 05 88 8c 02 c0 91 58 01 c0 	mov    DWORD PTR ds:0xc0028c88,0xc0015891
c0016858:	c7 05 8c 8c 02 c0 e1 59 01 c0 	mov    DWORD PTR ds:0xc0028c8c,0xc00159e1
c0016862:	c7 05 90 8c 02 c0 29 58 01 c0 	mov    DWORD PTR ds:0xc0028c90,0xc0015829
c001686c:	c7 05 94 8c 02 c0 d7 56 01 c0 	mov    DWORD PTR ds:0xc0028c94,0xc00156d7
c0016876:	c7 05 98 8c 02 c0 b8 56 01 c0 	mov    DWORD PTR ds:0xc0028c98,0xc00156b8
c0016880:	c7 05 9c 8c 02 c0 e6 58 01 c0 	mov    DWORD PTR ds:0xc0028c9c,0xc00158e6
c001688a:	c7 05 a4 8c 02 c0 6e 5f 01 c0 	mov    DWORD PTR ds:0xc0028ca4,0xc0015f6e
c0016894:	c7 05 a0 8c 02 c0 52 66 01 c0 	mov    DWORD PTR ds:0xc0028ca0,0xc0016652
c001689e:	c7 05 a8 8c 02 c0 ce 5f 01 c0 	mov    DWORD PTR ds:0xc0028ca8,0xc0015fce
c00168a8:	c7 05 ac 8c 02 c0 b1 5c 01 c0 	mov    DWORD PTR ds:0xc0028cac,0xc0015cb1
c00168b2:	c7 05 b0 8c 02 c0 e3 5a 01 c0 	mov    DWORD PTR ds:0xc0028cb0,0xc0015ae3
c00168bc:	c7 05 b4 8c 02 c0 e8 5a 01 c0 	mov    DWORD PTR ds:0xc0028cb4,0xc0015ae8
c00168c6:	c7 05 b8 8c 02 c0 97 60 01 c0 	mov    DWORD PTR ds:0xc0028cb8,0xc0016097
c00168d0:	c7 05 bc 8c 02 c0 43 60 01 c0 	mov    DWORD PTR ds:0xc0028cbc,0xc0016043
c00168da:	c7 05 c0 8c 02 c0 8a 5d 01 c0 	mov    DWORD PTR ds:0xc0028cc0,0xc0015d8a
c00168e4:	c7 05 c4 8c 02 c0 e1 5d 01 c0 	mov    DWORD PTR ds:0xc0028cc4,0xc0015de1
c00168ee:	c7 05 c8 8c 02 c0 4d 5e 01 c0 	mov    DWORD PTR ds:0xc0028cc8,0xc0015e4d
c00168f8:	c7 05 cc 8c 02 c0 ed 5a 01 c0 	mov    DWORD PTR ds:0xc0028ccc,0xc0015aed
c0016902:	c7 05 d0 8c 02 c0 07 61 01 c0 	mov    DWORD PTR ds:0xc0028cd0,0xc0016107
c001690c:	c7 05 d4 8c 02 c0 21 61 01 c0 	mov    DWORD PTR ds:0xc0028cd4,0xc0016121
c0016916:	c7 05 d8 8c 02 c0 21 61 01 c0 	mov    DWORD PTR ds:0xc0028cd8,0xc0016121
c0016920:	c7 05 dc 8c 02 c0 56 61 01 c0 	mov    DWORD PTR ds:0xc0028cdc,0xc0016156
c001692a:	c7 05 e0 8c 02 c0 ba 61 01 c0 	mov    DWORD PTR ds:0xc0028ce0,0xc00161ba
c0016934:	c7 05 e4 8c 02 c0 f7 5a 01 c0 	mov    DWORD PTR ds:0xc0028ce4,0xc0015af7
c001693e:	c7 05 e8 8c 02 c0 1e 62 01 c0 	mov    DWORD PTR ds:0xc0028ce8,0xc001621e
c0016948:	c7 05 ec 8c 02 c0 6e 5c 01 c0 	mov    DWORD PTR ds:0xc0028cec,0xc0015c6e
c0016952:	c7 05 f0 8c 02 c0 6a 62 01 c0 	mov    DWORD PTR ds:0xc0028cf0,0xc001626a
c001695c:	c7 05 f4 8c 02 c0 30 5d 01 c0 	mov    DWORD PTR ds:0xc0028cf4,0xc0015d30
c0016966:	c7 05 f8 8c 02 c0 ed 62 01 c0 	mov    DWORD PTR ds:0xc0028cf8,0xc00162ed
c0016970:	c7 05 fc 8c 02 c0 bf 5e 01 c0 	mov    DWORD PTR ds:0xc0028cfc,0xc0015ebf
c001697a:	c7 05 00 8d 02 c0 16 63 01 c0 	mov    DWORD PTR ds:0xc0028d00,0xc0016316
c0016984:	c7 05 04 8d 02 c0 7e 63 01 c0 	mov    DWORD PTR ds:0xc0028d04,0xc001637e
c001698e:	c7 05 08 8d 02 c0 2b 64 01 c0 	mov    DWORD PTR ds:0xc0028d08,0xc001642b
c0016998:	c7 05 0c 8d 02 c0 07 5b 01 c0 	mov    DWORD PTR ds:0xc0028d0c,0xc0015b07
c00169a2:	c7 05 10 8d 02 c0 71 5b 01 c0 	mov    DWORD PTR ds:0xc0028d10,0xc0015b71
c00169ac:	c7 05 14 8d 02 c0 bb 5b 01 c0 	mov    DWORD PTR ds:0xc0028d14,0xc0015bbb
c00169b6:	c7 05 18 8d 02 c0 3f 65 01 c0 	mov    DWORD PTR ds:0xc0028d18,0xc001653f
c00169c0:	c7 05 1c 8d 02 c0 3c 61 01 c0 	mov    DWORD PTR ds:0xc0028d1c,0xc001613c
c00169ca:	c7 05 20 8d 02 c0 10 5c 01 c0 	mov    DWORD PTR ds:0xc0028d20,0xc0015c10
c00169d4:	c7 05 24 8d 02 c0 b1 65 01 c0 	mov    DWORD PTR ds:0xc0028d24,0xc00165b1
c00169de:	c7 05 28 8d 02 c0 f6 65 01 c0 	mov    DWORD PTR ds:0xc0028d28,0xc00165f6
c00169e8:	c7 05 2c 8d 02 c0 81 57 01 c0 	mov    DWORD PTR ds:0xc0028d2c,0xc0015781
c00169f2:	c7 05 30 8d 02 c0 02 59 01 c0 	mov    DWORD PTR ds:0xc0028d30,0xc0015902
c00169fc:	c7 05 34 8d 02 c0 97 59 01 c0 	mov    DWORD PTR ds:0xc0028d34,0xc0015997
c0016a06:	c7 05 38 8d 02 c0 6a 56 01 c0 	mov    DWORD PTR ds:0xc0028d38,0xc001566a
c0016a10:	c7 05 3c 8d 02 c0 49 5a 01 c0 	mov    DWORD PTR ds:0xc0028d3c,0xc0015a49
c0016a1a:	c7 05 40 8d 02 c0 e3 56 01 c0 	mov    DWORD PTR ds:0xc0028d40,0xc00156e3
c0016a24:	c7 05 44 8d 02 c0 fd 56 01 c0 	mov    DWORD PTR ds:0xc0028d44,0xc00156fd
c0016a2e:	c3                   	ret    

c0016a2f <Sys::systemCall(regs*, void*)>:
c0016a2f:	53                   	push   ebx
c0016a30:	83 ec 08             	sub    esp,0x8
c0016a33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a37:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a3a:	83 f8 7f             	cmp    eax,0x7f
c0016a3d:	77 16                	ja     c0016a55 <Sys::systemCall(regs*, void*)+0x26>
c0016a3f:	8b 14 85 80 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7380]
c0016a46:	85 d2                	test   edx,edx
c0016a48:	74 0b                	je     c0016a55 <Sys::systemCall(regs*, void*)+0x26>
c0016a4a:	83 ec 0c             	sub    esp,0xc
c0016a4d:	53                   	push   ebx
c0016a4e:	ff d2                	call   edx
c0016a50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a53:	eb 0d                	jmp    c0016a62 <Sys::systemCall(regs*, void*)+0x33>
c0016a55:	52                   	push   edx
c0016a56:	52                   	push   edx
c0016a57:	50                   	push   eax
c0016a58:	68 d5 5f 02 c0       	push   0xc0025fd5
c0016a5d:	e8 51 62 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016a62:	83 c4 10             	add    esp,0x10
c0016a65:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016a6a:	31 d2                	xor    edx,edx
c0016a6c:	83 c4 08             	add    esp,0x8
c0016a6f:	5b                   	pop    ebx
c0016a70:	c3                   	ret    

c0016a71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016a71:	55                   	push   ebp
c0016a72:	57                   	push   edi
c0016a73:	56                   	push   esi
c0016a74:	53                   	push   ebx
c0016a75:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016a7b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016a82:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016a89:	85 c0                	test   eax,eax
c0016a8b:	0f 95 c1             	setne  cl
c0016a8e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016a96:	0f 94 c2             	sete   dl
c0016a99:	84 d1                	test   cl,dl
c0016a9b:	74 23                	je     c0016ac0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016a9d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016aa3:	74 1b                	je     c0016ac0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016aa5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016aab:	89 da                	mov    edx,ebx
c0016aad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016ab3:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016ab9:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016ac0:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016ac7:	05 ff 0f 00 00       	add    eax,0xfff
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ad3:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016ad9:	c1 e8 0c             	shr    eax,0xc
c0016adc:	89 fe                	mov    esi,edi
c0016ade:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ae2:	c1 ee 0c             	shr    esi,0xc
c0016ae5:	6a 01                	push   0x1
c0016ae7:	e8 a1 4e ff ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0016aec:	89 c5                	mov    ebp,eax
c0016aee:	58                   	pop    eax
c0016aef:	5a                   	pop    edx
c0016af0:	56                   	push   esi
c0016af1:	68 e9 5f 02 c0       	push   0xc0025fe9
c0016af6:	e8 b8 61 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016afb:	59                   	pop    ecx
c0016afc:	58                   	pop    eax
c0016afd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b01:	68 fb 5f 02 c0       	push   0xc0025ffb
c0016b06:	e8 a8 61 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016b0b:	83 c4 10             	add    esp,0x10
c0016b0e:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016b14:	0f 86 31 01 00 00    	jbe    c0016c4b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016b1a:	c1 e6 0c             	shl    esi,0xc
c0016b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b20:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b27:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016b2e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016b31:	01 df                	add    edi,ebx
c0016b33:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016b36:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b3a:	0f 84 08 01 00 00    	je     c0016c48 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016b40:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016b46:	76 05                	jbe    c0016b4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016b48:	bf 00 10 00 00       	mov    edi,0x1000
c0016b4d:	83 ec 0c             	sub    esp,0xc
c0016b50:	31 d2                	xor    edx,edx
c0016b52:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016b59:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016b5b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016b5f:	50                   	push   eax
c0016b60:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016b64:	56                   	push   esi
c0016b65:	52                   	push   edx
c0016b66:	57                   	push   edi
c0016b67:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016b6e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016b71:	83 c4 20             	add    esp,0x20
c0016b74:	85 c0                	test   eax,eax
c0016b76:	74 0a                	je     c0016b82 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016b78:	53                   	push   ebx
c0016b79:	53                   	push   ebx
c0016b7a:	50                   	push   eax
c0016b7b:	68 0d 60 02 c0       	push   0xc002600d
c0016b80:	eb 0f                	jmp    c0016b91 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016b82:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016b86:	74 20                	je     c0016ba8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016b88:	51                   	push   ecx
c0016b89:	51                   	push   ecx
c0016b8a:	6a 00                	push   0x0
c0016b8c:	68 38 60 02 c0       	push   0xc0026038
c0016b91:	e8 1d 61 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016b96:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b99:	e8 1f 51 ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c0016b9e:	83 c4 10             	add    esp,0x10
c0016ba1:	31 c0                	xor    eax,eax
c0016ba3:	e9 68 01 00 00       	jmp    c0016d10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016ba8:	fa                   	cli    
c0016ba9:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0016baf:	e8 c6 34 ff ff       	call   c000a07a <Phys::allocatePage()>
c0016bb4:	6a 07                	push   0x7
c0016bb6:	89 c7                	mov    edi,eax
c0016bb8:	55                   	push   ebp
c0016bb9:	50                   	push   eax
c0016bba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016bc2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bc8:	e8 67 54 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016bcd:	83 c4 0c             	add    esp,0xc
c0016bd0:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016bd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bdd:	6a 00                	push   0x0
c0016bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016be7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016bed:	e8 9c 52 ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c0016bf2:	58                   	pop    eax
c0016bf3:	5a                   	pop    edx
c0016bf4:	68 07 0c 00 00       	push   0xc07
c0016bf9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016bfd:	57                   	push   edi
c0016bfe:	89 ef                	mov    edi,ebp
c0016c00:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016c07:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c0d:	6a 00                	push   0x0
c0016c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c1d:	e8 ce 57 ff ff       	call   c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016c22:	b9 00 10 00 00       	mov    ecx,0x1000
c0016c27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c29:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0016c2e:	83 c4 20             	add    esp,0x20
c0016c31:	48                   	dec    eax
c0016c32:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0016c37:	85 c0                	test   eax,eax
c0016c39:	75 01                	jne    c0016c3c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016c3b:	fb                   	sti    
c0016c3c:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016c43:	e9 df fe ff ff       	jmp    c0016b27 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016c48:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016c4b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016c53:	0f 86 a9 00 00 00    	jbe    c0016d02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016c59:	fa                   	cli    
c0016c5a:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0016c60:	51                   	push   ecx
c0016c61:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016c68:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c6e:	6a 00                	push   0x0
c0016c70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c75:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016c7e:	e8 0b 52 ff ff       	call   c000be8e <VAS::mapOtherVASIn(bool, VAS*)>
c0016c83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016c87:	c1 e6 0c             	shl    esi,0xc
c0016c8a:	01 de                	add    esi,ebx
c0016c8c:	83 c4 10             	add    esp,0x10
c0016c8f:	39 de                	cmp    esi,ebx
c0016c91:	74 61                	je     c0016cf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016c93:	e8 e2 33 ff ff       	call   c000a07a <Phys::allocatePage()>
c0016c98:	6a 07                	push   0x7
c0016c9a:	89 c7                	mov    edi,eax
c0016c9c:	55                   	push   ebp
c0016c9d:	50                   	push   eax
c0016c9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ca6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cac:	e8 83 53 ff ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016cb1:	58                   	pop    eax
c0016cb2:	5a                   	pop    edx
c0016cb3:	68 07 0c 00 00       	push   0xc07
c0016cb8:	53                   	push   ebx
c0016cb9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016cbf:	57                   	push   edi
c0016cc0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016cc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ccd:	6a 00                	push   0x0
c0016ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016cd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016cdd:	e8 0e 57 ff ff       	call   c000c3f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016ce2:	83 c4 1c             	add    esp,0x1c
c0016ce5:	68 00 10 00 00       	push   0x1000
c0016cea:	6a 00                	push   0x0
c0016cec:	55                   	push   ebp
c0016ced:	e8 92 99 fe ff       	call   c0000684 <memset>
c0016cf2:	eb 98                	jmp    c0016c8c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016cf4:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0016cf9:	48                   	dec    eax
c0016cfa:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0016cff:	75 01                	jne    c0016d02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016d01:	fb                   	sti    
c0016d02:	83 ec 0c             	sub    esp,0xc
c0016d05:	55                   	push   ebp
c0016d06:	e8 b2 4f ff ff       	call   c000bcbd <Virt::freeKernelVirtualPages(unsigned long)>
c0016d0b:	83 c4 10             	add    esp,0x10
c0016d0e:	b0 01                	mov    al,0x1
c0016d10:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016d16:	5b                   	pop    ebx
c0016d17:	5e                   	pop    esi
c0016d18:	5f                   	pop    edi
c0016d19:	5d                   	pop    ebp
c0016d1a:	c3                   	ret    

c0016d1b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016d1b:	55                   	push   ebp
c0016d1c:	57                   	push   edi
c0016d1d:	56                   	push   esi
c0016d1e:	53                   	push   ebx
c0016d1f:	83 ec 48             	sub    esp,0x48
c0016d22:	68 14 01 00 00       	push   0x114
c0016d27:	e8 97 2c ff ff       	call   c00099c3 <malloc>
c0016d2c:	83 c4 0c             	add    esp,0xc
c0016d2f:	89 c6                	mov    esi,eax
c0016d31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d35:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016d39:	50                   	push   eax
c0016d3a:	e8 df 64 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016d3f:	58                   	pop    eax
c0016d40:	5a                   	pop    edx
c0016d41:	6a 01                	push   0x1
c0016d43:	56                   	push   esi
c0016d44:	e8 39 65 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c0016d49:	83 c4 10             	add    esp,0x10
c0016d4c:	85 c0                	test   eax,eax
c0016d4e:	0f 85 47 01 00 00    	jne    c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d54:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016d5c:	83 ec 0c             	sub    esp,0xc
c0016d5f:	6a 34                	push   0x34
c0016d61:	e8 5d 2c ff ff       	call   c00099c3 <malloc>
c0016d66:	89 c3                	mov    ebx,eax
c0016d68:	58                   	pop    eax
c0016d69:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d6b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016d6f:	57                   	push   edi
c0016d70:	53                   	push   ebx
c0016d71:	6a 00                	push   0x0
c0016d73:	6a 34                	push   0x34
c0016d75:	56                   	push   esi
c0016d76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d79:	83 c4 20             	add    esp,0x20
c0016d7c:	85 c0                	test   eax,eax
c0016d7e:	0f 85 17 01 00 00    	jne    c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d84:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016d8a:	0f 85 0b 01 00 00    	jne    c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d90:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016d93:	85 c0                	test   eax,eax
c0016d95:	0f 84 00 01 00 00    	je     c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016d9b:	31 d2                	xor    edx,edx
c0016d9d:	55                   	push   ebp
c0016d9e:	52                   	push   edx
c0016d9f:	50                   	push   eax
c0016da0:	56                   	push   esi
c0016da1:	e8 9a 65 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	85 c0                	test   eax,eax
c0016dab:	0f 85 ea 00 00 00    	jne    c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016db1:	83 ec 0c             	sub    esp,0xc
c0016db4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016db7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016dbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016dbf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016dc3:	0f af c2             	imul   eax,edx
c0016dc6:	50                   	push   eax
c0016dc7:	e8 f7 2b ff ff       	call   c00099c3 <malloc>
c0016dcc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016dce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016dd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016dd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dd9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016ddd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016de1:	0f af c2             	imul   eax,edx
c0016de4:	99                   	cdq    
c0016de5:	52                   	push   edx
c0016de6:	50                   	push   eax
c0016de7:	56                   	push   esi
c0016de8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016deb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016dee:	83 c4 20             	add    esp,0x20
c0016df1:	85 c0                	test   eax,eax
c0016df3:	0f 84 a2 00 00 00    	je     c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016df9:	31 d2                	xor    edx,edx
c0016dfb:	51                   	push   ecx
c0016dfc:	52                   	push   edx
c0016dfd:	50                   	push   eax
c0016dfe:	56                   	push   esi
c0016dff:	e8 3c 65 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0016e04:	83 c4 10             	add    esp,0x10
c0016e07:	85 c0                	test   eax,eax
c0016e09:	0f 85 8c 00 00 00    	jne    c0016e9b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016e0f:	83 ec 0c             	sub    esp,0xc
c0016e12:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e16:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e1a:	31 ed                	xor    ebp,ebp
c0016e1c:	0f af c2             	imul   eax,edx
c0016e1f:	50                   	push   eax
c0016e20:	e8 9e 2b ff ff       	call   c00099c3 <malloc>
c0016e25:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016e27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016e2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e32:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016e36:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016e3a:	0f af c2             	imul   eax,edx
c0016e3d:	99                   	cdq    
c0016e3e:	52                   	push   edx
c0016e3f:	50                   	push   eax
c0016e40:	56                   	push   esi
c0016e41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e44:	83 c4 20             	add    esp,0x20
c0016e47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e4f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0016e53:	0f 86 80 00 00 00    	jbe    c0016ed9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0016e59:	0f b7 fd             	movzx  edi,bp
c0016e5c:	c1 e7 05             	shl    edi,0x5
c0016e5f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0016e63:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0016e66:	75 6b                	jne    c0016ed3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016e68:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0016e6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e6f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0016e72:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e76:	52                   	push   edx
c0016e77:	31 d2                	xor    edx,edx
c0016e79:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0016e7c:	52                   	push   edx
c0016e7d:	50                   	push   eax
c0016e7e:	56                   	push   esi
c0016e7f:	e8 bc 64 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0016e84:	83 c4 10             	add    esp,0x10
c0016e87:	85 c0                	test   eax,eax
c0016e89:	74 17                	je     c0016ea2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0016e8b:	83 ec 0c             	sub    esp,0xc
c0016e8e:	68 64 60 02 c0       	push   0xc0026064
c0016e93:	e8 1b 5e ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016e98:	83 c4 10             	add    esp,0x10
c0016e9b:	31 c0                	xor    eax,eax
c0016e9d:	e9 87 00 00 00       	jmp    c0016f29 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016ea2:	83 ec 0c             	sub    esp,0xc
c0016ea5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016ea8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016eab:	50                   	push   eax
c0016eac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016eb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016eb4:	56                   	push   esi
c0016eb5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016eb9:	e8 b3 fb ff ff       	call   c0016a71 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016ebe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ec2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016ec6:	83 c4 20             	add    esp,0x20
c0016ec9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016ecd:	73 04                	jae    c0016ed3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ed3:	45                   	inc    ebp
c0016ed4:	e9 76 ff ff ff       	jmp    c0016e4f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016ed9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016edd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ee1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ee5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016eeb:	83 ec 0c             	sub    esp,0xc
c0016eee:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016ef4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016ef9:	05 00 10 00 00       	add    eax,0x1000
c0016efe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f05:	e8 c9 2a ff ff       	call   c00099d3 <free>
c0016f0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f0d:	e8 c1 2a ff ff       	call   c00099d3 <free>
c0016f12:	58                   	pop    eax
c0016f13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f17:	e8 b7 2a ff ff       	call   c00099d3 <free>
c0016f1c:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f1f:	e8 bc 63 ff ff       	call   c000d2e0 <File::close()>
c0016f24:	83 c4 10             	add    esp,0x10
c0016f27:	b0 01                	mov    al,0x1
c0016f29:	83 c4 3c             	add    esp,0x3c
c0016f2c:	5b                   	pop    ebx
c0016f2d:	5e                   	pop    esi
c0016f2e:	5f                   	pop    edi
c0016f2f:	5d                   	pop    ebp
c0016f30:	c3                   	ret    

c0016f31 <Thr::runtimeReferenceHelper()>:
c0016f31:	83 ec 18             	sub    esp,0x18
c0016f34:	68 6c 60 02 c0       	push   0xc002606c
c0016f39:	e8 75 5d ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0016f3e:	fa                   	cli    
c0016f3f:	83 c4 10             	add    esp,0x10
c0016f42:	eb fe                	jmp    c0016f42 <Thr::runtimeReferenceHelper()+0x11>

c0016f44 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016f44:	57                   	push   edi
c0016f45:	56                   	push   esi
c0016f46:	53                   	push   ebx
c0016f47:	31 db                	xor    ebx,ebx
c0016f49:	39 1d 20 96 02 c0    	cmp    DWORD PTR ds:0xc0029620,ebx
c0016f4f:	7e 3c                	jle    c0016f8d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016f51:	8b 34 9d a0 95 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6a60]
c0016f58:	31 ff                	xor    edi,edi
c0016f5a:	39 3c 9d a0 94 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6b60],edi
c0016f61:	7e 27                	jle    c0016f8a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016f63:	50                   	push   eax
c0016f64:	50                   	push   eax
c0016f65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f69:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f6b:	03 04 9d 20 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6ae0]
c0016f72:	50                   	push   eax
c0016f73:	e8 54 98 fe ff       	call   c00007cc <strcmp>
c0016f78:	83 c4 10             	add    esp,0x10
c0016f7b:	85 c0                	test   eax,eax
c0016f7d:	75 05                	jne    c0016f84 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016f7f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016f82:	eb 0b                	jmp    c0016f8f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016f84:	83 c6 10             	add    esi,0x10
c0016f87:	47                   	inc    edi
c0016f88:	eb d0                	jmp    c0016f5a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016f8a:	43                   	inc    ebx
c0016f8b:	eb bc                	jmp    c0016f49 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016f8d:	31 c0                	xor    eax,eax
c0016f8f:	5b                   	pop    ebx
c0016f90:	5e                   	pop    esi
c0016f91:	5f                   	pop    edi
c0016f92:	c3                   	ret    

c0016f93 <Thr::loadKernelSymbolTable(char const*)>:
c0016f93:	55                   	push   ebp
c0016f94:	57                   	push   edi
c0016f95:	56                   	push   esi
c0016f96:	53                   	push   ebx
c0016f97:	83 ec 68             	sub    esp,0x68
c0016f9a:	8b 35 70 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029670
c0016fa0:	68 14 01 00 00       	push   0x114
c0016fa5:	e8 19 2a ff ff       	call   c00099c3 <malloc>
c0016faa:	83 c4 0c             	add    esp,0xc
c0016fad:	89 c3                	mov    ebx,eax
c0016faf:	56                   	push   esi
c0016fb0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016fb4:	50                   	push   eax
c0016fb5:	e8 64 62 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0016fba:	5e                   	pop    esi
c0016fbb:	5f                   	pop    edi
c0016fbc:	6a 01                	push   0x1
c0016fbe:	53                   	push   ebx
c0016fbf:	e8 be 62 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	85 c0                	test   eax,eax
c0016fc9:	74 0a                	je     c0016fd5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016fcb:	83 ec 0c             	sub    esp,0xc
c0016fce:	68 8e 60 02 c0       	push   0xc002608e
c0016fd3:	eb 34                	jmp    c0017009 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016fd5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016fdd:	83 ec 0c             	sub    esp,0xc
c0016fe0:	6a 34                	push   0x34
c0016fe2:	e8 dc 29 ff ff       	call   c00099c3 <malloc>
c0016fe7:	59                   	pop    ecx
c0016fe8:	89 c7                	mov    edi,eax
c0016fea:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016fee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ff0:	56                   	push   esi
c0016ff1:	57                   	push   edi
c0016ff2:	6a 00                	push   0x0
c0016ff4:	6a 34                	push   0x34
c0016ff6:	53                   	push   ebx
c0016ff7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016ffa:	83 c4 20             	add    esp,0x20
c0016ffd:	85 c0                	test   eax,eax
c0016fff:	74 17                	je     c0017018 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017001:	83 ec 0c             	sub    esp,0xc
c0017004:	68 a5 60 02 c0       	push   0xc00260a5
c0017009:	e8 11 d8 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	31 c0                	xor    eax,eax
c0017013:	e9 31 02 00 00       	jmp    c0017249 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017018:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001701e:	75 e1                	jne    c0017001 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017020:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017023:	85 c0                	test   eax,eax
c0017025:	74 da                	je     c0017001 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017027:	52                   	push   edx
c0017028:	31 d2                	xor    edx,edx
c001702a:	52                   	push   edx
c001702b:	50                   	push   eax
c001702c:	53                   	push   ebx
c001702d:	e8 0e 63 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0017032:	83 c4 10             	add    esp,0x10
c0017035:	85 c0                	test   eax,eax
c0017037:	75 c8                	jne    c0017001 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017039:	83 ec 0c             	sub    esp,0xc
c001703c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017040:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017044:	31 ed                	xor    ebp,ebp
c0017046:	0f af c2             	imul   eax,edx
c0017049:	50                   	push   eax
c001704a:	e8 74 29 ff ff       	call   c00099c3 <malloc>
c001704f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017051:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017055:	89 34 24             	mov    DWORD PTR [esp],esi
c0017058:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001705c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017060:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017064:	0f af c2             	imul   eax,edx
c0017067:	99                   	cdq    
c0017068:	52                   	push   edx
c0017069:	50                   	push   eax
c001706a:	53                   	push   ebx
c001706b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001706e:	83 c4 20             	add    esp,0x20
c0017071:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017079:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017081:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017089:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017091:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017095:	0f 86 aa 00 00 00    	jbe    c0017145 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001709b:	0f b7 f5             	movzx  esi,bp
c001709e:	6b f6 28             	imul   esi,esi,0x28
c00170a1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00170a5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00170a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170ac:	50                   	push   eax
c00170ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170b1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00170b5:	8b 16                	mov    edx,DWORD PTR [esi]
c00170b7:	6b c0 28             	imul   eax,eax,0x28
c00170ba:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00170be:	89 d0                	mov    eax,edx
c00170c0:	31 d2                	xor    edx,edx
c00170c2:	52                   	push   edx
c00170c3:	50                   	push   eax
c00170c4:	53                   	push   ebx
c00170c5:	e8 76 62 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00170ca:	83 c4 0c             	add    esp,0xc
c00170cd:	6a 20                	push   0x20
c00170cf:	6a 00                	push   0x0
c00170d1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00170d5:	52                   	push   edx
c00170d6:	e8 a9 95 fe ff       	call   c0000684 <memset>
c00170db:	58                   	pop    eax
c00170dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00170de:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00170e2:	51                   	push   ecx
c00170e3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00170e7:	52                   	push   edx
c00170e8:	6a 00                	push   0x0
c00170ea:	6a 1f                	push   0x1f
c00170ec:	53                   	push   ebx
c00170ed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170f0:	83 c4 18             	add    esp,0x18
c00170f3:	68 bc 60 02 c0       	push   0xc00260bc
c00170f8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00170fc:	52                   	push   edx
c00170fd:	e8 ca 96 fe ff       	call   c00007cc <strcmp>
c0017102:	83 c4 10             	add    esp,0x10
c0017105:	85 c0                	test   eax,eax
c0017107:	75 0f                	jne    c0017118 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017109:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001710c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017110:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017114:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017118:	50                   	push   eax
c0017119:	50                   	push   eax
c001711a:	68 c4 60 02 c0       	push   0xc00260c4
c001711f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017123:	50                   	push   eax
c0017124:	e8 a3 96 fe ff       	call   c00007cc <strcmp>
c0017129:	83 c4 10             	add    esp,0x10
c001712c:	85 c0                	test   eax,eax
c001712e:	75 0f                	jne    c001713f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017130:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017133:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017137:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001713b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001713f:	45                   	inc    ebp
c0017140:	e9 4c ff ff ff       	jmp    c0017091 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017145:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001714a:	75 10                	jne    c001715c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	68 cc 60 02 c0       	push   0xc00260cc
c0017154:	e8 c6 d6 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017159:	83 c4 10             	add    esp,0x10
c001715c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017161:	75 10                	jne    c0017173 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017163:	83 ec 0c             	sub    esp,0xc
c0017166:	68 cc 60 02 c0       	push   0xc00260cc
c001716b:	e8 af d6 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	31 d2                	xor    edx,edx
c0017175:	50                   	push   eax
c0017176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001717a:	52                   	push   edx
c001717b:	50                   	push   eax
c001717c:	53                   	push   ebx
c001717d:	e8 be 61 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0017182:	5a                   	pop    edx
c0017183:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017187:	e8 37 28 ff ff       	call   c00099c3 <malloc>
c001718c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017190:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017194:	31 c9                	xor    ecx,ecx
c0017196:	5e                   	pop    esi
c0017197:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017199:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001719d:	55                   	push   ebp
c001719e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171a2:	51                   	push   ecx
c00171a3:	52                   	push   edx
c00171a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00171a8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00171ac:	53                   	push   ebx
c00171ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171b0:	83 c4 14             	add    esp,0x14
c00171b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171b7:	e8 07 28 ff ff       	call   c00099c3 <malloc>
c00171bc:	89 c6                	mov    esi,eax
c00171be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171c0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171c3:	56                   	push   esi
c00171c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00171c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00171cc:	51                   	push   ecx
c00171cd:	52                   	push   edx
c00171ce:	53                   	push   ebx
c00171cf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171d6:	8b 15 20 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029620
c00171dc:	83 c4 1c             	add    esp,0x1c
c00171df:	c1 e8 04             	shr    eax,0x4
c00171e2:	89 04 95 a0 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6b60],eax
c00171e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171ed:	31 d2                	xor    edx,edx
c00171ef:	52                   	push   edx
c00171f0:	50                   	push   eax
c00171f1:	53                   	push   ebx
c00171f2:	e8 49 61 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00171f7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00171f9:	31 d2                	xor    edx,edx
c00171fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171fe:	56                   	push   esi
c00171ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017203:	52                   	push   edx
c0017204:	50                   	push   eax
c0017205:	53                   	push   ebx
c0017206:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017209:	83 c4 14             	add    esp,0x14
c001720c:	53                   	push   ebx
c001720d:	e8 ce 60 ff ff       	call   c000d2e0 <File::close()>
c0017212:	5d                   	pop    ebp
c0017213:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017217:	e8 b7 27 ff ff       	call   c00099d3 <free>
c001721c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001721f:	e8 af 27 ff ff       	call   c00099d3 <free>
c0017224:	a1 20 96 02 c0       	mov    eax,ds:0xc0029620
c0017229:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001722d:	8d 50 01             	lea    edx,[eax+0x1]
c0017230:	89 0c 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],ecx
c0017237:	89 34 85 20 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ae0],esi
c001723e:	89 15 20 96 02 c0    	mov    DWORD PTR ds:0xc0029620,edx
c0017244:	83 c4 10             	add    esp,0x10
c0017247:	b0 01                	mov    al,0x1
c0017249:	83 c4 5c             	add    esp,0x5c
c001724c:	5b                   	pop    ebx
c001724d:	5e                   	pop    esi
c001724e:	5f                   	pop    edi
c001724f:	5d                   	pop    ebp
c0017250:	c3                   	ret    

c0017251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017251:	55                   	push   ebp
c0017252:	57                   	push   edi
c0017253:	56                   	push   esi
c0017254:	53                   	push   ebx
c0017255:	81 ec 68 03 00 00    	sub    esp,0x368
c001725b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017262:	8b 1d 70 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029670
c0017268:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001726c:	68 14 01 00 00       	push   0x114
c0017271:	e8 4d 27 ff ff       	call   c00099c3 <malloc>
c0017276:	83 c4 0c             	add    esp,0xc
c0017279:	89 c5                	mov    ebp,eax
c001727b:	53                   	push   ebx
c001727c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017283:	50                   	push   eax
c0017284:	e8 95 5f ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0017289:	5e                   	pop    esi
c001728a:	5f                   	pop    edi
c001728b:	6a 01                	push   0x1
c001728d:	55                   	push   ebp
c001728e:	e8 ef 5f ff ff       	call   c000d282 <File::open(FileOpenMode)>
c0017293:	83 c4 10             	add    esp,0x10
c0017296:	85 c0                	test   eax,eax
c0017298:	0f 85 a7 06 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001729e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00172a6:	83 ec 0c             	sub    esp,0xc
c00172a9:	6a 34                	push   0x34
c00172ab:	e8 13 27 ff ff       	call   c00099c3 <malloc>
c00172b0:	5b                   	pop    ebx
c00172b1:	89 c7                	mov    edi,eax
c00172b3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00172b7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00172ba:	53                   	push   ebx
c00172bb:	57                   	push   edi
c00172bc:	6a 00                	push   0x0
c00172be:	6a 34                	push   0x34
c00172c0:	55                   	push   ebp
c00172c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172c4:	83 c4 20             	add    esp,0x20
c00172c7:	85 c0                	test   eax,eax
c00172c9:	0f 85 76 06 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00172d5:	0f 85 6a 06 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172db:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00172de:	85 c0                	test   eax,eax
c00172e0:	0f 84 5f 06 00 00    	je     c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172e6:	31 d2                	xor    edx,edx
c00172e8:	51                   	push   ecx
c00172e9:	52                   	push   edx
c00172ea:	50                   	push   eax
c00172eb:	55                   	push   ebp
c00172ec:	e8 4f 60 ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	85 c0                	test   eax,eax
c00172f6:	0f 85 49 06 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00172fc:	83 ec 0c             	sub    esp,0xc
c00172ff:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017302:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017306:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001730a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001730e:	0f af c2             	imul   eax,edx
c0017311:	50                   	push   eax
c0017312:	e8 ac 26 ff ff       	call   c00099c3 <malloc>
c0017317:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001731a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001731e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017325:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017329:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001732d:	0f af c2             	imul   eax,edx
c0017330:	99                   	cdq    
c0017331:	52                   	push   edx
c0017332:	50                   	push   eax
c0017333:	55                   	push   ebp
c0017334:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017337:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001733a:	83 c4 20             	add    esp,0x20
c001733d:	85 c0                	test   eax,eax
c001733f:	0f 84 00 06 00 00    	je     c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017345:	52                   	push   edx
c0017346:	31 d2                	xor    edx,edx
c0017348:	52                   	push   edx
c0017349:	50                   	push   eax
c001734a:	55                   	push   ebp
c001734b:	e8 f0 5f ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0017350:	83 c4 10             	add    esp,0x10
c0017353:	85 c0                	test   eax,eax
c0017355:	0f 85 ea 05 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001735b:	83 ec 0c             	sub    esp,0xc
c001735e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017362:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017366:	31 f6                	xor    esi,esi
c0017368:	0f af c2             	imul   eax,edx
c001736b:	50                   	push   eax
c001736c:	e8 52 26 ff ff       	call   c00099c3 <malloc>
c0017371:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017374:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017378:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001737b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001737f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017383:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017387:	0f af c2             	imul   eax,edx
c001738a:	99                   	cdq    
c001738b:	52                   	push   edx
c001738c:	50                   	push   eax
c001738d:	55                   	push   ebp
c001738e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017391:	83 c4 20             	add    esp,0x20
c0017394:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017398:	0f 86 8a 00 00 00    	jbe    c0017428 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001739e:	0f b7 de             	movzx  ebx,si
c00173a1:	c1 e3 05             	shl    ebx,0x5
c00173a4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00173a8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00173ab:	75 75                	jne    c0017422 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00173ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173b0:	31 d2                	xor    edx,edx
c00173b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00173b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173bd:	50                   	push   eax
c00173be:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00173c1:	52                   	push   edx
c00173c2:	50                   	push   eax
c00173c3:	55                   	push   ebp
c00173c4:	e8 77 5f ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00173c9:	83 c4 10             	add    esp,0x10
c00173cc:	85 c0                	test   eax,eax
c00173ce:	0f 85 71 05 00 00    	jne    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00173d4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00173db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00173de:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00173e2:	31 d2                	xor    edx,edx
c00173e4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00173e8:	83 ec 0c             	sub    esp,0xc
c00173eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00173ef:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00173f6:	50                   	push   eax
c00173f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ff:	52                   	push   edx
c0017400:	50                   	push   eax
c0017401:	55                   	push   ebp
c0017402:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017405:	83 c4 1c             	add    esp,0x1c
c0017408:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001740b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001740e:	50                   	push   eax
c001740f:	6a 00                	push   0x0
c0017411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017415:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017419:	50                   	push   eax
c001741a:	e8 65 92 fe ff       	call   c0000684 <memset>
c001741f:	83 c4 10             	add    esp,0x10
c0017422:	46                   	inc    esi
c0017423:	e9 6c ff ff ff       	jmp    c0017394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017428:	53                   	push   ebx
c0017429:	31 db                	xor    ebx,ebx
c001742b:	68 00 01 00 00       	push   0x100
c0017430:	6a 00                	push   0x0
c0017432:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017436:	50                   	push   eax
c0017437:	e8 48 92 fe ff       	call   c0000684 <memset>
c001743c:	83 c4 0c             	add    esp,0xc
c001743f:	68 00 01 00 00       	push   0x100
c0017444:	6a 00                	push   0x0
c0017446:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001744d:	50                   	push   eax
c001744e:	e8 31 92 fe ff       	call   c0000684 <memset>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001745e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017466:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001746e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017476:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001747e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017482:	0f 86 30 01 00 00    	jbe    c00175b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017488:	0f b7 f3             	movzx  esi,bx
c001748b:	6b f6 28             	imul   esi,esi,0x28
c001748e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017492:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017495:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017499:	52                   	push   edx
c001749a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001749e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00174a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00174a4:	6b d2 28             	imul   edx,edx,0x28
c00174a7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00174ab:	31 d2                	xor    edx,edx
c00174ad:	52                   	push   edx
c00174ae:	50                   	push   eax
c00174af:	55                   	push   ebp
c00174b0:	e8 8b 5e ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00174b5:	83 c4 0c             	add    esp,0xc
c00174b8:	6a 20                	push   0x20
c00174ba:	6a 00                	push   0x0
c00174bc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00174c3:	51                   	push   ecx
c00174c4:	e8 bb 91 fe ff       	call   c0000684 <memset>
c00174c9:	59                   	pop    ecx
c00174ca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174cd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00174d1:	52                   	push   edx
c00174d2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00174d9:	51                   	push   ecx
c00174da:	6a 00                	push   0x0
c00174dc:	6a 1f                	push   0x1f
c00174de:	55                   	push   ebp
c00174df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174e2:	83 c4 1c             	add    esp,0x1c
c00174e5:	6a 09                	push   0x9
c00174e7:	68 e6 60 02 c0       	push   0xc00260e6
c00174ec:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00174f3:	51                   	push   ecx
c00174f4:	e8 87 90 fe ff       	call   c0000580 <memcmp>
c00174f9:	83 c4 10             	add    esp,0x10
c00174fc:	85 c0                	test   eax,eax
c00174fe:	75 21                	jne    c0017521 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017500:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017504:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017508:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001750c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017510:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017513:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001751a:	89 d0                	mov    eax,edx
c001751c:	40                   	inc    eax
c001751d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017521:	50                   	push   eax
c0017522:	6a 09                	push   0x9
c0017524:	68 f0 60 02 c0       	push   0xc00260f0
c0017529:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017530:	50                   	push   eax
c0017531:	e8 4a 90 fe ff       	call   c0000580 <memcmp>
c0017536:	83 c4 10             	add    esp,0x10
c0017539:	85 c0                	test   eax,eax
c001753b:	75 21                	jne    c001755e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001753d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017541:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017545:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001754d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017550:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017557:	89 d0                	mov    eax,edx
c0017559:	40                   	inc    eax
c001755a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001755e:	50                   	push   eax
c001755f:	50                   	push   eax
c0017560:	68 bc 60 02 c0       	push   0xc00260bc
c0017565:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001756c:	50                   	push   eax
c001756d:	e8 5a 92 fe ff       	call   c00007cc <strcmp>
c0017572:	83 c4 10             	add    esp,0x10
c0017575:	85 c0                	test   eax,eax
c0017577:	75 0f                	jne    c0017588 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017579:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001757c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017580:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017584:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017588:	50                   	push   eax
c0017589:	50                   	push   eax
c001758a:	68 c4 60 02 c0       	push   0xc00260c4
c001758f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017596:	50                   	push   eax
c0017597:	e8 30 92 fe ff       	call   c00007cc <strcmp>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	85 c0                	test   eax,eax
c00175a1:	75 0f                	jne    c00175b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00175a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00175a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00175aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175b2:	43                   	inc    ebx
c00175b3:	e9 c6 fe ff ff       	jmp    c001747e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00175b8:	31 d2                	xor    edx,edx
c00175ba:	50                   	push   eax
c00175bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175bf:	52                   	push   edx
c00175c0:	50                   	push   eax
c00175c1:	55                   	push   ebp
c00175c2:	e8 79 5d ff ff       	call   c000d340 <File::seek(unsigned long long)>
c00175c7:	58                   	pop    eax
c00175c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00175cc:	e8 f2 23 ff ff       	call   c00099c3 <malloc>
c00175d1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00175d4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00175d8:	31 d2                	xor    edx,edx
c00175da:	58                   	pop    eax
c00175db:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00175df:	53                   	push   ebx
c00175e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00175e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175e8:	52                   	push   edx
c00175e9:	50                   	push   eax
c00175ea:	55                   	push   ebp
c00175eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175ee:	83 c4 14             	add    esp,0x14
c00175f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175f5:	e8 c9 23 ff ff       	call   c00099c3 <malloc>
c00175fa:	31 d2                	xor    edx,edx
c00175fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017600:	83 c4 0c             	add    esp,0xc
c0017603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017607:	52                   	push   edx
c0017608:	50                   	push   eax
c0017609:	55                   	push   ebp
c001760a:	e8 31 5d ff ff       	call   c000d340 <File::seek(unsigned long long)>
c001760f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017612:	31 d2                	xor    edx,edx
c0017614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017617:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001761b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001761f:	52                   	push   edx
c0017620:	50                   	push   eax
c0017621:	55                   	push   ebp
c0017622:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017625:	83 c4 20             	add    esp,0x20
c0017628:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017630:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017634:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017638:	0f 84 0b 03 00 00    	je     c0017949 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001763e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017645:	31 d2                	xor    edx,edx
c0017647:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001764b:	c1 e8 03             	shr    eax,0x3
c001764e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017652:	51                   	push   ecx
c0017653:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017657:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001765b:	52                   	push   edx
c001765c:	50                   	push   eax
c001765d:	55                   	push   ebp
c001765e:	e8 dd 5c ff ff       	call   c000d340 <File::seek(unsigned long long)>
c0017663:	5b                   	pop    ebx
c0017664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017668:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001766f:	e8 4f 23 ff ff       	call   c00099c3 <malloc>
c0017674:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017677:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001767b:	31 d2                	xor    edx,edx
c001767d:	5e                   	pop    esi
c001767e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017682:	50                   	push   eax
c0017683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017687:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001768b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017692:	52                   	push   edx
c0017693:	50                   	push   eax
c0017694:	55                   	push   ebp
c0017695:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017698:	83 c4 20             	add    esp,0x20
c001769b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00176a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00176a7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00176ab:	0f 8d 7c 02 00 00    	jge    c001792d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00176b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00176b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176b9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00176be:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00176c1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00176c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176c9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c00176cd:	89 d8                	mov    eax,ebx
c00176cf:	c1 e8 08             	shr    eax,0x8
c00176d2:	89 c6                	mov    esi,eax
c00176d4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176d8:	c1 e6 04             	shl    esi,0x4
c00176db:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00176df:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00176e2:	85 d2                	test   edx,edx
c00176e4:	0f 85 bf 00 00 00    	jne    c00177a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00176ea:	83 ec 0c             	sub    esp,0xc
c00176ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176f1:	03 06                	add    eax,DWORD PTR [esi]
c00176f3:	50                   	push   eax
c00176f4:	e8 4b f8 ff ff       	call   c0016f44 <Thr::getAddressOfKernelSymbol(char const*)>
c00176f9:	83 c4 10             	add    esp,0x10
c00176fc:	89 c2                	mov    edx,eax
c00176fe:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017703:	85 c0                	test   eax,eax
c0017705:	0f 85 9e 00 00 00    	jne    c00177a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001770b:	83 ec 0c             	sub    esp,0xc
c001770e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017712:	03 06                	add    eax,DWORD PTR [esi]
c0017714:	50                   	push   eax
c0017715:	e8 f6 11 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	89 c2                	mov    edx,eax
c001771f:	85 c0                	test   eax,eax
c0017721:	0f 85 82 00 00 00    	jne    c00177a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017727:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001772b:	50                   	push   eax
c001772c:	50                   	push   eax
c001772d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017731:	03 06                	add    eax,DWORD PTR [esi]
c0017733:	50                   	push   eax
c0017734:	68 fa 60 02 c0       	push   0xc00260fa
c0017739:	e8 75 55 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001773e:	58                   	pop    eax
c001773f:	5a                   	pop    edx
c0017740:	68 14 61 02 c0       	push   0xc0026114
c0017745:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001774c:	50                   	push   eax
c001774d:	e8 ee 8f fe ff       	call   c0000740 <strcpy>
c0017752:	59                   	pop    ecx
c0017753:	58                   	pop    eax
c0017754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017758:	03 06                	add    eax,DWORD PTR [esi]
c001775a:	50                   	push   eax
c001775b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017762:	50                   	push   eax
c0017763:	e8 18 91 fe ff       	call   c0000880 <strcat>
c0017768:	58                   	pop    eax
c0017769:	5a                   	pop    edx
c001776a:	68 aa 61 02 c0       	push   0xc00261aa
c001776f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017776:	50                   	push   eax
c0017777:	e8 04 91 fe ff       	call   c0000880 <strcat>
c001777c:	83 c4 10             	add    esp,0x10
c001777f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017784:	0f 84 5d 01 00 00    	je     c00178e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001778a:	83 ec 0c             	sub    esp,0xc
c001778d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017794:	50                   	push   eax
c0017795:	e8 85 d0 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001779a:	83 c4 10             	add    esp,0x10
c001779d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00177a1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00177a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00177a9:	80 fb 01             	cmp    bl,0x1
c00177ac:	0f 85 88 00 00 00    	jne    c001783a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c00177b2:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00177b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00177bd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c00177c1:	01 ce                	add    esi,ecx
c00177c3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00177c9:	0f 94 c0             	sete   al
c00177cc:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00177d2:	0f 94 c3             	sete   bl
c00177d5:	09 c3                	or     ebx,eax
c00177d7:	8b 06                	mov    eax,DWORD PTR [esi]
c00177d9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00177de:	74 41                	je     c0017821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00177e0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00177e3:	84 db                	test   bl,bl
c00177e5:	75 15                	jne    c00177fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00177e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00177eb:	66 83 f8 0c          	cmp    ax,0xc
c00177ef:	76 05                	jbe    c00177f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00177f1:	b8 0c 00 00 00       	mov    eax,0xc
c00177f6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00177fa:	76 37                	jbe    c0017833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00177fc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017800:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017805:	0f 84 dc 00 00 00    	je     c00178e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001780b:	83 ec 0c             	sub    esp,0xc
c001780e:	68 2b 61 02 c0       	push   0xc002612b
c0017813:	e8 07 d0 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017818:	83 c4 10             	add    esp,0x10
c001781b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001781f:	eb 12                	jmp    c0017833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017821:	01 c1                	add    ecx,eax
c0017823:	84 db                	test   bl,bl
c0017825:	75 0c                	jne    c0017833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017827:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001782b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001782f:	77 02                	ja     c0017833 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017831:	01 d1                	add    ecx,edx
c0017833:	89 0e                	mov    DWORD PTR [esi],ecx
c0017835:	e9 ea 00 00 00       	jmp    c0017924 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001783a:	80 fb 02             	cmp    bl,0x2
c001783d:	75 7c                	jne    c00178bb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001783f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017846:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001784a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001784e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017854:	74 20                	je     c0017876 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017856:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001785c:	74 18                	je     c0017876 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001785e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017862:	b9 0a 00 00 00       	mov    ecx,0xa
c0017867:	66 83 f8 0e          	cmp    ax,0xe
c001786b:	77 03                	ja     c0017870 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001786d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017870:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017874:	76 1f                	jbe    c0017895 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017876:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001787a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001787f:	74 66                	je     c00178e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	68 47 61 02 c0       	push   0xc0026147
c0017889:	e8 91 cf ff ff       	call   c001481f <Krnl::panic(char const*)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017895:	8b 06                	mov    eax,DWORD PTR [esi]
c0017897:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001789c:	74 13                	je     c00178b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001789e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00178a2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00178a9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c00178ad:	01 c8                	add    eax,ecx
c00178af:	eb 04                	jmp    c00178b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c00178b1:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00178b5:	01 c2                	add    edx,eax
c00178b7:	89 16                	mov    DWORD PTR [esi],edx
c00178b9:	eb 69                	jmp    c0017924 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178bb:	0f b6 db             	movzx  ebx,bl
c00178be:	50                   	push   eax
c00178bf:	50                   	push   eax
c00178c0:	53                   	push   ebx
c00178c1:	68 63 61 02 c0       	push   0xc0026163
c00178c6:	e8 e8 53 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00178cb:	83 c4 10             	add    esp,0x10
c00178ce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00178d3:	74 12                	je     c00178e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00178d5:	83 ec 0c             	sub    esp,0xc
c00178d8:	68 6e 61 02 c0       	push   0xc002616e
c00178dd:	e8 3d cf ff ff       	call   c001481f <Krnl::panic(char const*)>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	eb 3d                	jmp    c0017924 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00178e7:	83 ec 0c             	sub    esp,0xc
c00178ea:	55                   	push   ebp
c00178eb:	e8 f0 59 ff ff       	call   c000d2e0 <File::close()>
c00178f0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00178f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00178f9:	59                   	pop    ecx
c00178fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00178fe:	e8 d0 20 ff ff       	call   c00099d3 <free>
c0017903:	5b                   	pop    ebx
c0017904:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017908:	e8 c6 20 ff ff       	call   c00099d3 <free>
c001790d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017910:	e8 be 20 ff ff       	call   c00099d3 <free>
c0017915:	5e                   	pop    esi
c0017916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001791a:	e8 b4 20 ff ff       	call   c00099d3 <free>
c001791f:	83 c4 10             	add    esp,0x10
c0017922:	eb 21                	jmp    c0017945 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017924:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017928:	e9 76 fd ff ff       	jmp    c00176a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001792d:	83 ec 0c             	sub    esp,0xc
c0017930:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017934:	e8 9a 20 ff ff       	call   c00099d3 <free>
c0017939:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	e9 eb fc ff ff       	jmp    c0017630 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017945:	31 c0                	xor    eax,eax
c0017947:	eb 33                	jmp    c001797c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017949:	83 ec 0c             	sub    esp,0xc
c001794c:	55                   	push   ebp
c001794d:	e8 8e 59 ff ff       	call   c000d2e0 <File::close()>
c0017952:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017955:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017958:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001795b:	58                   	pop    eax
c001795c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017960:	e8 6e 20 ff ff       	call   c00099d3 <free>
c0017965:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017968:	e8 66 20 ff ff       	call   c00099d3 <free>
c001796d:	5a                   	pop    edx
c001796e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017972:	e8 5c 20 ff ff       	call   c00099d3 <free>
c0017977:	83 c4 10             	add    esp,0x10
c001797a:	b0 01                	mov    al,0x1
c001797c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017982:	5b                   	pop    ebx
c0017983:	5e                   	pop    esi
c0017984:	5f                   	pop    edi
c0017985:	5d                   	pop    ebp
c0017986:	c3                   	ret    

c0017987 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017987:	56                   	push   esi
c0017988:	31 d2                	xor    edx,edx
c001798a:	53                   	push   ebx
c001798b:	8b 1d 80 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e80
c0017991:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017995:	39 d3                	cmp    ebx,edx
c0017997:	7e 1b                	jle    c00179b4 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017999:	8b 04 95 a0 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6f60]
c00179a0:	39 c8                	cmp    eax,ecx
c00179a2:	77 0d                	ja     c00179b1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00179a4:	8b 34 95 a0 8e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7160]
c00179ab:	01 c6                	add    esi,eax
c00179ad:	39 ce                	cmp    esi,ecx
c00179af:	77 05                	ja     c00179b6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00179b1:	42                   	inc    edx
c00179b2:	eb e1                	jmp    c0017995 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00179b4:	31 c0                	xor    eax,eax
c00179b6:	5b                   	pop    ebx
c00179b7:	5e                   	pop    esi
c00179b8:	c3                   	ret    

c00179b9 <Thr::getDriverNameFromAddress(unsigned long)>:
c00179b9:	53                   	push   ebx
c00179ba:	31 c0                	xor    eax,eax
c00179bc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00179c0:	8b 1d 80 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e80
c00179c6:	39 c3                	cmp    ebx,eax
c00179c8:	7e 22                	jle    c00179ec <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00179ca:	8b 14 85 a0 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6f60]
c00179d1:	39 ca                	cmp    edx,ecx
c00179d3:	77 14                	ja     c00179e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00179d5:	03 14 85 a0 8e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7160]
c00179dc:	39 ca                	cmp    edx,ecx
c00179de:	76 09                	jbe    c00179e9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00179e0:	8b 04 85 a0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d60]
c00179e7:	eb 05                	jmp    c00179ee <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00179e9:	40                   	inc    eax
c00179ea:	eb da                	jmp    c00179c6 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00179ec:	31 c0                	xor    eax,eax
c00179ee:	5b                   	pop    ebx
c00179ef:	c3                   	ret    

c00179f0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00179f0:	53                   	push   ebx
c00179f1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00179f5:	53                   	push   ebx
c00179f6:	e8 8c ff ff ff       	call   c0017987 <Thr::getDriverBaseFromAddress(unsigned long)>
c00179fb:	5a                   	pop    edx
c00179fc:	31 d2                	xor    edx,edx
c00179fe:	85 c0                	test   eax,eax
c0017a00:	74 04                	je     c0017a06 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017a02:	89 da                	mov    edx,ebx
c0017a04:	29 c2                	sub    edx,eax
c0017a06:	89 d0                	mov    eax,edx
c0017a08:	5b                   	pop    ebx
c0017a09:	c3                   	ret    

c0017a0a <Thr::loadDLL(char const*, bool)>:
c0017a0a:	55                   	push   ebp
c0017a0b:	57                   	push   edi
c0017a0c:	56                   	push   esi
c0017a0d:	53                   	push   ebx
c0017a0e:	81 ec 34 01 00 00    	sub    esp,0x134
c0017a14:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017a1b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017a22:	56                   	push   esi
c0017a23:	68 86 61 02 c0       	push   0xc0026186
c0017a28:	e8 86 52 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017a2d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017a34:	e8 8a 1f ff ff       	call   c00099c3 <malloc>
c0017a39:	83 c4 0c             	add    esp,0xc
c0017a3c:	89 c3                	mov    ebx,eax
c0017a3e:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0017a44:	56                   	push   esi
c0017a45:	50                   	push   eax
c0017a46:	e8 d3 57 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0017a4b:	83 c4 10             	add    esp,0x10
c0017a4e:	85 db                	test   ebx,ebx
c0017a50:	75 3c                	jne    c0017a8e <Thr::loadDLL(char const*, bool)+0x84>
c0017a52:	89 f8                	mov    eax,edi
c0017a54:	84 c0                	test   al,al
c0017a56:	0f 84 d2 01 00 00    	je     c0017c2e <Thr::loadDLL(char const*, bool)+0x224>
c0017a5c:	55                   	push   ebp
c0017a5d:	55                   	push   ebp
c0017a5e:	68 97 61 02 c0       	push   0xc0026197
c0017a63:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017a67:	55                   	push   ebp
c0017a68:	e8 d3 8c fe ff       	call   c0000740 <strcpy>
c0017a6d:	58                   	pop    eax
c0017a6e:	5a                   	pop    edx
c0017a6f:	56                   	push   esi
c0017a70:	55                   	push   ebp
c0017a71:	e8 0a 8e fe ff       	call   c0000880 <strcat>
c0017a76:	59                   	pop    ecx
c0017a77:	58                   	pop    eax
c0017a78:	68 aa 61 02 c0       	push   0xc00261aa
c0017a7d:	55                   	push   ebp
c0017a7e:	e8 fd 8d fe ff       	call   c0000880 <strcat>
c0017a83:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017a86:	e8 94 cd ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	51                   	push   ecx
c0017a8f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017a93:	50                   	push   eax
c0017a94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017a98:	50                   	push   eax
c0017a99:	53                   	push   ebx
c0017a9a:	e8 8f 5a ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	85 db                	test   ebx,ebx
c0017aa4:	74 0c                	je     c0017ab2 <Thr::loadDLL(char const*, bool)+0xa8>
c0017aa6:	83 ec 0c             	sub    esp,0xc
c0017aa9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017aab:	53                   	push   ebx
c0017aac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017ab7:	75 0a                	jne    c0017ac3 <Thr::loadDLL(char const*, bool)+0xb9>
c0017ab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017abd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017ac1:	75 3c                	jne    c0017aff <Thr::loadDLL(char const*, bool)+0xf5>
c0017ac3:	89 f8                	mov    eax,edi
c0017ac5:	84 c0                	test   al,al
c0017ac7:	0f 84 49 01 00 00    	je     c0017c16 <Thr::loadDLL(char const*, bool)+0x20c>
c0017acd:	51                   	push   ecx
c0017ace:	51                   	push   ecx
c0017acf:	68 97 61 02 c0       	push   0xc0026197
c0017ad4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017ad8:	53                   	push   ebx
c0017ad9:	e8 62 8c fe ff       	call   c0000740 <strcpy>
c0017ade:	5d                   	pop    ebp
c0017adf:	58                   	pop    eax
c0017ae0:	56                   	push   esi
c0017ae1:	53                   	push   ebx
c0017ae2:	e8 99 8d fe ff       	call   c0000880 <strcat>
c0017ae7:	58                   	pop    eax
c0017ae8:	5a                   	pop    edx
c0017ae9:	68 aa 61 02 c0       	push   0xc00261aa
c0017aee:	53                   	push   ebx
c0017aef:	e8 8c 8d fe ff       	call   c0000880 <strcat>
c0017af4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017af7:	e8 23 cd ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017afc:	83 c4 10             	add    esp,0x10
c0017aff:	52                   	push   edx
c0017b00:	6a 03                	push   0x3
c0017b02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017b0a:	05 ff 0f 00 00       	add    eax,0xfff
c0017b0f:	83 d2 00             	adc    edx,0x0
c0017b12:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017b16:	50                   	push   eax
c0017b17:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c0017b1d:	e8 14 46 ff ff       	call   c000c136 <VAS::allocatePages(int, int)>
c0017b22:	59                   	pop    ecx
c0017b23:	89 c3                	mov    ebx,eax
c0017b25:	5d                   	pop    ebp
c0017b26:	50                   	push   eax
c0017b27:	68 26 44 02 c0       	push   0xc0024426
c0017b2c:	e8 82 51 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017b31:	89 34 24             	mov    DWORD PTR [esp],esi
c0017b34:	e8 67 8b fe ff       	call   c00006a0 <strlen>
c0017b39:	8b 2d 80 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028e80
c0017b3f:	40                   	inc    eax
c0017b40:	89 04 24             	mov    DWORD PTR [esp],eax
c0017b43:	e8 7b 1e ff ff       	call   c00099c3 <malloc>
c0017b48:	89 04 ad a0 92 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6d60],eax
c0017b4f:	58                   	pop    eax
c0017b50:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0017b55:	5a                   	pop    edx
c0017b56:	56                   	push   esi
c0017b57:	ff 34 85 a0 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6d60]
c0017b5e:	e8 dd 8b fe ff       	call   c0000740 <strcpy>
c0017b63:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0017b68:	8d 50 01             	lea    edx,[eax+0x1]
c0017b6b:	89 1c 85 a0 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6f60],ebx
c0017b72:	89 15 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,edx
c0017b78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b7c:	83 c4 0c             	add    esp,0xc
c0017b7f:	89 14 85 a0 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7160],edx
c0017b86:	6a 01                	push   0x1
c0017b88:	53                   	push   ebx
c0017b89:	56                   	push   esi
c0017b8a:	e8 c2 f6 ff ff       	call   c0017251 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017b8f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017b93:	83 c4 10             	add    esp,0x10
c0017b96:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017b9b:	0f 85 89 00 00 00    	jne    c0017c2a <Thr::loadDLL(char const*, bool)+0x220>
c0017ba1:	89 f8                	mov    eax,edi
c0017ba3:	84 c0                	test   al,al
c0017ba5:	74 73                	je     c0017c1a <Thr::loadDLL(char const*, bool)+0x210>
c0017ba7:	83 ec 0c             	sub    esp,0xc
c0017baa:	68 ac 61 02 c0       	push   0xc00261ac
c0017baf:	e8 6b cc ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	eb 61                	jmp    c0017c1a <Thr::loadDLL(char const*, bool)+0x210>
c0017bb9:	50                   	push   eax
c0017bba:	50                   	push   eax
c0017bbb:	89 e8                	mov    eax,ebp
c0017bbd:	c1 e0 0c             	shl    eax,0xc
c0017bc0:	01 d8                	add    eax,ebx
c0017bc2:	50                   	push   eax
c0017bc3:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c0017bc9:	e8 d0 40 ff ff       	call   c000bc9e <VAS::getPageTableEntry(unsigned long)>
c0017bce:	83 c4 10             	add    esp,0x10
c0017bd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bd3:	a8 60                	test   al,0x60
c0017bd5:	75 11                	jne    c0017be8 <Thr::loadDLL(char const*, bool)+0x1de>
c0017bd7:	83 ec 0c             	sub    esp,0xc
c0017bda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017bdf:	50                   	push   eax
c0017be0:	e8 12 24 ff ff       	call   c0009ff7 <Phys::freePage(unsigned long)>
c0017be5:	83 c4 10             	add    esp,0x10
c0017be8:	45                   	inc    ebp
c0017be9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bf1:	05 ff 0f 00 00       	add    eax,0xfff
c0017bf6:	bf 00 00 00 00       	mov    edi,0x0
c0017bfb:	83 d2 00             	adc    edx,0x0
c0017bfe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017c02:	c1 ea 0c             	shr    edx,0xc
c0017c05:	39 c5                	cmp    ebp,eax
c0017c07:	89 d1                	mov    ecx,edx
c0017c09:	89 f8                	mov    eax,edi
c0017c0b:	19 c8                	sbb    eax,ecx
c0017c0d:	72 aa                	jb     c0017bb9 <Thr::loadDLL(char const*, bool)+0x1af>
c0017c0f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017c14:	75 18                	jne    c0017c2e <Thr::loadDLL(char const*, bool)+0x224>
c0017c16:	31 db                	xor    ebx,ebx
c0017c18:	eb 14                	jmp    c0017c2e <Thr::loadDLL(char const*, bool)+0x224>
c0017c1a:	83 ec 0c             	sub    esp,0xc
c0017c1d:	68 cb 61 02 c0       	push   0xc00261cb
c0017c22:	e8 f8 cb ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	31 ed                	xor    ebp,ebp
c0017c2c:	eb bb                	jmp    c0017be9 <Thr::loadDLL(char const*, bool)+0x1df>
c0017c2e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017c34:	89 d8                	mov    eax,ebx
c0017c36:	5b                   	pop    ebx
c0017c37:	5e                   	pop    esi
c0017c38:	5f                   	pop    edi
c0017c39:	5d                   	pop    ebp
c0017c3a:	c3                   	ret    

c0017c3b <Thr::executeDLL(unsigned long, void*)>:
c0017c3b:	56                   	push   esi
c0017c3c:	53                   	push   ebx
c0017c3d:	52                   	push   edx
c0017c3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017c42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017c46:	85 db                	test   ebx,ebx
c0017c48:	75 10                	jne    c0017c5a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017c4a:	83 ec 0c             	sub    esp,0xc
c0017c4d:	68 e7 61 02 c0       	push   0xc00261e7
c0017c52:	e8 c8 cb ff ff       	call   c001481f <Krnl::panic(char const*)>
c0017c57:	83 c4 10             	add    esp,0x10
c0017c5a:	50                   	push   eax
c0017c5b:	50                   	push   eax
c0017c5c:	53                   	push   ebx
c0017c5d:	68 11 62 02 c0       	push   0xc0026211
c0017c62:	e8 4c 50 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017c67:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017c6b:	89 d8                	mov    eax,ebx
c0017c6d:	83 c4 14             	add    esp,0x14
c0017c70:	5b                   	pop    ebx
c0017c71:	5e                   	pop    esi
c0017c72:	ff e0                	jmp    eax

c0017c74 <userModeEntryPoint(void*)>:
c0017c74:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0017c79:	48                   	dec    eax
c0017c7a:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0017c7f:	75 03                	jne    c0017c84 <userModeEntryPoint(void*)+0x10>
c0017c81:	fb                   	sti    
c0017c82:	66 90                	xchg   ax,ax
c0017c84:	fb                   	sti    
c0017c85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017c8d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017c93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c97:	e9 c3 85 fe ff       	jmp    c000025f <goToUsermode>

c0017c9c <changeTSS>:
c0017c9c:	83 ec 14             	sub    esp,0x14
c0017c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ca4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017ca7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017cac:	c1 e2 15             	shl    edx,0x15
c0017caf:	29 d0                	sub    eax,edx
c0017cb1:	50                   	push   eax
c0017cb2:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0017cb7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017cbd:	05 7c 11 00 00       	add    eax,0x117c
c0017cc2:	50                   	push   eax
c0017cc3:	e8 18 36 ff ff       	call   c000b2e0 <TSS::setESP(unsigned long)>
c0017cc8:	83 c4 1c             	add    esp,0x1c
c0017ccb:	c3                   	ret    

c0017ccc <switchToThread(ThreadControlBlock*)>:
c0017ccc:	57                   	push   edi
c0017ccd:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0017cd2:	56                   	push   esi
c0017cd3:	85 c0                	test   eax,eax
c0017cd5:	53                   	push   ebx
c0017cd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017cda:	0f 85 90 00 00 00    	jne    c0017d70 <switchToThread(ThreadControlBlock*)+0xa4>
c0017ce0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017ce3:	3c ff                	cmp    al,0xff
c0017ce5:	0f 84 81 00 00 00    	je     c0017d6c <switchToThread(ThreadControlBlock*)+0xa0>
c0017ceb:	0f b6 d0             	movzx  edx,al
c0017cee:	b8 00 04 00 00       	mov    eax,0x400
c0017cf3:	29 d0                	sub    eax,edx
c0017cf5:	d1 f8                	sar    eax,1
c0017cf7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017cfa:	66 90                	xchg   ax,ax
c0017cfc:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017cff:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0017d04:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017d0a:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017d11:	74 4d                	je     c0017d60 <switchToThread(ThreadControlBlock*)+0x94>
c0017d13:	0f 31                	rdtsc  
c0017d15:	a3 88 96 02 c0       	mov    ds:0xc0029688,eax
c0017d1a:	89 c6                	mov    esi,eax
c0017d1c:	89 d7                	mov    edi,edx
c0017d1e:	2b 35 78 96 02 c0    	sub    esi,DWORD PTR ds:0xc0029678
c0017d24:	89 15 8c 96 02 c0    	mov    DWORD PTR ds:0xc002968c,edx
c0017d2a:	1b 3d 7c 96 02 c0    	sbb    edi,DWORD PTR ds:0xc002967c
c0017d30:	89 35 80 96 02 c0    	mov    DWORD PTR ds:0xc0029680,esi
c0017d36:	a3 78 96 02 c0       	mov    ds:0xc0029678,eax
c0017d3b:	89 3d 84 96 02 c0    	mov    DWORD PTR ds:0xc0029684,edi
c0017d41:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017d47:	89 15 7c 96 02 c0    	mov    DWORD PTR ds:0xc002967c,edx
c0017d4d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017d50:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017d53:	01 c6                	add    esi,eax
c0017d55:	11 d7                	adc    edi,edx
c0017d57:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017d5a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017d64:	5b                   	pop    ebx
c0017d65:	5e                   	pop    esi
c0017d66:	5f                   	pop    edi
c0017d67:	e9 2b 85 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017d6c:	31 c0                	xor    eax,eax
c0017d6e:	eb 8c                	jmp    c0017cfc <switchToThread(ThreadControlBlock*)+0x30>
c0017d70:	5b                   	pop    ebx
c0017d71:	c7 05 40 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x1
c0017d7b:	5e                   	pop    esi
c0017d7c:	5f                   	pop    edi
c0017d7d:	c3                   	ret    
c0017d7e:	66 90                	xchg   ax,ax

c0017d80 <Process::addArgs(char**)>:
c0017d80:	57                   	push   edi
c0017d81:	56                   	push   esi
c0017d82:	53                   	push   ebx
c0017d83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d8b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017d95:	85 ff                	test   edi,edi
c0017d97:	74 43                	je     c0017ddc <Process::addArgs(char**)+0x5c>
c0017d99:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d9b:	85 c0                	test   eax,eax
c0017d9d:	74 3d                	je     c0017ddc <Process::addArgs(char**)+0x5c>
c0017d9f:	31 db                	xor    ebx,ebx
c0017da1:	8d 76 00             	lea    esi,[esi+0x0]
c0017da4:	83 ec 0c             	sub    esp,0xc
c0017da7:	50                   	push   eax
c0017da8:	e8 f3 88 fe ff       	call   c00006a0 <strlen>
c0017dad:	40                   	inc    eax
c0017dae:	89 04 24             	mov    DWORD PTR [esp],eax
c0017db1:	e8 0d 1c ff ff       	call   c00099c3 <malloc>
c0017db6:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017dbd:	5a                   	pop    edx
c0017dbe:	59                   	pop    ecx
c0017dbf:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017dc2:	43                   	inc    ebx
c0017dc3:	50                   	push   eax
c0017dc4:	e8 77 89 fe ff       	call   c0000740 <strcpy>
c0017dc9:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017dd5:	85 c0                	test   eax,eax
c0017dd7:	75 cb                	jne    c0017da4 <Process::addArgs(char**)+0x24>
c0017dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ddc:	5b                   	pop    ebx
c0017ddd:	5e                   	pop    esi
c0017dde:	5f                   	pop    edi
c0017ddf:	c3                   	ret    

c0017de0 <Process::Process(char const*, Process*, char**)>:
c0017de0:	56                   	push   esi
c0017de1:	53                   	push   ebx
c0017de2:	83 ec 14             	sub    esp,0x14
c0017de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017de9:	05 0c 02 00 00       	add    eax,0x20c
c0017dee:	bb 07 00 00 00       	mov    ebx,0x7
c0017df3:	89 c6                	mov    esi,eax
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	85 db                	test   ebx,ebx
c0017dfa:	78 14                	js     c0017e10 <Process::Process(char const*, Process*, char**)+0x30>
c0017dfc:	83 ec 0c             	sub    esp,0xc
c0017dff:	56                   	push   esi
c0017e00:	e8 eb b4 00 00       	call   c00232f0 <ThreadControlBlock::ThreadControlBlock()>
c0017e05:	83 c4 10             	add    esp,0x10
c0017e08:	83 c6 5f             	add    esi,0x5f
c0017e0b:	4b                   	dec    ebx
c0017e0c:	eb ea                	jmp    c0017df8 <Process::Process(char const*, Process*, char**)+0x18>
c0017e0e:	66 90                	xchg   ax,ax
c0017e10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e14:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017e1b:	83 ec 0c             	sub    esp,0xc
c0017e1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e22:	e8 81 c8 ff ff       	call   c00146a8 <Krnl::newProcessEnv(Process*)>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	89 c2                	mov    edx,eax
c0017e2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e30:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e3a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017e43:	a1 b0 7b 02 c0       	mov    eax,ds:0xc0027bb0
c0017e48:	8d 50 01             	lea    edx,[eax+0x1]
c0017e4b:	89 15 b0 7b 02 c0    	mov    DWORD PTR ds:0xc0027bb0,edx
c0017e51:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e55:	89 02                	mov    DWORD PTR [edx],eax
c0017e57:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e66:	e8 58 1b ff ff       	call   c00099c3 <malloc>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	89 c3                	mov    ebx,eax
c0017e70:	83 ec 08             	sub    esp,0x8
c0017e73:	6a 00                	push   0x0
c0017e75:	53                   	push   ebx
c0017e76:	e8 63 46 ff ff       	call   c000c4de <VAS::VAS(bool)>
c0017e7b:	83 c4 10             	add    esp,0x10
c0017e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e82:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e9e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017eae:	85 c0                	test   eax,eax
c0017eb0:	74 42                	je     c0017ef4 <Process::Process(char const*, Process*, char**)+0x114>
c0017eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ebc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017ed6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee0:	05 0c 01 00 00       	add    eax,0x10c
c0017ee5:	83 ec 08             	sub    esp,0x8
c0017ee8:	52                   	push   edx
c0017ee9:	50                   	push   eax
c0017eea:	e8 51 88 fe ff       	call   c0000740 <strcpy>
c0017eef:	83 c4 10             	add    esp,0x10
c0017ef2:	eb 64                	jmp    c0017f58 <Process::Process(char const*, Process*, char**)+0x178>
c0017ef4:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017efc:	83 ec 0c             	sub    esp,0xc
c0017eff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017f03:	e8 bb 1a ff ff       	call   c00099c3 <malloc>
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	89 c3                	mov    ebx,eax
c0017f0d:	83 ec 08             	sub    esp,0x8
c0017f10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f14:	53                   	push   ebx
c0017f15:	e8 d6 30 ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c0017f1a:	83 c4 10             	add    esp,0x10
c0017f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f31:	83 ec 0c             	sub    esp,0xc
c0017f34:	50                   	push   eax
c0017f35:	e8 75 28 ff ff       	call   c000a7af <addToTerminalCycle(VgaText*)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	05 0c 01 00 00       	add    eax,0x10c
c0017f46:	83 ec 08             	sub    esp,0x8
c0017f49:	68 30 62 02 c0       	push   0xc0026230
c0017f4e:	50                   	push   eax
c0017f4f:	e8 ec 87 fe ff       	call   c0000740 <strcpy>
c0017f54:	83 c4 10             	add    esp,0x10
c0017f57:	90                   	nop
c0017f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5c:	83 c0 0c             	add    eax,0xc
c0017f5f:	83 ec 08             	sub    esp,0x8
c0017f62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f66:	50                   	push   eax
c0017f67:	e8 d4 87 fe ff       	call   c0000740 <strcpy>
c0017f6c:	83 c4 10             	add    esp,0x10
c0017f6f:	83 ec 08             	sub    esp,0x8
c0017f72:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f7a:	e8 01 fe ff ff       	call   c0017d80 <Process::addArgs(char**)>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f8d:	e8 89 ed ff ff       	call   c0016d1b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017f92:	83 c4 10             	add    esp,0x10
c0017f95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f9d:	83 f0 01             	xor    eax,0x1
c0017fa0:	88 c2                	mov    dl,al
c0017fa2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017fac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017fb1:	83 ec 08             	sub    esp,0x8
c0017fb4:	50                   	push   eax
c0017fb5:	68 88 62 02 c0       	push   0xc0026288
c0017fba:	e8 f4 4c ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0017fbf:	83 c4 10             	add    esp,0x10
c0017fc2:	90                   	nop
c0017fc3:	83 c4 14             	add    esp,0x14
c0017fc6:	5b                   	pop    ebx
c0017fc7:	5e                   	pop    esi
c0017fc8:	c3                   	ret    
c0017fc9:	90                   	nop
c0017fca:	66 90                	xchg   ax,ax

c0017fcc <Process::Process(bool, char const*, Process*, char**)>:
c0017fcc:	56                   	push   esi
c0017fcd:	53                   	push   ebx
c0017fce:	83 ec 24             	sub    esp,0x24
c0017fd1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017fd5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fdd:	05 0c 02 00 00       	add    eax,0x20c
c0017fe2:	bb 07 00 00 00       	mov    ebx,0x7
c0017fe7:	89 c6                	mov    esi,eax
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	85 db                	test   ebx,ebx
c0017fee:	78 14                	js     c0018004 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017ff0:	83 ec 0c             	sub    esp,0xc
c0017ff3:	56                   	push   esi
c0017ff4:	e8 f7 b2 00 00       	call   c00232f0 <ThreadControlBlock::ThreadControlBlock()>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	83 c6 5f             	add    esi,0x5f
c0017fff:	4b                   	dec    ebx
c0018000:	eb ea                	jmp    c0017fec <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018002:	66 90                	xchg   ax,ax
c0018004:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018008:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001800f:	83 ec 0c             	sub    esp,0xc
c0018012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018016:	e8 8d c6 ff ff       	call   c00146a8 <Krnl::newProcessEnv(Process*)>
c001801b:	83 c4 10             	add    esp,0x10
c001801e:	89 c2                	mov    edx,eax
c0018020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018024:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001802a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001802e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018037:	a1 b0 7b 02 c0       	mov    eax,ds:0xc0027bb0
c001803c:	8d 50 01             	lea    edx,[eax+0x1]
c001803f:	89 15 b0 7b 02 c0    	mov    DWORD PTR ds:0xc0027bb0,edx
c0018045:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018049:	89 02                	mov    DWORD PTR [edx],eax
c001804b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018053:	83 ec 0c             	sub    esp,0xc
c0018056:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001805a:	e8 64 19 ff ff       	call   c00099c3 <malloc>
c001805f:	83 c4 10             	add    esp,0x10
c0018062:	89 c3                	mov    ebx,eax
c0018064:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018069:	83 ec 08             	sub    esp,0x8
c001806c:	50                   	push   eax
c001806d:	53                   	push   ebx
c001806e:	e8 6b 44 ff ff       	call   c000c4de <VAS::VAS(bool)>
c0018073:	83 c4 10             	add    esp,0x10
c0018076:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001807a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018084:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001808e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018096:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001809c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180a6:	85 c0                	test   eax,eax
c00180a8:	74 42                	je     c00180ec <Process::Process(bool, char const*, Process*, char**)+0x120>
c00180aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180ae:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180b4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00180ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180be:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00180c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00180ce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00180d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180d8:	05 0c 01 00 00       	add    eax,0x10c
c00180dd:	83 ec 08             	sub    esp,0x8
c00180e0:	52                   	push   edx
c00180e1:	50                   	push   eax
c00180e2:	e8 59 86 fe ff       	call   c0000740 <strcpy>
c00180e7:	83 c4 10             	add    esp,0x10
c00180ea:	eb 64                	jmp    c0018150 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00180ec:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c00180f4:	83 ec 0c             	sub    esp,0xc
c00180f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00180fb:	e8 c3 18 ff ff       	call   c00099c3 <malloc>
c0018100:	83 c4 10             	add    esp,0x10
c0018103:	89 c3                	mov    ebx,eax
c0018105:	83 ec 08             	sub    esp,0x8
c0018108:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001810c:	53                   	push   ebx
c001810d:	e8 de 2e ff ff       	call   c000aff0 <VgaText::VgaText(char const*)>
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018119:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001811f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018123:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	50                   	push   eax
c001812d:	e8 7d 26 ff ff       	call   c000a7af <addToTerminalCycle(VgaText*)>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018139:	05 0c 01 00 00       	add    eax,0x10c
c001813e:	83 ec 08             	sub    esp,0x8
c0018141:	68 30 62 02 c0       	push   0xc0026230
c0018146:	50                   	push   eax
c0018147:	e8 f4 85 fe ff       	call   c0000740 <strcpy>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	90                   	nop
c0018150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018154:	83 c0 0c             	add    eax,0xc
c0018157:	83 ec 08             	sub    esp,0x8
c001815a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001815e:	50                   	push   eax
c001815f:	e8 dc 85 fe ff       	call   c0000740 <strcpy>
c0018164:	83 c4 10             	add    esp,0x10
c0018167:	83 ec 08             	sub    esp,0x8
c001816a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001816e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018172:	e8 09 fc ff ff       	call   c0017d80 <Process::addArgs(char**)>
c0018177:	83 c4 10             	add    esp,0x10
c001817a:	90                   	nop
c001817b:	83 c4 24             	add    esp,0x24
c001817e:	5b                   	pop    ebx
c001817f:	5e                   	pop    esi
c0018180:	c3                   	ret    
c0018181:	8d 76 00             	lea    esi,[esi+0x0]

c0018184 <taskStartupFunction>:
c0018184:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018189:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001818c:	c3                   	ret    
c001818d:	90                   	nop
c001818e:	66 90                	xchg   ax,ax

c0018190 <Semaphore::Semaphore(int)>:
c0018190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018194:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018198:	89 10                	mov    DWORD PTR [eax],edx
c001819a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001819e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00181a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181bb:	90                   	nop
c00181bc:	c3                   	ret    
c00181bd:	90                   	nop
c00181be:	66 90                	xchg   ax,ax

c00181c0 <Mutex::Mutex()>:
c00181c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181c4:	6a 01                	push   0x1
c00181c6:	50                   	push   eax
c00181c7:	e8 c4 ff ff ff       	call   c0018190 <Semaphore::Semaphore(int)>
c00181cc:	83 c4 08             	add    esp,0x8
c00181cf:	90                   	nop
c00181d0:	c3                   	ret    
c00181d1:	90                   	nop
c00181d2:	66 90                	xchg   ax,ax

c00181d4 <Process::createThread(void (*)(void*), void*, int)>:
c00181d4:	57                   	push   edi
c00181d5:	31 c9                	xor    ecx,ecx
c00181d7:	56                   	push   esi
c00181d8:	53                   	push   ebx
c00181d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00181dd:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00181e4:	89 f2                	mov    edx,esi
c00181e6:	66 90                	xchg   ax,ax
c00181e8:	0f b7 c2             	movzx  eax,dx
c00181eb:	83 e2 01             	and    edx,0x1
c00181ee:	74 14                	je     c0018204 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00181f0:	d1 f8                	sar    eax,1
c00181f2:	41                   	inc    ecx
c00181f3:	89 c2                	mov    edx,eax
c00181f5:	83 f9 10             	cmp    ecx,0x10
c00181f8:	75 ee                	jne    c00181e8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00181fa:	31 db                	xor    ebx,ebx
c00181fc:	89 d8                	mov    eax,ebx
c00181fe:	5b                   	pop    ebx
c00181ff:	5e                   	pop    esi
c0018200:	5f                   	pop    edi
c0018201:	c3                   	ret    
c0018202:	66 90                	xchg   ax,ax
c0018204:	b8 01 00 00 00       	mov    eax,0x1
c0018209:	d3 e0                	shl    eax,cl
c001820b:	09 c6                	or     esi,eax
c001820d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018210:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018217:	01 c0                	add    eax,eax
c0018219:	01 c8                	add    eax,ecx
c001821b:	8d 04 80             	lea    eax,[eax+eax*4]
c001821e:	01 d8                	add    eax,ebx
c0018220:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018227:	75 0b                	jne    c0018234 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018229:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018233:	90                   	nop
c0018234:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018240:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018243:	01 c0                	add    eax,eax
c0018245:	01 c8                	add    eax,ecx
c0018247:	8d 3c 80             	lea    edi,[eax+eax*4]
c001824a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001824d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018253:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018259:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001825d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018263:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018269:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018270:	89 ca                	mov    edx,ecx
c0018272:	f7 da                	neg    edx
c0018274:	c1 e2 15             	shl    edx,0x15
c0018277:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001827d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018283:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018287:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018291:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018297:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001829b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00182a1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00182ab:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00182b5:	53                   	push   ebx
c00182b6:	68 64 96 02 c0       	push   0xc0029664
c00182bb:	e8 d0 ad 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	89 d8                	mov    eax,ebx
c00182c5:	5b                   	pop    ebx
c00182c6:	5e                   	pop    esi
c00182c7:	5f                   	pop    edi
c00182c8:	c3                   	ret    
c00182c9:	90                   	nop
c00182ca:	66 90                	xchg   ax,ax

c00182cc <Process::createUserThread()>:
c00182cc:	83 ec 0c             	sub    esp,0xc
c00182cf:	68 80 00 00 00       	push   0x80
c00182d4:	6a 00                	push   0x0
c00182d6:	68 74 7c 01 c0       	push   0xc0017c74
c00182db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182df:	e8 f0 fe ff ff       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c00182e4:	83 c4 1c             	add    esp,0x1c
c00182e7:	c3                   	ret    

c00182e8 <setupMultitasking(void (*)())>:
c00182e8:	56                   	push   esi
c00182e9:	53                   	push   ebx
c00182ea:	51                   	push   ecx
c00182eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00182ef:	eb 13                	jmp    c0018304 <setupMultitasking(void (*)())+0x1c>
c00182f1:	8d 76 00             	lea    esi,[esi+0x0]
c00182f4:	83 ec 0c             	sub    esp,0xc
c00182f7:	68 64 96 02 c0       	push   0xc0029664
c00182fc:	e8 d7 ac 00 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018301:	83 c4 10             	add    esp,0x10
c0018304:	83 ec 0c             	sub    esp,0xc
c0018307:	68 64 96 02 c0       	push   0xc0029664
c001830c:	e8 a3 ac 00 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018311:	83 c4 10             	add    esp,0x10
c0018314:	84 c0                	test   al,al
c0018316:	74 dc                	je     c00182f4 <setupMultitasking(void (*)())+0xc>
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	68 1f 07 00 00       	push   0x71f
c0018320:	e8 9e 16 ff ff       	call   c00099c3 <malloc>
c0018325:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001832c:	89 c3                	mov    ebx,eax
c001832e:	6a 00                	push   0x0
c0018330:	68 34 62 02 c0       	push   0xc0026234
c0018335:	6a 01                	push   0x1
c0018337:	50                   	push   eax
c0018338:	e8 8f fc ff ff       	call   c0017fcc <Process::Process(bool, char const*, Process*, char**)>
c001833d:	83 c4 14             	add    esp,0x14
c0018340:	89 1d 70 96 02 c0    	mov    DWORD PTR ds:0xc0029670,ebx
c0018346:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001834c:	e8 6c 27 ff ff       	call   c000aabd <setActiveTerminal(VgaText*)>
c0018351:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018359:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018363:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018369:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001836c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018376:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001837c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018382:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001838c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018396:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00183a0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00183a6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00183b0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00183b6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00183c0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00183c6:	58                   	pop    eax
c00183c7:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00183cd:	5a                   	pop    edx
c00183ce:	68 30 62 02 c0       	push   0xc0026230
c00183d3:	50                   	push   eax
c00183d4:	e8 67 83 fe ff       	call   c0000740 <strcpy>
c00183d9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00183e0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00183e4:	83 c4 14             	add    esp,0x14
c00183e7:	5b                   	pop    ebx
c00183e8:	5e                   	pop    esi
c00183e9:	e9 9b 7e fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00183ee:	66 90                	xchg   ax,ax

c00183f0 <schedule()>:
c00183f0:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c00183f5:	85 c0                	test   eax,eax
c00183f7:	74 0b                	je     c0018404 <schedule()+0x14>
c00183f9:	c7 05 40 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x1
c0018403:	c3                   	ret    
c0018404:	53                   	push   ebx
c0018405:	83 ec 14             	sub    esp,0x14
c0018408:	68 64 96 02 c0       	push   0xc0029664
c001840d:	e8 a2 ab 00 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	84 c0                	test   al,al
c0018417:	75 3b                	jne    c0018454 <schedule()+0x64>
c0018419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001841e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018421:	4a                   	dec    edx
c0018422:	74 38                	je     c001845c <schedule()+0x6c>
c0018424:	83 ec 0c             	sub    esp,0xc
c0018427:	68 64 96 02 c0       	push   0xc0029664
c001842c:	e8 9f ab 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018431:	c7 04 24 64 96 02 c0 	mov    DWORD PTR [esp],0xc0029664
c0018438:	89 c3                	mov    ebx,eax
c001843a:	e8 99 ab 00 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001843f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018446:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018449:	e8 7e f8 ff ff       	call   c0017ccc <switchToThread(ThreadControlBlock*)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	8d 76 00             	lea    esi,[esi+0x0]
c0018454:	83 c4 08             	add    esp,0x8
c0018457:	5b                   	pop    ebx
c0018458:	c3                   	ret    
c0018459:	8d 76 00             	lea    esi,[esi+0x0]
c001845c:	83 ec 08             	sub    esp,0x8
c001845f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018466:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001846c:	68 64 96 02 c0       	push   0xc0029664
c0018471:	e8 1a ac 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018476:	83 c4 10             	add    esp,0x10
c0018479:	eb a9                	jmp    c0018424 <schedule()+0x34>
c001847b:	90                   	nop

c001847c <Semaphore::tryAcquire()>:
c001847c:	53                   	push   ebx
c001847d:	83 ec 08             	sub    esp,0x8
c0018480:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018484:	fa                   	cli    
c0018485:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c001848a:	8d 50 01             	lea    edx,[eax+0x1]
c001848d:	89 15 48 96 02 c0    	mov    DWORD PTR ds:0xc0029648,edx
c0018493:	8b 15 44 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029644
c0018499:	8d 5a 01             	lea    ebx,[edx+0x1]
c001849c:	89 1d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ebx
c00184a2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00184a5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00184a7:	7c 33                	jl     c00184dc <Semaphore::tryAcquire()+0x60>
c00184a9:	89 15 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,edx
c00184af:	85 d2                	test   edx,edx
c00184b1:	75 0d                	jne    c00184c0 <Semaphore::tryAcquire()+0x44>
c00184b3:	8b 15 40 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029640
c00184b9:	85 d2                	test   edx,edx
c00184bb:	75 6b                	jne    c0018528 <Semaphore::tryAcquire()+0xac>
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]
c00184c0:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00184c5:	85 c0                	test   eax,eax
c00184c7:	74 0b                	je     c00184d4 <Semaphore::tryAcquire()+0x58>
c00184c9:	8d 76 00             	lea    esi,[esi+0x0]
c00184cc:	31 c0                	xor    eax,eax
c00184ce:	83 c4 08             	add    esp,0x8
c00184d1:	5b                   	pop    ebx
c00184d2:	c3                   	ret    
c00184d3:	90                   	nop
c00184d4:	fb                   	sti    
c00184d5:	83 c4 08             	add    esp,0x8
c00184d8:	5b                   	pop    ebx
c00184d9:	c3                   	ret    
c00184da:	66 90                	xchg   ax,ax
c00184dc:	43                   	inc    ebx
c00184dd:	89 15 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,edx
c00184e3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00184e6:	85 d2                	test   edx,edx
c00184e8:	75 22                	jne    c001850c <Semaphore::tryAcquire()+0x90>
c00184ea:	8b 0d 40 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029640
c00184f0:	85 c9                	test   ecx,ecx
c00184f2:	74 18                	je     c001850c <Semaphore::tryAcquire()+0x90>
c00184f4:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c00184fe:	e8 ed fe ff ff       	call   c00183f0 <schedule()>
c0018503:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018508:	48                   	dec    eax
c0018509:	8d 76 00             	lea    esi,[esi+0x0]
c001850c:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018511:	85 c0                	test   eax,eax
c0018513:	75 0b                	jne    c0018520 <Semaphore::tryAcquire()+0xa4>
c0018515:	fb                   	sti    
c0018516:	b0 01                	mov    al,0x1
c0018518:	83 c4 08             	add    esp,0x8
c001851b:	5b                   	pop    ebx
c001851c:	c3                   	ret    
c001851d:	8d 76 00             	lea    esi,[esi+0x0]
c0018520:	b0 01                	mov    al,0x1
c0018522:	83 c4 08             	add    esp,0x8
c0018525:	5b                   	pop    ebx
c0018526:	c3                   	ret    
c0018527:	90                   	nop
c0018528:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c0018532:	e8 b9 fe ff ff       	call   c00183f0 <schedule()>
c0018537:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c001853c:	48                   	dec    eax
c001853d:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018542:	85 c0                	test   eax,eax
c0018544:	75 86                	jne    c00184cc <Semaphore::tryAcquire()+0x50>
c0018546:	eb 8c                	jmp    c00184d4 <Semaphore::tryAcquire()+0x58>

c0018548 <Semaphore::assertLocked(char const*)>:
c0018548:	83 ec 0c             	sub    esp,0xc
c001854b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001854f:	fa                   	cli    
c0018550:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018556:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c001855b:	8d 48 01             	lea    ecx,[eax+0x1]
c001855e:	89 0d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ecx
c0018564:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018566:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018569:	7c 29                	jl     c0018594 <Semaphore::assertLocked(char const*)+0x4c>
c001856b:	90                   	nop
c001856c:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0018571:	85 c0                	test   eax,eax
c0018573:	75 0b                	jne    c0018580 <Semaphore::assertLocked(char const*)+0x38>
c0018575:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c001857a:	85 c0                	test   eax,eax
c001857c:	75 2e                	jne    c00185ac <Semaphore::assertLocked(char const*)+0x64>
c001857e:	66 90                	xchg   ax,ax
c0018580:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018585:	48                   	dec    eax
c0018586:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001858b:	75 03                	jne    c0018590 <Semaphore::assertLocked(char const*)+0x48>
c001858d:	fb                   	sti    
c001858e:	66 90                	xchg   ax,ax
c0018590:	83 c4 0c             	add    esp,0xc
c0018593:	c3                   	ret    
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001859b:	e8 7f c2 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00185a0:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c00185a5:	83 c4 10             	add    esp,0x10
c00185a8:	48                   	dec    eax
c00185a9:	eb c1                	jmp    c001856c <Semaphore::assertLocked(char const*)+0x24>
c00185ab:	90                   	nop
c00185ac:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c00185b6:	e8 35 fe ff ff       	call   c00183f0 <schedule()>
c00185bb:	eb c3                	jmp    c0018580 <Semaphore::assertLocked(char const*)+0x38>
c00185bd:	8d 76 00             	lea    esi,[esi+0x0]

c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00185cf:	e8 1c fe ff ff       	call   c00183f0 <schedule()>
c00185d4:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00185d9:	48                   	dec    eax
c00185da:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00185df:	75 03                	jne    c00185e4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00185e1:	fb                   	sti    
c00185e2:	66 90                	xchg   ax,ax
c00185e4:	83 c4 0c             	add    esp,0xc
c00185e7:	c3                   	ret    

c00185e8 <blockTask(TaskState)>:
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	fa                   	cli    
c00185ec:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00185f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00185f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185fb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00185fe:	e8 ed fd ff ff       	call   c00183f0 <schedule()>
c0018603:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018608:	48                   	dec    eax
c0018609:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001860e:	75 04                	jne    c0018614 <blockTask(TaskState)+0x2c>
c0018610:	fb                   	sti    
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	83 c4 0c             	add    esp,0xc
c0018617:	c3                   	ret    

c0018618 <waitTask(int, int*, int)>:
c0018618:	83 ec 18             	sub    esp,0x18
c001861b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018620:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018624:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018627:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001862b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018630:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018633:	6a 07                	push   0x7
c0018635:	e8 ae ff ff ff       	call   c00185e8 <blockTask(TaskState)>
c001863a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018645:	85 d2                	test   edx,edx
c0018647:	74 0b                	je     c0018654 <waitTask(int, int*, int)+0x3c>
c0018649:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001864c:	89 02                	mov    DWORD PTR [edx],eax
c001864e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018653:	90                   	nop
c0018654:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018657:	83 c4 0c             	add    esp,0xc
c001865a:	c3                   	ret    
c001865b:	90                   	nop

c001865c <milliTenthSleepUntil(unsigned int)>:
c001865c:	83 ec 0c             	sub    esp,0xc
c001865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018663:	39 05 ac 87 02 c0    	cmp    DWORD PTR ds:0xc00287ac,eax
c0018669:	76 05                	jbe    c0018670 <milliTenthSleepUntil(unsigned int)+0x14>
c001866b:	90                   	nop
c001866c:	83 c4 0c             	add    esp,0xc
c001866f:	c3                   	ret    
c0018670:	fa                   	cli    
c0018671:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018677:	83 ec 08             	sub    esp,0x8
c001867a:	ff 05 44 96 02 c0    	inc    DWORD PTR ds:0xc0029644
c0018680:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018686:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018689:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001868f:	68 58 96 02 c0       	push   0xc0029658
c0018694:	e8 f7 a9 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018699:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186a0:	e8 43 ff ff ff       	call   c00185e8 <blockTask(TaskState)>
c00186a5:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	48                   	dec    eax
c00186ae:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c00186b3:	85 c0                	test   eax,eax
c00186b5:	75 09                	jne    c00186c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00186b7:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c00186bc:	85 c0                	test   eax,eax
c00186be:	75 14                	jne    c00186d4 <milliTenthSleepUntil(unsigned int)+0x78>
c00186c0:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00186c5:	48                   	dec    eax
c00186c6:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00186cb:	75 9f                	jne    c001866c <milliTenthSleepUntil(unsigned int)+0x10>
c00186cd:	fb                   	sti    
c00186ce:	83 c4 0c             	add    esp,0xc
c00186d1:	c3                   	ret    
c00186d2:	66 90                	xchg   ax,ax
c00186d4:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c00186de:	e8 0d fd ff ff       	call   c00183f0 <schedule()>
c00186e3:	eb db                	jmp    c00186c0 <milliTenthSleepUntil(unsigned int)+0x64>
c00186e5:	8d 76 00             	lea    esi,[esi+0x0]

c00186e8 <milliTenthSleep(unsigned int)>:
c00186e8:	a1 ac 87 02 c0       	mov    eax,ds:0xc00287ac
c00186ed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00186f1:	e9 66 ff ff ff       	jmp    c001865c <milliTenthSleepUntil(unsigned int)>
c00186f6:	66 90                	xchg   ax,ax

c00186f8 <sleep(unsigned int)>:
c00186f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00186fc:	8d 04 80             	lea    eax,[eax+eax*4]
c00186ff:	8d 04 80             	lea    eax,[eax+eax*4]
c0018702:	8d 04 80             	lea    eax,[eax+eax*4]
c0018705:	8d 04 80             	lea    eax,[eax+eax*4]
c0018708:	c1 e0 04             	shl    eax,0x4
c001870b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001870f:	eb d7                	jmp    c00186e8 <milliTenthSleep(unsigned int)>
c0018711:	90                   	nop
c0018712:	66 90                	xchg   ax,ax

c0018714 <Semaphore::acquire()>:
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001871b:	fa                   	cli    
c001871c:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0018721:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018727:	8d 48 01             	lea    ecx,[eax+0x1]
c001872a:	89 0d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ecx
c0018730:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018733:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018735:	7d 2d                	jge    c0018764 <Semaphore::acquire()+0x50>
c0018737:	41                   	inc    ecx
c0018738:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001873b:	90                   	nop
c001873c:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0018741:	85 c0                	test   eax,eax
c0018743:	75 0b                	jne    c0018750 <Semaphore::acquire()+0x3c>
c0018745:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c001874a:	85 c0                	test   eax,eax
c001874c:	75 62                	jne    c00187b0 <Semaphore::acquire()+0x9c>
c001874e:	66 90                	xchg   ax,ax
c0018750:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018755:	48                   	dec    eax
c0018756:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001875b:	75 03                	jne    c0018760 <Semaphore::acquire()+0x4c>
c001875d:	fb                   	sti    
c001875e:	66 90                	xchg   ax,ax
c0018760:	83 c4 0c             	add    esp,0xc
c0018763:	c3                   	ret    
c0018764:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018769:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018770:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018773:	85 c9                	test   ecx,ecx
c0018775:	74 4d                	je     c00187c4 <Semaphore::acquire()+0xb0>
c0018777:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001877a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018780:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018783:	90                   	nop
c0018784:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018789:	83 ec 0c             	sub    esp,0xc
c001878c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001878f:	68 b0 62 02 c0       	push   0xc00262b0
c0018794:	e8 1a 45 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018799:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c00187a0:	e8 43 fe ff ff       	call   c00185e8 <blockTask(TaskState)>
c00187a5:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c00187aa:	83 c4 10             	add    esp,0x10
c00187ad:	48                   	dec    eax
c00187ae:	eb 8c                	jmp    c001873c <Semaphore::acquire()+0x28>
c00187b0:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c00187ba:	e8 31 fc ff ff       	call   c00183f0 <schedule()>
c00187bf:	eb 8f                	jmp    c0018750 <Semaphore::acquire()+0x3c>
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00187cc:	eb b6                	jmp    c0018784 <Semaphore::acquire()+0x70>
c00187ce:	66 90                	xchg   ax,ax

c00187d0 <taskReturned>:
c00187d0:	83 ec 18             	sub    esp,0x18
c00187d3:	68 d0 62 02 c0       	push   0xc00262d0
c00187d8:	e8 42 c0 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	6a 02                	push   0x2
c00187e5:	e8 fe fd ff ff       	call   c00185e8 <blockTask(TaskState)>
c00187ea:	fa                   	cli    
c00187eb:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00187f1:	e8 fa fb ff ff       	call   c00183f0 <schedule()>
c00187f6:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	48                   	dec    eax
c00187ff:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018804:	85 c0                	test   eax,eax
c0018806:	75 d8                	jne    c00187e0 <taskReturned+0x10>
c0018808:	fb                   	sti    
c0018809:	eb d5                	jmp    c00187e0 <taskReturned+0x10>
c001880b:	90                   	nop

c001880c <Thr::processFromPID(int)>:
c001880c:	57                   	push   edi
c001880d:	56                   	push   esi
c001880e:	53                   	push   ebx
c001880f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018813:	fa                   	cli    
c0018814:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c001881a:	83 ec 0c             	sub    esp,0xc
c001881d:	68 64 96 02 c0       	push   0xc0029664
c0018822:	e8 a9 a7 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	89 c7                	mov    edi,eax
c001882c:	eb 16                	jmp    c0018844 <Thr::processFromPID(int)+0x38>
c001882e:	66 90                	xchg   ax,ax
c0018830:	83 ec 0c             	sub    esp,0xc
c0018833:	68 64 96 02 c0       	push   0xc0029664
c0018838:	e8 93 a7 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001883d:	83 c4 10             	add    esp,0x10
c0018840:	39 f8                	cmp    eax,edi
c0018842:	74 4c                	je     c0018890 <Thr::processFromPID(int)+0x84>
c0018844:	83 ec 0c             	sub    esp,0xc
c0018847:	68 64 96 02 c0       	push   0xc0029664
c001884c:	e8 7f a7 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018851:	c7 04 24 64 96 02 c0 	mov    DWORD PTR [esp],0xc0029664
c0018858:	89 c3                	mov    ebx,eax
c001885a:	e8 79 a7 00 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001885f:	58                   	pop    eax
c0018860:	5a                   	pop    edx
c0018861:	53                   	push   ebx
c0018862:	68 64 96 02 c0       	push   0xc0029664
c0018867:	e8 24 a8 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001886c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001886f:	83 c4 10             	add    esp,0x10
c0018872:	39 30                	cmp    DWORD PTR [eax],esi
c0018874:	75 ba                	jne    c0018830 <Thr::processFromPID(int)+0x24>
c0018876:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c001887b:	48                   	dec    eax
c001887c:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018881:	74 09                	je     c001888c <Thr::processFromPID(int)+0x80>
c0018883:	90                   	nop
c0018884:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018887:	5b                   	pop    ebx
c0018888:	5e                   	pop    esi
c0018889:	5f                   	pop    edi
c001888a:	c3                   	ret    
c001888b:	90                   	nop
c001888c:	fb                   	sti    
c001888d:	eb f5                	jmp    c0018884 <Thr::processFromPID(int)+0x78>
c001888f:	90                   	nop
c0018890:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018895:	48                   	dec    eax
c0018896:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001889b:	75 07                	jne    c00188a4 <Thr::processFromPID(int)+0x98>
c001889d:	fb                   	sti    
c001889e:	5b                   	pop    ebx
c001889f:	5e                   	pop    esi
c00188a0:	5f                   	pop    edi
c00188a1:	c3                   	ret    
c00188a2:	66 90                	xchg   ax,ax
c00188a4:	5b                   	pop    ebx
c00188a5:	31 c0                	xor    eax,eax
c00188a7:	5e                   	pop    esi
c00188a8:	5f                   	pop    edi
c00188a9:	c3                   	ret    
c00188aa:	66 90                	xchg   ax,ax

c00188ac <unblockTask(ThreadControlBlock*)>:
c00188ac:	53                   	push   ebx
c00188ad:	83 ec 08             	sub    esp,0x8
c00188b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00188b4:	fa                   	cli    
c00188b5:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00188bb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00188be:	85 c0                	test   eax,eax
c00188c0:	74 66                	je     c0018928 <unblockTask(ThreadControlBlock*)+0x7c>
c00188c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00188c5:	48                   	dec    eax
c00188c6:	74 38                	je     c0018900 <unblockTask(ThreadControlBlock*)+0x54>
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	68 64 96 02 c0       	push   0xc0029664
c00188d0:	e8 fb a6 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00188d5:	83 c4 10             	add    esp,0x10
c00188d8:	85 c0                	test   eax,eax
c00188da:	75 1c                	jne    c00188f8 <unblockTask(ThreadControlBlock*)+0x4c>
c00188dc:	eb 5e                	jmp    c001893c <unblockTask(ThreadControlBlock*)+0x90>
c00188de:	66 90                	xchg   ax,ax
c00188e0:	83 ec 08             	sub    esp,0x8
c00188e3:	50                   	push   eax
c00188e4:	68 64 96 02 c0       	push   0xc0029664
c00188e9:	e8 92 aa 00 00       	call   c0023380 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00188ee:	83 c4 10             	add    esp,0x10
c00188f1:	85 c0                	test   eax,eax
c00188f3:	74 47                	je     c001893c <unblockTask(ThreadControlBlock*)+0x90>
c00188f5:	8d 76 00             	lea    esi,[esi+0x0]
c00188f8:	39 c3                	cmp    ebx,eax
c00188fa:	75 e4                	jne    c00188e0 <unblockTask(ThreadControlBlock*)+0x34>
c00188fc:	eb 12                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c00188fe:	66 90                	xchg   ax,ax
c0018900:	83 ec 0c             	sub    esp,0xc
c0018903:	68 52 62 02 c0       	push   0xc0026252
c0018908:	e8 a6 43 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018915:	48                   	dec    eax
c0018916:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001891b:	75 03                	jne    c0018920 <unblockTask(ThreadControlBlock*)+0x74>
c001891d:	fb                   	sti    
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 c4 08             	add    esp,0x8
c0018923:	5b                   	pop    ebx
c0018924:	c3                   	ret    
c0018925:	8d 76 00             	lea    esi,[esi+0x0]
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	68 3b 62 02 c0       	push   0xc002623b
c0018930:	e8 7e 43 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018935:	83 c4 10             	add    esp,0x10
c0018938:	eb d6                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c001893a:	66 90                	xchg   ax,ax
c001893c:	83 ec 08             	sub    esp,0x8
c001893f:	53                   	push   ebx
c0018940:	68 64 96 02 c0       	push   0xc0029664
c0018945:	e8 46 a7 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001894a:	83 c4 10             	add    esp,0x10
c001894d:	eb c1                	jmp    c0018910 <unblockTask(ThreadControlBlock*)+0x64>
c001894f:	90                   	nop

c0018950 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	83 ec 1c             	sub    esp,0x1c
c0018957:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001895b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001895e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018964:	85 ff                	test   edi,edi
c0018966:	7e 24                	jle    c001898c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018968:	31 f6                	xor    esi,esi
c001896a:	66 90                	xchg   ax,ax
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018976:	46                   	inc    esi
c0018977:	e8 57 10 ff ff       	call   c00099d3 <free>
c001897c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001897f:	83 c4 10             	add    esp,0x10
c0018982:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018988:	7f e2                	jg     c001896c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001898a:	66 90                	xchg   ax,ax
c001898c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018996:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001899b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001899e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00189a1:	d3 c0                	rol    eax,cl
c00189a3:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00189aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189ad:	89 f7                	mov    edi,esi
c00189af:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00189b7:	0f 85 73 01 00 00    	jne    c0018b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00189bd:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00189c3:	85 ed                	test   ebp,ebp
c00189c5:	74 1d                	je     c00189e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00189c7:	83 ec 0c             	sub    esp,0xc
c00189ca:	55                   	push   ebp
c00189cb:	e8 f4 bb ff ff       	call   c00145c4 <EnvVarContainer::~EnvVarContainer()>
c00189d0:	59                   	pop    ecx
c00189d1:	5e                   	pop    esi
c00189d2:	6a 0c                	push   0xc
c00189d4:	55                   	push   ebp
c00189d5:	e8 f8 41 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00189da:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00189dd:	83 c4 10             	add    esp,0x10
c00189e0:	89 f7                	mov    edi,esi
c00189e2:	66 90                	xchg   ax,ax
c00189e4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00189ea:	85 c0                	test   eax,eax
c00189ec:	0f 84 b2 00 00 00    	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00189f2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00189f5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00189f9:	31 c9                	xor    ecx,ecx
c00189fb:	eb 17                	jmp    c0018a14 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00189fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018a00:	41                   	inc    ecx
c0018a01:	83 f9 10             	cmp    ecx,0x10
c0018a04:	0f 84 9a 00 00 00    	je     c0018aa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018a0a:	66 90                	xchg   ax,ax
c0018a0c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a12:	66 90                	xchg   ax,ax
c0018a14:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018a1b:	d3 fa                	sar    edx,cl
c0018a1d:	83 e2 01             	and    edx,0x1
c0018a20:	74 de                	je     c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a22:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018a25:	01 d2                	add    edx,edx
c0018a27:	01 ca                	add    edx,ecx
c0018a29:	8d 14 92             	lea    edx,[edx+edx*4]
c0018a2c:	01 d0                	add    eax,edx
c0018a2e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018a34:	83 fd 07             	cmp    ebp,0x7
c0018a37:	75 c7                	jne    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a39:	05 40 02 00 00       	add    eax,0x240
c0018a3e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018a41:	83 fd ff             	cmp    ebp,0xffffffff
c0018a44:	0f 8c ee 00 00 00    	jl     c0018b38 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018a4a:	0f 84 ac 01 00 00    	je     c0018bfc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018a50:	85 ed                	test   ebp,ebp
c0018a52:	0f 84 90 01 00 00    	je     c0018be8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018a58:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018a5a:	75 a4                	jne    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018a5c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018a62:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018a66:	01 d0                	add    eax,edx
c0018a68:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018a6c:	83 ec 0c             	sub    esp,0xc
c0018a6f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018a75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a7e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018a85:	50                   	push   eax
c0018a86:	e8 21 fe ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018a91:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a95:	89 f7                	mov    edi,esi
c0018a97:	41                   	inc    ecx
c0018a98:	83 f9 10             	cmp    ecx,0x10
c0018a9b:	0f 85 6b ff ff ff    	jne    c0018a0c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0018aa4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018aaa:	85 c0                	test   eax,eax
c0018aac:	74 62                	je     c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018aae:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018ab4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018aba:	74 54                	je     c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018abc:	83 ec 0c             	sub    esp,0xc
c0018abf:	68 64 96 02 c0       	push   0xc0029664
c0018ac4:	e8 07 a5 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ac9:	c7 04 24 64 96 02 c0 	mov    DWORD PTR [esp],0xc0029664
c0018ad0:	89 c7                	mov    edi,eax
c0018ad2:	e8 dd a4 00 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ad7:	83 c4 10             	add    esp,0x10
c0018ada:	84 c0                	test   al,al
c0018adc:	0f 84 ce 00 00 00    	je     c0018bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018ae2:	66 90                	xchg   ax,ax
c0018ae4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ae7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018aed:	85 d2                	test   edx,edx
c0018aef:	74 0f                	je     c0018b00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018af1:	83 ec 0c             	sub    esp,0xc
c0018af4:	8b 02                	mov    eax,DWORD PTR [edx]
c0018af6:	52                   	push   edx
c0018af7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018afa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018afd:	83 c4 10             	add    esp,0x10
c0018b00:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018b0a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b10:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018b16:	85 db                	test   ebx,ebx
c0018b18:	74 16                	je     c0018b30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018b1a:	83 ec 0c             	sub    esp,0xc
c0018b1d:	53                   	push   ebx
c0018b1e:	e8 95 33 ff ff       	call   c000beb8 <VAS::~VAS()>
c0018b23:	58                   	pop    eax
c0018b24:	5a                   	pop    edx
c0018b25:	6a 14                	push   0x14
c0018b27:	53                   	push   ebx
c0018b28:	e8 a5 40 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0018b2d:	83 c4 10             	add    esp,0x10
c0018b30:	83 c4 1c             	add    esp,0x1c
c0018b33:	5b                   	pop    ebx
c0018b34:	5e                   	pop    esi
c0018b35:	5f                   	pop    edi
c0018b36:	5d                   	pop    ebp
c0018b37:	c3                   	ret    
c0018b38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018b3c:	83 ec 0c             	sub    esp,0xc
c0018b3f:	68 04 63 02 c0       	push   0xc0026304
c0018b44:	e8 d6 bc ff ff       	call   c001481f <Krnl::panic(char const*)>
c0018b49:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	89 f7                	mov    edi,esi
c0018b51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018b55:	e9 a6 fe ff ff       	jmp    c0018a00 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018b5a:	66 90                	xchg   ax,ax
c0018b5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018b62:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018b68:	75 1e                	jne    c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018b6a:	83 ec 0c             	sub    esp,0xc
c0018b6d:	68 6c 63 02 c0       	push   0xc002636c
c0018b72:	e8 3c 41 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018b77:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018b7e:	e8 65 fa ff ff       	call   c00185e8 <blockTask(TaskState)>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	66 90                	xchg   ax,ax
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	56                   	push   esi
c0018b8c:	68 64 96 02 c0       	push   0xc0029664
c0018b91:	e8 fa a4 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b96:	c7 04 24 64 96 02 c0 	mov    DWORD PTR [esp],0xc0029664
c0018b9d:	e8 2e a4 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	39 f8                	cmp    eax,edi
c0018ba7:	0f 84 37 ff ff ff    	je     c0018ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	83 ec 0c             	sub    esp,0xc
c0018bb3:	68 64 96 02 c0       	push   0xc0029664
c0018bb8:	e8 13 a4 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018bbd:	c7 04 24 64 96 02 c0 	mov    DWORD PTR [esp],0xc0029664
c0018bc4:	89 c6                	mov    esi,eax
c0018bc6:	e8 0d a4 00 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	39 f3                	cmp    ebx,esi
c0018bd0:	74 b6                	je     c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018bd2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018bd5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bd8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018bde:	75 a8                	jne    c0018b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018be0:	e9 77 ff ff ff       	jmp    c0018b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018be5:	8d 76 00             	lea    esi,[esi+0x0]
c0018be8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bec:	83 ec 0c             	sub    esp,0xc
c0018bef:	68 38 63 02 c0       	push   0xc0026338
c0018bf4:	e9 4b ff ff ff       	jmp    c0018b44 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0018bfc:	8b 36                	mov    esi,DWORD PTR [esi]
c0018bfe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c02:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018c05:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c08:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018c0e:	01 d7                	add    edi,edx
c0018c10:	89 f8                	mov    eax,edi
c0018c12:	e9 51 fe ff ff       	jmp    c0018a68 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018c17:	90                   	nop

c0018c18 <cleanerTaskFunction(void*)>:
c0018c18:	53                   	push   ebx
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018c21:	48                   	dec    eax
c0018c22:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018c27:	75 03                	jne    c0018c2c <cleanerTaskFunction(void*)+0x14>
c0018c29:	fb                   	sti    
c0018c2a:	66 90                	xchg   ax,ax
c0018c2c:	fa                   	cli    
c0018c2d:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018c32:	80 3d 2c 96 02 c0 00 	cmp    BYTE PTR ds:0xc002962c,0x0
c0018c39:	8d 50 01             	lea    edx,[eax+0x1]
c0018c3c:	89 15 48 96 02 c0    	mov    DWORD PTR ds:0xc0029648,edx
c0018c42:	0f 84 ac 00 00 00    	je     c0018cf4 <cleanerTaskFunction(void*)+0xdc>
c0018c48:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018c4d:	85 c0                	test   eax,eax
c0018c4f:	75 03                	jne    c0018c54 <cleanerTaskFunction(void*)+0x3c>
c0018c51:	fb                   	sti    
c0018c52:	66 90                	xchg   ax,ax
c0018c54:	c6 05 2c 96 02 c0 00 	mov    BYTE PTR ds:0xc002962c,0x0
c0018c5b:	fa                   	cli    
c0018c5c:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018c62:	ff 05 44 96 02 c0    	inc    DWORD PTR ds:0xc0029644
c0018c68:	fa                   	cli    
c0018c69:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018c6f:	eb 2b                	jmp    c0018c9c <cleanerTaskFunction(void*)+0x84>
c0018c71:	8d 76 00             	lea    esi,[esi+0x0]
c0018c74:	83 ec 0c             	sub    esp,0xc
c0018c77:	68 4c 96 02 c0       	push   0xc002964c
c0018c7c:	e8 4f a3 00 00       	call   c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c81:	c7 04 24 4c 96 02 c0 	mov    DWORD PTR [esp],0xc002964c
c0018c88:	89 c3                	mov    ebx,eax
c0018c8a:	e8 49 a3 00 00       	call   c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c92:	e8 b9 fc ff ff       	call   c0018950 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	66 90                	xchg   ax,ax
c0018c9c:	83 ec 0c             	sub    esp,0xc
c0018c9f:	68 4c 96 02 c0       	push   0xc002964c
c0018ca4:	e8 0b a3 00 00       	call   c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca9:	83 c4 10             	add    esp,0x10
c0018cac:	84 c0                	test   al,al
c0018cae:	74 c4                	je     c0018c74 <cleanerTaskFunction(void*)+0x5c>
c0018cb0:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018cb5:	48                   	dec    eax
c0018cb6:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018cbb:	75 03                	jne    c0018cc0 <cleanerTaskFunction(void*)+0xa8>
c0018cbd:	fb                   	sti    
c0018cbe:	66 90                	xchg   ax,ax
c0018cc0:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0018cc5:	48                   	dec    eax
c0018cc6:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0018ccb:	0f 85 4b ff ff ff    	jne    c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cd1:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c0018cd6:	85 c0                	test   eax,eax
c0018cd8:	0f 84 3e ff ff ff    	je     c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cde:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c0018ce8:	e8 03 f7 ff ff       	call   c00183f0 <schedule()>
c0018ced:	e9 2a ff ff ff       	jmp    c0018c1c <cleanerTaskFunction(void*)+0x4>
c0018cf2:	66 90                	xchg   ax,ax
c0018cf4:	83 ec 0c             	sub    esp,0xc
c0018cf7:	6a 02                	push   0x2
c0018cf9:	e8 c2 f8 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	e9 4e ff ff ff       	jmp    c0018c54 <cleanerTaskFunction(void*)+0x3c>
c0018d06:	66 90                	xchg   ax,ax

c0018d08 <terminateTask(int)>:
c0018d08:	83 ec 14             	sub    esp,0x14
c0018d0b:	fa                   	cli    
c0018d0c:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018d12:	ff 05 44 96 02 c0    	inc    DWORD PTR ds:0xc0029644
c0018d18:	fa                   	cli    
c0018d19:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018d1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d28:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d30:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018d33:	50                   	push   eax
c0018d34:	68 4c 96 02 c0       	push   0xc002964c
c0018d39:	e8 52 a3 00 00       	call   c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018d4d:	a1 28 96 02 c0       	mov    eax,ds:0xc0029628
c0018d52:	85 c0                	test   eax,eax
c0018d54:	74 5e                	je     c0018db4 <terminateTask(int)+0xac>
c0018d56:	83 ec 0c             	sub    esp,0xc
c0018d59:	c6 05 2c 96 02 c0 01 	mov    BYTE PTR ds:0xc002962c,0x1
c0018d60:	50                   	push   eax
c0018d61:	e8 46 fb ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018d66:	83 c4 10             	add    esp,0x10
c0018d69:	8d 76 00             	lea    esi,[esi+0x0]
c0018d6c:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018d71:	48                   	dec    eax
c0018d72:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018d77:	75 03                	jne    c0018d7c <terminateTask(int)+0x74>
c0018d79:	fb                   	sti    
c0018d7a:	66 90                	xchg   ax,ax
c0018d7c:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0018d81:	48                   	dec    eax
c0018d82:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0018d87:	75 0b                	jne    c0018d94 <terminateTask(int)+0x8c>
c0018d89:	83 3d 40 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029640,0x0
c0018d90:	75 36                	jne    c0018dc8 <terminateTask(int)+0xc0>
c0018d92:	66 90                	xchg   ax,ax
c0018d94:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018d99:	48                   	dec    eax
c0018d9a:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018d9f:	75 03                	jne    c0018da4 <terminateTask(int)+0x9c>
c0018da1:	fb                   	sti    
c0018da2:	66 90                	xchg   ax,ax
c0018da4:	fa                   	cli    
c0018da5:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018dab:	90                   	nop
c0018dac:	e8 3f f6 ff ff       	call   c00183f0 <schedule()>
c0018db1:	eb e1                	jmp    c0018d94 <terminateTask(int)+0x8c>
c0018db3:	90                   	nop
c0018db4:	83 ec 0c             	sub    esp,0xc
c0018db7:	68 69 62 02 c0       	push   0xc0026269
c0018dbc:	e8 f2 3e ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	eb a6                	jmp    c0018d6c <terminateTask(int)+0x64>
c0018dc6:	66 90                	xchg   ax,ax
c0018dc8:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c0018dd2:	eb d8                	jmp    c0018dac <terminateTask(int)+0xa4>

c0018dd4 <Thr::terminateFromIRQ(int)>:
c0018dd4:	83 ec 18             	sub    esp,0x18
c0018dd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ddb:	e8 28 ff ff ff       	call   c0018d08 <terminateTask(int)>

c0018de0 <Semaphore::release()>:
c0018de0:	83 ec 0c             	sub    esp,0xc
c0018de3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018de7:	fa                   	cli    
c0018de8:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0018ded:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018df3:	8d 48 01             	lea    ecx,[eax+0x1]
c0018df6:	89 0d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,ecx
c0018dfc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018dff:	85 c9                	test   ecx,ecx
c0018e01:	74 41                	je     c0018e44 <Semaphore::release()+0x64>
c0018e03:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018e06:	83 ec 0c             	sub    esp,0xc
c0018e09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018e0c:	51                   	push   ecx
c0018e0d:	e8 9a fa ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0018e12:	a1 44 96 02 c0       	mov    eax,ds:0xc0029644
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	48                   	dec    eax
c0018e1b:	90                   	nop
c0018e1c:	a3 44 96 02 c0       	mov    ds:0xc0029644,eax
c0018e21:	85 c0                	test   eax,eax
c0018e23:	75 0b                	jne    c0018e30 <Semaphore::release()+0x50>
c0018e25:	a1 40 96 02 c0       	mov    eax,ds:0xc0029640
c0018e2a:	85 c0                	test   eax,eax
c0018e2c:	75 1e                	jne    c0018e4c <Semaphore::release()+0x6c>
c0018e2e:	66 90                	xchg   ax,ax
c0018e30:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018e35:	48                   	dec    eax
c0018e36:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018e3b:	75 03                	jne    c0018e40 <Semaphore::release()+0x60>
c0018e3d:	fb                   	sti    
c0018e3e:	66 90                	xchg   ax,ax
c0018e40:	83 c4 0c             	add    esp,0xc
c0018e43:	c3                   	ret    
c0018e44:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0018e47:	eb d3                	jmp    c0018e1c <Semaphore::release()+0x3c>
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	c7 05 40 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029640,0x0
c0018e56:	e8 95 f5 ff ff       	call   c00183f0 <schedule()>
c0018e5b:	eb d3                	jmp    c0018e30 <Semaphore::release()+0x50>
c0018e5d:	8d 76 00             	lea    esi,[esi+0x0]

c0018e60 <__static_initialization_and_destruction_0(int, int)>:
c0018e60:	83 ec 0c             	sub    esp,0xc
c0018e63:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018e68:	0f 85 8e 00 00 00    	jne    c0018efc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e6e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018e76:	0f 85 80 00 00 00    	jne    c0018efc <__static_initialization_and_destruction_0(int, int)+0x9c>
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	68 64 96 02 c0       	push   0xc0029664
c0018e84:	e8 b3 a4 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	83 ec 04             	sub    esp,0x4
c0018e8f:	68 ec 73 02 c0       	push   0xc00273ec
c0018e94:	68 64 96 02 c0       	push   0xc0029664
c0018e99:	68 ec 32 02 c0       	push   0xc00232ec
c0018e9e:	e8 a9 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	68 58 96 02 c0       	push   0xc0029658
c0018eae:	e8 89 a4 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018eb3:	83 c4 10             	add    esp,0x10
c0018eb6:	83 ec 04             	sub    esp,0x4
c0018eb9:	68 ec 73 02 c0       	push   0xc00273ec
c0018ebe:	68 58 96 02 c0       	push   0xc0029658
c0018ec3:	68 ec 32 02 c0       	push   0xc00232ec
c0018ec8:	e8 7f 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	68 4c 96 02 c0       	push   0xc002964c
c0018ed8:	e8 5f a4 00 00       	call   c002333c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	83 ec 04             	sub    esp,0x4
c0018ee3:	68 ec 73 02 c0       	push   0xc00273ec
c0018ee8:	68 4c 96 02 c0       	push   0xc002964c
c0018eed:	68 ec 32 02 c0       	push   0xc00232ec
c0018ef2:	e8 55 3c ff ff       	call   c000cb4c <__cxa_atexit>
c0018ef7:	83 c4 10             	add    esp,0x10
c0018efa:	66 90                	xchg   ax,ax
c0018efc:	90                   	nop
c0018efd:	83 c4 0c             	add    esp,0xc
c0018f00:	c3                   	ret    
c0018f01:	8d 76 00             	lea    esi,[esi+0x0]

c0018f04 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018f04:	83 ec 0c             	sub    esp,0xc
c0018f07:	83 ec 08             	sub    esp,0x8
c0018f0a:	68 ff ff 00 00       	push   0xffff
c0018f0f:	6a 01                	push   0x1
c0018f11:	e8 4a ff ff ff       	call   c0018e60 <__static_initialization_and_destruction_0(int, int)>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	83 c4 0c             	add    esp,0xc
c0018f1c:	c3                   	ret    

c0018f1d <Vm::inbv(unsigned short)>:
c0018f1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f21:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f26:	75 06                	jne    c0018f2e <Vm::inbv(unsigned short)+0x11>
c0018f28:	a0 ac 96 02 c0       	mov    al,ds:0xc00296ac
c0018f2d:	c3                   	ret    
c0018f2e:	ec                   	in     al,dx
c0018f2f:	c3                   	ret    

c0018f30 <Vm::outbv(unsigned short, unsigned char)>:
c0018f30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f38:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018f3d:	75 25                	jne    c0018f64 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018f3f:	8b 0d ac 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296ac
c0018f45:	8d 51 01             	lea    edx,[ecx+0x1]
c0018f48:	88 81 c0 96 02 c0    	mov    BYTE PTR [ecx-0x3ffd6940],al
c0018f4e:	89 15 ac 96 02 c0    	mov    DWORD PTR ds:0xc00296ac,edx
c0018f54:	83 fa 20             	cmp    edx,0x20
c0018f57:	75 0c                	jne    c0018f65 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018f59:	c7 05 ac 96 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00296ac,0x1f
c0018f63:	c3                   	ret    
c0018f64:	ee                   	out    dx,al
c0018f65:	c3                   	ret    

c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>:
c0018f66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018f6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018f70:	c1 e0 04             	shl    eax,0x4
c0018f73:	01 d0                	add    eax,edx
c0018f75:	c3                   	ret    

c0018f76 <Vm::getSegment(unsigned int)>:
c0018f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7a:	c1 e8 10             	shr    eax,0x10
c0018f7d:	c3                   	ret    

c0018f7e <Vm::getOffset(unsigned int)>:
c0018f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f82:	c3                   	ret    

c0018f83 <Vm::mainloop2()>:
c0018f83:	83 ec 18             	sub    esp,0x18
c0018f86:	fa                   	cli    
c0018f87:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018f8d:	6a 02                	push   0x2
c0018f8f:	c6 05 a5 96 02 c0 01 	mov    BYTE PTR ds:0xc00296a5,0x1
c0018f96:	e8 25 f6 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018f9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fa0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018fa4:	52                   	push   edx
c0018fa5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018fa9:	52                   	push   edx
c0018faa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018fae:	52                   	push   edx
c0018faf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018fb3:	50                   	push   eax
c0018fb4:	e8 76 72 fe ff       	call   c000022f <goToVM86>
c0018fb9:	83 c4 2c             	add    esp,0x2c
c0018fbc:	c3                   	ret    

c0018fbd <Vm::mainVm8086Loop(void*)>:
c0018fbd:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0018fc2:	48                   	dec    eax
c0018fc3:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018fc8:	75 01                	jne    c0018fcb <Vm::mainVm8086Loop(void*)+0xe>
c0018fca:	fb                   	sti    
c0018fcb:	eb b6                	jmp    c0018f83 <Vm::mainloop2()>

c0018fcd <Vm::mainloop3(unsigned long)>:
c0018fcd:	83 ec 18             	sub    esp,0x18
c0018fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018fd4:	fa                   	cli    
c0018fd5:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0018fdb:	6a 02                	push   0x2
c0018fdd:	c6 05 a4 96 02 c0 01 	mov    BYTE PTR ds:0xc00296a4,0x1
c0018fe4:	a3 a0 96 02 c0       	mov    ds:0xc00296a0,eax
c0018fe9:	e8 d2 f5 ff ff       	call   c00185c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018fee:	83 c4 1c             	add    esp,0x1c
c0018ff1:	eb 90                	jmp    c0018f83 <Vm::mainloop2()>

c0018ff3 <Vm::initialise8086()>:
c0018ff3:	83 ec 0c             	sub    esp,0xc
c0018ff6:	68 80 00 00 00       	push   0x80
c0018ffb:	6a 00                	push   0x0
c0018ffd:	68 bd 8f 01 c0       	push   0xc0018fbd
c0019002:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c0019008:	e8 c7 f1 ff ff       	call   c00181d4 <Process::createThread(void (*)(void*), void*, int)>
c001900d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019014:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0019019:	68 00 01 00 00       	push   0x100
c001901e:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c0019023:	6a 00                	push   0x0
c0019025:	6a 00                	push   0x0
c0019027:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001902d:	e8 f8 32 ff ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019032:	83 c4 2c             	add    esp,0x2c
c0019035:	c3                   	ret    

c0019036 <Vm::finish8086()>:
c0019036:	53                   	push   ebx
c0019037:	83 ec 08             	sub    esp,0x8
c001903a:	fa                   	cli    
c001903b:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0019041:	80 3d a4 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296a4,0x0
c0019048:	75 15                	jne    c001905f <Vm::finish8086()+0x29>
c001904a:	e8 a1 f3 ff ff       	call   c00183f0 <schedule()>
c001904f:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0019054:	48                   	dec    eax
c0019055:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c001905a:	75 de                	jne    c001903a <Vm::finish8086()+0x4>
c001905c:	fb                   	sti    
c001905d:	eb db                	jmp    c001903a <Vm::finish8086()+0x4>
c001905f:	83 ec 0c             	sub    esp,0xc
c0019062:	8b 1d a0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296a0
c0019068:	ff 35 a8 96 02 c0    	push   DWORD PTR ds:0xc00296a8
c001906e:	c6 05 a4 96 02 c0 00 	mov    BYTE PTR ds:0xc00296a4,0x0
c0019075:	e8 32 f8 ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c001907a:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	8d 50 ff             	lea    edx,[eax-0x1]
c0019085:	89 15 48 96 02 c0    	mov    DWORD PTR ds:0xc0029648,edx
c001908b:	85 d2                	test   edx,edx
c001908d:	75 01                	jne    c0019090 <Vm::finish8086()+0x5a>
c001908f:	fb                   	sti    
c0019090:	89 d8                	mov    eax,ebx
c0019092:	83 c4 08             	add    esp,0x8
c0019095:	5b                   	pop    ebx
c0019096:	c3                   	ret    

c0019097 <Vm::getOutput8086(unsigned char*)>:
c0019097:	57                   	push   edi
c0019098:	8b 0d ac 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296ac
c001909e:	56                   	push   esi
c001909f:	be c0 96 02 c0       	mov    esi,0xc00296c0
c00190a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00190a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00190aa:	a1 ac 96 02 c0       	mov    eax,ds:0xc00296ac
c00190af:	5e                   	pop    esi
c00190b0:	c7 05 ac 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296ac,0x0
c00190ba:	5f                   	pop    edi
c00190bb:	c3                   	ret    

c00190bc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00190bc:	55                   	push   ebp
c00190bd:	57                   	push   edi
c00190be:	56                   	push   esi
c00190bf:	53                   	push   ebx
c00190c0:	83 ec 2c             	sub    esp,0x2c
c00190c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00190c7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00190cb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00190cf:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00190d3:	fa                   	cli    
c00190d4:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c00190da:	0f b6 35 a5 96 02 c0 	movzx  esi,BYTE PTR ds:0xc00296a5
c00190e1:	89 f0                	mov    eax,esi
c00190e3:	84 c0                	test   al,al
c00190e5:	75 1d                	jne    c0019104 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00190e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00190eb:	e8 00 f3 ff ff       	call   c00183f0 <schedule()>
c00190f0:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00190f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00190f9:	48                   	dec    eax
c00190fa:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00190ff:	75 d2                	jne    c00190d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019101:	fb                   	sti    
c0019102:	eb cf                	jmp    c00190d3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019104:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0019109:	c7 05 ac 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296ac,0x0
c0019113:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019117:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001911b:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001911f:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019123:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019127:	50                   	push   eax
c0019128:	6a 20                	push   0x20
c001912a:	6a 00                	push   0x0
c001912c:	68 c0 96 02 c0       	push   0xc00296c0
c0019131:	e8 4e 75 fe ff       	call   c0000684 <memset>
c0019136:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001913d:	e8 81 08 ff ff       	call   c00099c3 <malloc>
c0019142:	83 c4 0c             	add    esp,0xc
c0019145:	89 c3                	mov    ebx,eax
c0019147:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c001914d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019151:	50                   	push   eax
c0019152:	e8 c7 40 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	85 db                	test   ebx,ebx
c001915c:	75 0a                	jne    c0019168 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001915e:	83 ec 0c             	sub    esp,0xc
c0019161:	68 94 63 02 c0       	push   0xc0026394
c0019166:	eb 3e                	jmp    c00191a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019168:	50                   	push   eax
c0019169:	8d 44 24 17          	lea    eax,[esp+0x17]
c001916d:	50                   	push   eax
c001916e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019172:	50                   	push   eax
c0019173:	53                   	push   ebx
c0019174:	e8 b5 43 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c0019179:	83 c4 10             	add    esp,0x10
c001917c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019181:	74 0a                	je     c001918d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019183:	83 ec 0c             	sub    esp,0xc
c0019186:	68 a8 63 02 c0       	push   0xc00263a8
c001918b:	eb 19                	jmp    c00191a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001918d:	51                   	push   ecx
c001918e:	51                   	push   ecx
c001918f:	6a 01                	push   0x1
c0019191:	53                   	push   ebx
c0019192:	e8 eb 40 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	85 c0                	test   eax,eax
c001919c:	74 24                	je     c00191c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001919e:	83 ec 0c             	sub    esp,0xc
c00191a1:	68 c1 63 02 c0       	push   0xc00263c1
c00191a6:	e8 74 b6 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00191ab:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00191b0:	83 c4 10             	add    esp,0x10
c00191b3:	48                   	dec    eax
c00191b4:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c00191b9:	85 c0                	test   eax,eax
c00191bb:	75 01                	jne    c00191be <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00191bd:	fb                   	sti    
c00191be:	31 f6                	xor    esi,esi
c00191c0:	eb 58                	jmp    c001921a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00191c2:	0f b7 ed             	movzx  ebp,bp
c00191c5:	50                   	push   eax
c00191c6:	0f b7 ff             	movzx  edi,di
c00191c9:	50                   	push   eax
c00191ca:	55                   	push   ebp
c00191cb:	57                   	push   edi
c00191cc:	e8 95 fd ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c00191d1:	5a                   	pop    edx
c00191d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00191d4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00191d8:	51                   	push   ecx
c00191d9:	50                   	push   eax
c00191da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00191e2:	53                   	push   ebx
c00191e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00191e6:	83 c4 14             	add    esp,0x14
c00191e9:	53                   	push   ebx
c00191ea:	e8 f1 40 ff ff       	call   c000d2e0 <File::close()>
c00191ef:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c00191f4:	83 c4 10             	add    esp,0x10
c00191f7:	48                   	dec    eax
c00191f8:	c6 05 a5 96 02 c0 00 	mov    BYTE PTR ds:0xc00296a5,0x0
c00191ff:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0019204:	85 c0                	test   eax,eax
c0019206:	75 01                	jne    c0019209 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019208:	fb                   	sti    
c0019209:	83 ec 0c             	sub    esp,0xc
c001920c:	ff 35 a8 96 02 c0    	push   DWORD PTR ds:0xc00296a8
c0019212:	e8 95 f6 ff ff       	call   c00188ac <unblockTask(ThreadControlBlock*)>
c0019217:	83 c4 10             	add    esp,0x10
c001921a:	83 c4 2c             	add    esp,0x2c
c001921d:	89 f0                	mov    eax,esi
c001921f:	5b                   	pop    ebx
c0019220:	5e                   	pop    esi
c0019221:	5f                   	pop    edi
c0019222:	5d                   	pop    ebp
c0019223:	c3                   	ret    

c0019224 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019224:	57                   	push   edi
c0019225:	56                   	push   esi
c0019226:	53                   	push   ebx
c0019227:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001922b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001922f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019233:	83 e8 06             	sub    eax,0x6
c0019236:	0f b7 c0             	movzx  eax,ax
c0019239:	50                   	push   eax
c001923a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001923f:	50                   	push   eax
c0019240:	e8 21 fd ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c0019245:	5a                   	pop    edx
c0019246:	5e                   	pop    esi
c0019247:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001924a:	8d 56 fa             	lea    edx,[esi-0x6]
c001924d:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019253:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019256:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019259:	83 c2 02             	add    edx,0x2
c001925c:	66 89 10             	mov    WORD PTR [eax],dx
c001925f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019262:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019266:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019269:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001926d:	89 d6                	mov    esi,edx
c001926f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019275:	66 81 e6 ff fd       	and    si,0xfdff
c001927a:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001927e:	74 07                	je     c0019287 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019280:	89 d6                	mov    esi,edx
c0019282:	66 81 ce 00 02       	or     si,0x200
c0019287:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001928b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019290:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019294:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001929c:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001929f:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00192a7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00192aa:	5b                   	pop    ebx
c00192ab:	5e                   	pop    esi
c00192ac:	5f                   	pop    edi
c00192ad:	c3                   	ret    

c00192ae <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00192ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192b8:	c1 e0 04             	shl    eax,0x4
c00192bb:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00192be:	c3                   	ret    

c00192bf <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00192bf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192c4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192c9:	c1 e0 04             	shl    eax,0x4
c00192cc:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00192d0:	c3                   	ret    

c00192d1 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00192d1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192d6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192db:	c1 e0 04             	shl    eax,0x4
c00192de:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00192e1:	c3                   	ret    

c00192e2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00192e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192ec:	c1 e0 04             	shl    eax,0x4
c00192ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00192f3:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00192f6:	c3                   	ret    

c00192f7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00192f7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192fc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019301:	c1 e0 04             	shl    eax,0x4
c0019304:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019308:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001930c:	c3                   	ret    

c001930d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001930d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019312:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019317:	c1 e0 04             	shl    eax,0x4
c001931a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001931e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019321:	c3                   	ret    

c0019322 <Vm::faultHandler(regs*)>:
c0019322:	55                   	push   ebp
c0019323:	57                   	push   edi
c0019324:	56                   	push   esi
c0019325:	53                   	push   ebx
c0019326:	83 ec 1c             	sub    esp,0x1c
c0019329:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001932d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019330:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019334:	0f b7 f8             	movzx  edi,ax
c0019337:	52                   	push   edx
c0019338:	0f b7 c0             	movzx  eax,ax
c001933b:	50                   	push   eax
c001933c:	e8 25 fc ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c0019341:	5a                   	pop    edx
c0019342:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019345:	59                   	pop    ecx
c0019346:	89 c1                	mov    ecx,eax
c0019348:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001934b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001934f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019354:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019358:	0f b7 c5             	movzx  eax,bp
c001935b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001935f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019363:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019367:	e8 fa fb ff ff       	call   c0018f66 <Vm::realToLinear(unsigned short, unsigned short)>
c001936c:	5e                   	pop    esi
c001936d:	be 06 00 00 00       	mov    esi,0x6
c0019372:	5a                   	pop    edx
c0019373:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019378:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001937d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019380:	80 fa 9d             	cmp    dl,0x9d
c0019383:	0f 84 2c 02 00 00    	je     c00195b5 <Vm::faultHandler(regs*)+0x293>
c0019389:	0f 87 91 00 00 00    	ja     c0019420 <Vm::faultHandler(regs*)+0xfe>
c001938f:	80 fa 66             	cmp    dl,0x66
c0019392:	0f 84 98 01 00 00    	je     c0019530 <Vm::faultHandler(regs*)+0x20e>
c0019398:	77 47                	ja     c00193e1 <Vm::faultHandler(regs*)+0xbf>
c001939a:	80 fa 36             	cmp    dl,0x36
c001939d:	0f 84 80 01 00 00    	je     c0019523 <Vm::faultHandler(regs*)+0x201>
c00193a3:	77 1a                	ja     c00193bf <Vm::faultHandler(regs*)+0x9d>
c00193a5:	80 fa 26             	cmp    dl,0x26
c00193a8:	0f 84 4e 01 00 00    	je     c00194fc <Vm::faultHandler(regs*)+0x1da>
c00193ae:	80 fa 2e             	cmp    dl,0x2e
c00193b1:	0f 85 e2 05 00 00    	jne    c0019999 <Vm::faultHandler(regs*)+0x677>
c00193b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00193ba:	31 f6                	xor    esi,esi
c00193bc:	41                   	inc    ecx
c00193bd:	eb be                	jmp    c001937d <Vm::faultHandler(regs*)+0x5b>
c00193bf:	80 fa 64             	cmp    dl,0x64
c00193c2:	0f 84 41 01 00 00    	je     c0019509 <Vm::faultHandler(regs*)+0x1e7>
c00193c8:	0f 87 48 01 00 00    	ja     c0019516 <Vm::faultHandler(regs*)+0x1f4>
c00193ce:	80 fa 3e             	cmp    dl,0x3e
c00193d1:	0f 85 c2 05 00 00    	jne    c0019999 <Vm::faultHandler(regs*)+0x677>
c00193d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00193da:	be 01 00 00 00       	mov    esi,0x1
c00193df:	eb db                	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c00193e1:	80 fa 6d             	cmp    dl,0x6d
c00193e4:	0f 84 ec 02 00 00    	je     c00196d6 <Vm::faultHandler(regs*)+0x3b4>
c00193ea:	77 17                	ja     c0019403 <Vm::faultHandler(regs*)+0xe1>
c00193ec:	80 fa 67             	cmp    dl,0x67
c00193ef:	0f 84 48 01 00 00    	je     c001953d <Vm::faultHandler(regs*)+0x21b>
c00193f5:	80 fa 6c             	cmp    dl,0x6c
c00193f8:	0f 84 69 02 00 00    	je     c0019667 <Vm::faultHandler(regs*)+0x345>
c00193fe:	e9 96 05 00 00       	jmp    c0019999 <Vm::faultHandler(regs*)+0x677>
c0019403:	80 fa 6f             	cmp    dl,0x6f
c0019406:	0f 84 f4 03 00 00    	je     c0019800 <Vm::faultHandler(regs*)+0x4de>
c001940c:	0f 82 59 03 00 00    	jb     c001976b <Vm::faultHandler(regs*)+0x449>
c0019412:	80 fa 9c             	cmp    dl,0x9c
c0019415:	0f 84 2f 01 00 00    	je     c001954a <Vm::faultHandler(regs*)+0x228>
c001941b:	e9 79 05 00 00       	jmp    c0019999 <Vm::faultHandler(regs*)+0x677>
c0019420:	80 fa ec             	cmp    dl,0xec
c0019423:	0f 84 14 05 00 00    	je     c001993d <Vm::faultHandler(regs*)+0x61b>
c0019429:	77 7b                	ja     c00194a6 <Vm::faultHandler(regs*)+0x184>
c001942b:	80 fa e4             	cmp    dl,0xe4
c001942e:	0f 84 93 04 00 00    	je     c00198c7 <Vm::faultHandler(regs*)+0x5a5>
c0019434:	77 53                	ja     c0019489 <Vm::faultHandler(regs*)+0x167>
c0019436:	80 fa cd             	cmp    dl,0xcd
c0019439:	0f 84 d9 01 00 00    	je     c0019618 <Vm::faultHandler(regs*)+0x2f6>
c001943f:	80 fa cf             	cmp    dl,0xcf
c0019442:	0f 85 51 05 00 00    	jne    c0019999 <Vm::faultHandler(regs*)+0x677>
c0019448:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001944b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001944e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019452:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019455:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019459:	81 ca 00 02 02 00    	or     edx,0x20200
c001945f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019462:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019466:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001946c:	66 c1 e8 09          	shr    ax,0x9
c0019470:	83 e0 01             	and    eax,0x1
c0019473:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019476:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019479:	83 c0 06             	add    eax,0x6
c001947c:	25 ff ff 00 00       	and    eax,0xffff
c0019481:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019484:	e9 0c 05 00 00       	jmp    c0019995 <Vm::faultHandler(regs*)+0x673>
c0019489:	80 fa e6             	cmp    dl,0xe6
c001948c:	0f 84 7f 04 00 00    	je     c0019911 <Vm::faultHandler(regs*)+0x5ef>
c0019492:	0f 82 4b 04 00 00    	jb     c00198e3 <Vm::faultHandler(regs*)+0x5c1>
c0019498:	80 fa e7             	cmp    dl,0xe7
c001949b:	0f 84 87 04 00 00    	je     c0019928 <Vm::faultHandler(regs*)+0x606>
c00194a1:	e9 f3 04 00 00       	jmp    c0019999 <Vm::faultHandler(regs*)+0x677>
c00194a6:	80 fa ef             	cmp    dl,0xef
c00194a9:	0f 84 d1 04 00 00    	je     c0019980 <Vm::faultHandler(regs*)+0x65e>
c00194af:	77 28                	ja     c00194d9 <Vm::faultHandler(regs*)+0x1b7>
c00194b1:	80 fa ed             	cmp    dl,0xed
c00194b4:	0f 84 9f 04 00 00    	je     c0019959 <Vm::faultHandler(regs*)+0x637>
c00194ba:	80 fa ee             	cmp    dl,0xee
c00194bd:	0f 85 d6 04 00 00    	jne    c0019999 <Vm::faultHandler(regs*)+0x677>
c00194c3:	50                   	push   eax
c00194c4:	50                   	push   eax
c00194c5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00194c9:	50                   	push   eax
c00194ca:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194ce:	50                   	push   eax
c00194cf:	e8 5c fa ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c00194d4:	e9 9f 04 00 00       	jmp    c0019978 <Vm::faultHandler(regs*)+0x656>
c00194d9:	80 fa fa             	cmp    dl,0xfa
c00194dc:	0f 84 69 01 00 00    	je     c001964b <Vm::faultHandler(regs*)+0x329>
c00194e2:	80 fa fb             	cmp    dl,0xfb
c00194e5:	0f 84 6e 01 00 00    	je     c0019659 <Vm::faultHandler(regs*)+0x337>
c00194eb:	80 fa f3             	cmp    dl,0xf3
c00194ee:	0f 85 a5 04 00 00    	jne    c0019999 <Vm::faultHandler(regs*)+0x677>
c00194f4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194f7:	e9 c0 fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c00194fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194ff:	be 02 00 00 00       	mov    esi,0x2
c0019504:	e9 b3 fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c0019509:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001950c:	be 03 00 00 00       	mov    esi,0x3
c0019511:	e9 a6 fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c0019516:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019519:	be 04 00 00 00       	mov    esi,0x4
c001951e:	e9 99 fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c0019523:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019526:	be 05 00 00 00       	mov    esi,0x5
c001952b:	e9 8c fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c0019530:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019533:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019538:	e9 7f fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c001953d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019540:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019545:	e9 72 fe ff ff       	jmp    c00193bc <Vm::faultHandler(regs*)+0x9a>
c001954a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001954d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019551:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019556:	74 30                	je     c0019588 <Vm::faultHandler(regs*)+0x266>
c0019558:	83 e9 04             	sub    ecx,0x4
c001955b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019561:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019567:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001956a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001956d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019573:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019577:	0f 84 15 04 00 00    	je     c0019992 <Vm::faultHandler(regs*)+0x670>
c001957d:	80 ce 02             	or     dh,0x2
c0019580:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019583:	e9 0a 04 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019588:	83 e9 02             	sub    ecx,0x2
c001958b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019591:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019594:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019598:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001959e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00195a2:	74 05                	je     c00195a9 <Vm::faultHandler(regs*)+0x287>
c00195a4:	80 ce 02             	or     dh,0x2
c00195a7:	eb 03                	jmp    c00195ac <Vm::faultHandler(regs*)+0x28a>
c00195a9:	80 e6 fd             	and    dh,0xfd
c00195ac:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00195b0:	e9 dd 03 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c00195b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00195ba:	74 2a                	je     c00195e6 <Vm::faultHandler(regs*)+0x2c4>
c00195bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00195be:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00195c4:	81 ca 00 02 02 00    	or     edx,0x20200
c00195ca:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00195cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00195cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00195d5:	c1 e8 09             	shr    eax,0x9
c00195d8:	83 e0 01             	and    eax,0x1
c00195db:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00195de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00195e1:	83 c0 04             	add    eax,0x4
c00195e4:	eb 25                	jmp    c001960b <Vm::faultHandler(regs*)+0x2e9>
c00195e6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00195e9:	81 ca 00 02 02 00    	or     edx,0x20200
c00195ef:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00195f2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00195f5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00195fb:	66 c1 e8 09          	shr    ax,0x9
c00195ff:	83 e0 01             	and    eax,0x1
c0019602:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019605:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019608:	83 c0 02             	add    eax,0x2
c001960b:	25 ff ff 00 00       	and    eax,0xffff
c0019610:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019613:	e9 7a 03 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001961c:	3c ee                	cmp    al,0xee
c001961e:	75 10                	jne    c0019630 <Vm::faultHandler(regs*)+0x30e>
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019626:	e8 a2 f9 ff ff       	call   c0018fcd <Vm::mainloop3(unsigned long)>
c001962b:	e9 4b 03 00 00       	jmp    c001997b <Vm::faultHandler(regs*)+0x659>
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001963b:	51                   	push   ecx
c001963c:	50                   	push   eax
c001963d:	53                   	push   ebx
c001963e:	e8 e1 fb ff ff       	call   c0019224 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019643:	83 c4 20             	add    esp,0x20
c0019646:	e9 4a 03 00 00       	jmp    c0019995 <Vm::faultHandler(regs*)+0x673>
c001964b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019650:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019654:	e9 39 03 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019659:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001965e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0019662:	e9 2b 03 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019667:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001966a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001966f:	74 2b                	je     c001969c <Vm::faultHandler(regs*)+0x37a>
c0019671:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019678:	76 22                	jbe    c001969c <Vm::faultHandler(regs*)+0x37a>
c001967a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001967e:	50                   	push   eax
c001967f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019683:	50                   	push   eax
c0019684:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019688:	50                   	push   eax
c0019689:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001968d:	50                   	push   eax
c001968e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019692:	50                   	push   eax
c0019693:	6a 6c                	push   0x6c
c0019695:	6a 6c                	push   0x6c
c0019697:	e9 b9 01 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0x533>
c001969c:	83 ec 0c             	sub    esp,0xc
c001969f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196a3:	0f b7 f6             	movzx  esi,si
c00196a6:	50                   	push   eax
c00196a7:	e8 71 f8 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c00196ac:	83 c4 0c             	add    esp,0xc
c00196af:	0f b6 c0             	movzx  eax,al
c00196b2:	50                   	push   eax
c00196b3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00196b7:	50                   	push   eax
c00196b8:	56                   	push   esi
c00196b9:	e8 24 fc ff ff       	call   c00192e2 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00196be:	83 c4 10             	add    esp,0x10
c00196c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00196c4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00196c8:	74 03                	je     c00196cd <Vm::faultHandler(regs*)+0x3ab>
c00196ca:	48                   	dec    eax
c00196cb:	eb 01                	jmp    c00196ce <Vm::faultHandler(regs*)+0x3ac>
c00196cd:	40                   	inc    eax
c00196ce:	0f b7 c0             	movzx  eax,ax
c00196d1:	e9 8d 00 00 00       	jmp    c0019763 <Vm::faultHandler(regs*)+0x441>
c00196d6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00196d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00196dc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196e1:	74 29                	je     c001970c <Vm::faultHandler(regs*)+0x3ea>
c00196e3:	3d ff ff 00 00       	cmp    eax,0xffff
c00196e8:	76 22                	jbe    c001970c <Vm::faultHandler(regs*)+0x3ea>
c00196ea:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00196ee:	50                   	push   eax
c00196ef:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00196f3:	50                   	push   eax
c00196f4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00196f8:	50                   	push   eax
c00196f9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00196fd:	50                   	push   eax
c00196fe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019702:	50                   	push   eax
c0019703:	6a 6d                	push   0x6d
c0019705:	6a 6d                	push   0x6d
c0019707:	e9 49 01 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0x533>
c001970c:	0f b7 c8             	movzx  ecx,ax
c001970f:	0f b7 f6             	movzx  esi,si
c0019712:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019715:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001971a:	74 20                	je     c001973c <Vm::faultHandler(regs*)+0x41a>
c001971c:	ed                   	in     eax,dx
c001971d:	55                   	push   ebp
c001971e:	50                   	push   eax
c001971f:	51                   	push   ecx
c0019720:	56                   	push   esi
c0019721:	e8 e7 fb ff ff       	call   c001930d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019726:	83 c4 10             	add    esp,0x10
c0019729:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001972c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019730:	74 05                	je     c0019737 <Vm::faultHandler(regs*)+0x415>
c0019732:	83 e8 04             	sub    eax,0x4
c0019735:	eb 27                	jmp    c001975e <Vm::faultHandler(regs*)+0x43c>
c0019737:	83 c0 04             	add    eax,0x4
c001973a:	eb 22                	jmp    c001975e <Vm::faultHandler(regs*)+0x43c>
c001973c:	66 ed                	in     ax,dx
c001973e:	0f b7 c0             	movzx  eax,ax
c0019741:	57                   	push   edi
c0019742:	50                   	push   eax
c0019743:	51                   	push   ecx
c0019744:	56                   	push   esi
c0019745:	e8 ad fb ff ff       	call   c00192f7 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019750:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019754:	74 05                	je     c001975b <Vm::faultHandler(regs*)+0x439>
c0019756:	83 e8 02             	sub    eax,0x2
c0019759:	eb 03                	jmp    c001975e <Vm::faultHandler(regs*)+0x43c>
c001975b:	83 c0 02             	add    eax,0x2
c001975e:	25 ff ff 00 00       	and    eax,0xffff
c0019763:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019766:	e9 27 02 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c001976b:	8d 46 ff             	lea    eax,[esi-0x1]
c001976e:	3c 05                	cmp    al,0x5
c0019770:	77 24                	ja     c0019796 <Vm::faultHandler(regs*)+0x474>
c0019772:	0f b6 c0             	movzx  eax,al
c0019775:	ff 24 85 34 64 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9bcc]
c001977c:	0f b7 fd             	movzx  edi,bp
c001977f:	eb 15                	jmp    c0019796 <Vm::faultHandler(regs*)+0x474>
c0019781:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019785:	eb 0f                	jmp    c0019796 <Vm::faultHandler(regs*)+0x474>
c0019787:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001978b:	eb 09                	jmp    c0019796 <Vm::faultHandler(regs*)+0x474>
c001978d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019791:	eb 03                	jmp    c0019796 <Vm::faultHandler(regs*)+0x474>
c0019793:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019796:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019799:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001979e:	74 29                	je     c00197c9 <Vm::faultHandler(regs*)+0x4a7>
c00197a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00197a5:	76 22                	jbe    c00197c9 <Vm::faultHandler(regs*)+0x4a7>
c00197a7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00197ab:	50                   	push   eax
c00197ac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00197b0:	50                   	push   eax
c00197b1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00197b5:	50                   	push   eax
c00197b6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00197ba:	50                   	push   eax
c00197bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00197bf:	50                   	push   eax
c00197c0:	6a 6e                	push   0x6e
c00197c2:	6a 6e                	push   0x6e
c00197c4:	e9 8c 00 00 00       	jmp    c0019855 <Vm::faultHandler(regs*)+0x533>
c00197c9:	0f b7 c0             	movzx  eax,ax
c00197cc:	52                   	push   edx
c00197cd:	52                   	push   edx
c00197ce:	50                   	push   eax
c00197cf:	57                   	push   edi
c00197d0:	e8 d9 fa ff ff       	call   c00192ae <Vm::readByteFromReal(unsigned short, unsigned short)>
c00197d5:	59                   	pop    ecx
c00197d6:	0f b6 c0             	movzx  eax,al
c00197d9:	5e                   	pop    esi
c00197da:	50                   	push   eax
c00197db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00197df:	50                   	push   eax
c00197e0:	e8 4b f7 ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c00197e5:	83 c4 10             	add    esp,0x10
c00197e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00197eb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00197ef:	74 03                	je     c00197f4 <Vm::faultHandler(regs*)+0x4d2>
c00197f1:	48                   	dec    eax
c00197f2:	eb 01                	jmp    c00197f5 <Vm::faultHandler(regs*)+0x4d3>
c00197f4:	40                   	inc    eax
c00197f5:	0f b7 c0             	movzx  eax,ax
c00197f8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00197fb:	e9 92 01 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019800:	8d 46 ff             	lea    eax,[esi-0x1]
c0019803:	3c 05                	cmp    al,0x5
c0019805:	77 1f                	ja     c0019826 <Vm::faultHandler(regs*)+0x504>
c0019807:	0f b6 c0             	movzx  eax,al
c001980a:	ff 24 85 4c 64 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9bb4]
c0019811:	89 ef                	mov    edi,ebp
c0019813:	eb 11                	jmp    c0019826 <Vm::faultHandler(regs*)+0x504>
c0019815:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019818:	eb 0c                	jmp    c0019826 <Vm::faultHandler(regs*)+0x504>
c001981a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001981d:	eb 07                	jmp    c0019826 <Vm::faultHandler(regs*)+0x504>
c001981f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019822:	eb 02                	jmp    c0019826 <Vm::faultHandler(regs*)+0x504>
c0019824:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019826:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019829:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001982e:	74 37                	je     c0019867 <Vm::faultHandler(regs*)+0x545>
c0019830:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019836:	76 2f                	jbe    c0019867 <Vm::faultHandler(regs*)+0x545>
c0019838:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001983c:	50                   	push   eax
c001983d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019841:	50                   	push   eax
c0019842:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019846:	50                   	push   eax
c0019847:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001984b:	50                   	push   eax
c001984c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019850:	50                   	push   eax
c0019851:	6a 6f                	push   0x6f
c0019853:	6a 6f                	push   0x6f
c0019855:	68 da 63 02 c0       	push   0xc00263da
c001985a:	e8 54 34 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001985f:	83 c4 20             	add    esp,0x20
c0019862:	e9 86 01 00 00       	jmp    c00199ed <Vm::faultHandler(regs*)+0x6cb>
c0019867:	0f b7 d7             	movzx  edx,di
c001986a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001986d:	0f b7 c6             	movzx  eax,si
c0019870:	81 e1 00 04 00 00    	and    ecx,0x400
c0019876:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019879:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001987e:	74 1d                	je     c001989d <Vm::faultHandler(regs*)+0x57b>
c0019880:	55                   	push   ebp
c0019881:	55                   	push   ebp
c0019882:	50                   	push   eax
c0019883:	52                   	push   edx
c0019884:	e8 48 fa ff ff       	call   c00192d1 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019889:	83 c4 10             	add    esp,0x10
c001988c:	89 fa                	mov    edx,edi
c001988e:	ef                   	out    dx,eax
c001988f:	85 c9                	test   ecx,ecx
c0019891:	74 05                	je     c0019898 <Vm::faultHandler(regs*)+0x576>
c0019893:	83 ee 04             	sub    esi,0x4
c0019896:	eb 21                	jmp    c00198b9 <Vm::faultHandler(regs*)+0x597>
c0019898:	83 c6 04             	add    esi,0x4
c001989b:	eb 1c                	jmp    c00198b9 <Vm::faultHandler(regs*)+0x597>
c001989d:	55                   	push   ebp
c001989e:	55                   	push   ebp
c001989f:	50                   	push   eax
c00198a0:	52                   	push   edx
c00198a1:	e8 19 fa ff ff       	call   c00192bf <Vm::readWordFromReal(unsigned short, unsigned short)>
c00198a6:	83 c4 10             	add    esp,0x10
c00198a9:	89 fa                	mov    edx,edi
c00198ab:	66 ef                	out    dx,ax
c00198ad:	85 c9                	test   ecx,ecx
c00198af:	74 05                	je     c00198b6 <Vm::faultHandler(regs*)+0x594>
c00198b1:	83 ee 02             	sub    esi,0x2
c00198b4:	eb 03                	jmp    c00198b9 <Vm::faultHandler(regs*)+0x597>
c00198b6:	83 c6 02             	add    esi,0x2
c00198b9:	81 e6 ff ff 00 00    	and    esi,0xffff
c00198bf:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00198c2:	e9 cb 00 00 00       	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c00198c7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00198ce:	83 ec 0c             	sub    esp,0xc
c00198d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00198d5:	50                   	push   eax
c00198d6:	e8 42 f6 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c00198db:	0f b6 c0             	movzx  eax,al
c00198de:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00198e1:	eb 3f                	jmp    c0019922 <Vm::faultHandler(regs*)+0x600>
c00198e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198e8:	74 07                	je     c00198f1 <Vm::faultHandler(regs*)+0x5cf>
c00198ea:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00198ee:	ed                   	in     eax,dx
c00198ef:	eb 14                	jmp    c0019905 <Vm::faultHandler(regs*)+0x5e3>
c00198f1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00198f4:	66 31 f6             	xor    si,si
c00198f7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00198fa:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00198fe:	66 ed                	in     ax,dx
c0019900:	0f b7 c0             	movzx  eax,ax
c0019903:	09 f0                	or     eax,esi
c0019905:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019908:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001990c:	e9 84 00 00 00       	jmp    c0019995 <Vm::faultHandler(regs*)+0x673>
c0019911:	52                   	push   edx
c0019912:	52                   	push   edx
c0019913:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019917:	50                   	push   eax
c0019918:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001991c:	50                   	push   eax
c001991d:	e8 0e f6 ff ff       	call   c0018f30 <Vm::outbv(unsigned short, unsigned char)>
c0019922:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019926:	eb 53                	jmp    c001997b <Vm::faultHandler(regs*)+0x659>
c0019928:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001992b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001992f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019934:	74 03                	je     c0019939 <Vm::faultHandler(regs*)+0x617>
c0019936:	ef                   	out    dx,eax
c0019937:	eb cf                	jmp    c0019908 <Vm::faultHandler(regs*)+0x5e6>
c0019939:	66 ef                	out    dx,ax
c001993b:	eb cb                	jmp    c0019908 <Vm::faultHandler(regs*)+0x5e6>
c001993d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019944:	83 ec 0c             	sub    esp,0xc
c0019947:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001994b:	50                   	push   eax
c001994c:	e8 cc f5 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c0019951:	0f b6 c0             	movzx  eax,al
c0019954:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019957:	eb 1f                	jmp    c0019978 <Vm::faultHandler(regs*)+0x656>
c0019959:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001995c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019961:	74 03                	je     c0019966 <Vm::faultHandler(regs*)+0x644>
c0019963:	ed                   	in     eax,dx
c0019964:	eb 0d                	jmp    c0019973 <Vm::faultHandler(regs*)+0x651>
c0019966:	66 ed                	in     ax,dx
c0019968:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001996b:	0f b7 c0             	movzx  eax,ax
c001996e:	66 31 d2             	xor    dx,dx
c0019971:	09 d0                	or     eax,edx
c0019973:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019976:	eb 1a                	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019978:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	eb 15                	jmp    c0019995 <Vm::faultHandler(regs*)+0x673>
c0019980:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019983:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019986:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001998b:	74 03                	je     c0019990 <Vm::faultHandler(regs*)+0x66e>
c001998d:	ef                   	out    dx,eax
c001998e:	eb 02                	jmp    c0019992 <Vm::faultHandler(regs*)+0x670>
c0019990:	66 ef                	out    dx,ax
c0019992:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019995:	b0 01                	mov    al,0x1
c0019997:	eb 56                	jmp    c00199ef <Vm::faultHandler(regs*)+0x6cd>
c0019999:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001999d:	50                   	push   eax
c001999e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199a2:	50                   	push   eax
c00199a3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199a7:	50                   	push   eax
c00199a8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199ac:	50                   	push   eax
c00199ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199b1:	50                   	push   eax
c00199b2:	52                   	push   edx
c00199b3:	52                   	push   edx
c00199b4:	68 07 64 02 c0       	push   0xc0026407
c00199b9:	e8 f5 32 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00199be:	83 c4 20             	add    esp,0x20
c00199c1:	83 ec 0c             	sub    esp,0xc
c00199c4:	6a 60                	push   0x60
c00199c6:	e8 52 f5 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c00199cb:	83 c4 10             	add    esp,0x10
c00199ce:	3c 1c                	cmp    al,0x1c
c00199d0:	74 04                	je     c00199d6 <Vm::faultHandler(regs*)+0x6b4>
c00199d2:	3c 5a                	cmp    al,0x5a
c00199d4:	75 eb                	jne    c00199c1 <Vm::faultHandler(regs*)+0x69f>
c00199d6:	3c 5a                	cmp    al,0x5a
c00199d8:	74 04                	je     c00199de <Vm::faultHandler(regs*)+0x6bc>
c00199da:	3c 1c                	cmp    al,0x1c
c00199dc:	75 0f                	jne    c00199ed <Vm::faultHandler(regs*)+0x6cb>
c00199de:	83 ec 0c             	sub    esp,0xc
c00199e1:	6a 60                	push   0x60
c00199e3:	e8 35 f5 ff ff       	call   c0018f1d <Vm::inbv(unsigned short)>
c00199e8:	83 c4 10             	add    esp,0x10
c00199eb:	eb e9                	jmp    c00199d6 <Vm::faultHandler(regs*)+0x6b4>
c00199ed:	31 c0                	xor    eax,eax
c00199ef:	83 c4 1c             	add    esp,0x1c
c00199f2:	5b                   	pop    ebx
c00199f3:	5e                   	pop    esi
c00199f4:	5f                   	pop    edi
c00199f5:	5d                   	pop    ebp
c00199f6:	c3                   	ret    
c00199f7:	90                   	nop

c00199f8 <Vm::fpuInternalTo32(unsigned long long)>:
c00199f8:	57                   	push   edi
c00199f9:	56                   	push   esi
c00199fa:	53                   	push   ebx
c00199fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a03:	89 d6                	mov    esi,edx
c0019a05:	89 d7                	mov    edi,edx
c0019a07:	89 c1                	mov    ecx,eax
c0019a09:	c1 ef 14             	shr    edi,0x14
c0019a0c:	89 d3                	mov    ebx,edx
c0019a0e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019a14:	31 d2                	xor    edx,edx
c0019a16:	89 f8                	mov    eax,edi
c0019a18:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019a1e:	bf ff 00 00 00       	mov    edi,0xff
c0019a23:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019a28:	83 d2 ff             	adc    edx,0xffffffff
c0019a2b:	39 c7                	cmp    edi,eax
c0019a2d:	bf 00 00 00 00       	mov    edi,0x0
c0019a32:	19 d7                	sbb    edi,edx
c0019a34:	72 16                	jb     c0019a4c <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019a36:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019a3a:	c1 e0 17             	shl    eax,0x17
c0019a3d:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019a43:	09 f1                	or     ecx,esi
c0019a45:	09 c1                	or     ecx,eax
c0019a47:	89 cf                	mov    edi,ecx
c0019a49:	eb 05                	jmp    c0019a50 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019a4b:	90                   	nop
c0019a4c:	31 ff                	xor    edi,edi
c0019a4e:	66 90                	xchg   ax,ax
c0019a50:	89 f8                	mov    eax,edi
c0019a52:	5b                   	pop    ebx
c0019a53:	5e                   	pop    esi
c0019a54:	5f                   	pop    edi
c0019a55:	c3                   	ret    

c0019a56 <Vm::fpuInternalTo64(unsigned long long)>:
c0019a56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a5e:	c3                   	ret    

c0019a5f <Vm::fpu32ToInternal(unsigned int)>:
c0019a5f:	57                   	push   edi
c0019a60:	31 ff                	xor    edi,edi
c0019a62:	56                   	push   esi
c0019a63:	53                   	push   ebx
c0019a64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a68:	89 cb                	mov    ebx,ecx
c0019a6a:	89 ce                	mov    esi,ecx
c0019a6c:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019a72:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019a78:	c1 e9 17             	shr    ecx,0x17
c0019a7b:	89 f0                	mov    eax,esi
c0019a7d:	0f b6 d1             	movzx  edx,cl
c0019a80:	81 c2 80 03 00 00    	add    edx,0x380
c0019a86:	89 d1                	mov    ecx,edx
c0019a88:	89 fa                	mov    edx,edi
c0019a8a:	c1 e1 14             	shl    ecx,0x14
c0019a8d:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019a91:	c1 e0 1d             	shl    eax,0x1d
c0019a94:	89 d7                	mov    edi,edx
c0019a96:	89 c6                	mov    esi,eax
c0019a98:	89 ca                	mov    edx,ecx
c0019a9a:	89 f0                	mov    eax,esi
c0019a9c:	09 fa                	or     edx,edi
c0019a9e:	09 da                	or     edx,ebx
c0019aa0:	5b                   	pop    ebx
c0019aa1:	5e                   	pop    esi
c0019aa2:	5f                   	pop    edi
c0019aa3:	c3                   	ret    

c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>:
c0019aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019aa8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019aac:	c3                   	ret    

c0019aad <Vm::fpuFloatToLong(unsigned long long)>:
c0019aad:	57                   	push   edi
c0019aae:	31 c0                	xor    eax,eax
c0019ab0:	56                   	push   esi
c0019ab1:	31 d2                	xor    edx,edx
c0019ab3:	53                   	push   ebx
c0019ab4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ab8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019abc:	89 d9                	mov    ecx,ebx
c0019abe:	c1 e9 14             	shr    ecx,0x14
c0019ac1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019ac7:	89 cf                	mov    edi,ecx
c0019ac9:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019acf:	78 37                	js     c0019b08 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019ad1:	89 d9                	mov    ecx,ebx
c0019ad3:	89 f0                	mov    eax,esi
c0019ad5:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019adb:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019ae1:	89 ca                	mov    edx,ecx
c0019ae3:	b9 34 00 00 00       	mov    ecx,0x34
c0019ae8:	29 f9                	sub    ecx,edi
c0019aea:	0f ad d0             	shrd   eax,edx,cl
c0019aed:	d3 fa                	sar    edx,cl
c0019aef:	f6 c1 20             	test   cl,0x20
c0019af2:	74 08                	je     c0019afc <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019af4:	89 d0                	mov    eax,edx
c0019af6:	c1 fa 1f             	sar    edx,0x1f
c0019af9:	8d 76 00             	lea    esi,[esi+0x0]
c0019afc:	85 db                	test   ebx,ebx
c0019afe:	79 08                	jns    c0019b08 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019b00:	f7 d8                	neg    eax
c0019b02:	83 d2 00             	adc    edx,0x0
c0019b05:	f7 da                	neg    edx
c0019b07:	90                   	nop
c0019b08:	5b                   	pop    ebx
c0019b09:	5e                   	pop    esi
c0019b0a:	5f                   	pop    edi
c0019b0b:	c3                   	ret    

c0019b0c <Vm::fpuULongToFloat(unsigned long long)>:
c0019b0c:	57                   	push   edi
c0019b0d:	31 c9                	xor    ecx,ecx
c0019b0f:	56                   	push   esi
c0019b10:	53                   	push   ebx
c0019b11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b19:	8d 76 00             	lea    esi,[esi+0x0]
c0019b1c:	0f ba e7 14          	bt     edi,0x14
c0019b20:	72 0a                	jb     c0019b2c <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019b22:	01 f6                	add    esi,esi
c0019b24:	11 ff                	adc    edi,edi
c0019b26:	41                   	inc    ecx
c0019b27:	eb f3                	jmp    c0019b1c <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019b29:	8d 76 00             	lea    esi,[esi+0x0]
c0019b2c:	89 fa                	mov    edx,edi
c0019b2e:	89 f0                	mov    eax,esi
c0019b30:	bb 33 04 00 00       	mov    ebx,0x433
c0019b35:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019b3b:	29 cb                	sub    ebx,ecx
c0019b3d:	89 d9                	mov    ecx,ebx
c0019b3f:	5b                   	pop    ebx
c0019b40:	c1 e1 14             	shl    ecx,0x14
c0019b43:	5e                   	pop    esi
c0019b44:	09 ca                	or     edx,ecx
c0019b46:	5f                   	pop    edi
c0019b47:	c3                   	ret    

c0019b48 <Vm::fpuLongToFloat(long long)>:
c0019b48:	56                   	push   esi
c0019b49:	31 c0                	xor    eax,eax
c0019b4b:	53                   	push   ebx
c0019b4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019b50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019b54:	39 c8                	cmp    eax,ecx
c0019b56:	19 d8                	sbb    eax,ebx
c0019b58:	7d 06                	jge    c0019b60 <Vm::fpuLongToFloat(long long)+0x18>
c0019b5a:	31 f6                	xor    esi,esi
c0019b5c:	eb 0e                	jmp    c0019b6c <Vm::fpuLongToFloat(long long)+0x24>
c0019b5e:	66 90                	xchg   ax,ax
c0019b60:	f7 d9                	neg    ecx
c0019b62:	be 01 00 00 00       	mov    esi,0x1
c0019b67:	83 d3 00             	adc    ebx,0x0
c0019b6a:	f7 db                	neg    ebx
c0019b6c:	31 c0                	xor    eax,eax
c0019b6e:	66 90                	xchg   ax,ax
c0019b70:	0f ba e3 14          	bt     ebx,0x14
c0019b74:	72 0a                	jb     c0019b80 <Vm::fpuLongToFloat(long long)+0x38>
c0019b76:	01 c9                	add    ecx,ecx
c0019b78:	11 db                	adc    ebx,ebx
c0019b7a:	40                   	inc    eax
c0019b7b:	eb f3                	jmp    c0019b70 <Vm::fpuLongToFloat(long long)+0x28>
c0019b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019b80:	ba 33 04 00 00       	mov    edx,0x433
c0019b85:	29 c2                	sub    edx,eax
c0019b87:	89 c8                	mov    eax,ecx
c0019b89:	c1 e2 14             	shl    edx,0x14
c0019b8c:	89 d9                	mov    ecx,ebx
c0019b8e:	89 f3                	mov    ebx,esi
c0019b90:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019b96:	09 ca                	or     edx,ecx
c0019b98:	84 db                	test   bl,bl
c0019b9a:	74 08                	je     c0019ba4 <Vm::fpuLongToFloat(long long)+0x5c>
c0019b9c:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019ba2:	66 90                	xchg   ax,ax
c0019ba4:	5b                   	pop    ebx
c0019ba5:	5e                   	pop    esi
c0019ba6:	c3                   	ret    

c0019ba7 <Vm::fpuGet0()>:
c0019ba7:	31 c0                	xor    eax,eax
c0019ba9:	31 d2                	xor    edx,edx
c0019bab:	c3                   	ret    

c0019bac <Vm::fpuGet1()>:
c0019bac:	b8 01 00 00 00       	mov    eax,0x1
c0019bb1:	31 d2                	xor    edx,edx
c0019bb3:	c3                   	ret    

c0019bb4 <Vm::fpuGetPi()>:
c0019bb4:	b8 03 00 00 00       	mov    eax,0x3
c0019bb9:	31 d2                	xor    edx,edx
c0019bbb:	c3                   	ret    

c0019bbc <Vm::fpuGetLog2E()>:
c0019bbc:	83 ec 18             	sub    esp,0x18
c0019bbf:	68 64 64 02 c0       	push   0xc0026464
c0019bc4:	e8 56 ac ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019bc9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019bce:	31 d2                	xor    edx,edx
c0019bd0:	83 c4 1c             	add    esp,0x1c
c0019bd3:	c3                   	ret    

c0019bd4 <Vm::fpuGetLogE2()>:
c0019bd4:	83 ec 18             	sub    esp,0x18
c0019bd7:	68 70 64 02 c0       	push   0xc0026470
c0019bdc:	e8 3e ac ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019be1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019be6:	31 d2                	xor    edx,edx
c0019be8:	83 c4 1c             	add    esp,0x1c
c0019beb:	c3                   	ret    

c0019bec <Vm::fpuGetLog210()>:
c0019bec:	83 ec 18             	sub    esp,0x18
c0019bef:	68 7c 64 02 c0       	push   0xc002647c
c0019bf4:	e8 26 ac ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019bf9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019bfe:	31 d2                	xor    edx,edx
c0019c00:	83 c4 1c             	add    esp,0x1c
c0019c03:	c3                   	ret    

c0019c04 <Vm::fpuGetLog102()>:
c0019c04:	83 ec 18             	sub    esp,0x18
c0019c07:	68 89 64 02 c0       	push   0xc0026489
c0019c0c:	e8 0e ac ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019c11:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019c16:	31 d2                	xor    edx,edx
c0019c18:	83 c4 1c             	add    esp,0x1c
c0019c1b:	c3                   	ret    

c0019c1c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019c1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c20:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c28:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019c2c:	0f 92 c0             	setb   al
c0019c2f:	c3                   	ret    

c0019c30 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019c30:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c38:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019c3c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019c40:	09 c2                	or     edx,eax
c0019c42:	0f 94 c0             	sete   al
c0019c45:	c3                   	ret    

c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019c46:	57                   	push   edi
c0019c47:	56                   	push   esi
c0019c48:	53                   	push   ebx
c0019c49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019c4d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c51:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019c55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019c59:	57                   	push   edi
c0019c5a:	56                   	push   esi
c0019c5b:	53                   	push   ebx
c0019c5c:	51                   	push   ecx
c0019c5d:	e8 ce ff ff ff       	call   c0019c30 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019c62:	83 c4 10             	add    esp,0x10
c0019c65:	88 c2                	mov    dl,al
c0019c67:	31 c0                	xor    eax,eax
c0019c69:	84 d2                	test   dl,dl
c0019c6b:	75 0f                	jne    c0019c7c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019c6d:	57                   	push   edi
c0019c6e:	56                   	push   esi
c0019c6f:	53                   	push   ebx
c0019c70:	51                   	push   ecx
c0019c71:	e8 a6 ff ff ff       	call   c0019c1c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019c76:	83 c4 10             	add    esp,0x10
c0019c79:	8d 76 00             	lea    esi,[esi+0x0]
c0019c7c:	83 e0 01             	and    eax,0x1
c0019c7f:	5b                   	pop    ebx
c0019c80:	88 c1                	mov    cl,al
c0019c82:	83 e2 01             	and    edx,0x1
c0019c85:	a0 e1 96 02 c0       	mov    al,ds:0xc00296e1
c0019c8a:	c1 e2 06             	shl    edx,0x6
c0019c8d:	83 e0 ba             	and    eax,0xffffffba
c0019c90:	5e                   	pop    esi
c0019c91:	09 c8                	or     eax,ecx
c0019c93:	5f                   	pop    edi
c0019c94:	09 d0                	or     eax,edx
c0019c96:	a2 e1 96 02 c0       	mov    ds:0xc00296e1,al
c0019c9b:	c3                   	ret    

c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019c9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ca4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019ca8:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019cac:	c3                   	ret    

c0019cad <Vm::fpuAbs(unsigned long long)>:
c0019cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cb5:	c3                   	ret    

c0019cb6 <Vm::fpuChs(unsigned long long)>:
c0019cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cbe:	f7 d8                	neg    eax
c0019cc0:	83 d2 00             	adc    edx,0x0
c0019cc3:	f7 da                	neg    edx
c0019cc5:	c3                   	ret    

c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019cc6:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019cca:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019ccf:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019cd3:	eb c7                	jmp    c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019cd5:	53                   	push   ebx
c0019cd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019ce2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ce6:	0f af ca             	imul   ecx,edx
c0019ce9:	0f af d8             	imul   ebx,eax
c0019cec:	f7 e2                	mul    edx
c0019cee:	01 d9                	add    ecx,ebx
c0019cf0:	5b                   	pop    ebx
c0019cf1:	01 ca                	add    edx,ecx
c0019cf3:	c3                   	ret    

c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019cf4:	83 ec 0c             	sub    esp,0xc
c0019cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019cff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d07:	e8 d8 8c 00 00       	call   c00229e4 <__udivdi3>
c0019d0c:	83 c4 1c             	add    esp,0x1c
c0019d0f:	c3                   	ret    

c0019d10 <Vm::fpuSquare(unsigned long long)>:
c0019d10:	50                   	push   eax
c0019d11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d19:	52                   	push   edx
c0019d1a:	50                   	push   eax
c0019d1b:	52                   	push   edx
c0019d1c:	50                   	push   eax
c0019d1d:	e8 b3 ff ff ff       	call   c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019d22:	83 c4 14             	add    esp,0x14
c0019d25:	c3                   	ret    

c0019d26 <Vm::fpuGetReg(int)>:
c0019d26:	83 ec 0c             	sub    esp,0xc
c0019d29:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019d2e:	76 10                	jbe    c0019d40 <Vm::fpuGetReg(int)+0x1a>
c0019d30:	83 ec 0c             	sub    esp,0xc
c0019d33:	68 96 64 02 c0       	push   0xc0026496
c0019d38:	e8 e2 aa ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019d3d:	83 c4 10             	add    esp,0x10
c0019d40:	a0 e1 96 02 c0       	mov    al,ds:0xc00296e1
c0019d45:	b9 08 00 00 00       	mov    ecx,0x8
c0019d4a:	c0 e8 03             	shr    al,0x3
c0019d4d:	83 e0 07             	and    eax,0x7
c0019d50:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019d54:	99                   	cdq    
c0019d55:	f7 f9                	idiv   ecx
c0019d57:	8b 04 d5 e4 96 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd691c]
c0019d5e:	8b 14 d5 e8 96 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6918]
c0019d65:	83 c4 0c             	add    esp,0xc
c0019d68:	c3                   	ret    

c0019d69 <Vm::fpuSetReg(int, unsigned long long)>:
c0019d69:	57                   	push   edi
c0019d6a:	56                   	push   esi
c0019d6b:	52                   	push   edx
c0019d6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d70:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019d74:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019d79:	76 11                	jbe    c0019d8c <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019d7b:	83 ec 0c             	sub    esp,0xc
c0019d7e:	68 a9 64 02 c0       	push   0xc00264a9
c0019d83:	e8 97 aa ff ff       	call   c001481f <Krnl::panic(char const*)>
c0019d88:	83 c4 10             	add    esp,0x10
c0019d8b:	90                   	nop
c0019d8c:	a0 e1 96 02 c0       	mov    al,ds:0xc00296e1
c0019d91:	b9 08 00 00 00       	mov    ecx,0x8
c0019d96:	c0 e8 03             	shr    al,0x3
c0019d99:	83 e0 07             	and    eax,0x7
c0019d9c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019da0:	99                   	cdq    
c0019da1:	f7 f9                	idiv   ecx
c0019da3:	89 34 d5 e4 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd691c],esi
c0019daa:	89 3c d5 e8 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6918],edi
c0019db1:	58                   	pop    eax
c0019db2:	5e                   	pop    esi
c0019db3:	5f                   	pop    edi
c0019db4:	c3                   	ret    

c0019db5 <Vm::fpuPush(unsigned long long)>:
c0019db5:	a0 e1 96 02 c0       	mov    al,ds:0xc00296e1
c0019dba:	c0 e8 03             	shr    al,0x3
c0019dbd:	83 e0 07             	and    eax,0x7
c0019dc0:	83 c0 07             	add    eax,0x7
c0019dc3:	88 c2                	mov    dl,al
c0019dc5:	83 e0 07             	and    eax,0x7
c0019dc8:	83 e2 07             	and    edx,0x7
c0019dcb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019dd2:	8a 15 e1 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296e1
c0019dd8:	83 e2 c7             	and    edx,0xffffffc7
c0019ddb:	09 ca                	or     edx,ecx
c0019ddd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019de1:	88 15 e1 96 02 c0    	mov    BYTE PTR ds:0xc00296e1,dl
c0019de7:	89 0c c5 e8 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6918],ecx
c0019dee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019df2:	89 14 c5 e4 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd691c],edx
c0019df9:	a1 24 97 02 c0       	mov    eax,ds:0xc0029724
c0019dfe:	83 f8 08             	cmp    eax,0x8
c0019e01:	75 09                	jne    c0019e0c <Vm::fpuPush(unsigned long long)+0x57>
c0019e03:	80 0d e0 96 02 c0 40 	or     BYTE PTR ds:0xc00296e0,0x40
c0019e0a:	c3                   	ret    
c0019e0b:	90                   	nop
c0019e0c:	40                   	inc    eax
c0019e0d:	a3 24 97 02 c0       	mov    ds:0xc0029724,eax
c0019e12:	c3                   	ret    

c0019e13 <Vm::fpuPop()>:
c0019e13:	8a 0d e1 96 02 c0    	mov    cl,BYTE PTR ds:0xc00296e1
c0019e19:	53                   	push   ebx
c0019e1a:	c0 e9 03             	shr    cl,0x3
c0019e1d:	8a 1d e1 96 02 c0    	mov    bl,BYTE PTR ds:0xc00296e1
c0019e23:	83 e1 07             	and    ecx,0x7
c0019e26:	83 e3 c7             	and    ebx,0xffffffc7
c0019e29:	8b 04 cd e4 96 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd691c]
c0019e30:	8b 14 cd e8 96 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6918]
c0019e37:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0019e3e:	83 e1 38             	and    ecx,0x38
c0019e41:	09 d9                	or     ecx,ebx
c0019e43:	88 0d e1 96 02 c0    	mov    BYTE PTR ds:0xc00296e1,cl
c0019e49:	8b 0d 24 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029724
c0019e4f:	85 c9                	test   ecx,ecx
c0019e51:	74 09                	je     c0019e5c <Vm::fpuPop()+0x49>
c0019e53:	49                   	dec    ecx
c0019e54:	89 0d 24 97 02 c0    	mov    DWORD PTR ds:0xc0029724,ecx
c0019e5a:	eb 08                	jmp    c0019e64 <Vm::fpuPop()+0x51>
c0019e5c:	80 0d e0 96 02 c0 40 	or     BYTE PTR ds:0xc00296e0,0x40
c0019e63:	90                   	nop
c0019e64:	5b                   	pop    ebx
c0019e65:	c3                   	ret    

c0019e66 <Vm::x87Handler(regs*)>:
c0019e66:	55                   	push   ebp
c0019e67:	57                   	push   edi
c0019e68:	56                   	push   esi
c0019e69:	53                   	push   ebx
c0019e6a:	83 ec 1c             	sub    esp,0x1c
c0019e6d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019e71:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0019e76:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0019e79:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0019e81:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0019e85:	50                   	push   eax
c0019e86:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0019e8a:	50                   	push   eax
c0019e8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e8f:	50                   	push   eax
c0019e90:	53                   	push   ebx
c0019e91:	e8 a2 a0 ff ff       	call   c0013f38 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0019e96:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	89 c6                	mov    esi,eax
c0019e9e:	80 fa d9             	cmp    dl,0xd9
c0019ea1:	0f 85 79 01 00 00    	jne    c001a020 <Vm::x87Handler(regs*)+0x1ba>
c0019ea7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019eab:	8d 50 20             	lea    edx,[eax+0x20]
c0019eae:	80 fa 0e             	cmp    dl,0xe
c0019eb1:	0f 87 a5 00 00 00    	ja     c0019f5c <Vm::x87Handler(regs*)+0xf6>
c0019eb7:	0f b6 d2             	movzx  edx,dl
c0019eba:	ff 24 95 bc 64 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9b44]
c0019ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec4:	e8 de fc ff ff       	call   c0019ba7 <Vm::fpuGet0()>
c0019ec9:	eb 09                	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019ecb:	90                   	nop
c0019ecc:	e8 db fc ff ff       	call   c0019bac <Vm::fpuGet1()>
c0019ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ed4:	57                   	push   edi
c0019ed5:	57                   	push   edi
c0019ed6:	66 90                	xchg   ax,ax
c0019ed8:	52                   	push   edx
c0019ed9:	50                   	push   eax
c0019eda:	e8 d6 fe ff ff       	call   c0019db5 <Vm::fpuPush(unsigned long long)>
c0019edf:	90                   	nop
c0019ee0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019ee4:	83 c4 10             	add    esp,0x10
c0019ee7:	90                   	nop
c0019ee8:	b0 01                	mov    al,0x1
c0019eea:	e9 89 0a 00 00       	jmp    c001a978 <Vm::x87Handler(regs*)+0xb12>
c0019eef:	90                   	nop
c0019ef0:	83 ec 0c             	sub    esp,0xc
c0019ef3:	6a 00                	push   0x0
c0019ef5:	e8 2c fe ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c0019efa:	59                   	pop    ecx
c0019efb:	5e                   	pop    esi
c0019efc:	52                   	push   edx
c0019efd:	50                   	push   eax
c0019efe:	e8 b3 fd ff ff       	call   c0019cb6 <Vm::fpuChs(unsigned long long)>
c0019f03:	eb 17                	jmp    c0019f1c <Vm::x87Handler(regs*)+0xb6>
c0019f05:	8d 76 00             	lea    esi,[esi+0x0]
c0019f08:	83 ec 0c             	sub    esp,0xc
c0019f0b:	6a 00                	push   0x0
c0019f0d:	e8 14 fe ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c0019f12:	5f                   	pop    edi
c0019f13:	5d                   	pop    ebp
c0019f14:	52                   	push   edx
c0019f15:	50                   	push   eax
c0019f16:	e8 92 fd ff ff       	call   c0019cad <Vm::fpuAbs(unsigned long long)>
c0019f1b:	90                   	nop
c0019f1c:	83 c4 0c             	add    esp,0xc
c0019f1f:	90                   	nop
c0019f20:	52                   	push   edx
c0019f21:	50                   	push   eax
c0019f22:	66 90                	xchg   ax,ax
c0019f24:	6a 00                	push   0x0
c0019f26:	66 90                	xchg   ax,ax
c0019f28:	e8 3c fe ff ff       	call   c0019d69 <Vm::fpuSetReg(int, unsigned long long)>
c0019f2d:	eb b1                	jmp    c0019ee0 <Vm::x87Handler(regs*)+0x7a>
c0019f2f:	90                   	nop
c0019f30:	e8 b7 fc ff ff       	call   c0019bec <Vm::fpuGetLog210()>
c0019f35:	eb 9d                	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019f37:	90                   	nop
c0019f38:	e8 7f fc ff ff       	call   c0019bbc <Vm::fpuGetLog2E()>
c0019f3d:	eb 95                	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019f3f:	90                   	nop
c0019f40:	e8 6f fc ff ff       	call   c0019bb4 <Vm::fpuGetPi()>
c0019f45:	eb 8d                	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019f47:	90                   	nop
c0019f48:	e8 b7 fc ff ff       	call   c0019c04 <Vm::fpuGetLog102()>
c0019f4d:	eb 85                	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019f4f:	90                   	nop
c0019f50:	e8 7f fc ff ff       	call   c0019bd4 <Vm::fpuGetLogE2()>
c0019f55:	e9 7a ff ff ff       	jmp    c0019ed4 <Vm::x87Handler(regs*)+0x6e>
c0019f5a:	66 90                	xchg   ax,ax
c0019f5c:	8d 50 40             	lea    edx,[eax+0x40]
c0019f5f:	80 fa 07             	cmp    dl,0x7
c0019f62:	77 18                	ja     c0019f7c <Vm::x87Handler(regs*)+0x116>
c0019f64:	83 ec 0c             	sub    esp,0xc
c0019f67:	2d c0 00 00 00       	sub    eax,0xc0
c0019f6c:	50                   	push   eax
c0019f6d:	e8 b4 fd ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c0019f72:	59                   	pop    ecx
c0019f73:	5e                   	pop    esi
c0019f74:	e9 5f ff ff ff       	jmp    c0019ed8 <Vm::x87Handler(regs*)+0x72>
c0019f79:	8d 76 00             	lea    esi,[esi+0x0]
c0019f7c:	8d 50 38             	lea    edx,[eax+0x38]
c0019f7f:	80 fa 07             	cmp    dl,0x7
c0019f82:	77 3c                	ja     c0019fc0 <Vm::x87Handler(regs*)+0x15a>
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	2d c8 00 00 00       	sub    eax,0xc8
c0019f8c:	50                   	push   eax
c0019f8d:	e8 94 fd ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c0019f92:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f99:	89 c6                	mov    esi,eax
c0019f9b:	89 d7                	mov    edi,edx
c0019f9d:	e8 84 fd ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c0019fa2:	83 c4 0c             	add    esp,0xc
c0019fa5:	52                   	push   edx
c0019fa6:	50                   	push   eax
c0019fa7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fab:	2d c8 00 00 00       	sub    eax,0xc8
c0019fb0:	50                   	push   eax
c0019fb1:	e8 b3 fd ff ff       	call   c0019d69 <Vm::fpuSetReg(int, unsigned long long)>
c0019fb6:	83 c4 0c             	add    esp,0xc
c0019fb9:	57                   	push   edi
c0019fba:	56                   	push   esi
c0019fbb:	e9 64 ff ff ff       	jmp    c0019f24 <Vm::x87Handler(regs*)+0xbe>
c0019fc0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019fc4:	84 d2                	test   dl,dl
c0019fc6:	75 10                	jne    c0019fd8 <Vm::x87Handler(regs*)+0x172>
c0019fc8:	83 ec 0c             	sub    esp,0xc
c0019fcb:	ff 36                	push   DWORD PTR [esi]
c0019fcd:	e8 8d fa ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c0019fd2:	e9 c9 00 00 00       	jmp    c001a0a0 <Vm::x87Handler(regs*)+0x23a>
c0019fd7:	90                   	nop
c0019fd8:	80 fa 03             	cmp    dl,0x3
c0019fdb:	75 13                	jne    c0019ff0 <Vm::x87Handler(regs*)+0x18a>
c0019fdd:	e8 31 fe ff ff       	call   c0019e13 <Vm::fpuPop()>
c0019fe2:	55                   	push   ebp
c0019fe3:	55                   	push   ebp
c0019fe4:	52                   	push   edx
c0019fe5:	50                   	push   eax
c0019fe6:	e8 0d fa ff ff       	call   c00199f8 <Vm::fpuInternalTo32(unsigned long long)>
c0019feb:	e9 90 00 00 00       	jmp    c001a080 <Vm::x87Handler(regs*)+0x21a>
c0019ff0:	80 fa 05             	cmp    dl,0x5
c0019ff3:	75 0f                	jne    c001a004 <Vm::x87Handler(regs*)+0x19e>
c0019ff5:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019ff8:	66 a3 e2 96 02 c0    	mov    ds:0xc00296e2,ax
c0019ffe:	e9 ed 00 00 00       	jmp    c001a0f0 <Vm::x87Handler(regs*)+0x28a>
c001a003:	90                   	nop
c001a004:	31 c0                	xor    eax,eax
c001a006:	80 fa 07             	cmp    dl,0x7
c001a009:	0f 85 69 09 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a00f:	66 a1 e2 96 02 c0    	mov    ax,ds:0xc00296e2
c001a015:	66 89 06             	mov    WORD PTR [esi],ax
c001a018:	e9 d3 00 00 00       	jmp    c001a0f0 <Vm::x87Handler(regs*)+0x28a>
c001a01d:	8d 76 00             	lea    esi,[esi+0x0]
c001a020:	80 fa d8             	cmp    dl,0xd8
c001a023:	0f 84 d3 00 00 00    	je     c001a0fc <Vm::x87Handler(regs*)+0x296>
c001a029:	80 fa dc             	cmp    dl,0xdc
c001a02c:	0f 84 2a 02 00 00    	je     c001a25c <Vm::x87Handler(regs*)+0x3f6>
c001a032:	80 fa de             	cmp    dl,0xde
c001a035:	0f 84 f1 02 00 00    	je     c001a32c <Vm::x87Handler(regs*)+0x4c6>
c001a03b:	80 fa dd             	cmp    dl,0xdd
c001a03e:	0f 84 94 04 00 00    	je     c001a4d8 <Vm::x87Handler(regs*)+0x672>
c001a044:	80 fa da             	cmp    dl,0xda
c001a047:	0f 84 5f 05 00 00    	je     c001a5ac <Vm::x87Handler(regs*)+0x746>
c001a04d:	80 fa df             	cmp    dl,0xdf
c001a050:	0f 84 aa 05 00 00    	je     c001a600 <Vm::x87Handler(regs*)+0x79a>
c001a056:	31 c0                	xor    eax,eax
c001a058:	80 fa db             	cmp    dl,0xdb
c001a05b:	0f 85 17 09 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a061:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a065:	80 fa 03             	cmp    dl,0x3
c001a068:	0f 85 c2 06 00 00    	jne    c001a730 <Vm::x87Handler(regs*)+0x8ca>
c001a06e:	e8 a0 fd ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a073:	55                   	push   ebp
c001a074:	55                   	push   ebp
c001a075:	8d 76 00             	lea    esi,[esi+0x0]
c001a078:	52                   	push   edx
c001a079:	50                   	push   eax
c001a07a:	e8 2e fa ff ff       	call   c0019aad <Vm::fpuFloatToLong(unsigned long long)>
c001a07f:	90                   	nop
c001a080:	83 c4 10             	add    esp,0x10
c001a083:	89 06                	mov    DWORD PTR [esi],eax
c001a085:	eb 69                	jmp    c001a0f0 <Vm::x87Handler(regs*)+0x28a>
c001a087:	90                   	nop
c001a088:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a08c:	84 d2                	test   dl,dl
c001a08e:	0f 85 2c 06 00 00    	jne    c001a6c0 <Vm::x87Handler(regs*)+0x85a>
c001a094:	57                   	push   edi
c001a095:	57                   	push   edi
c001a096:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a099:	ff 36                	push   DWORD PTR [esi]
c001a09b:	e8 04 fa ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a0a0:	5e                   	pop    esi
c001a0a1:	5f                   	pop    edi
c001a0a2:	52                   	push   edx
c001a0a3:	50                   	push   eax
c001a0a4:	e8 0c fd ff ff       	call   c0019db5 <Vm::fpuPush(unsigned long long)>
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a0b0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0b3:	e9 2c fe ff ff       	jmp    c0019ee4 <Vm::x87Handler(regs*)+0x7e>
c001a0b8:	80 fa 03             	cmp    dl,0x3
c001a0bb:	0f 85 2b 07 00 00    	jne    c001a7ec <Vm::x87Handler(regs*)+0x986>
c001a0c1:	57                   	push   edi
c001a0c2:	57                   	push   edi
c001a0c3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0c6:	ff 36                	push   DWORD PTR [esi]
c001a0c8:	e8 d7 f9 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a0cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0d4:	89 c6                	mov    esi,eax
c001a0d6:	89 d7                	mov    edi,edx
c001a0d8:	e8 49 fc ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a0dd:	57                   	push   edi
c001a0de:	56                   	push   esi
c001a0df:	52                   	push   edx
c001a0e0:	50                   	push   eax
c001a0e1:	e8 60 fb ff ff       	call   c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0e6:	83 c4 20             	add    esp,0x20
c001a0e9:	e8 25 fd ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a0ee:	66 90                	xchg   ax,ax
c001a0f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0f4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a0f7:	e9 ec fd ff ff       	jmp    c0019ee8 <Vm::x87Handler(regs*)+0x82>
c001a0fc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a100:	8d 50 40             	lea    edx,[eax+0x40]
c001a103:	80 fa 07             	cmp    dl,0x7
c001a106:	77 2c                	ja     c001a134 <Vm::x87Handler(regs*)+0x2ce>
c001a108:	83 ec 0c             	sub    esp,0xc
c001a10b:	2d c0 00 00 00       	sub    eax,0xc0
c001a110:	50                   	push   eax
c001a111:	e8 10 fc ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a116:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a11d:	89 c6                	mov    esi,eax
c001a11f:	89 d7                	mov    edi,edx
c001a121:	e8 00 fc ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a126:	57                   	push   edi
c001a127:	56                   	push   esi
c001a128:	52                   	push   edx
c001a129:	50                   	push   eax
c001a12a:	e8 6d fb ff ff       	call   c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a12f:	eb 33                	jmp    c001a164 <Vm::x87Handler(regs*)+0x2fe>
c001a131:	8d 76 00             	lea    esi,[esi+0x0]
c001a134:	8d 50 38             	lea    edx,[eax+0x38]
c001a137:	80 fa 07             	cmp    dl,0x7
c001a13a:	77 30                	ja     c001a16c <Vm::x87Handler(regs*)+0x306>
c001a13c:	83 ec 0c             	sub    esp,0xc
c001a13f:	2d c8 00 00 00       	sub    eax,0xc8
c001a144:	50                   	push   eax
c001a145:	e8 dc fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a14a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a151:	89 c6                	mov    esi,eax
c001a153:	89 d7                	mov    edi,edx
c001a155:	e8 cc fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a15a:	57                   	push   edi
c001a15b:	56                   	push   esi
c001a15c:	52                   	push   edx
c001a15d:	50                   	push   eax
c001a15e:	e8 72 fb ff ff       	call   c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a163:	90                   	nop
c001a164:	83 c4 1c             	add    esp,0x1c
c001a167:	e9 b4 fd ff ff       	jmp    c0019f20 <Vm::x87Handler(regs*)+0xba>
c001a16c:	8d 50 30             	lea    edx,[eax+0x30]
c001a16f:	80 fa 07             	cmp    dl,0x7
c001a172:	77 10                	ja     c001a184 <Vm::x87Handler(regs*)+0x31e>
c001a174:	83 ec 0c             	sub    esp,0xc
c001a177:	2d d0 00 00 00       	sub    eax,0xd0
c001a17c:	e9 c3 03 00 00       	jmp    c001a544 <Vm::x87Handler(regs*)+0x6de>
c001a181:	8d 76 00             	lea    esi,[esi+0x0]
c001a184:	8d 50 28             	lea    edx,[eax+0x28]
c001a187:	80 fa 07             	cmp    dl,0x7
c001a18a:	77 10                	ja     c001a19c <Vm::x87Handler(regs*)+0x336>
c001a18c:	83 ec 0c             	sub    esp,0xc
c001a18f:	2d d8 00 00 00       	sub    eax,0xd8
c001a194:	e9 e7 03 00 00       	jmp    c001a580 <Vm::x87Handler(regs*)+0x71a>
c001a199:	8d 76 00             	lea    esi,[esi+0x0]
c001a19c:	8d 50 20             	lea    edx,[eax+0x20]
c001a19f:	80 fa 07             	cmp    dl,0x7
c001a1a2:	77 1c                	ja     c001a1c0 <Vm::x87Handler(regs*)+0x35a>
c001a1a4:	83 ec 0c             	sub    esp,0xc
c001a1a7:	2d e0 00 00 00       	sub    eax,0xe0
c001a1ac:	50                   	push   eax
c001a1ad:	e8 74 fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a1b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a1b9:	89 c6                	mov    esi,eax
c001a1bb:	89 d7                	mov    edi,edx
c001a1bd:	eb 25                	jmp    c001a1e4 <Vm::x87Handler(regs*)+0x37e>
c001a1bf:	90                   	nop
c001a1c0:	8d 50 18             	lea    edx,[eax+0x18]
c001a1c3:	80 fa 07             	cmp    dl,0x7
c001a1c6:	77 30                	ja     c001a1f8 <Vm::x87Handler(regs*)+0x392>
c001a1c8:	83 ec 0c             	sub    esp,0xc
c001a1cb:	6a 00                	push   0x0
c001a1cd:	e8 54 fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a1d2:	89 c6                	mov    esi,eax
c001a1d4:	89 d7                	mov    edi,edx
c001a1d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1da:	2d e8 00 00 00       	sub    eax,0xe8
c001a1df:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1e2:	66 90                	xchg   ax,ax
c001a1e4:	e8 3d fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a1e9:	57                   	push   edi
c001a1ea:	56                   	push   esi
c001a1eb:	52                   	push   edx
c001a1ec:	50                   	push   eax
c001a1ed:	e8 d4 fa ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a1f2:	e9 6d ff ff ff       	jmp    c001a164 <Vm::x87Handler(regs*)+0x2fe>
c001a1f7:	90                   	nop
c001a1f8:	8d 50 10             	lea    edx,[eax+0x10]
c001a1fb:	80 fa 07             	cmp    dl,0x7
c001a1fe:	77 1c                	ja     c001a21c <Vm::x87Handler(regs*)+0x3b6>
c001a200:	83 ec 0c             	sub    esp,0xc
c001a203:	2d f0 00 00 00       	sub    eax,0xf0
c001a208:	50                   	push   eax
c001a209:	e8 18 fb ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a20e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a215:	89 c6                	mov    esi,eax
c001a217:	89 d7                	mov    edi,edx
c001a219:	eb 25                	jmp    c001a240 <Vm::x87Handler(regs*)+0x3da>
c001a21b:	90                   	nop
c001a21c:	3c f7                	cmp    al,0xf7
c001a21e:	0f 86 00 04 00 00    	jbe    c001a624 <Vm::x87Handler(regs*)+0x7be>
c001a224:	83 ec 0c             	sub    esp,0xc
c001a227:	6a 00                	push   0x0
c001a229:	e8 f8 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a22e:	89 c6                	mov    esi,eax
c001a230:	89 d7                	mov    edi,edx
c001a232:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a236:	2d f8 00 00 00       	sub    eax,0xf8
c001a23b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a23e:	66 90                	xchg   ax,ax
c001a240:	e8 e1 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a245:	57                   	push   edi
c001a246:	56                   	push   esi
c001a247:	52                   	push   edx
c001a248:	50                   	push   eax
c001a249:	e8 a6 fa ff ff       	call   c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a24e:	83 c4 1c             	add    esp,0x1c
c001a251:	52                   	push   edx
c001a252:	50                   	push   eax
c001a253:	6a 00                	push   0x0
c001a255:	e9 6a 02 00 00       	jmp    c001a4c4 <Vm::x87Handler(regs*)+0x65e>
c001a25a:	66 90                	xchg   ax,ax
c001a25c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a260:	8d 50 40             	lea    edx,[eax+0x40]
c001a263:	80 fa 07             	cmp    dl,0x7
c001a266:	77 38                	ja     c001a2a0 <Vm::x87Handler(regs*)+0x43a>
c001a268:	83 ec 0c             	sub    esp,0xc
c001a26b:	2d c0 00 00 00       	sub    eax,0xc0
c001a270:	50                   	push   eax
c001a271:	e8 b0 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a276:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a27d:	89 c6                	mov    esi,eax
c001a27f:	89 d7                	mov    edi,edx
c001a281:	e8 a0 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a286:	57                   	push   edi
c001a287:	56                   	push   esi
c001a288:	52                   	push   edx
c001a289:	50                   	push   eax
c001a28a:	e8 0d fa ff ff       	call   c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a28f:	83 c4 1c             	add    esp,0x1c
c001a292:	52                   	push   edx
c001a293:	50                   	push   eax
c001a294:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a298:	2d c0 00 00 00       	sub    eax,0xc0
c001a29d:	eb 41                	jmp    c001a2e0 <Vm::x87Handler(regs*)+0x47a>
c001a29f:	90                   	nop
c001a2a0:	8d 50 38             	lea    edx,[eax+0x38]
c001a2a3:	80 fa 07             	cmp    dl,0x7
c001a2a6:	77 40                	ja     c001a2e8 <Vm::x87Handler(regs*)+0x482>
c001a2a8:	83 ec 0c             	sub    esp,0xc
c001a2ab:	2d c8 00 00 00       	sub    eax,0xc8
c001a2b0:	50                   	push   eax
c001a2b1:	e8 70 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a2b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2bd:	89 c6                	mov    esi,eax
c001a2bf:	89 d7                	mov    edi,edx
c001a2c1:	e8 60 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a2c6:	57                   	push   edi
c001a2c7:	56                   	push   esi
c001a2c8:	52                   	push   edx
c001a2c9:	50                   	push   eax
c001a2ca:	e8 06 fa ff ff       	call   c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a2cf:	83 c4 1c             	add    esp,0x1c
c001a2d2:	52                   	push   edx
c001a2d3:	50                   	push   eax
c001a2d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2d8:	2d c8 00 00 00       	sub    eax,0xc8
c001a2dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a2e0:	50                   	push   eax
c001a2e1:	e9 42 fc ff ff       	jmp    c0019f28 <Vm::x87Handler(regs*)+0xc2>
c001a2e6:	66 90                	xchg   ax,ax
c001a2e8:	83 c0 18             	add    eax,0x18
c001a2eb:	3c 07                	cmp    al,0x7
c001a2ed:	0f 87 6d 04 00 00    	ja     c001a760 <Vm::x87Handler(regs*)+0x8fa>
c001a2f3:	83 ec 0c             	sub    esp,0xc
c001a2f6:	6a 00                	push   0x0
c001a2f8:	e8 29 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a2fd:	89 c6                	mov    esi,eax
c001a2ff:	89 d7                	mov    edi,edx
c001a301:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a305:	2d e8 00 00 00       	sub    eax,0xe8
c001a30a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a30d:	e8 14 fa ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a312:	57                   	push   edi
c001a313:	56                   	push   esi
c001a314:	52                   	push   edx
c001a315:	50                   	push   eax
c001a316:	e8 ab f9 ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a31b:	83 c4 1c             	add    esp,0x1c
c001a31e:	52                   	push   edx
c001a31f:	50                   	push   eax
c001a320:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a324:	2d e8 00 00 00       	sub    eax,0xe8
c001a329:	eb b5                	jmp    c001a2e0 <Vm::x87Handler(regs*)+0x47a>
c001a32b:	90                   	nop
c001a32c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a330:	8d 50 40             	lea    edx,[eax+0x40]
c001a333:	80 fa 07             	cmp    dl,0x7
c001a336:	77 3c                	ja     c001a374 <Vm::x87Handler(regs*)+0x50e>
c001a338:	83 ec 0c             	sub    esp,0xc
c001a33b:	2d c0 00 00 00       	sub    eax,0xc0
c001a340:	50                   	push   eax
c001a341:	e8 e0 f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a346:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a34d:	89 c6                	mov    esi,eax
c001a34f:	89 d7                	mov    edi,edx
c001a351:	e8 d0 f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a356:	57                   	push   edi
c001a357:	56                   	push   esi
c001a358:	52                   	push   edx
c001a359:	50                   	push   eax
c001a35a:	e8 3d f9 ff ff       	call   c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a35f:	83 c4 1c             	add    esp,0x1c
c001a362:	52                   	push   edx
c001a363:	50                   	push   eax
c001a364:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a368:	2d c0 00 00 00       	sub    eax,0xc0
c001a36d:	e9 b2 01 00 00       	jmp    c001a524 <Vm::x87Handler(regs*)+0x6be>
c001a372:	66 90                	xchg   ax,ax
c001a374:	8d 50 20             	lea    edx,[eax+0x20]
c001a377:	80 fa 07             	cmp    dl,0x7
c001a37a:	77 3c                	ja     c001a3b8 <Vm::x87Handler(regs*)+0x552>
c001a37c:	83 ec 0c             	sub    esp,0xc
c001a37f:	2d e0 00 00 00       	sub    eax,0xe0
c001a384:	50                   	push   eax
c001a385:	e8 9c f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a38a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a391:	89 c6                	mov    esi,eax
c001a393:	89 d7                	mov    edi,edx
c001a395:	e8 8c f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a39a:	57                   	push   edi
c001a39b:	56                   	push   esi
c001a39c:	52                   	push   edx
c001a39d:	50                   	push   eax
c001a39e:	e8 23 f9 ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3a3:	83 c4 1c             	add    esp,0x1c
c001a3a6:	52                   	push   edx
c001a3a7:	50                   	push   eax
c001a3a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3ac:	2d e0 00 00 00       	sub    eax,0xe0
c001a3b1:	e9 6e 01 00 00       	jmp    c001a524 <Vm::x87Handler(regs*)+0x6be>
c001a3b6:	66 90                	xchg   ax,ax
c001a3b8:	8d 50 18             	lea    edx,[eax+0x18]
c001a3bb:	80 fa 07             	cmp    dl,0x7
c001a3be:	77 3c                	ja     c001a3fc <Vm::x87Handler(regs*)+0x596>
c001a3c0:	83 ec 0c             	sub    esp,0xc
c001a3c3:	6a 00                	push   0x0
c001a3c5:	e8 5c f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a3ca:	89 c6                	mov    esi,eax
c001a3cc:	89 d7                	mov    edi,edx
c001a3ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3d2:	2d e8 00 00 00       	sub    eax,0xe8
c001a3d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001a3da:	e8 47 f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a3df:	57                   	push   edi
c001a3e0:	56                   	push   esi
c001a3e1:	52                   	push   edx
c001a3e2:	50                   	push   eax
c001a3e3:	e8 de f8 ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3e8:	83 c4 1c             	add    esp,0x1c
c001a3eb:	52                   	push   edx
c001a3ec:	50                   	push   eax
c001a3ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a3f1:	2d e8 00 00 00       	sub    eax,0xe8
c001a3f6:	e9 29 01 00 00       	jmp    c001a524 <Vm::x87Handler(regs*)+0x6be>
c001a3fb:	90                   	nop
c001a3fc:	8d 50 38             	lea    edx,[eax+0x38]
c001a3ff:	80 fa 07             	cmp    dl,0x7
c001a402:	77 3c                	ja     c001a440 <Vm::x87Handler(regs*)+0x5da>
c001a404:	83 ec 0c             	sub    esp,0xc
c001a407:	2d c8 00 00 00       	sub    eax,0xc8
c001a40c:	50                   	push   eax
c001a40d:	e8 14 f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a412:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a419:	89 c6                	mov    esi,eax
c001a41b:	89 d7                	mov    edi,edx
c001a41d:	e8 04 f9 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a422:	57                   	push   edi
c001a423:	56                   	push   esi
c001a424:	52                   	push   edx
c001a425:	50                   	push   eax
c001a426:	e8 aa f8 ff ff       	call   c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a42b:	83 c4 1c             	add    esp,0x1c
c001a42e:	52                   	push   edx
c001a42f:	50                   	push   eax
c001a430:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a434:	2d c8 00 00 00       	sub    eax,0xc8
c001a439:	e9 82 00 00 00       	jmp    c001a4c0 <Vm::x87Handler(regs*)+0x65a>
c001a43e:	66 90                	xchg   ax,ax
c001a440:	3c f7                	cmp    al,0xf7
c001a442:	76 38                	jbe    c001a47c <Vm::x87Handler(regs*)+0x616>
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	6a 00                	push   0x0
c001a449:	e8 d8 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a44e:	89 c6                	mov    esi,eax
c001a450:	89 d7                	mov    edi,edx
c001a452:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a456:	2d f8 00 00 00       	sub    eax,0xf8
c001a45b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a45e:	e8 c3 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a463:	57                   	push   edi
c001a464:	56                   	push   esi
c001a465:	52                   	push   edx
c001a466:	50                   	push   eax
c001a467:	e8 88 f8 ff ff       	call   c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a46c:	83 c4 1c             	add    esp,0x1c
c001a46f:	52                   	push   edx
c001a470:	50                   	push   eax
c001a471:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a475:	2d f8 00 00 00       	sub    eax,0xf8
c001a47a:	eb 44                	jmp    c001a4c0 <Vm::x87Handler(regs*)+0x65a>
c001a47c:	8d 50 10             	lea    edx,[eax+0x10]
c001a47f:	80 fa 07             	cmp    dl,0x7
c001a482:	0f 87 6c 01 00 00    	ja     c001a5f4 <Vm::x87Handler(regs*)+0x78e>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	2d f0 00 00 00       	sub    eax,0xf0
c001a490:	50                   	push   eax
c001a491:	e8 90 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a49d:	89 c6                	mov    esi,eax
c001a49f:	89 d7                	mov    edi,edx
c001a4a1:	e8 80 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a4a6:	57                   	push   edi
c001a4a7:	56                   	push   esi
c001a4a8:	52                   	push   edx
c001a4a9:	50                   	push   eax
c001a4aa:	e8 45 f8 ff ff       	call   c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4af:	83 c4 1c             	add    esp,0x1c
c001a4b2:	52                   	push   edx
c001a4b3:	50                   	push   eax
c001a4b4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4b8:	2d f0 00 00 00       	sub    eax,0xf0
c001a4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c0:	50                   	push   eax
c001a4c1:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c4:	e8 a0 f8 ff ff       	call   c0019d69 <Vm::fpuSetReg(int, unsigned long long)>
c001a4c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a4cd:	e8 41 f9 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a4d2:	e9 0d fa ff ff       	jmp    c0019ee4 <Vm::x87Handler(regs*)+0x7e>
c001a4d7:	90                   	nop
c001a4d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4dc:	8d 50 30             	lea    edx,[eax+0x30]
c001a4df:	80 fa 07             	cmp    dl,0x7
c001a4e2:	77 20                	ja     c001a504 <Vm::x87Handler(regs*)+0x69e>
c001a4e4:	83 ec 0c             	sub    esp,0xc
c001a4e7:	6a 00                	push   0x0
c001a4e9:	e8 38 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a4ee:	83 c4 0c             	add    esp,0xc
c001a4f1:	52                   	push   edx
c001a4f2:	50                   	push   eax
c001a4f3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4f7:	2d d0 00 00 00       	sub    eax,0xd0
c001a4fc:	e9 df fd ff ff       	jmp    c001a2e0 <Vm::x87Handler(regs*)+0x47a>
c001a501:	8d 76 00             	lea    esi,[esi+0x0]
c001a504:	8d 50 28             	lea    edx,[eax+0x28]
c001a507:	80 fa 07             	cmp    dl,0x7
c001a50a:	77 28                	ja     c001a534 <Vm::x87Handler(regs*)+0x6ce>
c001a50c:	83 ec 0c             	sub    esp,0xc
c001a50f:	6a 00                	push   0x0
c001a511:	e8 10 f8 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a516:	83 c4 0c             	add    esp,0xc
c001a519:	52                   	push   edx
c001a51a:	50                   	push   eax
c001a51b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a51f:	2d d8 00 00 00       	sub    eax,0xd8
c001a524:	50                   	push   eax
c001a525:	e8 3f f8 ff ff       	call   c0019d69 <Vm::fpuSetReg(int, unsigned long long)>
c001a52a:	e8 e4 f8 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a52f:	e9 ac f9 ff ff       	jmp    c0019ee0 <Vm::x87Handler(regs*)+0x7a>
c001a534:	8d 50 20             	lea    edx,[eax+0x20]
c001a537:	80 fa 07             	cmp    dl,0x7
c001a53a:	77 30                	ja     c001a56c <Vm::x87Handler(regs*)+0x706>
c001a53c:	83 ec 0c             	sub    esp,0xc
c001a53f:	2d e0 00 00 00       	sub    eax,0xe0
c001a544:	50                   	push   eax
c001a545:	e8 dc f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a54a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a551:	89 c6                	mov    esi,eax
c001a553:	89 d7                	mov    edi,edx
c001a555:	e8 cc f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a55a:	57                   	push   edi
c001a55b:	56                   	push   esi
c001a55c:	52                   	push   edx
c001a55d:	50                   	push   eax
c001a55e:	e8 e3 f6 ff ff       	call   c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a563:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a567:	e9 78 02 00 00       	jmp    c001a7e4 <Vm::x87Handler(regs*)+0x97e>
c001a56c:	8d 50 18             	lea    edx,[eax+0x18]
c001a56f:	80 fa 07             	cmp    dl,0x7
c001a572:	0f 87 10 fb ff ff    	ja     c001a088 <Vm::x87Handler(regs*)+0x222>
c001a578:	83 ec 0c             	sub    esp,0xc
c001a57b:	2d e8 00 00 00       	sub    eax,0xe8
c001a580:	50                   	push   eax
c001a581:	e8 a0 f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a586:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a58d:	89 c6                	mov    esi,eax
c001a58f:	89 d7                	mov    edi,edx
c001a591:	e8 90 f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a596:	57                   	push   edi
c001a597:	56                   	push   esi
c001a598:	52                   	push   edx
c001a599:	50                   	push   eax
c001a59a:	e8 a7 f6 ff ff       	call   c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a59f:	83 c4 20             	add    esp,0x20
c001a5a2:	e8 6c f8 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a5a7:	eb 6f                	jmp    c001a618 <Vm::x87Handler(regs*)+0x7b2>
c001a5a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a5ac:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a5b0:	0f 85 22 01 00 00    	jne    c001a6d8 <Vm::x87Handler(regs*)+0x872>
c001a5b6:	66 90                	xchg   ax,ax
c001a5b8:	83 ec 0c             	sub    esp,0xc
c001a5bb:	6a 01                	push   0x1
c001a5bd:	e8 64 f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a5c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5c9:	89 c6                	mov    esi,eax
c001a5cb:	89 d7                	mov    edi,edx
c001a5cd:	e8 54 f7 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a5d2:	57                   	push   edi
c001a5d3:	56                   	push   esi
c001a5d4:	52                   	push   edx
c001a5d5:	50                   	push   eax
c001a5d6:	e8 6b f6 ff ff       	call   c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a5db:	83 c4 20             	add    esp,0x20
c001a5de:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a5e2:	e8 2c f8 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a5e7:	e8 27 f8 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a5ec:	e9 f7 f8 ff ff       	jmp    c0019ee8 <Vm::x87Handler(regs*)+0x82>
c001a5f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a5f4:	3c d9                	cmp    al,0xd9
c001a5f6:	0f 85 e8 02 00 00    	jne    c001a8e4 <Vm::x87Handler(regs*)+0xa7e>
c001a5fc:	eb ba                	jmp    c001a5b8 <Vm::x87Handler(regs*)+0x752>
c001a5fe:	66 90                	xchg   ax,ax
c001a600:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a604:	0f 85 2a 03 00 00    	jne    c001a934 <Vm::x87Handler(regs*)+0xace>
c001a60a:	0f b7 05 e0 96 02 c0 	movzx  eax,WORD PTR ds:0xc00296e0
c001a611:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a615:	8d 76 00             	lea    esi,[esi+0x0]
c001a618:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a61c:	e9 c7 f8 ff ff       	jmp    c0019ee8 <Vm::x87Handler(regs*)+0x82>
c001a621:	8d 76 00             	lea    esi,[esi+0x0]
c001a624:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a628:	84 d2                	test   dl,dl
c001a62a:	75 10                	jne    c001a63c <Vm::x87Handler(regs*)+0x7d6>
c001a62c:	83 ec 0c             	sub    esp,0xc
c001a62f:	ff 36                	push   DWORD PTR [esi]
c001a631:	e8 29 f4 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a636:	e9 39 01 00 00       	jmp    c001a774 <Vm::x87Handler(regs*)+0x90e>
c001a63b:	90                   	nop
c001a63c:	80 fa 01             	cmp    dl,0x1
c001a63f:	75 0f                	jne    c001a650 <Vm::x87Handler(regs*)+0x7ea>
c001a641:	83 ec 0c             	sub    esp,0xc
c001a644:	ff 36                	push   DWORD PTR [esi]
c001a646:	e8 14 f4 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a64b:	e9 b4 02 00 00       	jmp    c001a904 <Vm::x87Handler(regs*)+0xa9e>
c001a650:	80 fa 04             	cmp    dl,0x4
c001a653:	75 0f                	jne    c001a664 <Vm::x87Handler(regs*)+0x7fe>
c001a655:	83 ec 0c             	sub    esp,0xc
c001a658:	ff 36                	push   DWORD PTR [esi]
c001a65a:	e8 00 f4 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a65f:	e9 9c 01 00 00       	jmp    c001a800 <Vm::x87Handler(regs*)+0x99a>
c001a664:	80 fa 05             	cmp    dl,0x5
c001a667:	75 1b                	jne    c001a684 <Vm::x87Handler(regs*)+0x81e>
c001a669:	83 ec 0c             	sub    esp,0xc
c001a66c:	6a 00                	push   0x0
c001a66e:	e8 b3 f6 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a673:	89 c7                	mov    edi,eax
c001a675:	89 d5                	mov    ebp,edx
c001a677:	58                   	pop    eax
c001a678:	ff 36                	push   DWORD PTR [esi]
c001a67a:	e8 e0 f3 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a67f:	e9 bc 01 00 00       	jmp    c001a840 <Vm::x87Handler(regs*)+0x9da>
c001a684:	80 fa 06             	cmp    dl,0x6
c001a687:	75 0f                	jne    c001a698 <Vm::x87Handler(regs*)+0x832>
c001a689:	83 ec 0c             	sub    esp,0xc
c001a68c:	ff 36                	push   DWORD PTR [esi]
c001a68e:	e8 cc f3 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a693:	e9 cc 01 00 00       	jmp    c001a864 <Vm::x87Handler(regs*)+0x9fe>
c001a698:	31 c0                	xor    eax,eax
c001a69a:	80 fa 07             	cmp    dl,0x7
c001a69d:	0f 85 d5 02 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a6a3:	83 ec 0c             	sub    esp,0xc
c001a6a6:	6a 00                	push   0x0
c001a6a8:	e8 79 f6 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a6ad:	89 c7                	mov    edi,eax
c001a6af:	89 d5                	mov    ebp,edx
c001a6b1:	58                   	pop    eax
c001a6b2:	ff 36                	push   DWORD PTR [esi]
c001a6b4:	e8 a6 f3 ff ff       	call   c0019a5f <Vm::fpu32ToInternal(unsigned int)>
c001a6b9:	e9 ee 01 00 00       	jmp    c001a8ac <Vm::x87Handler(regs*)+0xa46>
c001a6be:	66 90                	xchg   ax,ax
c001a6c0:	80 fa 03             	cmp    dl,0x3
c001a6c3:	0f 85 f7 01 00 00    	jne    c001a8c0 <Vm::x87Handler(regs*)+0xa5a>
c001a6c9:	e8 45 f7 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a6ce:	51                   	push   ecx
c001a6cf:	51                   	push   ecx
c001a6d0:	e9 03 02 00 00       	jmp    c001a8d8 <Vm::x87Handler(regs*)+0xa72>
c001a6d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a6d8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a6dc:	80 fa 01             	cmp    dl,0x1
c001a6df:	75 0b                	jne    c001a6ec <Vm::x87Handler(regs*)+0x886>
c001a6e1:	57                   	push   edi
c001a6e2:	57                   	push   edi
c001a6e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001a6e5:	e9 0e 02 00 00       	jmp    c001a8f8 <Vm::x87Handler(regs*)+0xa92>
c001a6ea:	66 90                	xchg   ax,ax
c001a6ec:	80 fa 04             	cmp    dl,0x4
c001a6ef:	75 13                	jne    c001a704 <Vm::x87Handler(regs*)+0x89e>
c001a6f1:	31 d2                	xor    edx,edx
c001a6f3:	51                   	push   ecx
c001a6f4:	51                   	push   ecx
c001a6f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001a6f7:	52                   	push   edx
c001a6f8:	50                   	push   eax
c001a6f9:	e8 4a f4 ff ff       	call   c0019b48 <Vm::fpuLongToFloat(long long)>
c001a6fe:	e9 fd 00 00 00       	jmp    c001a800 <Vm::x87Handler(regs*)+0x99a>
c001a703:	90                   	nop
c001a704:	31 c0                	xor    eax,eax
c001a706:	80 fa 07             	cmp    dl,0x7
c001a709:	0f 85 69 02 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a70f:	83 ec 0c             	sub    esp,0xc
c001a712:	6a 00                	push   0x0
c001a714:	e8 0d f6 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a719:	89 c7                	mov    edi,eax
c001a71b:	89 d5                	mov    ebp,edx
c001a71d:	58                   	pop    eax
c001a71e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a720:	5a                   	pop    edx
c001a721:	31 d2                	xor    edx,edx
c001a723:	52                   	push   edx
c001a724:	50                   	push   eax
c001a725:	e8 1e f4 ff ff       	call   c0019b48 <Vm::fpuLongToFloat(long long)>
c001a72a:	e9 7d 01 00 00       	jmp    c001a8ac <Vm::x87Handler(regs*)+0xa46>
c001a72f:	90                   	nop
c001a730:	84 d2                	test   dl,dl
c001a732:	75 10                	jne    c001a744 <Vm::x87Handler(regs*)+0x8de>
c001a734:	31 d2                	xor    edx,edx
c001a736:	55                   	push   ebp
c001a737:	55                   	push   ebp
c001a738:	8b 06                	mov    eax,DWORD PTR [esi]
c001a73a:	52                   	push   edx
c001a73b:	50                   	push   eax
c001a73c:	e9 03 02 00 00       	jmp    c001a944 <Vm::x87Handler(regs*)+0xade>
c001a741:	8d 76 00             	lea    esi,[esi+0x0]
c001a744:	31 c0                	xor    eax,eax
c001a746:	80 fa 02             	cmp    dl,0x2
c001a749:	0f 85 29 02 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a74f:	83 ec 0c             	sub    esp,0xc
c001a752:	6a 00                	push   0x0
c001a754:	e8 cd f5 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a759:	59                   	pop    ecx
c001a75a:	5f                   	pop    edi
c001a75b:	e9 18 f9 ff ff       	jmp    c001a078 <Vm::x87Handler(regs*)+0x212>
c001a760:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a764:	84 d2                	test   dl,dl
c001a766:	75 2c                	jne    c001a794 <Vm::x87Handler(regs*)+0x92e>
c001a768:	50                   	push   eax
c001a769:	50                   	push   eax
c001a76a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a76d:	ff 36                	push   DWORD PTR [esi]
c001a76f:	e8 30 f3 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a774:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a77b:	89 c6                	mov    esi,eax
c001a77d:	89 d7                	mov    edi,edx
c001a77f:	e8 a2 f5 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a784:	57                   	push   edi
c001a785:	56                   	push   esi
c001a786:	52                   	push   edx
c001a787:	50                   	push   eax
c001a788:	e8 0f f5 ff ff       	call   c0019c9c <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a78d:	e9 8e 01 00 00       	jmp    c001a920 <Vm::x87Handler(regs*)+0xaba>
c001a792:	66 90                	xchg   ax,ax
c001a794:	80 fa 01             	cmp    dl,0x1
c001a797:	75 13                	jne    c001a7ac <Vm::x87Handler(regs*)+0x946>
c001a799:	50                   	push   eax
c001a79a:	50                   	push   eax
c001a79b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a79e:	ff 36                	push   DWORD PTR [esi]
c001a7a0:	e8 ff f2 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a7a5:	e9 5a 01 00 00       	jmp    c001a904 <Vm::x87Handler(regs*)+0xa9e>
c001a7aa:	66 90                	xchg   ax,ax
c001a7ac:	80 fa 02             	cmp    dl,0x2
c001a7af:	0f 85 03 f9 ff ff    	jne    c001a0b8 <Vm::x87Handler(regs*)+0x252>
c001a7b5:	55                   	push   ebp
c001a7b6:	55                   	push   ebp
c001a7b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7ba:	ff 36                	push   DWORD PTR [esi]
c001a7bc:	e8 e3 f2 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a7c1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7c8:	89 c6                	mov    esi,eax
c001a7ca:	89 d7                	mov    edi,edx
c001a7cc:	e8 55 f5 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a7d1:	57                   	push   edi
c001a7d2:	56                   	push   esi
c001a7d3:	52                   	push   edx
c001a7d4:	50                   	push   eax
c001a7d5:	e8 6c f4 ff ff       	call   c0019c46 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a7da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7de:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a7e4:	83 c4 20             	add    esp,0x20
c001a7e7:	e9 fc f6 ff ff       	jmp    c0019ee8 <Vm::x87Handler(regs*)+0x82>
c001a7ec:	80 fa 04             	cmp    dl,0x4
c001a7ef:	75 2f                	jne    c001a820 <Vm::x87Handler(regs*)+0x9ba>
c001a7f1:	51                   	push   ecx
c001a7f2:	51                   	push   ecx
c001a7f3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a7f6:	ff 36                	push   DWORD PTR [esi]
c001a7f8:	e8 a7 f2 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a800:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a807:	89 c6                	mov    esi,eax
c001a809:	89 d7                	mov    edi,edx
c001a80b:	e8 16 f5 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a810:	57                   	push   edi
c001a811:	56                   	push   esi
c001a812:	52                   	push   edx
c001a813:	50                   	push   eax
c001a814:	e8 ad f4 ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a819:	e9 02 01 00 00       	jmp    c001a920 <Vm::x87Handler(regs*)+0xaba>
c001a81e:	66 90                	xchg   ax,ax
c001a820:	80 fa 05             	cmp    dl,0x5
c001a823:	75 2b                	jne    c001a850 <Vm::x87Handler(regs*)+0x9ea>
c001a825:	83 ec 0c             	sub    esp,0xc
c001a828:	6a 00                	push   0x0
c001a82a:	e8 f7 f4 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a82f:	89 c7                	mov    edi,eax
c001a831:	89 d5                	mov    ebp,edx
c001a833:	58                   	pop    eax
c001a834:	5a                   	pop    edx
c001a835:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a838:	ff 36                	push   DWORD PTR [esi]
c001a83a:	e8 65 f2 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a83f:	90                   	nop
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	55                   	push   ebp
c001a844:	57                   	push   edi
c001a845:	52                   	push   edx
c001a846:	50                   	push   eax
c001a847:	e8 7a f4 ff ff       	call   c0019cc6 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a84c:	eb 6a                	jmp    c001a8b8 <Vm::x87Handler(regs*)+0xa52>
c001a84e:	66 90                	xchg   ax,ax
c001a850:	80 fa 06             	cmp    dl,0x6
c001a853:	75 2f                	jne    c001a884 <Vm::x87Handler(regs*)+0xa1e>
c001a855:	51                   	push   ecx
c001a856:	51                   	push   ecx
c001a857:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a85a:	ff 36                	push   DWORD PTR [esi]
c001a85c:	e8 43 f2 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a861:	8d 76 00             	lea    esi,[esi+0x0]
c001a864:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a86b:	89 c6                	mov    esi,eax
c001a86d:	89 d7                	mov    edi,edx
c001a86f:	e8 b2 f4 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a874:	57                   	push   edi
c001a875:	56                   	push   esi
c001a876:	52                   	push   edx
c001a877:	50                   	push   eax
c001a878:	e8 77 f4 ff ff       	call   c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a87d:	e9 9e 00 00 00       	jmp    c001a920 <Vm::x87Handler(regs*)+0xaba>
c001a882:	66 90                	xchg   ax,ax
c001a884:	31 c0                	xor    eax,eax
c001a886:	80 fa 07             	cmp    dl,0x7
c001a889:	0f 85 e9 00 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a88f:	83 ec 0c             	sub    esp,0xc
c001a892:	6a 00                	push   0x0
c001a894:	e8 8d f4 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a899:	89 c7                	mov    edi,eax
c001a89b:	89 d5                	mov    ebp,edx
c001a89d:	58                   	pop    eax
c001a89e:	5a                   	pop    edx
c001a89f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a8a2:	ff 36                	push   DWORD PTR [esi]
c001a8a4:	e8 fb f1 ff ff       	call   c0019aa4 <Vm::fpu64ToInternal(unsigned long long)>
c001a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	55                   	push   ebp
c001a8b0:	57                   	push   edi
c001a8b1:	52                   	push   edx
c001a8b2:	50                   	push   eax
c001a8b3:	e8 3c f4 ff ff       	call   c0019cf4 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a8b8:	83 c4 0c             	add    esp,0xc
c001a8bb:	eb 67                	jmp    c001a924 <Vm::x87Handler(regs*)+0xabe>
c001a8bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a8c0:	31 c0                	xor    eax,eax
c001a8c2:	80 fa 02             	cmp    dl,0x2
c001a8c5:	0f 85 ad 00 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a8cb:	83 ec 0c             	sub    esp,0xc
c001a8ce:	6a 00                	push   0x0
c001a8d0:	e8 51 f4 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a8d5:	59                   	pop    ecx
c001a8d6:	5f                   	pop    edi
c001a8d7:	90                   	nop
c001a8d8:	52                   	push   edx
c001a8d9:	50                   	push   eax
c001a8da:	e8 77 f1 ff ff       	call   c0019a56 <Vm::fpuInternalTo64(unsigned long long)>
c001a8df:	e9 84 00 00 00       	jmp    c001a968 <Vm::x87Handler(regs*)+0xb02>
c001a8e4:	31 c0                	xor    eax,eax
c001a8e6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a8eb:	0f 85 87 00 00 00    	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a8f1:	50                   	push   eax
c001a8f2:	50                   	push   eax
c001a8f3:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a8f6:	66 90                	xchg   ax,ax
c001a8f8:	31 d2                	xor    edx,edx
c001a8fa:	52                   	push   edx
c001a8fb:	50                   	push   eax
c001a8fc:	e8 47 f2 ff ff       	call   c0019b48 <Vm::fpuLongToFloat(long long)>
c001a901:	8d 76 00             	lea    esi,[esi+0x0]
c001a904:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a90b:	89 c6                	mov    esi,eax
c001a90d:	89 d7                	mov    edi,edx
c001a90f:	e8 12 f4 ff ff       	call   c0019d26 <Vm::fpuGetReg(int)>
c001a914:	57                   	push   edi
c001a915:	56                   	push   esi
c001a916:	52                   	push   edx
c001a917:	50                   	push   eax
c001a918:	e8 b8 f3 ff ff       	call   c0019cd5 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a91d:	8d 76 00             	lea    esi,[esi+0x0]
c001a920:	83 c4 1c             	add    esp,0x1c
c001a923:	90                   	nop
c001a924:	52                   	push   edx
c001a925:	50                   	push   eax
c001a926:	6a 00                	push   0x0
c001a928:	e8 3c f4 ff ff       	call   c0019d69 <Vm::fpuSetReg(int, unsigned long long)>
c001a92d:	e9 7a f7 ff ff       	jmp    c001a0ac <Vm::x87Handler(regs*)+0x246>
c001a932:	66 90                	xchg   ax,ax
c001a934:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a938:	80 fa 05             	cmp    dl,0x5
c001a93b:	75 13                	jne    c001a950 <Vm::x87Handler(regs*)+0xaea>
c001a93d:	55                   	push   ebp
c001a93e:	55                   	push   ebp
c001a93f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a942:	ff 36                	push   DWORD PTR [esi]
c001a944:	e8 c3 f1 ff ff       	call   c0019b0c <Vm::fpuULongToFloat(unsigned long long)>
c001a949:	e9 52 f7 ff ff       	jmp    c001a0a0 <Vm::x87Handler(regs*)+0x23a>
c001a94e:	66 90                	xchg   ax,ax
c001a950:	31 c0                	xor    eax,eax
c001a952:	80 fa 07             	cmp    dl,0x7
c001a955:	75 21                	jne    c001a978 <Vm::x87Handler(regs*)+0xb12>
c001a957:	e8 b7 f4 ff ff       	call   c0019e13 <Vm::fpuPop()>
c001a95c:	51                   	push   ecx
c001a95d:	51                   	push   ecx
c001a95e:	52                   	push   edx
c001a95f:	50                   	push   eax
c001a960:	e8 48 f1 ff ff       	call   c0019aad <Vm::fpuFloatToLong(unsigned long long)>
c001a965:	8d 76 00             	lea    esi,[esi+0x0]
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	89 06                	mov    DWORD PTR [esi],eax
c001a96d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a970:	e9 7b f7 ff ff       	jmp    c001a0f0 <Vm::x87Handler(regs*)+0x28a>
c001a975:	8d 76 00             	lea    esi,[esi+0x0]
c001a978:	83 c4 1c             	add    esp,0x1c
c001a97b:	5b                   	pop    ebx
c001a97c:	5e                   	pop    esi
c001a97d:	5f                   	pop    edi
c001a97e:	5d                   	pop    ebp
c001a97f:	c3                   	ret    

c001a980 <__static_initialization_and_destruction_0(int, int)>:
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a988:	75 1a                	jne    c001a9a4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a98a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a992:	75 10                	jne    c001a9a4 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a994:	83 ec 0c             	sub    esp,0xc
c001a997:	68 e0 96 02 c0       	push   0xc00296e0
c001a99c:	e8 e7 89 00 00       	call   c0023388 <Vm::_FPUState::_FPUState()>
c001a9a1:	83 c4 10             	add    esp,0x10
c001a9a4:	90                   	nop
c001a9a5:	83 c4 0c             	add    esp,0xc
c001a9a8:	c3                   	ret    
c001a9a9:	8d 76 00             	lea    esi,[esi+0x0]

c001a9ac <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a9ac:	83 ec 0c             	sub    esp,0xc
c001a9af:	83 ec 08             	sub    esp,0x8
c001a9b2:	68 ff ff 00 00       	push   0xffff
c001a9b7:	6a 01                	push   0x1
c001a9b9:	e8 c2 ff ff ff       	call   c001a980 <__static_initialization_and_destruction_0(int, int)>
c001a9be:	83 c4 10             	add    esp,0x10
c001a9c1:	83 c4 0c             	add    esp,0xc
c001a9c4:	c3                   	ret    
c001a9c5:	66 90                	xchg   ax,ax
c001a9c7:	90                   	nop

c001a9c8 <FAT::getName()>:
c001a9c8:	b8 f8 64 02 c0       	mov    eax,0xc00264f8
c001a9cd:	c3                   	ret    
c001a9ce:	66 90                	xchg   ax,ax

c001a9d0 <FAT::tell(void*, unsigned long long*)>:
c001a9d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a9d5:	75 09                	jne    c001a9e0 <FAT::tell(void*, unsigned long long*)+0x10>
c001a9d7:	b8 04 00 00 00       	mov    eax,0x4
c001a9dc:	c3                   	ret    
c001a9dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a9e5:	75 09                	jne    c001a9f0 <FAT::tell(void*, unsigned long long*)+0x20>
c001a9e7:	b8 04 00 00 00       	mov    eax,0x4
c001a9ec:	c3                   	ret    
c001a9ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9f4:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a9f7:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a9fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a9fe:	89 01                	mov    DWORD PTR [ecx],eax
c001aa00:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa03:	b8 00 00 00 00       	mov    eax,0x0
c001aa08:	c3                   	ret    
c001aa09:	90                   	nop
c001aa0a:	66 90                	xchg   ax,ax

c001aa0c <FAT::stat(void*, unsigned long long*)>:
c001aa0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa11:	75 09                	jne    c001aa1c <FAT::stat(void*, unsigned long long*)+0x10>
c001aa13:	b8 04 00 00 00       	mov    eax,0x4
c001aa18:	c3                   	ret    
c001aa19:	8d 76 00             	lea    esi,[esi+0x0]
c001aa1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aa21:	75 09                	jne    c001aa2c <FAT::stat(void*, unsigned long long*)+0x20>
c001aa23:	b8 04 00 00 00       	mov    eax,0x4
c001aa28:	c3                   	ret    
c001aa29:	8d 76 00             	lea    esi,[esi+0x0]
c001aa2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa30:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001aa33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aa36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aa3a:	89 01                	mov    DWORD PTR [ecx],eax
c001aa3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aa3f:	b8 00 00 00 00       	mov    eax,0x0
c001aa44:	c3                   	ret    
c001aa45:	90                   	nop
c001aa46:	66 90                	xchg   ax,ax

c001aa48 <FAT::~FAT()>:
c001aa48:	83 ec 0c             	sub    esp,0xc
c001aa4b:	ba 44 65 02 c0       	mov    edx,0xc0026544
c001aa50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa54:	89 10                	mov    DWORD PTR [eax],edx
c001aa56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa5a:	83 ec 0c             	sub    esp,0xc
c001aa5d:	50                   	push   eax
c001aa5e:	e8 8b 25 ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c001aa63:	83 c4 10             	add    esp,0x10
c001aa66:	90                   	nop
c001aa67:	83 c4 0c             	add    esp,0xc
c001aa6a:	c3                   	ret    
c001aa6b:	90                   	nop

c001aa6c <FAT::~FAT()>:
c001aa6c:	83 ec 0c             	sub    esp,0xc
c001aa6f:	83 ec 0c             	sub    esp,0xc
c001aa72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa76:	e8 cd ff ff ff       	call   c001aa48 <FAT::~FAT()>
c001aa7b:	83 c4 10             	add    esp,0x10
c001aa7e:	83 ec 08             	sub    esp,0x8
c001aa81:	6a 08                	push   0x8
c001aa83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa87:	e8 46 21 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	83 c4 0c             	add    esp,0xc
c001aa92:	c3                   	ret    
c001aa93:	90                   	nop

c001aa94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001aa94:	83 ec 1c             	sub    esp,0x1c
c001aa97:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001aa9e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001aaa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaa7:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001aaae:	83 f8 ff             	cmp    eax,0xffffffff
c001aab1:	75 35                	jne    c001aae8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001aab3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aab7:	88 c2                	mov    dl,al
c001aab9:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001aabe:	01 d0                	add    eax,edx
c001aac0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aac4:	8b 15 40 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029740
c001aaca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aace:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001aad5:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001aada:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aade:	89 14 85 e0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6820],edx
c001aae5:	eb 19                	jmp    c001ab00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001aae7:	90                   	nop
c001aae8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aaec:	88 c2                	mov    dl,al
c001aaee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaf2:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001aaf9:	01 d0                	add    eax,edx
c001aafb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001aaff:	90                   	nop
c001ab00:	83 ec 04             	sub    esp,0x4
c001ab03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab0b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ab0f:	50                   	push   eax
c001ab10:	e8 1d c1 fe ff       	call   c0006c32 <f_getlabel>
c001ab15:	83 c4 10             	add    esp,0x10
c001ab18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ab21:	75 09                	jne    c001ab2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ab23:	b8 00 00 00 00       	mov    eax,0x0
c001ab28:	eb 0a                	jmp    c001ab34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ab2a:	66 90                	xchg   ax,ax
c001ab2c:	b8 01 00 00 00       	mov    eax,0x1
c001ab31:	8d 76 00             	lea    esi,[esi+0x0]
c001ab34:	83 c4 1c             	add    esp,0x1c
c001ab37:	c3                   	ret    

c001ab38 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ab38:	57                   	push   edi
c001ab39:	83 ec 58             	sub    esp,0x58
c001ab3c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ab44:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ab48:	b9 0f 00 00 00       	mov    ecx,0xf
c001ab4d:	b8 00 00 00 00       	mov    eax,0x0
c001ab52:	fc                   	cld    
c001ab53:	89 d7                	mov    edi,edx
c001ab55:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ab57:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab5b:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001ab62:	83 f8 ff             	cmp    eax,0xffffffff
c001ab65:	75 35                	jne    c001ab9c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001ab67:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ab6b:	88 c2                	mov    dl,al
c001ab6d:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ab72:	01 d0                	add    eax,edx
c001ab74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab78:	8b 15 40 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029740
c001ab7e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab82:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001ab89:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ab8e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ab92:	89 14 85 e0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6820],edx
c001ab99:	eb 19                	jmp    c001abb4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001ab9b:	90                   	nop
c001ab9c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aba0:	88 c2                	mov    dl,al
c001aba2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aba6:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001abad:	01 d0                	add    eax,edx
c001abaf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001abb3:	90                   	nop
c001abb4:	83 ec 08             	sub    esp,0x8
c001abb7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001abbb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abbf:	50                   	push   eax
c001abc0:	e8 bb 5c fe ff       	call   c0000880 <strcat>
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	83 ec 0c             	sub    esp,0xc
c001abcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abcf:	50                   	push   eax
c001abd0:	e8 4b c2 fe ff       	call   c0006e20 <f_setlabel>
c001abd5:	83 c4 10             	add    esp,0x10
c001abd8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001abdc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001abe1:	75 09                	jne    c001abec <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001abe3:	b8 00 00 00 00       	mov    eax,0x0
c001abe8:	eb 0a                	jmp    c001abf4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001abea:	66 90                	xchg   ax,ax
c001abec:	b8 01 00 00 00       	mov    eax,0x1
c001abf1:	8d 76 00             	lea    esi,[esi+0x0]
c001abf4:	83 c4 58             	add    esp,0x58
c001abf7:	5f                   	pop    edi
c001abf8:	c3                   	ret    
c001abf9:	90                   	nop
c001abfa:	66 90                	xchg   ax,ax

c001abfc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001abfc:	83 ec 2c             	sub    esp,0x2c
c001abff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ac07:	83 ec 08             	sub    esp,0x8
c001ac0a:	68 1c 65 02 c0       	push   0xc002651c
c001ac0f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac13:	e8 b4 5b fe ff       	call   c00007cc <strcmp>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	85 c0                	test   eax,eax
c001ac1d:	0f 94 c0             	sete   al
c001ac20:	84 c0                	test   al,al
c001ac22:	74 10                	je     c001ac34 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ac24:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ac2c:	e9 b3 00 00 00       	jmp    c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac31:	8d 76 00             	lea    esi,[esi+0x0]
c001ac34:	83 ec 08             	sub    esp,0x8
c001ac37:	68 0e 65 02 c0       	push   0xc002650e
c001ac3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac40:	e8 87 5b fe ff       	call   c00007cc <strcmp>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	85 c0                	test   eax,eax
c001ac4a:	0f 94 c0             	sete   al
c001ac4d:	84 c0                	test   al,al
c001ac4f:	74 0f                	je     c001ac60 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001ac51:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ac59:	e9 86 00 00 00       	jmp    c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac5e:	66 90                	xchg   ax,ax
c001ac60:	83 ec 08             	sub    esp,0x8
c001ac63:	68 14 65 02 c0       	push   0xc0026514
c001ac68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac6c:	e8 5b 5b fe ff       	call   c00007cc <strcmp>
c001ac71:	83 c4 10             	add    esp,0x10
c001ac74:	85 c0                	test   eax,eax
c001ac76:	0f 94 c0             	sete   al
c001ac79:	84 c0                	test   al,al
c001ac7b:	74 0b                	je     c001ac88 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001ac7d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ac85:	eb 5d                	jmp    c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001ac87:	90                   	nop
c001ac88:	83 ec 08             	sub    esp,0x8
c001ac8b:	68 ec 3a 02 c0       	push   0xc0023aec
c001ac90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ac94:	e8 33 5b fe ff       	call   c00007cc <strcmp>
c001ac99:	83 c4 10             	add    esp,0x10
c001ac9c:	85 c0                	test   eax,eax
c001ac9e:	0f 94 c0             	sete   al
c001aca1:	84 c0                	test   al,al
c001aca3:	74 0b                	je     c001acb0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001aca5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001acad:	eb 35                	jmp    c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001acaf:	90                   	nop
c001acb0:	83 ec 08             	sub    esp,0x8
c001acb3:	68 1a 65 02 c0       	push   0xc002651a
c001acb8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001acbc:	e8 0b 5b fe ff       	call   c00007cc <strcmp>
c001acc1:	83 c4 10             	add    esp,0x10
c001acc4:	85 c0                	test   eax,eax
c001acc6:	0f 94 c0             	sete   al
c001acc9:	84 c0                	test   al,al
c001accb:	74 0b                	je     c001acd8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001accd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001acd5:	eb 0d                	jmp    c001ace4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001acd7:	90                   	nop
c001acd8:	b8 08 00 00 00       	mov    eax,0x8
c001acdd:	e9 ea 00 00 00       	jmp    c001adcc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ace2:	66 90                	xchg   ax,ax
c001ace4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001aceb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001acf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001acf4:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001acfb:	83 f8 ff             	cmp    eax,0xffffffff
c001acfe:	75 34                	jne    c001ad34 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001ad00:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ad04:	88 c2                	mov    dl,al
c001ad06:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ad0b:	01 d0                	add    eax,edx
c001ad0d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ad11:	8b 15 40 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029740
c001ad17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad1b:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001ad22:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ad27:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad2b:	89 14 85 e0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6820],edx
c001ad32:	eb 18                	jmp    c001ad4c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001ad34:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ad38:	88 c2                	mov    dl,al
c001ad3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad3e:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001ad45:	01 d0                	add    eax,edx
c001ad47:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ad4b:	90                   	nop
c001ad4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad50:	88 04 24             	mov    BYTE PTR [esp],al
c001ad53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ad57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad5b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad63:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001ad68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	68 00 20 00 00       	push   0x2000
c001ad78:	e8 46 ec fe ff       	call   c00099c3 <malloc>
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ad84:	68 00 20 00 00       	push   0x2000
c001ad89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ad91:	50                   	push   eax
c001ad92:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001ad96:	50                   	push   eax
c001ad97:	e8 05 c7 fe ff       	call   c00074a1 <f_mkfs>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ada3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ada8:	75 0a                	jne    c001adb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001adaa:	b8 00 00 00 00       	mov    eax,0x0
c001adaf:	eb 1b                	jmp    c001adcc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001adb1:	8d 76 00             	lea    esi,[esi+0x0]
c001adb4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001adb9:	75 09                	jne    c001adc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001adbb:	b8 09 00 00 00       	mov    eax,0x9
c001adc0:	eb 0a                	jmp    c001adcc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001adc2:	66 90                	xchg   ax,ax
c001adc4:	b8 01 00 00 00       	mov    eax,0x1
c001adc9:	8d 76 00             	lea    esi,[esi+0x0]
c001adcc:	83 c4 2c             	add    esp,0x2c
c001adcf:	c3                   	ret    

c001add0 <FAT::tryMount(LogicalDisk*, int)>:
c001add0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001add6:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001addb:	83 f8 14             	cmp    eax,0x14
c001adde:	75 18                	jne    c001adf8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ade0:	83 ec 0c             	sub    esp,0xc
c001ade3:	68 20 65 02 c0       	push   0xc0026520
c001ade8:	e8 32 9a ff ff       	call   c001481f <Krnl::panic(char const*)>
c001aded:	83 c4 10             	add    esp,0x10
c001adf0:	b0 00                	mov    al,0x0
c001adf2:	e9 e9 01 00 00       	jmp    c001afe0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001adf7:	90                   	nop
c001adf8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001adff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ae05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ae0b:	3d 00 02 00 00       	cmp    eax,0x200
c001ae10:	74 0a                	je     c001ae1c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ae12:	b0 00                	mov    al,0x0
c001ae14:	e9 c7 01 00 00       	jmp    c001afe0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae19:	8d 76 00             	lea    esi,[esi+0x0]
c001ae1c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ae24:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ae2b:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001ae32:	83 f8 ff             	cmp    eax,0xffffffff
c001ae35:	74 09                	je     c001ae40 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ae37:	b0 01                	mov    al,0x1
c001ae39:	e9 a2 01 00 00       	jmp    c001afe0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ae3e:	66 90                	xchg   ax,ax
c001ae40:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001ae4a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001ae52:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001ae59:	88 c2                	mov    dl,al
c001ae5b:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ae60:	01 d0                	add    eax,edx
c001ae62:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001ae69:	8b 15 40 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029740
c001ae6f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ae76:	89 14 85 60 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68a0],edx
c001ae7d:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001ae82:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001ae89:	89 14 85 e0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6820],edx
c001ae90:	83 ec 0c             	sub    esp,0xc
c001ae93:	68 54 02 00 00       	push   0x254
c001ae98:	e8 26 eb fe ff       	call   c00099c3 <malloc>
c001ae9d:	83 c4 10             	add    esp,0x10
c001aea0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aea7:	83 ec 04             	sub    esp,0x4
c001aeaa:	6a 00                	push   0x0
c001aeac:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aeb3:	50                   	push   eax
c001aeb4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aebb:	e8 69 9f fe ff       	call   c0004e29 <f_mount>
c001aec0:	83 c4 10             	add    esp,0x10
c001aec3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aeca:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001aed2:	74 1c                	je     c001aef0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aed4:	83 ec 0c             	sub    esp,0xc
c001aed7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aede:	e8 00 eb fe ff       	call   c00099e3 <rfree>
c001aee3:	83 c4 10             	add    esp,0x10
c001aee6:	b0 00                	mov    al,0x0
c001aee8:	e9 f3 00 00 00       	jmp    c001afe0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aeed:	8d 76 00             	lea    esi,[esi+0x0]
c001aef0:	83 ec 04             	sub    esp,0x4
c001aef3:	68 00 01 00 00       	push   0x100
c001aef8:	6a 00                	push   0x0
c001aefa:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af01:	50                   	push   eax
c001af02:	e8 7d 57 fe ff       	call   c0000684 <memset>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	83 ec 08             	sub    esp,0x8
c001af0d:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001af14:	50                   	push   eax
c001af15:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af1c:	50                   	push   eax
c001af1d:	e8 5e 59 fe ff       	call   c0000880 <strcat>
c001af22:	83 c4 10             	add    esp,0x10
c001af25:	83 ec 08             	sub    esp,0x8
c001af28:	68 2e 65 02 c0       	push   0xc002652e
c001af2d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001af34:	50                   	push   eax
c001af35:	e8 46 59 fe ff       	call   c0000880 <strcat>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	83 ec 04             	sub    esp,0x4
c001af40:	6a 01                	push   0x1
c001af42:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001af49:	50                   	push   eax
c001af4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af4e:	50                   	push   eax
c001af4f:	e8 37 9f fe ff       	call   c0004e8b <f_open>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001af5e:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001af65:	85 c0                	test   eax,eax
c001af67:	74 0b                	je     c001af74 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001af69:	78 31                	js     c001af9c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001af6b:	83 e8 04             	sub    eax,0x4
c001af6e:	83 f8 01             	cmp    eax,0x1
c001af71:	77 29                	ja     c001af9c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001af73:	90                   	nop
c001af74:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001af7c:	83 ec 0c             	sub    esp,0xc
c001af7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001af83:	50                   	push   eax
c001af84:	e8 54 aa fe ff       	call   c00059dd <f_close>
c001af89:	83 c4 10             	add    esp,0x10
c001af8c:	90                   	nop
c001af8d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001af95:	74 41                	je     c001afd8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001af97:	eb 33                	jmp    c001afcc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001afa6:	e8 38 ea fe ff       	call   c00099e3 <rfree>
c001afab:	83 c4 10             	add    esp,0x10
c001afae:	83 ec 04             	sub    esp,0x4
c001afb1:	6a 00                	push   0x0
c001afb3:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001afba:	50                   	push   eax
c001afbb:	6a 00                	push   0x0
c001afbd:	e8 67 9e fe ff       	call   c0004e29 <f_mount>
c001afc2:	83 c4 10             	add    esp,0x10
c001afc5:	b0 00                	mov    al,0x0
c001afc7:	eb 17                	jmp    c001afe0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001afc9:	8d 76 00             	lea    esi,[esi+0x0]
c001afcc:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001afd1:	40                   	inc    eax
c001afd2:	a3 40 97 02 c0       	mov    ds:0xc0029740,eax
c001afd7:	90                   	nop
c001afd8:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001afdf:	90                   	nop
c001afe0:	81 c4 6c 03 00 00    	add    esp,0x36c
c001afe6:	c3                   	ret    
c001afe7:	90                   	nop

c001afe8 <FAT::allocateSwapfile(char const*, int)>:
c001afe8:	55                   	push   ebp
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001aff2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001affd:	83 ec 0c             	sub    esp,0xc
c001b000:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b007:	e8 b7 e9 fe ff       	call   c00099c3 <malloc>
c001b00c:	83 c4 10             	add    esp,0x10
c001b00f:	89 c7                	mov    edi,eax
c001b011:	a1 70 96 02 c0       	mov    eax,ds:0xc0029670
c001b016:	83 ec 04             	sub    esp,0x4
c001b019:	50                   	push   eax
c001b01a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b021:	57                   	push   edi
c001b022:	e8 f7 21 ff ff       	call   c000d21e <File::File(char const*, Process*)>
c001b027:	83 c4 10             	add    esp,0x10
c001b02a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b031:	83 ec 04             	sub    esp,0x4
c001b034:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b038:	50                   	push   eax
c001b039:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b03d:	50                   	push   eax
c001b03e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b045:	e8 e4 24 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b054:	c1 e0 14             	shl    eax,0x14
c001b057:	89 c7                	mov    edi,eax
c001b059:	89 c5                	mov    ebp,eax
c001b05b:	c1 fd 1f             	sar    ebp,0x1f
c001b05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b062:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b066:	89 f9                	mov    ecx,edi
c001b068:	31 c1                	xor    ecx,eax
c001b06a:	89 cb                	mov    ebx,ecx
c001b06c:	89 e9                	mov    ecx,ebp
c001b06e:	31 d1                	xor    ecx,edx
c001b070:	89 ce                	mov    esi,ecx
c001b072:	89 f0                	mov    eax,esi
c001b074:	09 d8                	or     eax,ebx
c001b076:	0f 84 98 00 00 00    	je     c001b114 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b07c:	83 ec 0c             	sub    esp,0xc
c001b07f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b086:	e8 6f 23 ff ff       	call   c000d3fa <File::unlink()>
c001b08b:	83 c4 10             	add    esp,0x10
c001b08e:	83 ec 08             	sub    esp,0x8
c001b091:	6a 12                	push   0x12
c001b093:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b09a:	e8 e3 21 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c001b09f:	83 c4 10             	add    esp,0x10
c001b0a2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b0a9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b0af:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b0b6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b0bd:	c1 e0 14             	shl    eax,0x14
c001b0c0:	99                   	cdq    
c001b0c1:	6a 01                	push   0x1
c001b0c3:	52                   	push   edx
c001b0c4:	50                   	push   eax
c001b0c5:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b0cc:	e8 bc bf fe ff       	call   c000708d <f_expand>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b0db:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0dd:	83 c0 10             	add    eax,0x10
c001b0e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0e2:	83 ec 0c             	sub    esp,0xc
c001b0e5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0e9:	52                   	push   edx
c001b0ea:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b0ee:	52                   	push   edx
c001b0ef:	6a 00                	push   0x0
c001b0f1:	68 00 04 00 00       	push   0x400
c001b0f6:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b0fd:	ff d0                	call   eax
c001b0ff:	83 c4 20             	add    esp,0x20
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b10c:	e8 cf 21 ff ff       	call   c000d2e0 <File::close()>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	83 ec 08             	sub    esp,0x8
c001b117:	6a 01                	push   0x1
c001b119:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b120:	e8 5d 21 ff ff       	call   c000d282 <File::open(FileOpenMode)>
c001b125:	83 c4 10             	add    esp,0x10
c001b128:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b12f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b131:	83 c0 0c             	add    eax,0xc
c001b134:	8b 00                	mov    eax,DWORD PTR [eax]
c001b136:	83 ec 0c             	sub    esp,0xc
c001b139:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b13d:	52                   	push   edx
c001b13e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b142:	52                   	push   edx
c001b143:	6a 00                	push   0x0
c001b145:	6a 04                	push   0x4
c001b147:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b14e:	ff d0                	call   eax
c001b150:	83 c4 20             	add    esp,0x20
c001b153:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b15a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b160:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b167:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b16e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b171:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b174:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b17b:	83 ec 0c             	sub    esp,0xc
c001b17e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b185:	e8 56 21 ff ff       	call   c000d2e0 <File::close()>
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b194:	ba 00 00 00 00       	mov    edx,0x0
c001b199:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b19f:	5b                   	pop    ebx
c001b1a0:	5e                   	pop    esi
c001b1a1:	5f                   	pop    edi
c001b1a2:	5d                   	pop    ebp
c001b1a3:	c3                   	ret    

c001b1a4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b1a4:	57                   	push   edi
c001b1a5:	56                   	push   esi
c001b1a6:	53                   	push   ebx
c001b1a7:	81 ec 50 02 00 00    	sub    esp,0x250
c001b1ad:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b1b5:	74 0d                	je     c001b1c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b1b7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b1bf:	75 0f                	jne    c001b1d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b1c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b1c4:	b8 04 00 00 00       	mov    eax,0x4
c001b1c9:	e9 36 01 00 00       	jmp    c001b304 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b1ce:	66 90                	xchg   ax,ax
c001b1d0:	83 ec 08             	sub    esp,0x8
c001b1d3:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b1da:	50                   	push   eax
c001b1db:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b1e2:	e8 00 ae fe ff       	call   c0005fe7 <f_readdir>
c001b1e7:	83 c4 10             	add    esp,0x10
c001b1ea:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b1f1:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b1f8:	83 ec 0c             	sub    esp,0xc
c001b1fb:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b202:	83 c0 1a             	add    eax,0x1a
c001b205:	50                   	push   eax
c001b206:	e8 95 54 fe ff       	call   c00006a0 <strlen>
c001b20b:	83 c4 10             	add    esp,0x10
c001b20e:	ba 00 00 00 00       	mov    edx,0x0
c001b213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b217:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b21b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b222:	0f b6 c0             	movzx  eax,al
c001b225:	83 e0 10             	and    eax,0x10
c001b228:	74 0a                	je     c001b234 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b22a:	b8 02 00 00 00       	mov    eax,0x2
c001b22f:	eb 0b                	jmp    c001b23c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b231:	8d 76 00             	lea    esi,[esi+0x0]
c001b234:	b8 01 00 00 00       	mov    eax,0x1
c001b239:	8d 76 00             	lea    esi,[esi+0x0]
c001b23c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b240:	83 ec 08             	sub    esp,0x8
c001b243:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b24a:	83 c0 1a             	add    eax,0x1a
c001b24d:	50                   	push   eax
c001b24e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b252:	83 c0 10             	add    eax,0x10
c001b255:	50                   	push   eax
c001b256:	e8 e5 54 fe ff       	call   c0000740 <strcpy>
c001b25b:	83 c4 10             	add    esp,0x10
c001b25e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b265:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b26c:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b270:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b277:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b27e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b285:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b28c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b293:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b29a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b2a1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b2a8:	89 c6                	mov    esi,eax
c001b2aa:	89 d7                	mov    edi,edx
c001b2ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2ae:	89 c8                	mov    eax,ecx
c001b2b0:	89 fa                	mov    edx,edi
c001b2b2:	89 f3                	mov    ebx,esi
c001b2b4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b2bb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b2c2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b2c9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b2d0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b2d6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b2dd:	84 c0                	test   al,al
c001b2df:	75 07                	jne    c001b2e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b2e1:	b8 07 00 00 00       	mov    eax,0x7
c001b2e6:	eb 1c                	jmp    c001b304 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b2e8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b2ef:	85 c0                	test   eax,eax
c001b2f1:	75 09                	jne    c001b2fc <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b2f3:	b8 00 00 00 00       	mov    eax,0x0
c001b2f8:	eb 0a                	jmp    c001b304 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b2fa:	66 90                	xchg   ax,ax
c001b2fc:	b8 01 00 00 00       	mov    eax,0x1
c001b301:	8d 76 00             	lea    esi,[esi+0x0]
c001b304:	81 c4 50 02 00 00    	add    esp,0x250
c001b30a:	5b                   	pop    ebx
c001b30b:	5e                   	pop    esi
c001b30c:	5f                   	pop    edi
c001b30d:	c3                   	ret    
c001b30e:	66 90                	xchg   ax,ax

c001b310 <FAT::read(void*, unsigned long, void*, int*)>:
c001b310:	83 ec 1c             	sub    esp,0x1c
c001b313:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b318:	74 0a                	je     c001b324 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b31a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b31f:	75 0b                	jne    c001b32c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b321:	8d 76 00             	lea    esi,[esi+0x0]
c001b324:	b8 04 00 00 00       	mov    eax,0x4
c001b329:	eb 41                	jmp    c001b36c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b32b:	90                   	nop
c001b32c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b330:	50                   	push   eax
c001b331:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b335:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b339:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b33d:	e8 85 9f fe ff       	call   c00052c7 <f_read>
c001b342:	83 c4 10             	add    esp,0x10
c001b345:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b349:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b34d:	89 c2                	mov    edx,eax
c001b34f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b353:	89 10                	mov    DWORD PTR [eax],edx
c001b355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b359:	85 c0                	test   eax,eax
c001b35b:	75 07                	jne    c001b364 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b35d:	b8 00 00 00 00       	mov    eax,0x0
c001b362:	eb 08                	jmp    c001b36c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b364:	b8 01 00 00 00       	mov    eax,0x1
c001b369:	8d 76 00             	lea    esi,[esi+0x0]
c001b36c:	83 c4 1c             	add    esp,0x1c
c001b36f:	c3                   	ret    

c001b370 <FAT::write(void*, unsigned long, void*, int*)>:
c001b370:	83 ec 1c             	sub    esp,0x1c
c001b373:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b378:	74 0a                	je     c001b384 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b37a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b37f:	75 0b                	jne    c001b38c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b381:	8d 76 00             	lea    esi,[esi+0x0]
c001b384:	b8 04 00 00 00       	mov    eax,0x4
c001b389:	eb 41                	jmp    c001b3cc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b38b:	90                   	nop
c001b38c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b390:	50                   	push   eax
c001b391:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b395:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b399:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b39d:	e8 a5 a1 fe ff       	call   c0005547 <f_write>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3ad:	89 c2                	mov    edx,eax
c001b3af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b3b3:	89 10                	mov    DWORD PTR [eax],edx
c001b3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b3b9:	85 c0                	test   eax,eax
c001b3bb:	75 07                	jne    c001b3c4 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b3bd:	b8 00 00 00 00       	mov    eax,0x0
c001b3c2:	eb 08                	jmp    c001b3cc <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b3c4:	b8 01 00 00 00       	mov    eax,0x1
c001b3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3cc:	83 c4 1c             	add    esp,0x1c
c001b3cf:	c3                   	ret    

c001b3d0 <FAT::close(void*)>:
c001b3d0:	83 ec 1c             	sub    esp,0x1c
c001b3d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b3d8:	75 0a                	jne    c001b3e4 <FAT::close(void*)+0x14>
c001b3da:	b8 04 00 00 00       	mov    eax,0x4
c001b3df:	eb 3f                	jmp    c001b420 <FAT::close(void*)+0x50>
c001b3e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e4:	83 ec 0c             	sub    esp,0xc
c001b3e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3eb:	e8 ed a5 fe ff       	call   c00059dd <f_close>
c001b3f0:	83 c4 10             	add    esp,0x10
c001b3f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3f7:	83 ec 0c             	sub    esp,0xc
c001b3fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b3fe:	e8 d0 e5 fe ff       	call   c00099d3 <free>
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b40a:	85 c0                	test   eax,eax
c001b40c:	75 0a                	jne    c001b418 <FAT::close(void*)+0x48>
c001b40e:	b8 00 00 00 00       	mov    eax,0x0
c001b413:	eb 0b                	jmp    c001b420 <FAT::close(void*)+0x50>
c001b415:	8d 76 00             	lea    esi,[esi+0x0]
c001b418:	b8 01 00 00 00       	mov    eax,0x1
c001b41d:	8d 76 00             	lea    esi,[esi+0x0]
c001b420:	83 c4 1c             	add    esp,0x1c
c001b423:	c3                   	ret    

c001b424 <FAT::closeDir(void*)>:
c001b424:	83 ec 1c             	sub    esp,0x1c
c001b427:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b42c:	75 0a                	jne    c001b438 <FAT::closeDir(void*)+0x14>
c001b42e:	b8 04 00 00 00       	mov    eax,0x4
c001b433:	eb 3f                	jmp    c001b474 <FAT::closeDir(void*)+0x50>
c001b435:	8d 76 00             	lea    esi,[esi+0x0]
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b43f:	e8 81 ab fe ff       	call   c0005fc5 <f_closedir>
c001b444:	83 c4 10             	add    esp,0x10
c001b447:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b44b:	83 ec 0c             	sub    esp,0xc
c001b44e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b452:	e8 7c e5 fe ff       	call   c00099d3 <free>
c001b457:	83 c4 10             	add    esp,0x10
c001b45a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b45e:	85 c0                	test   eax,eax
c001b460:	75 0a                	jne    c001b46c <FAT::closeDir(void*)+0x48>
c001b462:	b8 00 00 00 00       	mov    eax,0x0
c001b467:	eb 0b                	jmp    c001b474 <FAT::closeDir(void*)+0x50>
c001b469:	8d 76 00             	lea    esi,[esi+0x0]
c001b46c:	b8 01 00 00 00       	mov    eax,0x1
c001b471:	8d 76 00             	lea    esi,[esi+0x0]
c001b474:	83 c4 1c             	add    esp,0x1c
c001b477:	c3                   	ret    

c001b478 <FAT::seek(void*, unsigned long long)>:
c001b478:	83 ec 2c             	sub    esp,0x2c
c001b47b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b47f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b483:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b487:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b48b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b490:	75 0a                	jne    c001b49c <FAT::seek(void*, unsigned long long)+0x24>
c001b492:	b8 04 00 00 00       	mov    eax,0x4
c001b497:	eb 37                	jmp    c001b4d0 <FAT::seek(void*, unsigned long long)+0x58>
c001b499:	8d 76 00             	lea    esi,[esi+0x0]
c001b49c:	83 ec 04             	sub    esp,0x4
c001b49f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b4a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b4a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b4ab:	e8 5c a5 fe ff       	call   c0005a0c <f_lseek>
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b4b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b4bb:	85 c0                	test   eax,eax
c001b4bd:	75 09                	jne    c001b4c8 <FAT::seek(void*, unsigned long long)+0x50>
c001b4bf:	b8 00 00 00 00       	mov    eax,0x0
c001b4c4:	eb 0a                	jmp    c001b4d0 <FAT::seek(void*, unsigned long long)+0x58>
c001b4c6:	66 90                	xchg   ax,ax
c001b4c8:	b8 01 00 00 00       	mov    eax,0x1
c001b4cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b4d0:	83 c4 2c             	add    esp,0x2c
c001b4d3:	c3                   	ret    

c001b4d4 <fatWrapperReadDisk>:
c001b4d4:	83 ec 1c             	sub    esp,0x1c
c001b4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b4df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b4e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4ee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b4f3:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c001b4fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4fe:	83 ec 0c             	sub    esp,0xc
c001b501:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b505:	52                   	push   edx
c001b506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b50e:	50                   	push   eax
c001b50f:	e8 bc 4e ff ff       	call   c00103d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001b514:	83 c4 20             	add    esp,0x20
c001b517:	83 c4 1c             	add    esp,0x1c
c001b51a:	c3                   	ret    
c001b51b:	90                   	nop

c001b51c <fatWrapperWriteDisk>:
c001b51c:	83 ec 1c             	sub    esp,0x1c
c001b51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b523:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b527:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b52b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b52e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b532:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b536:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b53b:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c001b542:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b54d:	52                   	push   edx
c001b54e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b556:	50                   	push   eax
c001b557:	e8 e0 4e ff ff       	call   c001043c <LogicalDisk::write(unsigned long long, int, void*)>
c001b55c:	83 c4 20             	add    esp,0x20
c001b55f:	83 c4 1c             	add    esp,0x1c
c001b562:	c3                   	ret    
c001b563:	90                   	nop

c001b564 <fatWrapperIoctl>:
c001b564:	53                   	push   ebx
c001b565:	83 ec 28             	sub    esp,0x28
c001b568:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b56c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b570:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b574:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b578:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b57d:	75 31                	jne    c001b5b0 <fatWrapperIoctl+0x4c>
c001b57f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b583:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b587:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b58c:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c001b593:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b599:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b59f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b5a3:	66 89 02             	mov    WORD PTR [edx],ax
c001b5a6:	b8 00 00 00 00       	mov    eax,0x0
c001b5ab:	e9 bc 00 00 00       	jmp    c001b66c <fatWrapperIoctl+0x108>
c001b5b0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b5b5:	75 6d                	jne    c001b624 <fatWrapperIoctl+0xc0>
c001b5b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b5bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b5c4:	8b 04 85 40 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd78c0]
c001b5cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b5d1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b5d7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b5dd:	89 c8                	mov    eax,ecx
c001b5df:	89 da                	mov    edx,ebx
c001b5e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b5e5:	c1 e0 0a             	shl    eax,0xa
c001b5e8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b5ed:	8b 0c 8d 40 87 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd78c0]
c001b5f4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b5fa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b600:	89 cb                	mov    ebx,ecx
c001b602:	c1 fb 1f             	sar    ebx,0x1f
c001b605:	53                   	push   ebx
c001b606:	51                   	push   ecx
c001b607:	52                   	push   edx
c001b608:	50                   	push   eax
c001b609:	e8 d6 73 00 00       	call   c00229e4 <__udivdi3>
c001b60e:	83 c4 10             	add    esp,0x10
c001b611:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b615:	89 01                	mov    DWORD PTR [ecx],eax
c001b617:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b61a:	b8 00 00 00 00       	mov    eax,0x0
c001b61f:	eb 4b                	jmp    c001b66c <fatWrapperIoctl+0x108>
c001b621:	8d 76 00             	lea    esi,[esi+0x0]
c001b624:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b629:	75 09                	jne    c001b634 <fatWrapperIoctl+0xd0>
c001b62b:	b8 00 00 00 00       	mov    eax,0x0
c001b630:	eb 3a                	jmp    c001b66c <fatWrapperIoctl+0x108>
c001b632:	66 90                	xchg   ax,ax
c001b634:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b639:	75 19                	jne    c001b654 <fatWrapperIoctl+0xf0>
c001b63b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b63f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b647:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b64d:	b8 00 00 00 00       	mov    eax,0x0
c001b652:	eb 18                	jmp    c001b66c <fatWrapperIoctl+0x108>
c001b654:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b659:	75 09                	jne    c001b664 <fatWrapperIoctl+0x100>
c001b65b:	b8 00 00 00 00       	mov    eax,0x0
c001b660:	eb 0a                	jmp    c001b66c <fatWrapperIoctl+0x108>
c001b662:	66 90                	xchg   ax,ax
c001b664:	b8 04 00 00 00       	mov    eax,0x4
c001b669:	8d 76 00             	lea    esi,[esi+0x0]
c001b66c:	83 c4 28             	add    esp,0x28
c001b66f:	5b                   	pop    ebx
c001b670:	c3                   	ret    
c001b671:	90                   	nop
c001b672:	66 90                	xchg   ax,ax

c001b674 <FAT::FAT()>:
c001b674:	83 ec 1c             	sub    esp,0x1c
c001b677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b67b:	83 ec 0c             	sub    esp,0xc
c001b67e:	50                   	push   eax
c001b67f:	e8 46 19 ff ff       	call   c000cfca <Filesystem::Filesystem()>
c001b684:	83 c4 10             	add    esp,0x10
c001b687:	ba 44 65 02 c0       	mov    edx,0xc0026544
c001b68c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b690:	89 10                	mov    DWORD PTR [eax],edx
c001b692:	c7 05 40 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029740,0x0
c001b69c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6a4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b6a9:	7f 15                	jg     c001b6c0 <FAT::FAT()+0x4c>
c001b6ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6af:	c7 04 85 60 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd68a0],0xffffffff
c001b6ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b6be:	eb e4                	jmp    c001b6a4 <FAT::FAT()+0x30>
c001b6c0:	90                   	nop
c001b6c1:	83 c4 1c             	add    esp,0x1c
c001b6c4:	c3                   	ret    
c001b6c5:	90                   	nop
c001b6c6:	66 90                	xchg   ax,ax

c001b6c8 <FAT::fixFilepath(char*)>:
c001b6c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6cc:	8a 00                	mov    al,BYTE PTR [eax]
c001b6ce:	3c 40                	cmp    al,0x40
c001b6d0:	7e 2e                	jle    c001b700 <FAT::fixFilepath(char*)+0x38>
c001b6d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6d6:	8a 00                	mov    al,BYTE PTR [eax]
c001b6d8:	83 e8 41             	sub    eax,0x41
c001b6db:	88 c2                	mov    dl,al
c001b6dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e1:	88 10                	mov    BYTE PTR [eax],dl
c001b6e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e7:	8a 00                	mov    al,BYTE PTR [eax]
c001b6e9:	0f be c0             	movsx  eax,al
c001b6ec:	8b 04 85 60 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68a0]
c001b6f3:	83 c0 30             	add    eax,0x30
c001b6f6:	88 c2                	mov    dl,al
c001b6f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6fc:	88 10                	mov    BYTE PTR [eax],dl
c001b6fe:	66 90                	xchg   ax,ax
c001b700:	90                   	nop
c001b701:	c3                   	ret    
c001b702:	66 90                	xchg   ax,ax

c001b704 <FAT::open(char const*, void**, FileOpenMode)>:
c001b704:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b70a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b712:	74 0c                	je     c001b720 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b714:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b71c:	75 0e                	jne    c001b72c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b71e:	66 90                	xchg   ax,ax
c001b720:	b8 04 00 00 00       	mov    eax,0x4
c001b725:	e9 06 01 00 00       	jmp    c001b830 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b72a:	66 90                	xchg   ax,ax
c001b72c:	83 ec 08             	sub    esp,0x8
c001b72f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b736:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b73a:	50                   	push   eax
c001b73b:	e8 00 50 fe ff       	call   c0000740 <strcpy>
c001b740:	83 c4 10             	add    esp,0x10
c001b743:	83 ec 08             	sub    esp,0x8
c001b746:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b74a:	50                   	push   eax
c001b74b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b752:	e8 71 ff ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001b757:	83 c4 10             	add    esp,0x10
c001b75a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b762:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b769:	83 e0 01             	and    eax,0x1
c001b76c:	74 0a                	je     c001b778 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b76e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b776:	66 90                	xchg   ax,ax
c001b778:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b77f:	83 e0 04             	and    eax,0x4
c001b782:	74 10                	je     c001b794 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b784:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b78c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b794:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b79b:	83 e0 02             	and    eax,0x2
c001b79e:	74 08                	je     c001b7a8 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b7a0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b7a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7af:	83 e0 08             	and    eax,0x8
c001b7b2:	74 08                	je     c001b7bc <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b7b4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b7bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b7c3:	83 e0 10             	and    eax,0x10
c001b7c6:	74 08                	je     c001b7d0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b7c8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b7d0:	83 ec 0c             	sub    esp,0xc
c001b7d3:	68 50 02 00 00       	push   0x250
c001b7d8:	e8 e6 e1 fe ff       	call   c00099c3 <malloc>
c001b7dd:	83 c4 10             	add    esp,0x10
c001b7e0:	89 c2                	mov    edx,eax
c001b7e2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b7e9:	89 10                	mov    DWORD PTR [eax],edx
c001b7eb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b7f3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b7fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001b7fc:	83 ec 04             	sub    esp,0x4
c001b7ff:	52                   	push   edx
c001b800:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b804:	52                   	push   edx
c001b805:	50                   	push   eax
c001b806:	e8 80 96 fe ff       	call   c0004e8b <f_open>
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b815:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b81d:	74 09                	je     c001b828 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b81f:	b8 01 00 00 00       	mov    eax,0x1
c001b824:	eb 0a                	jmp    c001b830 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b826:	66 90                	xchg   ax,ax
c001b828:	b8 00 00 00 00       	mov    eax,0x0
c001b82d:	8d 76 00             	lea    esi,[esi+0x0]
c001b830:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b836:	c3                   	ret    
c001b837:	90                   	nop

c001b838 <FAT::openDir(char const*, void**)>:
c001b838:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b83e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b846:	74 0c                	je     c001b854 <FAT::openDir(char const*, void**)+0x1c>
c001b848:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b850:	75 0e                	jne    c001b860 <FAT::openDir(char const*, void**)+0x28>
c001b852:	66 90                	xchg   ax,ax
c001b854:	b8 04 00 00 00       	mov    eax,0x4
c001b859:	e9 82 00 00 00       	jmp    c001b8e0 <FAT::openDir(char const*, void**)+0xa8>
c001b85e:	66 90                	xchg   ax,ax
c001b860:	83 ec 08             	sub    esp,0x8
c001b863:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b86a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b86e:	50                   	push   eax
c001b86f:	e8 cc 4e fe ff       	call   c0000740 <strcpy>
c001b874:	83 c4 10             	add    esp,0x10
c001b877:	83 ec 08             	sub    esp,0x8
c001b87a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b87e:	50                   	push   eax
c001b87f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b886:	e8 3d fe ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	83 ec 0c             	sub    esp,0xc
c001b891:	6a 4c                	push   0x4c
c001b893:	e8 2b e1 fe ff       	call   c00099c3 <malloc>
c001b898:	83 c4 10             	add    esp,0x10
c001b89b:	89 c2                	mov    edx,eax
c001b89d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b8a4:	89 10                	mov    DWORD PTR [eax],edx
c001b8a6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b8ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001b8af:	83 ec 08             	sub    esp,0x8
c001b8b2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b8b6:	52                   	push   edx
c001b8b7:	50                   	push   eax
c001b8b8:	e8 06 a6 fe ff       	call   c0005ec3 <f_opendir>
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b8c7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b8cf:	74 07                	je     c001b8d8 <FAT::openDir(char const*, void**)+0xa0>
c001b8d1:	b8 01 00 00 00       	mov    eax,0x1
c001b8d6:	eb 08                	jmp    c001b8e0 <FAT::openDir(char const*, void**)+0xa8>
c001b8d8:	b8 00 00 00 00       	mov    eax,0x0
c001b8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b8e6:	c3                   	ret    
c001b8e7:	90                   	nop

c001b8e8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b8e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b8ee:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b8f6:	75 0c                	jne    c001b904 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b8f8:	b8 04 00 00 00       	mov    eax,0x4
c001b8fd:	e9 d2 00 00 00       	jmp    c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b902:	66 90                	xchg   ax,ax
c001b904:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b90c:	75 0a                	jne    c001b918 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b90e:	b8 04 00 00 00       	mov    eax,0x4
c001b913:	e9 bc 00 00 00       	jmp    c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b918:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b920:	75 0a                	jne    c001b92c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b922:	b8 04 00 00 00       	mov    eax,0x4
c001b927:	e9 a8 00 00 00       	jmp    c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b92c:	83 ec 08             	sub    esp,0x8
c001b92f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b936:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b93d:	50                   	push   eax
c001b93e:	e8 fd 4d fe ff       	call   c0000740 <strcpy>
c001b943:	83 c4 10             	add    esp,0x10
c001b946:	83 ec 08             	sub    esp,0x8
c001b949:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b950:	50                   	push   eax
c001b951:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b958:	e8 6b fd ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001b95d:	83 c4 10             	add    esp,0x10
c001b960:	83 ec 08             	sub    esp,0x8
c001b963:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b967:	50                   	push   eax
c001b968:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b96f:	50                   	push   eax
c001b970:	e8 0d a7 fe ff       	call   c0006082 <f_stat>
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b97f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b986:	85 c0                	test   eax,eax
c001b988:	74 0a                	je     c001b994 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b98a:	83 f8 04             	cmp    eax,0x4
c001b98d:	74 35                	je     c001b9c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b98f:	eb 3b                	jmp    c001b9cc <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b991:	8d 76 00             	lea    esi,[esi+0x0]
c001b994:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b998:	0f b6 c0             	movzx  eax,al
c001b99b:	83 e0 10             	and    eax,0x10
c001b99e:	0f 95 c2             	setne  dl
c001b9a1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b9a8:	88 10                	mov    BYTE PTR [eax],dl
c001b9aa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b9b1:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b9b8:	89 01                	mov    DWORD PTR [ecx],eax
c001b9ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b9bd:	b8 00 00 00 00       	mov    eax,0x0
c001b9c2:	eb 10                	jmp    c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b9c4:	b8 02 00 00 00       	mov    eax,0x2
c001b9c9:	eb 09                	jmp    c001b9d4 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b9cb:	90                   	nop
c001b9cc:	b8 01 00 00 00       	mov    eax,0x1
c001b9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b9da:	c3                   	ret    
c001b9db:	90                   	nop

c001b9dc <FAT::unlink(char const*)>:
c001b9dc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b9e2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b9ea:	75 08                	jne    c001b9f4 <FAT::unlink(char const*)+0x18>
c001b9ec:	b8 04 00 00 00       	mov    eax,0x4
c001b9f1:	eb 61                	jmp    c001ba54 <FAT::unlink(char const*)+0x78>
c001b9f3:	90                   	nop
c001b9f4:	83 ec 08             	sub    esp,0x8
c001b9f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba02:	50                   	push   eax
c001ba03:	e8 38 4d fe ff       	call   c0000740 <strcpy>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	83 ec 08             	sub    esp,0x8
c001ba0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba12:	50                   	push   eax
c001ba13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba1a:	e8 a9 fc ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001ba1f:	83 c4 10             	add    esp,0x10
c001ba22:	83 ec 0c             	sub    esp,0xc
c001ba25:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba29:	50                   	push   eax
c001ba2a:	e8 a5 a9 fe ff       	call   c00063d4 <f_unlink>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ba39:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ba40:	85 c0                	test   eax,eax
c001ba42:	75 08                	jne    c001ba4c <FAT::unlink(char const*)+0x70>
c001ba44:	b8 00 00 00 00       	mov    eax,0x0
c001ba49:	eb 09                	jmp    c001ba54 <FAT::unlink(char const*)+0x78>
c001ba4b:	90                   	nop
c001ba4c:	b8 01 00 00 00       	mov    eax,0x1
c001ba51:	8d 76 00             	lea    esi,[esi+0x0]
c001ba54:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ba5a:	c3                   	ret    
c001ba5b:	90                   	nop

c001ba5c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ba5c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ba62:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ba69:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ba70:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ba74:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ba78:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ba80:	75 0a                	jne    c001ba8c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ba82:	b8 04 00 00 00       	mov    eax,0x4
c001ba87:	e9 30 01 00 00       	jmp    c001bbbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001ba8c:	83 ec 08             	sub    esp,0x8
c001ba8f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ba96:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ba9a:	50                   	push   eax
c001ba9b:	e8 a0 4c fe ff       	call   c0000740 <strcpy>
c001baa0:	83 c4 10             	add    esp,0x10
c001baa3:	83 ec 08             	sub    esp,0x8
c001baa6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001baaa:	50                   	push   eax
c001baab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bab2:	e8 11 fc ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001bab7:	83 c4 10             	add    esp,0x10
c001baba:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bac2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001baca:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bacf:	83 e0 01             	and    eax,0x1
c001bad2:	74 08                	je     c001badc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bad4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001badc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bae1:	83 e0 02             	and    eax,0x2
c001bae4:	74 0a                	je     c001baf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bae6:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001baee:	66 90                	xchg   ax,ax
c001baf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001baf5:	83 e0 04             	and    eax,0x4
c001baf8:	74 0a                	je     c001bb04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bafa:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bb02:	66 90                	xchg   ax,ax
c001bb04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb09:	83 e0 08             	and    eax,0x8
c001bb0c:	74 0a                	je     c001bb18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bb0e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bb16:	66 90                	xchg   ax,ax
c001bb18:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb1d:	83 e0 01             	and    eax,0x1
c001bb20:	74 0a                	je     c001bb2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bb22:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bb2a:	66 90                	xchg   ax,ax
c001bb2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb31:	83 e0 02             	and    eax,0x2
c001bb34:	74 0a                	je     c001bb40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bb36:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bb3e:	66 90                	xchg   ax,ax
c001bb40:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb45:	83 e0 04             	and    eax,0x4
c001bb48:	74 0a                	je     c001bb54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bb4a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bb52:	66 90                	xchg   ax,ax
c001bb54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bb59:	83 e0 08             	and    eax,0x8
c001bb5c:	74 0a                	je     c001bb68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bb5e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bb6f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bb76:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bb7e:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bb86:	83 ec 04             	sub    esp,0x4
c001bb89:	52                   	push   edx
c001bb8a:	50                   	push   eax
c001bb8b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bb8f:	50                   	push   eax
c001bb90:	e8 e1 ae fe ff       	call   c0006a76 <f_chmod>
c001bb95:	83 c4 10             	add    esp,0x10
c001bb98:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bb9f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bba6:	85 c0                	test   eax,eax
c001bba8:	75 0a                	jne    c001bbb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bbaa:	b8 00 00 00 00       	mov    eax,0x0
c001bbaf:	eb 0b                	jmp    c001bbbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bbb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbb4:	b8 01 00 00 00       	mov    eax,0x1
c001bbb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbbc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001bbc2:	c3                   	ret    
c001bbc3:	90                   	nop

c001bbc4 <FAT::rename(char const*, char const*)>:
c001bbc4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bbca:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bbd2:	74 0c                	je     c001bbe0 <FAT::rename(char const*, char const*)+0x1c>
c001bbd4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bbdc:	75 0e                	jne    c001bbec <FAT::rename(char const*, char const*)+0x28>
c001bbde:	66 90                	xchg   ax,ax
c001bbe0:	b8 04 00 00 00       	mov    eax,0x4
c001bbe5:	e9 9e 00 00 00       	jmp    c001bc88 <FAT::rename(char const*, char const*)+0xc4>
c001bbea:	66 90                	xchg   ax,ax
c001bbec:	83 ec 08             	sub    esp,0x8
c001bbef:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bbf6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bbfd:	50                   	push   eax
c001bbfe:	e8 3d 4b fe ff       	call   c0000740 <strcpy>
c001bc03:	83 c4 10             	add    esp,0x10
c001bc06:	83 ec 08             	sub    esp,0x8
c001bc09:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bc10:	50                   	push   eax
c001bc11:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc18:	e8 ab fa ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	83 ec 08             	sub    esp,0x8
c001bc23:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bc2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc2e:	50                   	push   eax
c001bc2f:	e8 0c 4b fe ff       	call   c0000740 <strcpy>
c001bc34:	83 c4 10             	add    esp,0x10
c001bc37:	83 ec 08             	sub    esp,0x8
c001bc3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc3e:	50                   	push   eax
c001bc3f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bc46:	e8 7d fa ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001bc4b:	83 c4 10             	add    esp,0x10
c001bc4e:	83 ec 08             	sub    esp,0x8
c001bc51:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc55:	50                   	push   eax
c001bc56:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bc5d:	50                   	push   eax
c001bc5e:	e8 20 ab fe ff       	call   c0006783 <f_rename>
c001bc63:	83 c4 10             	add    esp,0x10
c001bc66:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bc6d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bc74:	85 c0                	test   eax,eax
c001bc76:	75 08                	jne    c001bc80 <FAT::rename(char const*, char const*)+0xbc>
c001bc78:	b8 00 00 00 00       	mov    eax,0x0
c001bc7d:	eb 09                	jmp    c001bc88 <FAT::rename(char const*, char const*)+0xc4>
c001bc7f:	90                   	nop
c001bc80:	b8 01 00 00 00       	mov    eax,0x1
c001bc85:	8d 76 00             	lea    esi,[esi+0x0]
c001bc88:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bc8e:	c3                   	ret    
c001bc8f:	90                   	nop

c001bc90 <FAT::mkdir(char const*)>:
c001bc90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc9e:	75 08                	jne    c001bca8 <FAT::mkdir(char const*)+0x18>
c001bca0:	b8 04 00 00 00       	mov    eax,0x4
c001bca5:	eb 61                	jmp    c001bd08 <FAT::mkdir(char const*)+0x78>
c001bca7:	90                   	nop
c001bca8:	83 ec 08             	sub    esp,0x8
c001bcab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcb2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcb6:	50                   	push   eax
c001bcb7:	e8 84 4a fe ff       	call   c0000740 <strcpy>
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	83 ec 08             	sub    esp,0x8
c001bcc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcc6:	50                   	push   eax
c001bcc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcce:	e8 f5 f9 ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	83 ec 0c             	sub    esp,0xc
c001bcd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcdd:	50                   	push   eax
c001bcde:	e8 74 a8 fe ff       	call   c0006557 <f_mkdir>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bced:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bcf4:	85 c0                	test   eax,eax
c001bcf6:	75 08                	jne    c001bd00 <FAT::mkdir(char const*)+0x70>
c001bcf8:	b8 00 00 00 00       	mov    eax,0x0
c001bcfd:	eb 09                	jmp    c001bd08 <FAT::mkdir(char const*)+0x78>
c001bcff:	90                   	nop
c001bd00:	b8 01 00 00 00       	mov    eax,0x1
c001bd05:	8d 76 00             	lea    esi,[esi+0x0]
c001bd08:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd0e:	c3                   	ret    
c001bd0f:	90                   	nop

c001bd10 <FAT::exists(char const*)>:
c001bd10:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bd16:	83 ec 08             	sub    esp,0x8
c001bd19:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bd24:	50                   	push   eax
c001bd25:	e8 16 4a fe ff       	call   c0000740 <strcpy>
c001bd2a:	83 c4 10             	add    esp,0x10
c001bd2d:	83 ec 08             	sub    esp,0x8
c001bd30:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bd34:	50                   	push   eax
c001bd35:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd3c:	e8 87 f9 ff ff       	call   c001b6c8 <FAT::fixFilepath(char*)>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	83 ec 08             	sub    esp,0x8
c001bd47:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bd4e:	50                   	push   eax
c001bd4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bd53:	50                   	push   eax
c001bd54:	e8 29 a3 fe ff       	call   c0006082 <f_stat>
c001bd59:	83 c4 10             	add    esp,0x10
c001bd5c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bd63:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bd6a:	85 c0                	test   eax,eax
c001bd6c:	75 06                	jne    c001bd74 <FAT::exists(char const*)+0x64>
c001bd6e:	b0 01                	mov    al,0x1
c001bd70:	eb 06                	jmp    c001bd78 <FAT::exists(char const*)+0x68>
c001bd72:	66 90                	xchg   ax,ax
c001bd74:	b0 00                	mov    al,0x0
c001bd76:	66 90                	xchg   ax,ax
c001bd78:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd7e:	c3                   	ret    
c001bd7f:	90                   	nop

c001bd80 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bd80:	b8 08 00 00 00       	mov    eax,0x8
c001bd85:	c3                   	ret    

c001bd86 <ISO9660::seek(void*, unsigned long long)>:
c001bd86:	53                   	push   ebx
c001bd87:	b8 04 00 00 00       	mov    eax,0x4
c001bd8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bd90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bd98:	85 d2                	test   edx,edx
c001bd9a:	74 17                	je     c001bdb3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bd9c:	89 c8                	mov    eax,ecx
c001bd9e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001bda1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001bda4:	b8 01 00 00 00       	mov    eax,0x1
c001bda9:	73 08                	jae    c001bdb3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001bdab:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001bdae:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001bdb1:	31 c0                	xor    eax,eax
c001bdb3:	5b                   	pop    ebx
c001bdb4:	c3                   	ret    
c001bdb5:	90                   	nop

c001bdb6 <ISO9660::tell(void*, unsigned long long*)>:
c001bdb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bdba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdbe:	85 d2                	test   edx,edx
c001bdc0:	74 12                	je     c001bdd4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bdc2:	85 c0                	test   eax,eax
c001bdc4:	74 0e                	je     c001bdd4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001bdc6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001bdc9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001bdcc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bdcf:	89 10                	mov    DWORD PTR [eax],edx
c001bdd1:	31 c0                	xor    eax,eax
c001bdd3:	c3                   	ret    
c001bdd4:	b8 04 00 00 00       	mov    eax,0x4
c001bdd9:	c3                   	ret    

c001bdda <ISO9660::getName()>:
c001bdda:	b8 a4 65 02 c0       	mov    eax,0xc00265a4
c001bddf:	c3                   	ret    

c001bde0 <ISO9660::stat(void*, unsigned long long*)>:
c001bde0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001bde4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bde8:	85 d2                	test   edx,edx
c001bdea:	74 12                	je     c001bdfe <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bdec:	85 c0                	test   eax,eax
c001bdee:	74 0e                	je     c001bdfe <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001bdf0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001bdf3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001bdf6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001bdf9:	89 10                	mov    DWORD PTR [eax],edx
c001bdfb:	31 c0                	xor    eax,eax
c001bdfd:	c3                   	ret    
c001bdfe:	b8 04 00 00 00       	mov    eax,0x4
c001be03:	c3                   	ret    

c001be04 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001be04:	b8 01 00 00 00       	mov    eax,0x1
c001be09:	c3                   	ret    

c001be0a <ISO9660::unlink(char const*)>:
c001be0a:	b8 01 00 00 00       	mov    eax,0x1
c001be0f:	c3                   	ret    

c001be10 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001be10:	b8 01 00 00 00       	mov    eax,0x1
c001be15:	c3                   	ret    

c001be16 <ISO9660::rename(char const*, char const*)>:
c001be16:	b8 01 00 00 00       	mov    eax,0x1
c001be1b:	c3                   	ret    

c001be1c <ISO9660::mkdir(char const*)>:
c001be1c:	b8 01 00 00 00       	mov    eax,0x1
c001be21:	c3                   	ret    

c001be22 <ISO9660::close(void*)>:
c001be22:	83 ec 0c             	sub    esp,0xc
c001be25:	b8 04 00 00 00       	mov    eax,0x4
c001be2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be2e:	85 d2                	test   edx,edx
c001be30:	74 0e                	je     c001be40 <ISO9660::close(void*)+0x1e>
c001be32:	83 ec 0c             	sub    esp,0xc
c001be35:	52                   	push   edx
c001be36:	e8 98 db fe ff       	call   c00099d3 <free>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	31 c0                	xor    eax,eax
c001be40:	83 c4 0c             	add    esp,0xc
c001be43:	c3                   	ret    

c001be44 <ISO9660::closeDir(void*)>:
c001be44:	83 ec 0c             	sub    esp,0xc
c001be47:	b8 04 00 00 00       	mov    eax,0x4
c001be4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be50:	85 d2                	test   edx,edx
c001be52:	74 0e                	je     c001be62 <ISO9660::closeDir(void*)+0x1e>
c001be54:	83 ec 0c             	sub    esp,0xc
c001be57:	52                   	push   edx
c001be58:	e8 76 db fe ff       	call   c00099d3 <free>
c001be5d:	83 c4 10             	add    esp,0x10
c001be60:	31 c0                	xor    eax,eax
c001be62:	83 c4 0c             	add    esp,0xc
c001be65:	c3                   	ret    

c001be66 <ISO9660::~ISO9660()>:
c001be66:	83 ec 0c             	sub    esp,0xc
c001be69:	ba c8 65 02 c0       	mov    edx,0xc00265c8
c001be6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be72:	89 10                	mov    DWORD PTR [eax],edx
c001be74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be78:	83 ec 0c             	sub    esp,0xc
c001be7b:	50                   	push   eax
c001be7c:	e8 6d 11 ff ff       	call   c000cfee <Filesystem::~Filesystem()>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	90                   	nop
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	c3                   	ret    
c001be89:	90                   	nop

c001be8a <ISO9660::~ISO9660()>:
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	83 ec 0c             	sub    esp,0xc
c001be90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be94:	e8 cd ff ff ff       	call   c001be66 <ISO9660::~ISO9660()>
c001be99:	83 c4 10             	add    esp,0x10
c001be9c:	83 ec 08             	sub    esp,0x8
c001be9f:	6a 08                	push   0x8
c001bea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bea5:	e8 28 0d ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	83 c4 0c             	add    esp,0xc
c001beb0:	c3                   	ret    

c001beb1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001beb1:	55                   	push   ebp
c001beb2:	31 c9                	xor    ecx,ecx
c001beb4:	57                   	push   edi
c001beb5:	56                   	push   esi
c001beb6:	53                   	push   ebx
c001beb7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bebb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bebf:	89 eb                	mov    ebx,ebp
c001bec1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001bec5:	39 ce                	cmp    esi,ecx
c001bec7:	7e 17                	jle    c001bee0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001bec9:	31 d2                	xor    edx,edx
c001becb:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001becf:	7d 13                	jge    c001bee4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001bed1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bed5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001bed8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001bedb:	75 0d                	jne    c001beea <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001bedd:	42                   	inc    edx
c001bede:	eb eb                	jmp    c001becb <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001bee0:	31 c0                	xor    eax,eax
c001bee2:	eb 0a                	jmp    c001beee <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001bee4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001bee8:	eb 04                	jmp    c001beee <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001beea:	41                   	inc    ecx
c001beeb:	43                   	inc    ebx
c001beec:	eb d7                	jmp    c001bec5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001beee:	5b                   	pop    ebx
c001beef:	5e                   	pop    esi
c001bef0:	5f                   	pop    edi
c001bef1:	5d                   	pop    ebp
c001bef2:	c3                   	ret    

c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001bef3:	57                   	push   edi
c001bef4:	56                   	push   esi
c001bef5:	53                   	push   ebx
c001bef6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001befa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001befe:	39 0d 40 98 02 c0    	cmp    DWORD PTR ds:0xc0029840,ecx
c001bf04:	75 08                	jne    c001bf0e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001bf06:	38 05 b4 7b 02 c0    	cmp    BYTE PTR ds:0xc0027bb4,al
c001bf0c:	74 2b                	je     c001bf39 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001bf0e:	83 ec 0c             	sub    esp,0xc
c001bf11:	a2 b4 7b 02 c0       	mov    ds:0xc0027bb4,al
c001bf16:	68 60 98 02 c0       	push   0xc0029860
c001bf1b:	0f be c0             	movsx  eax,al
c001bf1e:	6a 01                	push   0x1
c001bf20:	89 0d 40 98 02 c0    	mov    DWORD PTR ds:0xc0029840,ecx
c001bf26:	31 db                	xor    ebx,ebx
c001bf28:	53                   	push   ebx
c001bf29:	51                   	push   ecx
c001bf2a:	ff 34 85 3c 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd79c4]
c001bf31:	e8 9a 44 ff ff       	call   c00103d0 <LogicalDisk::read(unsigned long long, int, void*)>
c001bf36:	83 c4 20             	add    esp,0x20
c001bf39:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bf3d:	be 60 98 02 c0       	mov    esi,0xc0029860
c001bf42:	b9 00 08 00 00       	mov    ecx,0x800
c001bf47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf49:	5b                   	pop    ebx
c001bf4a:	5e                   	pop    esi
c001bf4b:	5f                   	pop    edi
c001bf4c:	c3                   	ret    
c001bf4d:	90                   	nop

c001bf4e <ISO9660::tryMount(LogicalDisk*, int)>:
c001bf4e:	81 ec 10 08 00 00    	sub    esp,0x810
c001bf54:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001bf5b:	83 c0 41             	add    eax,0x41
c001bf5e:	0f be c0             	movsx  eax,al
c001bf61:	50                   	push   eax
c001bf62:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf66:	50                   	push   eax
c001bf67:	6a 10                	push   0x10
c001bf69:	e8 85 ff ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf6e:	83 c4 10             	add    esp,0x10
c001bf71:	31 c0                	xor    eax,eax
c001bf73:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001bf78:	75 1d                	jne    c001bf97 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bf7a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bf7f:	75 16                	jne    c001bf97 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bf81:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001bf86:	75 0f                	jne    c001bf97 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bf88:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001bf8d:	75 08                	jne    c001bf97 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bf8f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001bf94:	0f 94 c0             	sete   al
c001bf97:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bf9d:	c3                   	ret    

c001bf9e <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bf9e:	55                   	push   ebp
c001bf9f:	57                   	push   edi
c001bfa0:	56                   	push   esi
c001bfa1:	53                   	push   ebx
c001bfa2:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bfa8:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bfaf:	85 ed                	test   ebp,ebp
c001bfb1:	0f 84 da 01 00 00    	je     c001c191 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bfb7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bfbf:	0f 84 cc 01 00 00    	je     c001c191 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bfc5:	b8 01 00 00 00       	mov    eax,0x1
c001bfca:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bfce:	0f 85 c2 01 00 00    	jne    c001c196 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bfd4:	31 d2                	xor    edx,edx
c001bfd6:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bfdd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bfe0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bfe3:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bfe6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfe9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bfed:	01 c8                	add    eax,ecx
c001bfef:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bff2:	11 da                	adc    edx,ebx
c001bff4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bff8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bffc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c000:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c004:	19 d7                	sbb    edi,edx
c001c006:	72 11                	jb     c001c019 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c008:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c00b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c00f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c013:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c017:	eb 0c                	jmp    c001c025 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c019:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c01d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c021:	29 ce                	sub    esi,ecx
c001c023:	19 df                	sbb    edi,ebx
c001c025:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c028:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c02b:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c02f:	c1 e0 0b             	shl    eax,0xb
c001c032:	01 c8                	add    eax,ecx
c001c034:	11 da                	adc    edx,ebx
c001c036:	89 04 24             	mov    DWORD PTR [esp],eax
c001c039:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c03d:	51                   	push   ecx
c001c03e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c042:	50                   	push   eax
c001c043:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c047:	53                   	push   ebx
c001c048:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c050:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c054:	50                   	push   eax
c001c055:	e8 99 fe ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c05a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c05d:	b8 00 08 00 00       	mov    eax,0x800
c001c062:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c068:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c06c:	29 d0                	sub    eax,edx
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	89 f9                	mov    ecx,edi
c001c073:	39 c6                	cmp    esi,eax
c001c075:	83 d9 00             	sbb    ecx,0x0
c001c078:	7d 1b                	jge    c001c095 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c07a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c07f:	75 12                	jne    c001c093 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c081:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c08e:	e9 fa 00 00 00       	jmp    c001c18d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c093:	89 f0                	mov    eax,esi
c001c095:	01 d3                	add    ebx,edx
c001c097:	31 d2                	xor    edx,edx
c001c099:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c09d:	39 c2                	cmp    edx,eax
c001c09f:	7d 14                	jge    c001c0b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c0a1:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c0a8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c0ac:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c0af:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c0b2:	42                   	inc    edx
c001c0b3:	eb e8                	jmp    c001c09d <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c0b5:	89 c2                	mov    edx,eax
c001c0b7:	85 c0                	test   eax,eax
c001c0b9:	79 02                	jns    c001c0bd <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c0bb:	31 d2                	xor    edx,edx
c001c0bd:	01 c2                	add    edx,eax
c001c0bf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c0c2:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c0c9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c0cd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c0d1:	99                   	cdq    
c001c0d2:	01 c1                	add    ecx,eax
c001c0d4:	11 d3                	adc    ebx,edx
c001c0d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c0da:	29 c6                	sub    esi,eax
c001c0dc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c0e0:	19 d7                	sbb    edi,edx
c001c0e2:	89 34 24             	mov    DWORD PTR [esp],esi
c001c0e5:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c0e9:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c0ee:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c0f1:	b8 00 00 00 00       	mov    eax,0x0
c001c0f6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c0fa:	7d 43                	jge    c001c13f <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c0fc:	52                   	push   edx
c001c0fd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c101:	50                   	push   eax
c001c102:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c106:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c10a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c10e:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c112:	50                   	push   eax
c001c113:	e8 db fd ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c118:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c120:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c125:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c12d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c135:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c13a:	83 c4 10             	add    esp,0x10
c001c13d:	eb aa                	jmp    c001c0e9 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c13f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c143:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c146:	74 2a                	je     c001c172 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c148:	50                   	push   eax
c001c149:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c14d:	50                   	push   eax
c001c14e:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c152:	56                   	push   esi
c001c153:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c157:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c15b:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c15f:	51                   	push   ecx
c001c160:	e8 8e fd ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c165:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c169:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c16d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c16f:	83 c4 10             	add    esp,0x10
c001c172:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c179:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c17d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c181:	89 18                	mov    DWORD PTR [eax],ebx
c001c183:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c187:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c18a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c18d:	31 c0                	xor    eax,eax
c001c18f:	eb 05                	jmp    c001c196 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c191:	b8 04 00 00 00       	mov    eax,0x4
c001c196:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c19c:	5b                   	pop    ebx
c001c19d:	5e                   	pop    esi
c001c19e:	5f                   	pop    edi
c001c19f:	5d                   	pop    ebp
c001c1a0:	c3                   	ret    
c001c1a1:	90                   	nop

c001c1a2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c1a2:	55                   	push   ebp
c001c1a3:	57                   	push   edi
c001c1a4:	56                   	push   esi
c001c1a5:	53                   	push   ebx
c001c1a6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c1ac:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c1b3:	85 ed                	test   ebp,ebp
c001c1b5:	0f 84 51 02 00 00    	je     c001c40c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c1bb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c1c3:	0f 84 43 02 00 00    	je     c001c40c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c1c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c1cc:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c1cf:	75 0a                	jne    c001c1db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c1d1:	b8 07 00 00 00       	mov    eax,0x7
c001c1d6:	e9 36 02 00 00       	jmp    c001c411 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c1db:	50                   	push   eax
c001c1dc:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c1e0:	50                   	push   eax
c001c1e1:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c1e8:	53                   	push   ebx
c001c1e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1ec:	c1 e0 0b             	shl    eax,0xb
c001c1ef:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c1f2:	c1 e8 0b             	shr    eax,0xb
c001c1f5:	50                   	push   eax
c001c1f6:	e8 f8 fc ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c1fb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c1fe:	83 c4 10             	add    esp,0x10
c001c201:	89 c1                	mov    ecx,eax
c001c203:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c206:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c20c:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c20f:	84 db                	test   bl,bl
c001c211:	0f 85 8b 00 00 00    	jne    c001c2a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c217:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c21d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c220:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c226:	29 c6                	sub    esi,eax
c001c228:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c22c:	89 f3                	mov    ebx,esi
c001c22e:	89 f1                	mov    ecx,esi
c001c230:	c1 fb 1f             	sar    ebx,0x1f
c001c233:	01 f0                	add    eax,esi
c001c235:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c238:	11 da                	adc    edx,ebx
c001c23a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c23d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c241:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c244:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c247:	89 d8                	mov    eax,ebx
c001c249:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c24d:	ba 00 00 00 00       	mov    edx,0x0
c001c252:	19 f8                	sbb    eax,edi
c001c254:	b8 00 00 00 00       	mov    eax,0x0
c001c259:	73 08                	jae    c001c263 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c25b:	89 f0                	mov    eax,esi
c001c25d:	89 fa                	mov    edx,edi
c001c25f:	29 c8                	sub    eax,ecx
c001c261:	19 da                	sbb    edx,ebx
c001c263:	89 d7                	mov    edi,edx
c001c265:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c268:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c26b:	09 c7                	or     edi,eax
c001c26d:	0f 84 5e ff ff ff    	je     c001c1d1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c273:	57                   	push   edi
c001c274:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c278:	50                   	push   eax
c001c279:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c280:	53                   	push   ebx
c001c281:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c284:	c1 e0 0b             	shl    eax,0xb
c001c287:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c28b:	c1 e8 0b             	shr    eax,0xb
c001c28e:	50                   	push   eax
c001c28f:	e8 5f fc ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c294:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c297:	83 c4 10             	add    esp,0x10
c001c29a:	25 ff 07 00 00       	and    eax,0x7ff
c001c29f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c2a2:	31 ff                	xor    edi,edi
c001c2a4:	56                   	push   esi
c001c2a5:	6a 28                	push   0x28
c001c2a7:	6a 00                	push   0x0
c001c2a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c2ad:	50                   	push   eax
c001c2ae:	e8 d1 43 fe ff       	call   c0000684 <memset>
c001c2b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c2b6:	25 ff 07 00 00       	and    eax,0x7ff
c001c2bb:	89 c6                	mov    esi,eax
c001c2bd:	83 c6 21             	add    esi,0x21
c001c2c0:	83 d7 00             	adc    edi,0x0
c001c2c3:	83 c4 10             	add    esp,0x10
c001c2c6:	31 c9                	xor    ecx,ecx
c001c2c8:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c2cf:	83 f9 28             	cmp    ecx,0x28
c001c2d2:	88 04 24             	mov    BYTE PTR [esp],al
c001c2d5:	0f 94 c2             	sete   dl
c001c2d8:	88 d0                	mov    al,dl
c001c2da:	ba ff 07 00 00       	mov    edx,0x7ff
c001c2df:	39 f2                	cmp    edx,esi
c001c2e1:	ba 00 00 00 00       	mov    edx,0x0
c001c2e6:	19 fa                	sbb    edx,edi
c001c2e8:	0f 92 c2             	setb   dl
c001c2eb:	09 c2                	or     edx,eax
c001c2ed:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c2f1:	0f 94 c0             	sete   al
c001c2f4:	08 d0                	or     al,dl
c001c2f6:	75 16                	jne    c001c30e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c2f8:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c2fc:	74 10                	je     c001c30e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c2fe:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c301:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c305:	41                   	inc    ecx
c001c306:	83 c6 01             	add    esi,0x1
c001c309:	83 d7 00             	adc    edi,0x0
c001c30c:	eb ba                	jmp    c001c2c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c30e:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c315:	83 ec 0c             	sub    esp,0xc
c001c318:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c31c:	56                   	push   esi
c001c31d:	e8 7e 43 fe ff       	call   c00006a0 <strlen>
c001c322:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c329:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c32d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c335:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c338:	5a                   	pop    edx
c001c339:	25 ff 07 00 00       	and    eax,0x7ff
c001c33e:	59                   	pop    ecx
c001c33f:	01 f8                	add    eax,edi
c001c341:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c347:	83 e0 02             	and    eax,0x2
c001c34a:	3c 01                	cmp    al,0x1
c001c34c:	19 c0                	sbb    eax,eax
c001c34e:	83 c0 02             	add    eax,0x2
c001c351:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c355:	56                   	push   esi
c001c356:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c35a:	50                   	push   eax
c001c35b:	e8 e0 43 fe ff       	call   c0000740 <strcpy>
c001c360:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c364:	83 c4 10             	add    esp,0x10
c001c367:	84 c0                	test   al,al
c001c369:	75 21                	jne    c001c38c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c36b:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c373:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c37b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c383:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c38a:	eb 28                	jmp    c001c3b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c38c:	fe c8                	dec    al
c001c38e:	75 24                	jne    c001c3b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c390:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c398:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c3a0:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c3a8:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c3af:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c3b4:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c3b8:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c3bf:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c3c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3c8:	0f b6 f3             	movzx  esi,bl
c001c3cb:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c3d2:	31 db                	xor    ebx,ebx
c001c3d4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c3da:	89 df                	mov    edi,ebx
c001c3dc:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c3df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c3e2:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c3e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c3e8:	39 c6                	cmp    esi,eax
c001c3ea:	19 d7                	sbb    edi,edx
c001c3ec:	72 10                	jb     c001c3fe <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c3ee:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c3f5:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c3fc:	eb 0a                	jmp    c001c408 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c3fe:	29 f0                	sub    eax,esi
c001c400:	19 da                	sbb    edx,ebx
c001c402:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c405:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c408:	31 c0                	xor    eax,eax
c001c40a:	eb 05                	jmp    c001c411 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c40c:	b8 04 00 00 00       	mov    eax,0x4
c001c411:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c417:	5b                   	pop    ebx
c001c418:	5e                   	pop    esi
c001c419:	5f                   	pop    edi
c001c41a:	5d                   	pop    ebp
c001c41b:	c3                   	ret    

c001c41c <readRoot(unsigned int*, unsigned int*, char)>:
c001c41c:	57                   	push   edi
c001c41d:	56                   	push   esi
c001c41e:	81 ec 38 08 00 00    	sub    esp,0x838
c001c424:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c42c:	50                   	push   eax
c001c42d:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c431:	50                   	push   eax
c001c432:	6a 10                	push   0x10
c001c434:	e8 ba fa ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c439:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c440:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c444:	b9 22 00 00 00       	mov    ecx,0x22
c001c449:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c44b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c452:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c456:	89 10                	mov    DWORD PTR [eax],edx
c001c458:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c45f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c463:	89 10                	mov    DWORD PTR [eax],edx
c001c465:	81 c4 44 08 00 00    	add    esp,0x844
c001c46b:	b0 01                	mov    al,0x1
c001c46d:	5e                   	pop    esi
c001c46e:	5f                   	pop    edi
c001c46f:	c3                   	ret    

c001c470 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c470:	55                   	push   ebp
c001c471:	57                   	push   edi
c001c472:	56                   	push   esi
c001c473:	53                   	push   ebx
c001c474:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c47a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c481:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c488:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c48c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c490:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c494:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c498:	75 03                	jne    c001c49d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c49a:	83 c3 02             	add    ebx,0x2
c001c49d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c4a0:	75 03                	jne    c001c4a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c4a2:	43                   	inc    ebx
c001c4a3:	eb f8                	jmp    c001c49d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c4a5:	51                   	push   ecx
c001c4a6:	68 00 01 00 00       	push   0x100
c001c4ab:	6a 00                	push   0x0
c001c4ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c4b1:	50                   	push   eax
c001c4b2:	e8 cd 41 fe ff       	call   c0000684 <memset>
c001c4b7:	83 c4 10             	add    esp,0x10
c001c4ba:	31 d2                	xor    edx,edx
c001c4bc:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c4bf:	84 c0                	test   al,al
c001c4c1:	74 21                	je     c001c4e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c4c3:	3c 2f                	cmp    al,0x2f
c001c4c5:	75 0b                	jne    c001c4d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c4c7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c4cb:	bd 01 00 00 00       	mov    ebp,0x1
c001c4d0:	eb 14                	jmp    c001c4e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c4d2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c4d5:	80 f9 19             	cmp    cl,0x19
c001c4d8:	77 03                	ja     c001c4dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c4da:	83 e8 20             	sub    eax,0x20
c001c4dd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c4e1:	42                   	inc    edx
c001c4e2:	eb d8                	jmp    c001c4bc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c4e4:	31 ed                	xor    ebp,ebp
c001c4e6:	83 ec 0c             	sub    esp,0xc
c001c4e9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c4f0:	e8 ce d4 fe ff       	call   c00099c3 <malloc>
c001c4f5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c4fc:	89 c6                	mov    esi,eax
c001c4fe:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c504:	c1 ef 0b             	shr    edi,0xb
c001c507:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c50e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c512:	83 c4 10             	add    esp,0x10
c001c515:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c51a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c51e:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c525:	74 28                	je     c001c54f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c527:	52                   	push   edx
c001c528:	57                   	push   edi
c001c529:	50                   	push   eax
c001c52a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c52e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c535:	e8 b9 f9 ff ff       	call   c001bef3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c53a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c53e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c545:	05 00 08 00 00       	add    eax,0x800
c001c54a:	83 c4 10             	add    esp,0x10
c001c54d:	eb cb                	jmp    c001c51a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c54f:	83 ec 0c             	sub    esp,0xc
c001c552:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c556:	57                   	push   edi
c001c557:	e8 44 41 fe ff       	call   c00006a0 <strlen>
c001c55c:	50                   	push   eax
c001c55d:	57                   	push   edi
c001c55e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c565:	56                   	push   esi
c001c566:	e8 46 f9 ff ff       	call   c001beb1 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c56b:	83 c4 20             	add    esp,0x20
c001c56e:	85 c0                	test   eax,eax
c001c570:	75 13                	jne    c001c585 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	56                   	push   esi
c001c576:	e8 58 d4 fe ff       	call   c00099d3 <free>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	31 c0                	xor    eax,eax
c001c580:	e9 b3 00 00 00       	jmp    c001c638 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c585:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c589:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c58d:	c1 e7 08             	shl    edi,0x8
c001c590:	c1 e2 10             	shl    edx,0x10
c001c593:	09 d7                	or     edi,edx
c001c595:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c599:	09 d7                	or     edi,edx
c001c59b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c59f:	c1 e2 18             	shl    edx,0x18
c001c5a2:	09 d7                	or     edi,edx
c001c5a4:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c5a8:	89 d1                	mov    ecx,edx
c001c5aa:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c5ae:	c1 e1 08             	shl    ecx,0x8
c001c5b1:	c1 e2 10             	shl    edx,0x10
c001c5b4:	09 ca                	or     edx,ecx
c001c5b6:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c5ba:	09 ca                	or     edx,ecx
c001c5bc:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c5c0:	c1 e1 18             	shl    ecx,0x18
c001c5c3:	09 ca                	or     edx,ecx
c001c5c5:	89 e9                	mov    ecx,ebp
c001c5c7:	84 c9                	test   cl,cl
c001c5c9:	74 3c                	je     c001c607 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c5cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c5cf:	83 ec 0c             	sub    esp,0xc
c001c5d2:	56                   	push   esi
c001c5d3:	e8 fb d3 fe ff       	call   c00099d3 <free>
c001c5d8:	83 c4 0c             	add    esp,0xc
c001c5db:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c5e2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c5e7:	50                   	push   eax
c001c5e8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c5ef:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c5f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5fa:	52                   	push   edx
c001c5fb:	57                   	push   edi
c001c5fc:	53                   	push   ebx
c001c5fd:	e8 6e fe ff ff       	call   c001c470 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c602:	83 c4 20             	add    esp,0x20
c001c605:	eb 31                	jmp    c001c638 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c607:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c60a:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c611:	d0 e8                	shr    al,1
c001c613:	89 3b                	mov    DWORD PTR [ebx],edi
c001c615:	83 e0 01             	and    eax,0x1
c001c618:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c61f:	83 ec 0c             	sub    esp,0xc
c001c622:	89 13                	mov    DWORD PTR [ebx],edx
c001c624:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c62b:	89 03                	mov    DWORD PTR [ebx],eax
c001c62d:	56                   	push   esi
c001c62e:	e8 a0 d3 fe ff       	call   c00099d3 <free>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	b0 01                	mov    al,0x1
c001c638:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c63e:	5b                   	pop    ebx
c001c63f:	5e                   	pop    esi
c001c640:	5f                   	pop    edi
c001c641:	5d                   	pop    ebp
c001c642:	c3                   	ret    

c001c643 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c643:	55                   	push   ebp
c001c644:	57                   	push   edi
c001c645:	56                   	push   esi
c001c646:	53                   	push   ebx
c001c647:	83 ec 20             	sub    esp,0x20
c001c64a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c64e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c652:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c656:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c65e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c666:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c66b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c671:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c677:	57                   	push   edi
c001c678:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c67c:	50                   	push   eax
c001c67d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c681:	50                   	push   eax
c001c682:	e8 95 fd ff ff       	call   c001c41c <readRoot(unsigned int*, unsigned int*, char)>
c001c687:	5a                   	pop    edx
c001c688:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c68c:	e8 0f 40 fe ff       	call   c00006a0 <strlen>
c001c691:	83 c4 10             	add    esp,0x10
c001c694:	83 f8 03             	cmp    eax,0x3
c001c697:	77 17                	ja     c001c6b0 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c699:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c69d:	89 03                	mov    DWORD PTR [ebx],eax
c001c69f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6a3:	89 06                	mov    DWORD PTR [esi],eax
c001c6a5:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c6ac:	b0 01                	mov    al,0x1
c001c6ae:	eb 19                	jmp    c001c6c9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c6b0:	50                   	push   eax
c001c6b1:	55                   	push   ebp
c001c6b2:	57                   	push   edi
c001c6b3:	56                   	push   esi
c001c6b4:	53                   	push   ebx
c001c6b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6b9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c6c1:	e8 aa fd ff ff       	call   c001c470 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c6c6:	83 c4 20             	add    esp,0x20
c001c6c9:	83 c4 1c             	add    esp,0x1c
c001c6cc:	5b                   	pop    ebx
c001c6cd:	5e                   	pop    esi
c001c6ce:	5f                   	pop    edi
c001c6cf:	5d                   	pop    ebp
c001c6d0:	c3                   	ret    
c001c6d1:	90                   	nop

c001c6d2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c6d2:	57                   	push   edi
c001c6d3:	56                   	push   esi
c001c6d4:	53                   	push   ebx
c001c6d5:	83 ec 10             	sub    esp,0x10
c001c6d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c6dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c6e0:	85 ff                	test   edi,edi
c001c6e2:	0f 84 8b 00 00 00    	je     c001c773 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c6e8:	85 f6                	test   esi,esi
c001c6ea:	0f 84 83 00 00 00    	je     c001c773 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c6f0:	b8 03 00 00 00       	mov    eax,0x3
c001c6f5:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c6fa:	75 7c                	jne    c001c778 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	6a 1c                	push   0x1c
c001c701:	e8 bd d2 fe ff       	call   c00099c3 <malloc>
c001c706:	89 07                	mov    DWORD PTR [edi],eax
c001c708:	89 c3                	mov    ebx,eax
c001c70a:	58                   	pop    eax
c001c70b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c70f:	50                   	push   eax
c001c710:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c713:	50                   	push   eax
c001c714:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c718:	50                   	push   eax
c001c719:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c71d:	50                   	push   eax
c001c71e:	56                   	push   esi
c001c71f:	e8 1f ff ff ff       	call   c001c643 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c724:	83 c4 20             	add    esp,0x20
c001c727:	84 c0                	test   al,al
c001c729:	74 07                	je     c001c732 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c72b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c730:	74 0b                	je     c001c73d <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c732:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c736:	b8 01 00 00 00       	mov    eax,0x1
c001c73b:	eb 3b                	jmp    c001c778 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c73d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c741:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c745:	89 03                	mov    DWORD PTR [ebx],eax
c001c747:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c74e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c752:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c759:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c760:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c763:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c76a:	8a 06                	mov    al,BYTE PTR [esi]
c001c76c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c76f:	31 c0                	xor    eax,eax
c001c771:	eb 05                	jmp    c001c778 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c773:	b8 04 00 00 00       	mov    eax,0x4
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	5b                   	pop    ebx
c001c77c:	5e                   	pop    esi
c001c77d:	5f                   	pop    edi
c001c77e:	c3                   	ret    
c001c77f:	90                   	nop

c001c780 <ISO9660::exists(char const*)>:
c001c780:	83 ec 28             	sub    esp,0x28
c001c783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c787:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c78b:	52                   	push   edx
c001c78c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c78f:	52                   	push   edx
c001c790:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c794:	52                   	push   edx
c001c795:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c799:	52                   	push   edx
c001c79a:	50                   	push   eax
c001c79b:	e8 a3 fe ff ff       	call   c001c643 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c7a0:	83 c4 3c             	add    esp,0x3c
c001c7a3:	c3                   	ret    

c001c7a4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c7a4:	56                   	push   esi
c001c7a5:	53                   	push   ebx
c001c7a6:	83 ec 14             	sub    esp,0x14
c001c7a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c7ad:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7b1:	85 db                	test   ebx,ebx
c001c7b3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c7b7:	0f 94 c2             	sete   dl
c001c7ba:	85 f6                	test   esi,esi
c001c7bc:	0f 94 c0             	sete   al
c001c7bf:	08 c2                	or     dl,al
c001c7c1:	75 68                	jne    c001c82b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c7c3:	85 c9                	test   ecx,ecx
c001c7c5:	74 64                	je     c001c82b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c7c7:	83 ec 0c             	sub    esp,0xc
c001c7ca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c7cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c7d1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c7d7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c7de:	50                   	push   eax
c001c7df:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c7e2:	50                   	push   eax
c001c7e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7e7:	50                   	push   eax
c001c7e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7ec:	50                   	push   eax
c001c7ed:	51                   	push   ecx
c001c7ee:	e8 50 fe ff ff       	call   c001c643 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c7f3:	83 c4 20             	add    esp,0x20
c001c7f6:	ba 01 00 00 00       	mov    edx,0x1
c001c7fb:	84 c0                	test   al,al
c001c7fd:	74 31                	je     c001c830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c7ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c803:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c80a:	89 03                	mov    DWORD PTR [ebx],eax
c001c80c:	ba 00 00 00 00       	mov    edx,0x0
c001c811:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c815:	85 c0                	test   eax,eax
c001c817:	0f 95 06             	setne  BYTE PTR [esi]
c001c81a:	74 14                	je     c001c830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c81c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c822:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c829:	eb 05                	jmp    c001c830 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c82b:	ba 04 00 00 00       	mov    edx,0x4
c001c830:	83 c4 14             	add    esp,0x14
c001c833:	89 d0                	mov    eax,edx
c001c835:	5b                   	pop    ebx
c001c836:	5e                   	pop    esi
c001c837:	c3                   	ret    

c001c838 <ISO9660::openDir(char const*, void**)>:
c001c838:	57                   	push   edi
c001c839:	56                   	push   esi
c001c83a:	53                   	push   ebx
c001c83b:	83 ec 10             	sub    esp,0x10
c001c83e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c842:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c846:	85 ff                	test   edi,edi
c001c848:	74 7b                	je     c001c8c5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c84a:	85 f6                	test   esi,esi
c001c84c:	74 77                	je     c001c8c5 <ISO9660::openDir(char const*, void**)+0x8d>
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	6a 1c                	push   0x1c
c001c853:	e8 6b d1 fe ff       	call   c00099c3 <malloc>
c001c858:	89 07                	mov    DWORD PTR [edi],eax
c001c85a:	89 c3                	mov    ebx,eax
c001c85c:	58                   	pop    eax
c001c85d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c861:	50                   	push   eax
c001c862:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c865:	50                   	push   eax
c001c866:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c86a:	50                   	push   eax
c001c86b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c86f:	50                   	push   eax
c001c870:	56                   	push   esi
c001c871:	e8 cd fd ff ff       	call   c001c643 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c876:	83 c4 20             	add    esp,0x20
c001c879:	84 c0                	test   al,al
c001c87b:	74 07                	je     c001c884 <ISO9660::openDir(char const*, void**)+0x4c>
c001c87d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c882:	75 0b                	jne    c001c88f <ISO9660::openDir(char const*, void**)+0x57>
c001c884:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c888:	b8 01 00 00 00       	mov    eax,0x1
c001c88d:	eb 3b                	jmp    c001c8ca <ISO9660::openDir(char const*, void**)+0x92>
c001c88f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c893:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c897:	89 03                	mov    DWORD PTR [ebx],eax
c001c899:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c8a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c8a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c8ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c8b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c8b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c8bc:	8a 06                	mov    al,BYTE PTR [esi]
c001c8be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c8c1:	31 c0                	xor    eax,eax
c001c8c3:	eb 05                	jmp    c001c8ca <ISO9660::openDir(char const*, void**)+0x92>
c001c8c5:	b8 04 00 00 00       	mov    eax,0x4
c001c8ca:	83 c4 10             	add    esp,0x10
c001c8cd:	5b                   	pop    ebx
c001c8ce:	5e                   	pop    esi
c001c8cf:	5f                   	pop    edi
c001c8d0:	c3                   	ret    
c001c8d1:	90                   	nop

c001c8d2 <ISO9660::ISO9660()>:
c001c8d2:	83 ec 0c             	sub    esp,0xc
c001c8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d9:	83 ec 0c             	sub    esp,0xc
c001c8dc:	50                   	push   eax
c001c8dd:	e8 e8 06 ff ff       	call   c000cfca <Filesystem::Filesystem()>
c001c8e2:	83 c4 10             	add    esp,0x10
c001c8e5:	ba c8 65 02 c0       	mov    edx,0xc00265c8
c001c8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ee:	89 10                	mov    DWORD PTR [eax],edx
c001c8f0:	90                   	nop
c001c8f1:	83 c4 0c             	add    esp,0xc
c001c8f4:	c3                   	ret    
c001c8f5:	90                   	nop

c001c8f6 <SoundCard::beginPlayback()>:
c001c8f6:	c7 44 24 04 28 66 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026628
c001c8fe:	e9 1c 7f ff ff       	jmp    c001481f <Krnl::panic(char const*)>
c001c903:	90                   	nop

c001c904 <SoundCard::stopPlayback()>:
c001c904:	c7 44 24 04 5c 66 02 c0 	mov    DWORD PTR [esp+0x4],0xc002665c
c001c90c:	e9 0e 7f ff ff       	jmp    c001481f <Krnl::panic(char const*)>
c001c911:	90                   	nop

c001c912 <SoundCard::SoundCard(char const*)>:
c001c912:	83 ec 1c             	sub    esp,0x1c
c001c915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c919:	83 ec 08             	sub    esp,0x8
c001c91c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c920:	50                   	push   eax
c001c921:	e8 d8 19 ff ff       	call   c000e2fe <Device::Device(char const*)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	ba f4 66 02 c0       	mov    edx,0xc00266f4
c001c92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c932:	89 10                	mov    DWORD PTR [eax],edx
c001c934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c938:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c93f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c943:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c94d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c951:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c95f:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c96d:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c977:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c97f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c984:	7f 19                	jg     c001c99f <SoundCard::SoundCard(char const*)+0x8d>
c001c986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c98a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c98e:	83 c2 54             	add    edx,0x54
c001c991:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c999:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c99d:	eb e0                	jmp    c001c97f <SoundCard::SoundCard(char const*)+0x6d>
c001c99f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9a3:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c9aa:	90                   	nop
c001c9ab:	83 c4 1c             	add    esp,0x1c
c001c9ae:	c3                   	ret    
c001c9af:	90                   	nop

c001c9b0 <SoundCard::~SoundCard()>:
c001c9b0:	83 ec 0c             	sub    esp,0xc
c001c9b3:	ba f4 66 02 c0       	mov    edx,0xc00266f4
c001c9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9bc:	89 10                	mov    DWORD PTR [eax],edx
c001c9be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c2:	83 ec 0c             	sub    esp,0xc
c001c9c5:	50                   	push   eax
c001c9c6:	e8 fd 15 ff ff       	call   c000dfc8 <Device::~Device()>
c001c9cb:	83 c4 10             	add    esp,0x10
c001c9ce:	90                   	nop
c001c9cf:	83 c4 0c             	add    esp,0xc
c001c9d2:	c3                   	ret    
c001c9d3:	90                   	nop

c001c9d4 <SoundCard::~SoundCard()>:
c001c9d4:	83 ec 0c             	sub    esp,0xc
c001c9d7:	83 ec 0c             	sub    esp,0xc
c001c9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9de:	e8 cd ff ff ff       	call   c001c9b0 <SoundCard::~SoundCard()>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	83 ec 08             	sub    esp,0x8
c001c9e9:	68 e8 01 00 00       	push   0x1e8
c001c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f2:	e8 db 01 ff ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c001c9f7:	83 c4 10             	add    esp,0x10
c001c9fa:	83 c4 0c             	add    esp,0xc
c001c9fd:	c3                   	ret    

c001c9fe <SoundCard::configureRates(int, int, int)>:
c001c9fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca02:	31 c0                	xor    eax,eax
c001ca04:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ca0b:	75 20                	jne    c001ca2d <SoundCard::configureRates(int, int, int)+0x2f>
c001ca0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca11:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ca17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca1b:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ca21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca25:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ca2b:	b0 01                	mov    al,0x1
c001ca2d:	c3                   	ret    

c001ca2e <SoundCard::getSamples16(int, short*)>:
c001ca2e:	55                   	push   ebp
c001ca2f:	57                   	push   edi
c001ca30:	31 ff                	xor    edi,edi
c001ca32:	56                   	push   esi
c001ca33:	53                   	push   ebx
c001ca34:	31 db                	xor    ebx,ebx
c001ca36:	83 ec 18             	sub    esp,0x18
c001ca39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ca3d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ca41:	68 8f 66 02 c0       	push   0xc002668f
c001ca46:	e8 68 02 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ca4b:	83 c4 0c             	add    esp,0xc
c001ca4e:	8d 04 36             	lea    eax,[esi+esi*1]
c001ca51:	50                   	push   eax
c001ca52:	6a 00                	push   0x0
c001ca54:	55                   	push   ebp
c001ca55:	e8 2a 3c fe ff       	call   c0000684 <memset>
c001ca5a:	83 c4 10             	add    esp,0x10
c001ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca61:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001ca68:	85 c0                	test   eax,eax
c001ca6a:	74 1b                	je     c001ca87 <SoundCard::getSamples16(int, short*)+0x59>
c001ca6c:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ca70:	75 15                	jne    c001ca87 <SoundCard::getSamples16(int, short*)+0x59>
c001ca72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca76:	55                   	push   ebp
c001ca77:	56                   	push   esi
c001ca78:	50                   	push   eax
c001ca79:	e8 5a 03 00 00       	call   c001cdd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001ca7e:	83 c4 10             	add    esp,0x10
c001ca81:	39 c7                	cmp    edi,eax
c001ca83:	7d 02                	jge    c001ca87 <SoundCard::getSamples16(int, short*)+0x59>
c001ca85:	89 c7                	mov    edi,eax
c001ca87:	43                   	inc    ebx
c001ca88:	83 fb 20             	cmp    ebx,0x20
c001ca8b:	75 d0                	jne    c001ca5d <SoundCard::getSamples16(int, short*)+0x2f>
c001ca8d:	83 c4 0c             	add    esp,0xc
c001ca90:	89 f8                	mov    eax,edi
c001ca92:	5b                   	pop    ebx
c001ca93:	5e                   	pop    esi
c001ca94:	5f                   	pop    edi
c001ca95:	5d                   	pop    ebp
c001ca96:	c3                   	ret    
c001ca97:	90                   	nop

c001ca98 <SoundCard::getSamples32(int, int*)>:
c001ca98:	55                   	push   ebp
c001ca99:	57                   	push   edi
c001ca9a:	31 ff                	xor    edi,edi
c001ca9c:	56                   	push   esi
c001ca9d:	31 f6                	xor    esi,esi
c001ca9f:	53                   	push   ebx
c001caa0:	83 ec 10             	sub    esp,0x10
c001caa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001caa7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001caab:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001caaf:	c1 e0 02             	shl    eax,0x2
c001cab2:	50                   	push   eax
c001cab3:	6a 00                	push   0x0
c001cab5:	55                   	push   ebp
c001cab6:	e8 c9 3b fe ff       	call   c0000684 <memset>
c001cabb:	83 c4 10             	add    esp,0x10
c001cabe:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cac5:	85 c0                	test   eax,eax
c001cac7:	74 1b                	je     c001cae4 <SoundCard::getSamples32(int, int*)+0x4c>
c001cac9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cacd:	75 15                	jne    c001cae4 <SoundCard::getSamples32(int, int*)+0x4c>
c001cacf:	53                   	push   ebx
c001cad0:	55                   	push   ebp
c001cad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cad5:	50                   	push   eax
c001cad6:	e8 f9 03 00 00       	call   c001ced4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	39 c6                	cmp    esi,eax
c001cae0:	7d 02                	jge    c001cae4 <SoundCard::getSamples32(int, int*)+0x4c>
c001cae2:	89 c6                	mov    esi,eax
c001cae4:	47                   	inc    edi
c001cae5:	83 ff 20             	cmp    edi,0x20
c001cae8:	75 d4                	jne    c001cabe <SoundCard::getSamples32(int, int*)+0x26>
c001caea:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001caf0:	85 f6                	test   esi,esi
c001caf2:	75 0f                	jne    c001cb03 <SoundCard::getSamples32(int, int*)+0x6b>
c001caf4:	84 c0                	test   al,al
c001caf6:	74 1b                	je     c001cb13 <SoundCard::getSamples32(int, int*)+0x7b>
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cafd:	53                   	push   ebx
c001cafe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cb01:	eb 0d                	jmp    c001cb10 <SoundCard::getSamples32(int, int*)+0x78>
c001cb03:	84 c0                	test   al,al
c001cb05:	75 0c                	jne    c001cb13 <SoundCard::getSamples32(int, int*)+0x7b>
c001cb07:	83 ec 0c             	sub    esp,0xc
c001cb0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb0c:	53                   	push   ebx
c001cb0d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cb10:	83 c4 10             	add    esp,0x10
c001cb13:	83 c4 0c             	add    esp,0xc
c001cb16:	89 f0                	mov    eax,esi
c001cb18:	5b                   	pop    ebx
c001cb19:	5e                   	pop    esi
c001cb1a:	5f                   	pop    edi
c001cb1b:	5d                   	pop    ebp
c001cb1c:	c3                   	ret    
c001cb1d:	90                   	nop

c001cb1e <SoundCard::addChannel(SoundPort*)>:
c001cb1e:	56                   	push   esi
c001cb1f:	53                   	push   ebx
c001cb20:	53                   	push   ebx
c001cb21:	31 db                	xor    ebx,ebx
c001cb23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb27:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cb2f:	74 27                	je     c001cb58 <SoundCard::addChannel(SoundPort*)+0x3a>
c001cb31:	43                   	inc    ebx
c001cb32:	83 fb 20             	cmp    ebx,0x20
c001cb35:	75 f0                	jne    c001cb27 <SoundCard::addChannel(SoundPort*)+0x9>
c001cb37:	83 ec 0c             	sub    esp,0xc
c001cb3a:	83 cb ff             	or     ebx,0xffffffff
c001cb3d:	68 b5 66 02 c0       	push   0xc00266b5
c001cb42:	e8 6c 01 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cb47:	c7 04 24 ae 66 02 c0 	mov    DWORD PTR [esp],0xc00266ae
c001cb4e:	e8 cc 7c ff ff       	call   c001481f <Krnl::panic(char const*)>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	eb 1b                	jmp    c001cb73 <SoundCard::addChannel(SoundPort*)+0x55>
c001cb58:	51                   	push   ecx
c001cb59:	51                   	push   ecx
c001cb5a:	53                   	push   ebx
c001cb5b:	68 cd 66 02 c0       	push   0xc00266cd
c001cb60:	e8 4e 01 ff ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cb65:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb69:	83 c4 10             	add    esp,0x10
c001cb6c:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cb73:	89 d8                	mov    eax,ebx
c001cb75:	5a                   	pop    edx
c001cb76:	5b                   	pop    ebx
c001cb77:	5e                   	pop    esi
c001cb78:	c3                   	ret    
c001cb79:	90                   	nop

c001cb7a <SoundCard::removeChannel(int)>:
c001cb7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb7e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cb82:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cb8d:	c3                   	ret    
c001cb8e:	66 90                	xchg   ax,ax

c001cb90 <SoundPort::SoundPort(int, int, int, int)>:
c001cb90:	83 ec 0c             	sub    esp,0xc
c001cb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb97:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbae:	89 10                	mov    DWORD PTR [eax],edx
c001cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cbb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cbbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cbc6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cbcb:	75 13                	jne    c001cbe0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cbcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd1:	8b 00                	mov    eax,DWORD PTR [eax]
c001cbd3:	05 a0 0f 00 00       	add    eax,0xfa0
c001cbd8:	01 c0                	add    eax,eax
c001cbda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbde:	66 90                	xchg   ax,ax
c001cbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cbe8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbef:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cbfd:	c1 e0 02             	shl    eax,0x2
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	50                   	push   eax
c001cc04:	e8 ba cd fe ff       	call   c00099c3 <malloc>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	89 c2                	mov    edx,eax
c001cc0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cc15:	90                   	nop
c001cc16:	83 c4 0c             	add    esp,0xc
c001cc19:	c3                   	ret    
c001cc1a:	66 90                	xchg   ax,ax

c001cc1c <SoundPort::~SoundPort()>:
c001cc1c:	83 ec 0c             	sub    esp,0xc
c001cc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc26:	85 c0                	test   eax,eax
c001cc28:	74 1e                	je     c001cc48 <SoundPort::~SoundPort()+0x2c>
c001cc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cc31:	83 ec 0c             	sub    esp,0xc
c001cc34:	50                   	push   eax
c001cc35:	e8 99 cd fe ff       	call   c00099d3 <free>
c001cc3a:	83 c4 10             	add    esp,0x10
c001cc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc41:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cc48:	90                   	nop
c001cc49:	83 c4 0c             	add    esp,0xc
c001cc4c:	c3                   	ret    
c001cc4d:	90                   	nop
c001cc4e:	66 90                	xchg   ax,ax

c001cc50 <SoundPort::unpause()>:
c001cc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc54:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop
c001cc5a:	66 90                	xchg   ax,ax

c001cc5c <SoundPort::pause()>:
c001cc5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc60:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cc64:	c3                   	ret    
c001cc65:	90                   	nop
c001cc66:	66 90                	xchg   ax,ax

c001cc68 <SoundPort::getBufferUsed()>:
c001cc68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc6c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cc6f:	c3                   	ret    

c001cc70 <SoundPort::getBufferSize()>:
c001cc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cc77:	c3                   	ret    

c001cc78 <SoundPort::buffer16(short*, int)>:
c001cc78:	55                   	push   ebp
c001cc79:	57                   	push   edi
c001cc7a:	56                   	push   esi
c001cc7b:	53                   	push   ebx
c001cc7c:	83 ec 1c             	sub    esp,0x1c
c001cc7f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc83:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cc87:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cc8a:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cc8d:	0f 84 85 00 00 00    	je     c001cd18 <SoundPort::buffer16(short*, int)+0xa0>
c001cc93:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cc97:	85 c9                	test   ecx,ecx
c001cc99:	7e 7d                	jle    c001cd18 <SoundPort::buffer16(short*, int)+0xa0>
c001cc9b:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cc9f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cca2:	c1 e1 0f             	shl    ecx,0xf
c001cca5:	8d 70 01             	lea    esi,[eax+0x1]
c001cca8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001ccab:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ccae:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccb1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccb4:	74 6e                	je     c001cd24 <SoundPort::buffer16(short*, int)+0xac>
c001ccb6:	31 f6                	xor    esi,esi
c001ccb8:	eb 22                	jmp    c001ccdc <SoundPort::buffer16(short*, int)+0x64>
c001ccba:	66 90                	xchg   ax,ax
c001ccbc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001ccc1:	8d 79 01             	lea    edi,[ecx+0x1]
c001ccc4:	c1 e3 0f             	shl    ebx,0xf
c001ccc7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001ccca:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cccd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001ccd0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ccd3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ccd6:	74 1c                	je     c001ccf4 <SoundPort::buffer16(short*, int)+0x7c>
c001ccd8:	89 c6                	mov    esi,eax
c001ccda:	66 90                	xchg   ax,ax
c001ccdc:	8d 46 01             	lea    eax,[esi+0x1]
c001ccdf:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cce3:	75 d7                	jne    c001ccbc <SoundPort::buffer16(short*, int)+0x44>
c001cce5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cce9:	83 c4 1c             	add    esp,0x1c
c001ccec:	5b                   	pop    ebx
c001cced:	5e                   	pop    esi
c001ccee:	5f                   	pop    edi
c001ccef:	5d                   	pop    ebp
c001ccf0:	c3                   	ret    
c001ccf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccf4:	8d 46 02             	lea    eax,[esi+0x2]
c001ccf7:	90                   	nop
c001ccf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccfc:	83 ec 0c             	sub    esp,0xc
c001ccff:	68 20 67 02 c0       	push   0xc0026720
c001cd04:	e8 aa ff fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cd09:	83 c4 10             	add    esp,0x10
c001cd0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd10:	83 c4 1c             	add    esp,0x1c
c001cd13:	5b                   	pop    ebx
c001cd14:	5e                   	pop    esi
c001cd15:	5f                   	pop    edi
c001cd16:	5d                   	pop    ebp
c001cd17:	c3                   	ret    
c001cd18:	83 c4 1c             	add    esp,0x1c
c001cd1b:	31 c0                	xor    eax,eax
c001cd1d:	5b                   	pop    ebx
c001cd1e:	5e                   	pop    esi
c001cd1f:	5f                   	pop    edi
c001cd20:	5d                   	pop    ebp
c001cd21:	c3                   	ret    
c001cd22:	66 90                	xchg   ax,ax
c001cd24:	b8 01 00 00 00       	mov    eax,0x1
c001cd29:	eb cd                	jmp    c001ccf8 <SoundPort::buffer16(short*, int)+0x80>
c001cd2b:	90                   	nop

c001cd2c <SoundPort::buffer32(int*, int)>:
c001cd2c:	55                   	push   ebp
c001cd2d:	57                   	push   edi
c001cd2e:	56                   	push   esi
c001cd2f:	53                   	push   ebx
c001cd30:	83 ec 1c             	sub    esp,0x1c
c001cd33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cd37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cd3b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd3e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cd42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd46:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd49:	74 79                	je     c001cdc4 <SoundPort::buffer32(int*, int)+0x98>
c001cd4b:	85 c0                	test   eax,eax
c001cd4d:	7e 75                	jle    c001cdc4 <SoundPort::buffer32(int*, int)+0x98>
c001cd4f:	8d 71 01             	lea    esi,[ecx+0x1]
c001cd52:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cd55:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cd58:	8b 37                	mov    esi,DWORD PTR [edi]
c001cd5a:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cd5d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd60:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd63:	74 6b                	je     c001cdd0 <SoundPort::buffer32(int*, int)+0xa4>
c001cd65:	31 f6                	xor    esi,esi
c001cd67:	eb 1f                	jmp    c001cd88 <SoundPort::buffer32(int*, int)+0x5c>
c001cd69:	8d 76 00             	lea    esi,[esi+0x0]
c001cd6c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cd6f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cd72:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cd75:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cd78:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cd7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cd7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cd82:	74 1c                	je     c001cda0 <SoundPort::buffer32(int*, int)+0x74>
c001cd84:	89 de                	mov    esi,ebx
c001cd86:	66 90                	xchg   ax,ax
c001cd88:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cd8b:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001cd8f:	75 db                	jne    c001cd6c <SoundPort::buffer32(int*, int)+0x40>
c001cd91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd95:	83 c4 1c             	add    esp,0x1c
c001cd98:	5b                   	pop    ebx
c001cd99:	5e                   	pop    esi
c001cd9a:	5f                   	pop    edi
c001cd9b:	5d                   	pop    ebp
c001cd9c:	c3                   	ret    
c001cd9d:	8d 76 00             	lea    esi,[esi+0x0]
c001cda0:	8d 46 02             	lea    eax,[esi+0x2]
c001cda3:	90                   	nop
c001cda4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	68 3b 67 02 c0       	push   0xc002673b
c001cdb0:	e8 fe fe fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001cdb5:	83 c4 10             	add    esp,0x10
c001cdb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cdbc:	83 c4 1c             	add    esp,0x1c
c001cdbf:	5b                   	pop    ebx
c001cdc0:	5e                   	pop    esi
c001cdc1:	5f                   	pop    edi
c001cdc2:	5d                   	pop    ebp
c001cdc3:	c3                   	ret    
c001cdc4:	83 c4 1c             	add    esp,0x1c
c001cdc7:	31 c0                	xor    eax,eax
c001cdc9:	5b                   	pop    ebx
c001cdca:	5e                   	pop    esi
c001cdcb:	5f                   	pop    edi
c001cdcc:	5d                   	pop    ebp
c001cdcd:	c3                   	ret    
c001cdce:	66 90                	xchg   ax,ax
c001cdd0:	b8 01 00 00 00       	mov    eax,0x1
c001cdd5:	eb cd                	jmp    c001cda4 <SoundPort::buffer32(int*, int)+0x78>
c001cdd7:	90                   	nop

c001cdd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001cdd8:	57                   	push   edi
c001cdd9:	56                   	push   esi
c001cdda:	53                   	push   ebx
c001cddb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cddf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001cde3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001cde9:	39 03                	cmp    DWORD PTR [ebx],eax
c001cdeb:	74 13                	je     c001ce00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	68 90 67 02 c0       	push   0xc0026790
c001cdf5:	e8 25 7a ff ff       	call   c001481f <Krnl::panic(char const*)>
c001cdfa:	83 c4 10             	add    esp,0x10
c001cdfd:	8d 76 00             	lea    esi,[esi+0x0]
c001ce00:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ce06:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ce09:	74 11                	je     c001ce1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ce0b:	83 ec 0c             	sub    esp,0xc
c001ce0e:	68 56 67 02 c0       	push   0xc0026756
c001ce13:	e8 07 7a ff ff       	call   c001481f <Krnl::panic(char const*)>
c001ce18:	83 c4 10             	add    esp,0x10
c001ce1b:	90                   	nop
c001ce1c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ce22:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ce25:	74 11                	je     c001ce38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ce27:	83 ec 0c             	sub    esp,0xc
c001ce2a:	68 56 67 02 c0       	push   0xc0026756
c001ce2f:	e8 eb 79 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001ce34:	83 c4 10             	add    esp,0x10
c001ce37:	90                   	nop
c001ce38:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ce3b:	89 c6                	mov    esi,eax
c001ce3d:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001ce41:	7e 05                	jle    c001ce48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ce43:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ce47:	90                   	nop
c001ce48:	85 f6                	test   esi,esi
c001ce4a:	7e 30                	jle    c001ce7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ce4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ce50:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ce53:	31 c9                	xor    ecx,ecx
c001ce55:	01 d7                	add    edi,edx
c001ce57:	90                   	nop
c001ce58:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ce5b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ce5e:	85 c0                	test   eax,eax
c001ce60:	79 06                	jns    c001ce68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ce62:	05 ff 7f 00 00       	add    eax,0x7fff
c001ce67:	90                   	nop
c001ce68:	c1 f8 0f             	sar    eax,0xf
c001ce6b:	83 c1 04             	add    ecx,0x4
c001ce6e:	66 01 02             	add    WORD PTR [edx],ax
c001ce71:	83 c2 02             	add    edx,0x2
c001ce74:	39 d7                	cmp    edi,edx
c001ce76:	75 e0                	jne    c001ce58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ce78:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ce7b:	90                   	nop
c001ce7c:	56                   	push   esi
c001ce7d:	89 c2                	mov    edx,eax
c001ce7f:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ce86:	29 f2                	sub    edx,esi
c001ce88:	52                   	push   edx
c001ce89:	50                   	push   eax
c001ce8a:	68 b0 67 02 c0       	push   0xc00267b0
c001ce8f:	e8 1f fe fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ce94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ce97:	50                   	push   eax
c001ce98:	01 f8                	add    eax,edi
c001ce9a:	50                   	push   eax
c001ce9b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ce9e:	29 f0                	sub    eax,esi
c001cea0:	c1 e0 02             	shl    eax,0x2
c001cea3:	50                   	push   eax
c001cea4:	68 e0 67 02 c0       	push   0xc00267e0
c001cea9:	e8 05 fe fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ceae:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ceb1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ceb4:	83 c4 1c             	add    esp,0x1c
c001ceb7:	01 d7                	add    edi,edx
c001ceb9:	29 f0                	sub    eax,esi
c001cebb:	c1 e0 02             	shl    eax,0x2
c001cebe:	50                   	push   eax
c001cebf:	57                   	push   edi
c001cec0:	52                   	push   edx
c001cec1:	e8 f6 36 fe ff       	call   c00005bc <memmove>
c001cec6:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001cec9:	83 c4 10             	add    esp,0x10
c001cecc:	89 f0                	mov    eax,esi
c001cece:	5b                   	pop    ebx
c001cecf:	5e                   	pop    esi
c001ced0:	5f                   	pop    edi
c001ced1:	c3                   	ret    
c001ced2:	66 90                	xchg   ax,ax

c001ced4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ced4:	57                   	push   edi
c001ced5:	56                   	push   esi
c001ced6:	53                   	push   ebx
c001ced7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cedb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cedf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cee3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001cee9:	39 06                	cmp    DWORD PTR [esi],eax
c001ceeb:	74 13                	je     c001cf00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ceed:	83 ec 0c             	sub    esp,0xc
c001cef0:	68 04 68 02 c0       	push   0xc0026804
c001cef5:	e8 25 79 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001cefa:	83 c4 10             	add    esp,0x10
c001cefd:	8d 76 00             	lea    esi,[esi+0x0]
c001cf00:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cf06:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cf09:	74 11                	je     c001cf1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cf0b:	83 ec 0c             	sub    esp,0xc
c001cf0e:	68 72 67 02 c0       	push   0xc0026772
c001cf13:	e8 07 79 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001cf18:	83 c4 10             	add    esp,0x10
c001cf1b:	90                   	nop
c001cf1c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cf22:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cf25:	74 11                	je     c001cf38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cf27:	83 ec 0c             	sub    esp,0xc
c001cf2a:	68 72 67 02 c0       	push   0xc0026772
c001cf2f:	e8 eb 78 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001cf34:	83 c4 10             	add    esp,0x10
c001cf37:	90                   	nop
c001cf38:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001cf3b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cf3f:	7e 07                	jle    c001cf48 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cf41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf45:	8d 76 00             	lea    esi,[esi+0x0]
c001cf48:	85 ff                	test   edi,edi
c001cf4a:	7e 1c                	jle    c001cf68 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cf4c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cf53:	31 c0                	xor    eax,eax
c001cf55:	8d 76 00             	lea    esi,[esi+0x0]
c001cf58:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cf5b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cf5e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cf61:	83 c0 04             	add    eax,0x4
c001cf64:	39 c1                	cmp    ecx,eax
c001cf66:	75 f0                	jne    c001cf58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cf68:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cf6b:	50                   	push   eax
c001cf6c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cf6f:	29 f8                	sub    eax,edi
c001cf71:	c1 e0 02             	shl    eax,0x2
c001cf74:	50                   	push   eax
c001cf75:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cf78:	50                   	push   eax
c001cf79:	52                   	push   edx
c001cf7a:	e8 3d 36 fe ff       	call   c00005bc <memmove>
c001cf7f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cf82:	83 c4 10             	add    esp,0x10
c001cf85:	89 f8                	mov    eax,edi
c001cf87:	5b                   	pop    ebx
c001cf88:	5e                   	pop    esi
c001cf89:	5f                   	pop    edi
c001cf8a:	c3                   	ret    
c001cf8b:	90                   	nop

c001cf8c <PCI::open(int, int, void*)>:
c001cf8c:	83 ec 18             	sub    esp,0x18
c001cf8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf97:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cf9d:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf9f:	50                   	push   eax
c001cfa0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cfa3:	31 c0                	xor    eax,eax
c001cfa5:	83 c4 1c             	add    esp,0x1c
c001cfa8:	c3                   	ret    
c001cfa9:	90                   	nop

c001cfaa <PCI::close(int, int, void*)>:
c001cfaa:	31 c0                	xor    eax,eax
c001cfac:	c3                   	ret    
c001cfad:	90                   	nop

c001cfae <PCI::PCI()>:
c001cfae:	83 ec 0c             	sub    esp,0xc
c001cfb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb5:	83 ec 08             	sub    esp,0x8
c001cfb8:	68 23 68 02 c0       	push   0xc0026823
c001cfbd:	50                   	push   eax
c001cfbe:	e8 9d 09 ff ff       	call   c000d960 <Bus::Bus(char const*)>
c001cfc3:	83 c4 10             	add    esp,0x10
c001cfc6:	ba d4 6a 02 c0       	mov    edx,0xc0026ad4
c001cfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfcf:	89 10                	mov    DWORD PTR [eax],edx
c001cfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe3:	a3 60 a0 02 c0       	mov    ds:0xc002a060,eax
c001cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cff2:	0f b6 d0             	movzx  edx,al
c001cff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d004:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d00a:	0f b6 d0             	movzx  edx,al
c001d00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d011:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d020:	8d 50 01             	lea    edx,[eax+0x1]
c001d023:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d027:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d02d:	0f b6 d0             	movzx  edx,al
c001d030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d034:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d038:	83 c9 c0             	or     ecx,0xffffffc0
c001d03b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d03f:	90                   	nop
c001d040:	83 c4 0c             	add    esp,0xc
c001d043:	c3                   	ret    

c001d044 <PCI::readBAR8(unsigned int, int)>:
c001d044:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d04c:	f6 c2 01             	test   dl,0x1
c001d04f:	74 07                	je     c001d058 <PCI::readBAR8(unsigned int, int)+0x14>
c001d051:	83 e2 fc             	and    edx,0xfffffffc
c001d054:	01 c2                	add    edx,eax
c001d056:	ec                   	in     al,dx
c001d057:	c3                   	ret    
c001d058:	83 e2 f0             	and    edx,0xfffffff0
c001d05b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d05e:	c3                   	ret    
c001d05f:	90                   	nop

c001d060 <PCI::readBAR16(unsigned int, int)>:
c001d060:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d064:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d068:	f6 c2 01             	test   dl,0x1
c001d06b:	74 08                	je     c001d075 <PCI::readBAR16(unsigned int, int)+0x15>
c001d06d:	83 e2 fc             	and    edx,0xfffffffc
c001d070:	01 c2                	add    edx,eax
c001d072:	66 ed                	in     ax,dx
c001d074:	c3                   	ret    
c001d075:	83 e2 f0             	and    edx,0xfffffff0
c001d078:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d07c:	c3                   	ret    
c001d07d:	90                   	nop

c001d07e <PCI::readBAR32(unsigned int, int)>:
c001d07e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d086:	f6 c2 01             	test   dl,0x1
c001d089:	74 07                	je     c001d092 <PCI::readBAR32(unsigned int, int)+0x14>
c001d08b:	83 e2 fc             	and    edx,0xfffffffc
c001d08e:	01 c2                	add    edx,eax
c001d090:	ed                   	in     eax,dx
c001d091:	c3                   	ret    
c001d092:	83 e2 f0             	and    edx,0xfffffff0
c001d095:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d098:	c3                   	ret    
c001d099:	90                   	nop

c001d09a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d09a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d09e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0a6:	f6 c2 01             	test   dl,0x1
c001d0a9:	74 07                	je     c001d0b2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d0ab:	83 e2 fc             	and    edx,0xfffffffc
c001d0ae:	01 ca                	add    edx,ecx
c001d0b0:	ee                   	out    dx,al
c001d0b1:	c3                   	ret    
c001d0b2:	83 e2 f0             	and    edx,0xfffffff0
c001d0b5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d0b8:	c3                   	ret    
c001d0b9:	90                   	nop

c001d0ba <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d0ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0c6:	f6 c2 01             	test   dl,0x1
c001d0c9:	74 08                	je     c001d0d3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d0cb:	83 e2 fc             	and    edx,0xfffffffc
c001d0ce:	01 ca                	add    edx,ecx
c001d0d0:	66 ef                	out    dx,ax
c001d0d2:	c3                   	ret    
c001d0d3:	83 e2 f0             	and    edx,0xfffffff0
c001d0d6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d0da:	c3                   	ret    
c001d0db:	90                   	nop

c001d0dc <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d0dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d0e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d0e8:	f6 c2 01             	test   dl,0x1
c001d0eb:	74 07                	je     c001d0f4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d0ed:	83 e2 fc             	and    edx,0xfffffffc
c001d0f0:	01 ca                	add    edx,ecx
c001d0f2:	ef                   	out    dx,eax
c001d0f3:	c3                   	ret    
c001d0f4:	83 e2 f0             	and    edx,0xfffffff0
c001d0f7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d0fa:	c3                   	ret    
c001d0fb:	90                   	nop

c001d0fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d0fc:	55                   	push   ebp
c001d0fd:	57                   	push   edi
c001d0fe:	56                   	push   esi
c001d0ff:	53                   	push   ebx
c001d100:	83 ec 0c             	sub    esp,0xc
c001d103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d107:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d10b:	89 f0                	mov    eax,esi
c001d10d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d111:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d115:	3c 07                	cmp    al,0x7
c001d117:	76 10                	jbe    c001d129 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d119:	83 ec 0c             	sub    esp,0xc
c001d11c:	68 2b 68 02 c0       	push   0xc002682b
c001d121:	e8 f9 76 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	80 fb 0f             	cmp    bl,0xf
c001d12c:	76 10                	jbe    c001d13e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d12e:	83 ec 0c             	sub    esp,0xc
c001d131:	68 5b 68 02 c0       	push   0xc002685b
c001d136:	e8 e4 76 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001d13b:	83 c4 10             	add    esp,0x10
c001d13e:	8d 04 36             	lea    eax,[esi+esi*1]
c001d141:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d146:	83 c8 f0             	or     eax,0xfffffff0
c001d149:	ee                   	out    dx,al
c001d14a:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d14f:	89 e8                	mov    eax,ebp
c001d151:	ee                   	out    dx,al
c001d152:	83 c4 0c             	add    esp,0xc
c001d155:	89 d8                	mov    eax,ebx
c001d157:	66 81 e7 fc 00       	and    di,0xfc
c001d15c:	5b                   	pop    ebx
c001d15d:	c1 e0 08             	shl    eax,0x8
c001d160:	5e                   	pop    esi
c001d161:	09 f8                	or     eax,edi
c001d163:	5f                   	pop    edi
c001d164:	66 0d 00 c0          	or     ax,0xc000
c001d168:	5d                   	pop    ebp
c001d169:	c3                   	ret    

c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d16a:	57                   	push   edi
c001d16b:	56                   	push   esi
c001d16c:	53                   	push   ebx
c001d16d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d171:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d175:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d17b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d17f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d183:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d187:	83 ff 01             	cmp    edi,0x1
c001d18a:	75 3e                	jne    c001d1ca <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d18c:	89 de                	mov    esi,ebx
c001d18e:	0f b6 c0             	movzx  eax,al
c001d191:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d197:	c1 e0 10             	shl    eax,0x10
c001d19a:	0f b6 c9             	movzx  ecx,cl
c001d19d:	09 f0                	or     eax,esi
c001d19f:	c1 e1 08             	shl    ecx,0x8
c001d1a2:	0f b6 d2             	movzx  edx,dl
c001d1a5:	09 c8                	or     eax,ecx
c001d1a7:	c1 e2 0b             	shl    edx,0xb
c001d1aa:	09 d0                	or     eax,edx
c001d1ac:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d1b1:	0d 00 00 00 80       	or     eax,0x80000000
c001d1b6:	ef                   	out    dx,eax
c001d1b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d1bc:	ed                   	in     eax,dx
c001d1bd:	83 e3 02             	and    ebx,0x2
c001d1c0:	0f b6 cb             	movzx  ecx,bl
c001d1c3:	c1 e1 03             	shl    ecx,0x3
c001d1c6:	d3 e8                	shr    eax,cl
c001d1c8:	eb 43                	jmp    c001d20d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d1ca:	83 ff 02             	cmp    edi,0x2
c001d1cd:	75 2c                	jne    c001d1fb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d1cf:	83 ec 0c             	sub    esp,0xc
c001d1d2:	0f b6 c9             	movzx  ecx,cl
c001d1d5:	0f b6 d2             	movzx  edx,dl
c001d1d8:	0f b6 fb             	movzx  edi,bl
c001d1db:	0f b6 c0             	movzx  eax,al
c001d1de:	57                   	push   edi
c001d1df:	51                   	push   ecx
c001d1e0:	52                   	push   edx
c001d1e1:	50                   	push   eax
c001d1e2:	56                   	push   esi
c001d1e3:	e8 14 ff ff ff       	call   c001d0fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d1e8:	89 c2                	mov    edx,eax
c001d1ea:	ed                   	in     eax,dx
c001d1eb:	83 e3 02             	and    ebx,0x2
c001d1ee:	83 c4 20             	add    esp,0x20
c001d1f1:	0f b6 cb             	movzx  ecx,bl
c001d1f4:	c1 e1 03             	shl    ecx,0x3
c001d1f7:	d3 e8                	shr    eax,cl
c001d1f9:	eb 12                	jmp    c001d20d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d1fb:	83 ec 0c             	sub    esp,0xc
c001d1fe:	68 8b 68 02 c0       	push   0xc002688b
c001d203:	e8 17 76 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001d208:	83 c4 10             	add    esp,0x10
c001d20b:	31 c0                	xor    eax,eax
c001d20d:	5b                   	pop    ebx
c001d20e:	5e                   	pop    esi
c001d20f:	5f                   	pop    edi
c001d210:	c3                   	ret    
c001d211:	90                   	nop

c001d212 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d212:	83 ec 18             	sub    esp,0x18
c001d215:	6a 00                	push   0x0
c001d217:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d21c:	50                   	push   eax
c001d21d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d222:	50                   	push   eax
c001d223:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d228:	50                   	push   eax
c001d229:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d22d:	e8 38 ff ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d232:	83 c4 2c             	add    esp,0x2c
c001d235:	c3                   	ret    

c001d236 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d236:	83 ec 18             	sub    esp,0x18
c001d239:	6a 0e                	push   0xe
c001d23b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d240:	50                   	push   eax
c001d241:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d246:	50                   	push   eax
c001d247:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d24c:	50                   	push   eax
c001d24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d251:	e8 14 ff ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d256:	83 c4 2c             	add    esp,0x2c
c001d259:	0f b6 c0             	movzx  eax,al
c001d25c:	c3                   	ret    
c001d25d:	90                   	nop

c001d25e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d25e:	55                   	push   ebp
c001d25f:	57                   	push   edi
c001d260:	56                   	push   esi
c001d261:	53                   	push   ebx
c001d262:	83 ec 18             	sub    esp,0x18
c001d265:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d26a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d26f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d274:	6a 0a                	push   0xa
c001d276:	56                   	push   esi
c001d277:	55                   	push   ebp
c001d278:	57                   	push   edi
c001d279:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d27d:	e8 e8 fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d282:	83 c4 14             	add    esp,0x14
c001d285:	89 c3                	mov    ebx,eax
c001d287:	6a 0a                	push   0xa
c001d289:	0f b6 db             	movzx  ebx,bl
c001d28c:	56                   	push   esi
c001d28d:	55                   	push   ebp
c001d28e:	57                   	push   edi
c001d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d293:	e8 d2 fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d298:	83 c4 2c             	add    esp,0x2c
c001d29b:	25 00 ff 00 00       	and    eax,0xff00
c001d2a0:	09 d8                	or     eax,ebx
c001d2a2:	5b                   	pop    ebx
c001d2a3:	5e                   	pop    esi
c001d2a4:	5f                   	pop    edi
c001d2a5:	5d                   	pop    ebp
c001d2a6:	c3                   	ret    
c001d2a7:	90                   	nop

c001d2a8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d2a8:	83 ec 18             	sub    esp,0x18
c001d2ab:	6a 08                	push   0x8
c001d2ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2b2:	50                   	push   eax
c001d2b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2b8:	50                   	push   eax
c001d2b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2be:	50                   	push   eax
c001d2bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2c3:	e8 a2 fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2c8:	83 c4 2c             	add    esp,0x2c
c001d2cb:	0f b6 c4             	movzx  eax,ah
c001d2ce:	c3                   	ret    
c001d2cf:	90                   	nop

c001d2d0 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d2d0:	83 ec 18             	sub    esp,0x18
c001d2d3:	6a 08                	push   0x8
c001d2d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2da:	50                   	push   eax
c001d2db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2e0:	50                   	push   eax
c001d2e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2e6:	50                   	push   eax
c001d2e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2eb:	e8 7a fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d2f0:	83 c4 2c             	add    esp,0x2c
c001d2f3:	c3                   	ret    

c001d2f4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d2f4:	83 ec 18             	sub    esp,0x18
c001d2f7:	6a 3c                	push   0x3c
c001d2f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d2fe:	50                   	push   eax
c001d2ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d304:	50                   	push   eax
c001d305:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d30a:	50                   	push   eax
c001d30b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d30f:	e8 56 fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d314:	83 c4 2c             	add    esp,0x2c
c001d317:	c3                   	ret    

c001d318 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d318:	83 ec 18             	sub    esp,0x18
c001d31b:	6a 18                	push   0x18
c001d31d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d322:	50                   	push   eax
c001d323:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d328:	50                   	push   eax
c001d329:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d32e:	50                   	push   eax
c001d32f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d333:	e8 32 fe ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d338:	83 c4 2c             	add    esp,0x2c
c001d33b:	0f b6 c4             	movzx  eax,ah
c001d33e:	c3                   	ret    
c001d33f:	90                   	nop

c001d340 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d340:	55                   	push   ebp
c001d341:	57                   	push   edi
c001d342:	56                   	push   esi
c001d343:	53                   	push   ebx
c001d344:	83 ec 28             	sub    esp,0x28
c001d347:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d34b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d350:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d355:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d35a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d361:	8d 43 12             	lea    eax,[ebx+0x12]
c001d364:	83 c3 10             	add    ebx,0x10
c001d367:	0f b6 c0             	movzx  eax,al
c001d36a:	0f b6 db             	movzx  ebx,bl
c001d36d:	50                   	push   eax
c001d36e:	51                   	push   ecx
c001d36f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d373:	57                   	push   edi
c001d374:	55                   	push   ebp
c001d375:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d379:	e8 ec fd ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d37e:	83 c4 14             	add    esp,0x14
c001d381:	89 c6                	mov    esi,eax
c001d383:	53                   	push   ebx
c001d384:	c1 e6 10             	shl    esi,0x10
c001d387:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d38b:	51                   	push   ecx
c001d38c:	57                   	push   edi
c001d38d:	55                   	push   ebp
c001d38e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d392:	e8 d3 fd ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d397:	83 c4 3c             	add    esp,0x3c
c001d39a:	0f b7 c0             	movzx  eax,ax
c001d39d:	5b                   	pop    ebx
c001d39e:	09 f0                	or     eax,esi
c001d3a0:	5e                   	pop    esi
c001d3a1:	5f                   	pop    edi
c001d3a2:	5d                   	pop    ebp
c001d3a3:	c3                   	ret    

c001d3a4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d3a4:	55                   	push   ebp
c001d3a5:	57                   	push   edi
c001d3a6:	56                   	push   esi
c001d3a7:	53                   	push   ebx
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3af:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d3b3:	89 f5                	mov    ebp,esi
c001d3b5:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d3bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3cb:	83 f9 01             	cmp    ecx,0x1
c001d3ce:	75 5d                	jne    c001d42d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d3d0:	0f b6 c8             	movzx  ecx,al
c001d3d3:	0f b6 d2             	movzx  edx,dl
c001d3d6:	c1 e1 10             	shl    ecx,0x10
c001d3d9:	c1 e2 0b             	shl    edx,0xb
c001d3dc:	89 f0                	mov    eax,esi
c001d3de:	25 fc 00 00 00       	and    eax,0xfc
c001d3e3:	09 c1                	or     ecx,eax
c001d3e5:	89 e8                	mov    eax,ebp
c001d3e7:	0f b6 c0             	movzx  eax,al
c001d3ea:	c1 e0 08             	shl    eax,0x8
c001d3ed:	09 c1                	or     ecx,eax
c001d3ef:	09 d1                	or     ecx,edx
c001d3f1:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d3f6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d3fc:	89 c8                	mov    eax,ecx
c001d3fe:	ef                   	out    dx,eax
c001d3ff:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d404:	ed                   	in     eax,dx
c001d405:	0f b7 db             	movzx  ebx,bx
c001d408:	83 e6 02             	and    esi,0x2
c001d40b:	74 0a                	je     c001d417 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d40d:	0f b7 d0             	movzx  edx,ax
c001d410:	c1 e3 10             	shl    ebx,0x10
c001d413:	09 d3                	or     ebx,edx
c001d415:	eb 05                	jmp    c001d41c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d417:	66 31 c0             	xor    ax,ax
c001d41a:	09 c3                	or     ebx,eax
c001d41c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d421:	89 c8                	mov    eax,ecx
c001d423:	ef                   	out    dx,eax
c001d424:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d429:	89 d8                	mov    eax,ebx
c001d42b:	eb 41                	jmp    c001d46e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d42d:	83 f9 02             	cmp    ecx,0x2
c001d430:	75 45                	jne    c001d477 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d432:	83 ec 0c             	sub    esp,0xc
c001d435:	0f b6 d2             	movzx  edx,dl
c001d438:	89 f1                	mov    ecx,esi
c001d43a:	0f b6 c0             	movzx  eax,al
c001d43d:	0f b6 f1             	movzx  esi,cl
c001d440:	89 e9                	mov    ecx,ebp
c001d442:	56                   	push   esi
c001d443:	0f b6 c9             	movzx  ecx,cl
c001d446:	51                   	push   ecx
c001d447:	52                   	push   edx
c001d448:	50                   	push   eax
c001d449:	57                   	push   edi
c001d44a:	e8 ad fc ff ff       	call   c001d0fc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d44f:	89 c2                	mov    edx,eax
c001d451:	ed                   	in     eax,dx
c001d452:	83 c4 20             	add    esp,0x20
c001d455:	0f b7 db             	movzx  ebx,bx
c001d458:	f6 c2 02             	test   dl,0x2
c001d45b:	74 0c                	je     c001d469 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d45d:	0f b7 c8             	movzx  ecx,ax
c001d460:	89 d8                	mov    eax,ebx
c001d462:	c1 e0 10             	shl    eax,0x10
c001d465:	09 c8                	or     eax,ecx
c001d467:	eb 05                	jmp    c001d46e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d469:	66 31 c0             	xor    ax,ax
c001d46c:	09 d8                	or     eax,ebx
c001d46e:	ef                   	out    dx,eax
c001d46f:	83 c4 0c             	add    esp,0xc
c001d472:	5b                   	pop    ebx
c001d473:	5e                   	pop    esi
c001d474:	5f                   	pop    edi
c001d475:	5d                   	pop    ebp
c001d476:	c3                   	ret    
c001d477:	c7 44 24 20 8b 68 02 c0 	mov    DWORD PTR [esp+0x20],0xc002688b
c001d47f:	83 c4 0c             	add    esp,0xc
c001d482:	5b                   	pop    ebx
c001d483:	5e                   	pop    esi
c001d484:	5f                   	pop    edi
c001d485:	5d                   	pop    ebp
c001d486:	e9 94 73 ff ff       	jmp    c001481f <Krnl::panic(char const*)>
c001d48b:	90                   	nop

c001d48c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d48c:	55                   	push   ebp
c001d48d:	57                   	push   edi
c001d48e:	56                   	push   esi
c001d48f:	53                   	push   ebx
c001d490:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d496:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d49d:	75 0f                	jne    c001d4ae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d49f:	80 3d 6c a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a06c,0x0
c001d4a6:	0f 85 fa 00 00 00    	jne    c001d5a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d4ac:	eb 2f                	jmp    c001d4dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d4ae:	83 ec 0c             	sub    esp,0xc
c001d4b1:	68 91 68 02 c0       	push   0xc0026891
c001d4b6:	e8 62 c5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d4bb:	83 c4 10             	add    esp,0x10
c001d4be:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d4c5:	75 d8                	jne    c001d49f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d4c7:	e4 60                	in     al,0x60
c001d4c9:	3c 1c                	cmp    al,0x1c
c001d4cb:	74 04                	je     c001d4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d4cd:	3c 5a                	cmp    al,0x5a
c001d4cf:	75 f6                	jne    c001d4c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d4d1:	e4 60                	in     al,0x60
c001d4d3:	3c 5a                	cmp    al,0x5a
c001d4d5:	74 fa                	je     c001d4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d4d7:	3c 1c                	cmp    al,0x1c
c001d4d9:	74 f6                	je     c001d4d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d4db:	eb c2                	jmp    c001d49f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d4dd:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d4e4:	0f 85 86 00 00 00    	jne    c001d570 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	68 14 01 00 00       	push   0x114
c001d4f2:	e8 cc c4 fe ff       	call   c00099c3 <malloc>
c001d4f7:	83 c4 0c             	add    esp,0xc
c001d4fa:	89 c3                	mov    ebx,eax
c001d4fc:	ff 35 70 96 02 c0    	push   DWORD PTR ds:0xc0029670
c001d502:	68 ab 68 02 c0       	push   0xc00268ab
c001d507:	50                   	push   eax
c001d508:	e8 11 fd fe ff       	call   c000d21e <File::File(char const*, Process*)>
c001d50d:	5a                   	pop    edx
c001d50e:	59                   	pop    ecx
c001d50f:	6a 01                	push   0x1
c001d511:	53                   	push   ebx
c001d512:	e8 6b fd fe ff       	call   c000d282 <File::open(FileOpenMode)>
c001d517:	83 c4 0c             	add    esp,0xc
c001d51a:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d51e:	50                   	push   eax
c001d51f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d523:	50                   	push   eax
c001d524:	53                   	push   ebx
c001d525:	e8 04 00 ff ff       	call   c000d52e <File::stat(unsigned long long*, bool*)>
c001d52a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d52e:	40                   	inc    eax
c001d52f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d532:	e8 8c c4 fe ff       	call   c00099c3 <malloc>
c001d537:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d53b:	a3 68 a0 02 c0       	mov    ds:0xc002a068,eax
c001d540:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d544:	5e                   	pop    esi
c001d545:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d547:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d54b:	51                   	push   ecx
c001d54c:	50                   	push   eax
c001d54d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d551:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d555:	53                   	push   ebx
c001d556:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d559:	83 c4 14             	add    esp,0x14
c001d55c:	53                   	push   ebx
c001d55d:	e8 7e fd fe ff       	call   c000d2e0 <File::close()>
c001d562:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d566:	83 c4 10             	add    esp,0x10
c001d569:	a3 64 a0 02 c0       	mov    ds:0xc002a064,eax
c001d56e:	eb 36                	jmp    c001d5a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d570:	83 ec 0c             	sub    esp,0xc
c001d573:	68 c4 68 02 c0       	push   0xc00268c4
c001d578:	e8 a0 c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d57d:	83 c4 10             	add    esp,0x10
c001d580:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d587:	0f 85 5d ff ff ff    	jne    c001d4ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d58d:	e4 60                	in     al,0x60
c001d58f:	3c 1c                	cmp    al,0x1c
c001d591:	74 04                	je     c001d597 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d593:	3c 5a                	cmp    al,0x5a
c001d595:	75 f6                	jne    c001d58d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d597:	e4 60                	in     al,0x60
c001d599:	3c 5a                	cmp    al,0x5a
c001d59b:	74 fa                	je     c001d597 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d59d:	3c 1c                	cmp    al,0x1c
c001d59f:	74 f6                	je     c001d597 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d5a1:	e9 44 ff ff ff       	jmp    c001d4ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d5a6:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d5ad:	75 0b                	jne    c001d5ba <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d5af:	31 f6                	xor    esi,esi
c001d5b1:	31 db                	xor    ebx,ebx
c001d5b3:	31 ed                	xor    ebp,ebp
c001d5b5:	e9 a3 01 00 00       	jmp    c001d75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d5ba:	83 ec 0c             	sub    esp,0xc
c001d5bd:	68 d6 68 02 c0       	push   0xc00268d6
c001d5c2:	e8 56 c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d5c7:	8b 15 a0 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281a0
c001d5cd:	83 c4 10             	add    esp,0x10
c001d5d0:	f6 c2 80             	test   dl,0x80
c001d5d3:	74 0c                	je     c001d5e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d5d5:	0f ba e2 0b          	bt     edx,0xb
c001d5d9:	72 1a                	jb     c001d5f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d5db:	eb d2                	jmp    c001d5af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d5dd:	3c 5a                	cmp    al,0x5a
c001d5df:	74 0c                	je     c001d5ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d5e1:	e4 60                	in     al,0x60
c001d5e3:	3c 1c                	cmp    al,0x1c
c001d5e5:	75 f6                	jne    c001d5dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d5e7:	eb 04                	jmp    c001d5ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d5e9:	3c 1c                	cmp    al,0x1c
c001d5eb:	75 e8                	jne    c001d5d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d5ed:	e4 60                	in     al,0x60
c001d5ef:	3c 5a                	cmp    al,0x5a
c001d5f1:	74 fa                	je     c001d5ed <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d5f3:	eb f4                	jmp    c001d5e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d5f5:	83 ec 0c             	sub    esp,0xc
c001d5f8:	68 db 68 02 c0       	push   0xc00268db
c001d5fd:	e8 1b c4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d602:	83 c4 10             	add    esp,0x10
c001d605:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d60c:	75 a1                	jne    c001d5af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d60e:	e4 60                	in     al,0x60
c001d610:	3c 5a                	cmp    al,0x5a
c001d612:	74 04                	je     c001d618 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d614:	3c 1c                	cmp    al,0x1c
c001d616:	75 f6                	jne    c001d60e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d618:	e4 60                	in     al,0x60
c001d61a:	3c 5a                	cmp    al,0x5a
c001d61c:	74 fa                	je     c001d618 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d61e:	3c 1c                	cmp    al,0x1c
c001d620:	74 f6                	je     c001d618 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d622:	eb 8b                	jmp    c001d5af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d624:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d62b:	0f 85 3d 01 00 00    	jne    c001d76e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d631:	a1 68 a0 02 c0       	mov    eax,ds:0xc002a068
c001d636:	8d 7e 01             	lea    edi,[esi+0x1]
c001d639:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d63c:	d4 40                	aam    0x40
c001d63e:	d5 39                	aad    0x39
c001d640:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d647:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d64b:	0f 85 53 01 00 00    	jne    c001d7a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d651:	8b 15 68 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a068
c001d657:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d65a:	d4 40                	aam    0x40
c001d65c:	d5 39                	aad    0x39
c001d65e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d662:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d666:	d4 40                	aam    0x40
c001d668:	d5 39                	aad    0x39
c001d66a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d66e:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d672:	d4 40                	aam    0x40
c001d674:	d5 39                	aad    0x39
c001d676:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d67a:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d67e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d682:	3c 56                	cmp    al,0x56
c001d684:	74 49                	je     c001d6cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d686:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d68a:	d4 40                	aam    0x40
c001d68c:	d5 39                	aad    0x39
c001d68e:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d691:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d695:	0f b6 c9             	movzx  ecx,cl
c001d698:	c1 e1 04             	shl    ecx,0x4
c001d69b:	d4 40                	aam    0x40
c001d69d:	d5 39                	aad    0x39
c001d69f:	83 e8 30             	sub    eax,0x30
c001d6a2:	0f b6 c0             	movzx  eax,al
c001d6a5:	09 c1                	or     ecx,eax
c001d6a7:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d6ab:	c1 e1 04             	shl    ecx,0x4
c001d6ae:	d4 40                	aam    0x40
c001d6b0:	d5 39                	aad    0x39
c001d6b2:	83 e8 30             	sub    eax,0x30
c001d6b5:	0f b6 c0             	movzx  eax,al
c001d6b8:	09 c1                	or     ecx,eax
c001d6ba:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d6be:	c1 e1 04             	shl    ecx,0x4
c001d6c1:	d4 40                	aam    0x40
c001d6c3:	d5 39                	aad    0x39
c001d6c5:	83 e8 30             	sub    eax,0x30
c001d6c8:	0f b6 c0             	movzx  eax,al
c001d6cb:	09 c8                	or     eax,ecx
c001d6cd:	89 c5                	mov    ebp,eax
c001d6cf:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d6d3:	80 f9 44             	cmp    cl,0x44
c001d6d6:	74 47                	je     c001d71f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d6d8:	88 c8                	mov    al,cl
c001d6da:	d4 40                	aam    0x40
c001d6dc:	d5 39                	aad    0x39
c001d6de:	83 e8 30             	sub    eax,0x30
c001d6e1:	0f b6 f8             	movzx  edi,al
c001d6e4:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d6e8:	c1 e7 04             	shl    edi,0x4
c001d6eb:	d4 40                	aam    0x40
c001d6ed:	d5 39                	aad    0x39
c001d6ef:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d6f2:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d6f6:	0f b6 db             	movzx  ebx,bl
c001d6f9:	09 fb                	or     ebx,edi
c001d6fb:	c1 e3 04             	shl    ebx,0x4
c001d6fe:	d4 40                	aam    0x40
c001d700:	d5 39                	aad    0x39
c001d702:	83 e8 30             	sub    eax,0x30
c001d705:	0f b6 f8             	movzx  edi,al
c001d708:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d70c:	09 fb                	or     ebx,edi
c001d70e:	89 df                	mov    edi,ebx
c001d710:	c1 e7 04             	shl    edi,0x4
c001d713:	d4 40                	aam    0x40
c001d715:	d5 39                	aad    0x39
c001d717:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d71a:	0f b6 db             	movzx  ebx,bl
c001d71d:	09 fb                	or     ebx,edi
c001d71f:	a1 64 a0 02 c0       	mov    eax,ds:0xc002a064
c001d724:	83 c6 10             	add    esi,0x10
c001d727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d72b:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d72f:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d732:	3c 0a                	cmp    al,0xa
c001d734:	0f 85 a0 00 00 00    	jne    c001d7da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d73a:	3c 0a                	cmp    al,0xa
c001d73c:	0f 94 c0             	sete   al
c001d73f:	0f b6 c0             	movzx  eax,al
c001d742:	01 c6                	add    esi,eax
c001d744:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d749:	0f 84 a2 00 00 00    	je     c001d7f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d74f:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d757:	0f 84 94 00 00 00    	je     c001d7f1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d75d:	39 35 64 a0 02 c0    	cmp    DWORD PTR ds:0xc002a064,esi
c001d763:	0f 8f bb fe ff ff    	jg     c001d624 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001d769:	e9 e8 00 00 00       	jmp    c001d856 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001d76e:	83 ec 0c             	sub    esp,0xc
c001d771:	68 e2 68 02 c0       	push   0xc00268e2
c001d776:	e8 a2 c2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d77b:	83 c4 10             	add    esp,0x10
c001d77e:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d785:	0f 85 a6 fe ff ff    	jne    c001d631 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d78b:	e4 60                	in     al,0x60
c001d78d:	3c 5a                	cmp    al,0x5a
c001d78f:	74 04                	je     c001d795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d791:	3c 1c                	cmp    al,0x1c
c001d793:	75 f6                	jne    c001d78b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001d795:	e4 60                	in     al,0x60
c001d797:	3c 5a                	cmp    al,0x5a
c001d799:	74 fa                	je     c001d795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d79b:	3c 1c                	cmp    al,0x1c
c001d79d:	74 f6                	je     c001d795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001d79f:	e9 8d fe ff ff       	jmp    c001d631 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001d7a4:	83 ec 0c             	sub    esp,0xc
c001d7a7:	68 ea 68 02 c0       	push   0xc00268ea
c001d7ac:	e8 6c c2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d7b1:	83 c4 10             	add    esp,0x10
c001d7b4:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d7bb:	0f 85 90 fe ff ff    	jne    c001d651 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d7c1:	e4 60                	in     al,0x60
c001d7c3:	3c 5a                	cmp    al,0x5a
c001d7c5:	74 04                	je     c001d7cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d7c7:	3c 1c                	cmp    al,0x1c
c001d7c9:	75 f6                	jne    c001d7c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001d7cb:	e4 60                	in     al,0x60
c001d7cd:	3c 5a                	cmp    al,0x5a
c001d7cf:	74 fa                	je     c001d7cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d7d1:	3c 1c                	cmp    al,0x1c
c001d7d3:	74 f6                	je     c001d7cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001d7d5:	e9 77 fe ff ff       	jmp    c001d651 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001d7da:	47                   	inc    edi
c001d7db:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001d7df:	0f 84 55 ff ff ff    	je     c001d73a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001d7e5:	46                   	inc    esi
c001d7e6:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001d7e9:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d7ec:	e9 3e ff ff ff       	jmp    c001d72f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001d7f1:	80 f9 44             	cmp    cl,0x44
c001d7f4:	74 0e                	je     c001d804 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001d7f6:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001d7fe:	0f 85 59 ff ff ff    	jne    c001d75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d804:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001d808:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001d80c:	c1 e0 04             	shl    eax,0x4
c001d80f:	83 ea 30             	sub    edx,0x30
c001d812:	09 d0                	or     eax,edx
c001d814:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001d81b:	0f 85 3c ff ff ff    	jne    c001d75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d821:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001d825:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d829:	c1 e2 04             	shl    edx,0x4
c001d82c:	83 e8 30             	sub    eax,0x30
c001d82f:	09 d0                	or     eax,edx
c001d831:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001d838:	0f 85 1f ff ff ff    	jne    c001d75d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d83e:	50                   	push   eax
c001d83f:	50                   	push   eax
c001d840:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d844:	50                   	push   eax
c001d845:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d84c:	e8 ef 2e fe ff       	call   c0000740 <strcpy>
c001d851:	83 c4 10             	add    esp,0x10
c001d854:	eb 15                	jmp    c001d86b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001d856:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d85d:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d868:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d86b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d872:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d878:	5b                   	pop    ebx
c001d879:	5e                   	pop    esi
c001d87a:	5f                   	pop    edi
c001d87b:	5d                   	pop    ebp
c001d87c:	c3                   	ret    
c001d87d:	90                   	nop

c001d87e <PCI::checkBus(unsigned char)>:
c001d87e:	57                   	push   edi
c001d87f:	56                   	push   esi
c001d880:	53                   	push   ebx
c001d881:	83 ec 48             	sub    esp,0x48
c001d884:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c001d888:	68 f3 68 02 c0       	push   0xc00268f3
c001d88d:	89 fe                	mov    esi,edi
c001d88f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001d893:	53                   	push   ebx
c001d894:	e8 a7 2e fe ff       	call   c0000740 <strcpy>
c001d899:	b1 64                	mov    cl,0x64
c001d89b:	89 f8                	mov    eax,edi
c001d89d:	0f b6 d0             	movzx  edx,al
c001d8a0:	89 d0                	mov    eax,edx
c001d8a2:	f6 f1                	div    cl
c001d8a4:	b1 0a                	mov    cl,0xa
c001d8a6:	83 c0 30             	add    eax,0x30
c001d8a9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001d8ad:	83 c4 10             	add    esp,0x10
c001d8b0:	89 d0                	mov    eax,edx
c001d8b2:	f6 f1                	div    cl
c001d8b4:	89 c2                	mov    edx,eax
c001d8b6:	0f b6 c0             	movzx  eax,al
c001d8b9:	88 f2                	mov    dl,dh
c001d8bb:	f6 f1                	div    cl
c001d8bd:	83 c2 30             	add    edx,0x30
c001d8c0:	88 e0                	mov    al,ah
c001d8c2:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001d8c6:	83 c0 30             	add    eax,0x30
c001d8c9:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d8d0:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001d8d4:	74 29                	je     c001d8ff <PCI::checkBus(unsigned char)+0x81>
c001d8d6:	83 ec 0c             	sub    esp,0xc
c001d8d9:	53                   	push   ebx
c001d8da:	e8 3e c1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d8df:	83 c4 10             	add    esp,0x10
c001d8e2:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d8e9:	75 14                	jne    c001d8ff <PCI::checkBus(unsigned char)+0x81>
c001d8eb:	e4 60                	in     al,0x60
c001d8ed:	3c 1c                	cmp    al,0x1c
c001d8ef:	74 04                	je     c001d8f5 <PCI::checkBus(unsigned char)+0x77>
c001d8f1:	3c 5a                	cmp    al,0x5a
c001d8f3:	75 f6                	jne    c001d8eb <PCI::checkBus(unsigned char)+0x6d>
c001d8f5:	e4 60                	in     al,0x60
c001d8f7:	3c 5a                	cmp    al,0x5a
c001d8f9:	74 fa                	je     c001d8f5 <PCI::checkBus(unsigned char)+0x77>
c001d8fb:	3c 1c                	cmp    al,0x1c
c001d8fd:	74 f6                	je     c001d8f5 <PCI::checkBus(unsigned char)+0x77>
c001d8ff:	89 f0                	mov    eax,esi
c001d901:	31 db                	xor    ebx,ebx
c001d903:	0f b6 f0             	movzx  esi,al
c001d906:	52                   	push   edx
c001d907:	52                   	push   edx
c001d908:	68 02 69 02 c0       	push   0xc0026902
c001d90d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d911:	57                   	push   edi
c001d912:	e8 29 2e fe ff       	call   c0000740 <strcpy>
c001d917:	83 c4 10             	add    esp,0x10
c001d91a:	b2 0a                	mov    dl,0xa
c001d91c:	0f b6 c3             	movzx  eax,bl
c001d91f:	f6 f2                	div    dl
c001d921:	8d 50 30             	lea    edx,[eax+0x30]
c001d924:	88 e0                	mov    al,ah
c001d926:	88 54 24 20          	mov    BYTE PTR [esp+0x20],dl
c001d92a:	83 c0 30             	add    eax,0x30
c001d92d:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d934:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001d938:	74 29                	je     c001d963 <PCI::checkBus(unsigned char)+0xe5>
c001d93a:	83 ec 0c             	sub    esp,0xc
c001d93d:	57                   	push   edi
c001d93e:	e8 da c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d943:	83 c4 10             	add    esp,0x10
c001d946:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d94d:	75 14                	jne    c001d963 <PCI::checkBus(unsigned char)+0xe5>
c001d94f:	e4 60                	in     al,0x60
c001d951:	3c 1c                	cmp    al,0x1c
c001d953:	74 04                	je     c001d959 <PCI::checkBus(unsigned char)+0xdb>
c001d955:	3c 5a                	cmp    al,0x5a
c001d957:	75 f6                	jne    c001d94f <PCI::checkBus(unsigned char)+0xd1>
c001d959:	e4 60                	in     al,0x60
c001d95b:	3c 5a                	cmp    al,0x5a
c001d95d:	74 fa                	je     c001d959 <PCI::checkBus(unsigned char)+0xdb>
c001d95f:	3c 1c                	cmp    al,0x1c
c001d961:	74 f6                	je     c001d959 <PCI::checkBus(unsigned char)+0xdb>
c001d963:	50                   	push   eax
c001d964:	53                   	push   ebx
c001d965:	43                   	inc    ebx
c001d966:	56                   	push   esi
c001d967:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001d96b:	e8 c4 0b 00 00       	call   c001e534 <PCI::checkDevice(unsigned char, unsigned char)>
c001d970:	83 c4 10             	add    esp,0x10
c001d973:	83 fb 20             	cmp    ebx,0x20
c001d976:	75 8e                	jne    c001d906 <PCI::checkBus(unsigned char)+0x88>
c001d978:	83 c4 40             	add    esp,0x40
c001d97b:	5b                   	pop    ebx
c001d97c:	5e                   	pop    esi
c001d97d:	5f                   	pop    edi
c001d97e:	c3                   	ret    
c001d97f:	90                   	nop

c001d980 <PCI::foundDevice(PCIDeviceInfo)>:
c001d980:	55                   	push   ebp
c001d981:	57                   	push   edi
c001d982:	56                   	push   esi
c001d983:	53                   	push   ebx
c001d984:	83 ec 1c             	sub    esp,0x1c
c001d987:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d98b:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d992:	75 0d                	jne    c001d9a1 <PCI::foundDevice(PCIDeviceInfo)+0x21>
c001d994:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d99a:	75 34                	jne    c001d9d0 <PCI::foundDevice(PCIDeviceInfo)+0x50>
c001d99c:	e9 f9 05 00 00       	jmp    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001d9a1:	83 ec 0c             	sub    esp,0xc
c001d9a4:	68 15 69 02 c0       	push   0xc0026915
c001d9a9:	e8 6f c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001d9b8:	75 da                	jne    c001d994 <PCI::foundDevice(PCIDeviceInfo)+0x14>
c001d9ba:	e4 60                	in     al,0x60
c001d9bc:	3c 5a                	cmp    al,0x5a
c001d9be:	74 04                	je     c001d9c4 <PCI::foundDevice(PCIDeviceInfo)+0x44>
c001d9c0:	3c 1c                	cmp    al,0x1c
c001d9c2:	75 f6                	jne    c001d9ba <PCI::foundDevice(PCIDeviceInfo)+0x3a>
c001d9c4:	e4 60                	in     al,0x60
c001d9c6:	3c 5a                	cmp    al,0x5a
c001d9c8:	74 fa                	je     c001d9c4 <PCI::foundDevice(PCIDeviceInfo)+0x44>
c001d9ca:	3c 1c                	cmp    al,0x1c
c001d9cc:	74 f6                	je     c001d9c4 <PCI::foundDevice(PCIDeviceInfo)+0x44>
c001d9ce:	eb c4                	jmp    c001d994 <PCI::foundDevice(PCIDeviceInfo)+0x14>
c001d9d0:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001d9d7:	75 11                	jne    c001d9ea <PCI::foundDevice(PCIDeviceInfo)+0x6a>
c001d9d9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d9dd:	66 81 f9 06 04       	cmp    cx,0x406
c001d9e2:	0f 85 18 01 00 00    	jne    c001db00 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001d9e8:	eb 2f                	jmp    c001da19 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d9ea:	83 ec 0c             	sub    esp,0xc
c001d9ed:	68 25 69 02 c0       	push   0xc0026925
c001d9f2:	e8 26 c0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001d9f7:	83 c4 10             	add    esp,0x10
c001d9fa:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001da01:	75 d6                	jne    c001d9d9 <PCI::foundDevice(PCIDeviceInfo)+0x59>
c001da03:	e4 60                	in     al,0x60
c001da05:	3c 5a                	cmp    al,0x5a
c001da07:	74 04                	je     c001da0d <PCI::foundDevice(PCIDeviceInfo)+0x8d>
c001da09:	3c 1c                	cmp    al,0x1c
c001da0b:	75 f6                	jne    c001da03 <PCI::foundDevice(PCIDeviceInfo)+0x83>
c001da0d:	e4 60                	in     al,0x60
c001da0f:	3c 5a                	cmp    al,0x5a
c001da11:	74 fa                	je     c001da0d <PCI::foundDevice(PCIDeviceInfo)+0x8d>
c001da13:	3c 1c                	cmp    al,0x1c
c001da15:	74 f6                	je     c001da0d <PCI::foundDevice(PCIDeviceInfo)+0x8d>
c001da17:	eb c0                	jmp    c001d9d9 <PCI::foundDevice(PCIDeviceInfo)+0x59>
c001da19:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001da20:	75 28                	jne    c001da4a <PCI::foundDevice(PCIDeviceInfo)+0xca>
c001da22:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001da27:	50                   	push   eax
c001da28:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001da2d:	50                   	push   eax
c001da2e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001da33:	50                   	push   eax
c001da34:	53                   	push   ebx
c001da35:	e8 de f8 ff ff       	call   c001d318 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001da3a:	83 c4 10             	add    esp,0x10
c001da3d:	89 c6                	mov    esi,eax
c001da3f:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001da46:	74 4a                	je     c001da92 <PCI::foundDevice(PCIDeviceInfo)+0x112>
c001da48:	eb 2f                	jmp    c001da79 <PCI::foundDevice(PCIDeviceInfo)+0xf9>
c001da4a:	83 ec 0c             	sub    esp,0xc
c001da4d:	68 35 69 02 c0       	push   0xc0026935
c001da52:	e8 c6 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da57:	83 c4 10             	add    esp,0x10
c001da5a:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001da61:	75 bf                	jne    c001da22 <PCI::foundDevice(PCIDeviceInfo)+0xa2>
c001da63:	e4 60                	in     al,0x60
c001da65:	3c 5a                	cmp    al,0x5a
c001da67:	74 04                	je     c001da6d <PCI::foundDevice(PCIDeviceInfo)+0xed>
c001da69:	3c 1c                	cmp    al,0x1c
c001da6b:	75 f6                	jne    c001da63 <PCI::foundDevice(PCIDeviceInfo)+0xe3>
c001da6d:	e4 60                	in     al,0x60
c001da6f:	3c 5a                	cmp    al,0x5a
c001da71:	74 fa                	je     c001da6d <PCI::foundDevice(PCIDeviceInfo)+0xed>
c001da73:	3c 1c                	cmp    al,0x1c
c001da75:	74 f6                	je     c001da6d <PCI::foundDevice(PCIDeviceInfo)+0xed>
c001da77:	eb a9                	jmp    c001da22 <PCI::foundDevice(PCIDeviceInfo)+0xa2>
c001da79:	83 ec 0c             	sub    esp,0xc
c001da7c:	68 3c 69 02 c0       	push   0xc002693c
c001da81:	e8 97 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001da86:	83 c4 10             	add    esp,0x10
c001da89:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001da90:	74 24                	je     c001dab6 <PCI::foundDevice(PCIDeviceInfo)+0x136>
c001da92:	89 f0                	mov    eax,esi
c001da94:	55                   	push   ebp
c001da95:	0f b6 f0             	movzx  esi,al
c001da98:	55                   	push   ebp
c001da99:	56                   	push   esi
c001da9a:	53                   	push   ebx
c001da9b:	e8 de fd ff ff       	call   c001d87e <PCI::checkBus(unsigned char)>
c001daa0:	83 c4 10             	add    esp,0x10
c001daa3:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001daaa:	0f 84 ea 04 00 00    	je     c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001dab0:	eb 18                	jmp    c001daca <PCI::foundDevice(PCIDeviceInfo)+0x14a>
c001dab2:	3c 1c                	cmp    al,0x1c
c001dab4:	74 0c                	je     c001dac2 <PCI::foundDevice(PCIDeviceInfo)+0x142>
c001dab6:	e4 60                	in     al,0x60
c001dab8:	3c 5a                	cmp    al,0x5a
c001daba:	75 f6                	jne    c001dab2 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dabc:	eb 04                	jmp    c001dac2 <PCI::foundDevice(PCIDeviceInfo)+0x142>
c001dabe:	3c 1c                	cmp    al,0x1c
c001dac0:	75 d0                	jne    c001da92 <PCI::foundDevice(PCIDeviceInfo)+0x112>
c001dac2:	e4 60                	in     al,0x60
c001dac4:	3c 5a                	cmp    al,0x5a
c001dac6:	74 fa                	je     c001dac2 <PCI::foundDevice(PCIDeviceInfo)+0x142>
c001dac8:	eb f4                	jmp    c001dabe <PCI::foundDevice(PCIDeviceInfo)+0x13e>
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	68 43 69 02 c0       	push   0xc0026943
c001dad2:	e8 46 bf fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dad7:	83 c4 10             	add    esp,0x10
c001dada:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dae1:	0f 85 b3 04 00 00    	jne    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001dae7:	e4 60                	in     al,0x60
c001dae9:	3c 1c                	cmp    al,0x1c
c001daeb:	74 04                	je     c001daf1 <PCI::foundDevice(PCIDeviceInfo)+0x171>
c001daed:	3c 5a                	cmp    al,0x5a
c001daef:	75 f6                	jne    c001dae7 <PCI::foundDevice(PCIDeviceInfo)+0x167>
c001daf1:	e4 60                	in     al,0x60
c001daf3:	3c 5a                	cmp    al,0x5a
c001daf5:	74 fa                	je     c001daf1 <PCI::foundDevice(PCIDeviceInfo)+0x171>
c001daf7:	3c 1c                	cmp    al,0x1c
c001daf9:	74 f6                	je     c001daf1 <PCI::foundDevice(PCIDeviceInfo)+0x171>
c001dafb:	e9 9a 04 00 00       	jmp    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001db00:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001db06:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001db0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001db0e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001db12:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001db16:	88 d0                	mov    al,dl
c001db18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001db1d:	74 3b                	je     c001db5a <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001db1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001db23:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001db26:	85 d2                	test   edx,edx
c001db28:	74 24                	je     c001db4e <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001db2a:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001db30:	31 ef                	xor    edi,ebp
c001db32:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001db38:	75 14                	jne    c001db4e <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001db3a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001db40:	75 0c                	jne    c001db4e <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001db42:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001db48:	0f 84 4c 04 00 00    	je     c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001db4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001db52:	8b 12                	mov    edx,DWORD PTR [edx]
c001db54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db58:	eb be                	jmp    c001db18 <PCI::foundDevice(PCIDeviceInfo)+0x198>
c001db5a:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001db5f:	25 00 08 00 00       	and    eax,0x800
c001db64:	66 81 f9 01 06       	cmp    cx,0x601
c001db69:	0f 85 7c 01 00 00    	jne    c001dceb <PCI::foundDevice(PCIDeviceInfo)+0x36b>
c001db6f:	85 c0                	test   eax,eax
c001db71:	75 25                	jne    c001db98 <PCI::foundDevice(PCIDeviceInfo)+0x218>
c001db73:	83 ec 0c             	sub    esp,0xc
c001db76:	68 64 01 00 00       	push   0x164
c001db7b:	e8 43 be fe ff       	call   c00099c3 <malloc>
c001db80:	89 04 24             	mov    DWORD PTR [esp],eax
c001db83:	89 c5                	mov    ebp,eax
c001db85:	e8 3c 19 00 00       	call   c001f4c6 <SATABus::SATABus()>
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001db94:	74 4a                	je     c001dbe0 <PCI::foundDevice(PCIDeviceInfo)+0x260>
c001db96:	eb 2f                	jmp    c001dbc7 <PCI::foundDevice(PCIDeviceInfo)+0x247>
c001db98:	83 ec 0c             	sub    esp,0xc
c001db9b:	68 4a 69 02 c0       	push   0xc002694a
c001dba0:	e8 78 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dbaf:	75 c2                	jne    c001db73 <PCI::foundDevice(PCIDeviceInfo)+0x1f3>
c001dbb1:	e4 60                	in     al,0x60
c001dbb3:	3c 1c                	cmp    al,0x1c
c001dbb5:	74 04                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x23b>
c001dbb7:	3c 5a                	cmp    al,0x5a
c001dbb9:	75 f6                	jne    c001dbb1 <PCI::foundDevice(PCIDeviceInfo)+0x231>
c001dbbb:	e4 60                	in     al,0x60
c001dbbd:	3c 5a                	cmp    al,0x5a
c001dbbf:	74 fa                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x23b>
c001dbc1:	3c 1c                	cmp    al,0x1c
c001dbc3:	74 f6                	je     c001dbbb <PCI::foundDevice(PCIDeviceInfo)+0x23b>
c001dbc5:	eb ac                	jmp    c001db73 <PCI::foundDevice(PCIDeviceInfo)+0x1f3>
c001dbc7:	83 ec 0c             	sub    esp,0xc
c001dbca:	68 50 69 02 c0       	push   0xc0026950
c001dbcf:	e8 49 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dbd4:	83 c4 10             	add    esp,0x10
c001dbd7:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dbde:	74 1b                	je     c001dbfb <PCI::foundDevice(PCIDeviceInfo)+0x27b>
c001dbe0:	57                   	push   edi
c001dbe1:	57                   	push   edi
c001dbe2:	55                   	push   ebp
c001dbe3:	53                   	push   ebx
c001dbe4:	e8 11 05 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c001dbe9:	83 c4 10             	add    esp,0x10
c001dbec:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001dbf3:	74 33                	je     c001dc28 <PCI::foundDevice(PCIDeviceInfo)+0x2a8>
c001dbf5:	eb 18                	jmp    c001dc0f <PCI::foundDevice(PCIDeviceInfo)+0x28f>
c001dbf7:	3c 5a                	cmp    al,0x5a
c001dbf9:	74 0c                	je     c001dc07 <PCI::foundDevice(PCIDeviceInfo)+0x287>
c001dbfb:	e4 60                	in     al,0x60
c001dbfd:	3c 1c                	cmp    al,0x1c
c001dbff:	75 f6                	jne    c001dbf7 <PCI::foundDevice(PCIDeviceInfo)+0x277>
c001dc01:	eb 04                	jmp    c001dc07 <PCI::foundDevice(PCIDeviceInfo)+0x287>
c001dc03:	3c 1c                	cmp    al,0x1c
c001dc05:	75 d9                	jne    c001dbe0 <PCI::foundDevice(PCIDeviceInfo)+0x260>
c001dc07:	e4 60                	in     al,0x60
c001dc09:	3c 5a                	cmp    al,0x5a
c001dc0b:	74 fa                	je     c001dc07 <PCI::foundDevice(PCIDeviceInfo)+0x287>
c001dc0d:	eb f4                	jmp    c001dc03 <PCI::foundDevice(PCIDeviceInfo)+0x283>
c001dc0f:	83 ec 0c             	sub    esp,0xc
c001dc12:	68 58 69 02 c0       	push   0xc0026958
c001dc17:	e8 01 be fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc1c:	83 c4 10             	add    esp,0x10
c001dc1f:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dc26:	74 29                	je     c001dc51 <PCI::foundDevice(PCIDeviceInfo)+0x2d1>
c001dc28:	83 ec 2c             	sub    esp,0x2c
c001dc2b:	b9 09 00 00 00       	mov    ecx,0x9
c001dc30:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dc34:	fc                   	cld    
c001dc35:	89 e7                	mov    edi,esp
c001dc37:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dc39:	55                   	push   ebp
c001dc3a:	e8 cd 03 ff ff       	call   c000e00c <Device::preOpenPCI(PCIDeviceInfo)>
c001dc3f:	83 c4 30             	add    esp,0x30
c001dc42:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001dc49:	74 33                	je     c001dc7e <PCI::foundDevice(PCIDeviceInfo)+0x2fe>
c001dc4b:	eb 18                	jmp    c001dc65 <PCI::foundDevice(PCIDeviceInfo)+0x2e5>
c001dc4d:	3c 1c                	cmp    al,0x1c
c001dc4f:	74 0c                	je     c001dc5d <PCI::foundDevice(PCIDeviceInfo)+0x2dd>
c001dc51:	e4 60                	in     al,0x60
c001dc53:	3c 5a                	cmp    al,0x5a
c001dc55:	75 f6                	jne    c001dc4d <PCI::foundDevice(PCIDeviceInfo)+0x2cd>
c001dc57:	eb 04                	jmp    c001dc5d <PCI::foundDevice(PCIDeviceInfo)+0x2dd>
c001dc59:	3c 1c                	cmp    al,0x1c
c001dc5b:	75 cb                	jne    c001dc28 <PCI::foundDevice(PCIDeviceInfo)+0x2a8>
c001dc5d:	e4 60                	in     al,0x60
c001dc5f:	3c 5a                	cmp    al,0x5a
c001dc61:	74 fa                	je     c001dc5d <PCI::foundDevice(PCIDeviceInfo)+0x2dd>
c001dc63:	eb f4                	jmp    c001dc59 <PCI::foundDevice(PCIDeviceInfo)+0x2d9>
c001dc65:	83 ec 0c             	sub    esp,0xc
c001dc68:	68 60 69 02 c0       	push   0xc0026960
c001dc6d:	e8 ab bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dc72:	83 c4 10             	add    esp,0x10
c001dc75:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dc7c:	74 23                	je     c001dca1 <PCI::foundDevice(PCIDeviceInfo)+0x321>
c001dc7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc81:	6a 00                	push   0x0
c001dc83:	6a 00                	push   0x0
c001dc85:	6a 00                	push   0x0
c001dc87:	55                   	push   ebp
c001dc88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc8b:	83 c4 10             	add    esp,0x10
c001dc8e:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001dc95:	0f 84 ff 02 00 00    	je     c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001dc9b:	eb 18                	jmp    c001dcb5 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dc9d:	3c 1c                	cmp    al,0x1c
c001dc9f:	74 0c                	je     c001dcad <PCI::foundDevice(PCIDeviceInfo)+0x32d>
c001dca1:	e4 60                	in     al,0x60
c001dca3:	3c 5a                	cmp    al,0x5a
c001dca5:	75 f6                	jne    c001dc9d <PCI::foundDevice(PCIDeviceInfo)+0x31d>
c001dca7:	eb 04                	jmp    c001dcad <PCI::foundDevice(PCIDeviceInfo)+0x32d>
c001dca9:	3c 1c                	cmp    al,0x1c
c001dcab:	75 d1                	jne    c001dc7e <PCI::foundDevice(PCIDeviceInfo)+0x2fe>
c001dcad:	e4 60                	in     al,0x60
c001dcaf:	3c 5a                	cmp    al,0x5a
c001dcb1:	74 fa                	je     c001dcad <PCI::foundDevice(PCIDeviceInfo)+0x32d>
c001dcb3:	eb f4                	jmp    c001dca9 <PCI::foundDevice(PCIDeviceInfo)+0x329>
c001dcb5:	83 ec 0c             	sub    esp,0xc
c001dcb8:	68 68 69 02 c0       	push   0xc0026968
c001dcbd:	e8 5b bd fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dcc2:	83 c4 10             	add    esp,0x10
c001dcc5:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dccc:	0f 85 c8 02 00 00    	jne    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001dcd2:	e4 60                	in     al,0x60
c001dcd4:	3c 5a                	cmp    al,0x5a
c001dcd6:	74 04                	je     c001dcdc <PCI::foundDevice(PCIDeviceInfo)+0x35c>
c001dcd8:	3c 1c                	cmp    al,0x1c
c001dcda:	75 f6                	jne    c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0x352>
c001dcdc:	e4 60                	in     al,0x60
c001dcde:	3c 5a                	cmp    al,0x5a
c001dce0:	74 fa                	je     c001dcdc <PCI::foundDevice(PCIDeviceInfo)+0x35c>
c001dce2:	3c 1c                	cmp    al,0x1c
c001dce4:	74 f6                	je     c001dcdc <PCI::foundDevice(PCIDeviceInfo)+0x35c>
c001dce6:	e9 af 02 00 00       	jmp    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001dceb:	66 81 f9 01 01       	cmp    cx,0x101
c001dcf0:	0f 85 7c 01 00 00    	jne    c001de72 <PCI::foundDevice(PCIDeviceInfo)+0x4f2>
c001dcf6:	85 c0                	test   eax,eax
c001dcf8:	75 25                	jne    c001dd1f <PCI::foundDevice(PCIDeviceInfo)+0x39f>
c001dcfa:	83 ec 0c             	sub    esp,0xc
c001dcfd:	68 70 02 00 00       	push   0x270
c001dd02:	e8 bc bc fe ff       	call   c00099c3 <malloc>
c001dd07:	89 04 24             	mov    DWORD PTR [esp],eax
c001dd0a:	89 c5                	mov    ebp,eax
c001dd0c:	e8 69 0c 00 00       	call   c001e97a <IDE::IDE()>
c001dd11:	83 c4 10             	add    esp,0x10
c001dd14:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001dd1b:	74 4a                	je     c001dd67 <PCI::foundDevice(PCIDeviceInfo)+0x3e7>
c001dd1d:	eb 2f                	jmp    c001dd4e <PCI::foundDevice(PCIDeviceInfo)+0x3ce>
c001dd1f:	83 ec 0c             	sub    esp,0xc
c001dd22:	68 70 69 02 c0       	push   0xc0026970
c001dd27:	e8 f1 bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dd2c:	83 c4 10             	add    esp,0x10
c001dd2f:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dd36:	75 c2                	jne    c001dcfa <PCI::foundDevice(PCIDeviceInfo)+0x37a>
c001dd38:	e4 60                	in     al,0x60
c001dd3a:	3c 5a                	cmp    al,0x5a
c001dd3c:	74 04                	je     c001dd42 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dd3e:	3c 1c                	cmp    al,0x1c
c001dd40:	75 f6                	jne    c001dd38 <PCI::foundDevice(PCIDeviceInfo)+0x3b8>
c001dd42:	e4 60                	in     al,0x60
c001dd44:	3c 5a                	cmp    al,0x5a
c001dd46:	74 fa                	je     c001dd42 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dd48:	3c 1c                	cmp    al,0x1c
c001dd4a:	74 f6                	je     c001dd42 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001dd4c:	eb ac                	jmp    c001dcfa <PCI::foundDevice(PCIDeviceInfo)+0x37a>
c001dd4e:	83 ec 0c             	sub    esp,0xc
c001dd51:	68 77 69 02 c0       	push   0xc0026977
c001dd56:	e8 c2 bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dd5b:	83 c4 10             	add    esp,0x10
c001dd5e:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dd65:	74 1b                	je     c001dd82 <PCI::foundDevice(PCIDeviceInfo)+0x402>
c001dd67:	56                   	push   esi
c001dd68:	56                   	push   esi
c001dd69:	55                   	push   ebp
c001dd6a:	53                   	push   ebx
c001dd6b:	e8 8a 03 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001dd7a:	74 33                	je     c001ddaf <PCI::foundDevice(PCIDeviceInfo)+0x42f>
c001dd7c:	eb 18                	jmp    c001dd96 <PCI::foundDevice(PCIDeviceInfo)+0x416>
c001dd7e:	3c 1c                	cmp    al,0x1c
c001dd80:	74 0c                	je     c001dd8e <PCI::foundDevice(PCIDeviceInfo)+0x40e>
c001dd82:	e4 60                	in     al,0x60
c001dd84:	3c 5a                	cmp    al,0x5a
c001dd86:	75 f6                	jne    c001dd7e <PCI::foundDevice(PCIDeviceInfo)+0x3fe>
c001dd88:	eb 04                	jmp    c001dd8e <PCI::foundDevice(PCIDeviceInfo)+0x40e>
c001dd8a:	3c 1c                	cmp    al,0x1c
c001dd8c:	75 d9                	jne    c001dd67 <PCI::foundDevice(PCIDeviceInfo)+0x3e7>
c001dd8e:	e4 60                	in     al,0x60
c001dd90:	3c 5a                	cmp    al,0x5a
c001dd92:	74 fa                	je     c001dd8e <PCI::foundDevice(PCIDeviceInfo)+0x40e>
c001dd94:	eb f4                	jmp    c001dd8a <PCI::foundDevice(PCIDeviceInfo)+0x40a>
c001dd96:	83 ec 0c             	sub    esp,0xc
c001dd99:	68 7e 69 02 c0       	push   0xc002697e
c001dd9e:	e8 7a bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dda3:	83 c4 10             	add    esp,0x10
c001dda6:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001ddad:	74 29                	je     c001ddd8 <PCI::foundDevice(PCIDeviceInfo)+0x458>
c001ddaf:	83 ec 2c             	sub    esp,0x2c
c001ddb2:	b9 09 00 00 00       	mov    ecx,0x9
c001ddb7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ddbb:	fc                   	cld    
c001ddbc:	89 e7                	mov    edi,esp
c001ddbe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ddc0:	55                   	push   ebp
c001ddc1:	e8 46 02 ff ff       	call   c000e00c <Device::preOpenPCI(PCIDeviceInfo)>
c001ddc6:	83 c4 30             	add    esp,0x30
c001ddc9:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001ddd0:	74 33                	je     c001de05 <PCI::foundDevice(PCIDeviceInfo)+0x485>
c001ddd2:	eb 18                	jmp    c001ddec <PCI::foundDevice(PCIDeviceInfo)+0x46c>
c001ddd4:	3c 1c                	cmp    al,0x1c
c001ddd6:	74 0c                	je     c001dde4 <PCI::foundDevice(PCIDeviceInfo)+0x464>
c001ddd8:	e4 60                	in     al,0x60
c001ddda:	3c 5a                	cmp    al,0x5a
c001dddc:	75 f6                	jne    c001ddd4 <PCI::foundDevice(PCIDeviceInfo)+0x454>
c001ddde:	eb 04                	jmp    c001dde4 <PCI::foundDevice(PCIDeviceInfo)+0x464>
c001dde0:	3c 1c                	cmp    al,0x1c
c001dde2:	75 cb                	jne    c001ddaf <PCI::foundDevice(PCIDeviceInfo)+0x42f>
c001dde4:	e4 60                	in     al,0x60
c001dde6:	3c 5a                	cmp    al,0x5a
c001dde8:	74 fa                	je     c001dde4 <PCI::foundDevice(PCIDeviceInfo)+0x464>
c001ddea:	eb f4                	jmp    c001dde0 <PCI::foundDevice(PCIDeviceInfo)+0x460>
c001ddec:	83 ec 0c             	sub    esp,0xc
c001ddef:	68 85 69 02 c0       	push   0xc0026985
c001ddf4:	e8 24 bc fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001ddf9:	83 c4 10             	add    esp,0x10
c001ddfc:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001de03:	74 23                	je     c001de28 <PCI::foundDevice(PCIDeviceInfo)+0x4a8>
c001de05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001de08:	6a 00                	push   0x0
c001de0a:	6a 00                	push   0x0
c001de0c:	6a 00                	push   0x0
c001de0e:	55                   	push   ebp
c001de0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001de12:	83 c4 10             	add    esp,0x10
c001de15:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001de1c:	0f 84 78 01 00 00    	je     c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001de22:	eb 18                	jmp    c001de3c <PCI::foundDevice(PCIDeviceInfo)+0x4bc>
c001de24:	3c 1c                	cmp    al,0x1c
c001de26:	74 0c                	je     c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x4b4>
c001de28:	e4 60                	in     al,0x60
c001de2a:	3c 5a                	cmp    al,0x5a
c001de2c:	75 f6                	jne    c001de24 <PCI::foundDevice(PCIDeviceInfo)+0x4a4>
c001de2e:	eb 04                	jmp    c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x4b4>
c001de30:	3c 1c                	cmp    al,0x1c
c001de32:	75 d1                	jne    c001de05 <PCI::foundDevice(PCIDeviceInfo)+0x485>
c001de34:	e4 60                	in     al,0x60
c001de36:	3c 5a                	cmp    al,0x5a
c001de38:	74 fa                	je     c001de34 <PCI::foundDevice(PCIDeviceInfo)+0x4b4>
c001de3a:	eb f4                	jmp    c001de30 <PCI::foundDevice(PCIDeviceInfo)+0x4b0>
c001de3c:	83 ec 0c             	sub    esp,0xc
c001de3f:	68 8c 69 02 c0       	push   0xc002698c
c001de44:	e8 d4 bb fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001de53:	0f 85 41 01 00 00    	jne    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001de59:	e4 60                	in     al,0x60
c001de5b:	3c 5a                	cmp    al,0x5a
c001de5d:	74 04                	je     c001de63 <PCI::foundDevice(PCIDeviceInfo)+0x4e3>
c001de5f:	3c 1c                	cmp    al,0x1c
c001de61:	75 f6                	jne    c001de59 <PCI::foundDevice(PCIDeviceInfo)+0x4d9>
c001de63:	e4 60                	in     al,0x60
c001de65:	3c 5a                	cmp    al,0x5a
c001de67:	74 fa                	je     c001de63 <PCI::foundDevice(PCIDeviceInfo)+0x4e3>
c001de69:	3c 1c                	cmp    al,0x1c
c001de6b:	74 f6                	je     c001de63 <PCI::foundDevice(PCIDeviceInfo)+0x4e3>
c001de6d:	e9 28 01 00 00       	jmp    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001de72:	85 c0                	test   eax,eax
c001de74:	75 2a                	jne    c001dea0 <PCI::foundDevice(PCIDeviceInfo)+0x520>
c001de76:	83 ec 0c             	sub    esp,0xc
c001de79:	68 58 01 00 00       	push   0x158
c001de7e:	e8 40 bb fe ff       	call   c00099c3 <malloc>
c001de83:	5a                   	pop    edx
c001de84:	89 c5                	mov    ebp,eax
c001de86:	59                   	pop    ecx
c001de87:	68 93 69 02 c0       	push   0xc0026993
c001de8c:	50                   	push   eax
c001de8d:	e8 72 05 ff ff       	call   c000e404 <DriverlessDevice::DriverlessDevice(char const*)>
c001de92:	83 c4 10             	add    esp,0x10
c001de95:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001de9c:	74 4a                	je     c001dee8 <PCI::foundDevice(PCIDeviceInfo)+0x568>
c001de9e:	eb 2f                	jmp    c001decf <PCI::foundDevice(PCIDeviceInfo)+0x54f>
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	68 ad 69 02 c0       	push   0xc00269ad
c001dea8:	e8 70 bb fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dead:	83 c4 10             	add    esp,0x10
c001deb0:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001deb7:	75 bd                	jne    c001de76 <PCI::foundDevice(PCIDeviceInfo)+0x4f6>
c001deb9:	e4 60                	in     al,0x60
c001debb:	3c 5a                	cmp    al,0x5a
c001debd:	74 04                	je     c001dec3 <PCI::foundDevice(PCIDeviceInfo)+0x543>
c001debf:	3c 1c                	cmp    al,0x1c
c001dec1:	75 f6                	jne    c001deb9 <PCI::foundDevice(PCIDeviceInfo)+0x539>
c001dec3:	e4 60                	in     al,0x60
c001dec5:	3c 5a                	cmp    al,0x5a
c001dec7:	74 fa                	je     c001dec3 <PCI::foundDevice(PCIDeviceInfo)+0x543>
c001dec9:	3c 1c                	cmp    al,0x1c
c001decb:	74 f6                	je     c001dec3 <PCI::foundDevice(PCIDeviceInfo)+0x543>
c001decd:	eb a7                	jmp    c001de76 <PCI::foundDevice(PCIDeviceInfo)+0x4f6>
c001decf:	83 ec 0c             	sub    esp,0xc
c001ded2:	68 b4 69 02 c0       	push   0xc00269b4
c001ded7:	e8 41 bb fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001dedc:	83 c4 10             	add    esp,0x10
c001dedf:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001dee6:	74 1b                	je     c001df03 <PCI::foundDevice(PCIDeviceInfo)+0x583>
c001dee8:	50                   	push   eax
c001dee9:	50                   	push   eax
c001deea:	55                   	push   ebp
c001deeb:	53                   	push   ebx
c001deec:	e8 09 02 ff ff       	call   c000e0fa <Device::addChild(Device*)>
c001def1:	83 c4 10             	add    esp,0x10
c001def4:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001defb:	74 33                	je     c001df30 <PCI::foundDevice(PCIDeviceInfo)+0x5b0>
c001defd:	eb 18                	jmp    c001df17 <PCI::foundDevice(PCIDeviceInfo)+0x597>
c001deff:	3c 1c                	cmp    al,0x1c
c001df01:	74 0c                	je     c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x58f>
c001df03:	e4 60                	in     al,0x60
c001df05:	3c 5a                	cmp    al,0x5a
c001df07:	75 f6                	jne    c001deff <PCI::foundDevice(PCIDeviceInfo)+0x57f>
c001df09:	eb 04                	jmp    c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x58f>
c001df0b:	3c 1c                	cmp    al,0x1c
c001df0d:	75 d9                	jne    c001dee8 <PCI::foundDevice(PCIDeviceInfo)+0x568>
c001df0f:	e4 60                	in     al,0x60
c001df11:	3c 5a                	cmp    al,0x5a
c001df13:	74 fa                	je     c001df0f <PCI::foundDevice(PCIDeviceInfo)+0x58f>
c001df15:	eb f4                	jmp    c001df0b <PCI::foundDevice(PCIDeviceInfo)+0x58b>
c001df17:	83 ec 0c             	sub    esp,0xc
c001df1a:	68 bb 69 02 c0       	push   0xc00269bb
c001df1f:	e8 f9 ba fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001df24:	83 c4 10             	add    esp,0x10
c001df27:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001df2e:	74 29                	je     c001df59 <PCI::foundDevice(PCIDeviceInfo)+0x5d9>
c001df30:	83 ec 2c             	sub    esp,0x2c
c001df33:	b9 09 00 00 00       	mov    ecx,0x9
c001df38:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df3c:	fc                   	cld    
c001df3d:	89 e7                	mov    edi,esp
c001df3f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df41:	55                   	push   ebp
c001df42:	e8 c5 00 ff ff       	call   c000e00c <Device::preOpenPCI(PCIDeviceInfo)>
c001df47:	83 c4 30             	add    esp,0x30
c001df4a:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001df51:	74 47                	je     c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001df53:	eb 18                	jmp    c001df6d <PCI::foundDevice(PCIDeviceInfo)+0x5ed>
c001df55:	3c 5a                	cmp    al,0x5a
c001df57:	74 0c                	je     c001df65 <PCI::foundDevice(PCIDeviceInfo)+0x5e5>
c001df59:	e4 60                	in     al,0x60
c001df5b:	3c 1c                	cmp    al,0x1c
c001df5d:	75 f6                	jne    c001df55 <PCI::foundDevice(PCIDeviceInfo)+0x5d5>
c001df5f:	eb 04                	jmp    c001df65 <PCI::foundDevice(PCIDeviceInfo)+0x5e5>
c001df61:	3c 1c                	cmp    al,0x1c
c001df63:	75 cb                	jne    c001df30 <PCI::foundDevice(PCIDeviceInfo)+0x5b0>
c001df65:	e4 60                	in     al,0x60
c001df67:	3c 5a                	cmp    al,0x5a
c001df69:	74 fa                	je     c001df65 <PCI::foundDevice(PCIDeviceInfo)+0x5e5>
c001df6b:	eb f4                	jmp    c001df61 <PCI::foundDevice(PCIDeviceInfo)+0x5e1>
c001df6d:	83 ec 0c             	sub    esp,0xc
c001df70:	68 c2 69 02 c0       	push   0xc00269c2
c001df75:	e8 a3 ba fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001df84:	75 14                	jne    c001df9a <PCI::foundDevice(PCIDeviceInfo)+0x61a>
c001df86:	e4 60                	in     al,0x60
c001df88:	3c 5a                	cmp    al,0x5a
c001df8a:	74 04                	je     c001df90 <PCI::foundDevice(PCIDeviceInfo)+0x610>
c001df8c:	3c 1c                	cmp    al,0x1c
c001df8e:	75 f6                	jne    c001df86 <PCI::foundDevice(PCIDeviceInfo)+0x606>
c001df90:	e4 60                	in     al,0x60
c001df92:	3c 5a                	cmp    al,0x5a
c001df94:	74 fa                	je     c001df90 <PCI::foundDevice(PCIDeviceInfo)+0x610>
c001df96:	3c 1c                	cmp    al,0x1c
c001df98:	74 f6                	je     c001df90 <PCI::foundDevice(PCIDeviceInfo)+0x610>
c001df9a:	83 c4 1c             	add    esp,0x1c
c001df9d:	5b                   	pop    ebx
c001df9e:	5e                   	pop    esi
c001df9f:	5f                   	pop    edi
c001dfa0:	5d                   	pop    ebp
c001dfa1:	c3                   	ret    

c001dfa2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001dfa2:	55                   	push   ebp
c001dfa3:	57                   	push   edi
c001dfa4:	56                   	push   esi
c001dfa5:	53                   	push   ebx
c001dfa6:	81 ec a4 00 00 00    	sub    esp,0xa4
c001dfac:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c001dfb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfb7:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
c001dfbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dfc2:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c001dfc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dfcd:	68 c9 69 02 c0       	push   0xc00269c9
c001dfd2:	8d 5c 24 38          	lea    ebx,[esp+0x38]
c001dfd6:	53                   	push   ebx
c001dfd7:	e8 64 27 fe ff       	call   c0000740 <strcpy>
c001dfdc:	0f b6 4c 24 14       	movzx  ecx,BYTE PTR [esp+0x14]
c001dfe1:	b2 64                	mov    dl,0x64
c001dfe3:	89 c8                	mov    eax,ecx
c001dfe5:	f6 f2                	div    dl
c001dfe7:	b2 0a                	mov    dl,0xa
c001dfe9:	83 c0 30             	add    eax,0x30
c001dfec:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001dff0:	88 44 24 3c          	mov    BYTE PTR [esp+0x3c],al
c001dff4:	83 c4 10             	add    esp,0x10
c001dff7:	89 c8                	mov    eax,ecx
c001dff9:	f6 f2                	div    dl
c001dffb:	89 c1                	mov    ecx,eax
c001dffd:	0f b6 c0             	movzx  eax,al
c001e000:	88 e9                	mov    cl,ch
c001e002:	f6 f2                	div    dl
c001e004:	88 e0                	mov    al,ah
c001e006:	83 c0 30             	add    eax,0x30
c001e009:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001e00d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e011:	8d 41 30             	lea    eax,[ecx+0x30]
c001e014:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001e018:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001e01c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e021:	f6 f2                	div    dl
c001e023:	89 c1                	mov    ecx,eax
c001e025:	0f b6 c0             	movzx  eax,al
c001e028:	88 e9                	mov    cl,ch
c001e02a:	f6 f2                	div    dl
c001e02c:	88 e0                	mov    al,ah
c001e02e:	83 c0 30             	add    eax,0x30
c001e031:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c001e035:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001e039:	8d 41 30             	lea    eax,[ecx+0x30]
c001e03c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001e040:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001e044:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e049:	f6 f2                	div    dl
c001e04b:	89 c1                	mov    ecx,eax
c001e04d:	0f b6 c0             	movzx  eax,al
c001e050:	88 e9                	mov    cl,ch
c001e052:	f6 f2                	div    dl
c001e054:	88 e0                	mov    al,ah
c001e056:	83 c0 30             	add    eax,0x30
c001e059:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e060:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e064:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e068:	8d 41 30             	lea    eax,[ecx+0x30]
c001e06b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001e06f:	88 44 24 34          	mov    BYTE PTR [esp+0x34],al
c001e073:	74 29                	je     c001e09e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xfc>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	53                   	push   ebx
c001e079:	e8 9f b9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e088:	75 14                	jne    c001e09e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xfc>
c001e08a:	e4 60                	in     al,0x60
c001e08c:	3c 1c                	cmp    al,0x1c
c001e08e:	74 04                	je     c001e094 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf2>
c001e090:	3c 5a                	cmp    al,0x5a
c001e092:	75 f6                	jne    c001e08a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xe8>
c001e094:	e4 60                	in     al,0x60
c001e096:	3c 5a                	cmp    al,0x5a
c001e098:	74 fa                	je     c001e094 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf2>
c001e09a:	3c 1c                	cmp    al,0x1c
c001e09c:	74 f6                	je     c001e094 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf2>
c001e09e:	0f b6 6c 24 0c       	movzx  ebp,BYTE PTR [esp+0xc]
c001e0a3:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c001e0a8:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c001e0ad:	83 ec 0c             	sub    esp,0xc
c001e0b0:	6a 0c                	push   0xc
c001e0b2:	55                   	push   ebp
c001e0b3:	53                   	push   ebx
c001e0b4:	57                   	push   edi
c001e0b5:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e0bc:	e8 a9 f0 ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0c1:	83 c4 20             	add    esp,0x20
c001e0c4:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e0cb:	74 2d                	je     c001e0fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x158>
c001e0cd:	83 ec 0c             	sub    esp,0xc
c001e0d0:	68 e4 69 02 c0       	push   0xc00269e4
c001e0d5:	e8 43 b9 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e0da:	83 c4 10             	add    esp,0x10
c001e0dd:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e0e4:	75 14                	jne    c001e0fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x158>
c001e0e6:	e4 60                	in     al,0x60
c001e0e8:	3c 1c                	cmp    al,0x1c
c001e0ea:	74 04                	je     c001e0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x14e>
c001e0ec:	3c 5a                	cmp    al,0x5a
c001e0ee:	75 f6                	jne    c001e0e6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x144>
c001e0f0:	e4 60                	in     al,0x60
c001e0f2:	3c 5a                	cmp    al,0x5a
c001e0f4:	74 fa                	je     c001e0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x14e>
c001e0f6:	3c 1c                	cmp    al,0x1c
c001e0f8:	74 f6                	je     c001e0f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x14e>
c001e0fa:	55                   	push   ebp
c001e0fb:	53                   	push   ebx
c001e0fc:	57                   	push   edi
c001e0fd:	ff b4 24 bc 00 00 00 	push   DWORD PTR [esp+0xbc]
c001e104:	e8 55 f1 ff ff       	call   c001d25e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e109:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001e10e:	55                   	push   ebp
c001e10f:	53                   	push   ebx
c001e110:	57                   	push   edi
c001e111:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e118:	e8 d7 f1 ff ff       	call   c001d2f4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e11d:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e121:	83 c4 20             	add    esp,0x20
c001e124:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e12b:	74 2d                	je     c001e15a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1b8>
c001e12d:	83 ec 0c             	sub    esp,0xc
c001e130:	68 ea 69 02 c0       	push   0xc00269ea
c001e135:	e8 e3 b8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e13a:	83 c4 10             	add    esp,0x10
c001e13d:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e144:	75 14                	jne    c001e15a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1b8>
c001e146:	e4 60                	in     al,0x60
c001e148:	3c 1c                	cmp    al,0x1c
c001e14a:	74 04                	je     c001e150 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1ae>
c001e14c:	3c 5a                	cmp    al,0x5a
c001e14e:	75 f6                	jne    c001e146 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1a4>
c001e150:	e4 60                	in     al,0x60
c001e152:	3c 5a                	cmp    al,0x5a
c001e154:	74 fa                	je     c001e150 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1ae>
c001e156:	3c 1c                	cmp    al,0x1c
c001e158:	74 f6                	je     c001e150 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x1ae>
c001e15a:	83 ec 0c             	sub    esp,0xc
c001e15d:	6a 3c                	push   0x3c
c001e15f:	55                   	push   ebp
c001e160:	53                   	push   ebx
c001e161:	57                   	push   edi
c001e162:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e169:	e8 fc ef ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e16e:	0f b6 c4             	movzx  eax,ah
c001e171:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e175:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c001e179:	88 84 24 ad 00 00 00 	mov    BYTE PTR [esp+0xad],al
c001e180:	83 c4 20             	add    esp,0x20
c001e183:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e18a:	74 2d                	je     c001e1b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x217>
c001e18c:	83 ec 0c             	sub    esp,0xc
c001e18f:	68 ef 69 02 c0       	push   0xc00269ef
c001e194:	e8 84 b8 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e1a3:	75 14                	jne    c001e1b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x217>
c001e1a5:	e4 60                	in     al,0x60
c001e1a7:	3c 1c                	cmp    al,0x1c
c001e1a9:	74 04                	je     c001e1af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x20d>
c001e1ab:	3c 5a                	cmp    al,0x5a
c001e1ad:	75 f6                	jne    c001e1a5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x203>
c001e1af:	e4 60                	in     al,0x60
c001e1b1:	3c 5a                	cmp    al,0x5a
c001e1b3:	74 fa                	je     c001e1af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x20d>
c001e1b5:	3c 1c                	cmp    al,0x1c
c001e1b7:	74 f6                	je     c001e1af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x20d>
c001e1b9:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001e1be:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1c4:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e1cb:	0f 84 9b 01 00 00    	je     c001e36c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ca>
c001e1d1:	31 f6                	xor    esi,esi
c001e1d3:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001e1d8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1de:	39 b0 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],esi
c001e1e4:	0f 8e 82 01 00 00    	jle    c001e36c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ca>
c001e1ea:	52                   	push   edx
c001e1eb:	52                   	push   edx
c001e1ec:	68 f3 69 02 c0       	push   0xc00269f3
c001e1f1:	8d 44 24 58          	lea    eax,[esp+0x58]
c001e1f5:	50                   	push   eax
c001e1f6:	e8 45 25 fe ff       	call   c0000740 <strcpy>
c001e1fb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001e1ff:	b9 0a 00 00 00       	mov    ecx,0xa
c001e204:	88 44 24 5c          	mov    BYTE PTR [esp+0x5c],al
c001e208:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001e20c:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001e210:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001e214:	88 44 24 5e          	mov    BYTE PTR [esp+0x5e],al
c001e218:	8a 44 24 26          	mov    al,BYTE PTR [esp+0x26]
c001e21c:	88 44 24 60          	mov    BYTE PTR [esp+0x60],al
c001e220:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001e224:	88 44 24 61          	mov    BYTE PTR [esp+0x61],al
c001e228:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e22c:	88 44 24 63          	mov    BYTE PTR [esp+0x63],al
c001e230:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c001e234:	88 44 24 64          	mov    BYTE PTR [esp+0x64],al
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	89 f0                	mov    eax,esi
c001e23d:	99                   	cdq    
c001e23e:	f7 f9                	idiv   ecx
c001e240:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e244:	99                   	cdq    
c001e245:	f7 f9                	idiv   ecx
c001e247:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001e24b:	83 c2 30             	add    edx,0x30
c001e24e:	83 c0 30             	add    eax,0x30
c001e251:	88 54 24 56          	mov    BYTE PTR [esp+0x56],dl
c001e255:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
c001e259:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e260:	74 2d                	je     c001e28f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2ed>
c001e262:	83 ec 0c             	sub    esp,0xc
c001e265:	8d 44 24 58          	lea    eax,[esp+0x58]
c001e269:	50                   	push   eax
c001e26a:	e8 ae b7 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e26f:	83 c4 10             	add    esp,0x10
c001e272:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e279:	75 14                	jne    c001e28f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2ed>
c001e27b:	e4 60                	in     al,0x60
c001e27d:	3c 5a                	cmp    al,0x5a
c001e27f:	74 04                	je     c001e285 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2e3>
c001e281:	3c 1c                	cmp    al,0x1c
c001e283:	75 f6                	jne    c001e27b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2d9>
c001e285:	e4 60                	in     al,0x60
c001e287:	3c 5a                	cmp    al,0x5a
c001e289:	74 fa                	je     c001e285 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2e3>
c001e28b:	3c 1c                	cmp    al,0x1c
c001e28d:	74 f6                	je     c001e285 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2e3>
c001e28f:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001e294:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e29a:	8d 04 f0             	lea    eax,[eax+esi*8]
c001e29d:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e2a4:	39 d3                	cmp    ebx,edx
c001e2a6:	0f 85 ba 00 00 00    	jne    c001e366 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3c4>
c001e2ac:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e2b3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001e2b6:	0f 85 aa 00 00 00    	jne    c001e366 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3c4>
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	68 22 6a 02 c0       	push   0xc0026a22
c001e2c4:	e8 ea e9 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001e2c9:	83 c4 10             	add    esp,0x10
c001e2cc:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e2d3:	74 2d                	je     c001e302 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x360>
c001e2d5:	83 ec 0c             	sub    esp,0xc
c001e2d8:	68 13 69 02 c0       	push   0xc0026913
c001e2dd:	e8 3b b7 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e2e2:	83 c4 10             	add    esp,0x10
c001e2e5:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e2ec:	75 14                	jne    c001e302 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x360>
c001e2ee:	e4 60                	in     al,0x60
c001e2f0:	3c 1c                	cmp    al,0x1c
c001e2f2:	74 04                	je     c001e2f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x356>
c001e2f4:	3c 5a                	cmp    al,0x5a
c001e2f6:	75 f6                	jne    c001e2ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x34c>
c001e2f8:	e4 60                	in     al,0x60
c001e2fa:	3c 5a                	cmp    al,0x5a
c001e2fc:	74 fa                	je     c001e2f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x356>
c001e2fe:	3c 1c                	cmp    al,0x1c
c001e300:	74 f6                	je     c001e2f8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x356>
c001e302:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c001e307:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e30e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e314:	8a 84 f0 5f 01 00 00 	mov    al,BYTE PTR [eax+esi*8+0x15f]
c001e31b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001e31f:	74 2d                	je     c001e34e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ac>
c001e321:	83 ec 0c             	sub    esp,0xc
c001e324:	68 85 6a 02 c0       	push   0xc0026a85
c001e329:	e8 ef b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e32e:	83 c4 10             	add    esp,0x10
c001e331:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e338:	75 14                	jne    c001e34e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ac>
c001e33a:	e4 60                	in     al,0x60
c001e33c:	3c 5a                	cmp    al,0x5a
c001e33e:	74 04                	je     c001e344 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3a2>
c001e340:	3c 1c                	cmp    al,0x1c
c001e342:	75 f6                	jne    c001e33a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x398>
c001e344:	e4 60                	in     al,0x60
c001e346:	3c 5a                	cmp    al,0x5a
c001e348:	74 fa                	je     c001e344 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3a2>
c001e34a:	3c 1c                	cmp    al,0x1c
c001e34c:	74 f6                	je     c001e344 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3a2>
c001e34e:	0f b6 44 24 12       	movzx  eax,BYTE PTR [esp+0x12]
c001e353:	50                   	push   eax
c001e354:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001e358:	53                   	push   ebx
c001e359:	68 47 6a 02 c0       	push   0xc0026a47
c001e35e:	e8 50 e9 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001e363:	83 c4 10             	add    esp,0x10
c001e366:	46                   	inc    esi
c001e367:	e9 67 fe ff ff       	jmp    c001e1d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x231>
c001e36c:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e373:	74 2d                	je     c001e3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x400>
c001e375:	83 ec 0c             	sub    esp,0xc
c001e378:	68 62 6a 02 c0       	push   0xc0026a62
c001e37d:	e8 9b b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e382:	83 c4 10             	add    esp,0x10
c001e385:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e38c:	75 14                	jne    c001e3a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x400>
c001e38e:	e4 60                	in     al,0x60
c001e390:	3c 5a                	cmp    al,0x5a
c001e392:	74 04                	je     c001e398 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3f6>
c001e394:	3c 1c                	cmp    al,0x1c
c001e396:	75 f6                	jne    c001e38e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3ec>
c001e398:	e4 60                	in     al,0x60
c001e39a:	3c 5a                	cmp    al,0x5a
c001e39c:	74 fa                	je     c001e398 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3f6>
c001e39e:	3c 1c                	cmp    al,0x1c
c001e3a0:	74 f6                	je     c001e398 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x3f6>
c001e3a2:	31 f6                	xor    esi,esi
c001e3a4:	50                   	push   eax
c001e3a5:	50                   	push   eax
c001e3a6:	68 65 6a 02 c0       	push   0xc0026a65
c001e3ab:	8d 44 24 58          	lea    eax,[esp+0x58]
c001e3af:	50                   	push   eax
c001e3b0:	e8 8b 23 fe ff       	call   c0000740 <strcpy>
c001e3b5:	83 c4 10             	add    esp,0x10
c001e3b8:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e3bf:	74 2d                	je     c001e3ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x44c>
c001e3c1:	83 ec 0c             	sub    esp,0xc
c001e3c4:	8d 44 24 58          	lea    eax,[esp+0x58]
c001e3c8:	50                   	push   eax
c001e3c9:	e8 4f b6 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e3ce:	83 c4 10             	add    esp,0x10
c001e3d1:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e3d8:	75 14                	jne    c001e3ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x44c>
c001e3da:	e4 60                	in     al,0x60
c001e3dc:	3c 5a                	cmp    al,0x5a
c001e3de:	74 04                	je     c001e3e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x442>
c001e3e0:	3c 1c                	cmp    al,0x1c
c001e3e2:	75 f6                	jne    c001e3da <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x438>
c001e3e4:	e4 60                	in     al,0x60
c001e3e6:	3c 5a                	cmp    al,0x5a
c001e3e8:	74 fa                	je     c001e3e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x442>
c001e3ea:	3c 1c                	cmp    al,0x1c
c001e3ec:	74 f6                	je     c001e3e4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x442>
c001e3ee:	fe 44 24 4f          	inc    BYTE PTR [esp+0x4f]
c001e3f2:	83 ec 0c             	sub    esp,0xc
c001e3f5:	55                   	push   ebp
c001e3f6:	53                   	push   ebx
c001e3f7:	57                   	push   edi
c001e3f8:	56                   	push   esi
c001e3f9:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e400:	e8 3b ef ff ff       	call   c001d340 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e405:	89 84 b4 94 00 00 00 	mov    DWORD PTR [esp+esi*4+0x94],eax
c001e40c:	46                   	inc    esi
c001e40d:	83 c4 20             	add    esp,0x20
c001e410:	83 fe 06             	cmp    esi,0x6
c001e413:	75 a3                	jne    c001e3b8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x416>
c001e415:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e41a:	83 ec 0c             	sub    esp,0xc
c001e41d:	86 e0                	xchg   al,ah
c001e41f:	66 89 44 24 78       	mov    WORD PTR [esp+0x78],ax
c001e424:	6a 02                	push   0x2
c001e426:	55                   	push   ebp
c001e427:	53                   	push   ebx
c001e428:	57                   	push   edi
c001e429:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e430:	e8 35 ed ff ff       	call   c001d16a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e435:	66 89 84 24 ae 00 00 00 	mov    WORD PTR [esp+0xae],ax
c001e43d:	83 c4 20             	add    esp,0x20
c001e440:	55                   	push   ebp
c001e441:	53                   	push   ebx
c001e442:	57                   	push   edi
c001e443:	ff b4 24 bc 00 00 00 	push   DWORD PTR [esp+0xbc]
c001e44a:	e8 59 ee ff ff       	call   c001d2a8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e44f:	88 84 24 83 00 00 00 	mov    BYTE PTR [esp+0x83],al
c001e456:	55                   	push   ebp
c001e457:	53                   	push   ebx
c001e458:	57                   	push   edi
c001e459:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c001e460:	e8 ad ed ff ff       	call   c001d212 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e465:	66 89 84 24 8e 00 00 00 	mov    WORD PTR [esp+0x8e],ax
c001e46d:	8a 44 24 32          	mov    al,BYTE PTR [esp+0x32]
c001e471:	88 84 24 ac 00 00 00 	mov    BYTE PTR [esp+0xac],al
c001e478:	83 c4 20             	add    esp,0x20
c001e47b:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e482:	74 2d                	je     c001e4b1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x50f>
c001e484:	83 ec 0c             	sub    esp,0xc
c001e487:	68 6a 6a 02 c0       	push   0xc0026a6a
c001e48c:	e8 8c b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e491:	83 c4 10             	add    esp,0x10
c001e494:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e49b:	75 14                	jne    c001e4b1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x50f>
c001e49d:	e4 60                	in     al,0x60
c001e49f:	3c 5a                	cmp    al,0x5a
c001e4a1:	74 04                	je     c001e4a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x505>
c001e4a3:	3c 1c                	cmp    al,0x1c
c001e4a5:	75 f6                	jne    c001e49d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x4fb>
c001e4a7:	e4 60                	in     al,0x60
c001e4a9:	3c 5a                	cmp    al,0x5a
c001e4ab:	74 fa                	je     c001e4a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x505>
c001e4ad:	3c 1c                	cmp    al,0x1c
c001e4af:	74 f6                	je     c001e4a7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x505>
c001e4b1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e4b5:	b9 09 00 00 00       	mov    ecx,0x9
c001e4ba:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e4be:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e4c2:	83 ec 2c             	sub    esp,0x2c
c001e4c5:	88 84 24 9d 00 00 00 	mov    BYTE PTR [esp+0x9d],al
c001e4cc:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e4d0:	88 84 24 9e 00 00 00 	mov    BYTE PTR [esp+0x9e],al
c001e4d7:	8d b4 24 98 00 00 00 	lea    esi,[esp+0x98]
c001e4de:	fc                   	cld    
c001e4df:	89 e7                	mov    edi,esp
c001e4e1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4e3:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
c001e4ea:	e8 91 f4 ff ff       	call   c001d980 <PCI::foundDevice(PCIDeviceInfo)>
c001e4ef:	83 c4 30             	add    esp,0x30
c001e4f2:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e4f9:	74 2d                	je     c001e528 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x586>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 6d 6a 02 c0       	push   0xc0026a6d
c001e503:	e8 15 b5 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e512:	75 14                	jne    c001e528 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x586>
c001e514:	e4 60                	in     al,0x60
c001e516:	3c 1c                	cmp    al,0x1c
c001e518:	74 04                	je     c001e51e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x57c>
c001e51a:	3c 5a                	cmp    al,0x5a
c001e51c:	75 f6                	jne    c001e514 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x572>
c001e51e:	e4 60                	in     al,0x60
c001e520:	3c 5a                	cmp    al,0x5a
c001e522:	74 fa                	je     c001e51e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x57c>
c001e524:	3c 1c                	cmp    al,0x1c
c001e526:	74 f6                	je     c001e51e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x57c>
c001e528:	81 c4 9c 00 00 00    	add    esp,0x9c
c001e52e:	5b                   	pop    ebx
c001e52f:	5e                   	pop    esi
c001e530:	5f                   	pop    edi
c001e531:	5d                   	pop    ebp
c001e532:	c3                   	ret    
c001e533:	90                   	nop

c001e534 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e534:	55                   	push   ebp
c001e535:	57                   	push   edi
c001e536:	56                   	push   esi
c001e537:	53                   	push   ebx
c001e538:	83 ec 44             	sub    esp,0x44
c001e53b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e53f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001e543:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001e547:	68 70 6a 02 c0       	push   0xc0026a70
c001e54c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001e550:	57                   	push   edi
c001e551:	e8 ea 21 fe ff       	call   c0000740 <strcpy>
c001e556:	b1 64                	mov    cl,0x64
c001e558:	89 e8                	mov    eax,ebp
c001e55a:	0f b6 d0             	movzx  edx,al
c001e55d:	89 d0                	mov    eax,edx
c001e55f:	f6 f1                	div    cl
c001e561:	b1 0a                	mov    cl,0xa
c001e563:	83 c0 30             	add    eax,0x30
c001e566:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	89 d0                	mov    eax,edx
c001e56f:	f6 f1                	div    cl
c001e571:	89 c2                	mov    edx,eax
c001e573:	0f b6 c0             	movzx  eax,al
c001e576:	88 f2                	mov    dl,dh
c001e578:	f6 f1                	div    cl
c001e57a:	83 c2 30             	add    edx,0x30
c001e57d:	88 e0                	mov    al,ah
c001e57f:	88 54 24 12          	mov    BYTE PTR [esp+0x12],dl
c001e583:	83 c0 30             	add    eax,0x30
c001e586:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e58a:	0f b6 c3             	movzx  eax,bl
c001e58d:	f6 f1                	div    cl
c001e58f:	89 c2                	mov    edx,eax
c001e591:	0f b6 c0             	movzx  eax,al
c001e594:	88 f2                	mov    dl,dh
c001e596:	f6 f1                	div    cl
c001e598:	83 c2 30             	add    edx,0x30
c001e59b:	88 e0                	mov    al,ah
c001e59d:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c001e5a1:	83 c0 30             	add    eax,0x30
c001e5a4:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e5ab:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c001e5af:	74 29                	je     c001e5da <PCI::checkDevice(unsigned char, unsigned char)+0xa6>
c001e5b1:	83 ec 0c             	sub    esp,0xc
c001e5b4:	57                   	push   edi
c001e5b5:	e8 63 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e5ba:	83 c4 10             	add    esp,0x10
c001e5bd:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e5c4:	75 14                	jne    c001e5da <PCI::checkDevice(unsigned char, unsigned char)+0xa6>
c001e5c6:	e4 60                	in     al,0x60
c001e5c8:	3c 1c                	cmp    al,0x1c
c001e5ca:	74 04                	je     c001e5d0 <PCI::checkDevice(unsigned char, unsigned char)+0x9c>
c001e5cc:	3c 5a                	cmp    al,0x5a
c001e5ce:	75 f6                	jne    c001e5c6 <PCI::checkDevice(unsigned char, unsigned char)+0x92>
c001e5d0:	e4 60                	in     al,0x60
c001e5d2:	3c 5a                	cmp    al,0x5a
c001e5d4:	74 fa                	je     c001e5d0 <PCI::checkDevice(unsigned char, unsigned char)+0x9c>
c001e5d6:	3c 1c                	cmp    al,0x1c
c001e5d8:	74 f6                	je     c001e5d0 <PCI::checkDevice(unsigned char, unsigned char)+0x9c>
c001e5da:	6a 00                	push   0x0
c001e5dc:	89 e8                	mov    eax,ebp
c001e5de:	0f b6 db             	movzx  ebx,bl
c001e5e1:	0f b6 e8             	movzx  ebp,al
c001e5e4:	53                   	push   ebx
c001e5e5:	55                   	push   ebp
c001e5e6:	56                   	push   esi
c001e5e7:	e8 26 ec ff ff       	call   c001d212 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e5ec:	83 c4 10             	add    esp,0x10
c001e5ef:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e5f6:	74 2d                	je     c001e625 <PCI::checkDevice(unsigned char, unsigned char)+0xf1>
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	68 87 6a 02 c0       	push   0xc0026a87
c001e600:	e8 18 b4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e605:	83 c4 10             	add    esp,0x10
c001e608:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e60f:	75 14                	jne    c001e625 <PCI::checkDevice(unsigned char, unsigned char)+0xf1>
c001e611:	e4 60                	in     al,0x60
c001e613:	3c 1c                	cmp    al,0x1c
c001e615:	74 04                	je     c001e61b <PCI::checkDevice(unsigned char, unsigned char)+0xe7>
c001e617:	3c 5a                	cmp    al,0x5a
c001e619:	75 f6                	jne    c001e611 <PCI::checkDevice(unsigned char, unsigned char)+0xdd>
c001e61b:	e4 60                	in     al,0x60
c001e61d:	3c 5a                	cmp    al,0x5a
c001e61f:	74 fa                	je     c001e61b <PCI::checkDevice(unsigned char, unsigned char)+0xe7>
c001e621:	3c 1c                	cmp    al,0x1c
c001e623:	74 f6                	je     c001e61b <PCI::checkDevice(unsigned char, unsigned char)+0xe7>
c001e625:	6a 00                	push   0x0
c001e627:	53                   	push   ebx
c001e628:	55                   	push   ebp
c001e629:	56                   	push   esi
c001e62a:	e8 73 f9 ff ff       	call   c001dfa2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e62f:	83 c4 10             	add    esp,0x10
c001e632:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e639:	74 2d                	je     c001e668 <PCI::checkDevice(unsigned char, unsigned char)+0x134>
c001e63b:	83 ec 0c             	sub    esp,0xc
c001e63e:	68 8a 6a 02 c0       	push   0xc0026a8a
c001e643:	e8 d5 b3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e648:	83 c4 10             	add    esp,0x10
c001e64b:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e652:	75 14                	jne    c001e668 <PCI::checkDevice(unsigned char, unsigned char)+0x134>
c001e654:	e4 60                	in     al,0x60
c001e656:	3c 1c                	cmp    al,0x1c
c001e658:	74 04                	je     c001e65e <PCI::checkDevice(unsigned char, unsigned char)+0x12a>
c001e65a:	3c 5a                	cmp    al,0x5a
c001e65c:	75 f6                	jne    c001e654 <PCI::checkDevice(unsigned char, unsigned char)+0x120>
c001e65e:	e4 60                	in     al,0x60
c001e660:	3c 5a                	cmp    al,0x5a
c001e662:	74 fa                	je     c001e65e <PCI::checkDevice(unsigned char, unsigned char)+0x12a>
c001e664:	3c 1c                	cmp    al,0x1c
c001e666:	74 f6                	je     c001e65e <PCI::checkDevice(unsigned char, unsigned char)+0x12a>
c001e668:	6a 00                	push   0x0
c001e66a:	53                   	push   ebx
c001e66b:	55                   	push   ebp
c001e66c:	56                   	push   esi
c001e66d:	e8 c4 eb ff ff       	call   c001d236 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e672:	83 c4 10             	add    esp,0x10
c001e675:	89 c7                	mov    edi,eax
c001e677:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e67e:	74 2d                	je     c001e6ad <PCI::checkDevice(unsigned char, unsigned char)+0x179>
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 8e 6a 02 c0       	push   0xc0026a8e
c001e688:	e8 90 b3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e697:	75 14                	jne    c001e6ad <PCI::checkDevice(unsigned char, unsigned char)+0x179>
c001e699:	e4 60                	in     al,0x60
c001e69b:	3c 5a                	cmp    al,0x5a
c001e69d:	74 04                	je     c001e6a3 <PCI::checkDevice(unsigned char, unsigned char)+0x16f>
c001e69f:	3c 1c                	cmp    al,0x1c
c001e6a1:	75 f6                	jne    c001e699 <PCI::checkDevice(unsigned char, unsigned char)+0x165>
c001e6a3:	e4 60                	in     al,0x60
c001e6a5:	3c 5a                	cmp    al,0x5a
c001e6a7:	74 fa                	je     c001e6a3 <PCI::checkDevice(unsigned char, unsigned char)+0x16f>
c001e6a9:	3c 1c                	cmp    al,0x1c
c001e6ab:	74 f6                	je     c001e6a3 <PCI::checkDevice(unsigned char, unsigned char)+0x16f>
c001e6ad:	89 f8                	mov    eax,edi
c001e6af:	84 c0                	test   al,al
c001e6b1:	0f 89 1e 01 00 00    	jns    c001e7d5 <PCI::checkDevice(unsigned char, unsigned char)+0x2a1>
c001e6b7:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e6be:	74 2d                	je     c001e6ed <PCI::checkDevice(unsigned char, unsigned char)+0x1b9>
c001e6c0:	83 ec 0c             	sub    esp,0xc
c001e6c3:	68 93 6a 02 c0       	push   0xc0026a93
c001e6c8:	e8 50 b3 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e6cd:	83 c4 10             	add    esp,0x10
c001e6d0:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e6d7:	75 14                	jne    c001e6ed <PCI::checkDevice(unsigned char, unsigned char)+0x1b9>
c001e6d9:	e4 60                	in     al,0x60
c001e6db:	3c 1c                	cmp    al,0x1c
c001e6dd:	74 04                	je     c001e6e3 <PCI::checkDevice(unsigned char, unsigned char)+0x1af>
c001e6df:	3c 5a                	cmp    al,0x5a
c001e6e1:	75 f6                	jne    c001e6d9 <PCI::checkDevice(unsigned char, unsigned char)+0x1a5>
c001e6e3:	e4 60                	in     al,0x60
c001e6e5:	3c 5a                	cmp    al,0x5a
c001e6e7:	74 fa                	je     c001e6e3 <PCI::checkDevice(unsigned char, unsigned char)+0x1af>
c001e6e9:	3c 1c                	cmp    al,0x1c
c001e6eb:	74 f6                	je     c001e6e3 <PCI::checkDevice(unsigned char, unsigned char)+0x1af>
c001e6ed:	bf 01 00 00 00       	mov    edi,0x1
c001e6f2:	50                   	push   eax
c001e6f3:	50                   	push   eax
c001e6f4:	68 9d 6a 02 c0       	push   0xc0026a9d
c001e6f9:	8d 54 24 17          	lea    edx,[esp+0x17]
c001e6fd:	52                   	push   edx
c001e6fe:	e8 3d 20 fe ff       	call   c0000740 <strcpy>
c001e703:	8d 47 30             	lea    eax,[edi+0x30]
c001e706:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e70a:	83 c4 10             	add    esp,0x10
c001e70d:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e714:	8d 54 24 0b          	lea    edx,[esp+0xb]
c001e718:	74 29                	je     c001e743 <PCI::checkDevice(unsigned char, unsigned char)+0x20f>
c001e71a:	83 ec 0c             	sub    esp,0xc
c001e71d:	52                   	push   edx
c001e71e:	e8 fa b2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e723:	83 c4 10             	add    esp,0x10
c001e726:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e72d:	75 14                	jne    c001e743 <PCI::checkDevice(unsigned char, unsigned char)+0x20f>
c001e72f:	e4 60                	in     al,0x60
c001e731:	3c 5a                	cmp    al,0x5a
c001e733:	74 04                	je     c001e739 <PCI::checkDevice(unsigned char, unsigned char)+0x205>
c001e735:	3c 1c                	cmp    al,0x1c
c001e737:	75 f6                	jne    c001e72f <PCI::checkDevice(unsigned char, unsigned char)+0x1fb>
c001e739:	e4 60                	in     al,0x60
c001e73b:	3c 5a                	cmp    al,0x5a
c001e73d:	74 fa                	je     c001e739 <PCI::checkDevice(unsigned char, unsigned char)+0x205>
c001e73f:	3c 1c                	cmp    al,0x1c
c001e741:	74 f6                	je     c001e739 <PCI::checkDevice(unsigned char, unsigned char)+0x205>
c001e743:	57                   	push   edi
c001e744:	53                   	push   ebx
c001e745:	55                   	push   ebp
c001e746:	56                   	push   esi
c001e747:	e8 c6 ea ff ff       	call   c001d212 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e74c:	83 c4 10             	add    esp,0x10
c001e74f:	66 40                	inc    ax
c001e751:	74 78                	je     c001e7cb <PCI::checkDevice(unsigned char, unsigned char)+0x297>
c001e753:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e75a:	74 2d                	je     c001e789 <PCI::checkDevice(unsigned char, unsigned char)+0x255>
c001e75c:	83 ec 0c             	sub    esp,0xc
c001e75f:	68 a1 6a 02 c0       	push   0xc0026aa1
c001e764:	e8 b4 b2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e769:	83 c4 10             	add    esp,0x10
c001e76c:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e773:	75 14                	jne    c001e789 <PCI::checkDevice(unsigned char, unsigned char)+0x255>
c001e775:	e4 60                	in     al,0x60
c001e777:	3c 5a                	cmp    al,0x5a
c001e779:	74 04                	je     c001e77f <PCI::checkDevice(unsigned char, unsigned char)+0x24b>
c001e77b:	3c 1c                	cmp    al,0x1c
c001e77d:	75 f6                	jne    c001e775 <PCI::checkDevice(unsigned char, unsigned char)+0x241>
c001e77f:	e4 60                	in     al,0x60
c001e781:	3c 5a                	cmp    al,0x5a
c001e783:	74 fa                	je     c001e77f <PCI::checkDevice(unsigned char, unsigned char)+0x24b>
c001e785:	3c 1c                	cmp    al,0x1c
c001e787:	74 f6                	je     c001e77f <PCI::checkDevice(unsigned char, unsigned char)+0x24b>
c001e789:	57                   	push   edi
c001e78a:	53                   	push   ebx
c001e78b:	55                   	push   ebp
c001e78c:	56                   	push   esi
c001e78d:	e8 10 f8 ff ff       	call   c001dfa2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e792:	83 c4 10             	add    esp,0x10
c001e795:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e79c:	74 2d                	je     c001e7cb <PCI::checkDevice(unsigned char, unsigned char)+0x297>
c001e79e:	83 ec 0c             	sub    esp,0xc
c001e7a1:	68 a6 6a 02 c0       	push   0xc0026aa6
c001e7a6:	e8 72 b2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e7ab:	83 c4 10             	add    esp,0x10
c001e7ae:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e7b5:	75 14                	jne    c001e7cb <PCI::checkDevice(unsigned char, unsigned char)+0x297>
c001e7b7:	e4 60                	in     al,0x60
c001e7b9:	3c 5a                	cmp    al,0x5a
c001e7bb:	74 04                	je     c001e7c1 <PCI::checkDevice(unsigned char, unsigned char)+0x28d>
c001e7bd:	3c 1c                	cmp    al,0x1c
c001e7bf:	75 f6                	jne    c001e7b7 <PCI::checkDevice(unsigned char, unsigned char)+0x283>
c001e7c1:	e4 60                	in     al,0x60
c001e7c3:	3c 5a                	cmp    al,0x5a
c001e7c5:	74 fa                	je     c001e7c1 <PCI::checkDevice(unsigned char, unsigned char)+0x28d>
c001e7c7:	3c 1c                	cmp    al,0x1c
c001e7c9:	74 f6                	je     c001e7c1 <PCI::checkDevice(unsigned char, unsigned char)+0x28d>
c001e7cb:	47                   	inc    edi
c001e7cc:	83 ff 08             	cmp    edi,0x8
c001e7cf:	0f 85 1d ff ff ff    	jne    c001e6f2 <PCI::checkDevice(unsigned char, unsigned char)+0x1be>
c001e7d5:	83 c4 3c             	add    esp,0x3c
c001e7d8:	5b                   	pop    ebx
c001e7d9:	5e                   	pop    esi
c001e7da:	5f                   	pop    edi
c001e7db:	5d                   	pop    ebp
c001e7dc:	c3                   	ret    
c001e7dd:	90                   	nop

c001e7de <PCI::detect()>:
c001e7de:	57                   	push   edi
c001e7df:	56                   	push   esi
c001e7e0:	53                   	push   ebx
c001e7e1:	83 ec 10             	sub    esp,0x10
c001e7e4:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e7e8:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e7ef:	75 1c                	jne    c001e80d <PCI::detect()+0x2f>
c001e7f1:	6a 00                	push   0x0
c001e7f3:	6a 00                	push   0x0
c001e7f5:	6a 00                	push   0x0
c001e7f7:	56                   	push   esi
c001e7f8:	e8 39 ea ff ff       	call   c001d236 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	89 c3                	mov    ebx,eax
c001e802:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e809:	74 4a                	je     c001e855 <PCI::detect()+0x77>
c001e80b:	eb 2f                	jmp    c001e83c <PCI::detect()+0x5e>
c001e80d:	83 ec 0c             	sub    esp,0xc
c001e810:	68 ad 6a 02 c0       	push   0xc0026aad
c001e815:	e8 03 b2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e81a:	83 c4 10             	add    esp,0x10
c001e81d:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e824:	75 cb                	jne    c001e7f1 <PCI::detect()+0x13>
c001e826:	e4 60                	in     al,0x60
c001e828:	3c 1c                	cmp    al,0x1c
c001e82a:	74 04                	je     c001e830 <PCI::detect()+0x52>
c001e82c:	3c 5a                	cmp    al,0x5a
c001e82e:	75 f6                	jne    c001e826 <PCI::detect()+0x48>
c001e830:	e4 60                	in     al,0x60
c001e832:	3c 5a                	cmp    al,0x5a
c001e834:	74 fa                	je     c001e830 <PCI::detect()+0x52>
c001e836:	3c 1c                	cmp    al,0x1c
c001e838:	74 f6                	je     c001e830 <PCI::detect()+0x52>
c001e83a:	eb b5                	jmp    c001e7f1 <PCI::detect()+0x13>
c001e83c:	83 ec 0c             	sub    esp,0xc
c001e83f:	68 ad 6a 02 c0       	push   0xc0026aad
c001e844:	e8 d4 b1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e853:	74 15                	je     c001e86a <PCI::detect()+0x8c>
c001e855:	a1 a0 81 02 c0       	mov    eax,ds:0xc00281a0
c001e85a:	25 00 08 00 00       	and    eax,0x800
c001e85f:	80 e3 80             	and    bl,0x80
c001e862:	74 1a                	je     c001e87e <PCI::detect()+0xa0>
c001e864:	eb 5d                	jmp    c001e8c3 <PCI::detect()+0xe5>
c001e866:	3c 1c                	cmp    al,0x1c
c001e868:	74 0c                	je     c001e876 <PCI::detect()+0x98>
c001e86a:	e4 60                	in     al,0x60
c001e86c:	3c 5a                	cmp    al,0x5a
c001e86e:	75 f6                	jne    c001e866 <PCI::detect()+0x88>
c001e870:	eb 04                	jmp    c001e876 <PCI::detect()+0x98>
c001e872:	3c 1c                	cmp    al,0x1c
c001e874:	75 df                	jne    c001e855 <PCI::detect()+0x77>
c001e876:	e4 60                	in     al,0x60
c001e878:	3c 5a                	cmp    al,0x5a
c001e87a:	74 fa                	je     c001e876 <PCI::detect()+0x98>
c001e87c:	eb f4                	jmp    c001e872 <PCI::detect()+0x94>
c001e87e:	85 c0                	test   eax,eax
c001e880:	75 12                	jne    c001e894 <PCI::detect()+0xb6>
c001e882:	51                   	push   ecx
c001e883:	51                   	push   ecx
c001e884:	6a 00                	push   0x0
c001e886:	56                   	push   esi
c001e887:	e8 f2 ef ff ff       	call   c001d87e <PCI::checkBus(unsigned char)>
c001e88c:	83 c4 10             	add    esp,0x10
c001e88f:	e9 da 00 00 00       	jmp    c001e96e <PCI::detect()+0x190>
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	68 b4 6a 02 c0       	push   0xc0026ab4
c001e89c:	e8 7c b1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e8ab:	75 d5                	jne    c001e882 <PCI::detect()+0xa4>
c001e8ad:	e4 60                	in     al,0x60
c001e8af:	3c 5a                	cmp    al,0x5a
c001e8b1:	74 04                	je     c001e8b7 <PCI::detect()+0xd9>
c001e8b3:	3c 1c                	cmp    al,0x1c
c001e8b5:	75 f6                	jne    c001e8ad <PCI::detect()+0xcf>
c001e8b7:	e4 60                	in     al,0x60
c001e8b9:	3c 5a                	cmp    al,0x5a
c001e8bb:	74 fa                	je     c001e8b7 <PCI::detect()+0xd9>
c001e8bd:	3c 1c                	cmp    al,0x1c
c001e8bf:	74 f6                	je     c001e8b7 <PCI::detect()+0xd9>
c001e8c1:	eb bf                	jmp    c001e882 <PCI::detect()+0xa4>
c001e8c3:	85 c0                	test   eax,eax
c001e8c5:	75 18                	jne    c001e8df <PCI::detect()+0x101>
c001e8c7:	31 db                	xor    ebx,ebx
c001e8c9:	52                   	push   edx
c001e8ca:	52                   	push   edx
c001e8cb:	68 bb 6a 02 c0       	push   0xc0026abb
c001e8d0:	8d 7c 24 15          	lea    edi,[esp+0x15]
c001e8d4:	57                   	push   edi
c001e8d5:	e8 66 1e fe ff       	call   c0000740 <strcpy>
c001e8da:	83 c4 10             	add    esp,0x10
c001e8dd:	eb 6c                	jmp    c001e94b <PCI::detect()+0x16d>
c001e8df:	83 ec 0c             	sub    esp,0xc
c001e8e2:	68 c2 6a 02 c0       	push   0xc0026ac2
c001e8e7:	e8 31 b1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e8ec:	83 c4 10             	add    esp,0x10
c001e8ef:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e8f6:	75 cf                	jne    c001e8c7 <PCI::detect()+0xe9>
c001e8f8:	e4 60                	in     al,0x60
c001e8fa:	3c 5a                	cmp    al,0x5a
c001e8fc:	74 04                	je     c001e902 <PCI::detect()+0x124>
c001e8fe:	3c 1c                	cmp    al,0x1c
c001e900:	75 f6                	jne    c001e8f8 <PCI::detect()+0x11a>
c001e902:	e4 60                	in     al,0x60
c001e904:	3c 5a                	cmp    al,0x5a
c001e906:	74 fa                	je     c001e902 <PCI::detect()+0x124>
c001e908:	3c 1c                	cmp    al,0x1c
c001e90a:	74 f6                	je     c001e902 <PCI::detect()+0x124>
c001e90c:	eb b9                	jmp    c001e8c7 <PCI::detect()+0xe9>
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	57                   	push   edi
c001e912:	e8 06 b1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001e917:	83 c4 10             	add    esp,0x10
c001e91a:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001e921:	74 37                	je     c001e95a <PCI::detect()+0x17c>
c001e923:	fe 44 24 09          	inc    BYTE PTR [esp+0x9]
c001e927:	53                   	push   ebx
c001e928:	6a 00                	push   0x0
c001e92a:	6a 00                	push   0x0
c001e92c:	56                   	push   esi
c001e92d:	e8 e0 e8 ff ff       	call   c001d212 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e932:	83 c4 10             	add    esp,0x10
c001e935:	66 40                	inc    ax
c001e937:	75 35                	jne    c001e96e <PCI::detect()+0x190>
c001e939:	50                   	push   eax
c001e93a:	50                   	push   eax
c001e93b:	53                   	push   ebx
c001e93c:	43                   	inc    ebx
c001e93d:	56                   	push   esi
c001e93e:	e8 3b ef ff ff       	call   c001d87e <PCI::checkBus(unsigned char)>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	83 fb 08             	cmp    ebx,0x8
c001e949:	74 23                	je     c001e96e <PCI::detect()+0x190>
c001e94b:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001e952:	74 cf                	je     c001e923 <PCI::detect()+0x145>
c001e954:	eb b8                	jmp    c001e90e <PCI::detect()+0x130>
c001e956:	3c 1c                	cmp    al,0x1c
c001e958:	74 0c                	je     c001e966 <PCI::detect()+0x188>
c001e95a:	e4 60                	in     al,0x60
c001e95c:	3c 5a                	cmp    al,0x5a
c001e95e:	75 f6                	jne    c001e956 <PCI::detect()+0x178>
c001e960:	eb 04                	jmp    c001e966 <PCI::detect()+0x188>
c001e962:	3c 1c                	cmp    al,0x1c
c001e964:	75 bd                	jne    c001e923 <PCI::detect()+0x145>
c001e966:	e4 60                	in     al,0x60
c001e968:	3c 5a                	cmp    al,0x5a
c001e96a:	74 fa                	je     c001e966 <PCI::detect()+0x188>
c001e96c:	eb f4                	jmp    c001e962 <PCI::detect()+0x184>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	5b                   	pop    ebx
c001e972:	5e                   	pop    esi
c001e973:	5f                   	pop    edi
c001e974:	c3                   	ret    
c001e975:	90                   	nop

c001e976 <IDE::close(int, int, void*)>:
c001e976:	83 c8 ff             	or     eax,0xffffffff
c001e979:	c3                   	ret    

c001e97a <IDE::IDE()>:
c001e97a:	83 ec 0c             	sub    esp,0xc
c001e97d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e981:	83 ec 08             	sub    esp,0x8
c001e984:	68 f8 6a 02 c0       	push   0xc0026af8
c001e989:	50                   	push   eax
c001e98a:	e8 19 fb fe ff       	call   c000e4a8 <HardDiskController::HardDiskController(char const*)>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	ba 88 6b 02 c0       	mov    edx,0xc0026b88
c001e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99b:	89 10                	mov    DWORD PTR [eax],edx
c001e99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e9a8:	90                   	nop
c001e9a9:	83 c4 0c             	add    esp,0xc
c001e9ac:	c3                   	ret    
c001e9ad:	90                   	nop

c001e9ae <IDE::prepareInterrupt(unsigned char)>:
c001e9ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e9b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e9b7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e9bf:	c3                   	ret    

c001e9c0 <selectDrive(unsigned char, unsigned char)>:
c001e9c0:	c3                   	ret    
c001e9c1:	90                   	nop

c001e9c2 <IDE::getBase(unsigned char)>:
c001e9c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e9c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e9cb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e9d3:	c3                   	ret    

c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e9d4:	55                   	push   ebp
c001e9d5:	57                   	push   edi
c001e9d6:	56                   	push   esi
c001e9d7:	53                   	push   ebx
c001e9d8:	83 ec 1c             	sub    esp,0x1c
c001e9db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e9df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e9e3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e9e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e9ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e9ee:	80 f9 03             	cmp    cl,0x3
c001e9f1:	77 51                	ja     c001ea44 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e9f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9f7:	0f b6 f2             	movzx  esi,dl
c001e9fa:	0f b6 db             	movzx  ebx,bl
c001e9fd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ea00:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ea04:	83 ca 80             	or     edx,0xffffff80
c001ea07:	0f b6 d2             	movzx  edx,dl
c001ea0a:	52                   	push   edx
c001ea0b:	6a 0c                	push   0xc
c001ea0d:	56                   	push   esi
c001ea0e:	57                   	push   edi
c001ea0f:	e8 c0 ff ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea14:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ea19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ea1d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ea21:	ee                   	out    dx,al
c001ea22:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ea27:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ea2b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ea2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ea33:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ea3b:	83 c4 2c             	add    esp,0x2c
c001ea3e:	5b                   	pop    ebx
c001ea3f:	5e                   	pop    esi
c001ea40:	5f                   	pop    edi
c001ea41:	5d                   	pop    ebp
c001ea42:	eb 90                	jmp    c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea44:	80 fb 07             	cmp    bl,0x7
c001ea47:	77 12                	ja     c001ea5b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ea49:	0f b6 d2             	movzx  edx,dl
c001ea4c:	0f b6 db             	movzx  ebx,bl
c001ea4f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ea57:	89 da                	mov    edx,ebx
c001ea59:	eb 2f                	jmp    c001ea8a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ea5b:	80 fb 0d             	cmp    bl,0xd
c001ea5e:	77 13                	ja     c001ea73 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ea60:	0f b6 d2             	movzx  edx,dl
c001ea63:	0f b6 db             	movzx  ebx,bl
c001ea66:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001ea6d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ea71:	eb 17                	jmp    c001ea8a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ea73:	80 fb 15             	cmp    bl,0x15
c001ea76:	77 13                	ja     c001ea8b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ea78:	0f b6 d2             	movzx  edx,dl
c001ea7b:	0f b6 db             	movzx  ebx,bl
c001ea7e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001ea86:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001ea8a:	ee                   	out    dx,al
c001ea8b:	83 c4 1c             	add    esp,0x1c
c001ea8e:	5b                   	pop    ebx
c001ea8f:	5e                   	pop    esi
c001ea90:	5f                   	pop    edi
c001ea91:	5d                   	pop    ebp
c001ea92:	c3                   	ret    
c001ea93:	90                   	nop

c001ea94 <IDE::read(unsigned char, unsigned char)>:
c001ea94:	55                   	push   ebp
c001ea95:	57                   	push   edi
c001ea96:	56                   	push   esi
c001ea97:	53                   	push   ebx
c001ea98:	83 ec 1c             	sub    esp,0x1c
c001ea9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eaa3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001eaa6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eaaa:	3c 03                	cmp    al,0x3
c001eaac:	77 43                	ja     c001eaf1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001eaae:	0f b6 f2             	movzx  esi,dl
c001eab1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eab4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001eab8:	83 c8 80             	or     eax,0xffffff80
c001eabb:	0f b6 c0             	movzx  eax,al
c001eabe:	50                   	push   eax
c001eabf:	6a 0c                	push   0xc
c001eac1:	56                   	push   esi
c001eac2:	57                   	push   edi
c001eac3:	e8 0c ff ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eac8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001eacd:	0f b6 c3             	movzx  eax,bl
c001ead0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ead4:	ec                   	in     al,dx
c001ead5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ead9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001eade:	52                   	push   edx
c001eadf:	6a 0c                	push   0xc
c001eae1:	56                   	push   esi
c001eae2:	57                   	push   edi
c001eae3:	e8 ec fe ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eae8:	83 c4 20             	add    esp,0x20
c001eaeb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001eaef:	eb 49                	jmp    c001eb3a <IDE::read(unsigned char, unsigned char)+0xa6>
c001eaf1:	80 fb 07             	cmp    bl,0x7
c001eaf4:	77 12                	ja     c001eb08 <IDE::read(unsigned char, unsigned char)+0x74>
c001eaf6:	0f b6 d2             	movzx  edx,dl
c001eaf9:	0f b6 c3             	movzx  eax,bl
c001eafc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001eb04:	89 c2                	mov    edx,eax
c001eb06:	eb 31                	jmp    c001eb39 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eb08:	80 fb 0d             	cmp    bl,0xd
c001eb0b:	77 13                	ja     c001eb20 <IDE::read(unsigned char, unsigned char)+0x8c>
c001eb0d:	0f b6 d2             	movzx  edx,dl
c001eb10:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001eb17:	0f b6 d3             	movzx  edx,bl
c001eb1a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001eb1e:	eb 19                	jmp    c001eb39 <IDE::read(unsigned char, unsigned char)+0xa5>
c001eb20:	31 c0                	xor    eax,eax
c001eb22:	80 fb 15             	cmp    bl,0x15
c001eb25:	77 13                	ja     c001eb3a <IDE::read(unsigned char, unsigned char)+0xa6>
c001eb27:	0f b6 d2             	movzx  edx,dl
c001eb2a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001eb32:	0f b6 d3             	movzx  edx,bl
c001eb35:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001eb39:	ec                   	in     al,dx
c001eb3a:	83 c4 1c             	add    esp,0x1c
c001eb3d:	5b                   	pop    ebx
c001eb3e:	5e                   	pop    esi
c001eb3f:	5f                   	pop    edi
c001eb40:	5d                   	pop    ebp
c001eb41:	c3                   	ret    

c001eb42 <IDE::waitInterrupt(unsigned char)>:
c001eb42:	55                   	push   ebp
c001eb43:	57                   	push   edi
c001eb44:	56                   	push   esi
c001eb45:	53                   	push   ebx
c001eb46:	31 db                	xor    ebx,ebx
c001eb48:	83 ec 0c             	sub    esp,0xc
c001eb4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001eb4f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001eb54:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001eb5c:	89 e8                	mov    eax,ebp
c001eb5e:	84 c0                	test   al,al
c001eb60:	75 30                	jne    c001eb92 <IDE::waitInterrupt(unsigned char)+0x50>
c001eb62:	50                   	push   eax
c001eb63:	6a 0c                	push   0xc
c001eb65:	56                   	push   esi
c001eb66:	57                   	push   edi
c001eb67:	e8 28 ff ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001eb6c:	83 c4 10             	add    esp,0x10
c001eb6f:	a8 01                	test   al,0x1
c001eb71:	75 27                	jne    c001eb9a <IDE::waitInterrupt(unsigned char)+0x58>
c001eb73:	f6 c3 04             	test   bl,0x4
c001eb76:	75 12                	jne    c001eb8a <IDE::waitInterrupt(unsigned char)+0x48>
c001eb78:	83 fb 32             	cmp    ebx,0x32
c001eb7b:	7e 0d                	jle    c001eb8a <IDE::waitInterrupt(unsigned char)+0x48>
c001eb7d:	83 ec 0c             	sub    esp,0xc
c001eb80:	6a 64                	push   0x64
c001eb82:	e8 61 9b ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001eb87:	83 c4 10             	add    esp,0x10
c001eb8a:	83 fb 3c             	cmp    ebx,0x3c
c001eb8d:	74 0b                	je     c001eb9a <IDE::waitInterrupt(unsigned char)+0x58>
c001eb8f:	43                   	inc    ebx
c001eb90:	eb c2                	jmp    c001eb54 <IDE::waitInterrupt(unsigned char)+0x12>
c001eb92:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001eb9a:	83 c4 0c             	add    esp,0xc
c001eb9d:	89 e8                	mov    eax,ebp
c001eb9f:	5b                   	pop    ebx
c001eba0:	5e                   	pop    esi
c001eba1:	5f                   	pop    edi
c001eba2:	5d                   	pop    ebp
c001eba3:	c3                   	ret    

c001eba4 <ideChannel0IRQHandler(regs*, void*)>:
c001eba4:	83 ec 10             	sub    esp,0x10
c001eba7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ebab:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ebb2:	6a 07                	push   0x7
c001ebb4:	6a 00                	push   0x0
c001ebb6:	50                   	push   eax
c001ebb7:	e8 d8 fe ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001ebbc:	83 c4 1c             	add    esp,0x1c
c001ebbf:	c3                   	ret    

c001ebc0 <ideChannel1IRQHandler(regs*, void*)>:
c001ebc0:	83 ec 10             	sub    esp,0x10
c001ebc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ebc7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ebce:	6a 07                	push   0x7
c001ebd0:	6a 01                	push   0x1
c001ebd2:	50                   	push   eax
c001ebd3:	e8 bc fe ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001ebd8:	83 c4 1c             	add    esp,0x1c
c001ebdb:	c3                   	ret    

c001ebdc <IDE::enableIRQs(unsigned char, bool)>:
c001ebdc:	57                   	push   edi
c001ebdd:	56                   	push   esi
c001ebde:	be 04 00 00 00       	mov    esi,0x4
c001ebe3:	53                   	push   ebx
c001ebe4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ebe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebed:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ebf2:	0f 94 c0             	sete   al
c001ebf5:	d1 e0                	shl    eax,1
c001ebf7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001ebfe:	0f b6 c0             	movzx  eax,al
c001ec01:	50                   	push   eax
c001ec02:	6a 0c                	push   0xc
c001ec04:	57                   	push   edi
c001ec05:	53                   	push   ebx
c001ec06:	e8 c9 fd ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec0b:	83 c4 10             	add    esp,0x10
c001ec0e:	50                   	push   eax
c001ec0f:	6a 0c                	push   0xc
c001ec11:	57                   	push   edi
c001ec12:	53                   	push   ebx
c001ec13:	e8 7c fe ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001ec18:	83 c4 10             	add    esp,0x10
c001ec1b:	4e                   	dec    esi
c001ec1c:	75 f0                	jne    c001ec0e <IDE::enableIRQs(unsigned char, bool)+0x32>
c001ec1e:	5b                   	pop    ebx
c001ec1f:	5e                   	pop    esi
c001ec20:	5f                   	pop    edi
c001ec21:	c3                   	ret    

c001ec22 <IDE::open(int, int, void*)>:
c001ec22:	55                   	push   ebp
c001ec23:	57                   	push   edi
c001ec24:	56                   	push   esi
c001ec25:	53                   	push   ebx
c001ec26:	83 ec 1c             	sub    esp,0x1c
c001ec29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec2d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ec36:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ec3f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ec46:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ec4d:	0f 85 b0 02 00 00    	jne    c001ef03 <IDE::open(int, int, void*)+0x2e1>
c001ec53:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ec59:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001ec5d:	83 e0 7f             	and    eax,0x7f
c001ec60:	3c 05                	cmp    al,0x5
c001ec62:	74 04                	je     c001ec68 <IDE::open(int, int, void*)+0x46>
c001ec64:	3c 0f                	cmp    al,0xf
c001ec66:	75 32                	jne    c001ec9a <IDE::open(int, int, void*)+0x78>
c001ec68:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ec6e:	83 e0 fc             	and    eax,0xfffffffc
c001ec71:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ec78:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ec7e:	83 e0 fc             	and    eax,0xfffffffc
c001ec81:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ec88:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ec8e:	83 e0 fc             	and    eax,0xfffffffc
c001ec91:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ec98:	eb 14                	jmp    c001ecae <IDE::open(int, int, void*)+0x8c>
c001ec9a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001eca4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ecae:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ecb5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ecbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ecc0:	89 c6                	mov    esi,eax
c001ecc2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ecc7:	c1 e6 10             	shl    esi,0x10
c001ecca:	89 e8                	mov    eax,ebp
c001eccc:	89 fa                	mov    edx,edi
c001ecce:	c1 e0 0b             	shl    eax,0xb
c001ecd1:	09 f0                	or     eax,esi
c001ecd3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ecda:	c1 e6 08             	shl    esi,0x8
c001ecdd:	09 c6                	or     esi,eax
c001ecdf:	89 f0                	mov    eax,esi
c001ece1:	0d 08 00 00 80       	or     eax,0x80000008
c001ece6:	ef                   	out    dx,eax
c001ece7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ecec:	89 ca                	mov    edx,ecx
c001ecee:	ed                   	in     eax,dx
c001ecef:	c1 e8 10             	shr    eax,0x10
c001ecf2:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecf7:	0f 84 f5 00 00 00    	je     c001edf2 <IDE::open(int, int, void*)+0x1d0>
c001ecfd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001ed03:	89 fa                	mov    edx,edi
c001ed05:	89 f0                	mov    eax,esi
c001ed07:	ef                   	out    dx,eax
c001ed08:	b0 fe                	mov    al,0xfe
c001ed0a:	89 ca                	mov    edx,ecx
c001ed0c:	ee                   	out    dx,al
c001ed0d:	89 f0                	mov    eax,esi
c001ed0f:	89 fa                	mov    edx,edi
c001ed11:	ef                   	out    dx,eax
c001ed12:	89 ca                	mov    edx,ecx
c001ed14:	ed                   	in     eax,dx
c001ed15:	3c fe                	cmp    al,0xfe
c001ed17:	0f 85 a9 00 00 00    	jne    c001edc6 <IDE::open(int, int, void*)+0x1a4>
c001ed1d:	8b 15 88 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028188
c001ed23:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001ed2a:	74 33                	je     c001ed5f <IDE::open(int, int, void*)+0x13d>
c001ed2c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001ed32:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001ed36:	40                   	inc    eax
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	0f b6 c0             	movzx  eax,al
c001ed3d:	50                   	push   eax
c001ed3e:	55                   	push   ebp
c001ed3f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ed43:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001ed49:	51                   	push   ecx
c001ed4a:	e8 dd 32 ff ff       	call   c001202c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001ed4f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001ed54:	83 c4 1c             	add    esp,0x1c
c001ed57:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ed5d:	eb 0a                	jmp    c001ed69 <IDE::open(int, int, void*)+0x147>
c001ed5f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001ed69:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001ed70:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001ed77:	c1 e1 10             	shl    ecx,0x10
c001ed7a:	c1 e0 08             	shl    eax,0x8
c001ed7d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ed82:	09 c1                	or     ecx,eax
c001ed84:	89 fa                	mov    edx,edi
c001ed86:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001ed8d:	c1 e0 0b             	shl    eax,0xb
c001ed90:	09 c1                	or     ecx,eax
c001ed92:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001ed98:	89 c8                	mov    eax,ecx
c001ed9a:	ef                   	out    dx,eax
c001ed9b:	be fc 0c 00 00       	mov    esi,0xcfc
c001eda0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001eda6:	89 f2                	mov    edx,esi
c001eda8:	ee                   	out    dx,al
c001eda9:	89 c8                	mov    eax,ecx
c001edab:	89 fa                	mov    edx,edi
c001edad:	ef                   	out    dx,eax
c001edae:	89 f2                	mov    edx,esi
c001edb0:	ed                   	in     eax,dx
c001edb1:	0f b6 c0             	movzx  eax,al
c001edb4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001edba:	74 46                	je     c001ee02 <IDE::open(int, int, void*)+0x1e0>
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	68 10 6b 02 c0       	push   0xc0026b10
c001edc4:	eb 34                	jmp    c001edfa <IDE::open(int, int, void*)+0x1d8>
c001edc6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001edcf:	75 17                	jne    c001ede8 <IDE::open(int, int, void*)+0x1c6>
c001edd1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001edd6:	74 07                	je     c001eddf <IDE::open(int, int, void*)+0x1bd>
c001edd8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001eddd:	75 09                	jne    c001ede8 <IDE::open(int, int, void*)+0x1c6>
c001eddf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ede6:	eb 1a                	jmp    c001ee02 <IDE::open(int, int, void*)+0x1e0>
c001ede8:	83 ec 0c             	sub    esp,0xc
c001edeb:	68 18 6b 02 c0       	push   0xc0026b18
c001edf0:	eb 08                	jmp    c001edfa <IDE::open(int, int, void*)+0x1d8>
c001edf2:	83 ec 0c             	sub    esp,0xc
c001edf5:	68 49 6b 02 c0       	push   0xc0026b49
c001edfa:	e8 20 5a ff ff       	call   c001481f <Krnl::panic(char const*)>
c001edff:	83 c4 10             	add    esp,0x10
c001ee02:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ee09:	79 1a                	jns    c001ee25 <IDE::open(int, int, void*)+0x203>
c001ee0b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ee11:	83 e0 fc             	and    eax,0xfffffffc
c001ee14:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ee1b:	83 c0 08             	add    eax,0x8
c001ee1e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ee25:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ee2b:	89 c2                	mov    edx,eax
c001ee2d:	83 e2 0f             	and    edx,0xf
c001ee30:	66 83 fa 08          	cmp    dx,0x8
c001ee34:	75 0a                	jne    c001ee40 <IDE::open(int, int, void*)+0x21e>
c001ee36:	83 e8 02             	sub    eax,0x2
c001ee39:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ee40:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ee46:	89 c2                	mov    edx,eax
c001ee48:	83 e2 0f             	and    edx,0xf
c001ee4b:	66 83 fa 08          	cmp    dx,0x8
c001ee4f:	75 0a                	jne    c001ee5b <IDE::open(int, int, void*)+0x239>
c001ee51:	83 e8 02             	sub    eax,0x2
c001ee54:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ee5b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ee62:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ee69:	89 d0                	mov    eax,edx
c001ee6b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ee6e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ee72:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001ee76:	8d 4a 01             	lea    ecx,[edx+0x1]
c001ee79:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ee7e:	0f b6 c9             	movzx  ecx,cl
c001ee81:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ee88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ee8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ee8f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ee93:	8d 50 02             	lea    edx,[eax+0x2]
c001ee96:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ee9b:	0f b6 d2             	movzx  edx,dl
c001ee9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001eea4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eea7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eeab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001eeaf:	8d 48 03             	lea    ecx,[eax+0x3]
c001eeb2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eeb7:	0f b6 c9             	movzx  ecx,cl
c001eeba:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001eec0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eec3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eec7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001eecb:	8d 50 04             	lea    edx,[eax+0x4]
c001eece:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001eed4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001eed9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001eee0:	66 85 f6             	test   si,si
c001eee3:	74 5b                	je     c001ef40 <IDE::open(int, int, void*)+0x31e>
c001eee5:	0f b6 d2             	movzx  edx,dl
c001eee8:	83 c0 05             	add    eax,0x5
c001eeeb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eeee:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eef2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001eef6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001eefc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ef01:	eb 3d                	jmp    c001ef40 <IDE::open(int, int, void*)+0x31e>
c001ef03:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ef09:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ef10:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ef17:	66 05 06 02          	add    ax,0x206
c001ef1b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ef22:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ef29:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ef30:	66 05 06 02          	add    ax,0x206
c001ef34:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ef3b:	e9 e5 fe ff ff       	jmp    c001ee25 <IDE::open(int, int, void*)+0x203>
c001ef40:	50                   	push   eax
c001ef41:	50                   	push   eax
c001ef42:	6a 00                	push   0x0
c001ef44:	53                   	push   ebx
c001ef45:	e8 64 fa ff ff       	call   c001e9ae <IDE::prepareInterrupt(unsigned char)>
c001ef4a:	5a                   	pop    edx
c001ef4b:	59                   	pop    ecx
c001ef4c:	6a 01                	push   0x1
c001ef4e:	53                   	push   ebx
c001ef4f:	e8 5a fa ff ff       	call   c001e9ae <IDE::prepareInterrupt(unsigned char)>
c001ef54:	83 c4 0c             	add    esp,0xc
c001ef57:	6a 00                	push   0x0
c001ef59:	6a 00                	push   0x0
c001ef5b:	53                   	push   ebx
c001ef5c:	e8 7b fc ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c001ef61:	83 c4 0c             	add    esp,0xc
c001ef64:	6a 00                	push   0x0
c001ef66:	6a 01                	push   0x1
c001ef68:	53                   	push   ebx
c001ef69:	e8 6e fc ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c001ef6e:	83 c4 10             	add    esp,0x10
c001ef71:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ef78:	74 34                	je     c001efae <IDE::open(int, int, void*)+0x38c>
c001ef7a:	83 ec 0c             	sub    esp,0xc
c001ef7d:	53                   	push   ebx
c001ef7e:	6a 01                	push   0x1
c001ef80:	68 a4 eb 01 c0       	push   0xc001eba4
c001ef85:	6a 0e                	push   0xe
c001ef87:	53                   	push   ebx
c001ef88:	e8 e5 f0 fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef8d:	83 c4 14             	add    esp,0x14
c001ef90:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ef96:	53                   	push   ebx
c001ef97:	6a 01                	push   0x1
c001ef99:	68 c0 eb 01 c0       	push   0xc001ebc0
c001ef9e:	6a 0f                	push   0xf
c001efa0:	53                   	push   ebx
c001efa1:	e8 cc f0 fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efa6:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001efac:	eb 38                	jmp    c001efe6 <IDE::open(int, int, void*)+0x3c4>
c001efae:	83 ec 0c             	sub    esp,0xc
c001efb1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001efbb:	53                   	push   ebx
c001efbc:	6a 00                	push   0x0
c001efbe:	68 a4 eb 01 c0       	push   0xc001eba4
c001efc3:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001efc9:	53                   	push   ebx
c001efca:	e8 a3 f0 fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efcf:	83 c4 14             	add    esp,0x14
c001efd2:	53                   	push   ebx
c001efd3:	6a 00                	push   0x0
c001efd5:	68 c0 eb 01 c0       	push   0xc001ebc0
c001efda:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001efe0:	53                   	push   ebx
c001efe1:	e8 8c f0 fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001efe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001efe8:	83 c4 20             	add    esp,0x20
c001efeb:	83 ec 0c             	sub    esp,0xc
c001efee:	53                   	push   ebx
c001efef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eff2:	83 c4 0c             	add    esp,0xc
c001eff5:	6a 07                	push   0x7
c001eff7:	6a 00                	push   0x0
c001eff9:	53                   	push   ebx
c001effa:	e8 95 fa ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001efff:	83 c4 0c             	add    esp,0xc
c001f002:	6a 07                	push   0x7
c001f004:	6a 01                	push   0x1
c001f006:	53                   	push   ebx
c001f007:	e8 88 fa ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f00c:	83 c4 0c             	add    esp,0xc
c001f00f:	6a 01                	push   0x1
c001f011:	6a 00                	push   0x0
c001f013:	53                   	push   ebx
c001f014:	e8 c3 fb ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c001f019:	83 c4 0c             	add    esp,0xc
c001f01c:	6a 01                	push   0x1
c001f01e:	6a 01                	push   0x1
c001f020:	53                   	push   ebx
c001f021:	e8 b6 fb ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c001f026:	83 c4 2c             	add    esp,0x2c
c001f029:	31 c0                	xor    eax,eax
c001f02b:	5b                   	pop    ebx
c001f02c:	5e                   	pop    esi
c001f02d:	5f                   	pop    edi
c001f02e:	5d                   	pop    ebp
c001f02f:	c3                   	ret    

c001f030 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f030:	55                   	push   ebp
c001f031:	57                   	push   edi
c001f032:	56                   	push   esi
c001f033:	53                   	push   ebx
c001f034:	83 ec 1c             	sub    esp,0x1c
c001f037:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f03b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f03f:	8d 50 f8             	lea    edx,[eax-0x8]
c001f042:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f046:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f04a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f04e:	80 fa 03             	cmp    dl,0x3
c001f051:	77 5d                	ja     c001f0b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f053:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f057:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f05b:	0f b6 db             	movzx  ebx,bl
c001f05e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f061:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f065:	83 ca 80             	or     edx,0xffffff80
c001f068:	0f b6 d2             	movzx  edx,dl
c001f06b:	52                   	push   edx
c001f06c:	6a 0c                	push   0xc
c001f06e:	53                   	push   ebx
c001f06f:	56                   	push   esi
c001f070:	e8 5f f9 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f075:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f07a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f07e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f082:	0f b6 c0             	movzx  eax,al
c001f085:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f089:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f08b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f090:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f094:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f098:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f09c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f0a4:	83 c4 2c             	add    esp,0x2c
c001f0a7:	5b                   	pop    ebx
c001f0a8:	5e                   	pop    esi
c001f0a9:	5f                   	pop    edi
c001f0aa:	5d                   	pop    ebp
c001f0ab:	e9 24 f9 ff ff       	jmp    c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0b0:	3c 07                	cmp    al,0x7
c001f0b2:	77 10                	ja     c001f0c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f0b4:	0f b6 db             	movzx  ebx,bl
c001f0b7:	0f b6 d0             	movzx  edx,al
c001f0ba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f0c2:	eb 2d                	jmp    c001f0f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f0c4:	3c 0d                	cmp    al,0xd
c001f0c6:	77 13                	ja     c001f0db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f0c8:	0f b6 db             	movzx  ebx,bl
c001f0cb:	0f b6 c0             	movzx  eax,al
c001f0ce:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f0d5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f0d9:	eb 16                	jmp    c001f0f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f0db:	3c 15                	cmp    al,0x15
c001f0dd:	77 14                	ja     c001f0f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f0df:	0f b6 db             	movzx  ebx,bl
c001f0e2:	0f b6 c0             	movzx  eax,al
c001f0e5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f0ed:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f0f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f0f3:	83 c4 1c             	add    esp,0x1c
c001f0f6:	5b                   	pop    ebx
c001f0f7:	5e                   	pop    esi
c001f0f8:	5f                   	pop    edi
c001f0f9:	5d                   	pop    ebp
c001f0fa:	c3                   	ret    
c001f0fb:	90                   	nop

c001f0fc <IDE::detect()>:
c001f0fc:	55                   	push   ebp
c001f0fd:	57                   	push   edi
c001f0fe:	56                   	push   esi
c001f0ff:	53                   	push   ebx
c001f100:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f106:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f10d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f114:	0f 85 97 02 00 00    	jne    c001f3b1 <IDE::detect()+0x2b5>
c001f11a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f121:	31 f6                	xor    esi,esi
c001f123:	31 ed                	xor    ebp,ebp
c001f125:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f12d:	89 e8                	mov    eax,ebp
c001f12f:	c1 e0 06             	shl    eax,0x6
c001f132:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f13a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f13e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f142:	c1 e0 04             	shl    eax,0x4
c001f145:	83 c8 a0             	or     eax,0xffffffa0
c001f148:	0f b6 c0             	movzx  eax,al
c001f14b:	50                   	push   eax
c001f14c:	6a 06                	push   0x6
c001f14e:	56                   	push   esi
c001f14f:	53                   	push   ebx
c001f150:	e8 7f f8 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f155:	83 c4 0c             	add    esp,0xc
c001f158:	6a 0c                	push   0xc
c001f15a:	56                   	push   esi
c001f15b:	53                   	push   ebx
c001f15c:	e8 33 f9 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f161:	83 c4 0c             	add    esp,0xc
c001f164:	6a 0c                	push   0xc
c001f166:	56                   	push   esi
c001f167:	53                   	push   ebx
c001f168:	e8 27 f9 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f16d:	83 c4 0c             	add    esp,0xc
c001f170:	6a 0c                	push   0xc
c001f172:	56                   	push   esi
c001f173:	53                   	push   ebx
c001f174:	e8 1b f9 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f179:	83 c4 0c             	add    esp,0xc
c001f17c:	6a 0c                	push   0xc
c001f17e:	56                   	push   esi
c001f17f:	53                   	push   ebx
c001f180:	e8 0f f9 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f185:	68 ec 00 00 00       	push   0xec
c001f18a:	6a 07                	push   0x7
c001f18c:	56                   	push   esi
c001f18d:	53                   	push   ebx
c001f18e:	e8 41 f8 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f193:	83 c4 1c             	add    esp,0x1c
c001f196:	6a 0c                	push   0xc
c001f198:	56                   	push   esi
c001f199:	53                   	push   ebx
c001f19a:	e8 f5 f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f19f:	83 c4 0c             	add    esp,0xc
c001f1a2:	6a 0c                	push   0xc
c001f1a4:	56                   	push   esi
c001f1a5:	53                   	push   ebx
c001f1a6:	e8 e9 f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f1ab:	83 c4 0c             	add    esp,0xc
c001f1ae:	6a 0c                	push   0xc
c001f1b0:	56                   	push   esi
c001f1b1:	53                   	push   ebx
c001f1b2:	e8 dd f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f1b7:	83 c4 0c             	add    esp,0xc
c001f1ba:	6a 0c                	push   0xc
c001f1bc:	56                   	push   esi
c001f1bd:	53                   	push   ebx
c001f1be:	e8 d1 f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f1c3:	83 c4 0c             	add    esp,0xc
c001f1c6:	6a 0c                	push   0xc
c001f1c8:	56                   	push   esi
c001f1c9:	53                   	push   ebx
c001f1ca:	e8 c5 f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f1cf:	83 c4 10             	add    esp,0x10
c001f1d2:	84 c0                	test   al,al
c001f1d4:	0f 84 5f 01 00 00    	je     c001f339 <IDE::detect()+0x23d>
c001f1da:	31 ff                	xor    edi,edi
c001f1dc:	50                   	push   eax
c001f1dd:	6a 0c                	push   0xc
c001f1df:	56                   	push   esi
c001f1e0:	53                   	push   ebx
c001f1e1:	e8 ae f8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f1e6:	83 c4 10             	add    esp,0x10
c001f1e9:	a8 01                	test   al,0x1
c001f1eb:	0f 85 69 01 00 00    	jne    c001f35a <IDE::detect()+0x25e>
c001f1f1:	84 c0                	test   al,al
c001f1f3:	78 04                	js     c001f1f9 <IDE::detect()+0xfd>
c001f1f5:	a8 08                	test   al,0x8
c001f1f7:	75 23                	jne    c001f21c <IDE::detect()+0x120>
c001f1f9:	47                   	inc    edi
c001f1fa:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f200:	7e da                	jle    c001f1dc <IDE::detect()+0xe0>
c001f202:	83 ec 0c             	sub    esp,0xc
c001f205:	6a 32                	push   0x32
c001f207:	e8 dc 94 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001f20c:	83 c4 10             	add    esp,0x10
c001f20f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f215:	75 c5                	jne    c001f1dc <IDE::detect()+0xe0>
c001f217:	e9 3e 01 00 00       	jmp    c001f35a <IDE::detect()+0x25e>
c001f21c:	31 c9                	xor    ecx,ecx
c001f21e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f222:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f226:	83 ec 0c             	sub    esp,0xc
c001f229:	68 80 00 00 00       	push   0x80
c001f22e:	57                   	push   edi
c001f22f:	6a 00                	push   0x0
c001f231:	56                   	push   esi
c001f232:	53                   	push   ebx
c001f233:	e8 f8 fd ff ff       	call   c001f030 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f238:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f23d:	89 e8                	mov    eax,ebp
c001f23f:	89 d1                	mov    ecx,edx
c001f241:	c1 e0 06             	shl    eax,0x6
c001f244:	01 d8                	add    eax,ebx
c001f246:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f24d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f254:	89 f2                	mov    edx,esi
c001f256:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f25c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f260:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f266:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f26a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f271:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f279:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f280:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f288:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f28e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f295:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f29b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f29f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f2a3:	83 c4 20             	add    esp,0x20
c001f2a6:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f2a9:	83 c0 02             	add    eax,0x2
c001f2ac:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f2b2:	83 c7 02             	add    edi,0x2
c001f2b5:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f2b8:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f2be:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f2c2:	75 e2                	jne    c001f2a6 <IDE::detect()+0x1aa>
c001f2c4:	89 e8                	mov    eax,ebp
c001f2c6:	c1 e0 06             	shl    eax,0x6
c001f2c9:	01 d8                	add    eax,ebx
c001f2cb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f2d1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f2d8:	66 c1 ea 09          	shr    dx,0x9
c001f2dc:	83 e2 01             	and    edx,0x1
c001f2df:	84 c9                	test   cl,cl
c001f2e1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f2e7:	75 22                	jne    c001f30b <IDE::detect()+0x20f>
c001f2e9:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f2f0:	74 46                	je     c001f338 <IDE::detect()+0x23c>
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	68 7c 01 00 00       	push   0x17c
c001f2fa:	e8 c4 a6 fe ff       	call   c00099c3 <malloc>
c001f2ff:	89 c7                	mov    edi,eax
c001f301:	89 04 24             	mov    DWORD PTR [esp],eax
c001f304:	e8 e1 07 00 00       	call   c001faea <ATA::ATA()>
c001f309:	eb 17                	jmp    c001f322 <IDE::detect()+0x226>
c001f30b:	83 ec 0c             	sub    esp,0xc
c001f30e:	68 80 01 00 00       	push   0x180
c001f313:	e8 ab a6 fe ff       	call   c00099c3 <malloc>
c001f318:	89 c7                	mov    edi,eax
c001f31a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f31d:	e8 50 0e 00 00       	call   c0020172 <ATAPI::ATAPI()>
c001f322:	5a                   	pop    edx
c001f323:	59                   	pop    ecx
c001f324:	57                   	push   edi
c001f325:	53                   	push   ebx
c001f326:	e8 cf ed fe ff       	call   c000e0fa <Device::addChild(Device*)>
c001f32b:	8b 07                	mov    eax,DWORD PTR [edi]
c001f32d:	53                   	push   ebx
c001f32e:	55                   	push   ebp
c001f32f:	6a 00                	push   0x0
c001f331:	57                   	push   edi
c001f332:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f335:	83 c4 20             	add    esp,0x20
c001f338:	45                   	inc    ebp
c001f339:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f33e:	74 0d                	je     c001f34d <IDE::detect()+0x251>
c001f340:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f348:	e9 e0 fd ff ff       	jmp    c001f12d <IDE::detect()+0x31>
c001f34d:	4e                   	dec    esi
c001f34e:	74 61                	je     c001f3b1 <IDE::detect()+0x2b5>
c001f350:	be 01 00 00 00       	mov    esi,0x1
c001f355:	e9 cb fd ff ff       	jmp    c001f125 <IDE::detect()+0x29>
c001f35a:	50                   	push   eax
c001f35b:	6a 04                	push   0x4
c001f35d:	56                   	push   esi
c001f35e:	53                   	push   ebx
c001f35f:	e8 30 f7 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f364:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f368:	83 c4 0c             	add    esp,0xc
c001f36b:	6a 05                	push   0x5
c001f36d:	56                   	push   esi
c001f36e:	53                   	push   ebx
c001f36f:	e8 20 f7 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f374:	83 c4 10             	add    esp,0x10
c001f377:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f37b:	80 fa 14             	cmp    dl,0x14
c001f37e:	75 04                	jne    c001f384 <IDE::detect()+0x288>
c001f380:	3c eb                	cmp    al,0xeb
c001f382:	eb 07                	jmp    c001f38b <IDE::detect()+0x28f>
c001f384:	3c 96                	cmp    al,0x96
c001f386:	75 b1                	jne    c001f339 <IDE::detect()+0x23d>
c001f388:	80 fa 69             	cmp    dl,0x69
c001f38b:	75 ac                	jne    c001f339 <IDE::detect()+0x23d>
c001f38d:	68 a1 00 00 00       	push   0xa1
c001f392:	6a 07                	push   0x7
c001f394:	56                   	push   esi
c001f395:	53                   	push   ebx
c001f396:	e8 39 f6 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f39b:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f3a2:	e8 41 93 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	b1 01                	mov    cl,0x1
c001f3ac:	e9 6d fe ff ff       	jmp    c001f21e <IDE::detect()+0x122>
c001f3b1:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f3b7:	5b                   	pop    ebx
c001f3b8:	5e                   	pop    esi
c001f3b9:	5f                   	pop    edi
c001f3ba:	5d                   	pop    ebp
c001f3bb:	c3                   	ret    

c001f3bc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f3bc:	55                   	push   ebp
c001f3bd:	57                   	push   edi
c001f3be:	56                   	push   esi
c001f3bf:	53                   	push   ebx
c001f3c0:	83 ec 1c             	sub    esp,0x1c
c001f3c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f3c7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f3cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f3cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f3d3:	88 c3                	mov    bl,al
c001f3d5:	84 c0                	test   al,al
c001f3d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3db:	0f 84 81 00 00 00    	je     c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f3e1:	83 ec 0c             	sub    esp,0xc
c001f3e4:	68 73 6b 02 c0       	push   0xc0026b73
c001f3e9:	e8 c5 d8 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001f3ee:	83 c4 10             	add    esp,0x10
c001f3f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f3f5:	3c 01                	cmp    al,0x1
c001f3f7:	74 63                	je     c001f45c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f3f9:	3c 02                	cmp    al,0x2
c001f3fb:	75 53                	jne    c001f450 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f3fd:	d1 e6                	shl    esi,1
c001f3ff:	09 ee                	or     esi,ebp
c001f401:	50                   	push   eax
c001f402:	89 f0                	mov    eax,esi
c001f404:	6a 01                	push   0x1
c001f406:	0f b6 f0             	movzx  esi,al
c001f409:	c1 e6 06             	shl    esi,0x6
c001f40c:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f414:	50                   	push   eax
c001f415:	57                   	push   edi
c001f416:	e8 79 f6 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	a8 01                	test   al,0x1
c001f420:	74 02                	je     c001f424 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f422:	b3 07                	mov    bl,0x7
c001f424:	a8 02                	test   al,0x2
c001f426:	74 02                	je     c001f42a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f428:	b3 03                	mov    bl,0x3
c001f42a:	a8 04                	test   al,0x4
c001f42c:	74 02                	je     c001f430 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f42e:	b3 14                	mov    bl,0x14
c001f430:	a8 08                	test   al,0x8
c001f432:	74 02                	je     c001f436 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f434:	b3 03                	mov    bl,0x3
c001f436:	a8 10                	test   al,0x10
c001f438:	74 02                	je     c001f43c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f43a:	b3 15                	mov    bl,0x15
c001f43c:	a8 20                	test   al,0x20
c001f43e:	74 02                	je     c001f442 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f440:	b3 03                	mov    bl,0x3
c001f442:	a8 40                	test   al,0x40
c001f444:	74 02                	je     c001f448 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f446:	b3 16                	mov    bl,0x16
c001f448:	84 c0                	test   al,al
c001f44a:	79 16                	jns    c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f44c:	b3 0d                	mov    bl,0xd
c001f44e:	eb 12                	jmp    c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f450:	3c 03                	cmp    al,0x3
c001f452:	74 0c                	je     c001f460 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f454:	3c 04                	cmp    al,0x4
c001f456:	75 0a                	jne    c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f458:	b3 08                	mov    bl,0x8
c001f45a:	eb 06                	jmp    c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f45c:	b3 13                	mov    bl,0x13
c001f45e:	eb 02                	jmp    c001f462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f460:	b3 17                	mov    bl,0x17
c001f462:	83 c4 1c             	add    esp,0x1c
c001f465:	88 d8                	mov    al,bl
c001f467:	5b                   	pop    ebx
c001f468:	5e                   	pop    esi
c001f469:	5f                   	pop    edi
c001f46a:	5d                   	pop    ebp
c001f46b:	c3                   	ret    

c001f46c <IDE::polling(unsigned char, unsigned int)>:
c001f46c:	57                   	push   edi
c001f46d:	56                   	push   esi
c001f46e:	53                   	push   ebx
c001f46f:	bb 04 00 00 00       	mov    ebx,0x4
c001f474:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f478:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f47d:	52                   	push   edx
c001f47e:	6a 0c                	push   0xc
c001f480:	56                   	push   esi
c001f481:	57                   	push   edi
c001f482:	e8 0d f6 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	4b                   	dec    ebx
c001f48b:	75 f0                	jne    c001f47d <IDE::polling(unsigned char, unsigned int)+0x11>
c001f48d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f492:	50                   	push   eax
c001f493:	6a 0c                	push   0xc
c001f495:	56                   	push   esi
c001f496:	57                   	push   edi
c001f497:	e8 f8 f5 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001f49c:	83 c4 10             	add    esp,0x10
c001f49f:	a8 01                	test   al,0x1
c001f4a1:	75 17                	jne    c001f4ba <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f4a3:	a8 20                	test   al,0x20
c001f4a5:	75 0f                	jne    c001f4b6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f4a7:	4b                   	dec    ebx
c001f4a8:	74 10                	je     c001f4ba <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f4aa:	84 c0                	test   al,al
c001f4ac:	78 e4                	js     c001f492 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f4ae:	a8 08                	test   al,0x8
c001f4b0:	74 e0                	je     c001f492 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f4b2:	31 c0                	xor    eax,eax
c001f4b4:	eb 06                	jmp    c001f4bc <IDE::polling(unsigned char, unsigned int)+0x50>
c001f4b6:	b0 01                	mov    al,0x1
c001f4b8:	eb 02                	jmp    c001f4bc <IDE::polling(unsigned char, unsigned int)+0x50>
c001f4ba:	b0 02                	mov    al,0x2
c001f4bc:	5b                   	pop    ebx
c001f4bd:	5e                   	pop    esi
c001f4be:	5f                   	pop    edi
c001f4bf:	c3                   	ret    

c001f4c0 <SATABus::close(int, int, void*)>:
c001f4c0:	31 c0                	xor    eax,eax
c001f4c2:	c3                   	ret    
c001f4c3:	90                   	nop

c001f4c4 <SATABus::detect()>:
c001f4c4:	c3                   	ret    
c001f4c5:	90                   	nop

c001f4c6 <SATABus::SATABus()>:
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4cd:	83 ec 08             	sub    esp,0x8
c001f4d0:	68 ac 6b 02 c0       	push   0xc0026bac
c001f4d5:	50                   	push   eax
c001f4d6:	e8 cd ef fe ff       	call   c000e4a8 <HardDiskController::HardDiskController(char const*)>
c001f4db:	83 c4 10             	add    esp,0x10
c001f4de:	ba 00 6d 02 c0       	mov    edx,0xc0026d00
c001f4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e7:	89 10                	mov    DWORD PTR [eax],edx
c001f4e9:	83 ec 0c             	sub    esp,0xc
c001f4ec:	6a 50                	push   0x50
c001f4ee:	e8 72 ac fe ff       	call   c000a165 <Phys::allocateContiguousPages(int)>
c001f4f3:	83 c4 10             	add    esp,0x10
c001f4f6:	89 c2                	mov    edx,eax
c001f4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f502:	83 ec 0c             	sub    esp,0xc
c001f505:	6a 50                	push   0x50
c001f507:	e8 81 c4 fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c001f50c:	83 c4 10             	add    esp,0x10
c001f50f:	89 c2                	mov    edx,eax
c001f511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f515:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f51b:	a1 b0 82 02 c0       	mov    eax,ds:0xc00282b0
c001f520:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f524:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f52a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f52e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f534:	83 ec 0c             	sub    esp,0xc
c001f537:	6a 03                	push   0x3
c001f539:	6a 50                	push   0x50
c001f53b:	51                   	push   ecx
c001f53c:	52                   	push   edx
c001f53d:	50                   	push   eax
c001f53e:	e8 e7 cd fe ff       	call   c000c32a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f543:	83 c4 20             	add    esp,0x20
c001f546:	90                   	nop
c001f547:	83 c4 0c             	add    esp,0xc
c001f54a:	c3                   	ret    
c001f54b:	90                   	nop

c001f54c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f54c:	53                   	push   ebx
c001f54d:	83 ec 08             	sub    esp,0x8
c001f550:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f554:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f55b:	74 2d                	je     c001f58a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x3e>
c001f55d:	83 ec 0c             	sub    esp,0xc
c001f560:	68 d0 6b 02 c0       	push   0xc0026bd0
c001f565:	e8 b3 a4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f56a:	83 c4 10             	add    esp,0x10
c001f56d:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f574:	75 14                	jne    c001f58a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x3e>
c001f576:	e4 60                	in     al,0x60
c001f578:	3c 5a                	cmp    al,0x5a
c001f57a:	74 04                	je     c001f580 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x34>
c001f57c:	3c 1c                	cmp    al,0x1c
c001f57e:	75 f6                	jne    c001f576 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2a>
c001f580:	e4 60                	in     al,0x60
c001f582:	3c 5a                	cmp    al,0x5a
c001f584:	74 fa                	je     c001f580 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x34>
c001f586:	3c 1c                	cmp    al,0x1c
c001f588:	74 f6                	je     c001f580 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x34>
c001f58a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001f58d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001f590:	09 c2                	or     edx,eax
c001f592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f596:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f59c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f59e:	31 c0                	xor    eax,eax
c001f5a0:	c1 e9 08             	shr    ecx,0x8
c001f5a3:	83 e1 0f             	and    ecx,0xf
c001f5a6:	39 c8                	cmp    eax,ecx
c001f5a8:	74 0a                	je     c001f5b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001f5aa:	f6 c2 01             	test   dl,0x1
c001f5ad:	74 4e                	je     c001f5fd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xb1>
c001f5af:	d1 ea                	shr    edx,1
c001f5b1:	40                   	inc    eax
c001f5b2:	eb f2                	jmp    c001f5a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x5a>
c001f5b4:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f5bb:	74 2d                	je     c001f5ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x9e>
c001f5bd:	83 ec 0c             	sub    esp,0xc
c001f5c0:	68 e7 6b 02 c0       	push   0xc0026be7
c001f5c5:	e8 53 a4 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f5d4:	75 14                	jne    c001f5ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x9e>
c001f5d6:	e4 60                	in     al,0x60
c001f5d8:	3c 5a                	cmp    al,0x5a
c001f5da:	74 04                	je     c001f5e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x94>
c001f5dc:	3c 1c                	cmp    al,0x1c
c001f5de:	75 f6                	jne    c001f5d6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8a>
c001f5e0:	e4 60                	in     al,0x60
c001f5e2:	3c 5a                	cmp    al,0x5a
c001f5e4:	74 fa                	je     c001f5e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x94>
c001f5e6:	3c 1c                	cmp    al,0x1c
c001f5e8:	74 f6                	je     c001f5e0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x94>
c001f5ea:	83 ec 0c             	sub    esp,0xc
c001f5ed:	68 fe 6b 02 c0       	push   0xc0026bfe
c001f5f2:	e8 28 52 ff ff       	call   c001481f <Krnl::panic(char const*)>
c001f5f7:	83 c4 10             	add    esp,0x10
c001f5fa:	83 c8 ff             	or     eax,0xffffffff
c001f5fd:	83 c4 08             	add    esp,0x8
c001f600:	5b                   	pop    ebx
c001f601:	c3                   	ret    

c001f602 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f606:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f609:	89 c2                	mov    edx,eax
c001f60b:	c1 ea 08             	shr    edx,0x8
c001f60e:	83 e2 0f             	and    edx,0xf
c001f611:	fe ca                	dec    dl
c001f613:	75 31                	jne    c001f646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f615:	83 e0 0f             	and    eax,0xf
c001f618:	3c 03                	cmp    al,0x3
c001f61a:	75 2a                	jne    c001f646 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f61c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f61f:	b8 02 00 00 00       	mov    eax,0x2
c001f624:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f62a:	74 1c                	je     c001f648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f62c:	b8 04 00 00 00       	mov    eax,0x4
c001f631:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f637:	74 0f                	je     c001f648 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f639:	31 c0                	xor    eax,eax
c001f63b:	83 fa 03             	cmp    edx,0x3
c001f63e:	0f 94 c0             	sete   al
c001f641:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f645:	c3                   	ret    
c001f646:	31 c0                	xor    eax,eax
c001f648:	c3                   	ret    
c001f649:	90                   	nop

c001f64a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f64e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f651:	0f ba e2 0f          	bt     edx,0xf
c001f655:	72 f7                	jb     c001f64e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f657:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f65a:	83 ca 10             	or     edx,0x10
c001f65d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f660:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f663:	83 ca 01             	or     edx,0x1
c001f666:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f669:	c3                   	ret    

c001f66a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f66a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f66e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f671:	83 e2 fe             	and    edx,0xfffffffe
c001f674:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f677:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f67a:	83 e2 ef             	and    edx,0xffffffef
c001f67d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f680:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f683:	0f ba e2 0e          	bt     edx,0xe
c001f687:	72 f7                	jb     c001f680 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f689:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f68c:	0f ba e2 0f          	bt     edx,0xf
c001f690:	72 ee                	jb     c001f680 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f692:	c3                   	ret    
c001f693:	90                   	nop

c001f694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f694:	55                   	push   ebp
c001f695:	57                   	push   edi
c001f696:	56                   	push   esi
c001f697:	53                   	push   ebx
c001f698:	83 ec 1c             	sub    esp,0x1c
c001f69b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f69f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f6a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f6a7:	53                   	push   ebx
c001f6a8:	89 fd                	mov    ebp,edi
c001f6aa:	56                   	push   esi
c001f6ab:	c1 e5 0a             	shl    ebp,0xa
c001f6ae:	e8 b7 ff ff ff       	call   c001f66a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f6b3:	83 ec 0c             	sub    esp,0xc
c001f6b6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f6bc:	01 e8                	add    eax,ebp
c001f6be:	89 03                	mov    DWORD PTR [ebx],eax
c001f6c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6c2:	68 00 04 00 00       	push   0x400
c001f6c7:	6a 00                	push   0x0
c001f6c9:	50                   	push   eax
c001f6ca:	e8 b5 0f fe ff       	call   c0000684 <memset>
c001f6cf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f6d5:	89 fa                	mov    edx,edi
c001f6d7:	01 e8                	add    eax,ebp
c001f6d9:	c1 e7 0d             	shl    edi,0xd
c001f6dc:	89 03                	mov    DWORD PTR [ebx],eax
c001f6de:	c1 e2 08             	shl    edx,0x8
c001f6e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f6e8:	81 c2 00 80 00 00    	add    edx,0x8000
c001f6ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f6f2:	89 d0                	mov    eax,edx
c001f6f4:	83 c4 1c             	add    esp,0x1c
c001f6f7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f6fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f700:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f703:	68 00 01 00 00       	push   0x100
c001f708:	6a 00                	push   0x0
c001f70a:	50                   	push   eax
c001f70b:	e8 74 0f fe ff       	call   c0000684 <memset>
c001f710:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f714:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f71a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f720:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f724:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f727:	83 c4 10             	add    esp,0x10
c001f72a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f731:	31 ff                	xor    edi,edi
c001f733:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f739:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f73f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f743:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f749:	83 c5 20             	add    ebp,0x20
c001f74c:	01 f8                	add    eax,edi
c001f74e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f751:	52                   	push   edx
c001f752:	68 00 01 00 00       	push   0x100
c001f757:	6a 00                	push   0x0
c001f759:	50                   	push   eax
c001f75a:	e8 25 0f fe ff       	call   c0000684 <memset>
c001f75f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f763:	83 c4 10             	add    esp,0x10
c001f766:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f76c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f773:	01 f8                	add    eax,edi
c001f775:	81 c7 00 01 00 00    	add    edi,0x100
c001f77b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f77e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f784:	75 b3                	jne    c001f739 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f786:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f78a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f78e:	83 c4 1c             	add    esp,0x1c
c001f791:	5b                   	pop    ebx
c001f792:	5e                   	pop    esi
c001f793:	5f                   	pop    edi
c001f794:	5d                   	pop    ebp
c001f795:	e9 b0 fe ff ff       	jmp    c001f64a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f79a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f79a:	55                   	push   ebp
c001f79b:	57                   	push   edi
c001f79c:	56                   	push   esi
c001f79d:	53                   	push   ebx
c001f79e:	83 ec 0c             	sub    esp,0xc
c001f7a1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f7a5:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f7ac:	74 2d                	je     c001f7db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f7ae:	83 ec 0c             	sub    esp,0xc
c001f7b1:	68 23 6c 02 c0       	push   0xc0026c23
c001f7b6:	e8 62 a2 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f7c5:	75 14                	jne    c001f7db <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f7c7:	e4 60                	in     al,0x60
c001f7c9:	3c 1c                	cmp    al,0x1c
c001f7cb:	74 04                	je     c001f7d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7cd:	3c 5a                	cmp    al,0x5a
c001f7cf:	75 f6                	jne    c001f7c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f7d1:	e4 60                	in     al,0x60
c001f7d3:	3c 5a                	cmp    al,0x5a
c001f7d5:	74 fa                	je     c001f7d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7d7:	3c 1c                	cmp    al,0x1c
c001f7d9:	74 f6                	je     c001f7d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f7db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f7df:	31 db                	xor    ebx,ebx
c001f7e1:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f7e4:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f7ea:	0f 84 9f 02 00 00    	je     c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001f7f0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f7f4:	89 d8                	mov    eax,ebx
c001f7f6:	c1 e0 07             	shl    eax,0x7
c001f7f9:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f800:	50                   	push   eax
c001f801:	50                   	push   eax
c001f802:	57                   	push   edi
c001f803:	56                   	push   esi
c001f804:	e8 f9 fd ff ff       	call   c001f602 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f809:	83 c4 10             	add    esp,0x10
c001f80c:	83 f8 01             	cmp    eax,0x1
c001f80f:	0f 85 24 01 00 00    	jne    c001f939 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x19f>
c001f815:	50                   	push   eax
c001f816:	53                   	push   ebx
c001f817:	57                   	push   edi
c001f818:	56                   	push   esi
c001f819:	e8 76 fe ff ff       	call   c001f694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f828:	74 2d                	je     c001f857 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f82a:	83 ec 0c             	sub    esp,0xc
c001f82d:	68 38 6c 02 c0       	push   0xc0026c38
c001f832:	e8 e6 a1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f837:	83 c4 10             	add    esp,0x10
c001f83a:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f841:	75 14                	jne    c001f857 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f843:	e4 60                	in     al,0x60
c001f845:	3c 5a                	cmp    al,0x5a
c001f847:	74 04                	je     c001f84d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f849:	3c 1c                	cmp    al,0x1c
c001f84b:	75 f6                	jne    c001f843 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f84d:	e4 60                	in     al,0x60
c001f84f:	3c 5a                	cmp    al,0x5a
c001f851:	74 fa                	je     c001f84d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f853:	3c 1c                	cmp    al,0x1c
c001f855:	74 f6                	je     c001f84d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f857:	83 ec 0c             	sub    esp,0xc
c001f85a:	68 7c 01 00 00       	push   0x17c
c001f85f:	e8 5f a1 fe ff       	call   c00099c3 <malloc>
c001f864:	89 04 24             	mov    DWORD PTR [esp],eax
c001f867:	89 c7                	mov    edi,eax
c001f869:	e8 b0 10 00 00       	call   c002091e <SATA::SATA()>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f878:	74 2d                	je     c001f8a7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f87a:	83 ec 0c             	sub    esp,0xc
c001f87d:	68 4d 6c 02 c0       	push   0xc0026c4d
c001f882:	e8 96 a1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f887:	83 c4 10             	add    esp,0x10
c001f88a:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f891:	75 14                	jne    c001f8a7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f893:	e4 60                	in     al,0x60
c001f895:	3c 1c                	cmp    al,0x1c
c001f897:	74 04                	je     c001f89d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f899:	3c 5a                	cmp    al,0x5a
c001f89b:	75 f6                	jne    c001f893 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f89d:	e4 60                	in     al,0x60
c001f89f:	3c 5a                	cmp    al,0x5a
c001f8a1:	74 fa                	je     c001f89d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f8a3:	3c 1c                	cmp    al,0x1c
c001f8a5:	74 f6                	je     c001f89d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f8a7:	51                   	push   ecx
c001f8a8:	51                   	push   ecx
c001f8a9:	57                   	push   edi
c001f8aa:	56                   	push   esi
c001f8ab:	e8 4a e8 fe ff       	call   c000e0fa <Device::addChild(Device*)>
c001f8b0:	83 c4 10             	add    esp,0x10
c001f8b3:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f8ba:	74 2d                	je     c001f8e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	68 62 6c 02 c0       	push   0xc0026c62
c001f8c4:	e8 54 a1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f8c9:	83 c4 10             	add    esp,0x10
c001f8cc:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f8d3:	75 14                	jne    c001f8e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f8d5:	e4 60                	in     al,0x60
c001f8d7:	3c 1c                	cmp    al,0x1c
c001f8d9:	74 04                	je     c001f8df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8db:	3c 5a                	cmp    al,0x5a
c001f8dd:	75 f6                	jne    c001f8d5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f8df:	e4 60                	in     al,0x60
c001f8e1:	3c 5a                	cmp    al,0x5a
c001f8e3:	74 fa                	je     c001f8df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8e5:	3c 1c                	cmp    al,0x1c
c001f8e7:	74 f6                	je     c001f8df <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f8e9:	8b 07                	mov    eax,DWORD PTR [edi]
c001f8eb:	56                   	push   esi
c001f8ec:	6a 00                	push   0x0
c001f8ee:	53                   	push   ebx
c001f8ef:	57                   	push   edi
c001f8f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f8fd:	0f 84 8c 01 00 00    	je     c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001f903:	83 ec 0c             	sub    esp,0xc
c001f906:	68 77 6c 02 c0       	push   0xc0026c77
c001f90b:	e8 0d a1 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f910:	83 c4 10             	add    esp,0x10
c001f913:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f91a:	0f 85 6f 01 00 00    	jne    c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001f920:	e4 60                	in     al,0x60
c001f922:	3c 5a                	cmp    al,0x5a
c001f924:	74 04                	je     c001f92a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x190>
c001f926:	3c 1c                	cmp    al,0x1c
c001f928:	75 f6                	jne    c001f920 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x186>
c001f92a:	e4 60                	in     al,0x60
c001f92c:	3c 5a                	cmp    al,0x5a
c001f92e:	74 fa                	je     c001f92a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x190>
c001f930:	3c 1c                	cmp    al,0x1c
c001f932:	74 f6                	je     c001f92a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x190>
c001f934:	e9 56 01 00 00       	jmp    c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001f939:	83 f8 04             	cmp    eax,0x4
c001f93c:	0f 85 4d 01 00 00    	jne    c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001f942:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f949:	74 2d                	je     c001f978 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1de>
c001f94b:	83 ec 0c             	sub    esp,0xc
c001f94e:	68 8c 6c 02 c0       	push   0xc0026c8c
c001f953:	e8 c5 a0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f958:	83 c4 10             	add    esp,0x10
c001f95b:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f962:	75 14                	jne    c001f978 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1de>
c001f964:	e4 60                	in     al,0x60
c001f966:	3c 1c                	cmp    al,0x1c
c001f968:	74 04                	je     c001f96e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1d4>
c001f96a:	3c 5a                	cmp    al,0x5a
c001f96c:	75 f6                	jne    c001f964 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ca>
c001f96e:	e4 60                	in     al,0x60
c001f970:	3c 5a                	cmp    al,0x5a
c001f972:	74 fa                	je     c001f96e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1d4>
c001f974:	3c 1c                	cmp    al,0x1c
c001f976:	74 f6                	je     c001f96e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1d4>
c001f978:	52                   	push   edx
c001f979:	53                   	push   ebx
c001f97a:	57                   	push   edi
c001f97b:	56                   	push   esi
c001f97c:	e8 13 fd ff ff       	call   c001f694 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f981:	83 c4 10             	add    esp,0x10
c001f984:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f98b:	74 2d                	je     c001f9ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x220>
c001f98d:	83 ec 0c             	sub    esp,0xc
c001f990:	68 a1 6c 02 c0       	push   0xc0026ca1
c001f995:	e8 83 a0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f99a:	83 c4 10             	add    esp,0x10
c001f99d:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f9a4:	75 14                	jne    c001f9ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x220>
c001f9a6:	e4 60                	in     al,0x60
c001f9a8:	3c 5a                	cmp    al,0x5a
c001f9aa:	74 04                	je     c001f9b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x216>
c001f9ac:	3c 1c                	cmp    al,0x1c
c001f9ae:	75 f6                	jne    c001f9a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x20c>
c001f9b0:	e4 60                	in     al,0x60
c001f9b2:	3c 5a                	cmp    al,0x5a
c001f9b4:	74 fa                	je     c001f9b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x216>
c001f9b6:	3c 1c                	cmp    al,0x1c
c001f9b8:	74 f6                	je     c001f9b0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x216>
c001f9ba:	83 ec 0c             	sub    esp,0xc
c001f9bd:	68 80 01 00 00       	push   0x180
c001f9c2:	e8 fc 9f fe ff       	call   c00099c3 <malloc>
c001f9c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9ca:	89 c7                	mov    edi,eax
c001f9cc:	e8 6b 16 00 00       	call   c002103c <SATAPI::SATAPI()>
c001f9d1:	83 c4 10             	add    esp,0x10
c001f9d4:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001f9db:	74 2d                	je     c001fa0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x270>
c001f9dd:	83 ec 0c             	sub    esp,0xc
c001f9e0:	68 b6 6c 02 c0       	push   0xc0026cb6
c001f9e5:	e8 33 a0 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001f9ea:	83 c4 10             	add    esp,0x10
c001f9ed:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001f9f4:	75 14                	jne    c001fa0a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x270>
c001f9f6:	e4 60                	in     al,0x60
c001f9f8:	3c 5a                	cmp    al,0x5a
c001f9fa:	74 04                	je     c001fa00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x266>
c001f9fc:	3c 1c                	cmp    al,0x1c
c001f9fe:	75 f6                	jne    c001f9f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x25c>
c001fa00:	e4 60                	in     al,0x60
c001fa02:	3c 5a                	cmp    al,0x5a
c001fa04:	74 fa                	je     c001fa00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x266>
c001fa06:	3c 1c                	cmp    al,0x1c
c001fa08:	74 f6                	je     c001fa00 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x266>
c001fa0a:	50                   	push   eax
c001fa0b:	50                   	push   eax
c001fa0c:	57                   	push   edi
c001fa0d:	56                   	push   esi
c001fa0e:	e8 e7 e6 fe ff       	call   c000e0fa <Device::addChild(Device*)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001fa1d:	74 2d                	je     c001fa4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2b2>
c001fa1f:	83 ec 0c             	sub    esp,0xc
c001fa22:	68 cb 6c 02 c0       	push   0xc0026ccb
c001fa27:	e8 f1 9f fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001fa2c:	83 c4 10             	add    esp,0x10
c001fa2f:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001fa36:	75 14                	jne    c001fa4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2b2>
c001fa38:	e4 60                	in     al,0x60
c001fa3a:	3c 5a                	cmp    al,0x5a
c001fa3c:	74 04                	je     c001fa42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2a8>
c001fa3e:	3c 1c                	cmp    al,0x1c
c001fa40:	75 f6                	jne    c001fa38 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x29e>
c001fa42:	e4 60                	in     al,0x60
c001fa44:	3c 5a                	cmp    al,0x5a
c001fa46:	74 fa                	je     c001fa42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2a8>
c001fa48:	3c 1c                	cmp    al,0x1c
c001fa4a:	74 f6                	je     c001fa42 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2a8>
c001fa4c:	8b 07                	mov    eax,DWORD PTR [edi]
c001fa4e:	56                   	push   esi
c001fa4f:	6a 00                	push   0x0
c001fa51:	53                   	push   ebx
c001fa52:	57                   	push   edi
c001fa53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fa56:	83 c4 10             	add    esp,0x10
c001fa59:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c001fa60:	74 2d                	je     c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001fa62:	83 ec 0c             	sub    esp,0xc
c001fa65:	68 e0 6c 02 c0       	push   0xc0026ce0
c001fa6a:	e8 ae 9f fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c001fa79:	75 14                	jne    c001fa8f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2f5>
c001fa7b:	e4 60                	in     al,0x60
c001fa7d:	3c 5a                	cmp    al,0x5a
c001fa7f:	74 04                	je     c001fa85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2eb>
c001fa81:	3c 1c                	cmp    al,0x1c
c001fa83:	75 f6                	jne    c001fa7b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2e1>
c001fa85:	e4 60                	in     al,0x60
c001fa87:	3c 5a                	cmp    al,0x5a
c001fa89:	74 fa                	je     c001fa85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2eb>
c001fa8b:	3c 1c                	cmp    al,0x1c
c001fa8d:	74 f6                	je     c001fa85 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2eb>
c001fa8f:	d1 ed                	shr    ebp,1
c001fa91:	43                   	inc    ebx
c001fa92:	83 fb 20             	cmp    ebx,0x20
c001fa95:	0f 85 49 fd ff ff    	jne    c001f7e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fa9b:	83 c4 0c             	add    esp,0xc
c001fa9e:	5b                   	pop    ebx
c001fa9f:	5e                   	pop    esi
c001faa0:	5f                   	pop    edi
c001faa1:	5d                   	pop    ebp
c001faa2:	c3                   	ret    
c001faa3:	90                   	nop

c001faa4 <SATABus::open(int, int, void*)>:
c001faa4:	83 ec 14             	sub    esp,0x14
c001faa7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001faab:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001fab1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fab7:	52                   	push   edx
c001fab8:	50                   	push   eax
c001fab9:	e8 dc fc ff ff       	call   c001f79a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fabe:	31 c0                	xor    eax,eax
c001fac0:	83 c4 1c             	add    esp,0x1c
c001fac3:	c3                   	ret    

c001fac4 <ATA::close(int, int, void*)>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fad1:	85 c0                	test   eax,eax
c001fad3:	74 0c                	je     c001fae1 <ATA::close(int, int, void*)+0x1d>
c001fad5:	83 ec 0c             	sub    esp,0xc
c001fad8:	8b 10                	mov    edx,DWORD PTR [eax]
c001fada:	50                   	push   eax
c001fadb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	31 c0                	xor    eax,eax
c001fae3:	83 c4 0c             	add    esp,0xc
c001fae6:	c3                   	ret    
c001fae7:	90                   	nop

c001fae8 <ATA::powerSaving(PowerSavingLevel)>:
c001fae8:	c3                   	ret    
c001fae9:	90                   	nop

c001faea <ATA::ATA()>:
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf1:	83 ec 04             	sub    esp,0x4
c001faf4:	68 00 02 00 00       	push   0x200
c001faf9:	68 43 6e 02 c0       	push   0xc0026e43
c001fafe:	50                   	push   eax
c001faff:	e8 2e ea fe ff       	call   c000e532 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb04:	83 c4 10             	add    esp,0x10
c001fb07:	ba 78 6d 02 c0       	mov    edx,0xc0026d78
c001fb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb10:	89 10                	mov    DWORD PTR [eax],edx
c001fb12:	90                   	nop
c001fb13:	83 c4 0c             	add    esp,0xc
c001fb16:	c3                   	ret    
c001fb17:	90                   	nop

c001fb18 <ATA::flush(bool)>:
c001fb18:	53                   	push   ebx
c001fb19:	83 ec 08             	sub    esp,0x8
c001fb1c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fb21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb25:	19 c0                	sbb    eax,eax
c001fb27:	83 e0 fd             	and    eax,0xfffffffd
c001fb2a:	05 ea 00 00 00       	add    eax,0xea
c001fb2f:	50                   	push   eax
c001fb30:	6a 07                	push   0x7
c001fb32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb39:	50                   	push   eax
c001fb3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb40:	e8 8f ee ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb45:	83 c4 0c             	add    esp,0xc
c001fb48:	6a 00                	push   0x0
c001fb4a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fb51:	50                   	push   eax
c001fb52:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fb58:	e8 0f f9 ff ff       	call   c001f46c <IDE::polling(unsigned char, unsigned int)>
c001fb5d:	83 c4 18             	add    esp,0x18
c001fb60:	5b                   	pop    ebx
c001fb61:	c3                   	ret    

c001fb62 <ATA::readyForCommand()>:
c001fb62:	56                   	push   esi
c001fb63:	53                   	push   ebx
c001fb64:	53                   	push   ebx
c001fb65:	31 db                	xor    ebx,ebx
c001fb67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb6b:	51                   	push   ecx
c001fb6c:	6a 0c                	push   0xc
c001fb6e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb75:	50                   	push   eax
c001fb76:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb7c:	e8 13 ef ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	a8 88                	test   al,0x88
c001fb86:	74 1f                	je     c001fba7 <ATA::readyForCommand()+0x45>
c001fb88:	43                   	inc    ebx
c001fb89:	83 fb 63             	cmp    ebx,0x63
c001fb8c:	7e dd                	jle    c001fb6b <ATA::readyForCommand()+0x9>
c001fb8e:	83 ec 0c             	sub    esp,0xc
c001fb91:	6a 0a                	push   0xa
c001fb93:	e8 50 8b ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c001fb98:	83 c4 10             	add    esp,0x10
c001fb9b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fba1:	75 c8                	jne    c001fb6b <ATA::readyForCommand()+0x9>
c001fba3:	31 c0                	xor    eax,eax
c001fba5:	eb 02                	jmp    c001fba9 <ATA::readyForCommand()+0x47>
c001fba7:	b0 01                	mov    al,0x1
c001fba9:	5a                   	pop    edx
c001fbaa:	5b                   	pop    ebx
c001fbab:	5e                   	pop    esi
c001fbac:	c3                   	ret    
c001fbad:	90                   	nop

c001fbae <ATA::access(unsigned long long, int, void*, bool)>:
c001fbae:	55                   	push   ebp
c001fbaf:	57                   	push   edi
c001fbb0:	56                   	push   esi
c001fbb1:	53                   	push   ebx
c001fbb2:	83 ec 38             	sub    esp,0x38
c001fbb5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fbb9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fbbd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fbc1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fbc5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fbc9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fbcd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fbd1:	68 24 6d 02 c0       	push   0xc0026d24
c001fbd6:	e8 d8 d0 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fbdb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fbe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbe5:	83 c4 10             	add    esp,0x10
c001fbe8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fbee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbf2:	c1 e0 06             	shl    eax,0x6
c001fbf5:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fbfd:	74 5d                	je     c001fc5c <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fbff:	89 fa                	mov    edx,edi
c001fc01:	89 f0                	mov    eax,esi
c001fc03:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fc07:	c1 ea 1c             	shr    edx,0x1c
c001fc0a:	89 d1                	mov    ecx,edx
c001fc0c:	09 c1                	or     ecx,eax
c001fc0e:	74 25                	je     c001fc35 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fc10:	31 ed                	xor    ebp,ebp
c001fc12:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fc19:	89 fa                	mov    edx,edi
c001fc1b:	89 f0                	mov    eax,esi
c001fc1d:	0f ad d0             	shrd   eax,edx,cl
c001fc20:	d3 ea                	shr    edx,cl
c001fc22:	f6 c1 20             	test   cl,0x20
c001fc25:	74 02                	je     c001fc29 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001fc27:	89 d0                	mov    eax,edx
c001fc29:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001fc2d:	45                   	inc    ebp
c001fc2e:	83 fd 06             	cmp    ebp,0x6
c001fc31:	75 df                	jne    c001fc12 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001fc33:	eb 76                	jmp    c001fcab <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001fc35:	89 f0                	mov    eax,esi
c001fc37:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fc3c:	89 fa                	mov    edx,edi
c001fc3e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc45:	0f ac d0 10          	shrd   eax,edx,0x10
c001fc49:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc4e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fc52:	c1 ee 18             	shr    esi,0x18
c001fc55:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fc5a:	eb 56                	jmp    c001fcb2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fc5c:	6a 00                	push   0x0
c001fc5e:	6a 3f                	push   0x3f
c001fc60:	57                   	push   edi
c001fc61:	56                   	push   esi
c001fc62:	e8 7d 2e 00 00       	call   c0022ae4 <__umoddi3>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	40                   	inc    eax
c001fc6b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fc6f:	6a 00                	push   0x0
c001fc71:	68 f0 03 00 00       	push   0x3f0
c001fc76:	57                   	push   edi
c001fc77:	56                   	push   esi
c001fc78:	e8 67 2d 00 00       	call   c00229e4 <__udivdi3>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001fc85:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fc8c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fc91:	6a 00                	push   0x0
c001fc93:	6a 3f                	push   0x3f
c001fc95:	57                   	push   edi
c001fc96:	56                   	push   esi
c001fc97:	e8 48 2d 00 00       	call   c00229e4 <__udivdi3>
c001fc9c:	83 c4 10             	add    esp,0x10
c001fc9f:	89 c6                	mov    esi,eax
c001fca1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001fca6:	83 e6 0f             	and    esi,0xf
c001fca9:	eb 07                	jmp    c001fcb2 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fcab:	31 f6                	xor    esi,esi
c001fcad:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001fcb2:	bf 01 00 00 00       	mov    edi,0x1
c001fcb7:	50                   	push   eax
c001fcb8:	6a 00                	push   0x0
c001fcba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fcc1:	50                   	push   eax
c001fcc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fcc6:	e8 11 ef ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c001fccb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcce:	e8 8f fe ff ff       	call   c001fb62 <ATA::readyForCommand()>
c001fcd3:	83 c4 10             	add    esp,0x10
c001fcd6:	84 c0                	test   al,al
c001fcd8:	0f 84 bc 02 00 00    	je     c001ff9a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fcde:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001fce4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fcea:	c1 e0 04             	shl    eax,0x4
c001fced:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001fcf4:	09 c6                	or     esi,eax
c001fcf6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fcfb:	75 05                	jne    c001fd02 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001fcfd:	83 ce a0             	or     esi,0xffffffa0
c001fd00:	eb 03                	jmp    c001fd05 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001fd02:	83 ce e0             	or     esi,0xffffffe0
c001fd05:	89 f0                	mov    eax,esi
c001fd07:	0f b6 f0             	movzx  esi,al
c001fd0a:	56                   	push   esi
c001fd0b:	6a 06                	push   0x6
c001fd0d:	51                   	push   ecx
c001fd0e:	52                   	push   edx
c001fd0f:	e8 c0 ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd14:	83 c4 10             	add    esp,0x10
c001fd17:	6a 00                	push   0x0
c001fd19:	6a 01                	push   0x1
c001fd1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd22:	50                   	push   eax
c001fd23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd29:	e8 a6 ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd2e:	83 c4 10             	add    esp,0x10
c001fd31:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fd36:	75 6e                	jne    c001fda6 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001fd38:	6a 00                	push   0x0
c001fd3a:	6a 08                	push   0x8
c001fd3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd43:	50                   	push   eax
c001fd44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd4a:	e8 85 ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd4f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001fd54:	50                   	push   eax
c001fd55:	6a 09                	push   0x9
c001fd57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd5e:	50                   	push   eax
c001fd5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd65:	e8 6a ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd6a:	83 c4 20             	add    esp,0x20
c001fd6d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fd72:	50                   	push   eax
c001fd73:	6a 0a                	push   0xa
c001fd75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd7c:	50                   	push   eax
c001fd7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd83:	e8 4c ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd88:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001fd8d:	50                   	push   eax
c001fd8e:	6a 0b                	push   0xb
c001fd90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fd97:	50                   	push   eax
c001fd98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fd9e:	e8 31 ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fda3:	83 c4 20             	add    esp,0x20
c001fda6:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001fdab:	50                   	push   eax
c001fdac:	6a 02                	push   0x2
c001fdae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdb5:	50                   	push   eax
c001fdb6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdbc:	e8 13 ec ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdc1:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001fdc6:	50                   	push   eax
c001fdc7:	6a 03                	push   0x3
c001fdc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdd0:	50                   	push   eax
c001fdd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdd7:	e8 f8 eb ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fddc:	83 c4 20             	add    esp,0x20
c001fddf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001fde4:	50                   	push   eax
c001fde5:	6a 04                	push   0x4
c001fde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdee:	50                   	push   eax
c001fdef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdf5:	e8 da eb ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdfa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001fdff:	50                   	push   eax
c001fe00:	6a 05                	push   0x5
c001fe02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe09:	50                   	push   eax
c001fe0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe10:	e8 bf eb ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe15:	83 c4 20             	add    esp,0x20
c001fe18:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001fe1d:	0f 94 c0             	sete   al
c001fe20:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001fe25:	74 09                	je     c001fe30 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001fe27:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001fe2e:	eb 07                	jmp    c001fe37 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001fe30:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001fe37:	0f b6 c0             	movzx  eax,al
c001fe3a:	50                   	push   eax
c001fe3b:	6a 07                	push   0x7
c001fe3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe44:	50                   	push   eax
c001fe45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe4b:	e8 84 eb ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fe50:	c7 04 24 31 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d31
c001fe57:	e8 57 ce fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fe5c:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001fe60:	83 c4 10             	add    esp,0x10
c001fe63:	85 f6                	test   esi,esi
c001fe65:	0f 84 f7 00 00 00    	je     c001ff62 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001fe6b:	83 ec 0c             	sub    esp,0xc
c001fe6e:	68 34 6d 02 c0       	push   0xc0026d34
c001fe73:	e8 3b ce fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fe78:	83 c4 0c             	add    esp,0xc
c001fe7b:	6a 01                	push   0x1
c001fe7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fe84:	50                   	push   eax
c001fe85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fe8b:	e8 dc f5 ff ff       	call   c001f46c <IDE::polling(unsigned char, unsigned int)>
c001fe90:	c7 04 24 37 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d37
c001fe97:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001fe9b:	e8 13 ce fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001fea0:	83 c4 10             	add    esp,0x10
c001fea3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001fea7:	84 c0                	test   al,al
c001fea9:	74 2b                	je     c001fed6 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001feab:	0f b6 f8             	movzx  edi,al
c001feae:	57                   	push   edi
c001feaf:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001feb6:	50                   	push   eax
c001feb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001febe:	50                   	push   eax
c001febf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fec5:	e8 f2 f4 ff ff       	call   c001f3bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001feca:	c7 04 24 3a 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d3a
c001fed1:	e9 bc 00 00 00       	jmp    c001ff92 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001fed6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fedb:	74 50                	je     c001ff2d <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001fedd:	83 ec 0c             	sub    esp,0xc
c001fee0:	31 ed                	xor    ebp,ebp
c001fee2:	68 45 6d 02 c0       	push   0xc0026d45
c001fee7:	e8 c7 cd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001feec:	83 c4 10             	add    esp,0x10
c001feef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fef3:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001fef7:	50                   	push   eax
c001fef8:	50                   	push   eax
c001fef9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff00:	50                   	push   eax
c001ff01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff07:	e8 b6 ea ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c001ff0c:	89 c2                	mov    edx,eax
c001ff0e:	89 f8                	mov    eax,edi
c001ff10:	66 ef                	out    dx,ax
c001ff12:	45                   	inc    ebp
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001ff1c:	75 d1                	jne    c001feef <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001ff1e:	83 ec 0c             	sub    esp,0xc
c001ff21:	68 48 6d 02 c0       	push   0xc0026d48
c001ff26:	e8 88 cd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ff2b:	eb 24                	jmp    c001ff51 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001ff2d:	51                   	push   ecx
c001ff2e:	51                   	push   ecx
c001ff2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff36:	50                   	push   eax
c001ff37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff3d:	e8 80 ea ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c001ff42:	b9 00 01 00 00       	mov    ecx,0x100
c001ff47:	89 c2                	mov    edx,eax
c001ff49:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ff4d:	fc                   	cld    
c001ff4e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ff51:	83 c4 10             	add    esp,0x10
c001ff54:	4e                   	dec    esi
c001ff55:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ff5d:	e9 01 ff ff ff       	jmp    c001fe63 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001ff62:	31 ff                	xor    edi,edi
c001ff64:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ff69:	74 2f                	je     c001ff9a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff6b:	83 ec 0c             	sub    esp,0xc
c001ff6e:	68 4b 6d 02 c0       	push   0xc0026d4b
c001ff73:	e8 3b cd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ff78:	58                   	pop    eax
c001ff79:	31 c0                	xor    eax,eax
c001ff7b:	5a                   	pop    edx
c001ff7c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ff81:	0f 94 c0             	sete   al
c001ff84:	50                   	push   eax
c001ff85:	53                   	push   ebx
c001ff86:	e8 8d fb ff ff       	call   c001fb18 <ATA::flush(bool)>
c001ff8b:	c7 04 24 4e 6d 02 c0 	mov    DWORD PTR [esp],0xc0026d4e
c001ff92:	e8 1c cd fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c001ff97:	83 c4 10             	add    esp,0x10
c001ff9a:	83 c4 2c             	add    esp,0x2c
c001ff9d:	89 f8                	mov    eax,edi
c001ff9f:	5b                   	pop    ebx
c001ffa0:	5e                   	pop    esi
c001ffa1:	5f                   	pop    edi
c001ffa2:	5d                   	pop    ebp
c001ffa3:	c3                   	ret    

c001ffa4 <ATA::read(unsigned long long, int, void*)>:
c001ffa4:	57                   	push   edi
c001ffa5:	b8 04 00 00 00       	mov    eax,0x4
c001ffaa:	56                   	push   esi
c001ffab:	53                   	push   ebx
c001ffac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ffb4:	8d 7a ff             	lea    edi,[edx-0x1]
c001ffb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ffbb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ffbf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ffc5:	77 25                	ja     c001ffec <ATA::read(unsigned long long, int, void*)+0x48>
c001ffc7:	b8 06 00 00 00       	mov    eax,0x6
c001ffcc:	85 f6                	test   esi,esi
c001ffce:	74 1c                	je     c001ffec <ATA::read(unsigned long long, int, void*)+0x48>
c001ffd0:	50                   	push   eax
c001ffd1:	50                   	push   eax
c001ffd2:	6a 00                	push   0x0
c001ffd4:	56                   	push   esi
c001ffd5:	52                   	push   edx
c001ffd6:	53                   	push   ebx
c001ffd7:	51                   	push   ecx
c001ffd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffdc:	e8 cd fb ff ff       	call   c001fbae <ATA::access(unsigned long long, int, void*, bool)>
c001ffe1:	83 c4 20             	add    esp,0x20
c001ffe4:	85 c0                	test   eax,eax
c001ffe6:	0f 95 c0             	setne  al
c001ffe9:	0f b6 c0             	movzx  eax,al
c001ffec:	5b                   	pop    ebx
c001ffed:	5e                   	pop    esi
c001ffee:	5f                   	pop    edi
c001ffef:	c3                   	ret    

c001fff0 <ATA::write(unsigned long long, int, void*)>:
c001fff0:	55                   	push   ebp
c001fff1:	57                   	push   edi
c001fff2:	56                   	push   esi
c001fff3:	53                   	push   ebx
c001fff4:	83 ec 18             	sub    esp,0x18
c001fff7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fffb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ffff:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0020003:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020007:	68 51 6d 02 c0       	push   0xc0026d51
c002000c:	e8 a2 cc fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0020011:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020014:	83 c4 10             	add    esp,0x10
c0020017:	b8 04 00 00 00       	mov    eax,0x4
c002001c:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020022:	77 25                	ja     c0020049 <ATA::write(unsigned long long, int, void*)+0x59>
c0020024:	b8 06 00 00 00       	mov    eax,0x6
c0020029:	85 f6                	test   esi,esi
c002002b:	74 1c                	je     c0020049 <ATA::write(unsigned long long, int, void*)+0x59>
c002002d:	50                   	push   eax
c002002e:	50                   	push   eax
c002002f:	6a 01                	push   0x1
c0020031:	56                   	push   esi
c0020032:	53                   	push   ebx
c0020033:	55                   	push   ebp
c0020034:	57                   	push   edi
c0020035:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020039:	e8 70 fb ff ff       	call   c001fbae <ATA::access(unsigned long long, int, void*, bool)>
c002003e:	83 c4 20             	add    esp,0x20
c0020041:	85 c0                	test   eax,eax
c0020043:	0f 95 c0             	setne  al
c0020046:	0f b6 c0             	movzx  eax,al
c0020049:	83 c4 0c             	add    esp,0xc
c002004c:	5b                   	pop    ebx
c002004d:	5e                   	pop    esi
c002004e:	5f                   	pop    edi
c002004f:	5d                   	pop    ebp
c0020050:	c3                   	ret    
c0020051:	90                   	nop

c0020052 <ATA::detectCHS()>:
c0020052:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020056:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002005c:	c1 e0 06             	shl    eax,0x6
c002005f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0020065:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002006f:	c7 44 24 04 5d 6d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026d5d
c0020077:	e9 a3 47 ff ff       	jmp    c001481f <Krnl::panic(char const*)>

c002007c <ATA::open(int, int, void*)>:
c002007c:	53                   	push   ebx
c002007d:	83 ec 08             	sub    esp,0x8
c0020080:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020084:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020088:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002008c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020092:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020098:	c1 e0 06             	shl    eax,0x6
c002009b:	01 d0                	add    eax,edx
c002009d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00200a4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00200aa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00200b1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00200bb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00200c1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200c8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00200cf:	75 0c                	jne    c00200dd <ATA::open(int, int, void*)+0x61>
c00200d1:	83 ec 0c             	sub    esp,0xc
c00200d4:	53                   	push   ebx
c00200d5:	e8 78 ff ff ff       	call   c0020052 <ATA::detectCHS()>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00200e3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00200e9:	c1 e0 06             	shl    eax,0x6
c00200ec:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00200f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200fd:	d1 e8                	shr    eax,1
c00200ff:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0020105:	6a 04                	push   0x4
c0020107:	6a 0c                	push   0xc
c0020109:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020110:	50                   	push   eax
c0020111:	52                   	push   edx
c0020112:	e8 bd e8 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020117:	90                   	nop
c0020118:	90                   	nop
c0020119:	6a 00                	push   0x0
c002011b:	6a 0c                	push   0xc
c002011d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020124:	50                   	push   eax
c0020125:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002012b:	e8 a4 e8 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020130:	83 c4 14             	add    esp,0x14
c0020133:	53                   	push   ebx
c0020134:	e8 61 e4 fe ff       	call   c000e59a <PhysicalDisk::startCache()>
c0020139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002013c:	e8 95 04 ff ff       	call   c00105d6 <createPartitionsForDisk(PhysicalDisk*)>
c0020141:	31 c0                	xor    eax,eax
c0020143:	83 c4 18             	add    esp,0x18
c0020146:	5b                   	pop    ebx
c0020147:	c3                   	ret    

c0020148 <ATAPI::write(unsigned long long, int, void*)>:
c0020148:	b8 03 00 00 00       	mov    eax,0x3
c002014d:	c3                   	ret    

c002014e <ATAPI::close(int, int, void*)>:
c002014e:	83 ec 0c             	sub    esp,0xc
c0020151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020155:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002015b:	85 c0                	test   eax,eax
c002015d:	74 0c                	je     c002016b <ATAPI::close(int, int, void*)+0x1d>
c002015f:	83 ec 0c             	sub    esp,0xc
c0020162:	8b 10                	mov    edx,DWORD PTR [eax]
c0020164:	50                   	push   eax
c0020165:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020168:	83 c4 10             	add    esp,0x10
c002016b:	31 c0                	xor    eax,eax
c002016d:	83 c4 0c             	add    esp,0xc
c0020170:	c3                   	ret    
c0020171:	90                   	nop

c0020172 <ATAPI::ATAPI()>:
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020179:	83 ec 04             	sub    esp,0x4
c002017c:	68 00 08 00 00       	push   0x800
c0020181:	68 cd 6f 02 c0       	push   0xc0026fcd
c0020186:	50                   	push   eax
c0020187:	e8 a6 e3 fe ff       	call   c000e532 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002018c:	83 c4 10             	add    esp,0x10
c002018f:	ba b0 6d 02 c0       	mov    edx,0xc0026db0
c0020194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020198:	89 10                	mov    DWORD PTR [eax],edx
c002019a:	90                   	nop
c002019b:	83 c4 0c             	add    esp,0xc
c002019e:	c3                   	ret    
c002019f:	90                   	nop

c00201a0 <ATAPI::readyForCommand()>:
c00201a0:	56                   	push   esi
c00201a1:	53                   	push   ebx
c00201a2:	53                   	push   ebx
c00201a3:	31 db                	xor    ebx,ebx
c00201a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00201a9:	51                   	push   ecx
c00201aa:	6a 0c                	push   0xc
c00201ac:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00201b3:	50                   	push   eax
c00201b4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00201ba:	e8 d5 e8 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c00201bf:	83 c4 10             	add    esp,0x10
c00201c2:	a8 88                	test   al,0x88
c00201c4:	74 1f                	je     c00201e5 <ATAPI::readyForCommand()+0x45>
c00201c6:	43                   	inc    ebx
c00201c7:	83 fb 63             	cmp    ebx,0x63
c00201ca:	7e dd                	jle    c00201a9 <ATAPI::readyForCommand()+0x9>
c00201cc:	83 ec 0c             	sub    esp,0xc
c00201cf:	6a 0a                	push   0xa
c00201d1:	e8 12 85 ff ff       	call   c00186e8 <milliTenthSleep(unsigned int)>
c00201d6:	83 c4 10             	add    esp,0x10
c00201d9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00201df:	75 c8                	jne    c00201a9 <ATAPI::readyForCommand()+0x9>
c00201e1:	31 c0                	xor    eax,eax
c00201e3:	eb 02                	jmp    c00201e7 <ATAPI::readyForCommand()+0x47>
c00201e5:	b0 01                	mov    al,0x1
c00201e7:	5a                   	pop    edx
c00201e8:	5b                   	pop    ebx
c00201e9:	5e                   	pop    esi
c00201ea:	c3                   	ret    
c00201eb:	90                   	nop

c00201ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00201ec:	55                   	push   ebp
c00201ed:	57                   	push   edi
c00201ee:	56                   	push   esi
c00201ef:	53                   	push   ebx
c00201f0:	83 ec 20             	sub    esp,0x20
c00201f3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00201f7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00201fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00201ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020203:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020207:	6a 01                	push   0x1
c0020209:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020210:	50                   	push   eax
c0020211:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020217:	e8 c0 e9 ff ff       	call   c001ebdc <IDE::enableIRQs(unsigned char, bool)>
c002021c:	5e                   	pop    esi
c002021d:	58                   	pop    eax
c002021e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020225:	50                   	push   eax
c0020226:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002022c:	e8 7d e7 ff ff       	call   c001e9ae <IDE::prepareInterrupt(unsigned char)>
c0020231:	89 3c 24             	mov    DWORD PTR [esp],edi
c0020234:	e8 67 ff ff ff       	call   c00201a0 <ATAPI::readyForCommand()>
c0020239:	83 c4 10             	add    esp,0x10
c002023c:	84 c0                	test   al,al
c002023e:	75 0a                	jne    c002024a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0020240:	bb 01 00 00 00       	mov    ebx,0x1
c0020245:	e9 57 02 00 00       	jmp    c00204a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002024a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0020250:	c1 e0 04             	shl    eax,0x4
c0020253:	0f b6 c0             	movzx  eax,al
c0020256:	50                   	push   eax
c0020257:	6a 06                	push   0x6
c0020259:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020260:	50                   	push   eax
c0020261:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020267:	e8 68 e7 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002026c:	6a 00                	push   0x0
c002026e:	6a 01                	push   0x1
c0020270:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020277:	50                   	push   eax
c0020278:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002027e:	e8 51 e7 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020283:	83 c4 20             	add    esp,0x20
c0020286:	0f b6 c3             	movzx  eax,bl
c0020289:	0f b6 df             	movzx  ebx,bh
c002028c:	50                   	push   eax
c002028d:	6a 04                	push   0x4
c002028f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020296:	50                   	push   eax
c0020297:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002029d:	e8 32 e7 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202a2:	53                   	push   ebx
c00202a3:	6a 05                	push   0x5
c00202a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202ac:	50                   	push   eax
c00202ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202b3:	e8 1c e7 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202b8:	83 c4 20             	add    esp,0x20
c00202bb:	68 a0 00 00 00       	push   0xa0
c00202c0:	6a 07                	push   0x7
c00202c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202c9:	50                   	push   eax
c00202ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202d0:	e8 ff e6 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00202d5:	83 c4 0c             	add    esp,0xc
c00202d8:	6a 01                	push   0x1
c00202da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00202e1:	50                   	push   eax
c00202e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00202e8:	e8 7f f1 ff ff       	call   c001f46c <IDE::polling(unsigned char, unsigned int)>
c00202ed:	83 c4 10             	add    esp,0x10
c00202f0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00202f6:	84 c0                	test   al,al
c00202f8:	74 23                	je     c002031d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00202fa:	0f b6 d8             	movzx  ebx,al
c00202fd:	0f b6 d2             	movzx  edx,dl
c0020300:	53                   	push   ebx
c0020301:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020308:	50                   	push   eax
c0020309:	52                   	push   edx
c002030a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020310:	e8 a7 f0 ff ff       	call   c001f3bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020315:	83 c4 10             	add    esp,0x10
c0020318:	e9 84 01 00 00       	jmp    c00204a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002031d:	0f b6 d2             	movzx  edx,dl
c0020320:	53                   	push   ebx
c0020321:	53                   	push   ebx
c0020322:	52                   	push   edx
c0020323:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020329:	e8 94 e6 ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c002032e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0020332:	b9 06 00 00 00       	mov    ecx,0x6
c0020337:	89 c2                	mov    edx,eax
c0020339:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002033c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0020340:	83 c4 10             	add    esp,0x10
c0020343:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020349:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020350:	85 db                	test   ebx,ebx
c0020352:	0f 84 ec 00 00 00    	je     c0020444 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0020358:	51                   	push   ecx
c0020359:	51                   	push   ecx
c002035a:	52                   	push   edx
c002035b:	50                   	push   eax
c002035c:	e8 e1 e7 ff ff       	call   c001eb42 <IDE::waitInterrupt(unsigned char)>
c0020361:	83 c4 10             	add    esp,0x10
c0020364:	84 c0                	test   al,al
c0020366:	0f 84 d4 fe ff ff    	je     c0020240 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002036c:	56                   	push   esi
c002036d:	56                   	push   esi
c002036e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020375:	50                   	push   eax
c0020376:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002037c:	e8 2d e6 ff ff       	call   c001e9ae <IDE::prepareInterrupt(unsigned char)>
c0020381:	83 c4 0c             	add    esp,0xc
c0020384:	6a 04                	push   0x4
c0020386:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002038d:	50                   	push   eax
c002038e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020394:	e8 fb e6 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c0020399:	83 c4 0c             	add    esp,0xc
c002039c:	89 c6                	mov    esi,eax
c002039e:	6a 05                	push   0x5
c00203a0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00203a7:	50                   	push   eax
c00203a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00203ae:	e8 e1 e6 ff ff       	call   c001ea94 <IDE::read(unsigned char, unsigned char)>
c00203b3:	89 f1                	mov    ecx,esi
c00203b5:	0f b6 c0             	movzx  eax,al
c00203b8:	0f b6 f1             	movzx  esi,cl
c00203bb:	c1 e0 08             	shl    eax,0x8
c00203be:	09 c6                	or     esi,eax
c00203c0:	d1 fe                	sar    esi,1
c00203c2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00203c6:	83 c4 10             	add    esp,0x10
c00203c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00203ce:	74 41                	je     c0020411 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00203d0:	31 c9                	xor    ecx,ecx
c00203d2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00203d8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00203df:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00203e3:	75 0a                	jne    c00203ef <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00203e5:	01 c9                	add    ecx,ecx
c00203e7:	01 cd                	add    ebp,ecx
c00203e9:	4b                   	dec    ebx
c00203ea:	e9 54 ff ff ff       	jmp    c0020343 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00203ef:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00203f4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00203f8:	51                   	push   ecx
c00203f9:	51                   	push   ecx
c00203fa:	52                   	push   edx
c00203fb:	50                   	push   eax
c00203fc:	e8 c1 e5 ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c0020401:	89 c2                	mov    edx,eax
c0020403:	89 f0                	mov    eax,esi
c0020405:	66 ef                	out    dx,ax
c0020407:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002040b:	83 c4 10             	add    esp,0x10
c002040e:	41                   	inc    ecx
c002040f:	eb c1                	jmp    c00203d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0020411:	31 f6                	xor    esi,esi
c0020413:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020419:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0020420:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0020424:	75 06                	jne    c002042c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0020426:	01 f6                	add    esi,esi
c0020428:	01 f5                	add    ebp,esi
c002042a:	eb bd                	jmp    c00203e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002042c:	51                   	push   ecx
c002042d:	51                   	push   ecx
c002042e:	52                   	push   edx
c002042f:	50                   	push   eax
c0020430:	e8 8d e5 ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c0020435:	89 c2                	mov    edx,eax
c0020437:	66 ed                	in     ax,dx
c0020439:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002043e:	83 c4 10             	add    esp,0x10
c0020441:	46                   	inc    esi
c0020442:	eb cf                	jmp    c0020413 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0020444:	51                   	push   ecx
c0020445:	51                   	push   ecx
c0020446:	52                   	push   edx
c0020447:	50                   	push   eax
c0020448:	e8 f5 e6 ff ff       	call   c001eb42 <IDE::waitInterrupt(unsigned char)>
c002044d:	83 c4 10             	add    esp,0x10
c0020450:	84 c0                	test   al,al
c0020452:	0f 84 e8 fd ff ff    	je     c0020240 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0020458:	bb a0 86 01 00       	mov    ebx,0x186a0
c002045d:	52                   	push   edx
c002045e:	52                   	push   edx
c002045f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020466:	50                   	push   eax
c0020467:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002046d:	e8 3c e5 ff ff       	call   c001e9ae <IDE::prepareInterrupt(unsigned char)>
c0020472:	83 c4 10             	add    esp,0x10
c0020475:	50                   	push   eax
c0020476:	50                   	push   eax
c0020477:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002047e:	50                   	push   eax
c002047f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020485:	e8 38 e5 ff ff       	call   c001e9c2 <IDE::getBase(unsigned char)>
c002048a:	8d 50 07             	lea    edx,[eax+0x7]
c002048d:	ec                   	in     al,dx
c002048e:	83 c4 10             	add    esp,0x10
c0020491:	a8 88                	test   al,0x88
c0020493:	74 0a                	je     c002049f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020495:	4b                   	dec    ebx
c0020496:	75 dd                	jne    c0020475 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020498:	bb 02 00 00 00       	mov    ebx,0x2
c002049d:	eb 02                	jmp    c00204a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002049f:	31 db                	xor    ebx,ebx
c00204a1:	83 c4 1c             	add    esp,0x1c
c00204a4:	89 d8                	mov    eax,ebx
c00204a6:	5b                   	pop    ebx
c00204a7:	5e                   	pop    esi
c00204a8:	5f                   	pop    edi
c00204a9:	5d                   	pop    ebp
c00204aa:	c3                   	ret    
c00204ab:	90                   	nop

c00204ac <ATAPI::diskRemoved()>:
c00204ac:	83 ec 18             	sub    esp,0x18
c00204af:	68 d9 6f 02 c0       	push   0xc0026fd9
c00204b4:	e8 fa c7 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c00204b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00204bd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00204c4:	83 c4 1c             	add    esp,0x1c
c00204c7:	c3                   	ret    

c00204c8 <ATAPI::eject()>:
c00204c8:	57                   	push   edi
c00204c9:	b9 03 00 00 00       	mov    ecx,0x3
c00204ce:	53                   	push   ebx
c00204cf:	83 ec 14             	sub    esp,0x14
c00204d2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00204d6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00204da:	fc                   	cld    
c00204db:	31 c0                	xor    eax,eax
c00204dd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204df:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00204e4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00204e9:	50                   	push   eax
c00204ea:	50                   	push   eax
c00204eb:	6a 00                	push   0x0
c00204ed:	6a 00                	push   0x0
c00204ef:	6a 00                	push   0x0
c00204f1:	6a 02                	push   0x2
c00204f3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204f7:	50                   	push   eax
c00204f8:	53                   	push   ebx
c00204f9:	e8 ee fc ff ff       	call   c00201ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00204fe:	83 c4 14             	add    esp,0x14
c0020501:	53                   	push   ebx
c0020502:	e8 a5 ff ff ff       	call   c00204ac <ATAPI::diskRemoved()>
c0020507:	83 c4 24             	add    esp,0x24
c002050a:	31 c0                	xor    eax,eax
c002050c:	5b                   	pop    ebx
c002050d:	5f                   	pop    edi
c002050e:	c3                   	ret    
c002050f:	90                   	nop

c0020510 <ATAPI::diskInserted()>:
c0020510:	53                   	push   ebx
c0020511:	83 ec 14             	sub    esp,0x14
c0020514:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020518:	68 f0 6f 02 c0       	push   0xc0026ff0
c002051d:	e8 91 c7 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0020522:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0020529:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002052c:	e8 69 e0 fe ff       	call   c000e59a <PhysicalDisk::startCache()>
c0020531:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0020535:	83 c4 18             	add    esp,0x18
c0020538:	5b                   	pop    ebx
c0020539:	e9 98 00 ff ff       	jmp    c00105d6 <createPartitionsForDisk(PhysicalDisk*)>

c002053e <ATAPI::detectMedia()>:
c002053e:	56                   	push   esi
c002053f:	53                   	push   ebx
c0020540:	83 ec 28             	sub    esp,0x28
c0020543:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020547:	6a 0c                	push   0xc
c0020549:	6a 00                	push   0x0
c002054b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002054f:	56                   	push   esi
c0020550:	e8 2f 01 fe ff       	call   c0000684 <memset>
c0020555:	58                   	pop    eax
c0020556:	5a                   	pop    edx
c0020557:	6a 00                	push   0x0
c0020559:	6a 00                	push   0x0
c002055b:	6a 00                	push   0x0
c002055d:	6a 00                	push   0x0
c002055f:	56                   	push   esi
c0020560:	53                   	push   ebx
c0020561:	e8 86 fc ff ff       	call   c00201ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020566:	83 c4 1c             	add    esp,0x1c
c0020569:	6a 0c                	push   0xc
c002056b:	6a 00                	push   0x0
c002056d:	56                   	push   esi
c002056e:	e8 11 01 fe ff       	call   c0000684 <memset>
c0020573:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020578:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002057d:	59                   	pop    ecx
c002057e:	58                   	pop    eax
c002057f:	6a 01                	push   0x1
c0020581:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020585:	50                   	push   eax
c0020586:	6a 00                	push   0x0
c0020588:	6a 12                	push   0x12
c002058a:	56                   	push   esi
c002058b:	53                   	push   ebx
c002058c:	e8 5b fc ff ff       	call   c00201ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020591:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020595:	83 c4 20             	add    esp,0x20
c0020598:	83 e0 7f             	and    eax,0x7f
c002059b:	3c 70                	cmp    al,0x70
c002059d:	74 15                	je     c00205b4 <ATAPI::detectMedia()+0x76>
c002059f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205a6:	75 0c                	jne    c00205b4 <ATAPI::detectMedia()+0x76>
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	53                   	push   ebx
c00205ac:	e8 5f ff ff ff       	call   c0020510 <ATAPI::diskInserted()>
c00205b1:	83 c4 10             	add    esp,0x10
c00205b4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00205b8:	83 e0 0f             	and    eax,0xf
c00205bb:	3c 02                	cmp    al,0x2
c00205bd:	75 1b                	jne    c00205da <ATAPI::detectMedia()+0x9c>
c00205bf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00205c4:	75 2d                	jne    c00205f3 <ATAPI::detectMedia()+0xb5>
c00205c6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205cd:	74 24                	je     c00205f3 <ATAPI::detectMedia()+0xb5>
c00205cf:	83 ec 0c             	sub    esp,0xc
c00205d2:	53                   	push   ebx
c00205d3:	e8 d4 fe ff ff       	call   c00204ac <ATAPI::diskRemoved()>
c00205d8:	eb 16                	jmp    c00205f0 <ATAPI::detectMedia()+0xb2>
c00205da:	84 c0                	test   al,al
c00205dc:	75 15                	jne    c00205f3 <ATAPI::detectMedia()+0xb5>
c00205de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00205e5:	75 0c                	jne    c00205f3 <ATAPI::detectMedia()+0xb5>
c00205e7:	83 ec 0c             	sub    esp,0xc
c00205ea:	53                   	push   ebx
c00205eb:	e8 20 ff ff ff       	call   c0020510 <ATAPI::diskInserted()>
c00205f0:	83 c4 10             	add    esp,0x10
c00205f3:	83 c4 24             	add    esp,0x24
c00205f6:	5b                   	pop    ebx
c00205f7:	5e                   	pop    esi
c00205f8:	c3                   	ret    
c00205f9:	90                   	nop

c00205fa <ATAPI::open(int, int, void*)>:
c00205fa:	53                   	push   ebx
c00205fb:	83 ec 08             	sub    esp,0x8
c00205fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020602:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002060a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020610:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0020616:	c1 e0 06             	shl    eax,0x6
c0020619:	01 d0                	add    eax,edx
c002061b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0020622:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0020628:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002062f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020639:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002063f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020646:	6a 04                	push   0x4
c0020648:	6a 0c                	push   0xc
c002064a:	51                   	push   ecx
c002064b:	52                   	push   edx
c002064c:	e8 83 e3 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020651:	90                   	nop
c0020652:	90                   	nop
c0020653:	6a 00                	push   0x0
c0020655:	6a 0c                	push   0xc
c0020657:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002065e:	50                   	push   eax
c002065f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020665:	e8 6a e3 ff ff       	call   c001e9d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002066a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020671:	83 c4 14             	add    esp,0x14
c0020674:	53                   	push   ebx
c0020675:	e8 c4 fe ff ff       	call   c002053e <ATAPI::detectMedia()>
c002067a:	31 c0                	xor    eax,eax
c002067c:	83 c4 18             	add    esp,0x18
c002067f:	5b                   	pop    ebx
c0020680:	c3                   	ret    
c0020681:	90                   	nop

c0020682 <ATAPI::read(unsigned long long, int, void*)>:
c0020682:	55                   	push   ebp
c0020683:	57                   	push   edi
c0020684:	56                   	push   esi
c0020685:	53                   	push   ebx
c0020686:	83 ec 1c             	sub    esp,0x1c
c0020689:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002068d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020691:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020695:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002069c:	74 41                	je     c00206df <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002069e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00206a2:	b9 03 00 00 00       	mov    ecx,0x3
c00206a7:	fc                   	cld    
c00206a8:	31 c0                	xor    eax,eax
c00206aa:	86 fb                	xchg   bl,bh
c00206ac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206ae:	c1 c3 10             	rol    ebx,0x10
c00206b1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00206b6:	89 e8                	mov    eax,ebp
c00206b8:	86 fb                	xchg   bl,bh
c00206ba:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00206be:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00206c2:	50                   	push   eax
c00206c3:	50                   	push   eax
c00206c4:	55                   	push   ebp
c00206c5:	c1 e5 0b             	shl    ebp,0xb
c00206c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00206cc:	6a 00                	push   0x0
c00206ce:	55                   	push   ebp
c00206cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00206d3:	50                   	push   eax
c00206d4:	56                   	push   esi
c00206d5:	e8 12 fb ff ff       	call   c00201ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00206da:	83 c4 20             	add    esp,0x20
c00206dd:	eb 1a                	jmp    c00206f9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00206df:	83 ec 0c             	sub    esp,0xc
c00206e2:	56                   	push   esi
c00206e3:	e8 56 fe ff ff       	call   c002053e <ATAPI::detectMedia()>
c00206e8:	83 c4 10             	add    esp,0x10
c00206eb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00206f2:	75 aa                	jne    c002069e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00206f4:	b8 02 00 00 00       	mov    eax,0x2
c00206f9:	83 c4 1c             	add    esp,0x1c
c00206fc:	5b                   	pop    ebx
c00206fd:	5e                   	pop    esi
c00206fe:	5f                   	pop    edi
c00206ff:	5d                   	pop    ebp
c0020700:	c3                   	ret    
c0020701:	90                   	nop

c0020702 <SATA::close(int, int, void*)>:
c0020702:	83 ec 0c             	sub    esp,0xc
c0020705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020709:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002070f:	85 c0                	test   eax,eax
c0020711:	74 0c                	je     c002071f <SATA::close(int, int, void*)+0x1d>
c0020713:	83 ec 0c             	sub    esp,0xc
c0020716:	8b 10                	mov    edx,DWORD PTR [eax]
c0020718:	50                   	push   eax
c0020719:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002071c:	83 c4 10             	add    esp,0x10
c002071f:	31 c0                	xor    eax,eax
c0020721:	83 c4 0c             	add    esp,0xc
c0020724:	c3                   	ret    
c0020725:	90                   	nop

c0020726 <SATA::powerSaving(PowerSavingLevel)>:
c0020726:	c3                   	ret    
c0020727:	90                   	nop

c0020728 <SATA::open(int, int, void*)>:
c0020728:	56                   	push   esi
c0020729:	53                   	push   ebx
c002072a:	51                   	push   ecx
c002072b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002072f:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020736:	74 2d                	je     c0020765 <SATA::open(int, int, void*)+0x3d>
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	68 e0 6d 02 c0       	push   0xc0026de0
c0020740:	e8 d8 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c002074f:	75 14                	jne    c0020765 <SATA::open(int, int, void*)+0x3d>
c0020751:	e4 60                	in     al,0x60
c0020753:	3c 5a                	cmp    al,0x5a
c0020755:	74 04                	je     c002075b <SATA::open(int, int, void*)+0x33>
c0020757:	3c 1c                	cmp    al,0x1c
c0020759:	75 f6                	jne    c0020751 <SATA::open(int, int, void*)+0x29>
c002075b:	e4 60                	in     al,0x60
c002075d:	3c 5a                	cmp    al,0x5a
c002075f:	74 fa                	je     c002075b <SATA::open(int, int, void*)+0x33>
c0020761:	3c 1c                	cmp    al,0x1c
c0020763:	74 f6                	je     c002075b <SATA::open(int, int, void*)+0x33>
c0020765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020769:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020773:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020779:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020787:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020791:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020797:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002079e:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c00207a5:	74 2d                	je     c00207d4 <SATA::open(int, int, void*)+0xac>
c00207a7:	83 ec 0c             	sub    esp,0xc
c00207aa:	68 ed 6d 02 c0       	push   0xc0026ded
c00207af:	e8 69 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00207b4:	83 c4 10             	add    esp,0x10
c00207b7:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c00207be:	75 14                	jne    c00207d4 <SATA::open(int, int, void*)+0xac>
c00207c0:	e4 60                	in     al,0x60
c00207c2:	3c 1c                	cmp    al,0x1c
c00207c4:	74 04                	je     c00207ca <SATA::open(int, int, void*)+0xa2>
c00207c6:	3c 5a                	cmp    al,0x5a
c00207c8:	75 f6                	jne    c00207c0 <SATA::open(int, int, void*)+0x98>
c00207ca:	e4 60                	in     al,0x60
c00207cc:	3c 5a                	cmp    al,0x5a
c00207ce:	74 fa                	je     c00207ca <SATA::open(int, int, void*)+0xa2>
c00207d0:	3c 1c                	cmp    al,0x1c
c00207d2:	74 f6                	je     c00207ca <SATA::open(int, int, void*)+0xa2>
c00207d4:	e8 a1 98 fe ff       	call   c000a07a <Phys::allocatePage()>
c00207d9:	89 c6                	mov    esi,eax
c00207db:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00207e1:	81 c6 00 10 00 00    	add    esi,0x1000
c00207e7:	e8 8e 98 fe ff       	call   c000a07a <Phys::allocatePage()>
c00207ec:	39 c6                	cmp    esi,eax
c00207ee:	74 10                	je     c0020800 <SATA::open(int, int, void*)+0xd8>
c00207f0:	83 ec 0c             	sub    esp,0xc
c00207f3:	68 fa 6d 02 c0       	push   0xc0026dfa
c00207f8:	e8 22 40 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00207fd:	83 c4 10             	add    esp,0x10
c0020800:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020807:	74 2d                	je     c0020836 <SATA::open(int, int, void*)+0x10e>
c0020809:	83 ec 0c             	sub    esp,0xc
c002080c:	68 0e 6e 02 c0       	push   0xc0026e0e
c0020811:	e8 07 92 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020816:	83 c4 10             	add    esp,0x10
c0020819:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020820:	75 14                	jne    c0020836 <SATA::open(int, int, void*)+0x10e>
c0020822:	e4 60                	in     al,0x60
c0020824:	3c 1c                	cmp    al,0x1c
c0020826:	74 04                	je     c002082c <SATA::open(int, int, void*)+0x104>
c0020828:	3c 5a                	cmp    al,0x5a
c002082a:	75 f6                	jne    c0020822 <SATA::open(int, int, void*)+0xfa>
c002082c:	e4 60                	in     al,0x60
c002082e:	3c 5a                	cmp    al,0x5a
c0020830:	74 fa                	je     c002082c <SATA::open(int, int, void*)+0x104>
c0020832:	3c 1c                	cmp    al,0x1c
c0020834:	74 f6                	je     c002082c <SATA::open(int, int, void*)+0x104>
c0020836:	83 ec 0c             	sub    esp,0xc
c0020839:	6a 02                	push   0x2
c002083b:	e8 4d b1 fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c0020840:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020846:	6a 03                	push   0x3
c0020848:	50                   	push   eax
c0020849:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002084f:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c0020855:	e8 da b7 fe ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c002085a:	83 c4 20             	add    esp,0x20
c002085d:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020864:	74 2d                	je     c0020893 <SATA::open(int, int, void*)+0x16b>
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	68 1b 6e 02 c0       	push   0xc0026e1b
c002086e:	e8 aa 91 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020873:	83 c4 10             	add    esp,0x10
c0020876:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c002087d:	75 14                	jne    c0020893 <SATA::open(int, int, void*)+0x16b>
c002087f:	e4 60                	in     al,0x60
c0020881:	3c 1c                	cmp    al,0x1c
c0020883:	74 04                	je     c0020889 <SATA::open(int, int, void*)+0x161>
c0020885:	3c 5a                	cmp    al,0x5a
c0020887:	75 f6                	jne    c002087f <SATA::open(int, int, void*)+0x157>
c0020889:	e4 60                	in     al,0x60
c002088b:	3c 5a                	cmp    al,0x5a
c002088d:	74 fa                	je     c0020889 <SATA::open(int, int, void*)+0x161>
c002088f:	3c 1c                	cmp    al,0x1c
c0020891:	74 f6                	je     c0020889 <SATA::open(int, int, void*)+0x161>
c0020893:	83 ec 0c             	sub    esp,0xc
c0020896:	53                   	push   ebx
c0020897:	e8 fe dc fe ff       	call   c000e59a <PhysicalDisk::startCache()>
c002089c:	83 c4 10             	add    esp,0x10
c002089f:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c00208a6:	74 2d                	je     c00208d5 <SATA::open(int, int, void*)+0x1ad>
c00208a8:	83 ec 0c             	sub    esp,0xc
c00208ab:	68 28 6e 02 c0       	push   0xc0026e28
c00208b0:	e8 68 91 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00208b5:	83 c4 10             	add    esp,0x10
c00208b8:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c00208bf:	75 14                	jne    c00208d5 <SATA::open(int, int, void*)+0x1ad>
c00208c1:	e4 60                	in     al,0x60
c00208c3:	3c 1c                	cmp    al,0x1c
c00208c5:	74 04                	je     c00208cb <SATA::open(int, int, void*)+0x1a3>
c00208c7:	3c 5a                	cmp    al,0x5a
c00208c9:	75 f6                	jne    c00208c1 <SATA::open(int, int, void*)+0x199>
c00208cb:	e4 60                	in     al,0x60
c00208cd:	3c 5a                	cmp    al,0x5a
c00208cf:	74 fa                	je     c00208cb <SATA::open(int, int, void*)+0x1a3>
c00208d1:	3c 1c                	cmp    al,0x1c
c00208d3:	74 f6                	je     c00208cb <SATA::open(int, int, void*)+0x1a3>
c00208d5:	83 ec 0c             	sub    esp,0xc
c00208d8:	53                   	push   ebx
c00208d9:	e8 f8 fc fe ff       	call   c00105d6 <createPartitionsForDisk(PhysicalDisk*)>
c00208de:	83 c4 10             	add    esp,0x10
c00208e1:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c00208e8:	74 2d                	je     c0020917 <SATA::open(int, int, void*)+0x1ef>
c00208ea:	83 ec 0c             	sub    esp,0xc
c00208ed:	68 35 6e 02 c0       	push   0xc0026e35
c00208f2:	e8 26 91 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00208f7:	83 c4 10             	add    esp,0x10
c00208fa:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020901:	75 14                	jne    c0020917 <SATA::open(int, int, void*)+0x1ef>
c0020903:	e4 60                	in     al,0x60
c0020905:	3c 1c                	cmp    al,0x1c
c0020907:	74 04                	je     c002090d <SATA::open(int, int, void*)+0x1e5>
c0020909:	3c 5a                	cmp    al,0x5a
c002090b:	75 f6                	jne    c0020903 <SATA::open(int, int, void*)+0x1db>
c002090d:	e4 60                	in     al,0x60
c002090f:	3c 5a                	cmp    al,0x5a
c0020911:	74 fa                	je     c002090d <SATA::open(int, int, void*)+0x1e5>
c0020913:	3c 1c                	cmp    al,0x1c
c0020915:	74 f6                	je     c002090d <SATA::open(int, int, void*)+0x1e5>
c0020917:	5a                   	pop    edx
c0020918:	31 c0                	xor    eax,eax
c002091a:	5b                   	pop    ebx
c002091b:	5e                   	pop    esi
c002091c:	c3                   	ret    
c002091d:	90                   	nop

c002091e <SATA::SATA()>:
c002091e:	83 ec 0c             	sub    esp,0xc
c0020921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020925:	83 ec 04             	sub    esp,0x4
c0020928:	68 00 02 00 00       	push   0x200
c002092d:	68 42 6e 02 c0       	push   0xc0026e42
c0020932:	50                   	push   eax
c0020933:	e8 fa db fe ff       	call   c000e532 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	ba 9c 6f 02 c0       	mov    edx,0xc0026f9c
c0020940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020944:	89 10                	mov    DWORD PTR [eax],edx
c0020946:	90                   	nop
c0020947:	83 c4 0c             	add    esp,0xc
c002094a:	c3                   	ret    
c002094b:	90                   	nop

c002094c <SATA::access(unsigned long long, int, void*, bool)>:
c002094c:	55                   	push   ebp
c002094d:	57                   	push   edi
c002094e:	56                   	push   esi
c002094f:	53                   	push   ebx
c0020950:	83 ec 2c             	sub    esp,0x2c
c0020953:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020957:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002095b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002095f:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020966:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002096a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002096e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020972:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020976:	75 19                	jne    c0020991 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020978:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002097d:	7e 41                	jle    c00209c0 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c002097f:	83 ec 0c             	sub    esp,0xc
c0020982:	68 61 6e 02 c0       	push   0xc0026e61
c0020987:	e8 93 3e ff ff       	call   c001481f <Krnl::panic(char const*)>
c002098c:	83 c4 10             	add    esp,0x10
c002098f:	eb 2f                	jmp    c00209c0 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020991:	83 ec 0c             	sub    esp,0xc
c0020994:	68 52 6e 02 c0       	push   0xc0026e52
c0020999:	e8 7f 90 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c002099e:	83 c4 10             	add    esp,0x10
c00209a1:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c00209a8:	75 ce                	jne    c0020978 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00209aa:	e4 60                	in     al,0x60
c00209ac:	3c 1c                	cmp    al,0x1c
c00209ae:	74 04                	je     c00209b4 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00209b0:	3c 5a                	cmp    al,0x5a
c00209b2:	75 f6                	jne    c00209aa <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00209b4:	e4 60                	in     al,0x60
c00209b6:	3c 5a                	cmp    al,0x5a
c00209b8:	74 fa                	je     c00209b4 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00209ba:	3c 1c                	cmp    al,0x1c
c00209bc:	74 f6                	je     c00209b4 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00209be:	eb b8                	jmp    c0020978 <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00209c0:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c00209c7:	75 29                	jne    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00209c9:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00209cf:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00209d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00209db:	8d 75 02             	lea    esi,[ebp+0x2]
c00209de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209e2:	c1 e6 07             	shl    esi,0x7
c00209e5:	01 c6                	add    esi,eax
c00209e7:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c00209ee:	74 4a                	je     c0020a3a <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00209f0:	eb 2f                	jmp    c0020a21 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00209f2:	83 ec 0c             	sub    esp,0xc
c00209f5:	68 9a 6e 02 c0       	push   0xc0026e9a
c00209fa:	e8 1e 90 fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00209ff:	83 c4 10             	add    esp,0x10
c0020a02:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020a09:	75 be                	jne    c00209c9 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020a0b:	e4 60                	in     al,0x60
c0020a0d:	3c 1c                	cmp    al,0x1c
c0020a0f:	74 04                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a11:	3c 5a                	cmp    al,0x5a
c0020a13:	75 f6                	jne    c0020a0b <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020a15:	e4 60                	in     al,0x60
c0020a17:	3c 5a                	cmp    al,0x5a
c0020a19:	74 fa                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a1b:	3c 1c                	cmp    al,0x1c
c0020a1d:	74 f6                	je     c0020a15 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020a1f:	eb a8                	jmp    c00209c9 <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020a21:	83 ec 0c             	sub    esp,0xc
c0020a24:	68 a9 6e 02 c0       	push   0xc0026ea9
c0020a29:	e8 ef 8f fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020a2e:	83 c4 10             	add    esp,0x10
c0020a31:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020a38:	74 3d                	je     c0020a77 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020a3a:	89 e8                	mov    eax,ebp
c0020a3c:	c1 e0 07             	shl    eax,0x7
c0020a3f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020a43:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020a4d:	52                   	push   edx
c0020a4e:	52                   	push   edx
c0020a4f:	56                   	push   esi
c0020a50:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020a56:	e8 f1 ea ff ff       	call   c001f54c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020a5b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020a5f:	83 c4 10             	add    esp,0x10
c0020a62:	b8 01 00 00 00       	mov    eax,0x1
c0020a67:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020a6c:	75 1d                	jne    c0020a8b <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020a6e:	e9 df 04 00 00       	jmp    c0020f52 <SATA::access(unsigned long long, int, void*, bool)+0x606>
c0020a73:	3c 5a                	cmp    al,0x5a
c0020a75:	74 0c                	je     c0020a83 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020a77:	e4 60                	in     al,0x60
c0020a79:	3c 1c                	cmp    al,0x1c
c0020a7b:	75 f6                	jne    c0020a73 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020a7d:	eb 04                	jmp    c0020a83 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020a7f:	3c 1c                	cmp    al,0x1c
c0020a81:	75 b7                	jne    c0020a3a <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020a83:	e4 60                	in     al,0x60
c0020a85:	3c 5a                	cmp    al,0x5a
c0020a87:	74 fa                	je     c0020a83 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020a89:	eb f4                	jmp    c0020a7f <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020a8b:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020a92:	74 3a                	je     c0020ace <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020a94:	83 ec 0c             	sub    esp,0xc
c0020a97:	68 b8 6e 02 c0       	push   0xc0026eb8
c0020a9c:	e8 7c 8f fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020aa1:	83 c4 10             	add    esp,0x10
c0020aa4:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020aab:	74 0d                	je     c0020aba <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020aad:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ab2:	74 34                	je     c0020ae8 <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020ab4:	eb 1f                	jmp    c0020ad5 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020ab6:	3c 1c                	cmp    al,0x1c
c0020ab8:	74 0c                	je     c0020ac6 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020aba:	e4 60                	in     al,0x60
c0020abc:	3c 5a                	cmp    al,0x5a
c0020abe:	75 f6                	jne    c0020ab6 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020ac0:	eb 04                	jmp    c0020ac6 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020ac2:	3c 1c                	cmp    al,0x1c
c0020ac4:	75 e7                	jne    c0020aad <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020ac6:	e4 60                	in     al,0x60
c0020ac8:	3c 5a                	cmp    al,0x5a
c0020aca:	74 fa                	je     c0020ac6 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020acc:	eb f4                	jmp    c0020ac2 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020ace:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ad3:	74 1c                	je     c0020af1 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020ad5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020ad9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020adf:	c1 e1 09             	shl    ecx,0x9
c0020ae2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020ae6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ae8:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020aef:	75 55                	jne    c0020b46 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020af1:	8d 45 02             	lea    eax,[ebp+0x2]
c0020af4:	c1 e0 07             	shl    eax,0x7
c0020af7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020afb:	8b 38                	mov    edi,DWORD PTR [eax]
c0020afd:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020b03:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020b09:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b13:	c1 e0 05             	shl    eax,0x5
c0020b16:	01 c7                	add    edi,eax
c0020b18:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b1c:	83 e0 01             	and    eax,0x1
c0020b1f:	c1 e0 06             	shl    eax,0x6
c0020b22:	88 c2                	mov    dl,al
c0020b24:	8a 07                	mov    al,BYTE PTR [edi]
c0020b26:	83 e0 bf             	and    eax,0xffffffbf
c0020b29:	09 d0                	or     eax,edx
c0020b2b:	88 07                	mov    BYTE PTR [edi],al
c0020b2d:	8b 07                	mov    eax,DWORD PTR [edi]
c0020b2f:	25 e0 ff 00 00       	and    eax,0xffe0
c0020b34:	0d 05 00 01 00       	or     eax,0x10005
c0020b39:	89 07                	mov    DWORD PTR [edi],eax
c0020b3b:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020b42:	74 4d                	je     c0020b91 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020b44:	eb 32                	jmp    c0020b78 <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020b46:	83 ec 0c             	sub    esp,0xc
c0020b49:	68 c7 6e 02 c0       	push   0xc0026ec7
c0020b4e:	e8 ca 8e fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020b53:	83 c4 10             	add    esp,0x10
c0020b56:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020b5d:	75 92                	jne    c0020af1 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020b5f:	e4 60                	in     al,0x60
c0020b61:	3c 1c                	cmp    al,0x1c
c0020b63:	74 04                	je     c0020b69 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020b65:	3c 5a                	cmp    al,0x5a
c0020b67:	75 f6                	jne    c0020b5f <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020b69:	e4 60                	in     al,0x60
c0020b6b:	3c 5a                	cmp    al,0x5a
c0020b6d:	74 fa                	je     c0020b69 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020b6f:	3c 1c                	cmp    al,0x1c
c0020b71:	74 f6                	je     c0020b69 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020b73:	e9 79 ff ff ff       	jmp    c0020af1 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020b78:	83 ec 0c             	sub    esp,0xc
c0020b7b:	68 d6 6e 02 c0       	push   0xc0026ed6
c0020b80:	e8 98 8e fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020b85:	83 c4 10             	add    esp,0x10
c0020b88:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020b8f:	74 3b                	je     c0020bcc <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020b91:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020b97:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020b9d:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020ba3:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020ba6:	50                   	push   eax
c0020ba7:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020bab:	83 c0 08             	add    eax,0x8
c0020bae:	c1 e0 04             	shl    eax,0x4
c0020bb1:	50                   	push   eax
c0020bb2:	6a 00                	push   0x0
c0020bb4:	56                   	push   esi
c0020bb5:	e8 ca fa fd ff       	call   c0000684 <memset>
c0020bba:	83 c4 10             	add    esp,0x10
c0020bbd:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020bc4:	74 33                	je     c0020bf9 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020bc6:	eb 18                	jmp    c0020be0 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020bc8:	3c 1c                	cmp    al,0x1c
c0020bca:	74 0c                	je     c0020bd8 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020bcc:	e4 60                	in     al,0x60
c0020bce:	3c 5a                	cmp    al,0x5a
c0020bd0:	75 f6                	jne    c0020bc8 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020bd2:	eb 04                	jmp    c0020bd8 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020bd4:	3c 1c                	cmp    al,0x1c
c0020bd6:	75 b9                	jne    c0020b91 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020bd8:	e4 60                	in     al,0x60
c0020bda:	3c 5a                	cmp    al,0x5a
c0020bdc:	74 fa                	je     c0020bd8 <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020bde:	eb f4                	jmp    c0020bd4 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020be0:	83 ec 0c             	sub    esp,0xc
c0020be3:	68 e5 6e 02 c0       	push   0xc0026ee5
c0020be8:	e8 30 8e fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020bed:	83 c4 10             	add    esp,0x10
c0020bf0:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020bf7:	74 48                	je     c0020c41 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020bf9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020bff:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020c05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020c09:	c1 e0 09             	shl    eax,0x9
c0020c0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c10:	48                   	dec    eax
c0020c11:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c16:	89 c2                	mov    edx,eax
c0020c18:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020c1e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c23:	09 d0                	or     eax,edx
c0020c25:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020c2b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020c32:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020c39:	74 33                	je     c0020c6e <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020c3b:	eb 18                	jmp    c0020c55 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020c3d:	3c 1c                	cmp    al,0x1c
c0020c3f:	74 0c                	je     c0020c4d <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c41:	e4 60                	in     al,0x60
c0020c43:	3c 5a                	cmp    al,0x5a
c0020c45:	75 f6                	jne    c0020c3d <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020c47:	eb 04                	jmp    c0020c4d <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c49:	3c 1c                	cmp    al,0x1c
c0020c4b:	75 ac                	jne    c0020bf9 <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020c4d:	e4 60                	in     al,0x60
c0020c4f:	3c 5a                	cmp    al,0x5a
c0020c51:	74 fa                	je     c0020c4d <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020c53:	eb f4                	jmp    c0020c49 <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020c55:	83 ec 0c             	sub    esp,0xc
c0020c58:	68 f4 6e 02 c0       	push   0xc0026ef4
c0020c5d:	e8 bb 8d fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020c6c:	74 63                	je     c0020cd1 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020c6e:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020c71:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020c75:	66 25 00 7f          	and    ax,0x7f00
c0020c79:	66 0d 27 80          	or     ax,0x8027
c0020c7d:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020c82:	66 89 06             	mov    WORD PTR [esi],ax
c0020c85:	19 c0                	sbb    eax,eax
c0020c87:	83 e0 f0             	and    eax,0xfffffff0
c0020c8a:	83 c0 35             	add    eax,0x35
c0020c8d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020c90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c94:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020c98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c9c:	c1 e8 10             	shr    eax,0x10
c0020c9f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020ca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ca6:	c1 e8 18             	shr    eax,0x18
c0020ca9:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020cb0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020cb3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020cb7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cbe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020cc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020cc5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020cc9:	74 33                	je     c0020cfe <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020ccb:	eb 18                	jmp    c0020ce5 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020ccd:	3c 1c                	cmp    al,0x1c
c0020ccf:	74 0c                	je     c0020cdd <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020cd1:	e4 60                	in     al,0x60
c0020cd3:	3c 5a                	cmp    al,0x5a
c0020cd5:	75 f6                	jne    c0020ccd <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020cd7:	eb 04                	jmp    c0020cdd <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020cd9:	3c 1c                	cmp    al,0x1c
c0020cdb:	75 91                	jne    c0020c6e <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020cdd:	e4 60                	in     al,0x60
c0020cdf:	3c 5a                	cmp    al,0x5a
c0020ce1:	74 fa                	je     c0020cdd <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020ce3:	eb f4                	jmp    c0020cd9 <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020ce5:	83 ec 0c             	sub    esp,0xc
c0020ce8:	68 03 6f 02 c0       	push   0xc0026f03
c0020ced:	e8 2b 8d fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020cf2:	83 c4 10             	add    esp,0x10
c0020cf5:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020cfc:	74 11                	je     c0020d0f <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020cfe:	89 e8                	mov    eax,ebp
c0020d00:	31 f6                	xor    esi,esi
c0020d02:	c1 e0 07             	shl    eax,0x7
c0020d05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d09:	eb 21                	jmp    c0020d2c <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020d0b:	3c 1c                	cmp    al,0x1c
c0020d0d:	74 0c                	je     c0020d1b <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d0f:	e4 60                	in     al,0x60
c0020d11:	3c 5a                	cmp    al,0x5a
c0020d13:	75 f6                	jne    c0020d0b <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020d15:	eb 04                	jmp    c0020d1b <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d17:	3c 1c                	cmp    al,0x1c
c0020d19:	75 e3                	jne    c0020cfe <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020d1b:	e4 60                	in     al,0x60
c0020d1d:	3c 5a                	cmp    al,0x5a
c0020d1f:	74 fa                	je     c0020d1b <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020d21:	eb f4                	jmp    c0020d17 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020d23:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020d29:	74 0c                	je     c0020d37 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020d2b:	46                   	inc    esi
c0020d2c:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020d32:	80 e2 88             	and    dl,0x88
c0020d35:	75 ec                	jne    c0020d23 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020d37:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020d3e:	74 3d                	je     c0020d7d <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020d40:	83 ec 0c             	sub    esp,0xc
c0020d43:	68 12 6f 02 c0       	push   0xc0026f12
c0020d48:	e8 d0 8c fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020d4d:	8b 15 a0 81 02 c0    	mov    edx,DWORD PTR ds:0xc00281a0
c0020d53:	83 c4 10             	add    esp,0x10
c0020d56:	f6 c2 80             	test   dl,0x80
c0020d59:	74 0e                	je     c0020d69 <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020d5b:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020d61:	75 2f                	jne    c0020d92 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020d63:	eb 20                	jmp    c0020d85 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020d65:	3c 1c                	cmp    al,0x1c
c0020d67:	74 0c                	je     c0020d75 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020d69:	e4 60                	in     al,0x60
c0020d6b:	3c 5a                	cmp    al,0x5a
c0020d6d:	75 f6                	jne    c0020d65 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020d6f:	eb 04                	jmp    c0020d75 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020d71:	3c 1c                	cmp    al,0x1c
c0020d73:	75 e6                	jne    c0020d5b <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020d75:	e4 60                	in     al,0x60
c0020d77:	3c 5a                	cmp    al,0x5a
c0020d79:	74 fa                	je     c0020d75 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020d7b:	eb f4                	jmp    c0020d71 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0020d7d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020d83:	75 13                	jne    c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020d85:	83 ec 0c             	sub    esp,0xc
c0020d88:	68 22 6f 02 c0       	push   0xc0026f22
c0020d8d:	e9 18 01 00 00       	jmp    c0020eaa <SATA::access(unsigned long long, int, void*, bool)+0x55e>
c0020d92:	0f ba e2 0b          	bt     edx,0xb
c0020d96:	72 25                	jb     c0020dbd <SATA::access(unsigned long long, int, void*, bool)+0x471>
c0020d98:	be 01 00 00 00       	mov    esi,0x1
c0020d9d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020da1:	89 e8                	mov    eax,ebp
c0020da3:	d3 e6                	shl    esi,cl
c0020da5:	c1 e0 07             	shl    eax,0x7
c0020da8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020dac:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020db3:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0020db9:	74 4a                	je     c0020e05 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020dbb:	eb 2f                	jmp    c0020dec <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c0020dbd:	83 ec 0c             	sub    esp,0xc
c0020dc0:	68 30 6f 02 c0       	push   0xc0026f30
c0020dc5:	e8 53 8c fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020dca:	83 c4 10             	add    esp,0x10
c0020dcd:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020dd4:	75 c2                	jne    c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020dd6:	e4 60                	in     al,0x60
c0020dd8:	3c 5a                	cmp    al,0x5a
c0020dda:	74 04                	je     c0020de0 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020ddc:	3c 1c                	cmp    al,0x1c
c0020dde:	75 f6                	jne    c0020dd6 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020de0:	e4 60                	in     al,0x60
c0020de2:	3c 5a                	cmp    al,0x5a
c0020de4:	74 fa                	je     c0020de0 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020de6:	3c 1c                	cmp    al,0x1c
c0020de8:	74 f6                	je     c0020de0 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020dea:	eb ac                	jmp    c0020d98 <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020dec:	83 ec 0c             	sub    esp,0xc
c0020def:	68 40 6f 02 c0       	push   0xc0026f40
c0020df4:	e8 24 8c fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020df9:	83 c4 10             	add    esp,0x10
c0020dfc:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020e03:	74 0f                	je     c0020e14 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020e05:	89 e8                	mov    eax,ebp
c0020e07:	c1 e0 07             	shl    eax,0x7
c0020e0a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e0e:	eb 18                	jmp    c0020e28 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020e10:	3c 1c                	cmp    al,0x1c
c0020e12:	74 0c                	je     c0020e20 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e14:	e4 60                	in     al,0x60
c0020e16:	3c 5a                	cmp    al,0x5a
c0020e18:	75 f6                	jne    c0020e10 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020e1a:	eb 04                	jmp    c0020e20 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e1c:	3c 1c                	cmp    al,0x1c
c0020e1e:	75 e5                	jne    c0020e05 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020e20:	e4 60                	in     al,0x60
c0020e22:	3c 5a                	cmp    al,0x5a
c0020e24:	74 fa                	je     c0020e20 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020e26:	eb f4                	jmp    c0020e1c <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c0020e28:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020e2e:	85 d6                	test   esi,edx
c0020e30:	74 21                	je     c0020e53 <SATA::access(unsigned long long, int, void*, bool)+0x507>
c0020e32:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020e38:	0f ba e2 1e          	bt     edx,0x1e
c0020e3c:	73 ea                	jae    c0020e28 <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020e3e:	83 ec 0c             	sub    esp,0xc
c0020e41:	68 50 6f 02 c0       	push   0xc0026f50
c0020e46:	e8 d4 39 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0020e4b:	83 c4 10             	add    esp,0x10
c0020e4e:	e9 cc 00 00 00       	jmp    c0020f1f <SATA::access(unsigned long long, int, void*, bool)+0x5d3>
c0020e53:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020e5a:	75 1f                	jne    c0020e7b <SATA::access(unsigned long long, int, void*, bool)+0x52f>
c0020e5c:	89 e8                	mov    eax,ebp
c0020e5e:	c1 e0 07             	shl    eax,0x7
c0020e61:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e65:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020e6b:	0f ba e0 1e          	bt     eax,0x1e
c0020e6f:	73 4b                	jae    c0020ebc <SATA::access(unsigned long long, int, void*, bool)+0x570>
c0020e71:	83 ec 0c             	sub    esp,0xc
c0020e74:	68 50 6f 02 c0       	push   0xc0026f50
c0020e79:	eb 2f                	jmp    c0020eaa <SATA::access(unsigned long long, int, void*, bool)+0x55e>
c0020e7b:	83 ec 0c             	sub    esp,0xc
c0020e7e:	68 61 6f 02 c0       	push   0xc0026f61
c0020e83:	e8 95 8b fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020e88:	83 c4 10             	add    esp,0x10
c0020e8b:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020e92:	75 c8                	jne    c0020e5c <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020e94:	e4 60                	in     al,0x60
c0020e96:	3c 5a                	cmp    al,0x5a
c0020e98:	74 04                	je     c0020e9e <SATA::access(unsigned long long, int, void*, bool)+0x552>
c0020e9a:	3c 1c                	cmp    al,0x1c
c0020e9c:	75 f6                	jne    c0020e94 <SATA::access(unsigned long long, int, void*, bool)+0x548>
c0020e9e:	e4 60                	in     al,0x60
c0020ea0:	3c 5a                	cmp    al,0x5a
c0020ea2:	74 fa                	je     c0020e9e <SATA::access(unsigned long long, int, void*, bool)+0x552>
c0020ea4:	3c 1c                	cmp    al,0x1c
c0020ea6:	74 f6                	je     c0020e9e <SATA::access(unsigned long long, int, void*, bool)+0x552>
c0020ea8:	eb b2                	jmp    c0020e5c <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020eaa:	e8 70 39 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0020eaf:	83 c4 10             	add    esp,0x10
c0020eb2:	b8 01 00 00 00       	mov    eax,0x1
c0020eb7:	e9 96 00 00 00       	jmp    c0020f52 <SATA::access(unsigned long long, int, void*, bool)+0x606>
c0020ebc:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020ec3:	74 3a                	je     c0020eff <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c0020ec5:	83 ec 0c             	sub    esp,0xc
c0020ec8:	68 71 6f 02 c0       	push   0xc0026f71
c0020ecd:	e8 4b 8b fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020ed2:	83 c4 10             	add    esp,0x10
c0020ed5:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020edc:	74 0d                	je     c0020eeb <SATA::access(unsigned long long, int, void*, bool)+0x59f>
c0020ede:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020ee3:	75 31                	jne    c0020f16 <SATA::access(unsigned long long, int, void*, bool)+0x5ca>
c0020ee5:	eb 1f                	jmp    c0020f06 <SATA::access(unsigned long long, int, void*, bool)+0x5ba>
c0020ee7:	3c 1c                	cmp    al,0x1c
c0020ee9:	74 0c                	je     c0020ef7 <SATA::access(unsigned long long, int, void*, bool)+0x5ab>
c0020eeb:	e4 60                	in     al,0x60
c0020eed:	3c 5a                	cmp    al,0x5a
c0020eef:	75 f6                	jne    c0020ee7 <SATA::access(unsigned long long, int, void*, bool)+0x59b>
c0020ef1:	eb 04                	jmp    c0020ef7 <SATA::access(unsigned long long, int, void*, bool)+0x5ab>
c0020ef3:	3c 1c                	cmp    al,0x1c
c0020ef5:	75 e7                	jne    c0020ede <SATA::access(unsigned long long, int, void*, bool)+0x592>
c0020ef7:	e4 60                	in     al,0x60
c0020ef9:	3c 5a                	cmp    al,0x5a
c0020efb:	74 fa                	je     c0020ef7 <SATA::access(unsigned long long, int, void*, bool)+0x5ab>
c0020efd:	eb f4                	jmp    c0020ef3 <SATA::access(unsigned long long, int, void*, bool)+0x5a7>
c0020eff:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020f04:	75 19                	jne    c0020f1f <SATA::access(unsigned long long, int, void*, bool)+0x5d3>
c0020f06:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020f0c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020f10:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020f14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f16:	f6 05 a1 81 02 c0 08 	test   BYTE PTR ds:0xc00281a1,0x8
c0020f1d:	75 04                	jne    c0020f23 <SATA::access(unsigned long long, int, void*, bool)+0x5d7>
c0020f1f:	31 c0                	xor    eax,eax
c0020f21:	eb 2f                	jmp    c0020f52 <SATA::access(unsigned long long, int, void*, bool)+0x606>
c0020f23:	83 ec 0c             	sub    esp,0xc
c0020f26:	68 81 6f 02 c0       	push   0xc0026f81
c0020f2b:	e8 ed 8a fe ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0020f30:	83 c4 10             	add    esp,0x10
c0020f33:	f6 05 a0 81 02 c0 80 	test   BYTE PTR ds:0xc00281a0,0x80
c0020f3a:	75 e3                	jne    c0020f1f <SATA::access(unsigned long long, int, void*, bool)+0x5d3>
c0020f3c:	e4 60                	in     al,0x60
c0020f3e:	3c 1c                	cmp    al,0x1c
c0020f40:	74 04                	je     c0020f46 <SATA::access(unsigned long long, int, void*, bool)+0x5fa>
c0020f42:	3c 5a                	cmp    al,0x5a
c0020f44:	75 f6                	jne    c0020f3c <SATA::access(unsigned long long, int, void*, bool)+0x5f0>
c0020f46:	e4 60                	in     al,0x60
c0020f48:	3c 5a                	cmp    al,0x5a
c0020f4a:	74 fa                	je     c0020f46 <SATA::access(unsigned long long, int, void*, bool)+0x5fa>
c0020f4c:	3c 1c                	cmp    al,0x1c
c0020f4e:	74 f6                	je     c0020f46 <SATA::access(unsigned long long, int, void*, bool)+0x5fa>
c0020f50:	eb cd                	jmp    c0020f1f <SATA::access(unsigned long long, int, void*, bool)+0x5d3>
c0020f52:	83 c4 2c             	add    esp,0x2c
c0020f55:	5b                   	pop    ebx
c0020f56:	5e                   	pop    esi
c0020f57:	5f                   	pop    edi
c0020f58:	5d                   	pop    ebp
c0020f59:	c3                   	ret    

c0020f5a <SATA::read(unsigned long long, int, void*)>:
c0020f5a:	57                   	push   edi
c0020f5b:	b8 04 00 00 00       	mov    eax,0x4
c0020f60:	56                   	push   esi
c0020f61:	53                   	push   ebx
c0020f62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f6a:	8d 7a ff             	lea    edi,[edx-0x1]
c0020f6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020f71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020f75:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0020f7b:	77 25                	ja     c0020fa2 <SATA::read(unsigned long long, int, void*)+0x48>
c0020f7d:	b8 06 00 00 00       	mov    eax,0x6
c0020f82:	85 f6                	test   esi,esi
c0020f84:	74 1c                	je     c0020fa2 <SATA::read(unsigned long long, int, void*)+0x48>
c0020f86:	50                   	push   eax
c0020f87:	50                   	push   eax
c0020f88:	6a 00                	push   0x0
c0020f8a:	56                   	push   esi
c0020f8b:	52                   	push   edx
c0020f8c:	53                   	push   ebx
c0020f8d:	51                   	push   ecx
c0020f8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f92:	e8 b5 f9 ff ff       	call   c002094c <SATA::access(unsigned long long, int, void*, bool)>
c0020f97:	83 c4 20             	add    esp,0x20
c0020f9a:	85 c0                	test   eax,eax
c0020f9c:	0f 95 c0             	setne  al
c0020f9f:	0f b6 c0             	movzx  eax,al
c0020fa2:	5b                   	pop    ebx
c0020fa3:	5e                   	pop    esi
c0020fa4:	5f                   	pop    edi
c0020fa5:	c3                   	ret    

c0020fa6 <SATA::write(unsigned long long, int, void*)>:
c0020fa6:	55                   	push   ebp
c0020fa7:	b8 04 00 00 00       	mov    eax,0x4
c0020fac:	57                   	push   edi
c0020fad:	56                   	push   esi
c0020fae:	53                   	push   ebx
c0020faf:	83 ec 0c             	sub    esp,0xc
c0020fb2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020fb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020fba:	8d 73 ff             	lea    esi,[ebx-0x1]
c0020fbd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020fc1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020fc5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0020fcb:	77 3d                	ja     c002100a <SATA::write(unsigned long long, int, void*)+0x64>
c0020fcd:	b8 06 00 00 00       	mov    eax,0x6
c0020fd2:	85 ed                	test   ebp,ebp
c0020fd4:	74 34                	je     c002100a <SATA::write(unsigned long long, int, void*)+0x64>
c0020fd6:	c1 e3 09             	shl    ebx,0x9
c0020fd9:	01 eb                	add    ebx,ebp
c0020fdb:	89 d6                	mov    esi,edx
c0020fdd:	89 cf                	mov    edi,ecx
c0020fdf:	83 c6 01             	add    esi,0x1
c0020fe2:	83 d7 00             	adc    edi,0x0
c0020fe5:	50                   	push   eax
c0020fe6:	50                   	push   eax
c0020fe7:	6a 01                	push   0x1
c0020fe9:	55                   	push   ebp
c0020fea:	81 c5 00 02 00 00    	add    ebp,0x200
c0020ff0:	6a 01                	push   0x1
c0020ff2:	51                   	push   ecx
c0020ff3:	52                   	push   edx
c0020ff4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020ff8:	e8 4f f9 ff ff       	call   c002094c <SATA::access(unsigned long long, int, void*, bool)>
c0020ffd:	83 c4 20             	add    esp,0x20
c0021000:	89 f2                	mov    edx,esi
c0021002:	89 f9                	mov    ecx,edi
c0021004:	39 dd                	cmp    ebp,ebx
c0021006:	75 d3                	jne    c0020fdb <SATA::write(unsigned long long, int, void*)+0x35>
c0021008:	31 c0                	xor    eax,eax
c002100a:	83 c4 0c             	add    esp,0xc
c002100d:	5b                   	pop    ebx
c002100e:	5e                   	pop    esi
c002100f:	5f                   	pop    edi
c0021010:	5d                   	pop    ebp
c0021011:	c3                   	ret    

c0021012 <SATAPI::write(unsigned long long, int, void*)>:
c0021012:	b8 03 00 00 00       	mov    eax,0x3
c0021017:	c3                   	ret    

c0021018 <SATAPI::close(int, int, void*)>:
c0021018:	83 ec 0c             	sub    esp,0xc
c002101b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002101f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021025:	85 c0                	test   eax,eax
c0021027:	74 0c                	je     c0021035 <SATAPI::close(int, int, void*)+0x1d>
c0021029:	83 ec 0c             	sub    esp,0xc
c002102c:	8b 10                	mov    edx,DWORD PTR [eax]
c002102e:	50                   	push   eax
c002102f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021032:	83 c4 10             	add    esp,0x10
c0021035:	31 c0                	xor    eax,eax
c0021037:	83 c4 0c             	add    esp,0xc
c002103a:	c3                   	ret    
c002103b:	90                   	nop

c002103c <SATAPI::SATAPI()>:
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021043:	83 ec 04             	sub    esp,0x4
c0021046:	68 00 08 00 00       	push   0x800
c002104b:	68 cc 6f 02 c0       	push   0xc0026fcc
c0021050:	50                   	push   eax
c0021051:	e8 dc d4 fe ff       	call   c000e532 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021056:	83 c4 10             	add    esp,0x10
c0021059:	ba 78 70 02 c0       	mov    edx,0xc0027078
c002105e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021062:	89 10                	mov    DWORD PTR [eax],edx
c0021064:	90                   	nop
c0021065:	83 c4 0c             	add    esp,0xc
c0021068:	c3                   	ret    
c0021069:	90                   	nop

c002106a <SATAPI::diskRemoved()>:
c002106a:	83 ec 18             	sub    esp,0x18
c002106d:	68 d8 6f 02 c0       	push   0xc0026fd8
c0021072:	e8 3c bc fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002107b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0021082:	83 c4 1c             	add    esp,0x1c
c0021085:	c3                   	ret    

c0021086 <SATAPI::diskInserted()>:
c0021086:	53                   	push   ebx
c0021087:	83 ec 14             	sub    esp,0x14
c002108a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002108e:	68 ef 6f 02 c0       	push   0xc0026fef
c0021093:	e8 1b bc fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021098:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002109f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00210a2:	e8 f3 d4 fe ff       	call   c000e59a <PhysicalDisk::startCache()>
c00210a7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00210ab:	83 c4 18             	add    esp,0x18
c00210ae:	5b                   	pop    ebx
c00210af:	e9 22 f5 fe ff       	jmp    c00105d6 <createPartitionsForDisk(PhysicalDisk*)>

c00210b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00210b4:	55                   	push   ebp
c00210b5:	57                   	push   edi
c00210b6:	56                   	push   esi
c00210b7:	53                   	push   ebx
c00210b8:	83 ec 34             	sub    esp,0x34
c00210bb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00210bf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00210c3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00210c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00210cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00210cf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00210d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00210db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00210df:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00210e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210e9:	c1 e0 07             	shl    eax,0x7
c00210ec:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00210f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00210f4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00210fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021102:	8d 58 02             	lea    ebx,[eax+0x2]
c0021105:	c1 e3 07             	shl    ebx,0x7
c0021108:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002110c:	53                   	push   ebx
c002110d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0021113:	e8 34 e4 ff ff       	call   c001f54c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0021118:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002111c:	83 c4 10             	add    esp,0x10
c002111f:	b8 01 00 00 00       	mov    eax,0x1
c0021124:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0021129:	0f 84 85 01 00 00    	je     c00212b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002112f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021135:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021137:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002113d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0021143:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021147:	c1 e1 05             	shl    ecx,0x5
c002114a:	01 c8                	add    eax,ecx
c002114c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002114e:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0021154:	81 c9 25 00 01 00    	or     ecx,0x10025
c002115a:	89 08                	mov    DWORD PTR [eax],ecx
c002115c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0021162:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021168:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002116e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021171:	8d 7b 40             	lea    edi,[ebx+0x40]
c0021174:	50                   	push   eax
c0021175:	68 90 00 00 00       	push   0x90
c002117a:	6a 00                	push   0x0
c002117c:	53                   	push   ebx
c002117d:	e8 02 f5 fd ff       	call   c0000684 <memset>
c0021182:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021186:	b9 0c 00 00 00       	mov    ecx,0xc
c002118b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002118d:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0021193:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0021197:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002119d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00211a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00211a5:	48                   	dec    eax
c00211a6:	25 ff ff 3f 00       	and    eax,0x3fffff
c00211ab:	89 c1                	mov    ecx,eax
c00211ad:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00211b3:	25 00 00 c0 ff       	and    eax,0xffc00000
c00211b8:	09 c8                	or     eax,ecx
c00211ba:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00211c0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00211c3:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00211ca:	66 25 00 7f          	and    ax,0x7f00
c00211ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00211d2:	66 0d 27 80          	or     ax,0x8027
c00211d6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00211da:	66 89 03             	mov    WORD PTR [ebx],ax
c00211dd:	89 d0                	mov    eax,edx
c00211df:	c1 ea 18             	shr    edx,0x18
c00211e2:	c1 e8 10             	shr    eax,0x10
c00211e5:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00211e8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00211eb:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00211ef:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00211f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00211f6:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00211f9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00211fd:	83 c4 10             	add    esp,0x10
c0021200:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0021204:	31 c0                	xor    eax,eax
c0021206:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002120a:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0021210:	80 e2 88             	and    dl,0x88
c0021213:	74 0a                	je     c002121f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0021215:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002121a:	74 0a                	je     c0021226 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c002121c:	40                   	inc    eax
c002121d:	eb eb                	jmp    c002120a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c002121f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0021224:	75 0f                	jne    c0021235 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0021226:	83 ec 0c             	sub    esp,0xc
c0021229:	68 22 6f 02 c0       	push   0xc0026f22
c002122e:	e8 ec 35 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0021233:	eb 3f                	jmp    c0021274 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0021235:	ba 01 00 00 00       	mov    edx,0x1
c002123a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002123e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021242:	d3 e2                	shl    edx,cl
c0021244:	c1 e0 07             	shl    eax,0x7
c0021247:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c002124d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021251:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0021257:	85 ca                	test   edx,ecx
c0021259:	74 23                	je     c002127e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002125b:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0021261:	0f ba e1 1e          	bt     ecx,0x1e
c0021265:	73 ea                	jae    c0021251 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0021267:	83 ec 0c             	sub    esp,0xc
c002126a:	68 07 70 02 c0       	push   0xc0027007
c002126f:	e8 3f ba fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021274:	83 c4 10             	add    esp,0x10
c0021277:	b8 01 00 00 00       	mov    eax,0x1
c002127c:	eb 36                	jmp    c00212b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002127e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0021284:	0f ba e0 1e          	bt     eax,0x1e
c0021288:	73 0a                	jae    c0021294 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c002128a:	83 ec 0c             	sub    esp,0xc
c002128d:	68 1a 70 02 c0       	push   0xc002701a
c0021292:	eb db                	jmp    c002126f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0021294:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0021299:	74 17                	je     c00212b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c002129b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00212a0:	74 10                	je     c00212b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c00212a2:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c00212a8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00212ac:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00212b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00212b2:	31 c0                	xor    eax,eax
c00212b4:	83 c4 2c             	add    esp,0x2c
c00212b7:	5b                   	pop    ebx
c00212b8:	5e                   	pop    esi
c00212b9:	5f                   	pop    edi
c00212ba:	5d                   	pop    ebp
c00212bb:	c3                   	ret    

c00212bc <SATAPI::eject()>:
c00212bc:	57                   	push   edi
c00212bd:	b9 03 00 00 00       	mov    ecx,0x3
c00212c2:	53                   	push   ebx
c00212c3:	83 ec 14             	sub    esp,0x14
c00212c6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00212ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00212ce:	fc                   	cld    
c00212cf:	31 c0                	xor    eax,eax
c00212d1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00212d3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00212d8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00212dd:	50                   	push   eax
c00212de:	6a 00                	push   0x0
c00212e0:	6a 00                	push   0x0
c00212e2:	6a 00                	push   0x0
c00212e4:	6a 00                	push   0x0
c00212e6:	6a 02                	push   0x2
c00212e8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00212ec:	50                   	push   eax
c00212ed:	53                   	push   ebx
c00212ee:	e8 c1 fd ff ff       	call   c00210b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00212f3:	83 c4 14             	add    esp,0x14
c00212f6:	53                   	push   ebx
c00212f7:	e8 6e fd ff ff       	call   c002106a <SATAPI::diskRemoved()>
c00212fc:	83 c4 24             	add    esp,0x24
c00212ff:	31 c0                	xor    eax,eax
c0021301:	5b                   	pop    ebx
c0021302:	5f                   	pop    edi
c0021303:	c3                   	ret    

c0021304 <SATAPI::detectMedia()>:
c0021304:	56                   	push   esi
c0021305:	53                   	push   ebx
c0021306:	83 ec 28             	sub    esp,0x28
c0021309:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002130d:	6a 0c                	push   0xc
c002130f:	6a 00                	push   0x0
c0021311:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021315:	56                   	push   esi
c0021316:	e8 69 f3 fd ff       	call   c0000684 <memset>
c002131b:	83 c4 0c             	add    esp,0xc
c002131e:	6a 00                	push   0x0
c0021320:	6a 00                	push   0x0
c0021322:	6a 00                	push   0x0
c0021324:	6a 00                	push   0x0
c0021326:	6a 00                	push   0x0
c0021328:	56                   	push   esi
c0021329:	53                   	push   ebx
c002132a:	e8 85 fd ff ff       	call   c00210b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002132f:	83 c4 1c             	add    esp,0x1c
c0021332:	6a 0c                	push   0xc
c0021334:	6a 00                	push   0x0
c0021336:	56                   	push   esi
c0021337:	e8 48 f3 fd ff       	call   c0000684 <memset>
c002133c:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021341:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021346:	83 c4 0c             	add    esp,0xc
c0021349:	6a 01                	push   0x1
c002134b:	8d 44 24 16          	lea    eax,[esp+0x16]
c002134f:	50                   	push   eax
c0021350:	6a 00                	push   0x0
c0021352:	6a 00                	push   0x0
c0021354:	6a 12                	push   0x12
c0021356:	56                   	push   esi
c0021357:	53                   	push   ebx
c0021358:	e8 57 fd ff ff       	call   c00210b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002135d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021361:	83 c4 20             	add    esp,0x20
c0021364:	83 e0 7f             	and    eax,0x7f
c0021367:	3c 70                	cmp    al,0x70
c0021369:	74 15                	je     c0021380 <SATAPI::detectMedia()+0x7c>
c002136b:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021372:	75 0c                	jne    c0021380 <SATAPI::detectMedia()+0x7c>
c0021374:	83 ec 0c             	sub    esp,0xc
c0021377:	53                   	push   ebx
c0021378:	e8 09 fd ff ff       	call   c0021086 <SATAPI::diskInserted()>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021384:	83 e0 0f             	and    eax,0xf
c0021387:	3c 02                	cmp    al,0x2
c0021389:	75 1b                	jne    c00213a6 <SATAPI::detectMedia()+0xa2>
c002138b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021390:	75 2d                	jne    c00213bf <SATAPI::detectMedia()+0xbb>
c0021392:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021399:	74 24                	je     c00213bf <SATAPI::detectMedia()+0xbb>
c002139b:	83 ec 0c             	sub    esp,0xc
c002139e:	53                   	push   ebx
c002139f:	e8 c6 fc ff ff       	call   c002106a <SATAPI::diskRemoved()>
c00213a4:	eb 16                	jmp    c00213bc <SATAPI::detectMedia()+0xb8>
c00213a6:	84 c0                	test   al,al
c00213a8:	75 15                	jne    c00213bf <SATAPI::detectMedia()+0xbb>
c00213aa:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00213b1:	75 0c                	jne    c00213bf <SATAPI::detectMedia()+0xbb>
c00213b3:	83 ec 0c             	sub    esp,0xc
c00213b6:	53                   	push   ebx
c00213b7:	e8 ca fc ff ff       	call   c0021086 <SATAPI::diskInserted()>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	83 c4 24             	add    esp,0x24
c00213c2:	5b                   	pop    ebx
c00213c3:	5e                   	pop    esi
c00213c4:	c3                   	ret    
c00213c5:	90                   	nop

c00213c6 <SATAPI::open(int, int, void*)>:
c00213c6:	56                   	push   esi
c00213c7:	53                   	push   ebx
c00213c8:	50                   	push   eax
c00213c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00213cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213d1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00213db:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00213e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00213eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213ef:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00213f9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00213ff:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021406:	e8 6f 8c fe ff       	call   c000a07a <Phys::allocatePage()>
c002140b:	89 c6                	mov    esi,eax
c002140d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021413:	81 c6 00 10 00 00    	add    esi,0x1000
c0021419:	e8 5c 8c fe ff       	call   c000a07a <Phys::allocatePage()>
c002141e:	39 c6                	cmp    esi,eax
c0021420:	74 10                	je     c0021432 <SATAPI::open(int, int, void*)+0x6c>
c0021422:	83 ec 0c             	sub    esp,0xc
c0021425:	68 2f 70 02 c0       	push   0xc002702f
c002142a:	e8 f0 33 ff ff       	call   c001481f <Krnl::panic(char const*)>
c002142f:	83 c4 10             	add    esp,0x10
c0021432:	83 ec 0c             	sub    esp,0xc
c0021435:	6a 02                	push   0x2
c0021437:	e8 51 a5 fe ff       	call   c000b98d <Virt::allocateKernelVirtualPages(int)>
c002143c:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021442:	6a 03                	push   0x3
c0021444:	50                   	push   eax
c0021445:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002144b:	ff 35 b0 82 02 c0    	push   DWORD PTR ds:0xc00282b0
c0021451:	e8 de ab fe ff       	call   c000c034 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021456:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002145d:	83 c4 14             	add    esp,0x14
c0021460:	53                   	push   ebx
c0021461:	e8 9e fe ff ff       	call   c0021304 <SATAPI::detectMedia()>
c0021466:	83 c4 14             	add    esp,0x14
c0021469:	31 c0                	xor    eax,eax
c002146b:	5b                   	pop    ebx
c002146c:	5e                   	pop    esi
c002146d:	c3                   	ret    

c002146e <SATAPI::read(unsigned long long, int, void*)>:
c002146e:	55                   	push   ebp
c002146f:	57                   	push   edi
c0021470:	56                   	push   esi
c0021471:	53                   	push   ebx
c0021472:	83 ec 1c             	sub    esp,0x1c
c0021475:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021479:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002147d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021481:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021488:	74 19                	je     c00214a3 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002148a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002148f:	7e 2e                	jle    c00214bf <SATAPI::read(unsigned long long, int, void*)+0x51>
c0021491:	83 ec 0c             	sub    esp,0xc
c0021494:	68 45 70 02 c0       	push   0xc0027045
c0021499:	e8 81 33 ff ff       	call   c001481f <Krnl::panic(char const*)>
c002149e:	83 c4 10             	add    esp,0x10
c00214a1:	eb 1c                	jmp    c00214bf <SATAPI::read(unsigned long long, int, void*)+0x51>
c00214a3:	83 ec 0c             	sub    esp,0xc
c00214a6:	55                   	push   ebp
c00214a7:	e8 58 fe ff ff       	call   c0021304 <SATAPI::detectMedia()>
c00214ac:	83 c4 10             	add    esp,0x10
c00214af:	b8 02 00 00 00       	mov    eax,0x2
c00214b4:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00214bb:	75 cd                	jne    c002148a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00214bd:	eb 49                	jmp    c0021508 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00214bf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00214c3:	b9 03 00 00 00       	mov    ecx,0x3
c00214c8:	fc                   	cld    
c00214c9:	31 c0                	xor    eax,eax
c00214cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00214cd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00214d2:	89 d8                	mov    eax,ebx
c00214d4:	86 e0                	xchg   al,ah
c00214d6:	c1 c0 10             	rol    eax,0x10
c00214d9:	86 e0                	xchg   al,ah
c00214db:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00214df:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00214e3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00214e7:	50                   	push   eax
c00214e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00214f0:	56                   	push   esi
c00214f1:	53                   	push   ebx
c00214f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00214f6:	c1 e0 0b             	shl    eax,0xb
c00214f9:	50                   	push   eax
c00214fa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214fe:	50                   	push   eax
c00214ff:	55                   	push   ebp
c0021500:	e8 af fb ff ff       	call   c00210b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021505:	83 c4 20             	add    esp,0x20
c0021508:	83 c4 1c             	add    esp,0x1c
c002150b:	5b                   	pop    ebx
c002150c:	5e                   	pop    esi
c002150d:	5f                   	pop    edi
c002150e:	5d                   	pop    ebp
c002150f:	c3                   	ret    

c0021510 <AVX::open(int, int, void*)>:
c0021510:	83 ec 0c             	sub    esp,0xc
c0021513:	e8 30 11 00 00       	call   c0022648 <avxInit>
c0021518:	b8 00 00 00 00       	mov    eax,0x0
c002151d:	83 c4 0c             	add    esp,0xc
c0021520:	c3                   	ret    
c0021521:	90                   	nop
c0021522:	66 90                	xchg   ax,ax

c0021524 <AVX::close(int, int, void*)>:
c0021524:	83 ec 0c             	sub    esp,0xc
c0021527:	e8 1d 11 00 00       	call   c0022649 <avxClose>
c002152c:	b8 00 00 00 00       	mov    eax,0x0
c0021531:	83 c4 0c             	add    esp,0xc
c0021534:	c3                   	ret    
c0021535:	90                   	nop
c0021536:	66 90                	xchg   ax,ax

c0021538 <AVX::available()>:
c0021538:	83 ec 0c             	sub    esp,0xc
c002153b:	e8 00 11 00 00       	call   c0022640 <avxDetect>
c0021540:	85 c0                	test   eax,eax
c0021542:	0f 95 c0             	setne  al
c0021545:	83 c4 0c             	add    esp,0xc
c0021548:	c3                   	ret    
c0021549:	90                   	nop
c002154a:	66 90                	xchg   ax,ax

c002154c <AVX::save(void*)>:
c002154c:	83 ec 0c             	sub    esp,0xc
c002154f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021553:	83 ec 0c             	sub    esp,0xc
c0021556:	50                   	push   eax
c0021557:	e8 ea 10 00 00       	call   c0022646 <avxSave>
c002155c:	83 c4 10             	add    esp,0x10
c002155f:	90                   	nop
c0021560:	83 c4 0c             	add    esp,0xc
c0021563:	c3                   	ret    

c0021564 <AVX::load(void*)>:
c0021564:	83 ec 0c             	sub    esp,0xc
c0021567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002156b:	83 ec 0c             	sub    esp,0xc
c002156e:	50                   	push   eax
c002156f:	e8 d3 10 00 00       	call   c0022647 <avxLoad>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	90                   	nop
c0021578:	83 c4 0c             	add    esp,0xc
c002157b:	c3                   	ret    

c002157c <AVX::AVX()>:
c002157c:	83 ec 0c             	sub    esp,0xc
c002157f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021583:	83 ec 08             	sub    esp,0x8
c0021586:	68 a8 70 02 c0       	push   0xc00270a8
c002158b:	50                   	push   eax
c002158c:	e8 7f d0 fe ff       	call   c000e610 <FPU::FPU(char const*)>
c0021591:	83 c4 10             	add    esp,0x10
c0021594:	ba b8 70 02 c0       	mov    edx,0xc00270b8
c0021599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159d:	89 10                	mov    DWORD PTR [eax],edx
c002159f:	90                   	nop
c00215a0:	83 c4 0c             	add    esp,0xc
c00215a3:	c3                   	ret    

c00215a4 <MMX::available()>:
c00215a4:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00215a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00215af:	83 e0 20             	and    eax,0x20
c00215b2:	84 c0                	test   al,al
c00215b4:	0f 95 c0             	setne  al
c00215b7:	c3                   	ret    

c00215b8 <MMX::open(int, int, void*)>:
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	e8 12 11 00 00       	call   c00226d2 <x87Init>
c00215c0:	b8 00 00 00 00       	mov    eax,0x0
c00215c5:	83 c4 0c             	add    esp,0xc
c00215c8:	c3                   	ret    
c00215c9:	90                   	nop
c00215ca:	66 90                	xchg   ax,ax

c00215cc <MMX::close(int, int, void*)>:
c00215cc:	83 ec 0c             	sub    esp,0xc
c00215cf:	e8 18 11 00 00       	call   c00226ec <x87Close>
c00215d4:	b8 00 00 00 00       	mov    eax,0x0
c00215d9:	83 c4 0c             	add    esp,0xc
c00215dc:	c3                   	ret    
c00215dd:	90                   	nop
c00215de:	66 90                	xchg   ax,ax

c00215e0 <MMX::save(void*)>:
c00215e0:	83 ec 0c             	sub    esp,0xc
c00215e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215e7:	83 ec 0c             	sub    esp,0xc
c00215ea:	50                   	push   eax
c00215eb:	e8 d1 10 00 00       	call   c00226c1 <x87Save>
c00215f0:	83 c4 10             	add    esp,0x10
c00215f3:	90                   	nop
c00215f4:	83 c4 0c             	add    esp,0xc
c00215f7:	c3                   	ret    

c00215f8 <MMX::load(void*)>:
c00215f8:	83 ec 0c             	sub    esp,0xc
c00215fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215ff:	83 ec 0c             	sub    esp,0xc
c0021602:	50                   	push   eax
c0021603:	e8 c2 10 00 00       	call   c00226ca <x87Load>
c0021608:	83 c4 10             	add    esp,0x10
c002160b:	90                   	nop
c002160c:	83 c4 0c             	add    esp,0xc
c002160f:	c3                   	ret    

c0021610 <MMX::MMX()>:
c0021610:	83 ec 0c             	sub    esp,0xc
c0021613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021617:	83 ec 08             	sub    esp,0x8
c002161a:	68 e8 70 02 c0       	push   0xc00270e8
c002161f:	50                   	push   eax
c0021620:	e8 eb cf fe ff       	call   c000e610 <FPU::FPU(char const*)>
c0021625:	83 c4 10             	add    esp,0x10
c0021628:	ba f8 70 02 c0       	mov    edx,0xc00270f8
c002162d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021631:	89 10                	mov    DWORD PTR [eax],edx
c0021633:	90                   	nop
c0021634:	83 c4 0c             	add    esp,0xc
c0021637:	c3                   	ret    

c0021638 <SSE::open(int, int, void*)>:
c0021638:	83 ec 0c             	sub    esp,0xc
c002163b:	e8 44 10 00 00       	call   c0022684 <sseInit>
c0021640:	b8 00 00 00 00       	mov    eax,0x0
c0021645:	83 c4 0c             	add    esp,0xc
c0021648:	c3                   	ret    
c0021649:	90                   	nop
c002164a:	66 90                	xchg   ax,ax

c002164c <SSE::close(int, int, void*)>:
c002164c:	83 ec 0c             	sub    esp,0xc
c002164f:	e8 40 10 00 00       	call   c0022694 <sseClose>
c0021654:	b8 00 00 00 00       	mov    eax,0x0
c0021659:	83 c4 0c             	add    esp,0xc
c002165c:	c3                   	ret    
c002165d:	90                   	nop
c002165e:	66 90                	xchg   ax,ax

c0021660 <SSE::available()>:
c0021660:	83 ec 1c             	sub    esp,0x1c
c0021663:	e8 f8 0f 00 00       	call   c0022660 <absolutelyNoChanceInHell>
c0021668:	85 c0                	test   eax,eax
c002166a:	0f 95 c0             	setne  al
c002166d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021671:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021675:	83 c4 1c             	add    esp,0x1c
c0021678:	c3                   	ret    
c0021679:	90                   	nop
c002167a:	66 90                	xchg   ax,ax

c002167c <SSE::save(void*)>:
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021683:	83 ec 0c             	sub    esp,0xc
c0021686:	50                   	push   eax
c0021687:	e8 ec 0f 00 00       	call   c0022678 <sseSave>
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	90                   	nop
c0021690:	83 c4 0c             	add    esp,0xc
c0021693:	c3                   	ret    

c0021694 <SSE::load(void*)>:
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002169b:	83 ec 0c             	sub    esp,0xc
c002169e:	50                   	push   eax
c002169f:	e8 da 0f 00 00       	call   c002267e <sseLoad>
c00216a4:	83 c4 10             	add    esp,0x10
c00216a7:	90                   	nop
c00216a8:	83 c4 0c             	add    esp,0xc
c00216ab:	c3                   	ret    

c00216ac <SSE::SSE()>:
c00216ac:	83 ec 0c             	sub    esp,0xc
c00216af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216b3:	83 ec 08             	sub    esp,0x8
c00216b6:	68 28 71 02 c0       	push   0xc0027128
c00216bb:	50                   	push   eax
c00216bc:	e8 4f cf fe ff       	call   c000e610 <FPU::FPU(char const*)>
c00216c1:	83 c4 10             	add    esp,0x10
c00216c4:	ba 38 71 02 c0       	mov    edx,0xc0027138
c00216c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216cd:	89 10                	mov    DWORD PTR [eax],edx
c00216cf:	90                   	nop
c00216d0:	83 c4 0c             	add    esp,0xc
c00216d3:	c3                   	ret    

c00216d4 <x87::open(int, int, void*)>:
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	e8 f6 0f 00 00       	call   c00226d2 <x87Init>
c00216dc:	b8 00 00 00 00       	mov    eax,0x0
c00216e1:	83 c4 0c             	add    esp,0xc
c00216e4:	c3                   	ret    
c00216e5:	90                   	nop
c00216e6:	66 90                	xchg   ax,ax

c00216e8 <x87::close(int, int, void*)>:
c00216e8:	83 ec 0c             	sub    esp,0xc
c00216eb:	e8 fc 0f 00 00       	call   c00226ec <x87Close>
c00216f0:	b8 00 00 00 00       	mov    eax,0x0
c00216f5:	83 c4 0c             	add    esp,0xc
c00216f8:	c3                   	ret    
c00216f9:	90                   	nop
c00216fa:	66 90                	xchg   ax,ax

c00216fc <x87::available()>:
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	e8 a2 0f 00 00       	call   c00226a6 <x87Detect>
c0021704:	85 c0                	test   eax,eax
c0021706:	0f 95 c0             	setne  al
c0021709:	83 c4 0c             	add    esp,0xc
c002170c:	c3                   	ret    
c002170d:	90                   	nop
c002170e:	66 90                	xchg   ax,ax

c0021710 <x87::save(void*)>:
c0021710:	83 ec 0c             	sub    esp,0xc
c0021713:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021717:	83 ec 0c             	sub    esp,0xc
c002171a:	50                   	push   eax
c002171b:	e8 a1 0f 00 00       	call   c00226c1 <x87Save>
c0021720:	83 c4 10             	add    esp,0x10
c0021723:	90                   	nop
c0021724:	83 c4 0c             	add    esp,0xc
c0021727:	c3                   	ret    

c0021728 <x87::load(void*)>:
c0021728:	83 ec 0c             	sub    esp,0xc
c002172b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002172f:	83 ec 0c             	sub    esp,0xc
c0021732:	50                   	push   eax
c0021733:	e8 92 0f 00 00       	call   c00226ca <x87Load>
c0021738:	83 c4 10             	add    esp,0x10
c002173b:	90                   	nop
c002173c:	83 c4 0c             	add    esp,0xc
c002173f:	c3                   	ret    

c0021740 <x87::x87()>:
c0021740:	83 ec 0c             	sub    esp,0xc
c0021743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021747:	83 ec 08             	sub    esp,0x8
c002174a:	68 68 71 02 c0       	push   0xc0027168
c002174f:	50                   	push   eax
c0021750:	e8 bb ce fe ff       	call   c000e610 <FPU::FPU(char const*)>
c0021755:	83 c4 10             	add    esp,0x10
c0021758:	ba 78 71 02 c0       	mov    edx,0xc0027178
c002175d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021761:	89 10                	mov    DWORD PTR [eax],edx
c0021763:	90                   	nop
c0021764:	83 c4 0c             	add    esp,0xc
c0021767:	c3                   	ret    

c0021768 <APIC::disable()>:
c0021768:	90                   	nop
c0021769:	c3                   	ret    

c002176a <APIC::close(int, int, void*)>:
c002176a:	55                   	push   ebp
c002176b:	89 e5                	mov    ebp,esp
c002176d:	83 ec 08             	sub    esp,0x8
c0021770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021773:	8b 00                	mov    eax,DWORD PTR [eax]
c0021775:	83 c0 3c             	add    eax,0x3c
c0021778:	8b 00                	mov    eax,DWORD PTR [eax]
c002177a:	83 ec 0c             	sub    esp,0xc
c002177d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021780:	ff d0                	call   eax
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	b8 00 00 00 00       	mov    eax,0x0
c002178a:	c9                   	leave  
c002178b:	c3                   	ret    

c002178c <IOAPIC::close(int, int, void*)>:
c002178c:	b8 00 00 00 00       	mov    eax,0x0
c0021791:	c3                   	ret    

c0021792 <APIC::io_wait()>:
c0021792:	eb 00                	jmp    c0021794 <APIC::io_wait()+0x2>
c0021794:	eb 00                	jmp    c0021796 <APIC::io_wait()+0x4>
c0021796:	90                   	nop
c0021797:	c3                   	ret    

c0021798 <APIC::getBase()>:
c0021798:	55                   	push   ebp
c0021799:	89 e5                	mov    ebp,esp
c002179b:	83 ec 18             	sub    esp,0x18
c002179e:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00217a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00217a9:	83 e0 08             	and    eax,0x8
c00217ac:	84 c0                	test   al,al
c00217ae:	75 07                	jne    c00217b7 <APIC::getBase()+0x1f>
c00217b0:	b8 00 00 00 00       	mov    eax,0x0
c00217b5:	eb 21                	jmp    c00217d8 <APIC::getBase()+0x40>
c00217b7:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00217bc:	83 ec 08             	sub    esp,0x8
c00217bf:	6a 1b                	push   0x1b
c00217c1:	50                   	push   eax
c00217c2:	e8 5d 77 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00217c7:	83 c4 10             	add    esp,0x10
c00217ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00217cd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00217d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00217d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00217d8:	c9                   	leave  
c00217d9:	c3                   	ret    

c00217da <APIC::eoi(unsigned char)>:
c00217da:	55                   	push   ebp
c00217db:	89 e5                	mov    ebp,esp
c00217dd:	83 ec 28             	sub    esp,0x28
c00217e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00217e3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00217e6:	83 ec 0c             	sub    esp,0xc
c00217e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00217ec:	e8 a7 ff ff ff       	call   c0021798 <APIC::getBase()>
c00217f1:	83 c4 10             	add    esp,0x10
c00217f4:	05 b0 00 00 00       	add    eax,0xb0
c00217f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00217fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00217ff:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021805:	90                   	nop
c0021806:	c9                   	leave  
c0021807:	c3                   	ret    

c0021808 <APIC::open(int, int, void*)>:
c0021808:	55                   	push   ebp
c0021809:	89 e5                	mov    ebp,esp
c002180b:	57                   	push   edi
c002180c:	56                   	push   esi
c002180d:	53                   	push   ebx
c002180e:	83 ec 2c             	sub    esp,0x2c
c0021811:	83 ec 0c             	sub    esp,0xc
c0021814:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021817:	e8 7c ff ff ff       	call   c0021798 <APIC::getBase()>
c002181c:	83 c4 10             	add    esp,0x10
c002181f:	89 c2                	mov    edx,eax
c0021821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021824:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002182a:	0f b6 f8             	movzx  edi,al
c002182d:	89 d0                	mov    eax,edx
c002182f:	ba 00 00 00 00       	mov    edx,0x0
c0021834:	89 c1                	mov    ecx,eax
c0021836:	80 e5 ff             	and    ch,0xff
c0021839:	89 cb                	mov    ebx,ecx
c002183b:	0f b6 f2             	movzx  esi,dl
c002183e:	89 d8                	mov    eax,ebx
c0021840:	89 f2                	mov    edx,esi
c0021842:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021845:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021848:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002184c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021850:	83 e0 00             	and    eax,0x0
c0021853:	09 d0                	or     eax,edx
c0021855:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002185c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021862:	8d 50 01             	lea    edx,[eax+0x1]
c0021865:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021868:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002186e:	0f b6 d0             	movzx  edx,al
c0021871:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021874:	83 c2 08             	add    edx,0x8
c0021877:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002187b:	0f b6 c9             	movzx  ecx,cl
c002187e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021884:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021888:	83 ec 0c             	sub    esp,0xc
c002188b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002188e:	e8 05 ff ff ff       	call   c0021798 <APIC::getBase()>
c0021893:	83 c4 10             	add    esp,0x10
c0021896:	05 f0 00 00 00       	add    eax,0xf0
c002189b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002189e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00218a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00218a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00218a6:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00218ad:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00218b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00218b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00218ba:	89 10                	mov    DWORD PTR [eax],edx
c00218bc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00218c3:	a1 f0 89 02 c0       	mov    eax,ds:0xc00289f0
c00218c8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00218cb:	7d 7c                	jge    c0021949 <APIC::open(int, int, void*)+0x141>
c00218cd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00218d0:	8b 04 85 00 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7600]
c00218d7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00218da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00218dd:	8b 04 85 00 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7600]
c00218e4:	c1 e8 08             	shr    eax,0x8
c00218e7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00218eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00218ee:	8b 04 85 00 8a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7600]
c00218f5:	c1 e8 18             	shr    eax,0x18
c00218f8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00218fb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00218ff:	75 40                	jne    c0021941 <APIC::open(int, int, void*)+0x139>
c0021901:	83 ec 0c             	sub    esp,0xc
c0021904:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021907:	e8 8c fe ff ff       	call   c0021798 <APIC::getBase()>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021913:	75 07                	jne    c002191c <APIC::open(int, int, void*)+0x114>
c0021915:	ba 60 03 00 00       	mov    edx,0x360
c002191a:	eb 05                	jmp    c0021921 <APIC::open(int, int, void*)+0x119>
c002191c:	ba 50 03 00 00       	mov    edx,0x350
c0021921:	01 d0                	add    eax,edx
c0021923:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021926:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021929:	8b 00                	mov    eax,DWORD PTR [eax]
c002192b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002192e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021935:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021939:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002193c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002193f:	89 10                	mov    DWORD PTR [eax],edx
c0021941:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021944:	e9 7a ff ff ff       	jmp    c00218c3 <APIC::open(int, int, void*)+0xbb>
c0021949:	b8 00 00 00 00       	mov    eax,0x0
c002194e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021951:	5b                   	pop    ebx
c0021952:	5e                   	pop    esi
c0021953:	5f                   	pop    edi
c0021954:	5d                   	pop    ebp
c0021955:	c3                   	ret    

c0021956 <IOAPIC::IOAPIC()>:
c0021956:	83 ec 0c             	sub    esp,0xc
c0021959:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002195d:	83 ec 08             	sub    esp,0x8
c0021960:	68 a8 71 02 c0       	push   0xc00271a8
c0021965:	50                   	push   eax
c0021966:	e8 93 c9 fe ff       	call   c000e2fe <Device::Device(char const*)>
c002196b:	83 c4 10             	add    esp,0x10
c002196e:	ba d0 72 02 c0       	mov    edx,0xc00272d0
c0021973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021977:	89 10                	mov    DWORD PTR [eax],edx
c0021979:	90                   	nop
c002197a:	83 c4 0c             	add    esp,0xc
c002197d:	c3                   	ret    

c002197e <APIC::APIC()>:
c002197e:	53                   	push   ebx
c002197f:	83 ec 18             	sub    esp,0x18
c0021982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021986:	83 ec 08             	sub    esp,0x8
c0021989:	68 b0 71 02 c0       	push   0xc00271b0
c002198e:	50                   	push   eax
c002198f:	e8 e2 d0 fe ff       	call   c000ea76 <InterruptController::InterruptController(char const*)>
c0021994:	83 c4 10             	add    esp,0x10
c0021997:	ba 88 72 02 c0       	mov    edx,0xc0027288
c002199c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219a0:	89 10                	mov    DWORD PTR [eax],edx
c00219a2:	a0 c0 a0 02 c0       	mov    al,ds:0xc002a0c0
c00219a7:	83 f0 01             	xor    eax,0x1
c00219aa:	84 c0                	test   al,al
c00219ac:	0f 84 a1 00 00 00    	je     c0021a53 <APIC::APIC()+0xd5>
c00219b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00219b7:	a0 a0 8a 02 c0       	mov    al,ds:0xc0028aa0
c00219bc:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00219c0:	0f 83 86 00 00 00    	jae    c0021a4c <APIC::APIC()+0xce>
c00219c6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00219ce:	83 ec 0c             	sub    esp,0xc
c00219d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00219d5:	e8 e9 7f fe ff       	call   c00099c3 <malloc>
c00219da:	83 c4 10             	add    esp,0x10
c00219dd:	89 c3                	mov    ebx,eax
c00219df:	83 ec 0c             	sub    esp,0xc
c00219e2:	53                   	push   ebx
c00219e3:	e8 6e ff ff ff       	call   c0021956 <IOAPIC::IOAPIC()>
c00219e8:	83 c4 10             	add    esp,0x10
c00219eb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00219ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00219f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00219f8:	89 14 85 a0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f60],edx
c00219ff:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c0021a04:	40                   	inc    eax
c0021a05:	a3 80 a0 02 c0       	mov    ds:0xc002a080,eax
c0021a0a:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0021a0f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021a15:	83 ec 08             	sub    esp,0x8
c0021a18:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021a1c:	50                   	push   eax
c0021a1d:	e8 d8 c6 fe ff       	call   c000e0fa <Device::addChild(Device*)>
c0021a22:	83 c4 10             	add    esp,0x10
c0021a25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a29:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a2b:	83 c0 08             	add    eax,0x8
c0021a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a30:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021a35:	6a 00                	push   0x0
c0021a37:	6a 00                	push   0x0
c0021a39:	52                   	push   edx
c0021a3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a3e:	ff d0                	call   eax
c0021a40:	83 c4 10             	add    esp,0x10
c0021a43:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021a47:	e9 6b ff ff ff       	jmp    c00219b7 <APIC::APIC()+0x39>
c0021a4c:	c6 05 c0 a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0c0,0x1
c0021a53:	90                   	nop
c0021a54:	83 c4 18             	add    esp,0x18
c0021a57:	5b                   	pop    ebx
c0021a58:	c3                   	ret    
c0021a59:	90                   	nop

c0021a5a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021a5a:	55                   	push   ebp
c0021a5b:	89 e5                	mov    ebp,esp
c0021a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021a66:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021a69:	72 1d                	jb     c0021a88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a6e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a77:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021a7d:	01 d0                	add    eax,edx
c0021a7f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021a82:	73 04                	jae    c0021a88 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021a84:	b0 01                	mov    al,0x1
c0021a86:	eb 02                	jmp    c0021a8a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021a88:	b0 00                	mov    al,0x0
c0021a8a:	5d                   	pop    ebp
c0021a8b:	c3                   	ret    

c0021a8c <IOAPIC::read(int)>:
c0021a8c:	55                   	push   ebp
c0021a8d:	89 e5                	mov    ebp,esp
c0021a8f:	83 ec 10             	sub    esp,0x10
c0021a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021a95:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021a9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021a9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021aa1:	0f b6 d0             	movzx  edx,al
c0021aa4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021aa7:	89 10                	mov    DWORD PTR [eax],edx
c0021aa9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021aac:	83 c0 10             	add    eax,0x10
c0021aaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ab1:	c9                   	leave  
c0021ab2:	c3                   	ret    
c0021ab3:	90                   	nop

c0021ab4 <IOAPIC::open(int, int, void*)>:
c0021ab4:	55                   	push   ebp
c0021ab5:	89 e5                	mov    ebp,esp
c0021ab7:	57                   	push   edi
c0021ab8:	56                   	push   esi
c0021ab9:	53                   	push   ebx
c0021aba:	83 ec 0c             	sub    esp,0xc
c0021abd:	83 ec 0c             	sub    esp,0xc
c0021ac0:	68 db 71 02 c0       	push   0xc00271db
c0021ac5:	e8 e9 b1 fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021aca:	83 c4 10             	add    esp,0x10
c0021acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ad0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ad3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021adc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021ae2:	8b 14 85 e0 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7520]
c0021ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021aec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021af5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021afb:	8b 14 85 60 8b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd74a0]
c0021b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b05:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b0e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b17:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021b1d:	0f b6 f8             	movzx  edi,al
c0021b20:	89 d0                	mov    eax,edx
c0021b22:	ba 00 00 00 00       	mov    edx,0x0
c0021b27:	89 c1                	mov    ecx,eax
c0021b29:	80 e5 ff             	and    ch,0xff
c0021b2c:	89 cb                	mov    ebx,ecx
c0021b2e:	0f b6 f2             	movzx  esi,dl
c0021b31:	89 d8                	mov    eax,ebx
c0021b33:	89 f2                	mov    edx,esi
c0021b35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b38:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021b3b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021b3f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021b43:	83 e0 00             	and    eax,0x0
c0021b46:	09 d0                	or     eax,edx
c0021b48:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b4f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021b55:	8d 50 01             	lea    edx,[eax+0x1]
c0021b58:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021b5b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021b61:	0f b6 d0             	movzx  edx,al
c0021b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b67:	83 c2 08             	add    edx,0x8
c0021b6a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021b6e:	0f b6 c9             	movzx  ecx,cl
c0021b71:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021b77:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021b7b:	83 ec 08             	sub    esp,0x8
c0021b7e:	6a 01                	push   0x1
c0021b80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b83:	e8 04 ff ff ff       	call   c0021a8c <IOAPIC::read(int)>
c0021b88:	83 c4 10             	add    esp,0x10
c0021b8b:	c1 f8 10             	sar    eax,0x10
c0021b8e:	0f b6 c0             	movzx  eax,al
c0021b91:	8d 50 01             	lea    edx,[eax+0x1]
c0021b94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b97:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021b9d:	b8 00 00 00 00       	mov    eax,0x0
c0021ba2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021ba5:	5b                   	pop    ebx
c0021ba6:	5e                   	pop    esi
c0021ba7:	5f                   	pop    edi
c0021ba8:	5d                   	pop    ebp
c0021ba9:	c3                   	ret    

c0021baa <IOAPIC::write(int, int)>:
c0021baa:	55                   	push   ebp
c0021bab:	89 e5                	mov    ebp,esp
c0021bad:	83 ec 10             	sub    esp,0x10
c0021bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021bb3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021bb9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bbf:	0f b6 d0             	movzx  edx,al
c0021bc2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021bc5:	89 10                	mov    DWORD PTR [eax],edx
c0021bc7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021bca:	8d 50 10             	lea    edx,[eax+0x10]
c0021bcd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021bd0:	89 02                	mov    DWORD PTR [edx],eax
c0021bd2:	90                   	nop
c0021bd3:	c9                   	leave  
c0021bd4:	c3                   	ret    
c0021bd5:	90                   	nop

c0021bd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021bd6:	55                   	push   ebp
c0021bd7:	89 e5                	mov    ebp,esp
c0021bd9:	53                   	push   ebx
c0021bda:	83 ec 2c             	sub    esp,0x2c
c0021bdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021be0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021be3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021be6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021be9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021bec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021bef:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021bf2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021bf5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021bf8:	88 d8                	mov    al,bl
c0021bfa:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021bfd:	88 c8                	mov    al,cl
c0021bff:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021c02:	88 d0                	mov    al,dl
c0021c04:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021c07:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021c0b:	83 c0 08             	add    eax,0x8
c0021c0e:	01 c0                	add    eax,eax
c0021c10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021c13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021c17:	83 c0 08             	add    eax,0x8
c0021c1a:	01 c0                	add    eax,eax
c0021c1c:	40                   	inc    eax
c0021c1d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021c20:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021c23:	50                   	push   eax
c0021c24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c27:	e8 60 fe ff ff       	call   c0021a8c <IOAPIC::read(int)>
c0021c2c:	83 c4 08             	add    esp,0x8
c0021c2f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021c32:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021c39:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021c3c:	c1 e0 18             	shl    eax,0x18
c0021c3f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021c42:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021c45:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021c48:	52                   	push   edx
c0021c49:	50                   	push   eax
c0021c4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c4d:	e8 58 ff ff ff       	call   c0021baa <IOAPIC::write(int, int)>
c0021c52:	83 c4 0c             	add    esp,0xc
c0021c55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021c58:	50                   	push   eax
c0021c59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021c5c:	e8 2b fe ff ff       	call   c0021a8c <IOAPIC::read(int)>
c0021c61:	83 c4 08             	add    esp,0x8
c0021c64:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021c67:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021c6e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021c75:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021c7c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021c80:	74 09                	je     c0021c8b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021c82:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021c89:	eb 07                	jmp    c0021c92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021c8b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021c92:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021c96:	74 09                	je     c0021ca1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021c98:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021c9f:	eb 07                	jmp    c0021ca8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021ca1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021ca8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021caf:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021cb3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021cb6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021cb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021cbc:	52                   	push   edx
c0021cbd:	50                   	push   eax
c0021cbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cc1:	e8 e4 fe ff ff       	call   c0021baa <IOAPIC::write(int, int)>
c0021cc6:	83 c4 0c             	add    esp,0xc
c0021cc9:	90                   	nop
c0021cca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021ccd:	c9                   	leave  
c0021cce:	c3                   	ret    
c0021ccf:	90                   	nop

c0021cd0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021cd0:	55                   	push   ebp
c0021cd1:	89 e5                	mov    ebp,esp
c0021cd3:	57                   	push   edi
c0021cd4:	56                   	push   esi
c0021cd5:	53                   	push   ebx
c0021cd6:	83 ec 2c             	sub    esp,0x2c
c0021cd9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021cdc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021cdf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021ce3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021ce7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021ceb:	74 5a                	je     c0021d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021ced:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021cf1:	7f 44                	jg     c0021d37 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021cf3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cf6:	05 80 78 02 c0       	add    eax,0xc0027880
c0021cfb:	8a 00                	mov    al,BYTE PTR [eax]
c0021cfd:	0f b6 c0             	movzx  eax,al
c0021d00:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021d03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d06:	66 8b 84 00 80 8a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7580]
c0021d0e:	0f b7 c0             	movzx  eax,ax
c0021d11:	83 e0 02             	and    eax,0x2
c0021d14:	85 c0                	test   eax,eax
c0021d16:	74 04                	je     c0021d1c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021d18:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021d1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d1f:	66 8b 84 00 80 8a 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7580]
c0021d27:	0f b7 c0             	movzx  eax,ax
c0021d2a:	83 e0 08             	and    eax,0x8
c0021d2d:	85 c0                	test   eax,eax
c0021d2f:	74 16                	je     c0021d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021d31:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021d35:	eb 10                	jmp    c0021d47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021d37:	83 ec 0c             	sub    esp,0xc
c0021d3a:	68 ec 71 02 c0       	push   0xc00271ec
c0021d3f:	e8 db 2a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021d4b:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c0021d50:	83 ec 08             	sub    esp,0x8
c0021d53:	50                   	push   eax
c0021d54:	68 24 72 02 c0       	push   0xc0027224
c0021d59:	e8 55 af fe ff       	call   c000ccb3 <Dbg::kprintf(char const*, ...)>
c0021d5e:	83 c4 10             	add    esp,0x10
c0021d61:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021d68:	a1 80 a0 02 c0       	mov    eax,ds:0xc002a080
c0021d6d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021d70:	7d 67                	jge    c0021dd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021d72:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021d75:	8b 04 85 a0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f60]
c0021d7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021d7f:	83 ec 08             	sub    esp,0x8
c0021d82:	52                   	push   edx
c0021d83:	50                   	push   eax
c0021d84:	e8 d1 fc ff ff       	call   c0021a5a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021d89:	83 c4 10             	add    esp,0x10
c0021d8c:	84 c0                	test   al,al
c0021d8e:	74 44                	je     c0021dd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021d90:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021d93:	8b 1c 85 a0 a0 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5f60]
c0021d9a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021d9e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021da1:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021da5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021da8:	83 c0 20             	add    eax,0x20
c0021dab:	0f b6 f0             	movzx  esi,al
c0021dae:	b8 00 00 00 00       	mov    eax,0x0
c0021db3:	99                   	cdq    
c0021db4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021db7:	0f b6 c9             	movzx  ecx,cl
c0021dba:	83 ec 04             	sub    esp,0x4
c0021dbd:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021dc0:	57                   	push   edi
c0021dc1:	56                   	push   esi
c0021dc2:	52                   	push   edx
c0021dc3:	50                   	push   eax
c0021dc4:	51                   	push   ecx
c0021dc5:	53                   	push   ebx
c0021dc6:	e8 0b fe ff ff       	call   c0021bd6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021dcb:	83 c4 20             	add    esp,0x20
c0021dce:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021dd2:	eb 05                	jmp    c0021dd9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021dd4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021dd7:	eb 8f                	jmp    c0021d68 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021dd9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021ddc:	83 f0 01             	xor    eax,0x1
c0021ddf:	84 c0                	test   al,al
c0021de1:	74 10                	je     c0021df3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021de3:	83 ec 0c             	sub    esp,0xc
c0021de6:	68 3b 72 02 c0       	push   0xc002723b
c0021deb:	e8 2f 2a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0021df0:	83 c4 10             	add    esp,0x10
c0021df3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021df7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021dfe:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021e02:	7f 65                	jg     c0021e69 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e0a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021e11:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e14:	01 ca                	add    edx,ecx
c0021e16:	83 c2 54             	add    edx,0x54
c0021e19:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021e1d:	85 c0                	test   eax,eax
c0021e1f:	75 43                	jne    c0021e64 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e24:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e27:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021e2e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e31:	01 ca                	add    edx,ecx
c0021e33:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021e36:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021e39:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021e4a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e4d:	01 ca                	add    edx,ecx
c0021e4f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021e55:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021e58:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021e5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e5f:	83 e8 20             	sub    eax,0x20
c0021e62:	eb 1a                	jmp    c0021e7e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021e64:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021e67:	eb 95                	jmp    c0021dfe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021e69:	83 ec 0c             	sub    esp,0xc
c0021e6c:	68 48 72 02 c0       	push   0xc0027248
c0021e71:	e8 a9 29 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0021e76:	83 c4 10             	add    esp,0x10
c0021e79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021e7e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021e81:	5b                   	pop    ebx
c0021e82:	5e                   	pop    esi
c0021e83:	5f                   	pop    edi
c0021e84:	5d                   	pop    ebp
c0021e85:	c3                   	ret    

c0021e86 <PIC::disable()>:
c0021e86:	55                   	push   ebp
c0021e87:	89 e5                	mov    ebp,esp
c0021e89:	83 ec 10             	sub    esp,0x10
c0021e8c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021e92:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021e96:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021e99:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021e9d:	ee                   	out    dx,al
c0021e9e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021ea4:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021ea8:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021eab:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021eaf:	ee                   	out    dx,al
c0021eb0:	90                   	nop
c0021eb1:	c9                   	leave  
c0021eb2:	c3                   	ret    
c0021eb3:	90                   	nop

c0021eb4 <PIC::close(int, int, void*)>:
c0021eb4:	55                   	push   ebp
c0021eb5:	89 e5                	mov    ebp,esp
c0021eb7:	83 ec 08             	sub    esp,0x8
c0021eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ebd:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ebf:	83 c0 3c             	add    eax,0x3c
c0021ec2:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ec4:	83 ec 0c             	sub    esp,0xc
c0021ec7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021eca:	ff d0                	call   eax
c0021ecc:	83 c4 10             	add    esp,0x10
c0021ecf:	b8 00 00 00 00       	mov    eax,0x0
c0021ed4:	c9                   	leave  
c0021ed5:	c3                   	ret    

c0021ed6 <PIC::PIC()>:
c0021ed6:	83 ec 0c             	sub    esp,0xc
c0021ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021edd:	83 ec 08             	sub    esp,0x8
c0021ee0:	68 f4 72 02 c0       	push   0xc00272f4
c0021ee5:	50                   	push   eax
c0021ee6:	e8 8b cb fe ff       	call   c000ea76 <InterruptController::InterruptController(char const*)>
c0021eeb:	83 c4 10             	add    esp,0x10
c0021eee:	ba 20 73 02 c0       	mov    edx,0xc0027320
c0021ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef7:	89 10                	mov    DWORD PTR [eax],edx
c0021ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f03:	0f b6 d0             	movzx  edx,al
c0021f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0a:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f15:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f1b:	0f b6 d0             	movzx  edx,al
c0021f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f22:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f2b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f31:	8d 50 01             	lea    edx,[eax+0x1]
c0021f34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f38:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021f3e:	0f b6 d0             	movzx  edx,al
c0021f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f45:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021f49:	83 e1 3f             	and    ecx,0x3f
c0021f4c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f5a:	0f b6 d0             	movzx  edx,al
c0021f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f61:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f72:	0f b6 d0             	movzx  edx,al
c0021f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f79:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021f88:	8d 50 01             	lea    edx,[eax+0x1]
c0021f8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021f8f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021f95:	0f b6 d0             	movzx  edx,al
c0021f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021fa0:	83 e1 3f             	and    ecx,0x3f
c0021fa3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021fa7:	90                   	nop
c0021fa8:	83 c4 0c             	add    esp,0xc
c0021fab:	c3                   	ret    

c0021fac <PIC::ioWait()>:
c0021fac:	eb 00                	jmp    c0021fae <PIC::ioWait()+0x2>
c0021fae:	eb 00                	jmp    c0021fb0 <PIC::ioWait()+0x4>
c0021fb0:	90                   	nop
c0021fb1:	c3                   	ret    

c0021fb2 <PIC::getIRQReg(int)>:
c0021fb2:	55                   	push   ebp
c0021fb3:	89 e5                	mov    ebp,esp
c0021fb5:	83 ec 10             	sub    esp,0x10
c0021fb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fbb:	0f b6 c0             	movzx  eax,al
c0021fbe:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021fc4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021fc7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021fca:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021fce:	ee                   	out    dx,al
c0021fcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021fd2:	0f b6 c0             	movzx  eax,al
c0021fd5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021fdb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021fde:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021fe1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021fe5:	ee                   	out    dx,al
c0021fe6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021fec:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021ff0:	89 c2                	mov    edx,eax
c0021ff2:	ec                   	in     al,dx
c0021ff3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021ff6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021ff9:	0f b6 c0             	movzx  eax,al
c0021ffc:	c1 e0 08             	shl    eax,0x8
c0021fff:	89 c1                	mov    ecx,eax
c0022001:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022007:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c002200b:	89 c2                	mov    edx,eax
c002200d:	ec                   	in     al,dx
c002200e:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022011:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022014:	0f b6 c0             	movzx  eax,al
c0022017:	09 c8                	or     eax,ecx
c0022019:	c9                   	leave  
c002201a:	c3                   	ret    
c002201b:	90                   	nop

c002201c <PIC::eoi(unsigned char)>:
c002201c:	55                   	push   ebp
c002201d:	89 e5                	mov    ebp,esp
c002201f:	83 ec 14             	sub    esp,0x14
c0022022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022025:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022028:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002202c:	75 1e                	jne    c002204c <PIC::eoi(unsigned char)+0x30>
c002202e:	6a 0b                	push   0xb
c0022030:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022033:	e8 7a ff ff ff       	call   c0021fb2 <PIC::getIRQReg(int)>
c0022038:	83 c4 08             	add    esp,0x8
c002203b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002203f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022043:	25 80 00 00 00       	and    eax,0x80
c0022048:	85 c0                	test   eax,eax
c002204a:	74 5f                	je     c00220ab <PIC::eoi(unsigned char)+0x8f>
c002204c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0022050:	75 2d                	jne    c002207f <PIC::eoi(unsigned char)+0x63>
c0022052:	6a 0b                	push   0xb
c0022054:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022057:	e8 56 ff ff ff       	call   c0021fb2 <PIC::getIRQReg(int)>
c002205c:	83 c4 08             	add    esp,0x8
c002205f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0022063:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022066:	66 85 c0             	test   ax,ax
c0022069:	78 14                	js     c002207f <PIC::eoi(unsigned char)+0x63>
c002206b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0022071:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0022075:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022078:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002207c:	ee                   	out    dx,al
c002207d:	eb 2d                	jmp    c00220ac <PIC::eoi(unsigned char)+0x90>
c002207f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0022083:	76 12                	jbe    c0022097 <PIC::eoi(unsigned char)+0x7b>
c0022085:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002208b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002208f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022092:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022096:	ee                   	out    dx,al
c0022097:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002209d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00220a1:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00220a4:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00220a8:	ee                   	out    dx,al
c00220a9:	eb 01                	jmp    c00220ac <PIC::eoi(unsigned char)+0x90>
c00220ab:	90                   	nop
c00220ac:	c9                   	leave  
c00220ad:	c3                   	ret    

c00220ae <PIC::remap()>:
c00220ae:	55                   	push   ebp
c00220af:	89 e5                	mov    ebp,esp
c00220b1:	83 ec 48             	sub    esp,0x48
c00220b4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00220bb:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00220c2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00220c8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00220cb:	89 c2                	mov    edx,eax
c00220cd:	ec                   	in     al,dx
c00220ce:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00220d1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00220d4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00220d7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00220dd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00220e0:	89 c2                	mov    edx,eax
c00220e2:	ec                   	in     al,dx
c00220e3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00220e6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00220e9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00220ec:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00220f2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00220f6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00220f9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00220fc:	ee                   	out    dx,al
c00220fd:	83 ec 0c             	sub    esp,0xc
c0022100:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022103:	e8 a4 fe ff ff       	call   c0021fac <PIC::ioWait()>
c0022108:	83 c4 10             	add    esp,0x10
c002210b:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022111:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022115:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022118:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002211b:	ee                   	out    dx,al
c002211c:	83 ec 0c             	sub    esp,0xc
c002211f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022122:	e8 85 fe ff ff       	call   c0021fac <PIC::ioWait()>
c0022127:	83 c4 10             	add    esp,0x10
c002212a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002212d:	0f b6 c0             	movzx  eax,al
c0022130:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022136:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022139:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002213c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002213f:	ee                   	out    dx,al
c0022140:	83 ec 0c             	sub    esp,0xc
c0022143:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022146:	e8 61 fe ff ff       	call   c0021fac <PIC::ioWait()>
c002214b:	83 c4 10             	add    esp,0x10
c002214e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022151:	0f b6 c0             	movzx  eax,al
c0022154:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002215a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002215d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022160:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022163:	ee                   	out    dx,al
c0022164:	83 ec 0c             	sub    esp,0xc
c0022167:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002216a:	e8 3d fe ff ff       	call   c0021fac <PIC::ioWait()>
c002216f:	83 c4 10             	add    esp,0x10
c0022172:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022178:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002217c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002217f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022182:	ee                   	out    dx,al
c0022183:	83 ec 0c             	sub    esp,0xc
c0022186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022189:	e8 1e fe ff ff       	call   c0021fac <PIC::ioWait()>
c002218e:	83 c4 10             	add    esp,0x10
c0022191:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022197:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002219b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002219e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00221a1:	ee                   	out    dx,al
c00221a2:	83 ec 0c             	sub    esp,0xc
c00221a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221a8:	e8 ff fd ff ff       	call   c0021fac <PIC::ioWait()>
c00221ad:	83 c4 10             	add    esp,0x10
c00221b0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00221b6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00221ba:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00221bd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00221c0:	ee                   	out    dx,al
c00221c1:	83 ec 0c             	sub    esp,0xc
c00221c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221c7:	e8 e0 fd ff ff       	call   c0021fac <PIC::ioWait()>
c00221cc:	83 c4 10             	add    esp,0x10
c00221cf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00221d5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00221d9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00221dc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00221df:	ee                   	out    dx,al
c00221e0:	83 ec 0c             	sub    esp,0xc
c00221e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221e6:	e8 c1 fd ff ff       	call   c0021fac <PIC::ioWait()>
c00221eb:	83 c4 10             	add    esp,0x10
c00221ee:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00221f2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00221f8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00221fb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00221fe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022201:	ee                   	out    dx,al
c0022202:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022206:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002220c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002220f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022212:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022215:	ee                   	out    dx,al
c0022216:	90                   	nop
c0022217:	c9                   	leave  
c0022218:	c3                   	ret    
c0022219:	90                   	nop

c002221a <PIC::open(int, int, void*)>:
c002221a:	55                   	push   ebp
c002221b:	89 e5                	mov    ebp,esp
c002221d:	83 ec 18             	sub    esp,0x18
c0022220:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022226:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002222a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002222d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022231:	ee                   	out    dx,al
c0022232:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022238:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002223c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002223f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022243:	ee                   	out    dx,al
c0022244:	83 ec 0c             	sub    esp,0xc
c0022247:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002224a:	e8 5f fe ff ff       	call   c00220ae <PIC::remap()>
c002224f:	83 c4 10             	add    esp,0x10
c0022252:	b8 00 00 00 00       	mov    eax,0x0
c0022257:	c9                   	leave  
c0022258:	c3                   	ret    
c0022259:	66 90                	xchg   ax,ax
c002225b:	90                   	nop

c002225c <APICTimer::close(int, int, void*)>:
c002225c:	b8 00 00 00 00       	mov    eax,0x0
c0022261:	c3                   	ret    
c0022262:	66 90                	xchg   ax,ax

c0022264 <apicTimerHandler(regs*, void*)>:
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002226b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002226d:	b8 10 27 00 00       	mov    eax,0x2710
c0022272:	ba 00 00 00 00       	mov    edx,0x0
c0022277:	f7 f1                	div    ecx
c0022279:	83 ec 0c             	sub    esp,0xc
c002227c:	50                   	push   eax
c002227d:	e8 ff e6 fe ff       	call   c0010981 <timerHandler(unsigned int)>
c0022282:	83 c4 10             	add    esp,0x10
c0022285:	90                   	nop
c0022286:	83 c4 0c             	add    esp,0xc
c0022289:	c3                   	ret    
c002228a:	66 90                	xchg   ax,ax

c002228c <APICTimer::write(int)>:
c002228c:	83 ec 1c             	sub    esp,0x1c
c002228f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022293:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022297:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002229d:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c00222a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00222a8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00222ae:	83 ec 0c             	sub    esp,0xc
c00222b1:	50                   	push   eax
c00222b2:	e8 e1 f4 ff ff       	call   c0021798 <APIC::getBase()>
c00222b7:	83 c4 10             	add    esp,0x10
c00222ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222be:	a1 ac 87 02 c0       	mov    eax,ds:0xc00287ac
c00222c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00222c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222cb:	05 e0 03 00 00       	add    eax,0x3e0
c00222d0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00222d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222da:	05 80 03 00 00       	add    eax,0x380
c00222df:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00222e5:	fb                   	sti    
c00222e6:	66 90                	xchg   ax,ax
c00222e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222ec:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00222f2:	a1 ac 87 02 c0       	mov    eax,ds:0xc00287ac
c00222f7:	39 c2                	cmp    edx,eax
c00222f9:	76 05                	jbe    c0022300 <APICTimer::write(int)+0x74>
c00222fb:	eb eb                	jmp    c00222e8 <APICTimer::write(int)+0x5c>
c00222fd:	8d 76 00             	lea    esi,[esi+0x0]
c0022300:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022304:	05 20 03 00 00       	add    eax,0x320
c0022309:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002230f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022313:	05 90 03 00 00       	add    eax,0x390
c0022318:	8b 00                	mov    eax,DWORD PTR [eax]
c002231a:	f7 d0                	not    eax
c002231c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022320:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022328:	ba 00 00 00 00       	mov    edx,0x0
c002232d:	f7 f1                	div    ecx
c002232f:	89 04 24             	mov    DWORD PTR [esp],eax
c0022332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022336:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002233c:	0d 00 00 02 00       	or     eax,0x20000
c0022341:	89 c2                	mov    edx,eax
c0022343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022347:	05 20 03 00 00       	add    eax,0x320
c002234c:	89 10                	mov    DWORD PTR [eax],edx
c002234e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022352:	05 e0 03 00 00       	add    eax,0x3e0
c0022357:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002235d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022361:	05 80 03 00 00       	add    eax,0x380
c0022366:	89 c2                	mov    edx,eax
c0022368:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002236b:	89 02                	mov    DWORD PTR [edx],eax
c002236d:	90                   	nop
c002236e:	83 c4 1c             	add    esp,0x1c
c0022371:	c3                   	ret    
c0022372:	66 90                	xchg   ax,ax

c0022374 <APICTimer::open(int, int, void*)>:
c0022374:	57                   	push   edi
c0022375:	56                   	push   esi
c0022376:	53                   	push   ebx
c0022377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002237b:	8b 00                	mov    eax,DWORD PTR [eax]
c002237d:	83 c0 24             	add    eax,0x24
c0022380:	8b 00                	mov    eax,DWORD PTR [eax]
c0022382:	83 ec 08             	sub    esp,0x8
c0022385:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002238d:	ff d0                	call   eax
c002238f:	83 c4 10             	add    esp,0x10
c0022392:	a1 88 81 02 c0       	mov    eax,ds:0xc0028188
c0022397:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002239d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00223a3:	83 ec 0c             	sub    esp,0xc
c00223a6:	50                   	push   eax
c00223a7:	e8 ec f3 ff ff       	call   c0021798 <APIC::getBase()>
c00223ac:	83 c4 10             	add    esp,0x10
c00223af:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00223b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223bf:	0f b6 f8             	movzx  edi,al
c00223c2:	89 d0                	mov    eax,edx
c00223c4:	ba 00 00 00 00       	mov    edx,0x0
c00223c9:	89 c1                	mov    ecx,eax
c00223cb:	80 e5 ff             	and    ch,0xff
c00223ce:	89 cb                	mov    ebx,ecx
c00223d0:	0f b6 f2             	movzx  esi,dl
c00223d3:	89 d8                	mov    eax,ebx
c00223d5:	89 f2                	mov    edx,esi
c00223d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223db:	8d 5f 08             	lea    ebx,[edi+0x8]
c00223de:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00223e2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00223e6:	83 e0 00             	and    eax,0x0
c00223e9:	09 d0                	or     eax,edx
c00223eb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00223ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00223f9:	8d 50 01             	lea    edx,[eax+0x1]
c00223fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022400:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022406:	0f b6 d0             	movzx  edx,al
c0022409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240d:	83 c2 08             	add    edx,0x8
c0022410:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022414:	0f b6 c9             	movzx  ecx,cl
c0022417:	81 c9 00 00 01 00    	or     ecx,0x10000
c002241d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022421:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022425:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022429:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002242f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022433:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022437:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002243d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022441:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022447:	83 ec 0c             	sub    esp,0xc
c002244a:	51                   	push   ecx
c002244b:	6a 01                	push   0x1
c002244d:	68 64 22 02 c0       	push   0xc0022264
c0022452:	52                   	push   edx
c0022453:	50                   	push   eax
c0022454:	e8 19 bc fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022459:	83 c4 20             	add    esp,0x20
c002245c:	89 c2                	mov    edx,eax
c002245e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022462:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022468:	b8 00 00 00 00       	mov    eax,0x0
c002246d:	5b                   	pop    ebx
c002246e:	5e                   	pop    esi
c002246f:	5f                   	pop    edi
c0022470:	c3                   	ret    
c0022471:	90                   	nop
c0022472:	66 90                	xchg   ax,ax

c0022474 <APICTimer::APICTimer()>:
c0022474:	83 ec 0c             	sub    esp,0xc
c0022477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002247b:	83 ec 08             	sub    esp,0x8
c002247e:	68 60 73 02 c0       	push   0xc0027360
c0022483:	50                   	push   eax
c0022484:	e8 67 e4 fe ff       	call   c00108f0 <Timer::Timer(char const*)>
c0022489:	83 c4 10             	add    esp,0x10
c002248c:	ba 74 73 02 c0       	mov    edx,0xc0027374
c0022491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022495:	89 10                	mov    DWORD PTR [eax],edx
c0022497:	90                   	nop
c0022498:	83 c4 0c             	add    esp,0xc
c002249b:	c3                   	ret    

c002249c <PIT::write(int)>:
c002249c:	83 ec 10             	sub    esp,0x10
c002249f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00224a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00224a7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00224b1:	a3 c4 a0 02 c0       	mov    ds:0xc002a0c4,eax
c00224b6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00224bb:	99                   	cdq    
c00224bc:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00224c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00224c4:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00224cb:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00224d0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00224d4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00224d9:	ee                   	out    dx,al
c00224da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224de:	0f b6 c0             	movzx  eax,al
c00224e1:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00224e8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00224ec:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00224f0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00224f5:	ee                   	out    dx,al
c00224f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224fa:	c1 f8 08             	sar    eax,0x8
c00224fd:	0f b6 c0             	movzx  eax,al
c0022500:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022507:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002250b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002250f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022514:	ee                   	out    dx,al
c0022515:	90                   	nop
c0022516:	83 c4 10             	add    esp,0x10
c0022519:	c3                   	ret    
c002251a:	66 90                	xchg   ax,ax

c002251c <pitHandler(regs*, void*)>:
c002251c:	83 ec 0c             	sub    esp,0xc
c002251f:	8b 0d c4 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a0c4
c0022525:	b8 a0 86 01 00       	mov    eax,0x186a0
c002252a:	99                   	cdq    
c002252b:	f7 f9                	idiv   ecx
c002252d:	83 ec 0c             	sub    esp,0xc
c0022530:	50                   	push   eax
c0022531:	e8 4b e4 fe ff       	call   c0010981 <timerHandler(unsigned int)>
c0022536:	83 c4 10             	add    esp,0x10
c0022539:	90                   	nop
c002253a:	83 c4 0c             	add    esp,0xc
c002253d:	c3                   	ret    
c002253e:	66 90                	xchg   ax,ax

c0022540 <PIT::open(int, int, void*)>:
c0022540:	83 ec 0c             	sub    esp,0xc
c0022543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022547:	8b 00                	mov    eax,DWORD PTR [eax]
c0022549:	83 c0 24             	add    eax,0x24
c002254c:	8b 00                	mov    eax,DWORD PTR [eax]
c002254e:	83 ec 08             	sub    esp,0x8
c0022551:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022559:	ff d0                	call   eax
c002255b:	83 c4 10             	add    esp,0x10
c002255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022562:	83 ec 0c             	sub    esp,0xc
c0022565:	6a 00                	push   0x0
c0022567:	6a 01                	push   0x1
c0022569:	68 1c 25 02 c0       	push   0xc002251c
c002256e:	6a 00                	push   0x0
c0022570:	50                   	push   eax
c0022571:	e8 fc ba fe ff       	call   c000e072 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022576:	83 c4 20             	add    esp,0x20
c0022579:	89 c2                	mov    edx,eax
c002257b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002257f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022585:	b8 00 00 00 00       	mov    eax,0x0
c002258a:	83 c4 0c             	add    esp,0xc
c002258d:	c3                   	ret    
c002258e:	66 90                	xchg   ax,ax

c0022590 <PIT::close(int, int, void*)>:
c0022590:	83 ec 0c             	sub    esp,0xc
c0022593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022597:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00225a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225a5:	6a 01                	push   0x1
c00225a7:	68 1c 25 02 c0       	push   0xc002251c
c00225ac:	6a 00                	push   0x0
c00225ae:	50                   	push   eax
c00225af:	e8 08 bb fe ff       	call   c000e0bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00225b4:	83 c4 10             	add    esp,0x10
c00225b7:	b8 00 00 00 00       	mov    eax,0x0
c00225bc:	83 c4 0c             	add    esp,0xc
c00225bf:	c3                   	ret    

c00225c0 <PIT::PIT()>:
c00225c0:	83 ec 0c             	sub    esp,0xc
c00225c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c7:	83 ec 08             	sub    esp,0x8
c00225ca:	68 9c 73 02 c0       	push   0xc002739c
c00225cf:	50                   	push   eax
c00225d0:	e8 1b e3 fe ff       	call   c00108f0 <Timer::Timer(char const*)>
c00225d5:	83 c4 10             	add    esp,0x10
c00225d8:	ba c4 73 02 c0       	mov    edx,0xc00273c4
c00225dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e1:	89 10                	mov    DWORD PTR [eax],edx
c00225e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225ed:	0f b6 d0             	movzx  edx,al
c00225f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225f4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00225fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022605:	0f b6 d0             	movzx  edx,al
c0022608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002260c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022615:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002261b:	8d 50 01             	lea    edx,[eax+0x1]
c002261e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022622:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022628:	0f b6 d0             	movzx  edx,al
c002262b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002262f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022633:	83 e1 3f             	and    ecx,0x3f
c0022636:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002263a:	90                   	nop
c002263b:	83 c4 0c             	add    esp,0xc
c002263e:	c3                   	ret    
c002263f:	90                   	nop

c0022640 <avxDetect>:
c0022640:	b8 00 00 00 00       	mov    eax,0x0
c0022645:	c3                   	ret    

c0022646 <avxSave>:
c0022646:	c3                   	ret    

c0022647 <avxLoad>:
c0022647:	c3                   	ret    

c0022648 <avxInit>:
c0022648:	c3                   	ret    

c0022649 <avxClose>:
c0022649:	c3                   	ret    

c002264a <wouldSheSayYes>:
c002264a:	c3                   	ret    
c002264b:	49                   	dec    ecx
c002264c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022650:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022654:	75 20                	jne    c0022676 <sseDetect.noSSE+0x1>
c0022656:	4e                   	dec    esi
c0022657:	79 61                	jns    c00226ba <x87Detect+0x14>
c0022659:	68 2e 2e 2e 00       	push   0x2e2e2e
c002265e:	66 90                	xchg   ax,ax

c0022660 <absolutelyNoChanceInHell>:
c0022660:	b8 01 00 00 00       	mov    eax,0x1
c0022665:	0f a2                	cpuid  
c0022667:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002266d:	74 06                	je     c0022675 <sseDetect.noSSE>
c002266f:	b8 01 00 00 00       	mov    eax,0x1
c0022674:	c3                   	ret    

c0022675 <sseDetect.noSSE>:
c0022675:	31 c0                	xor    eax,eax
c0022677:	c3                   	ret    

c0022678 <sseSave>:
c0022678:	0f ae 44 24 04       	fxsave [esp+0x4]
c002267d:	c3                   	ret    

c002267e <sseLoad>:
c002267e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022683:	c3                   	ret    

c0022684 <sseInit>:
c0022684:	e8 49 00 00 00       	call   c00226d2 <x87Init>
c0022689:	0f 20 e0             	mov    eax,cr4
c002268c:	66 0d 00 06          	or     ax,0x600
c0022690:	0f 22 e0             	mov    cr4,eax
c0022693:	c3                   	ret    

c0022694 <sseClose>:
c0022694:	c3                   	ret    
c0022695:	66 90                	xchg   ax,ax
c0022697:	66 90                	xchg   ax,ax
c0022699:	66 90                	xchg   ax,ax
c002269b:	66 90                	xchg   ax,ax
c002269d:	66 90                	xchg   ax,ax
c002269f:	90                   	nop

c00226a0 <value_37F>:
c00226a0:	7f 03                	jg     c00226a5 <value_37A+0x1>

c00226a2 <value_37E>:
c00226a2:	7e 03                	jle    c00226a7 <x87Detect+0x1>

c00226a4 <value_37A>:
c00226a4:	7a 03                	jp     c00226a9 <x87Detect+0x3>

c00226a6 <x87Detect>:
c00226a6:	b8 01 00 00 00       	mov    eax,0x1
c00226ab:	0f a2                	cpuid  
c00226ad:	f7 c2 01 00 00 00    	test   edx,0x1
c00226b3:	74 06                	je     c00226bb <x87Detect.nox87>
c00226b5:	b8 01 00 00 00       	mov    eax,0x1
c00226ba:	c3                   	ret    

c00226bb <x87Detect.nox87>:
c00226bb:	b8 00 00 00 00       	mov    eax,0x0
c00226c0:	c3                   	ret    

c00226c1 <x87Save>:
c00226c1:	55                   	push   ebp
c00226c2:	89 e5                	mov    ebp,esp
c00226c4:	9b dd 75 08          	fsave  [ebp+0x8]
c00226c8:	c9                   	leave  
c00226c9:	c3                   	ret    

c00226ca <x87Load>:
c00226ca:	55                   	push   ebp
c00226cb:	89 e5                	mov    ebp,esp
c00226cd:	dd 65 08             	frstor [ebp+0x8]
c00226d0:	c9                   	leave  
c00226d1:	c3                   	ret    

c00226d2 <x87Init>:
c00226d2:	9b db e3             	finit  
c00226d5:	0f 20 c0             	mov    eax,cr0
c00226d8:	66 25 fb ff          	and    ax,0xfffb
c00226dc:	66 0d 22 00          	or     ax,0x22
c00226e0:	0f 22 c0             	mov    cr0,eax
c00226e3:	0f 06                	clts   
c00226e5:	d9 2d a4 26 02 c0    	fldcw  WORD PTR ds:0xc00226a4
c00226eb:	c3                   	ret    

c00226ec <x87Close>:
c00226ec:	c3                   	ret    
c00226ed:	66 90                	xchg   ax,ax
c00226ef:	90                   	nop

c00226f0 <__do_global_ctors_aux>:
c00226f0:	a1 8c 38 02 c0       	mov    eax,ds:0xc002388c
c00226f5:	83 f8 ff             	cmp    eax,0xffffffff
c00226f8:	74 1a                	je     c0022714 <__do_global_ctors_aux+0x24>
c00226fa:	55                   	push   ebp
c00226fb:	89 e5                	mov    ebp,esp
c00226fd:	53                   	push   ebx
c00226fe:	52                   	push   edx
c00226ff:	bb 8c 38 02 c0       	mov    ebx,0xc002388c
c0022704:	ff d0                	call   eax
c0022706:	83 eb 04             	sub    ebx,0x4
c0022709:	8b 03                	mov    eax,DWORD PTR [ebx]
c002270b:	83 f8 ff             	cmp    eax,0xffffffff
c002270e:	75 f4                	jne    c0022704 <__do_global_ctors_aux+0x14>
c0022710:	58                   	pop    eax
c0022711:	5b                   	pop    ebx
c0022712:	5d                   	pop    ebp
c0022713:	c3                   	ret    
c0022714:	c3                   	ret    
c0022715:	66 90                	xchg   ax,ax
c0022717:	90                   	nop

c0022718 <__divdi3>:
c0022718:	55                   	push   ebp
c0022719:	57                   	push   edi
c002271a:	56                   	push   esi
c002271b:	53                   	push   ebx
c002271c:	83 ec 1c             	sub    esp,0x1c
c002271f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022723:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022727:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002272a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002272e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022732:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022736:	85 db                	test   ebx,ebx
c0022738:	0f 88 8e 00 00 00    	js     c00227cc <__divdi3+0xb4>
c002273e:	89 dd                	mov    ebp,ebx
c0022740:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022748:	89 d3                	mov    ebx,edx
c002274a:	85 d2                	test   edx,edx
c002274c:	79 0d                	jns    c002275b <__divdi3+0x43>
c002274e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022752:	f7 d8                	neg    eax
c0022754:	83 d2 00             	adc    edx,0x0
c0022757:	f7 da                	neg    edx
c0022759:	89 d3                	mov    ebx,edx
c002275b:	89 c7                	mov    edi,eax
c002275d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022760:	85 db                	test   ebx,ebx
c0022762:	75 48                	jne    c00227ac <__divdi3+0x94>
c0022764:	39 ef                	cmp    edi,ebp
c0022766:	76 24                	jbe    c002278c <__divdi3+0x74>
c0022768:	89 ea                	mov    edx,ebp
c002276a:	f7 f7                	div    edi
c002276c:	89 c1                	mov    ecx,eax
c002276e:	31 f6                	xor    esi,esi
c0022770:	89 c8                	mov    eax,ecx
c0022772:	89 f2                	mov    edx,esi
c0022774:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022778:	85 c9                	test   ecx,ecx
c002277a:	74 07                	je     c0022783 <__divdi3+0x6b>
c002277c:	f7 d8                	neg    eax
c002277e:	83 d2 00             	adc    edx,0x0
c0022781:	f7 da                	neg    edx
c0022783:	83 c4 1c             	add    esp,0x1c
c0022786:	5b                   	pop    ebx
c0022787:	5e                   	pop    esi
c0022788:	5f                   	pop    edi
c0022789:	5d                   	pop    ebp
c002278a:	c3                   	ret    
c002278b:	90                   	nop
c002278c:	85 ff                	test   edi,edi
c002278e:	75 0b                	jne    c002279b <__divdi3+0x83>
c0022790:	b8 01 00 00 00       	mov    eax,0x1
c0022795:	31 d2                	xor    edx,edx
c0022797:	f7 f3                	div    ebx
c0022799:	89 c7                	mov    edi,eax
c002279b:	31 d2                	xor    edx,edx
c002279d:	89 e8                	mov    eax,ebp
c002279f:	f7 f7                	div    edi
c00227a1:	89 c6                	mov    esi,eax
c00227a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00227a6:	f7 f7                	div    edi
c00227a8:	89 c1                	mov    ecx,eax
c00227aa:	eb c4                	jmp    c0022770 <__divdi3+0x58>
c00227ac:	39 eb                	cmp    ebx,ebp
c00227ae:	77 3c                	ja     c00227ec <__divdi3+0xd4>
c00227b0:	0f bd f3             	bsr    esi,ebx
c00227b3:	83 f6 1f             	xor    esi,0x1f
c00227b6:	75 40                	jne    c00227f8 <__divdi3+0xe0>
c00227b8:	39 eb                	cmp    ebx,ebp
c00227ba:	72 09                	jb     c00227c5 <__divdi3+0xad>
c00227bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00227bf:	0f 87 97 00 00 00    	ja     c002285c <__divdi3+0x144>
c00227c5:	b9 01 00 00 00       	mov    ecx,0x1
c00227ca:	eb a4                	jmp    c0022770 <__divdi3+0x58>
c00227cc:	f7 d9                	neg    ecx
c00227ce:	83 d3 00             	adc    ebx,0x0
c00227d1:	f7 db                	neg    ebx
c00227d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00227d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00227da:	89 dd                	mov    ebp,ebx
c00227dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00227e4:	e9 5f ff ff ff       	jmp    c0022748 <__divdi3+0x30>
c00227e9:	8d 76 00             	lea    esi,[esi+0x0]
c00227ec:	31 f6                	xor    esi,esi
c00227ee:	31 c9                	xor    ecx,ecx
c00227f0:	e9 7b ff ff ff       	jmp    c0022770 <__divdi3+0x58>
c00227f5:	8d 76 00             	lea    esi,[esi+0x0]
c00227f8:	b8 20 00 00 00       	mov    eax,0x20
c00227fd:	29 f0                	sub    eax,esi
c00227ff:	89 f1                	mov    ecx,esi
c0022801:	d3 e3                	shl    ebx,cl
c0022803:	89 fa                	mov    edx,edi
c0022805:	88 c1                	mov    cl,al
c0022807:	d3 ea                	shr    edx,cl
c0022809:	09 da                	or     edx,ebx
c002280b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002280f:	89 f1                	mov    ecx,esi
c0022811:	d3 e7                	shl    edi,cl
c0022813:	89 eb                	mov    ebx,ebp
c0022815:	88 c1                	mov    cl,al
c0022817:	d3 eb                	shr    ebx,cl
c0022819:	89 f1                	mov    ecx,esi
c002281b:	d3 e5                	shl    ebp,cl
c002281d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022820:	88 c1                	mov    cl,al
c0022822:	d3 ea                	shr    edx,cl
c0022824:	09 d5                	or     ebp,edx
c0022826:	89 e8                	mov    eax,ebp
c0022828:	89 da                	mov    edx,ebx
c002282a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002282e:	89 d3                	mov    ebx,edx
c0022830:	89 c5                	mov    ebp,eax
c0022832:	f7 e7                	mul    edi
c0022834:	39 d3                	cmp    ebx,edx
c0022836:	72 18                	jb     c0022850 <__divdi3+0x138>
c0022838:	74 0a                	je     c0022844 <__divdi3+0x12c>
c002283a:	89 e9                	mov    ecx,ebp
c002283c:	31 f6                	xor    esi,esi
c002283e:	e9 2d ff ff ff       	jmp    c0022770 <__divdi3+0x58>
c0022843:	90                   	nop
c0022844:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022847:	89 f1                	mov    ecx,esi
c0022849:	d3 e7                	shl    edi,cl
c002284b:	39 c7                	cmp    edi,eax
c002284d:	73 eb                	jae    c002283a <__divdi3+0x122>
c002284f:	90                   	nop
c0022850:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022853:	31 f6                	xor    esi,esi
c0022855:	e9 16 ff ff ff       	jmp    c0022770 <__divdi3+0x58>
c002285a:	66 90                	xchg   ax,ax
c002285c:	31 c9                	xor    ecx,ecx
c002285e:	e9 0d ff ff ff       	jmp    c0022770 <__divdi3+0x58>
c0022863:	90                   	nop

c0022864 <__moddi3>:
c0022864:	55                   	push   ebp
c0022865:	57                   	push   edi
c0022866:	56                   	push   esi
c0022867:	53                   	push   ebx
c0022868:	83 ec 2c             	sub    esp,0x2c
c002286b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002286f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022873:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022877:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002287b:	85 db                	test   ebx,ebx
c002287d:	0f 88 85 00 00 00    	js     c0022908 <__moddi3+0xa4>
c0022883:	89 de                	mov    esi,ebx
c0022885:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002288d:	89 d7                	mov    edi,edx
c002288f:	85 d2                	test   edx,edx
c0022891:	79 09                	jns    c002289c <__moddi3+0x38>
c0022893:	f7 d8                	neg    eax
c0022895:	83 d2 00             	adc    edx,0x0
c0022898:	f7 da                	neg    edx
c002289a:	89 d7                	mov    edi,edx
c002289c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228a0:	89 cd                	mov    ebp,ecx
c00228a2:	85 ff                	test   edi,edi
c00228a4:	75 52                	jne    c00228f8 <__moddi3+0x94>
c00228a6:	89 c3                	mov    ebx,eax
c00228a8:	39 f0                	cmp    eax,esi
c00228aa:	76 24                	jbe    c00228d0 <__moddi3+0x6c>
c00228ac:	89 c8                	mov    eax,ecx
c00228ae:	89 f2                	mov    edx,esi
c00228b0:	f7 f3                	div    ebx
c00228b2:	89 d6                	mov    esi,edx
c00228b4:	89 f0                	mov    eax,esi
c00228b6:	31 d2                	xor    edx,edx
c00228b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228bc:	85 c9                	test   ecx,ecx
c00228be:	74 07                	je     c00228c7 <__moddi3+0x63>
c00228c0:	f7 d8                	neg    eax
c00228c2:	83 d2 00             	adc    edx,0x0
c00228c5:	f7 da                	neg    edx
c00228c7:	83 c4 2c             	add    esp,0x2c
c00228ca:	5b                   	pop    ebx
c00228cb:	5e                   	pop    esi
c00228cc:	5f                   	pop    edi
c00228cd:	5d                   	pop    ebp
c00228ce:	c3                   	ret    
c00228cf:	90                   	nop
c00228d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00228d4:	85 db                	test   ebx,ebx
c00228d6:	75 0d                	jne    c00228e5 <__moddi3+0x81>
c00228d8:	b8 01 00 00 00       	mov    eax,0x1
c00228dd:	31 d2                	xor    edx,edx
c00228df:	f7 f7                	div    edi
c00228e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228e5:	89 f0                	mov    eax,esi
c00228e7:	31 d2                	xor    edx,edx
c00228e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00228ed:	f7 f7                	div    edi
c00228ef:	89 e8                	mov    eax,ebp
c00228f1:	f7 f7                	div    edi
c00228f3:	89 d6                	mov    esi,edx
c00228f5:	eb bd                	jmp    c00228b4 <__moddi3+0x50>
c00228f7:	90                   	nop
c00228f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00228fc:	39 f7                	cmp    edi,esi
c00228fe:	76 20                	jbe    c0022920 <__moddi3+0xbc>
c0022900:	89 c8                	mov    eax,ecx
c0022902:	89 f2                	mov    edx,esi
c0022904:	eb b2                	jmp    c00228b8 <__moddi3+0x54>
c0022906:	66 90                	xchg   ax,ax
c0022908:	f7 d9                	neg    ecx
c002290a:	83 d3 00             	adc    ebx,0x0
c002290d:	f7 db                	neg    ebx
c002290f:	89 de                	mov    esi,ebx
c0022911:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022919:	e9 6f ff ff ff       	jmp    c002288d <__moddi3+0x29>
c002291e:	66 90                	xchg   ax,ax
c0022920:	0f bd c7             	bsr    eax,edi
c0022923:	83 f0 1f             	xor    eax,0x1f
c0022926:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002292a:	75 24                	jne    c0022950 <__moddi3+0xec>
c002292c:	39 f7                	cmp    edi,esi
c002292e:	72 06                	jb     c0022936 <__moddi3+0xd2>
c0022930:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022934:	77 0c                	ja     c0022942 <__moddi3+0xde>
c0022936:	89 e9                	mov    ecx,ebp
c0022938:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002293c:	19 fe                	sbb    esi,edi
c002293e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022946:	89 f2                	mov    edx,esi
c0022948:	e9 6b ff ff ff       	jmp    c00228b8 <__moddi3+0x54>
c002294d:	8d 76 00             	lea    esi,[esi+0x0]
c0022950:	b8 20 00 00 00       	mov    eax,0x20
c0022955:	89 c2                	mov    edx,eax
c0022957:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002295b:	29 da                	sub    edx,ebx
c002295d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022961:	88 d9                	mov    cl,bl
c0022963:	d3 e7                	shl    edi,cl
c0022965:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022969:	88 d1                	mov    cl,dl
c002296b:	d3 e8                	shr    eax,cl
c002296d:	09 c7                	or     edi,eax
c002296f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022973:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022977:	89 d8                	mov    eax,ebx
c0022979:	88 d9                	mov    cl,bl
c002297b:	d3 e7                	shl    edi,cl
c002297d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022981:	89 f3                	mov    ebx,esi
c0022983:	88 d1                	mov    cl,dl
c0022985:	d3 eb                	shr    ebx,cl
c0022987:	89 c7                	mov    edi,eax
c0022989:	88 c1                	mov    cl,al
c002298b:	d3 e6                	shl    esi,cl
c002298d:	89 e8                	mov    eax,ebp
c002298f:	88 d1                	mov    cl,dl
c0022991:	d3 e8                	shr    eax,cl
c0022993:	09 f0                	or     eax,esi
c0022995:	89 f9                	mov    ecx,edi
c0022997:	d3 e5                	shl    ebp,cl
c0022999:	89 da                	mov    edx,ebx
c002299b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002299f:	89 d3                	mov    ebx,edx
c00229a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00229a5:	89 c6                	mov    esi,eax
c00229a7:	89 d1                	mov    ecx,edx
c00229a9:	39 d3                	cmp    ebx,edx
c00229ab:	72 27                	jb     c00229d4 <__moddi3+0x170>
c00229ad:	74 21                	je     c00229d0 <__moddi3+0x16c>
c00229af:	29 f5                	sub    ebp,esi
c00229b1:	19 cb                	sbb    ebx,ecx
c00229b3:	89 de                	mov    esi,ebx
c00229b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00229b9:	d3 e6                	shl    esi,cl
c00229bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00229bf:	89 f9                	mov    ecx,edi
c00229c1:	d3 ed                	shr    ebp,cl
c00229c3:	09 ee                	or     esi,ebp
c00229c5:	89 f0                	mov    eax,esi
c00229c7:	d3 eb                	shr    ebx,cl
c00229c9:	89 da                	mov    edx,ebx
c00229cb:	e9 e8 fe ff ff       	jmp    c00228b8 <__moddi3+0x54>
c00229d0:	39 c5                	cmp    ebp,eax
c00229d2:	73 db                	jae    c00229af <__moddi3+0x14b>
c00229d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00229d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00229dc:	89 d1                	mov    ecx,edx
c00229de:	89 c6                	mov    esi,eax
c00229e0:	eb cd                	jmp    c00229af <__moddi3+0x14b>
c00229e2:	66 90                	xchg   ax,ax

c00229e4 <__udivdi3>:
c00229e4:	55                   	push   ebp
c00229e5:	57                   	push   edi
c00229e6:	56                   	push   esi
c00229e7:	53                   	push   ebx
c00229e8:	83 ec 1c             	sub    esp,0x1c
c00229eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00229ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00229f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00229f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00229fb:	85 d2                	test   edx,edx
c00229fd:	75 41                	jne    c0022a40 <__udivdi3+0x5c>
c00229ff:	39 f7                	cmp    edi,esi
c0022a01:	76 15                	jbe    c0022a18 <__udivdi3+0x34>
c0022a03:	89 e8                	mov    eax,ebp
c0022a05:	89 f2                	mov    edx,esi
c0022a07:	f7 f7                	div    edi
c0022a09:	31 db                	xor    ebx,ebx
c0022a0b:	89 da                	mov    edx,ebx
c0022a0d:	83 c4 1c             	add    esp,0x1c
c0022a10:	5b                   	pop    ebx
c0022a11:	5e                   	pop    esi
c0022a12:	5f                   	pop    edi
c0022a13:	5d                   	pop    ebp
c0022a14:	c3                   	ret    
c0022a15:	8d 76 00             	lea    esi,[esi+0x0]
c0022a18:	89 f9                	mov    ecx,edi
c0022a1a:	85 ff                	test   edi,edi
c0022a1c:	75 0b                	jne    c0022a29 <__udivdi3+0x45>
c0022a1e:	b8 01 00 00 00       	mov    eax,0x1
c0022a23:	31 d2                	xor    edx,edx
c0022a25:	f7 f7                	div    edi
c0022a27:	89 c1                	mov    ecx,eax
c0022a29:	31 d2                	xor    edx,edx
c0022a2b:	89 f0                	mov    eax,esi
c0022a2d:	f7 f1                	div    ecx
c0022a2f:	89 c3                	mov    ebx,eax
c0022a31:	89 e8                	mov    eax,ebp
c0022a33:	f7 f1                	div    ecx
c0022a35:	89 da                	mov    edx,ebx
c0022a37:	83 c4 1c             	add    esp,0x1c
c0022a3a:	5b                   	pop    ebx
c0022a3b:	5e                   	pop    esi
c0022a3c:	5f                   	pop    edi
c0022a3d:	5d                   	pop    ebp
c0022a3e:	c3                   	ret    
c0022a3f:	90                   	nop
c0022a40:	39 f2                	cmp    edx,esi
c0022a42:	77 1c                	ja     c0022a60 <__udivdi3+0x7c>
c0022a44:	0f bd da             	bsr    ebx,edx
c0022a47:	83 f3 1f             	xor    ebx,0x1f
c0022a4a:	75 24                	jne    c0022a70 <__udivdi3+0x8c>
c0022a4c:	39 f2                	cmp    edx,esi
c0022a4e:	72 08                	jb     c0022a58 <__udivdi3+0x74>
c0022a50:	39 ef                	cmp    edi,ebp
c0022a52:	0f 87 84 00 00 00    	ja     c0022adc <__udivdi3+0xf8>
c0022a58:	b8 01 00 00 00       	mov    eax,0x1
c0022a5d:	eb ac                	jmp    c0022a0b <__udivdi3+0x27>
c0022a5f:	90                   	nop
c0022a60:	31 db                	xor    ebx,ebx
c0022a62:	31 c0                	xor    eax,eax
c0022a64:	89 da                	mov    edx,ebx
c0022a66:	83 c4 1c             	add    esp,0x1c
c0022a69:	5b                   	pop    ebx
c0022a6a:	5e                   	pop    esi
c0022a6b:	5f                   	pop    edi
c0022a6c:	5d                   	pop    ebp
c0022a6d:	c3                   	ret    
c0022a6e:	66 90                	xchg   ax,ax
c0022a70:	b8 20 00 00 00       	mov    eax,0x20
c0022a75:	29 d8                	sub    eax,ebx
c0022a77:	88 d9                	mov    cl,bl
c0022a79:	d3 e2                	shl    edx,cl
c0022a7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022a7f:	89 fa                	mov    edx,edi
c0022a81:	88 c1                	mov    cl,al
c0022a83:	d3 ea                	shr    edx,cl
c0022a85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022a89:	09 d1                	or     ecx,edx
c0022a8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022a8f:	88 d9                	mov    cl,bl
c0022a91:	d3 e7                	shl    edi,cl
c0022a93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022a97:	89 f7                	mov    edi,esi
c0022a99:	88 c1                	mov    cl,al
c0022a9b:	d3 ef                	shr    edi,cl
c0022a9d:	88 d9                	mov    cl,bl
c0022a9f:	d3 e6                	shl    esi,cl
c0022aa1:	89 ea                	mov    edx,ebp
c0022aa3:	88 c1                	mov    cl,al
c0022aa5:	d3 ea                	shr    edx,cl
c0022aa7:	09 d6                	or     esi,edx
c0022aa9:	89 f0                	mov    eax,esi
c0022aab:	89 fa                	mov    edx,edi
c0022aad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022ab1:	89 d7                	mov    edi,edx
c0022ab3:	89 c6                	mov    esi,eax
c0022ab5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022ab9:	39 d7                	cmp    edi,edx
c0022abb:	72 13                	jb     c0022ad0 <__udivdi3+0xec>
c0022abd:	74 09                	je     c0022ac8 <__udivdi3+0xe4>
c0022abf:	89 f0                	mov    eax,esi
c0022ac1:	31 db                	xor    ebx,ebx
c0022ac3:	e9 43 ff ff ff       	jmp    c0022a0b <__udivdi3+0x27>
c0022ac8:	88 d9                	mov    cl,bl
c0022aca:	d3 e5                	shl    ebp,cl
c0022acc:	39 c5                	cmp    ebp,eax
c0022ace:	73 ef                	jae    c0022abf <__udivdi3+0xdb>
c0022ad0:	8d 46 ff             	lea    eax,[esi-0x1]
c0022ad3:	31 db                	xor    ebx,ebx
c0022ad5:	e9 31 ff ff ff       	jmp    c0022a0b <__udivdi3+0x27>
c0022ada:	66 90                	xchg   ax,ax
c0022adc:	31 c0                	xor    eax,eax
c0022ade:	e9 28 ff ff ff       	jmp    c0022a0b <__udivdi3+0x27>
c0022ae3:	90                   	nop

c0022ae4 <__umoddi3>:
c0022ae4:	55                   	push   ebp
c0022ae5:	57                   	push   edi
c0022ae6:	56                   	push   esi
c0022ae7:	53                   	push   ebx
c0022ae8:	83 ec 1c             	sub    esp,0x1c
c0022aeb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022aef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022af3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022af7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022afb:	89 da                	mov    edx,ebx
c0022afd:	85 c0                	test   eax,eax
c0022aff:	75 37                	jne    c0022b38 <__umoddi3+0x54>
c0022b01:	39 df                	cmp    edi,ebx
c0022b03:	76 13                	jbe    c0022b18 <__umoddi3+0x34>
c0022b05:	89 f0                	mov    eax,esi
c0022b07:	f7 f7                	div    edi
c0022b09:	89 d0                	mov    eax,edx
c0022b0b:	31 d2                	xor    edx,edx
c0022b0d:	83 c4 1c             	add    esp,0x1c
c0022b10:	5b                   	pop    ebx
c0022b11:	5e                   	pop    esi
c0022b12:	5f                   	pop    edi
c0022b13:	5d                   	pop    ebp
c0022b14:	c3                   	ret    
c0022b15:	8d 76 00             	lea    esi,[esi+0x0]
c0022b18:	89 fd                	mov    ebp,edi
c0022b1a:	85 ff                	test   edi,edi
c0022b1c:	75 0b                	jne    c0022b29 <__umoddi3+0x45>
c0022b1e:	b8 01 00 00 00       	mov    eax,0x1
c0022b23:	31 d2                	xor    edx,edx
c0022b25:	f7 f7                	div    edi
c0022b27:	89 c5                	mov    ebp,eax
c0022b29:	89 d8                	mov    eax,ebx
c0022b2b:	31 d2                	xor    edx,edx
c0022b2d:	f7 f5                	div    ebp
c0022b2f:	89 f0                	mov    eax,esi
c0022b31:	f7 f5                	div    ebp
c0022b33:	89 d0                	mov    eax,edx
c0022b35:	eb d4                	jmp    c0022b0b <__umoddi3+0x27>
c0022b37:	90                   	nop
c0022b38:	89 f1                	mov    ecx,esi
c0022b3a:	39 d8                	cmp    eax,ebx
c0022b3c:	76 0a                	jbe    c0022b48 <__umoddi3+0x64>
c0022b3e:	89 f0                	mov    eax,esi
c0022b40:	83 c4 1c             	add    esp,0x1c
c0022b43:	5b                   	pop    ebx
c0022b44:	5e                   	pop    esi
c0022b45:	5f                   	pop    edi
c0022b46:	5d                   	pop    ebp
c0022b47:	c3                   	ret    
c0022b48:	0f bd e8             	bsr    ebp,eax
c0022b4b:	83 f5 1f             	xor    ebp,0x1f
c0022b4e:	75 1c                	jne    c0022b6c <__umoddi3+0x88>
c0022b50:	39 d8                	cmp    eax,ebx
c0022b52:	72 04                	jb     c0022b58 <__umoddi3+0x74>
c0022b54:	39 f7                	cmp    edi,esi
c0022b56:	77 08                	ja     c0022b60 <__umoddi3+0x7c>
c0022b58:	89 da                	mov    edx,ebx
c0022b5a:	29 fe                	sub    esi,edi
c0022b5c:	19 c2                	sbb    edx,eax
c0022b5e:	89 f1                	mov    ecx,esi
c0022b60:	89 c8                	mov    eax,ecx
c0022b62:	83 c4 1c             	add    esp,0x1c
c0022b65:	5b                   	pop    ebx
c0022b66:	5e                   	pop    esi
c0022b67:	5f                   	pop    edi
c0022b68:	5d                   	pop    ebp
c0022b69:	c3                   	ret    
c0022b6a:	66 90                	xchg   ax,ax
c0022b6c:	ba 20 00 00 00       	mov    edx,0x20
c0022b71:	29 ea                	sub    edx,ebp
c0022b73:	89 e9                	mov    ecx,ebp
c0022b75:	d3 e0                	shl    eax,cl
c0022b77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b7b:	89 f8                	mov    eax,edi
c0022b7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022b81:	88 d1                	mov    cl,dl
c0022b83:	d3 e8                	shr    eax,cl
c0022b85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022b89:	09 c1                	or     ecx,eax
c0022b8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022b8f:	89 e9                	mov    ecx,ebp
c0022b91:	d3 e7                	shl    edi,cl
c0022b93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022b97:	89 d8                	mov    eax,ebx
c0022b99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b9d:	88 d1                	mov    cl,dl
c0022b9f:	d3 e8                	shr    eax,cl
c0022ba1:	89 c7                	mov    edi,eax
c0022ba3:	89 e9                	mov    ecx,ebp
c0022ba5:	d3 e3                	shl    ebx,cl
c0022ba7:	89 f0                	mov    eax,esi
c0022ba9:	88 d1                	mov    cl,dl
c0022bab:	d3 e8                	shr    eax,cl
c0022bad:	09 d8                	or     eax,ebx
c0022baf:	89 e9                	mov    ecx,ebp
c0022bb1:	d3 e6                	shl    esi,cl
c0022bb3:	89 f3                	mov    ebx,esi
c0022bb5:	89 fa                	mov    edx,edi
c0022bb7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022bbb:	89 d1                	mov    ecx,edx
c0022bbd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022bc1:	89 c6                	mov    esi,eax
c0022bc3:	89 d7                	mov    edi,edx
c0022bc5:	39 d1                	cmp    ecx,edx
c0022bc7:	72 27                	jb     c0022bf0 <__umoddi3+0x10c>
c0022bc9:	74 21                	je     c0022bec <__umoddi3+0x108>
c0022bcb:	89 ca                	mov    edx,ecx
c0022bcd:	29 f3                	sub    ebx,esi
c0022bcf:	19 fa                	sbb    edx,edi
c0022bd1:	89 d0                	mov    eax,edx
c0022bd3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022bd7:	d3 e0                	shl    eax,cl
c0022bd9:	89 e9                	mov    ecx,ebp
c0022bdb:	d3 eb                	shr    ebx,cl
c0022bdd:	09 d8                	or     eax,ebx
c0022bdf:	d3 ea                	shr    edx,cl
c0022be1:	83 c4 1c             	add    esp,0x1c
c0022be4:	5b                   	pop    ebx
c0022be5:	5e                   	pop    esi
c0022be6:	5f                   	pop    edi
c0022be7:	5d                   	pop    ebp
c0022be8:	c3                   	ret    
c0022be9:	8d 76 00             	lea    esi,[esi+0x0]
c0022bec:	39 c3                	cmp    ebx,eax
c0022bee:	73 db                	jae    c0022bcb <__umoddi3+0xe7>
c0022bf0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022bf4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022bf8:	89 d7                	mov    edi,edx
c0022bfa:	89 c6                	mov    esi,eax
c0022bfc:	eb cd                	jmp    c0022bcb <__umoddi3+0xe7>

Disassembly of section .init:

c0022bfe <_init>:
c0022bfe:	55                   	push   ebp
c0022bff:	89 e5                	mov    ebp,esp
c0022c01:	e8 12 d5 fd ff       	call   c0000118 <frame_dummy>
c0022c06:	e8 e5 fa ff ff       	call   c00226f0 <__do_global_ctors_aux>
c0022c0b:	5d                   	pop    ebp
c0022c0c:	c3                   	ret    

Disassembly of section .fini:

c0022c0d <_fini>:
c0022c0d:	55                   	push   ebp
c0022c0e:	89 e5                	mov    ebp,esp
c0022c10:	e8 93 d4 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022c15:	5d                   	pop    ebp
c0022c16:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022c18 <Computer::~Computer()>:
c0022c18:	83 ec 0c             	sub    esp,0xc
c0022c1b:	ba 34 42 02 c0       	mov    edx,0xc0024234
c0022c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c24:	89 10                	mov    DWORD PTR [eax],edx
c0022c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c2a:	83 ec 0c             	sub    esp,0xc
c0022c2d:	50                   	push   eax
c0022c2e:	e8 95 b3 fe ff       	call   c000dfc8 <Device::~Device()>
c0022c33:	83 c4 10             	add    esp,0x10
c0022c36:	90                   	nop
c0022c37:	83 c4 0c             	add    esp,0xc
c0022c3a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022c3c <Computer::~Computer()>:
c0022c3c:	83 ec 0c             	sub    esp,0xc
c0022c3f:	83 ec 0c             	sub    esp,0xc
c0022c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c46:	e8 cd ff ff ff       	call   c0022c18 <Computer::~Computer()>
c0022c4b:	83 c4 10             	add    esp,0x10
c0022c4e:	83 ec 08             	sub    esp,0x8
c0022c51:	68 ec 01 00 00       	push   0x1ec
c0022c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c5a:	e8 73 9f fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022c5f:	83 c4 10             	add    esp,0x10
c0022c62:	83 c4 0c             	add    esp,0xc
c0022c65:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022c66 <idleCommon()>:
c0022c66:	83 ec 0c             	sub    esp,0xc
c0022c69:	fa                   	cli    
c0022c6a:	ff 05 48 96 02 c0    	inc    DWORD PTR ds:0xc0029648
c0022c70:	e8 7b 57 ff ff       	call   c00183f0 <schedule()>
c0022c75:	a1 48 96 02 c0       	mov    eax,ds:0xc0029648
c0022c7a:	48                   	dec    eax
c0022c7b:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0022c80:	75 01                	jne    c0022c83 <idleCommon()+0x1d>
c0022c82:	fb                   	sti    
c0022c83:	83 c4 0c             	add    esp,0xc
c0022c86:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022c88 <LinkedList<UnixFile>::~LinkedList()>:
c0022c88:	90                   	nop
c0022c89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022c8a <LinkedList<UnixFile>::LinkedList()>:
c0022c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ca3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022cbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cc3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022cca:	90                   	nop
c0022ccb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022ccc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022ccc:	83 ec 0c             	sub    esp,0xc
c0022ccf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022cd4:	75 10                	jne    c0022ce6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022cd6:	83 ec 0c             	sub    esp,0xc
c0022cd9:	68 08 46 02 c0       	push   0xc0024608
c0022cde:	e8 3c 1b ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022ce3:	83 c4 10             	add    esp,0x10
c0022ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cec:	85 c0                	test   eax,eax
c0022cee:	74 34                	je     c0022d24 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022cf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cf7:	85 c0                	test   eax,eax
c0022cf9:	74 29                	je     c0022d24 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d02:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d1b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d22:	eb 65                	jmp    c0022d89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d28:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2a:	85 c0                	test   eax,eax
c0022d2c:	75 4b                	jne    c0022d79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d35:	85 c0                	test   eax,eax
c0022d37:	75 40                	jne    c0022d79 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d41:	89 10                	mov    DWORD PTR [eax],edx
c0022d43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d47:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d4b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d63:	85 c0                	test   eax,eax
c0022d65:	74 22                	je     c0022d89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022d67:	83 ec 0c             	sub    esp,0xc
c0022d6a:	68 2a 46 02 c0       	push   0xc002462a
c0022d6f:	e8 ab 1a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022d74:	83 c4 10             	add    esp,0x10
c0022d77:	eb 10                	jmp    c0022d89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022d79:	83 ec 0c             	sub    esp,0xc
c0022d7c:	68 34 46 02 c0       	push   0xc0024634
c0022d81:	e8 99 1a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022d86:	83 c4 10             	add    esp,0x10
c0022d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d90:	8d 50 01             	lea    edx,[eax+0x1]
c0022d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d97:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d9a:	90                   	nop
c0022d9b:	83 c4 0c             	add    esp,0xc
c0022d9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022da0 <LinkedList<UnixFile>::getFirstElement()>:
c0022da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022da6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022da8 <LinkedList<UnixFile>::removeFirst()>:
c0022da8:	83 ec 0c             	sub    esp,0xc
c0022dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022db1:	85 c0                	test   eax,eax
c0022db3:	75 12                	jne    c0022dc7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022db5:	83 ec 0c             	sub    esp,0xc
c0022db8:	68 40 46 02 c0       	push   0xc0024640
c0022dbd:	e8 5d 1a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022dc2:	83 c4 10             	add    esp,0x10
c0022dc5:	eb 7e                	jmp    c0022e45 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dd1:	85 c0                	test   eax,eax
c0022dd3:	74 10                	je     c0022de5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022dd5:	83 ec 0c             	sub    esp,0xc
c0022dd8:	68 8b 46 02 c0       	push   0xc002468b
c0022ddd:	e8 3d 1a ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022de2:	83 c4 10             	add    esp,0x10
c0022de5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022de9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022deb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022dee:	85 c0                	test   eax,eax
c0022df0:	75 33                	jne    c0022e25 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e0e:	83 f8 01             	cmp    eax,0x1
c0022e11:	74 21                	je     c0022e34 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022e13:	83 ec 0c             	sub    esp,0xc
c0022e16:	68 64 46 02 c0       	push   0xc0024664
c0022e1b:	e8 ff 19 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022e20:	83 c4 10             	add    esp,0x10
c0022e23:	eb 0f                	jmp    c0022e34 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e2b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e32:	89 10                	mov    DWORD PTR [eax],edx
c0022e34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e3b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e45:	83 c4 0c             	add    esp,0xc
c0022e48:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022e4a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022e4e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e51:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022e52 <DriverlessDevice::~DriverlessDevice()>:
c0022e52:	ba 3c 4e 02 c0       	mov    edx,0xc0024e3c
c0022e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e5b:	89 10                	mov    DWORD PTR [eax],edx
c0022e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e61:	50                   	push   eax
c0022e62:	e8 61 b1 fe ff       	call   c000dfc8 <Device::~Device()>
c0022e67:	83 c4 04             	add    esp,0x4
c0022e6a:	90                   	nop
c0022e6b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022e6c <DriverlessDevice::~DriverlessDevice()>:
c0022e6c:	83 ec 0c             	sub    esp,0xc
c0022e6f:	83 ec 0c             	sub    esp,0xc
c0022e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e76:	e8 d7 ff ff ff       	call   c0022e52 <DriverlessDevice::~DriverlessDevice()>
c0022e7b:	83 c4 10             	add    esp,0x10
c0022e7e:	83 ec 08             	sub    esp,0x8
c0022e81:	68 58 01 00 00       	push   0x158
c0022e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e8a:	e8 43 9d fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0022e8f:	83 c4 10             	add    esp,0x10
c0022e92:	83 c4 0c             	add    esp,0xc
c0022e95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022e96 <LinkedList<Device>::addElement(Device*)>:
c0022e96:	83 ec 0c             	sub    esp,0xc
c0022e99:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022e9e:	75 10                	jne    c0022eb0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022ea0:	83 ec 0c             	sub    esp,0xc
c0022ea3:	68 08 46 02 c0       	push   0xc0024608
c0022ea8:	e8 72 19 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022ead:	83 c4 10             	add    esp,0x10
c0022eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eb6:	85 c0                	test   eax,eax
c0022eb8:	74 3a                	je     c0022ef4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ec1:	85 c0                	test   eax,eax
c0022ec3:	74 2f                	je     c0022ef4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ecc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ed0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ede:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ee8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022ef2:	eb 68                	jmp    c0022f5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022efa:	85 c0                	test   eax,eax
c0022efc:	75 4e                	jne    c0022f4c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022efe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f05:	85 c0                	test   eax,eax
c0022f07:	75 43                	jne    c0022f4c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022f09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f11:	89 10                	mov    DWORD PTR [eax],edx
c0022f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f17:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f25:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f36:	85 c0                	test   eax,eax
c0022f38:	74 22                	je     c0022f5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022f3a:	83 ec 0c             	sub    esp,0xc
c0022f3d:	68 2a 46 02 c0       	push   0xc002462a
c0022f42:	e8 d8 18 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022f47:	83 c4 10             	add    esp,0x10
c0022f4a:	eb 10                	jmp    c0022f5c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	68 34 46 02 c0       	push   0xc0024634
c0022f54:	e8 c6 18 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022f59:	83 c4 10             	add    esp,0x10
c0022f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f60:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f63:	8d 50 01             	lea    edx,[eax+0x1]
c0022f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f6d:	90                   	nop
c0022f6e:	83 c4 0c             	add    esp,0xc
c0022f71:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022f72 <LinkedList<Device>::LinkedList()>:
c0022f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f8b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022f96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022fa7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022fb2:	90                   	nop
c0022fb3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022fb4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fba:	85 c0                	test   eax,eax
c0022fbc:	75 0e                	jne    c0022fcc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022fc5:	85 c0                	test   eax,eax
c0022fc7:	75 03                	jne    c0022fcc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022fc9:	b0 01                	mov    al,0x1
c0022fcb:	c3                   	ret    
c0022fcc:	b0 00                	mov    al,0x0
c0022fce:	90                   	nop
c0022fcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022fd0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022fd8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022fd8:	83 ec 0c             	sub    esp,0xc
c0022fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fe1:	85 c0                	test   eax,eax
c0022fe3:	75 17                	jne    c0022ffc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022fe5:	83 ec 0c             	sub    esp,0xc
c0022fe8:	68 40 46 02 c0       	push   0xc0024640
c0022fed:	e8 2d 18 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0022ff2:	83 c4 10             	add    esp,0x10
c0022ff5:	e9 92 00 00 00       	jmp    c002308c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022ffa:	66 90                	xchg   ax,ax
c0022ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023006:	85 c0                	test   eax,eax
c0023008:	0f 95 c0             	setne  al
c002300b:	84 c0                	test   al,al
c002300d:	74 11                	je     c0023020 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c002300f:	83 ec 0c             	sub    esp,0xc
c0023012:	68 8b 46 02 c0       	push   0xc002468b
c0023017:	e8 03 18 ff ff       	call   c001481f <Krnl::panic(char const*)>
c002301c:	83 c4 10             	add    esp,0x10
c002301f:	90                   	nop
c0023020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023024:	8b 00                	mov    eax,DWORD PTR [eax]
c0023026:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023029:	85 c0                	test   eax,eax
c002302b:	0f 94 c0             	sete   al
c002302e:	84 c0                	test   al,al
c0023030:	74 36                	je     c0023068 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0023032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023036:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023040:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002304e:	83 f8 01             	cmp    eax,0x1
c0023051:	74 25                	je     c0023078 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023053:	83 ec 0c             	sub    esp,0xc
c0023056:	68 64 46 02 c0       	push   0xc0024664
c002305b:	e8 bf 17 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0023060:	83 c4 10             	add    esp,0x10
c0023063:	eb 13                	jmp    c0023078 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023065:	8d 76 00             	lea    esi,[esi+0x0]
c0023068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306c:	8b 00                	mov    eax,DWORD PTR [eax]
c002306e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0023071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023075:	89 10                	mov    DWORD PTR [eax],edx
c0023077:	90                   	nop
c0023078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002307f:	8d 50 ff             	lea    edx,[eax-0x1]
c0023082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023086:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023089:	8d 76 00             	lea    esi,[esi+0x0]
c002308c:	83 c4 0c             	add    esp,0xc
c002308f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0023090 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0023090:	83 ec 0c             	sub    esp,0xc
c0023093:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023098:	75 12                	jne    c00230ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002309a:	83 ec 0c             	sub    esp,0xc
c002309d:	68 08 46 02 c0       	push   0xc0024608
c00230a2:	e8 78 17 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00230a7:	83 c4 10             	add    esp,0x10
c00230aa:	66 90                	xchg   ax,ax
c00230ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00230b2:	85 c0                	test   eax,eax
c00230b4:	74 36                	je     c00230ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00230b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230bd:	85 c0                	test   eax,eax
c00230bf:	74 2b                	je     c00230ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00230c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00230cc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00230cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00230d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00230da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230e1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00230e8:	eb 6a                	jmp    c0023154 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00230ea:	66 90                	xchg   ax,ax
c00230ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00230f2:	85 c0                	test   eax,eax
c00230f4:	75 4e                	jne    c0023144 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00230f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00230fd:	85 c0                	test   eax,eax
c00230ff:	75 43                	jne    c0023144 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0023101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023105:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023109:	89 10                	mov    DWORD PTR [eax],edx
c002310b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002310f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023113:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002311a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002311d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023128:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002312b:	85 c0                	test   eax,eax
c002312d:	74 25                	je     c0023154 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002312f:	83 ec 0c             	sub    esp,0xc
c0023132:	68 2a 46 02 c0       	push   0xc002462a
c0023137:	e8 e3 16 ff ff       	call   c001481f <Krnl::panic(char const*)>
c002313c:	83 c4 10             	add    esp,0x10
c002313f:	eb 13                	jmp    c0023154 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023141:	8d 76 00             	lea    esi,[esi+0x0]
c0023144:	83 ec 0c             	sub    esp,0xc
c0023147:	68 34 46 02 c0       	push   0xc0024634
c002314c:	e8 ce 16 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0023151:	83 c4 10             	add    esp,0x10
c0023154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023158:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002315b:	8d 50 01             	lea    edx,[eax+0x1]
c002315e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023162:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023165:	90                   	nop
c0023166:	83 c4 0c             	add    esp,0xc
c0023169:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002316c <ACPI::~ACPI()>:
c002316c:	83 ec 0c             	sub    esp,0xc
c002316f:	ba 44 58 02 c0       	mov    edx,0xc0025844
c0023174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023178:	89 10                	mov    DWORD PTR [eax],edx
c002317a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002317e:	83 ec 0c             	sub    esp,0xc
c0023181:	50                   	push   eax
c0023182:	e8 41 ae fe ff       	call   c000dfc8 <Device::~Device()>
c0023187:	83 c4 10             	add    esp,0x10
c002318a:	90                   	nop
c002318b:	83 c4 0c             	add    esp,0xc
c002318e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0023190 <ACPI::~ACPI()>:
c0023190:	83 ec 0c             	sub    esp,0xc
c0023193:	83 ec 0c             	sub    esp,0xc
c0023196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002319a:	e8 cd ff ff ff       	call   c002316c <ACPI::~ACPI()>
c002319f:	83 c4 10             	add    esp,0x10
c00231a2:	83 ec 08             	sub    esp,0x8
c00231a5:	68 64 12 00 00       	push   0x1264
c00231aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ae:	e8 1f 9a fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00231b3:	83 c4 10             	add    esp,0x10
c00231b6:	83 c4 0c             	add    esp,0xc
c00231b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00231bc <LinkedList<Device>::~LinkedList()>:
c00231bc:	90                   	nop
c00231bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00231c0 <LinkedList<Device>::isEmpty()>:
c00231c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00231c6:	85 c0                	test   eax,eax
c00231c8:	75 0e                	jne    c00231d8 <LinkedList<Device>::isEmpty()+0x18>
c00231ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00231d1:	85 c0                	test   eax,eax
c00231d3:	75 03                	jne    c00231d8 <LinkedList<Device>::isEmpty()+0x18>
c00231d5:	b0 01                	mov    al,0x1
c00231d7:	c3                   	ret    
c00231d8:	b0 00                	mov    al,0x0
c00231da:	90                   	nop
c00231db:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00231dc <LinkedList<Device>::getFirstElement()>:
c00231dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00231e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00231e4 <LinkedList<Device>::removeFirst()>:
c00231e4:	83 ec 0c             	sub    esp,0xc
c00231e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00231ed:	85 c0                	test   eax,eax
c00231ef:	75 17                	jne    c0023208 <LinkedList<Device>::removeFirst()+0x24>
c00231f1:	83 ec 0c             	sub    esp,0xc
c00231f4:	68 40 46 02 c0       	push   0xc0024640
c00231f9:	e8 21 16 ff ff       	call   c001481f <Krnl::panic(char const*)>
c00231fe:	83 c4 10             	add    esp,0x10
c0023201:	e9 92 00 00 00       	jmp    c0023298 <LinkedList<Device>::removeFirst()+0xb4>
c0023206:	66 90                	xchg   ax,ax
c0023208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002320c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002320f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023215:	85 c0                	test   eax,eax
c0023217:	74 13                	je     c002322c <LinkedList<Device>::removeFirst()+0x48>
c0023219:	83 ec 0c             	sub    esp,0xc
c002321c:	68 8b 46 02 c0       	push   0xc002468b
c0023221:	e8 f9 15 ff ff       	call   c001481f <Krnl::panic(char const*)>
c0023226:	83 c4 10             	add    esp,0x10
c0023229:	8d 76 00             	lea    esi,[esi+0x0]
c002322c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023230:	8b 00                	mov    eax,DWORD PTR [eax]
c0023232:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023238:	85 c0                	test   eax,eax
c002323a:	75 34                	jne    c0023270 <LinkedList<Device>::removeFirst()+0x8c>
c002323c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023240:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002324a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023255:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023258:	83 f8 01             	cmp    eax,0x1
c002325b:	74 27                	je     c0023284 <LinkedList<Device>::removeFirst()+0xa0>
c002325d:	83 ec 0c             	sub    esp,0xc
c0023260:	68 64 46 02 c0       	push   0xc0024664
c0023265:	e8 b5 15 ff ff       	call   c001481f <Krnl::panic(char const*)>
c002326a:	83 c4 10             	add    esp,0x10
c002326d:	eb 15                	jmp    c0023284 <LinkedList<Device>::removeFirst()+0xa0>
c002326f:	90                   	nop
c0023270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023274:	8b 00                	mov    eax,DWORD PTR [eax]
c0023276:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023280:	89 10                	mov    DWORD PTR [eax],edx
c0023282:	66 90                	xchg   ax,ax
c0023284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023288:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002328b:	8d 50 ff             	lea    edx,[eax-0x1]
c002328e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023292:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023295:	8d 76 00             	lea    esi,[esi+0x0]
c0023298:	83 c4 0c             	add    esp,0xc
c002329b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002329c <CPU::~CPU()>:
c002329c:	83 ec 0c             	sub    esp,0xc
c002329f:	ba 20 5c 02 c0       	mov    edx,0xc0025c20
c00232a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a8:	89 10                	mov    DWORD PTR [eax],edx
c00232aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ae:	83 ec 0c             	sub    esp,0xc
c00232b1:	50                   	push   eax
c00232b2:	e8 11 ad fe ff       	call   c000dfc8 <Device::~Device()>
c00232b7:	83 c4 10             	add    esp,0x10
c00232ba:	90                   	nop
c00232bb:	83 c4 0c             	add    esp,0xc
c00232be:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00232c0 <CPU::~CPU()>:
c00232c0:	83 ec 0c             	sub    esp,0xc
c00232c3:	83 ec 0c             	sub    esp,0xc
c00232c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232ca:	e8 cd ff ff ff       	call   c002329c <CPU::~CPU()>
c00232cf:	83 c4 10             	add    esp,0x10
c00232d2:	83 ec 08             	sub    esp,0x8
c00232d5:	68 98 11 00 00       	push   0x1198
c00232da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232de:	e8 ef 98 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00232e3:	83 c4 10             	add    esp,0x10
c00232e6:	83 c4 0c             	add    esp,0xc
c00232e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00232ec <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00232ec:	90                   	nop
c00232ed:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00232f0 <ThreadControlBlock::ThreadControlBlock()>:
c00232f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232f4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00232fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00232ff:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023306:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002330a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023311:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023315:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002331c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023320:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002332b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002332f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023333:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023337:	90                   	nop
c0023338:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002333c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002333c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023340:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002334a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023351:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023355:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002335c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002336a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023371:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023375:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002337c:	90                   	nop
c002337d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023380 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023384:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023387:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023388 <Vm::_FPUState::_FPUState()>:
c0023388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002338c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023393:	90                   	nop
c0023394:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023396 <PCI::~PCI()>:
c0023396:	83 ec 0c             	sub    esp,0xc
c0023399:	ba d4 6a 02 c0       	mov    edx,0xc0026ad4
c002339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a2:	89 10                	mov    DWORD PTR [eax],edx
c00233a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a8:	83 ec 0c             	sub    esp,0xc
c00233ab:	50                   	push   eax
c00233ac:	e8 e7 a5 fe ff       	call   c000d998 <Bus::~Bus()>
c00233b1:	83 c4 10             	add    esp,0x10
c00233b4:	90                   	nop
c00233b5:	83 c4 0c             	add    esp,0xc
c00233b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00233ba <PCI::~PCI()>:
c00233ba:	83 ec 0c             	sub    esp,0xc
c00233bd:	83 ec 0c             	sub    esp,0xc
c00233c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233c4:	e8 cd ff ff ff       	call   c0023396 <PCI::~PCI()>
c00233c9:	83 c4 10             	add    esp,0x10
c00233cc:	83 ec 08             	sub    esp,0x8
c00233cf:	68 5c 01 00 00       	push   0x15c
c00233d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233d8:	e8 f5 97 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00233dd:	83 c4 10             	add    esp,0x10
c00233e0:	83 c4 0c             	add    esp,0xc
c00233e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00233e4 <IDE::~IDE()>:
c00233e4:	83 ec 0c             	sub    esp,0xc
c00233e7:	ba 88 6b 02 c0       	mov    edx,0xc0026b88
c00233ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f0:	89 10                	mov    DWORD PTR [eax],edx
c00233f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f6:	83 ec 0c             	sub    esp,0xc
c00233f9:	50                   	push   eax
c00233fa:	e8 e1 b0 fe ff       	call   c000e4e0 <HardDiskController::~HardDiskController()>
c00233ff:	83 c4 10             	add    esp,0x10
c0023402:	90                   	nop
c0023403:	83 c4 0c             	add    esp,0xc
c0023406:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023408 <IDE::~IDE()>:
c0023408:	83 ec 0c             	sub    esp,0xc
c002340b:	83 ec 0c             	sub    esp,0xc
c002340e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023412:	e8 cd ff ff ff       	call   c00233e4 <IDE::~IDE()>
c0023417:	83 c4 10             	add    esp,0x10
c002341a:	83 ec 08             	sub    esp,0x8
c002341d:	68 70 02 00 00       	push   0x270
c0023422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023426:	e8 a7 97 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002342b:	83 c4 10             	add    esp,0x10
c002342e:	83 c4 0c             	add    esp,0xc
c0023431:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023432 <SATABus::~SATABus()>:
c0023432:	83 ec 0c             	sub    esp,0xc
c0023435:	ba 00 6d 02 c0       	mov    edx,0xc0026d00
c002343a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002343e:	89 10                	mov    DWORD PTR [eax],edx
c0023440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023444:	83 ec 0c             	sub    esp,0xc
c0023447:	50                   	push   eax
c0023448:	e8 93 b0 fe ff       	call   c000e4e0 <HardDiskController::~HardDiskController()>
c002344d:	83 c4 10             	add    esp,0x10
c0023450:	90                   	nop
c0023451:	83 c4 0c             	add    esp,0xc
c0023454:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023456 <SATABus::~SATABus()>:
c0023456:	83 ec 0c             	sub    esp,0xc
c0023459:	83 ec 0c             	sub    esp,0xc
c002345c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023460:	e8 cd ff ff ff       	call   c0023432 <SATABus::~SATABus()>
c0023465:	83 c4 10             	add    esp,0x10
c0023468:	83 ec 08             	sub    esp,0x8
c002346b:	68 64 01 00 00       	push   0x164
c0023470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023474:	e8 59 97 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023479:	83 c4 10             	add    esp,0x10
c002347c:	83 c4 0c             	add    esp,0xc
c002347f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023480 <ATA::~ATA()>:
c0023480:	83 ec 0c             	sub    esp,0xc
c0023483:	ba 78 6d 02 c0       	mov    edx,0xc0026d78
c0023488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002348c:	89 10                	mov    DWORD PTR [eax],edx
c002348e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023492:	83 ec 0c             	sub    esp,0xc
c0023495:	50                   	push   eax
c0023496:	e8 27 b1 fe ff       	call   c000e5c2 <PhysicalDisk::~PhysicalDisk()>
c002349b:	83 c4 10             	add    esp,0x10
c002349e:	90                   	nop
c002349f:	83 c4 0c             	add    esp,0xc
c00234a2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00234a4 <ATA::~ATA()>:
c00234a4:	83 ec 0c             	sub    esp,0xc
c00234a7:	83 ec 0c             	sub    esp,0xc
c00234aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234ae:	e8 cd ff ff ff       	call   c0023480 <ATA::~ATA()>
c00234b3:	83 c4 10             	add    esp,0x10
c00234b6:	83 ec 08             	sub    esp,0x8
c00234b9:	68 7c 01 00 00       	push   0x17c
c00234be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234c2:	e8 0b 97 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00234c7:	83 c4 10             	add    esp,0x10
c00234ca:	83 c4 0c             	add    esp,0xc
c00234cd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00234ce <ATAPI::~ATAPI()>:
c00234ce:	83 ec 0c             	sub    esp,0xc
c00234d1:	ba b0 6d 02 c0       	mov    edx,0xc0026db0
c00234d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234da:	89 10                	mov    DWORD PTR [eax],edx
c00234dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e0:	83 ec 0c             	sub    esp,0xc
c00234e3:	50                   	push   eax
c00234e4:	e8 d9 b0 fe ff       	call   c000e5c2 <PhysicalDisk::~PhysicalDisk()>
c00234e9:	83 c4 10             	add    esp,0x10
c00234ec:	90                   	nop
c00234ed:	83 c4 0c             	add    esp,0xc
c00234f0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00234f2 <ATAPI::~ATAPI()>:
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	83 ec 0c             	sub    esp,0xc
c00234f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234fc:	e8 cd ff ff ff       	call   c00234ce <ATAPI::~ATAPI()>
c0023501:	83 c4 10             	add    esp,0x10
c0023504:	83 ec 08             	sub    esp,0x8
c0023507:	68 80 01 00 00       	push   0x180
c002350c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023510:	e8 bd 96 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023515:	83 c4 10             	add    esp,0x10
c0023518:	83 c4 0c             	add    esp,0xc
c002351b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002351c <SATA::~SATA()>:
c002351c:	83 ec 0c             	sub    esp,0xc
c002351f:	ba 9c 6f 02 c0       	mov    edx,0xc0026f9c
c0023524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023528:	89 10                	mov    DWORD PTR [eax],edx
c002352a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002352e:	83 ec 0c             	sub    esp,0xc
c0023531:	50                   	push   eax
c0023532:	e8 8b b0 fe ff       	call   c000e5c2 <PhysicalDisk::~PhysicalDisk()>
c0023537:	83 c4 10             	add    esp,0x10
c002353a:	90                   	nop
c002353b:	83 c4 0c             	add    esp,0xc
c002353e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023540 <SATA::~SATA()>:
c0023540:	83 ec 0c             	sub    esp,0xc
c0023543:	83 ec 0c             	sub    esp,0xc
c0023546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002354a:	e8 cd ff ff ff       	call   c002351c <SATA::~SATA()>
c002354f:	83 c4 10             	add    esp,0x10
c0023552:	83 ec 08             	sub    esp,0x8
c0023555:	68 7c 01 00 00       	push   0x17c
c002355a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002355e:	e8 6f 96 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023563:	83 c4 10             	add    esp,0x10
c0023566:	83 c4 0c             	add    esp,0xc
c0023569:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002356a <SATAPI::~SATAPI()>:
c002356a:	83 ec 0c             	sub    esp,0xc
c002356d:	ba 78 70 02 c0       	mov    edx,0xc0027078
c0023572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023576:	89 10                	mov    DWORD PTR [eax],edx
c0023578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002357c:	83 ec 0c             	sub    esp,0xc
c002357f:	50                   	push   eax
c0023580:	e8 3d b0 fe ff       	call   c000e5c2 <PhysicalDisk::~PhysicalDisk()>
c0023585:	83 c4 10             	add    esp,0x10
c0023588:	90                   	nop
c0023589:	83 c4 0c             	add    esp,0xc
c002358c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002358e <SATAPI::~SATAPI()>:
c002358e:	83 ec 0c             	sub    esp,0xc
c0023591:	83 ec 0c             	sub    esp,0xc
c0023594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023598:	e8 cd ff ff ff       	call   c002356a <SATAPI::~SATAPI()>
c002359d:	83 c4 10             	add    esp,0x10
c00235a0:	83 ec 08             	sub    esp,0x8
c00235a3:	68 80 01 00 00       	push   0x180
c00235a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235ac:	e8 21 96 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00235b1:	83 c4 10             	add    esp,0x10
c00235b4:	83 c4 0c             	add    esp,0xc
c00235b7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00235b8 <AVX::~AVX()>:
c00235b8:	83 ec 0c             	sub    esp,0xc
c00235bb:	ba b8 70 02 c0       	mov    edx,0xc00270b8
c00235c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c4:	89 10                	mov    DWORD PTR [eax],edx
c00235c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ca:	83 ec 0c             	sub    esp,0xc
c00235cd:	50                   	push   eax
c00235ce:	e8 75 b0 fe ff       	call   c000e648 <FPU::~FPU()>
c00235d3:	83 c4 10             	add    esp,0x10
c00235d6:	90                   	nop
c00235d7:	83 c4 0c             	add    esp,0xc
c00235da:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00235dc <AVX::~AVX()>:
c00235dc:	83 ec 0c             	sub    esp,0xc
c00235df:	83 ec 0c             	sub    esp,0xc
c00235e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235e6:	e8 cd ff ff ff       	call   c00235b8 <AVX::~AVX()>
c00235eb:	83 c4 10             	add    esp,0x10
c00235ee:	83 ec 08             	sub    esp,0x8
c00235f1:	68 58 01 00 00       	push   0x158
c00235f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235fa:	e8 d3 95 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00235ff:	83 c4 10             	add    esp,0x10
c0023602:	83 c4 0c             	add    esp,0xc
c0023605:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023608 <MMX::~MMX()>:
c0023608:	83 ec 0c             	sub    esp,0xc
c002360b:	ba f8 70 02 c0       	mov    edx,0xc00270f8
c0023610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023614:	89 10                	mov    DWORD PTR [eax],edx
c0023616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002361a:	83 ec 0c             	sub    esp,0xc
c002361d:	50                   	push   eax
c002361e:	e8 25 b0 fe ff       	call   c000e648 <FPU::~FPU()>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	90                   	nop
c0023627:	83 c4 0c             	add    esp,0xc
c002362a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002362c <MMX::~MMX()>:
c002362c:	83 ec 0c             	sub    esp,0xc
c002362f:	83 ec 0c             	sub    esp,0xc
c0023632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023636:	e8 cd ff ff ff       	call   c0023608 <MMX::~MMX()>
c002363b:	83 c4 10             	add    esp,0x10
c002363e:	83 ec 08             	sub    esp,0x8
c0023641:	68 58 01 00 00       	push   0x158
c0023646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002364a:	e8 83 95 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002364f:	83 c4 10             	add    esp,0x10
c0023652:	83 c4 0c             	add    esp,0xc
c0023655:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023658 <SSE::~SSE()>:
c0023658:	83 ec 0c             	sub    esp,0xc
c002365b:	ba 38 71 02 c0       	mov    edx,0xc0027138
c0023660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023664:	89 10                	mov    DWORD PTR [eax],edx
c0023666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002366a:	83 ec 0c             	sub    esp,0xc
c002366d:	50                   	push   eax
c002366e:	e8 d5 af fe ff       	call   c000e648 <FPU::~FPU()>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	90                   	nop
c0023677:	83 c4 0c             	add    esp,0xc
c002367a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002367c <SSE::~SSE()>:
c002367c:	83 ec 0c             	sub    esp,0xc
c002367f:	83 ec 0c             	sub    esp,0xc
c0023682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023686:	e8 cd ff ff ff       	call   c0023658 <SSE::~SSE()>
c002368b:	83 c4 10             	add    esp,0x10
c002368e:	83 ec 08             	sub    esp,0x8
c0023691:	68 58 01 00 00       	push   0x158
c0023696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002369a:	e8 33 95 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002369f:	83 c4 10             	add    esp,0x10
c00236a2:	83 c4 0c             	add    esp,0xc
c00236a5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00236a8 <x87::~x87()>:
c00236a8:	83 ec 0c             	sub    esp,0xc
c00236ab:	ba 78 71 02 c0       	mov    edx,0xc0027178
c00236b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236b4:	89 10                	mov    DWORD PTR [eax],edx
c00236b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ba:	83 ec 0c             	sub    esp,0xc
c00236bd:	50                   	push   eax
c00236be:	e8 85 af fe ff       	call   c000e648 <FPU::~FPU()>
c00236c3:	83 c4 10             	add    esp,0x10
c00236c6:	90                   	nop
c00236c7:	83 c4 0c             	add    esp,0xc
c00236ca:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00236cc <x87::~x87()>:
c00236cc:	83 ec 0c             	sub    esp,0xc
c00236cf:	83 ec 0c             	sub    esp,0xc
c00236d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236d6:	e8 cd ff ff ff       	call   c00236a8 <x87::~x87()>
c00236db:	83 c4 10             	add    esp,0x10
c00236de:	83 ec 08             	sub    esp,0x8
c00236e1:	68 58 01 00 00       	push   0x158
c00236e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236ea:	e8 e3 94 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00236ef:	83 c4 10             	add    esp,0x10
c00236f2:	83 c4 0c             	add    esp,0xc
c00236f5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00236f6 <IOAPIC::~IOAPIC()>:
c00236f6:	83 ec 0c             	sub    esp,0xc
c00236f9:	ba d0 72 02 c0       	mov    edx,0xc00272d0
c00236fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023702:	89 10                	mov    DWORD PTR [eax],edx
c0023704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023708:	83 ec 0c             	sub    esp,0xc
c002370b:	50                   	push   eax
c002370c:	e8 b7 a8 fe ff       	call   c000dfc8 <Device::~Device()>
c0023711:	83 c4 10             	add    esp,0x10
c0023714:	90                   	nop
c0023715:	83 c4 0c             	add    esp,0xc
c0023718:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002371a <IOAPIC::~IOAPIC()>:
c002371a:	83 ec 0c             	sub    esp,0xc
c002371d:	83 ec 0c             	sub    esp,0xc
c0023720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023724:	e8 cd ff ff ff       	call   c00236f6 <IOAPIC::~IOAPIC()>
c0023729:	83 c4 10             	add    esp,0x10
c002372c:	83 ec 08             	sub    esp,0x8
c002372f:	68 68 01 00 00       	push   0x168
c0023734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023738:	e8 95 94 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002373d:	83 c4 10             	add    esp,0x10
c0023740:	83 c4 0c             	add    esp,0xc
c0023743:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023744 <APIC::~APIC()>:
c0023744:	83 ec 0c             	sub    esp,0xc
c0023747:	ba 88 72 02 c0       	mov    edx,0xc0027288
c002374c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023750:	89 10                	mov    DWORD PTR [eax],edx
c0023752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023756:	83 ec 0c             	sub    esp,0xc
c0023759:	50                   	push   eax
c002375a:	e8 bd b3 fe ff       	call   c000eb1c <InterruptController::~InterruptController()>
c002375f:	83 c4 10             	add    esp,0x10
c0023762:	90                   	nop
c0023763:	83 c4 0c             	add    esp,0xc
c0023766:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023768 <APIC::~APIC()>:
c0023768:	83 ec 0c             	sub    esp,0xc
c002376b:	83 ec 0c             	sub    esp,0xc
c002376e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023772:	e8 cd ff ff ff       	call   c0023744 <APIC::~APIC()>
c0023777:	83 c4 10             	add    esp,0x10
c002377a:	83 ec 08             	sub    esp,0x8
c002377d:	68 58 21 00 00       	push   0x2158
c0023782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023786:	e8 47 94 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c002378b:	83 c4 10             	add    esp,0x10
c002378e:	83 c4 0c             	add    esp,0xc
c0023791:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023792 <PIC::~PIC()>:
c0023792:	83 ec 0c             	sub    esp,0xc
c0023795:	ba 20 73 02 c0       	mov    edx,0xc0027320
c002379a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002379e:	89 10                	mov    DWORD PTR [eax],edx
c00237a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a4:	83 ec 0c             	sub    esp,0xc
c00237a7:	50                   	push   eax
c00237a8:	e8 6f b3 fe ff       	call   c000eb1c <InterruptController::~InterruptController()>
c00237ad:	83 c4 10             	add    esp,0x10
c00237b0:	90                   	nop
c00237b1:	83 c4 0c             	add    esp,0xc
c00237b4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00237b6 <PIC::~PIC()>:
c00237b6:	83 ec 0c             	sub    esp,0xc
c00237b9:	83 ec 0c             	sub    esp,0xc
c00237bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237c0:	e8 cd ff ff ff       	call   c0023792 <PIC::~PIC()>
c00237c5:	83 c4 10             	add    esp,0x10
c00237c8:	83 ec 08             	sub    esp,0x8
c00237cb:	68 58 21 00 00       	push   0x2158
c00237d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237d4:	e8 f9 93 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c00237d9:	83 c4 10             	add    esp,0x10
c00237dc:	83 c4 0c             	add    esp,0xc
c00237df:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00237e0 <APICTimer::~APICTimer()>:
c00237e0:	83 ec 0c             	sub    esp,0xc
c00237e3:	ba 74 73 02 c0       	mov    edx,0xc0027374
c00237e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ec:	89 10                	mov    DWORD PTR [eax],edx
c00237ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f2:	83 ec 0c             	sub    esp,0xc
c00237f5:	50                   	push   eax
c00237f6:	e8 2d d1 fe ff       	call   c0010928 <Timer::~Timer()>
c00237fb:	83 c4 10             	add    esp,0x10
c00237fe:	90                   	nop
c00237ff:	83 c4 0c             	add    esp,0xc
c0023802:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023804 <APICTimer::~APICTimer()>:
c0023804:	83 ec 0c             	sub    esp,0xc
c0023807:	83 ec 0c             	sub    esp,0xc
c002380a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002380e:	e8 cd ff ff ff       	call   c00237e0 <APICTimer::~APICTimer()>
c0023813:	83 c4 10             	add    esp,0x10
c0023816:	83 ec 08             	sub    esp,0x8
c0023819:	68 60 01 00 00       	push   0x160
c002381e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023822:	e8 ab 93 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023827:	83 c4 10             	add    esp,0x10
c002382a:	83 c4 0c             	add    esp,0xc
c002382d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023830 <PIT::~PIT()>:
c0023830:	83 ec 0c             	sub    esp,0xc
c0023833:	ba c4 73 02 c0       	mov    edx,0xc00273c4
c0023838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383c:	89 10                	mov    DWORD PTR [eax],edx
c002383e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023842:	83 ec 0c             	sub    esp,0xc
c0023845:	50                   	push   eax
c0023846:	e8 dd d0 fe ff       	call   c0010928 <Timer::~Timer()>
c002384b:	83 c4 10             	add    esp,0x10
c002384e:	90                   	nop
c002384f:	83 c4 0c             	add    esp,0xc
c0023852:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023854 <PIT::~PIT()>:
c0023854:	83 ec 0c             	sub    esp,0xc
c0023857:	83 ec 0c             	sub    esp,0xc
c002385a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002385e:	e8 cd ff ff ff       	call   c0023830 <PIT::~PIT()>
c0023863:	83 c4 10             	add    esp,0x10
c0023866:	83 ec 08             	sub    esp,0x8
c0023869:	68 5c 01 00 00       	push   0x15c
c002386e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023872:	e8 5b 93 fe ff       	call   c000cbd2 <operator delete(void*, unsigned long)>
c0023877:	83 c4 10             	add    esp,0x10
c002387a:	83 c4 0c             	add    esp,0xc
c002387d:	c3                   	ret    
