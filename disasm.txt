
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c0000025:	3d f0 f3 01 c0       	cmp    eax,0xc001f3f0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f0 f3 01 c0       	push   0xc001f3f0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c0000051:	2d f0 f3 01 c0       	sub    eax,0xc001f3f0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f0 f3 01 c0       	push   0xc001f3f0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 20 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f620,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 88 c8 01 c0       	mov    ebx,0xc001c888
c0000097:	81 eb 84 c8 01 c0    	sub    ebx,0xc001c884
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 84 c8 01 c0       	mov    esi,0xc001c884
c00000a6:	a1 24 f6 01 c0       	mov    eax,ds:0xc001f624
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 24 f6 01 c0       	mov    ds:0xc001f624,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 24 f6 01 c0       	mov    eax,ds:0xc001f624
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f0 f3 01 c0       	push   0xc001f3f0
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 20 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f620,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 28 f6 01 c0       	push   0xc001f628
c0000108:	68 f0 f3 01 c0       	push   0xc001f3f0
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 b8 28 01 00       	call   c0012b68 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 8c 9f 00 00       	call   c000a254 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 96 28 01 00       	call   c0012b68 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 67 2d 01 00       	call   c0013058 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 b6 33 01 00       	call   c00136b0 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 20 04 02 c0 	lgdtd  ds:0xc0020420
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 20 fd 00 00       	jmp    c00100a2 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 40 f6 01 c0       	mov    ds:0xc001f640,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 40 f6 01 c0    	mov    DWORD PTR ds:0xc001f640,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 40 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f640
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 a0 c8 01 c0 02 	test   BYTE PTR [edx-0x3ffe3760],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3760],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 a0 c8 01 c0 08 	test   BYTE PTR [edx-0x3ffe3760],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 a0 c8 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3760],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 a0 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3760],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 60 f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f660
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 60 f6 01 c0    	mov    DWORD PTR ds:0xc001f660,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 64 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe099c]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 64 f6 01 c0 	mov    DWORD PTR [eax*4-0x3ffe099c],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 60 f6 01 c0    	mov    DWORD PTR ds:0xc001f660,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 8c f6 01 c0    	cmp    DWORD PTR ds:0xc001f68c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 9c f6 01 c0    	mov    ecx,DWORD PTR ds:0xc001f69c
c0000d3d:	c7 42 0c 94 f6 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f694
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 9c f6 01 c0    	mov    DWORD PTR ds:0xc001f69c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 8c f6 01 c0    	mov    DWORD PTR ds:0xc001f68c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 60 f6 01 c0 02 	test   BYTE PTR ds:0xc001f660,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 60 f6 01 c0    	mov    edi,DWORD PTR ds:0xc001f660
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 64 f6 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe099c]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 64 f6 01 c0 	mov    DWORD PTR [edx*4-0x3ffe099c],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 94 f6 01 c0 	lea    edx,[eax*8-0x3ffe096c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d a0 f6 01 c0    	mov    ebx,DWORD PTR ds:0xc001f6a0
c00010bf:	81 fb 94 f6 01 c0    	cmp    ebx,0xc001f694
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 94 f6 01 c0       	cmp    eax,0xc001f694
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 90 f6 01 c0    	cmp    DWORD PTR ds:0xc001f690,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 9c f6 01 c0       	mov    ds:0xc001f69c,eax
c00010fb:	a3 a0 f6 01 c0       	mov    ds:0xc001f6a0,eax
c0001100:	a3 90 f6 01 c0       	mov    ds:0xc001f690,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 94 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f694
c000110e:	c7 40 0c 94 f6 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f694
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 a0 f6 01 c0       	mov    ds:0xc001f6a0,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 94 f6 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f694
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 58 f6 01 c0 	lea    ebp,[edx*4-0x3ffe09a8]
c000115f:	8b 14 95 60 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09a0]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 60 f6 01 c0 	lea    ecx,[edx*4-0x3ffe09a0]
c000117a:	8b 14 95 60 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09a0]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 94 f9 01 c0 	or     DWORD PTR [edi*4-0x3ffe066c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 94 f6 01 c0 	lea    eax,[eax*8-0x3ffe096c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 9c f6 01 c0    	mov    DWORD PTR ds:0xc001f69c,ecx
c0001234:	89 0d a0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6a0,ecx
c000123a:	c7 41 08 94 f6 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f694
c0001241:	c7 41 0c 94 f6 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f694
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 8c f6 01 c0 	lea    edx,[ecx*8-0x3ffe0974]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 94 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe066c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 94 f9 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe066c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 8c f6 01 c0 	lea    edx,[eax*4-0x3ffe0974]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 94 f9 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe066c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 9c f6 01 c0    	mov    DWORD PTR ds:0xc001f69c,edi
c0001307:	89 3d a0 f6 01 c0    	mov    DWORD PTR ds:0xc001f6a0,edi
c000130d:	c7 47 08 94 f6 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f694
c0001314:	c7 47 0c 94 f6 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f694
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 90 f6 01 c0    	mov    DWORD PTR ds:0xc001f690,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 8c f6 01 c0       	mov    eax,ds:0xc001f68c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 8c f6 01 c0    	mov    DWORD PTR ds:0xc001f68c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 60 f6 01 c0       	mov    edx,0xc001f660
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 60 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f660,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d b4 f9 01 c0    	mov    ebx,DWORD PTR ds:0xc001f9b4
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 b4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9b4,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d b4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9b4,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 8c f6 01 c0    	cmp    DWORD PTR ds:0xc001f68c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 8c f6 01 c0    	mov    DWORD PTR ds:0xc001f68c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 60 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f660,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 bc f9 01 c0    	push   DWORD PTR ds:0xc001f9bc
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 60 f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f660,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 bc f9 01 c0       	mov    eax,ds:0xc001f9bc
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 8c f6 01 c0 00 	cmp    DWORD PTR ds:0xc001f68c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 8c f6 01 c0       	mov    eax,ds:0xc001f68c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 64 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe099c]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 94 f6 01 c0       	mov    eax,0xc001f694
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 8c f9 01 c0       	cmp    eax,0xc001f98c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 c8 f9 01 c0       	mov    eax,ds:0xc001f9c8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 b0 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9b0
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 c4 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9c4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 d4 f9 01 c0    	mov    esi,DWORD PTR ds:0xc001f9d4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 a4 c9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe365c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 60 f6 01 c0       	mov    eax,ds:0xc001f660
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 60 f6 01 c0       	mov    ds:0xc001f660,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d a4 f9 01 c0    	mov    DWORD PTR ds:0xc001f9a4,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d a8 f9 01 c0    	mov    DWORD PTR ds:0xc001f9a8,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d ac f9 01 c0    	mov    DWORD PTR ds:0xc001f9ac,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 b4 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f9b4,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 20 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7e0]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 56 4d 01 00       	jmp    c0016a40 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 20 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7e0]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 84 4d 01 00       	jmp    c0016a84 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 20 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc7e0]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 a9 4d 01 00       	jmp    c0016ac8 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 00 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3500]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 00 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3500]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 64 e9 01 c0       	mov    edx,0xc001e964
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba bc c9 01 c0       	mov    edx,0xc001c9bc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 00 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0600]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 e0 f9 01 c0    	mov    ax,ds:0xc001f9e0
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 e0 f9 01 c0    	mov    ds:0xc001f9e0,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 c2 c9 01 c0       	mov    eax,0xc001c9c2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 80 ca 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3580]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 cb c9 01 c0       	mov    eax,0xc001c9cb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 00 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3500]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 00 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0600]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 00 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0600],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 50 ca 01 c0       	mov    eax,0xc001ca50
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 00 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0600]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 40 ca 01 c0       	mov    ebx,0xc001ca40
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 20 ca 01 c0       	mov    edx,0xc001ca20
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 30 ca 01 c0       	mov    edx,0xc001ca30
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba d2 c9 01 c0       	mov    edx,0xc001c9d2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba de c9 01 c0       	mov    edx,0xc001c9de
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba f2 c9 01 c0       	mov    edx,0xc001c9f2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 20 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ce20
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 20 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce20
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 20 cc 01 c0       	mov    eax,0xc001cc20
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 60 cb 01 c0       	mov    eax,0xc001cb60
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 20 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe34e0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 80 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a80]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 e0 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0a20]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 30 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe04d0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 c0 f5 01 c0 	movsx  eax,BYTE PTR ds:0xc001f5c0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 9d 13 01 00       	call   c001731c <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 80 f5 01 c0       	mov    eax,0xc001f580
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d 14 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020414,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 e0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a20]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 14 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020414
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 20 cf 01 c0       	push   0xc001cf20
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 e0 03 02 c0       	mov    ecx,0xc00203e0
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf a0 fa 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0560],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 a0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0560],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 a4 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe055c],esi
c000634e:	89 87 a0 fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0560],eax
c0006354:	c7 87 a8 fa 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0558],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 30 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe04d0],0x0
c0006370:	89 87 ac fa 01 c0    	mov    DWORD PTR [edi-0x3ffe0554],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 a0 fa 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0560],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd a0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0560],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 30 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe04d0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 a8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0558]
c00063e9:	8b 8d ac fa 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0554]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 a0 fa 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0560]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 80 f5 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0a80]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 a8 fa 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0558]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d a8 fa 01 c0    	add    DWORD PTR [ebp-0x3ffe0558],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d a0 fa 01 c0    	lea    ecx,[ebp-0x3ffe0560]
c00064e1:	83 bd a0 fa 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0560],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 ac fa 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0554]
c000651f:	05 a0 fa 01 c0       	add    eax,0xc001faa0
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 a8 fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0558]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb a0 fa 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0560],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 30 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04d0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 a8 fa 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0558]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba a0 fa 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0560],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 30 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04d0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 ac fa 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0554]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 a0 fa 01 c0    	lea    esi,[eax-0x3ffe0560]
c00065e4:	83 b8 a0 fa 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0560],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 e0 f5 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0a20]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 a8 fa 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0558]
c0006653:	81 c2 a0 fa 01 c0    	add    edx,0xc001faa0
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 e0 f5 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0a20]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 b8 fa 01 c0    	lea    ebp,[eax-0x3ffe0548]
c00066b9:	83 3d 14 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020414,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 b8 fa 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0548],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 20 cf 01 c0       	push   0xc001cf20
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 b3 fa 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe054d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 b0 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe0550],eax
c000678f:	89 91 b4 fa 01 c0    	mov    DWORD PTR [ecx-0x3ffe054c],edx
c0006795:	81 c1 a0 fa 01 c0    	add    ecx,0xc001faa0
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 b0 fa 01 c0       	add    eax,0xc001fab0
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 c0 f5 01 c0       	mov    ds:0xc001f5c0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 14 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020414,0x0
c00067df:	a1 0c 04 02 c0       	mov    eax,ds:0xc002040c
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 e0 f5 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0a20]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 23 cf 01 c0       	push   0xc001cf23
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 e0 f5 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0a20]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 14 04 02 c0       	mov    ds:0xc0020414,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d 14 04 02 c0 00 	cmp    DWORD PTR ds:0xc0020414,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 0c 04 02 c0       	mov    eax,ds:0xc002040c
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 e0 f5 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0a20]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 2a cf 01 c0       	push   0xc001cf2a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 e0 f5 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0a20]
c000687d:	bf e0 03 02 c0       	mov    edi,0xc00203e0
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 e2 03 02 c0       	mov    eax,0xc00203e2
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 08 04 02 c0       	mov    ds:0xc0020408,eax
c00068a0:	b8 ea 03 02 c0       	mov    eax,0xc00203ea
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 04 04 02 c0       	mov    ds:0xc0020404,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 a0 fa 01 c0       	push   0xc001faa0
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 a0 fa 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001faa0,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 10 04 02 c0       	mov    ds:0xc0020410,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 80 fa 01 c0       	mov    ds:0xc001fa80,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d e0 f5 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a20],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 80 f5 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0a80],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d e0 f5 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a20]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 80 f5 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0a80]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 10 04 02 c0       	mov    eax,ds:0xc0020410
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 80 fa 01 c0       	mov    eax,ds:0xc001fa80
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 80 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa80,0x0
c00069a9:	c7 05 10 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020410,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 da 4f 00 00       	call   c000b9b2 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 31 cf 01 c0       	push   0xc001cf31
c0006a09:	e8 31 90 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0006a28:	50                   	push   eax
c0006a29:	68 4a cf 01 c0       	push   0xc001cf4a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 66 c4 00 00       	call   c0012e9c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 5d c6 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 f0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236f0
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 fc 3a 01 c0       	push   0xc0013afc
c0006a5a:	52                   	push   edx
c0006a5b:	e8 48 c6 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 a8 36 02 c0       	mov    ds:0xc00236a8,eax
c0006a68:	68 48 d0 01 c0       	push   0xc001d048
c0006a6d:	c6 05 1d 04 02 c0 01 	mov    BYTE PTR ds:0xc002041d,0x1
c0006a74:	e8 c6 8f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006a79:	e8 5d d4 00 00       	call   c0013edb <Vm::initialise8086()>
c0006a7e:	e8 73 3d 00 00       	call   c000a7f6 <Fs::initVFS()>
c0006a83:	c7 04 24 57 cf 01 c0 	mov    DWORD PTR [esp],0xc001cf57
c0006a8a:	e8 b0 8f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006a8f:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 48 d0 01 c0       	push   0xc001d048
c0006aae:	e8 8c 8f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006ab3:	e8 62 94 00 00       	call   c000ff1a <Krnl::loadSystemEnv()>
c0006ab8:	e8 bf 96 00 00       	call   c001017c <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 71 cf 01 c0       	push   0xc001cf71
c0006ac7:	68 7a cf 01 c0       	push   0xc001cf7a
c0006acc:	e8 b9 a9 00 00       	call   c001148a <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 2b 48 00 00       	call   c000b304 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 6c d0 01 c0 	mov    DWORD PTR [esp],0xc001d06c
c0006ae0:	e8 5a 8f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 b9 4e 00 00       	call   c000b9b0 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 82 cf 01 c0 	mov    DWORD PTR [esp],0xc001cf82
c0006afe:	e8 3c 8f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 93 cf 01 c0       	push   0xc001cf93
c0006b12:	e8 bf bd 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 e7 bf 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 97 c9 00 00       	call   c00134c4 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 af cf 01 c0       	push   0xc001cfaf
c0006b41:	50                   	push   eax
c0006b42:	e8 e5 4e 00 00       	call   c000ba2c <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba b8 d0 01 c0       	mov    edx,0xc001d0b8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 31 04 02 c0 04 	test   BYTE PTR ds:0xc0020431,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 55 4c 01 00       	call   c001b886 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 00 83 00 00       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 d9 82 00 00       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 b7 82 00 00       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 95 82 00 00       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 30 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020430,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 a3 81 00 00       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 7e 81 00 00       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 bf 4a 01 00       	call   c001b840 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 1c 48 01 00       	call   c001b5c0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 9a 81 00 00       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 b8 cf 01 c0       	push   0xc001cfb8
c0006e14:	e8 9e 92 00 00       	call   c00100b7 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 be cf 01 c0       	push   0xc001cfbe
c0006e4c:	e8 66 92 00 00       	call   c00100b7 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 4b 7b 00 00       	jmp    c000e9e4 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 30 04 02 c0 04 	test   BYTE PTR ds:0xc0020430,0x4
c0006ee8:	68 c4 cf 01 c0       	push   0xc001cfc4
c0006eed:	0f 94 05 c0 f0 01 c0 	sete   BYTE PTR ds:0xc001f0c0
c0006ef4:	e8 46 8b 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 6d 76 00 00       	call   c000e57c <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 76 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 dc cf 01 c0 	mov    DWORD PTR [esp],0xc001cfdc
c0006f37:	e8 03 8b 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 d2 80 00 00       	call   c000f024 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 33 49 00 00       	call   c000b894 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 8c d0 01 c0       	push   0xc001d08c
c0006f7e:	e8 bc 8a 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006f83:	e8 8a e0 00 00       	call   c0015012 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 f6 cf 01 c0 	mov    DWORD PTR [esp],0xc001cff6
c0006f8f:	e8 ab 8a 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 20 c2 00 00       	call   c00131c0 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 11 d0 01 c0       	push   0xc001d011
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 63 34 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 22 d0 01 c0       	push   0xc001d022
c000700e:	e8 a4 90 00 00       	call   c00100b7 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 2f d0 01 c0       	push   0xc001d02f
c0007023:	e8 8f 90 00 00       	call   c00100b7 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 39 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d039
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 78 90 00 00       	jmp    c00100b7 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 22 04 02 c0       	mov    ds:0xc0020422,eax
c00070cf:	66 89 15 20 04 02 c0 	mov    WORD PTR ds:0xc0020420,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0007217:	48                   	dec    eax
c0007218:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 c7 da 00 00       	call   c0014cec <HalSystemIdle()>
c0007225:	e8 18 4c 01 00       	call   c001be42 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 28 04 02 c0 ff 07 	mov    WORD PTR ds:0xc0020428,0x7ff
c000731d:	a3 2a 04 02 c0       	mov    ds:0xc002042a,eax
c0007322:	0f 01 1d 28 04 02 c0 	lidtd  ds:0xc0020428
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 50 b6 01 c0       	push   0xc001b650
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 60 b6 01 c0       	push   0xc001b660
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 6a b6 01 c0       	push   0xc001b66a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 74 b6 01 c0       	push   0xc001b674
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 7e b6 01 c0       	push   0xc001b67e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 88 b6 01 c0       	push   0xc001b688
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 92 b6 01 c0       	push   0xc001b692
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 9c b6 01 c0       	push   0xc001b69c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 a6 b6 01 c0       	push   0xc001b6a6
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 ae b6 01 c0       	push   0xc001b6ae
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 b8 b6 01 c0       	push   0xc001b6b8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 c0 b6 01 c0       	push   0xc001b6c0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 c8 b6 01 c0       	push   0xc001b6c8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 d0 b6 01 c0       	push   0xc001b6d0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 d8 b6 01 c0       	push   0xc001b6d8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 e0 b6 01 c0       	push   0xc001b6e0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ea b6 01 c0       	push   0xc001b6ea
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 f4 b6 01 c0       	push   0xc001b6f4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 fe b6 01 c0       	push   0xc001b6fe
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 98 b7 01 c0       	push   0xc001b798
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 9f b7 01 c0       	push   0xc001b79f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 8a b7 01 c0       	push   0xc001b78a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 91 b7 01 c0       	push   0xc001b791
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 08 b7 01 c0       	push   0xc001b708
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 12 b7 01 c0       	push   0xc001b712
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 1c b7 01 c0       	push   0xc001b71c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 26 b7 01 c0       	push   0xc001b726
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 30 b7 01 c0       	push   0xc001b730
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 3a b7 01 c0       	push   0xc001b73a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 44 b7 01 c0       	push   0xc001b744
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 4e b7 01 c0       	push   0xc001b74e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 58 b7 01 c0       	push   0xc001b758
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 62 b7 01 c0       	push   0xc001b762
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 6c b7 01 c0       	push   0xc001b76c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 76 b7 01 c0       	push   0xc001b776
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 80 b7 01 c0       	push   0xc001b780
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 d6 b7 01 c0       	push   0xc001b7d6
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 e0 b7 01 c0       	push   0xc001b7e0
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 ea b7 01 c0       	push   0xc001b7ea
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 f4 b7 01 c0       	push   0xc001b7f4
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 fe b7 01 c0       	push   0xc001b7fe
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 08 b8 01 c0       	push   0xc001b808
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 12 b8 01 c0       	push   0xc001b812
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 1c b8 01 c0       	push   0xc001b81c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c0007614:	e8 81 23 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 0d 15 00 00       	call   c0008b44 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 a6 b6 01 c0       	push   0xc001b6a6
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 42 15 00 00       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 b4 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0b4
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 10 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020510
c00076c2:	8b 3d b4 f0 01 c0    	mov    edi,DWORD PTR ds:0xc001f0b4
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 bc 21 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 b4 f0 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f0b4,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 b4 f0 01 c0       	mov    eax,ds:0xc001f0b4
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 dc d0 01 c0       	push   0xc001d0dc
c000770e:	e8 41 2d 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 0c d1 01 c0       	push   0xc001d10c
c000772d:	e8 85 89 00 00       	call   c00100b7 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 11 d1 01 c0       	push   0xc001d111
c0007743:	e8 6f 89 00 00       	call   c00100b7 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0007763:	48                   	dec    eax
c0007764:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c0007781:	e8 14 22 00 00       	call   c000999a <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c0007797:	e8 ba 1e 00 00       	call   c0009656 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 30 04 02 c0       	mov    ds:0xc0020430,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 18 d1 01 c0       	push   0xc001d118
c0007862:	e8 ed 2b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 65 81 00 00       	call   c000f9d1 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 38 1b 00 00       	call   c00093c0 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 e9 1b 00 00       	call   c000947c <VAS::VAS()>
c0007893:	89 1d 10 05 02 c0    	mov    DWORD PTR ds:0xc0020510,ebx
c0007899:	e8 3c 45 01 00       	call   c001bdda <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 18 04 02 c0    	mov    DWORD PTR ds:0xc0020418,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 63 1e 00 00       	call   c0009732 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 4c 04 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfbb4],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 30 d1 01 c0       	push   0xc001d130
c000792c:	e8 86 87 00 00       	call   c00100b7 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 4c 04 02 c0    	lea    edx,[ebp-0x3ffdfbb4]
c000796e:	8d 84 05 4d 04 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfbb3]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 44 04 02 c0    	add    DWORD PTR ds:0xc0020444,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 30 d1 01 c0       	push   0xc001d130
c0007993:	e8 1f 87 00 00       	call   c00100b7 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 44 04 02 c0    	sub    DWORD PTR ds:0xc0020444,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 4c 04 02 c0       	add    eax,0xc002044c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 b8 f0 01 c0    	mov    esi,DWORD PTR ds:0xc001f0b8
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 b8 f0 01 c0    	add    eax,DWORD PTR ds:0xc001f0b8
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 b8 f0 01 c0    	mov    edx,DWORD PTR ds:0xc001f0b8
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 44 04 02 c0    	dec    DWORD PTR ds:0xc0020444
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 d5 d1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d1d5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 34 86 00 00       	jmp    c00100b7 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 38 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020438
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 38 04 02 c0    	mov    DWORD PTR ds:0xc0020438,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 38 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020438,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 5c 04 02 c0 01 	xor    BYTE PTR ds:0xc002045c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 84 26 00 00       	call   c000a174 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 58 d1 01 c0       	push   0xc001d158
c0007aff:	e8 b3 85 00 00       	call   c00100b7 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 38 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020438
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 38 04 02 c0       	mov    eax,ds:0xc0020438
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 44 04 02 c0    	inc    DWORD PTR ds:0xc0020444
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0007b99:	48                   	dec    eax
c0007b9a:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 3c 04 02 c0    	cmp    DWORD PTR ds:0xc002043c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 3c 04 02 c0    	mov    DWORD PTR ds:0xc002043c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 4c 04 02 c0       	push   0xc002044c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 eb d1 01 c0       	push   0xc001d1eb
c0007c18:	e8 37 28 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 88 d1 01 c0       	push   0xc001d188
c0007ca4:	e8 ab 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ac d1 01 c0       	push   0xc001d1ac
c0007d40:	e8 0f 27 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 48 04 02 c0    	add    eax,DWORD PTR ds:0xc0020448
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 11 d2 01 c0       	push   0xc001d211
c0007d76:	e8 d9 26 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 03 d2 01 c0       	push   0xc001d203
c0007de5:	e8 cd 82 00 00       	call   c00100b7 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 48 04 02 c0 02 	add    DWORD PTR ds:0xc0020448,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 48 04 02 c0       	mov    ds:0xc0020448,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 70 d2 01 c0       	mov    edx,0xc001d270
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 cf 10 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 64 24 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 2d d2 01 c0       	push   0xc001d22d
c0007fa7:	e8 0b 81 00 00       	call   c00100b7 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0007ff0:	e8 d3 b2 00 00       	call   c00132c8 <schedule()>
c0007ff5:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 33 3c 01 00       	call   c001bcc0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 4a d2 01 c0       	push   0xc001d24a
c00080a2:	e8 10 80 00 00       	call   c00100b7 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 ee 0c 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 70 d2 01 c0       	mov    edx,0xc001d270
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba f8 d2 01 c0       	mov    edx,0xc001d2f8
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 5b 0e 00 00       	call   c0008fa0 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 ed 21 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 22 45 00 00       	call   c000c6ae <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 f2 dc 00 00       	call   c0015ea4 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d e0 f0 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0f20]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d e0 f0 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0f20]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 98 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1068]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 70 ef 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe1090]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 64 04 02 c0    	cmp    DWORD PTR ds:0xc0020464,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 15 da 00 00       	call   c0015d30 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 64 04 02 c0    	cmp    DWORD PTR ds:0xc0020464,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 70 da 00 00       	jmp    c0015e38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 84 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d284
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 a3 7c 00 00       	jmp    c00100b7 <KePanic(char const*)>
c0008414:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 64 04 02 c0    	mov    DWORD PTR ds:0xc0020464,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 3c 2d 00 00       	jmp    c000b2ab <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 92 d2 01 c0       	mov    esi,0xc001d292
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 64 04 02 c0    	cmp    DWORD PTR ds:0xc0020464,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 82 d5 00 00       	call   c0015e38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 b0 04 00 00       	call   c0008dbe <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba f8 d2 01 c0       	mov    edx,0xc001d2f8
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 7e 08 00 00       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 e6 0e 00 00       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008a50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a54:	84 db                	test   bl,bl
c0008a56:	0f 84 ba 00 00 00    	je     c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008a5c:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008a62:	80 fb 08             	cmp    bl,0x8
c0008a65:	75 2c                	jne    c0008a93 <VgaText::receiveKey(unsigned char)+0x4d>
c0008a67:	83 ec 0c             	sub    esp,0xc
c0008a6a:	57                   	push   edi
c0008a6b:	e8 d0 7a ff ff       	call   c0000540 <strlen>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	85 c0                	test   eax,eax
c0008a75:	74 41                	je     c0008ab8 <VgaText::receiveKey(unsigned char)+0x72>
c0008a77:	50                   	push   eax
c0008a78:	50                   	push   eax
c0008a79:	6a 08                	push   0x8
c0008a7b:	56                   	push   esi
c0008a7c:	e8 83 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a81:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a84:	e8 b7 7a ff ff       	call   c0000540 <strlen>
c0008a89:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008a91:	eb 22                	jmp    c0008ab5 <VgaText::receiveKey(unsigned char)+0x6f>
c0008a93:	0f be c3             	movsx  eax,bl
c0008a96:	52                   	push   edx
c0008a97:	52                   	push   edx
c0008a98:	50                   	push   eax
c0008a99:	56                   	push   esi
c0008a9a:	e8 65 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a9f:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008aa3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008aa8:	59                   	pop    ecx
c0008aa9:	58                   	pop    eax
c0008aaa:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008aae:	50                   	push   eax
c0008aaf:	57                   	push   edi
c0008ab0:	e8 0b 7d ff ff       	call   c00007c0 <strcat>
c0008ab5:	83 c4 10             	add    esp,0x10
c0008ab8:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008abf:	75 05                	jne    c0008ac6 <VgaText::receiveKey(unsigned char)+0x80>
c0008ac1:	80 fb 0a             	cmp    bl,0xa
c0008ac4:	75 50                	jne    c0008b16 <VgaText::receiveKey(unsigned char)+0xd0>
c0008ac6:	83 ec 0c             	sub    esp,0xc
c0008ac9:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008acf:	56                   	push   esi
c0008ad0:	e8 6b 7a ff ff       	call   c0000540 <strlen>
c0008ad5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008ad8:	89 c3                	mov    ebx,eax
c0008ada:	e8 61 7a ff ff       	call   c0000540 <strlen>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008ae6:	3d 80 00 00 00       	cmp    eax,0x80
c0008aeb:	76 10                	jbe    c0008afd <VgaText::receiveKey(unsigned char)+0xb7>
c0008aed:	83 ec 0c             	sub    esp,0xc
c0008af0:	68 a3 d2 01 c0       	push   0xc001d2a3
c0008af5:	e8 bd 75 00 00       	call   c00100b7 <KePanic(char const*)>
c0008afa:	83 c4 10             	add    esp,0x10
c0008afd:	50                   	push   eax
c0008afe:	50                   	push   eax
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 ba 7c ff ff       	call   c00007c0 <strcat>
c0008b06:	83 c4 0c             	add    esp,0xc
c0008b09:	6a 30                	push   0x30
c0008b0b:	6a 00                	push   0x0
c0008b0d:	57                   	push   edi
c0008b0e:	e8 bd 79 ff ff       	call   c00004d0 <memset>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	83 c4 10             	add    esp,0x10
c0008b19:	5b                   	pop    ebx
c0008b1a:	5e                   	pop    esi
c0008b1b:	5f                   	pop    edi
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::doUpdate()>:
c0008b1e:	c3                   	ret    

c0008b1f <newTerminal(char*)>:
c0008b1f:	83 ec 28             	sub    esp,0x28
c0008b22:	68 34 01 00 00       	push   0x134
c0008b27:	e8 8d ec ff ff       	call   c00077b9 <malloc>
c0008b2c:	5a                   	pop    edx
c0008b2d:	59                   	pop    ecx
c0008b2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008b32:	50                   	push   eax
c0008b33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b37:	e8 be fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008b3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b40:	83 c4 2c             	add    esp,0x2c
c0008b43:	c3                   	ret    

c0008b44 <TSS::TSS()>:
c0008b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008b48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008b4f:	90                   	nop
c0008b50:	c3                   	ret    
c0008b51:	90                   	nop
c0008b52:	66 90                	xchg   ax,ax

c0008b54 <TSS::setESP(unsigned long)>:
c0008b54:	55                   	push   ebp
c0008b55:	89 e5                	mov    ebp,esp
c0008b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008b5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008b60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008b63:	90                   	nop
c0008b64:	5d                   	pop    ebp
c0008b65:	c3                   	ret    
c0008b66:	66 90                	xchg   ax,ax

c0008b68 <TSS::flush()>:
c0008b68:	55                   	push   ebp
c0008b69:	89 e5                	mov    ebp,esp
c0008b6b:	83 ec 10             	sub    esp,0x10
c0008b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008b71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b73:	83 c8 03             	or     eax,0x3
c0008b76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008b7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008b7e:	66 89 d0             	mov    ax,dx
c0008b81:	0f 00 d8             	ltr    ax
c0008b84:	90                   	nop
c0008b85:	c9                   	leave  
c0008b86:	c3                   	ret    
c0008b87:	90                   	nop

c0008b88 <TSS::setup(unsigned long, unsigned long)>:
c0008b88:	55                   	push   ebp
c0008b89:	89 e5                	mov    ebp,esp
c0008b8b:	83 ec 18             	sub    esp,0x18
c0008b8e:	83 ec 0c             	sub    esp,0xc
c0008b91:	6a 68                	push   0x68
c0008b93:	e8 21 ec ff ff       	call   c00077b9 <malloc>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	89 c2                	mov    edx,eax
c0008b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ba6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ba9:	83 ec 04             	sub    esp,0x4
c0008bac:	6a 68                	push   0x68
c0008bae:	6a 00                	push   0x0
c0008bb0:	50                   	push   eax
c0008bb1:	e8 1a 79 ff ff       	call   c00004d0 <memset>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bfb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c07:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c13:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c1f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008c2e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c50:	0f 20 da             	mov    edx,cr3
c0008c53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008c56:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008c59:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008c5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c62:	83 ec 08             	sub    esp,0x8
c0008c65:	50                   	push   eax
c0008c66:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c69:	50                   	push   eax
c0008c6a:	e8 d1 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	83 ec 08             	sub    esp,0x8
c0008c75:	6a 68                	push   0x68
c0008c77:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008c7a:	50                   	push   eax
c0008c7b:	e8 dc e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008c87:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c8a:	83 e0 0f             	and    eax,0xf
c0008c8d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c90:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008c93:	83 c8 40             	or     eax,0x40
c0008c96:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008c99:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0008c9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ca4:	05 78 01 00 00       	add    eax,0x178
c0008ca9:	83 ec 04             	sub    esp,0x4
c0008cac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008caf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008cb2:	50                   	push   eax
c0008cb3:	e8 d8 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008cb8:	83 c4 10             	add    esp,0x10
c0008cbb:	89 c2                	mov    edx,eax
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	89 10                	mov    DWORD PTR [eax],edx
c0008cc2:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0008cc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008ccd:	05 78 01 00 00       	add    eax,0x178
c0008cd2:	83 ec 0c             	sub    esp,0xc
c0008cd5:	50                   	push   eax
c0008cd6:	e8 df e3 ff ff       	call   c00070ba <GDT::flush()>
c0008cdb:	83 c4 10             	add    esp,0x10
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce3:	c9                   	leave  
c0008ce4:	c3                   	ret    
c0008ce5:	90                   	nop

c0008ce6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008cea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008cee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008cf6:	75 08                	jne    c0008d00 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008cf8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008cfe:	eb 38                	jmp    c0008d38 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d00:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d05:	75 17                	jne    c0008d1e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d15:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d1b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008d1e:	89 c1                	mov    ecx,eax
c0008d20:	83 e1 fd             	and    ecx,0xfffffffd
c0008d23:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008d29:	74 cd                	je     c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d2b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008d30:	83 e0 ef             	and    eax,0xffffffef
c0008d33:	83 f8 08             	cmp    eax,0x8
c0008d36:	76 c0                	jbe    c0008cf8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008d38:	31 c0                	xor    eax,eax
c0008d3a:	c3                   	ret    
c0008d3b:	90                   	nop

c0008d3c <ReservedFilename::isAtty()>:
c0008d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008d43:	31 c0                	xor    eax,eax
c0008d45:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008d4b:	74 09                	je     c0008d56 <ReservedFilename::isAtty()+0x1a>
c0008d4d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008d53:	0f 94 c0             	sete   al
c0008d56:	c3                   	ret    
c0008d57:	90                   	nop

c0008d58 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008d58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d67:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d6c:	75 08                	jne    c0008d76 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008d6e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d74:	eb 3d                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d7b:	75 17                	jne    c0008d94 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008d7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d91:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008d94:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008d99:	75 04                	jne    c0008d9f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008d9b:	89 0a                	mov    DWORD PTR [edx],ecx
c0008d9d:	eb 14                	jmp    c0008db3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008d9f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008da4:	74 c8                	je     c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008da6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dab:	83 e0 ef             	and    eax,0xffffffef
c0008dae:	83 f8 08             	cmp    eax,0x8
c0008db1:	76 bb                	jbe    c0008d6e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008db3:	31 c0                	xor    eax,eax
c0008db5:	c3                   	ret    

c0008db6 <UnixFile::getFileDescriptor()>:
c0008db6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dbd:	c3                   	ret    

c0008dbe <UnixFile::UnixFile(int)>:
c0008dbe:	53                   	push   ebx
c0008dbf:	83 ec 28             	sub    esp,0x28
c0008dc2:	ba c0 d3 01 c0       	mov    edx,0xc001d3c0
c0008dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008dcb:	89 10                	mov    DWORD PTR [eax],edx
c0008dcd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008dd5:	0f 8f 8c 01 00 00    	jg     c0008f67 <UnixFile::UnixFile(int)+0x1a9>
c0008ddb:	a1 20 f1 01 c0       	mov    eax,ds:0xc001f120
c0008de0:	8d 50 01             	lea    edx,[eax+0x1]
c0008de3:	89 15 20 f1 01 c0    	mov    DWORD PTR ds:0xc001f120,edx
c0008de9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008ded:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008df0:	83 ec 08             	sub    esp,0x8
c0008df3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008df7:	68 f8 04 02 c0       	push   0xc00204f8
c0008dfc:	e8 a7 30 01 00       	call   c001bea8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e01:	83 c4 10             	add    esp,0x10
c0008e04:	a0 f4 04 02 c0       	mov    al,ds:0xc00204f4
c0008e09:	83 f0 01             	xor    eax,0x1
c0008e0c:	84 c0                	test   al,al
c0008e0e:	0f 84 54 01 00 00    	je     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008e14:	c6 05 f4 04 02 c0 01 	mov    BYTE PTR ds:0xc00204f4,0x1
c0008e1b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008e23:	83 ec 0c             	sub    esp,0xc
c0008e26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008e2a:	e8 8a e9 ff ff       	call   c00077b9 <malloc>
c0008e2f:	83 c4 10             	add    esp,0x10
c0008e32:	89 c3                	mov    ebx,eax
c0008e34:	83 ec 08             	sub    esp,0x8
c0008e37:	68 03 ff ff 0f       	push   0xfffff03
c0008e3c:	53                   	push   ebx
c0008e3d:	e8 2c 01 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e42:	83 c4 10             	add    esp,0x10
c0008e45:	89 1d ec 04 02 c0    	mov    DWORD PTR ds:0xc00204ec,ebx
c0008e4b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008e53:	83 ec 0c             	sub    esp,0xc
c0008e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e5a:	e8 5a e9 ff ff       	call   c00077b9 <malloc>
c0008e5f:	83 c4 10             	add    esp,0x10
c0008e62:	89 c3                	mov    ebx,eax
c0008e64:	83 ec 08             	sub    esp,0x8
c0008e67:	68 01 ff ff 0f       	push   0xfffff01
c0008e6c:	53                   	push   ebx
c0008e6d:	e8 fc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008e72:	83 c4 10             	add    esp,0x10
c0008e75:	89 1d f0 04 02 c0    	mov    DWORD PTR ds:0xc00204f0,ebx
c0008e7b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008e83:	83 ec 0c             	sub    esp,0xc
c0008e86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008e8a:	e8 2a e9 ff ff       	call   c00077b9 <malloc>
c0008e8f:	83 c4 10             	add    esp,0x10
c0008e92:	89 c3                	mov    ebx,eax
c0008e94:	83 ec 08             	sub    esp,0x8
c0008e97:	68 00 ff ff 0f       	push   0xfffff00
c0008e9c:	53                   	push   ebx
c0008e9d:	e8 cc 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ea2:	83 c4 10             	add    esp,0x10
c0008ea5:	89 1d e4 04 02 c0    	mov    DWORD PTR ds:0xc00204e4,ebx
c0008eab:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008eb3:	83 ec 0c             	sub    esp,0xc
c0008eb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008eba:	e8 fa e8 ff ff       	call   c00077b9 <malloc>
c0008ebf:	83 c4 10             	add    esp,0x10
c0008ec2:	89 c3                	mov    ebx,eax
c0008ec4:	83 ec 08             	sub    esp,0x8
c0008ec7:	68 02 ff ff 0f       	push   0xfffff02
c0008ecc:	53                   	push   ebx
c0008ecd:	e8 9c 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008ed2:	83 c4 10             	add    esp,0x10
c0008ed5:	89 1d e8 04 02 c0    	mov    DWORD PTR ds:0xc00204e8,ebx
c0008edb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008ee3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008ee8:	7f 7e                	jg     c0008f68 <UnixFile::UnixFile(int)+0x1aa>
c0008eea:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008ef2:	83 ec 0c             	sub    esp,0xc
c0008ef5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ef9:	e8 bb e8 ff ff       	call   c00077b9 <malloc>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 c3                	mov    ebx,eax
c0008f03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f07:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f0c:	83 ec 08             	sub    esp,0x8
c0008f0f:	50                   	push   eax
c0008f10:	53                   	push   ebx
c0008f11:	e8 58 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f16:	83 c4 10             	add    esp,0x10
c0008f19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f1d:	89 1c 85 c0 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb40],ebx
c0008f24:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008f2c:	83 ec 0c             	sub    esp,0xc
c0008f2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f33:	e8 81 e8 ff ff       	call   c00077b9 <malloc>
c0008f38:	83 c4 10             	add    esp,0x10
c0008f3b:	89 c3                	mov    ebx,eax
c0008f3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f41:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008f46:	83 ec 08             	sub    esp,0x8
c0008f49:	50                   	push   eax
c0008f4a:	53                   	push   ebx
c0008f4b:	e8 1e 00 00 00       	call   c0008f6e <ReservedFilename::ReservedFilename(int)>
c0008f50:	83 c4 10             	add    esp,0x10
c0008f53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f57:	89 1c 85 80 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb80],ebx
c0008f5e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008f62:	e9 7c ff ff ff       	jmp    c0008ee3 <UnixFile::UnixFile(int)+0x125>
c0008f67:	90                   	nop
c0008f68:	83 c4 28             	add    esp,0x28
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c3                   	ret    
c0008f6d:	90                   	nop

c0008f6e <ReservedFilename::ReservedFilename(int)>:
c0008f6e:	83 ec 0c             	sub    esp,0xc
c0008f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f75:	83 ec 08             	sub    esp,0x8
c0008f78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f7c:	50                   	push   eax
c0008f7d:	e8 3c fe ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	ba dc d3 01 c0       	mov    edx,0xc001d3dc
c0008f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f8e:	89 10                	mov    DWORD PTR [eax],edx
c0008f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008f98:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9b:	90                   	nop
c0008f9c:	83 c4 0c             	add    esp,0xc
c0008f9f:	c3                   	ret    

c0008fa0 <UnixFile::~UnixFile()>:
c0008fa0:	83 ec 1c             	sub    esp,0x1c
c0008fa3:	ba c0 d3 01 c0       	mov    edx,0xc001d3c0
c0008fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fac:	89 10                	mov    DWORD PTR [eax],edx
c0008fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0008fba:	7f 73                	jg     c000902f <UnixFile::~UnixFile()+0x8f>
c0008fbc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008fc4:	83 ec 0c             	sub    esp,0xc
c0008fc7:	68 f8 04 02 c0       	push   0xc00204f8
c0008fcc:	e8 ab 2f 01 00       	call   c001bf7c <LinkedList<UnixFile>::getFirstElement()>
c0008fd1:	83 c4 10             	add    esp,0x10
c0008fd4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fd8:	83 ec 0c             	sub    esp,0xc
c0008fdb:	68 f8 04 02 c0       	push   0xc00204f8
c0008fe0:	e8 9f 2f 01 00       	call   c001bf84 <LinkedList<UnixFile>::removeFirst()>
c0008fe5:	83 c4 10             	add    esp,0x10
c0008fe8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008fec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0008ff0:	74 40                	je     c0009032 <UnixFile::~UnixFile()+0x92>
c0008ff2:	83 ec 08             	sub    esp,0x8
c0008ff5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008ff9:	68 f8 04 02 c0       	push   0xc00204f8
c0008ffe:	e8 a5 2e 01 00       	call   c001bea8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009003:	83 c4 10             	add    esp,0x10
c0009006:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000900a:	8d 50 01             	lea    edx,[eax+0x1]
c000900d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009011:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009016:	0f 94 c0             	sete   al
c0009019:	84 c0                	test   al,al
c000901b:	74 a7                	je     c0008fc4 <UnixFile::~UnixFile()+0x24>
c000901d:	83 ec 0c             	sub    esp,0xc
c0009020:	68 98 d3 01 c0       	push   0xc001d398
c0009025:	e8 8d 70 00 00       	call   c00100b7 <KePanic(char const*)>
c000902a:	83 c4 10             	add    esp,0x10
c000902d:	eb 95                	jmp    c0008fc4 <UnixFile::~UnixFile()+0x24>
c000902f:	90                   	nop
c0009030:	eb 01                	jmp    c0009033 <UnixFile::~UnixFile()+0x93>
c0009032:	90                   	nop
c0009033:	90                   	nop
c0009034:	83 c4 1c             	add    esp,0x1c
c0009037:	c3                   	ret    

c0009038 <UnixFile::~UnixFile()>:
c0009038:	83 ec 0c             	sub    esp,0xc
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009042:	e8 59 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c0009047:	83 c4 10             	add    esp,0x10
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	6a 0c                	push   0xc
c000904f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009053:	e8 06 13 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	83 c4 0c             	add    esp,0xc
c000905e:	c3                   	ret    
c000905f:	90                   	nop

c0009060 <ReservedFilename::~ReservedFilename()>:
c0009060:	83 ec 0c             	sub    esp,0xc
c0009063:	ba dc d3 01 c0       	mov    edx,0xc001d3dc
c0009068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000906c:	89 10                	mov    DWORD PTR [eax],edx
c000906e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009072:	83 ec 0c             	sub    esp,0xc
c0009075:	50                   	push   eax
c0009076:	e8 25 ff ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000907b:	83 c4 10             	add    esp,0x10
c000907e:	90                   	nop
c000907f:	83 c4 0c             	add    esp,0xc
c0009082:	c3                   	ret    
c0009083:	90                   	nop

c0009084 <ReservedFilename::~ReservedFilename()>:
c0009084:	83 ec 0c             	sub    esp,0xc
c0009087:	83 ec 0c             	sub    esp,0xc
c000908a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000908e:	e8 cd ff ff ff       	call   c0009060 <ReservedFilename::~ReservedFilename()>
c0009093:	83 c4 10             	add    esp,0x10
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	6a 0c                	push   0xc
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 ba 12 00 00       	call   c000a35e <operator delete(void*, unsigned long)>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	83 c4 0c             	add    esp,0xc
c00090aa:	c3                   	ret    

c00090ab <getFromFileDescriptor(int)>:
c00090ab:	53                   	push   ebx
c00090ac:	83 ec 08             	sub    esp,0x8
c00090af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00090b3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00090b9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00090bf:	7f 2c                	jg     c00090ed <getFromFileDescriptor(int)+0x42>
c00090c1:	83 ec 0c             	sub    esp,0xc
c00090c4:	68 f8 04 02 c0       	push   0xc00204f8
c00090c9:	e8 ae 2e 01 00       	call   c001bf7c <LinkedList<UnixFile>::getFirstElement()>
c00090ce:	83 c4 10             	add    esp,0x10
c00090d1:	85 c0                	test   eax,eax
c00090d3:	75 04                	jne    c00090d9 <getFromFileDescriptor(int)+0x2e>
c00090d5:	31 c0                	xor    eax,eax
c00090d7:	eb 6e                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c00090d9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00090dc:	74 69                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090de:	52                   	push   edx
c00090df:	52                   	push   edx
c00090e0:	50                   	push   eax
c00090e1:	68 f8 04 02 c0       	push   0xc00204f8
c00090e6:	e8 3b 2f 01 00       	call   c001c026 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00090eb:	eb e1                	jmp    c00090ce <getFromFileDescriptor(int)+0x23>
c00090ed:	a1 ec 04 02 c0       	mov    eax,ds:0xc00204ec
c00090f2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00090f8:	74 4d                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c00090fa:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c00090ff:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009105:	74 40                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009107:	a1 e8 04 02 c0       	mov    eax,ds:0xc00204e8
c000910c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009112:	74 33                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009114:	a1 e4 04 02 c0       	mov    eax,ds:0xc00204e4
c0009119:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000911f:	74 26                	je     c0009147 <getFromFileDescriptor(int)+0x9c>
c0009121:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009127:	83 f8 08             	cmp    eax,0x8
c000912a:	77 09                	ja     c0009135 <getFromFileDescriptor(int)+0x8a>
c000912c:	8b 04 85 c0 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfb40]
c0009133:	eb 12                	jmp    c0009147 <getFromFileDescriptor(int)+0x9c>
c0009135:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000913b:	83 fb 08             	cmp    ebx,0x8
c000913e:	77 95                	ja     c00090d5 <getFromFileDescriptor(int)+0x2a>
c0009140:	8b 04 9d 80 04 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfb80]
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <__static_initialization_and_destruction_0(int, int)>:
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009154:	75 34                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009156:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000915e:	75 2a                	jne    c000918a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009160:	83 ec 0c             	sub    esp,0xc
c0009163:	68 f8 04 02 c0       	push   0xc00204f8
c0009168:	e8 f9 2c 01 00       	call   c001be66 <LinkedList<UnixFile>::LinkedList()>
c000916d:	83 c4 10             	add    esp,0x10
c0009170:	83 ec 04             	sub    esp,0x4
c0009173:	68 b0 f0 01 c0       	push   0xc001f0b0
c0009178:	68 f8 04 02 c0       	push   0xc00204f8
c000917d:	68 64 be 01 c0       	push   0xc001be64
c0009182:	e8 87 11 00 00       	call   c000a30e <__cxa_atexit>
c0009187:	83 c4 10             	add    esp,0x10
c000918a:	90                   	nop
c000918b:	83 c4 0c             	add    esp,0xc
c000918e:	c3                   	ret    

c000918f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000918f:	83 ec 0c             	sub    esp,0xc
c0009192:	83 ec 08             	sub    esp,0x8
c0009195:	68 ff ff 00 00       	push   0xffff
c000919a:	6a 01                	push   0x1
c000919c:	e8 ab ff ff ff       	call   c000914c <__static_initialization_and_destruction_0(int, int)>
c00091a1:	83 c4 10             	add    esp,0x10
c00091a4:	83 c4 0c             	add    esp,0xc
c00091a7:	c3                   	ret    

c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00091a8:	53                   	push   ebx
c00091a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00091ad:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00091b1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00091b7:	89 c8                	mov    eax,ecx
c00091b9:	d1 e8                	shr    eax,1
c00091bb:	03 05 28 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f128
c00091c1:	83 e1 01             	and    ecx,0x1
c00091c4:	8a 10                	mov    dl,BYTE PTR [eax]
c00091c6:	75 09                	jne    c00091d1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00091c8:	83 e2 f0             	and    edx,0xfffffff0
c00091cb:	09 da                	or     edx,ebx
c00091cd:	88 10                	mov    BYTE PTR [eax],dl
c00091cf:	5b                   	pop    ebx
c00091d0:	c3                   	ret    
c00091d1:	c1 e3 04             	shl    ebx,0x4
c00091d4:	83 e2 0f             	and    edx,0xf
c00091d7:	09 da                	or     edx,ebx
c00091d9:	88 10                	mov    BYTE PTR [eax],dl
c00091db:	5b                   	pop    ebx
c00091dc:	c3                   	ret    

c00091dd <Virt::getPageState(unsigned long)>:
c00091dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091e1:	8b 0d 28 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f128
c00091e7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00091ed:	89 d0                	mov    eax,edx
c00091ef:	d1 e8                	shr    eax,1
c00091f1:	83 e2 01             	and    edx,0x1
c00091f4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00091f7:	75 04                	jne    c00091fd <Virt::getPageState(unsigned long)+0x20>
c00091f9:	83 e0 0f             	and    eax,0xf
c00091fc:	c3                   	ret    
c00091fd:	c0 e8 04             	shr    al,0x4
c0009200:	c3                   	ret    

c0009201 <Virt::allocateKernelVirtualPages(int)>:
c0009201:	55                   	push   ebp
c0009202:	31 ed                	xor    ebp,ebp
c0009204:	57                   	push   edi
c0009205:	56                   	push   esi
c0009206:	53                   	push   ebx
c0009207:	31 db                	xor    ebx,ebx
c0009209:	83 ec 1c             	sub    esp,0x1c
c000920c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009210:	8b 3d 24 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f124
c0009216:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000921b:	57                   	push   edi
c000921c:	e8 bc ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c0009221:	5a                   	pop    edx
c0009222:	84 c0                	test   al,al
c0009224:	75 3a                	jne    c0009260 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009226:	85 db                	test   ebx,ebx
c0009228:	75 02                	jne    c000922c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000922a:	89 fd                	mov    ebp,edi
c000922c:	43                   	inc    ebx
c000922d:	39 f3                	cmp    ebx,esi
c000922f:	74 5a                	je     c000928b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009231:	47                   	inc    edi
c0009232:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009238:	76 31                	jbe    c000926b <Virt::allocateKernelVirtualPages(int)+0x6a>
c000923a:	c7 05 24 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f124,0xc8000
c0009244:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009249:	75 28                	jne    c0009273 <Virt::allocateKernelVirtualPages(int)+0x72>
c000924b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009250:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009255:	57                   	push   edi
c0009256:	e8 82 ff ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000925b:	5a                   	pop    edx
c000925c:	84 c0                	test   al,al
c000925e:	74 c6                	je     c0009226 <Virt::allocateKernelVirtualPages(int)+0x25>
c0009260:	31 db                	xor    ebx,ebx
c0009262:	47                   	inc    edi
c0009263:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009269:	77 cf                	ja     c000923a <Virt::allocateKernelVirtualPages(int)+0x39>
c000926b:	89 3d 24 f1 01 c0    	mov    DWORD PTR ds:0xc001f124,edi
c0009271:	eb a8                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009273:	83 ec 0c             	sub    esp,0xc
c0009276:	68 f0 d3 01 c0       	push   0xc001d3f0
c000927b:	e8 37 6e 00 00       	call   c00100b7 <KePanic(char const*)>
c0009280:	8b 3d 24 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f124
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	eb 90                	jmp    c000921b <Virt::allocateKernelVirtualPages(int)+0x1a>
c000928b:	89 2d 24 f1 01 c0    	mov    DWORD PTR ds:0xc001f124,ebp
c0009291:	4b                   	dec    ebx
c0009292:	74 5f                	je     c00092f3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009294:	85 f6                	test   esi,esi
c0009296:	74 3d                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009298:	89 e8                	mov    eax,ebp
c000929a:	31 db                	xor    ebx,ebx
c000929c:	8d 7e ff             	lea    edi,[esi-0x1]
c000929f:	eb 14                	jmp    c00092b5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00092a1:	6a 01                	push   0x1
c00092a3:	43                   	inc    ebx
c00092a4:	50                   	push   eax
c00092a5:	e8 fe fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092aa:	58                   	pop    eax
c00092ab:	39 f3                	cmp    ebx,esi
c00092ad:	5a                   	pop    edx
c00092ae:	74 25                	je     c00092d5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00092b0:	a1 24 f1 01 c0       	mov    eax,ds:0xc001f124
c00092b5:	8d 50 01             	lea    edx,[eax+0x1]
c00092b8:	85 db                	test   ebx,ebx
c00092ba:	89 15 24 f1 01 c0    	mov    DWORD PTR ds:0xc001f124,edx
c00092c0:	74 20                	je     c00092e2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00092c2:	39 df                	cmp    edi,ebx
c00092c4:	75 db                	jne    c00092a1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00092c6:	6a 03                	push   0x3
c00092c8:	43                   	inc    ebx
c00092c9:	50                   	push   eax
c00092ca:	e8 d9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092cf:	59                   	pop    ecx
c00092d0:	39 f3                	cmp    ebx,esi
c00092d2:	58                   	pop    eax
c00092d3:	75 db                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092d5:	83 c4 1c             	add    esp,0x1c
c00092d8:	89 e8                	mov    eax,ebp
c00092da:	5b                   	pop    ebx
c00092db:	c1 e0 0c             	shl    eax,0xc
c00092de:	5e                   	pop    esi
c00092df:	5f                   	pop    edi
c00092e0:	5d                   	pop    ebp
c00092e1:	c3                   	ret    
c00092e2:	6a 02                	push   0x2
c00092e4:	bb 01 00 00 00       	mov    ebx,0x1
c00092e9:	50                   	push   eax
c00092ea:	e8 b9 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00092ef:	58                   	pop    eax
c00092f0:	5a                   	pop    edx
c00092f1:	eb bd                	jmp    c00092b0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00092f3:	6a 04                	push   0x4
c00092f5:	8d 45 01             	lea    eax,[ebp+0x1]
c00092f8:	55                   	push   ebp
c00092f9:	a3 24 f1 01 c0       	mov    ds:0xc001f124,eax
c00092fe:	e8 a5 fe ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009303:	59                   	pop    ecx
c0009304:	89 e8                	mov    eax,ebp
c0009306:	5b                   	pop    ebx
c0009307:	c1 e0 0c             	shl    eax,0xc
c000930a:	83 c4 1c             	add    esp,0x1c
c000930d:	5b                   	pop    ebx
c000930e:	5e                   	pop    esi
c000930f:	5f                   	pop    edi
c0009310:	5d                   	pop    ebp
c0009311:	c3                   	ret    

c0009312 <Virt::freeSwapfilePage(unsigned long)>:
c0009312:	53                   	push   ebx
c0009313:	8b 15 0c 05 02 c0    	mov    edx,DWORD PTR ds:0xc002050c
c0009319:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000931d:	b8 01 00 00 00       	mov    eax,0x1
c0009322:	89 cb                	mov    ebx,ecx
c0009324:	d3 e0                	shl    eax,cl
c0009326:	c1 eb 05             	shr    ebx,0x5
c0009329:	f7 d0                	not    eax
c000932b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000932e:	5b                   	pop    ebx
c000932f:	c3                   	ret    

c0009330 <Virt::swapIDToSector(unsigned long)>:
c0009330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009334:	0f af 05 2c f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f12c
c000933b:	03 05 34 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f134
c0009341:	c3                   	ret    

c0009342 <Virt::allocateSwapfilePage()>:
c0009342:	55                   	push   ebp
c0009343:	31 d2                	xor    edx,edx
c0009345:	57                   	push   edi
c0009346:	56                   	push   esi
c0009347:	53                   	push   ebx
c0009348:	83 ec 0c             	sub    esp,0xc
c000934b:	8b 0d 2c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f12c
c0009351:	a1 30 f1 01 c0       	mov    eax,ds:0xc001f130
c0009356:	f7 f1                	div    ecx
c0009358:	39 0d 30 f1 01 c0    	cmp    DWORD PTR ds:0xc001f130,ecx
c000935e:	72 2d                	jb     c000938d <Virt::allocateSwapfilePage()+0x4b>
c0009360:	8b 35 0c 05 02 c0    	mov    esi,DWORD PTR ds:0xc002050c
c0009366:	8b 16                	mov    edx,DWORD PTR [esi]
c0009368:	f6 c2 01             	test   dl,0x1
c000936b:	74 3c                	je     c00093a9 <Virt::allocateSwapfilePage()+0x67>
c000936d:	31 c9                	xor    ecx,ecx
c000936f:	bf 01 00 00 00       	mov    edi,0x1
c0009374:	eb 12                	jmp    c0009388 <Virt::allocateSwapfilePage()+0x46>
c0009376:	89 fd                	mov    ebp,edi
c0009378:	89 ca                	mov    edx,ecx
c000937a:	d3 e5                	shl    ebp,cl
c000937c:	c1 ea 05             	shr    edx,0x5
c000937f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009382:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009384:	85 ea                	test   edx,ebp
c0009386:	74 2a                	je     c00093b2 <Virt::allocateSwapfilePage()+0x70>
c0009388:	41                   	inc    ecx
c0009389:	39 c8                	cmp    eax,ecx
c000938b:	77 e9                	ja     c0009376 <Virt::allocateSwapfilePage()+0x34>
c000938d:	83 ec 0c             	sub    esp,0xc
c0009390:	68 57 d5 01 c0       	push   0xc001d557
c0009395:	e8 1d 6d 00 00       	call   c00100b7 <KePanic(char const*)>
c000939a:	83 c4 10             	add    esp,0x10
c000939d:	31 c9                	xor    ecx,ecx
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 c8                	mov    eax,ecx
c00093a4:	5b                   	pop    ebx
c00093a5:	5e                   	pop    esi
c00093a6:	5f                   	pop    edi
c00093a7:	5d                   	pop    ebp
c00093a8:	c3                   	ret    
c00093a9:	89 f3                	mov    ebx,esi
c00093ab:	bd 01 00 00 00       	mov    ebp,0x1
c00093b0:	31 c9                	xor    ecx,ecx
c00093b2:	09 ea                	or     edx,ebp
c00093b4:	89 c8                	mov    eax,ecx
c00093b6:	89 13                	mov    DWORD PTR [ebx],edx
c00093b8:	83 c4 0c             	add    esp,0xc
c00093bb:	5b                   	pop    ebx
c00093bc:	5e                   	pop    esi
c00093bd:	5f                   	pop    edi
c00093be:	5d                   	pop    ebp
c00093bf:	c3                   	ret    

c00093c0 <Virt::virtualMemorySetup()>:
c00093c0:	53                   	push   ebx
c00093c1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093c6:	6a 0f                	push   0xf
c00093c8:	53                   	push   ebx
c00093c9:	43                   	inc    ebx
c00093ca:	e8 d9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093cf:	58                   	pop    eax
c00093d0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093d6:	5a                   	pop    edx
c00093d7:	75 ed                	jne    c00093c6 <Virt::virtualMemorySetup()+0x6>
c00093d9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00093de:	6a 00                	push   0x0
c00093e0:	53                   	push   ebx
c00093e1:	43                   	inc    ebx
c00093e2:	e8 c1 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093e7:	59                   	pop    ecx
c00093e8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00093ee:	58                   	pop    eax
c00093ef:	75 ed                	jne    c00093de <Virt::virtualMemorySetup()+0x1e>
c00093f1:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00093f6:	6a 0f                	push   0xf
c00093f8:	53                   	push   ebx
c00093f9:	43                   	inc    ebx
c00093fa:	e8 a9 fd ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093ff:	58                   	pop    eax
c0009400:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009406:	5a                   	pop    edx
c0009407:	75 ed                	jne    c00093f6 <Virt::virtualMemorySetup()+0x36>
c0009409:	5b                   	pop    ebx
c000940a:	c3                   	ret    

c000940b <Virt::setupPageSwapping(int)>:
c000940b:	53                   	push   ebx
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009413:	a1 88 29 02 c0       	mov    eax,ds:0xc0022988
c0009418:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000941e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009420:	53                   	push   ebx
c0009421:	c1 e3 0b             	shl    ebx,0xb
c0009424:	68 6e d5 01 c0       	push   0xc001d56e
c0009429:	50                   	push   eax
c000942a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000942d:	89 1d 30 f1 01 c0    	mov    DWORD PTR ds:0xc001f130,ebx
c0009433:	c6 05 38 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f138,0x43
c000943a:	c1 eb 08             	shr    ebx,0x8
c000943d:	a3 34 f1 01 c0       	mov    ds:0xc001f134,eax
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	c7 05 2c f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f12c,0x8
c000944f:	e8 65 e3 ff ff       	call   c00077b9 <malloc>
c0009454:	83 c4 0c             	add    esp,0xc
c0009457:	89 c1                	mov    ecx,eax
c0009459:	a3 0c 05 02 c0       	mov    ds:0xc002050c,eax
c000945e:	31 d2                	xor    edx,edx
c0009460:	a1 30 f1 01 c0       	mov    eax,ds:0xc001f130
c0009465:	f7 35 2c f1 01 c0    	div    DWORD PTR ds:0xc001f12c
c000946b:	c1 e8 05             	shr    eax,0x5
c000946e:	50                   	push   eax
c000946f:	6a 00                	push   0x0
c0009471:	51                   	push   ecx
c0009472:	e8 59 70 ff ff       	call   c00004d0 <memset>
c0009477:	83 c4 18             	add    esp,0x18
c000947a:	5b                   	pop    ebx
c000947b:	c3                   	ret    

c000947c <VAS::VAS()>:
c000947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009480:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000948b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009492:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009496:	a3 10 05 02 c0       	mov    ds:0xc0020510,eax
c000949b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00094a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094a7:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00094aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094ae:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00094b5:	90                   	nop
c00094b6:	c3                   	ret    
c00094b7:	90                   	nop

c00094b8 <VAS::VAS(VAS*)>:
c00094b8:	83 ec 0c             	sub    esp,0xc
c00094bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00094c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00094d1:	83 ec 0c             	sub    esp,0xc
c00094d4:	68 10 d4 01 c0       	push   0xc001d410
c00094d9:	e8 d9 6b 00 00       	call   c00100b7 <KePanic(char const*)>
c00094de:	83 c4 10             	add    esp,0x10
c00094e1:	90                   	nop
c00094e2:	83 c4 0c             	add    esp,0xc
c00094e5:	c3                   	ret    

c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00094e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00094ea:	89 c2                	mov    edx,eax
c00094ec:	c1 e8 0a             	shr    eax,0xa
c00094ef:	c1 ea 16             	shr    edx,0x16
c00094f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00094f7:	19 c9                	sbb    ecx,ecx
c00094f9:	c1 e2 0c             	shl    edx,0xc
c00094fc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009502:	25 fc 0f 00 00       	and    eax,0xffc
c0009507:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000950e:	01 d0                	add    eax,edx
c0009510:	c3                   	ret    
c0009511:	90                   	nop

c0009512 <VAS::getPageTableEntry(unsigned long)>:
c0009512:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009516:	89 ca                	mov    edx,ecx
c0009518:	c1 e9 0a             	shr    ecx,0xa
c000951b:	c1 ea 16             	shr    edx,0x16
c000951e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009524:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000952a:	c1 e0 0c             	shl    eax,0xc
c000952d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009530:	c3                   	ret    

c0009531 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009531:	57                   	push   edi
c0009532:	56                   	push   esi
c0009533:	be 01 00 00 00       	mov    esi,0x1
c0009538:	53                   	push   ebx
c0009539:	83 ec 10             	sub    esp,0x10
c000953c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009540:	c1 eb 0c             	shr    ebx,0xc
c0009543:	eb 3f                	jmp    c0009584 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009545:	83 ec 08             	sub    esp,0x8
c0009548:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c000954d:	57                   	push   edi
c000954e:	50                   	push   eax
c000954f:	e8 be ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009554:	83 c4 10             	add    esp,0x10
c0009557:	8b 00                	mov    eax,DWORD PTR [eax]
c0009559:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000955d:	f6 c4 04             	test   ah,0x4
c0009560:	75 60                	jne    c00095c2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009562:	80 fa 04             	cmp    dl,0x4
c0009565:	74 79                	je     c00095e0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009567:	80 fa 02             	cmp    dl,0x2
c000956a:	0f 84 89 00 00 00    	je     c00095f9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009570:	80 fa 03             	cmp    dl,0x3
c0009573:	0f 84 ae 00 00 00    	je     c0009627 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009579:	fe ca                	dec    dl
c000957b:	0f 84 93 00 00 00    	je     c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009581:	43                   	inc    ebx
c0009582:	31 f6                	xor    esi,esi
c0009584:	53                   	push   ebx
c0009585:	89 df                	mov    edi,ebx
c0009587:	e8 51 fc ff ff       	call   c00091dd <Virt::getPageState(unsigned long)>
c000958c:	c1 e7 0c             	shl    edi,0xc
c000958f:	5a                   	pop    edx
c0009590:	84 c0                	test   al,al
c0009592:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009596:	75 ad                	jne    c0009545 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009598:	83 ec 0c             	sub    esp,0xc
c000959b:	68 85 d5 01 c0       	push   0xc001d585
c00095a0:	e8 12 6b 00 00       	call   c00100b7 <KePanic(char const*)>
c00095a5:	5a                   	pop    edx
c00095a6:	59                   	pop    ecx
c00095a7:	57                   	push   edi
c00095a8:	8b 3d 10 05 02 c0    	mov    edi,DWORD PTR ds:0xc0020510
c00095ae:	57                   	push   edi
c00095af:	e8 5e ff ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00095b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095bd:	f6 c4 04             	test   ah,0x4
c00095c0:	74 bf                	je     c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00095c2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00095c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00095cb:	83 ec 0c             	sub    esp,0xc
c00095ce:	50                   	push   eax
c00095cf:	e8 5f e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00095d4:	83 c4 10             	add    esp,0x10
c00095d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095db:	80 fa 04             	cmp    dl,0x4
c00095de:	75 87                	jne    c0009567 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00095e0:	89 f0                	mov    eax,esi
c00095e2:	84 c0                	test   al,al
c00095e4:	75 47                	jne    c000962d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00095e6:	c7 44 24 20 34 d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d434
c00095ee:	83 c4 10             	add    esp,0x10
c00095f1:	5b                   	pop    ebx
c00095f2:	5e                   	pop    esi
c00095f3:	5f                   	pop    edi
c00095f4:	e9 be 6a 00 00       	jmp    c00100b7 <KePanic(char const*)>
c00095f9:	89 f0                	mov    eax,esi
c00095fb:	84 c0                	test   al,al
c00095fd:	75 15                	jne    c0009614 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095ff:	83 ec 0c             	sub    esp,0xc
c0009602:	68 a1 d5 01 c0       	push   0xc001d5a1
c0009607:	e8 ab 6a 00 00       	call   c00100b7 <KePanic(char const*)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	e9 6d ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009614:	83 ec 08             	sub    esp,0x8
c0009617:	6a 00                	push   0x0
c0009619:	53                   	push   ebx
c000961a:	e8 89 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000961f:	83 c4 10             	add    esp,0x10
c0009622:	e9 5a ff ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009627:	89 f0                	mov    eax,esi
c0009629:	84 c0                	test   al,al
c000962b:	75 15                	jne    c0009642 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000962d:	83 ec 08             	sub    esp,0x8
c0009630:	6a 00                	push   0x0
c0009632:	53                   	push   ebx
c0009633:	e8 70 fb ff ff       	call   c00091a8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009638:	83 c4 10             	add    esp,0x10
c000963b:	83 c4 10             	add    esp,0x10
c000963e:	5b                   	pop    ebx
c000963f:	5e                   	pop    esi
c0009640:	5f                   	pop    edi
c0009641:	c3                   	ret    
c0009642:	c7 44 24 20 bd d5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d5bd
c000964a:	83 c4 10             	add    esp,0x10
c000964d:	5b                   	pop    ebx
c000964e:	5e                   	pop    esi
c000964f:	5f                   	pop    edi
c0009650:	e9 62 6a 00 00       	jmp    c00100b7 <KePanic(char const*)>
c0009655:	90                   	nop

c0009656 <VAS::freeAllocatedPages(unsigned long)>:
c0009656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000965a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000965e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009662:	74 09                	je     c000966d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009664:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009668:	e9 c4 fe ff ff       	jmp    c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000966d:	c7 44 24 04 58 d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d458
c0009675:	e9 da 0d 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>

c000967a <VAS::virtualToPhysical(unsigned long)>:
c000967a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000967e:	50                   	push   eax
c000967f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009683:	52                   	push   edx
c0009684:	e8 89 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009689:	59                   	pop    ecx
c000968a:	8b 00                	mov    eax,DWORD PTR [eax]
c000968c:	5a                   	pop    edx
c000968d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009692:	c3                   	ret    
c0009693:	90                   	nop

c0009694 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009694:	55                   	push   ebp
c0009695:	57                   	push   edi
c0009696:	56                   	push   esi
c0009697:	53                   	push   ebx
c0009698:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000969c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096a8:	85 db                	test   ebx,ebx
c00096aa:	7e 22                	jle    c00096ce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096ac:	c1 e3 0c             	shl    ebx,0xc
c00096af:	01 f3                	add    ebx,esi
c00096b1:	56                   	push   esi
c00096b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00096b8:	55                   	push   ebp
c00096b9:	e8 54 fe ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c00096be:	5a                   	pop    edx
c00096bf:	59                   	pop    ecx
c00096c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00096c2:	21 f9                	and    ecx,edi
c00096c4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00096c8:	39 f3                	cmp    ebx,esi
c00096ca:	89 08                	mov    DWORD PTR [eax],ecx
c00096cc:	75 e3                	jne    c00096b1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00096ce:	5b                   	pop    ebx
c00096cf:	5e                   	pop    esi
c00096d0:	5f                   	pop    edi
c00096d1:	5d                   	pop    ebp
c00096d2:	c3                   	ret    
c00096d3:	90                   	nop

c00096d4 <VAS::setToWriteCombining(unsigned long, int)>:
c00096d4:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00096d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00096df:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00096e6:	75 01                	jne    c00096e9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00096e8:	c3                   	ret    
c00096e9:	68 80 00 00 00       	push   0x80
c00096ee:	6a ff                	push   0xffffffff
c00096f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096f4:	50                   	push   eax
c00096f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00096f9:	52                   	push   edx
c00096fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00096fe:	51                   	push   ecx
c00096ff:	e8 90 ff ff ff       	call   c0009694 <VAS::reflagRange(unsigned long, int, int, int)>
c0009704:	83 c4 14             	add    esp,0x14
c0009707:	c3                   	ret    

c0009708 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009708:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000970d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009711:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009718:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000971b:	19 c0                	sbb    eax,eax
c000971d:	83 ca 03             	or     edx,0x3
c0009720:	83 e0 fc             	and    eax,0xfffffffc
c0009723:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000972a:	0f 20 d8             	mov    eax,cr3
c000972d:	0f 22 d8             	mov    cr3,eax
c0009730:	c3                   	ret    
c0009731:	90                   	nop

c0009732 <VAS::~VAS()>:
c0009732:	83 ec 2c             	sub    esp,0x2c
c0009735:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000973d:	fa                   	cli    
c000973e:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0009743:	40                   	inc    eax
c0009744:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0009749:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000974e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009750:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009753:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009759:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000975d:	6a 01                	push   0x1
c000975f:	50                   	push   eax
c0009760:	e8 a3 ff ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0009765:	83 c4 0c             	add    esp,0xc
c0009768:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009770:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009778:	0f 8f d4 00 00 00    	jg     c0009852 <VAS::~VAS()+0x120>
c000977e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009782:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009785:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009789:	c1 e2 02             	shl    edx,0x2
c000978c:	01 d0                	add    eax,edx
c000978e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009798:	83 e0 01             	and    eax,0x1
c000979b:	0f 84 a8 00 00 00    	je     c0009849 <VAS::~VAS()+0x117>
c00097a1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00097a9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00097b1:	7f 72                	jg     c0009825 <VAS::~VAS()+0xf3>
c00097b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00097b7:	c1 e0 0a             	shl    eax,0xa
c00097ba:	89 c2                	mov    edx,eax
c00097bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097c0:	01 d0                	add    eax,edx
c00097c2:	c1 e0 0c             	shl    eax,0xc
c00097c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00097c9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097d3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097dd:	6a 01                	push   0x1
c00097df:	50                   	push   eax
c00097e0:	e8 01 fd ff ff       	call   c00094e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00097e5:	83 c4 0c             	add    esp,0xc
c00097e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097fa:	25 01 04 00 00       	and    eax,0x401
c00097ff:	3d 01 04 00 00       	cmp    eax,0x401
c0009804:	75 19                	jne    c000981f <VAS::~VAS()+0xed>
c0009806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000980f:	83 ec 0c             	sub    esp,0xc
c0009812:	50                   	push   eax
c0009813:	e8 1b e2 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009818:	83 c4 10             	add    esp,0x10
c000981b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000981f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009823:	eb 84                	jmp    c00097a9 <VAS::~VAS()+0x77>
c0009825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009829:	25 00 04 00 00       	and    eax,0x400
c000982e:	74 19                	je     c0009849 <VAS::~VAS()+0x117>
c0009830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009834:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009839:	83 ec 0c             	sub    esp,0xc
c000983c:	50                   	push   eax
c000983d:	e8 f1 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009842:	83 c4 10             	add    esp,0x10
c0009845:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009849:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000984d:	e9 1e ff ff ff       	jmp    c0009770 <VAS::~VAS()+0x3e>
c0009852:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009856:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009859:	83 ec 0c             	sub    esp,0xc
c000985c:	50                   	push   eax
c000985d:	e8 cf fc ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009862:	83 c4 10             	add    esp,0x10
c0009865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009869:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000986c:	83 ec 0c             	sub    esp,0xc
c000986f:	50                   	push   eax
c0009870:	e8 be e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000987c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0009881:	48                   	dec    eax
c0009882:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0009887:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000988c:	85 c0                	test   eax,eax
c000988e:	75 01                	jne    c0009891 <VAS::~VAS()+0x15f>
c0009890:	fb                   	sti    
c0009891:	90                   	nop
c0009892:	83 c4 2c             	add    esp,0x2c
c0009895:	c3                   	ret    

c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009896:	55                   	push   ebp
c0009897:	57                   	push   edi
c0009898:	56                   	push   esi
c0009899:	53                   	push   ebx
c000989a:	83 ec 1c             	sub    esp,0x1c
c000989d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00098a5:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00098ab:	77 0b                	ja     c00098b8 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c00098ad:	0f 20 d8             	mov    eax,cr3
c00098b0:	0f 20 d8             	mov    eax,cr3
c00098b3:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00098b6:	75 47                	jne    c00098ff <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c00098b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00098bc:	09 d8                	or     eax,ebx
c00098be:	a9 ff 0f 00 00       	test   eax,0xfff
c00098c3:	75 57                	jne    c000991c <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c00098c5:	89 de                	mov    esi,ebx
c00098c7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00098ca:	c1 ee 16             	shr    esi,0x16
c00098cd:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00098d4:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00098d8:	74 54                	je     c000992e <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c00098da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00098de:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00098e4:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00098e8:	c1 e6 0c             	shl    esi,0xc
c00098eb:	c1 eb 0a             	shr    ebx,0xa
c00098ee:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00098f4:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00098f7:	83 c4 1c             	add    esp,0x1c
c00098fa:	5b                   	pop    ebx
c00098fb:	5e                   	pop    esi
c00098fc:	5f                   	pop    edi
c00098fd:	5d                   	pop    ebp
c00098fe:	c3                   	ret    
c00098ff:	83 ec 0c             	sub    esp,0xc
c0009902:	68 7c d4 01 c0       	push   0xc001d47c
c0009907:	e8 48 0b 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000990c:	83 c4 10             	add    esp,0x10
c000990f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009913:	09 d8                	or     eax,ebx
c0009915:	a9 ff 0f 00 00       	test   eax,0xfff
c000991a:	74 a9                	je     c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000991c:	83 ec 0c             	sub    esp,0xc
c000991f:	68 e4 d4 01 c0       	push   0xc001d4e4
c0009924:	e8 8e 67 00 00       	call   c00100b7 <KePanic(char const*)>
c0009929:	83 c4 10             	add    esp,0x10
c000992c:	eb 97                	jmp    c00098c5 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000992e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009932:	e8 5e e1 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009937:	83 ec 0c             	sub    esp,0xc
c000993a:	89 c5                	mov    ebp,eax
c000993c:	8b 0d 10 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020510
c0009942:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009946:	6a 01                	push   0x1
c0009948:	e8 b4 f8 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000994d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009954:	6a 01                	push   0x1
c0009956:	50                   	push   eax
c0009957:	55                   	push   ebp
c0009958:	81 cd 07 04 00 00    	or     ebp,0x407
c000995e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009962:	51                   	push   ecx
c0009963:	e8 28 02 00 00       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009968:	83 c4 1c             	add    esp,0x1c
c000996b:	68 00 10 00 00       	push   0x1000
c0009970:	6a 00                	push   0x0
c0009972:	50                   	push   eax
c0009973:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009977:	e8 54 6b ff ff       	call   c00004d0 <memset>
c000997c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009980:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009983:	e8 a9 fb ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009988:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000998c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000998f:	83 c4 10             	add    esp,0x10
c0009992:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009995:	e9 40 ff ff ff       	jmp    c00098da <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000999a <VAS::allocatePages(int, int)>:
c000999a:	55                   	push   ebp
c000999b:	57                   	push   edi
c000999c:	56                   	push   esi
c000999d:	53                   	push   ebx
c000999e:	83 ec 1c             	sub    esp,0x1c
c00099a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00099a5:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00099aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099b0:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c00099b6:	83 e0 01             	and    eax,0x1
c00099b9:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00099bd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00099c1:	0f 85 cc 00 00 00    	jne    c0009a93 <VAS::allocatePages(int, int)+0xf9>
c00099c7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00099ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ce:	85 c0                	test   eax,eax
c00099d0:	0f 84 a1 00 00 00    	je     c0009a77 <VAS::allocatePages(int, int)+0xdd>
c00099d6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00099da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099de:	c1 e6 0c             	shl    esi,0xc
c00099e1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00099e5:	85 c0                	test   eax,eax
c00099e7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00099ea:	7e 33                	jle    c0009a1f <VAS::allocatePages(int, int)+0x85>
c00099ec:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00099f0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00099f4:	81 cd 00 04 00 00    	or     ebp,0x400
c00099fa:	e8 96 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099ff:	55                   	push   ebp
c0009a00:	53                   	push   ebx
c0009a01:	50                   	push   eax
c0009a02:	57                   	push   edi
c0009a03:	e8 8e fe ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a10:	74 03                	je     c0009a15 <VAS::allocatePages(int, int)+0x7b>
c0009a12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a1b:	39 de                	cmp    esi,ebx
c0009a1d:	75 db                	jne    c00099fa <VAS::allocatePages(int, int)+0x60>
c0009a1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a24:	75 12                	jne    c0009a38 <VAS::allocatePages(int, int)+0x9e>
c0009a26:	0f 20 d8             	mov    eax,cr3
c0009a29:	0f 22 d8             	mov    cr3,eax
c0009a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a30:	83 c4 1c             	add    esp,0x1c
c0009a33:	5b                   	pop    ebx
c0009a34:	5e                   	pop    esi
c0009a35:	5f                   	pop    edi
c0009a36:	5d                   	pop    ebp
c0009a37:	c3                   	ret    
c0009a38:	c1 ee 0a             	shr    esi,0xa
c0009a3b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a3f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009a45:	c1 eb 0a             	shr    ebx,0xa
c0009a48:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009a4e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009a54:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009a5a:	39 c3                	cmp    ebx,eax
c0009a5c:	77 ce                	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009a5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a61:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a67:	39 d8                	cmp    eax,ebx
c0009a69:	73 f3                	jae    c0009a5e <VAS::allocatePages(int, int)+0xc4>
c0009a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a6f:	83 c4 1c             	add    esp,0x1c
c0009a72:	5b                   	pop    ebx
c0009a73:	5e                   	pop    esi
c0009a74:	5f                   	pop    edi
c0009a75:	5d                   	pop    ebp
c0009a76:	c3                   	ret    
c0009a77:	83 ec 0c             	sub    esp,0xc
c0009a7a:	68 08 d5 01 c0       	push   0xc001d508
c0009a7f:	e8 33 66 00 00       	call   c00100b7 <KePanic(char const*)>
c0009a84:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a8b:	83 c4 10             	add    esp,0x10
c0009a8e:	e9 43 ff ff ff       	jmp    c00099d6 <VAS::allocatePages(int, int)+0x3c>
c0009a93:	83 ec 0c             	sub    esp,0xc
c0009a96:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009a9a:	51                   	push   ecx
c0009a9b:	e8 61 f7 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009aa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aa4:	83 c4 10             	add    esp,0x10
c0009aa7:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009aac:	0f 87 9b 00 00 00    	ja     c0009b4d <VAS::allocatePages(int, int)+0x1b3>
c0009ab2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ab6:	85 d2                	test   edx,edx
c0009ab8:	7e 3c                	jle    c0009af6 <VAS::allocatePages(int, int)+0x15c>
c0009aba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009abe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009ac2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ac6:	c1 e5 0c             	shl    ebp,0xc
c0009ac9:	81 ce 00 04 00 00    	or     esi,0x400
c0009acf:	01 dd                	add    ebp,ebx
c0009ad1:	e8 bf df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	50                   	push   eax
c0009ad9:	57                   	push   edi
c0009ada:	e8 b7 fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ae7:	74 03                	je     c0009aec <VAS::allocatePages(int, int)+0x152>
c0009ae9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aec:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af2:	39 dd                	cmp    ebp,ebx
c0009af4:	75 db                	jne    c0009ad1 <VAS::allocatePages(int, int)+0x137>
c0009af6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009afb:	0f 84 25 ff ff ff    	je     c0009a26 <VAS::allocatePages(int, int)+0x8c>
c0009b01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b09:	89 d3                	mov    ebx,edx
c0009b0b:	c1 e0 0c             	shl    eax,0xc
c0009b0e:	c1 eb 0a             	shr    ebx,0xa
c0009b11:	01 d0                	add    eax,edx
c0009b13:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b19:	c1 e8 0a             	shr    eax,0xa
c0009b1c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b22:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b27:	2d 00 00 40 00       	sub    eax,0x400000
c0009b2c:	39 c3                	cmp    ebx,eax
c0009b2e:	0f 87 f8 fe ff ff    	ja     c0009a2c <VAS::allocatePages(int, int)+0x92>
c0009b34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b37:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b3d:	39 d8                	cmp    eax,ebx
c0009b3f:	73 f3                	jae    c0009b34 <VAS::allocatePages(int, int)+0x19a>
c0009b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b45:	83 c4 1c             	add    esp,0x1c
c0009b48:	5b                   	pop    ebx
c0009b49:	5e                   	pop    esi
c0009b4a:	5f                   	pop    edi
c0009b4b:	5d                   	pop    ebp
c0009b4c:	c3                   	ret    
c0009b4d:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b58:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009b5f:	0f 84 4d ff ff ff    	je     c0009ab2 <VAS::allocatePages(int, int)+0x118>
c0009b65:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009b6d:	e9 40 ff ff ff       	jmp    c0009ab2 <VAS::allocatePages(int, int)+0x118>

c0009b72 <VAS::setCPUSpecific(unsigned long)>:
c0009b72:	83 ec 0c             	sub    esp,0xc
c0009b75:	6a 05                	push   0x5
c0009b77:	68 00 00 40 c2       	push   0xc2400000
c0009b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b80:	50                   	push   eax
c0009b81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b85:	52                   	push   edx
c0009b86:	e8 0b fd ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b8b:	83 c4 1c             	add    esp,0x1c
c0009b8e:	c3                   	ret    
c0009b8f:	90                   	nop

c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009b90:	55                   	push   ebp
c0009b91:	57                   	push   edi
c0009b92:	56                   	push   esi
c0009b93:	53                   	push   ebx
c0009b94:	83 ec 1c             	sub    esp,0x1c
c0009b97:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009b9c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009ba0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ba6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009baa:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009bb0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009bb4:	83 e0 01             	and    eax,0x1
c0009bb7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009bbb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bbf:	85 c0                	test   eax,eax
c0009bc1:	7e 39                	jle    c0009bfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009bc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bc7:	89 f3                	mov    ebx,esi
c0009bc9:	c1 e0 0c             	shl    eax,0xc
c0009bcc:	01 f0                	add    eax,esi
c0009bce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bd2:	55                   	push   ebp
c0009bd3:	53                   	push   ebx
c0009bd4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bd8:	29 f0                	sub    eax,esi
c0009bda:	01 d8                	add    eax,ebx
c0009bdc:	50                   	push   eax
c0009bdd:	57                   	push   edi
c0009bde:	e8 b3 fc ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009beb:	74 03                	je     c0009bf0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009bed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bf6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009bfa:	75 d6                	jne    c0009bd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009bfc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c01:	75 10                	jne    c0009c13 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c03:	0f 20 d8             	mov    eax,cr3
c0009c06:	0f 22 d8             	mov    cr3,eax
c0009c09:	83 c4 1c             	add    esp,0x1c
c0009c0c:	89 f0                	mov    eax,esi
c0009c0e:	5b                   	pop    ebx
c0009c0f:	5e                   	pop    esi
c0009c10:	5f                   	pop    edi
c0009c11:	5d                   	pop    ebp
c0009c12:	c3                   	ret    
c0009c13:	89 f3                	mov    ebx,esi
c0009c15:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c19:	c1 eb 0a             	shr    ebx,0xa
c0009c1c:	c1 e0 0c             	shl    eax,0xc
c0009c1f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c25:	01 f0                	add    eax,esi
c0009c27:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c2d:	c1 e8 0a             	shr    eax,0xa
c0009c30:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c35:	2d 00 00 40 00       	sub    eax,0x400000
c0009c3a:	39 c3                	cmp    ebx,eax
c0009c3c:	77 cb                	ja     c0009c09 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009c3e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c41:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c47:	39 d8                	cmp    eax,ebx
c0009c49:	73 f3                	jae    c0009c3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	89 f0                	mov    eax,esi
c0009c50:	5b                   	pop    ebx
c0009c51:	5e                   	pop    esi
c0009c52:	5f                   	pop    edi
c0009c53:	5d                   	pop    ebp
c0009c54:	c3                   	ret    
c0009c55:	90                   	nop

c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009c56:	55                   	push   ebp
c0009c57:	57                   	push   edi
c0009c58:	56                   	push   esi
c0009c59:	53                   	push   ebx
c0009c5a:	83 ec 1c             	sub    esp,0x1c
c0009c5d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c61:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c65:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009c69:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009c6d:	a9 ff 0f 00 00       	test   eax,0xfff
c0009c72:	75 4a                	jne    c0009cbe <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009c74:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009c78:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c7b:	c1 eb 16             	shr    ebx,0x16
c0009c7e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009c85:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009c89:	74 4d                	je     c0009cd8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009c8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009c8f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009c93:	c1 e8 0a             	shr    eax,0xa
c0009c96:	80 fa 01             	cmp    dl,0x1
c0009c99:	19 d2                	sbb    edx,edx
c0009c9b:	c1 e3 0c             	shl    ebx,0xc
c0009c9e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009ca2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009ca8:	25 fc 0f 00 00       	and    eax,0xffc
c0009cad:	01 d8                	add    eax,ebx
c0009caf:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009cb6:	83 c4 1c             	add    esp,0x1c
c0009cb9:	5b                   	pop    ebx
c0009cba:	5e                   	pop    esi
c0009cbb:	5f                   	pop    edi
c0009cbc:	5d                   	pop    ebp
c0009cbd:	c3                   	ret    
c0009cbe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009cc2:	83 ec 0c             	sub    esp,0xc
c0009cc5:	68 34 d5 01 c0       	push   0xc001d534
c0009cca:	e8 e8 63 00 00       	call   c00100b7 <KePanic(char const*)>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009cd6:	eb 9c                	jmp    c0009c74 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009cd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cdc:	e8 b4 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ce1:	83 ec 0c             	sub    esp,0xc
c0009ce4:	89 c5                	mov    ebp,eax
c0009ce6:	8b 0d 10 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020510
c0009cec:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009cf0:	6a 01                	push   0x1
c0009cf2:	e8 0a f5 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009cf7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009cfe:	6a 01                	push   0x1
c0009d00:	50                   	push   eax
c0009d01:	55                   	push   ebp
c0009d02:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d08:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d0c:	51                   	push   ecx
c0009d0d:	e8 7e fe ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d12:	83 c4 1c             	add    esp,0x1c
c0009d15:	68 00 10 00 00       	push   0x1000
c0009d1a:	6a 00                	push   0x0
c0009d1c:	50                   	push   eax
c0009d1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d21:	e8 aa 67 ff ff       	call   c00004d0 <memset>
c0009d26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009d2a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009d2d:	e8 ff f7 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0009d32:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d35:	83 c4 10             	add    esp,0x10
c0009d38:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009d3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d3f:	e9 47 ff ff ff       	jmp    c0009c8b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009d44 <VAS::VAS(bool)>:
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 28             	sub    esp,0x28
c0009d48:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d4c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009d50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009d5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009d66:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d6a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009d6e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009d71:	e8 1f dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d76:	89 c2                	mov    edx,eax
c0009d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d7c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009d7f:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c0009d85:	83 ec 0c             	sub    esp,0xc
c0009d88:	6a 01                	push   0x1
c0009d8a:	e8 72 f4 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	89 c2                	mov    edx,eax
c0009d94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d98:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009d9b:	83 ec 0c             	sub    esp,0xc
c0009d9e:	6a 03                	push   0x3
c0009da0:	6a 01                	push   0x1
c0009da2:	52                   	push   edx
c0009da3:	50                   	push   eax
c0009da4:	53                   	push   ebx
c0009da5:	e8 e6 fd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009daa:	83 c4 20             	add    esp,0x20
c0009dad:	89 c2                	mov    edx,eax
c0009daf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009db3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009db6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009dbe:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009dc6:	7f 1c                	jg     c0009de4 <VAS::VAS(bool)+0xa0>
c0009dc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dcf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dd3:	c1 e2 02             	shl    edx,0x2
c0009dd6:	01 d0                	add    eax,edx
c0009dd8:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009dde:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009de2:	eb da                	jmp    c0009dbe <VAS::VAS(bool)+0x7a>
c0009de4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009dec:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009df4:	7f 7a                	jg     c0009e70 <VAS::VAS(bool)+0x12c>
c0009df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009dfa:	2d 00 02 00 00       	sub    eax,0x200
c0009dff:	c1 e0 0c             	shl    eax,0xc
c0009e02:	83 c8 03             	or     eax,0x3
c0009e05:	89 c2                	mov    edx,eax
c0009e07:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009e0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e12:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e18:	83 e0 10             	and    eax,0x10
c0009e1b:	84 c0                	test   al,al
c0009e1d:	74 07                	je     c0009e26 <VAS::VAS(bool)+0xe2>
c0009e1f:	b8 00 01 00 00       	mov    eax,0x100
c0009e24:	eb 05                	jmp    c0009e2b <VAS::VAS(bool)+0xe7>
c0009e26:	b8 00 00 00 00       	mov    eax,0x0
c0009e2b:	09 d0                	or     eax,edx
c0009e2d:	89 c1                	mov    ecx,eax
c0009e2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e36:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e3a:	c1 e2 02             	shl    edx,0x2
c0009e3d:	01 d0                	add    eax,edx
c0009e3f:	89 ca                	mov    edx,ecx
c0009e41:	89 10                	mov    DWORD PTR [eax],edx
c0009e43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e47:	2d 40 03 00 00       	sub    eax,0x340
c0009e4c:	83 f8 7f             	cmp    eax,0x7f
c0009e4f:	77 16                	ja     c0009e67 <VAS::VAS(bool)+0x123>
c0009e51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e5c:	c1 e2 02             	shl    edx,0x2
c0009e5f:	01 d0                	add    eax,edx
c0009e61:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e67:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009e6b:	e9 7c ff ff ff       	jmp    c0009dec <VAS::VAS(bool)+0xa8>
c0009e70:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009e75:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7b:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009e81:	83 e0 10             	and    eax,0x10
c0009e84:	84 c0                	test   al,al
c0009e86:	74 07                	je     c0009e8f <VAS::VAS(bool)+0x14b>
c0009e88:	b8 03 41 00 00       	mov    eax,0x4103
c0009e8d:	eb 05                	jmp    c0009e94 <VAS::VAS(bool)+0x150>
c0009e8f:	b8 03 40 00 00       	mov    eax,0x4003
c0009e94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009e98:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009e9b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009ea1:	89 02                	mov    DWORD PTR [edx],eax
c0009ea3:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009ea8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009eb4:	83 ec 08             	sub    esp,0x8
c0009eb7:	50                   	push   eax
c0009eb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ebc:	e8 b1 fc ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c0009ec1:	83 c4 10             	add    esp,0x10
c0009ec4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009ecb:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009ed0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ed6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009edc:	83 e0 10             	and    eax,0x10
c0009edf:	84 c0                	test   al,al
c0009ee1:	74 07                	je     c0009eea <VAS::VAS(bool)+0x1a6>
c0009ee3:	b8 00 01 00 00       	mov    eax,0x100
c0009ee8:	eb 05                	jmp    c0009eef <VAS::VAS(bool)+0x1ab>
c0009eea:	b8 00 00 00 00       	mov    eax,0x0
c0009eef:	09 c2                	or     edx,eax
c0009ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef8:	05 fc 0f 00 00       	add    eax,0xffc
c0009efd:	83 ca 03             	or     edx,0x3
c0009f00:	89 10                	mov    DWORD PTR [eax],edx
c0009f02:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009f07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0d:	83 ec 0c             	sub    esp,0xc
c0009f10:	50                   	push   eax
c0009f11:	e8 12 1c 00 00       	call   c000bb28 <Device::getName()>
c0009f16:	83 c4 10             	add    esp,0x10
c0009f19:	83 ec 08             	sub    esp,0x8
c0009f1c:	68 d7 d5 01 c0       	push   0xc001d5d7
c0009f21:	50                   	push   eax
c0009f22:	e8 b9 67 ff ff       	call   c00006e0 <strcmp>
c0009f27:	83 c4 10             	add    esp,0x10
c0009f2a:	85 c0                	test   eax,eax
c0009f2c:	0f 94 c0             	sete   al
c0009f2f:	84 c0                	test   al,al
c0009f31:	0f 84 87 00 00 00    	je     c0009fbe <VAS::VAS(bool)+0x27a>
c0009f37:	fa                   	cli    
c0009f38:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0009f3d:	40                   	inc    eax
c0009f3e:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0009f43:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009f48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f4e:	05 7c 09 00 00       	add    eax,0x97c
c0009f53:	83 ec 0c             	sub    esp,0xc
c0009f56:	50                   	push   eax
c0009f57:	e8 5a d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f64:	89 c3                	mov    ebx,eax
c0009f66:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0009f6b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f71:	05 7c 09 00 00       	add    eax,0x97c
c0009f76:	83 ec 0c             	sub    esp,0xc
c0009f79:	50                   	push   eax
c0009f7a:	e8 37 d3 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009f7f:	83 c4 10             	add    esp,0x10
c0009f82:	83 ec 08             	sub    esp,0x8
c0009f85:	50                   	push   eax
c0009f86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f8a:	e8 83 f5 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0009f8f:	83 c4 10             	add    esp,0x10
c0009f92:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f94:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f99:	6a 11                	push   0x11
c0009f9b:	53                   	push   ebx
c0009f9c:	50                   	push   eax
c0009f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009fa1:	e8 f0 f8 ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fa6:	83 c4 10             	add    esp,0x10
c0009fa9:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0009fae:	48                   	dec    eax
c0009faf:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0009fb4:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0009fb9:	85 c0                	test   eax,eax
c0009fbb:	75 01                	jne    c0009fbe <VAS::VAS(bool)+0x27a>
c0009fbd:	fb                   	sti    
c0009fbe:	90                   	nop
c0009fbf:	83 c4 28             	add    esp,0x28
c0009fc2:	5b                   	pop    ebx
c0009fc3:	c3                   	ret    

c0009fc4 <VAS::evict(unsigned long)>:
c0009fc4:	55                   	push   ebp
c0009fc5:	57                   	push   edi
c0009fc6:	56                   	push   esi
c0009fc7:	53                   	push   ebx
c0009fc8:	83 ec 1c             	sub    esp,0x1c
c0009fcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fcf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009fd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fd7:	e8 66 f3 ff ff       	call   c0009342 <Virt::allocateSwapfilePage()>
c0009fdc:	8b 0d 2c f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f12c
c0009fe2:	89 c7                	mov    edi,eax
c0009fe4:	85 c9                	test   ecx,ecx
c0009fe6:	7e 3e                	jle    c000a026 <VAS::evict(unsigned long)+0x62>
c0009fe8:	89 ee                	mov    esi,ebp
c0009fea:	31 db                	xor    ebx,ebx
c0009fec:	83 ec 0c             	sub    esp,0xc
c0009fef:	57                   	push   edi
c0009ff0:	e8 3b f3 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c0009ff5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009ff8:	01 d8                	add    eax,ebx
c0009ffa:	6a 01                	push   0x1
c0009ffc:	31 d2                	xor    edx,edx
c0009ffe:	43                   	inc    ebx
c0009fff:	52                   	push   edx
c000a000:	81 c6 00 02 00 00    	add    esi,0x200
c000a006:	50                   	push   eax
c000a007:	0f be 05 38 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f138
c000a00e:	8b 14 85 7c 28 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd784]
c000a015:	52                   	push   edx
c000a016:	e8 8d 2b 00 00       	call   c000cba8 <LogicalDisk::write(unsigned long long, int, void*)>
c000a01b:	83 c4 20             	add    esp,0x20
c000a01e:	39 1d 2c f1 01 c0    	cmp    DWORD PTR ds:0xc001f12c,ebx
c000a024:	7f c6                	jg     c0009fec <VAS::evict(unsigned long)+0x28>
c000a026:	83 ec 08             	sub    esp,0x8
c000a029:	c1 e7 0b             	shl    edi,0xb
c000a02c:	55                   	push   ebp
c000a02d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a031:	50                   	push   eax
c000a032:	e8 db f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a037:	8b 10                	mov    edx,DWORD PTR [eax]
c000a039:	89 d1                	mov    ecx,edx
c000a03b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a041:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a047:	09 cf                	or     edi,ecx
c000a049:	89 38                	mov    DWORD PTR [eax],edi
c000a04b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a04e:	ff 05 08 05 02 c0    	inc    DWORD PTR ds:0xc0020508
c000a054:	e8 da d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a059:	0f 20 d8             	mov    eax,cr3
c000a05c:	0f 22 d8             	mov    cr3,eax
c000a05f:	a1 04 05 02 c0       	mov    eax,ds:0xc0020504
c000a064:	c7 44 24 40 e5 d5 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d5e5
c000a06c:	8d 50 01             	lea    edx,[eax+0x1]
c000a06f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a073:	89 15 04 05 02 c0    	mov    DWORD PTR ds:0xc0020504,edx
c000a079:	83 c4 2c             	add    esp,0x2c
c000a07c:	5b                   	pop    ebx
c000a07d:	5e                   	pop    esi
c000a07e:	5f                   	pop    edi
c000a07f:	5d                   	pop    ebp
c000a080:	e9 cf 03 00 00       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000a085:	90                   	nop

c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a086:	55                   	push   ebp
c000a087:	57                   	push   edi
c000a088:	56                   	push   esi
c000a089:	53                   	push   ebx
c000a08a:	83 ec 14             	sub    esp,0x14
c000a08d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a091:	53                   	push   ebx
c000a092:	68 f6 d5 01 c0       	push   0xc001d5f6
c000a097:	e8 b8 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a09c:	83 c4 10             	add    esp,0x10
c000a09f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0a5:	74 21                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0a7:	83 ec 08             	sub    esp,0x8
c000a0aa:	53                   	push   ebx
c000a0ab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a0af:	57                   	push   edi
c000a0b0:	e8 5d f4 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 c6                	mov    esi,eax
c000a0ba:	85 c0                	test   eax,eax
c000a0bc:	74 0a                	je     c000a0c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a0be:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a0c0:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a0c6:	74 0a                	je     c000a0d2 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a0c8:	31 c0                	xor    eax,eax
c000a0ca:	83 c4 0c             	add    esp,0xc
c000a0cd:	5b                   	pop    ebx
c000a0ce:	5e                   	pop    esi
c000a0cf:	5f                   	pop    edi
c000a0d0:	5d                   	pop    ebp
c000a0d1:	c3                   	ret    
c000a0d2:	e8 be d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a0d7:	c1 ed 0b             	shr    ebp,0xb
c000a0da:	8b 16                	mov    edx,DWORD PTR [esi]
c000a0dc:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a0e2:	09 c2                	or     edx,eax
c000a0e4:	81 ca 01 08 00 00    	or     edx,0x801
c000a0ea:	89 16                	mov    DWORD PTR [esi],edx
c000a0ec:	8b 35 2c f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f12c
c000a0f2:	85 f6                	test   esi,esi
c000a0f4:	7e 3e                	jle    c000a134 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a0f6:	89 df                	mov    edi,ebx
c000a0f8:	31 f6                	xor    esi,esi
c000a0fa:	83 ec 0c             	sub    esp,0xc
c000a0fd:	55                   	push   ebp
c000a0fe:	e8 2d f2 ff ff       	call   c0009330 <Virt::swapIDToSector(unsigned long)>
c000a103:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a106:	01 f0                	add    eax,esi
c000a108:	6a 01                	push   0x1
c000a10a:	31 d2                	xor    edx,edx
c000a10c:	46                   	inc    esi
c000a10d:	52                   	push   edx
c000a10e:	81 c7 00 02 00 00    	add    edi,0x200
c000a114:	50                   	push   eax
c000a115:	0f be 05 38 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f138
c000a11c:	8b 0c 85 7c 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd784]
c000a123:	51                   	push   ecx
c000a124:	e8 13 2a 00 00       	call   c000cb3c <LogicalDisk::read(unsigned long long, int, void*)>
c000a129:	83 c4 20             	add    esp,0x20
c000a12c:	39 35 2c f1 01 c0    	cmp    DWORD PTR ds:0xc001f12c,esi
c000a132:	7f c6                	jg     c000a0fa <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a134:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c000a139:	48                   	dec    eax
c000a13a:	52                   	push   edx
c000a13b:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c000a140:	50                   	push   eax
c000a141:	53                   	push   ebx
c000a142:	68 09 d6 01 c0       	push   0xc001d609
c000a147:	e8 08 03 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a14c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a14f:	e8 be f1 ff ff       	call   c0009312 <Virt::freeSwapfilePage(unsigned long)>
c000a154:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	48                   	dec    eax
c000a15d:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000a162:	85 c0                	test   eax,eax
c000a164:	75 01                	jne    c000a167 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a166:	fb                   	sti    
c000a167:	0f 20 d8             	mov    eax,cr3
c000a16a:	0f 22 d8             	mov    cr3,eax
c000a16d:	b0 01                	mov    al,0x1
c000a16f:	e9 56 ff ff ff       	jmp    c000a0ca <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a174 <VAS::scanForEviction()>:
c000a174:	57                   	push   edi
c000a175:	31 ff                	xor    edi,edi
c000a177:	56                   	push   esi
c000a178:	53                   	push   ebx
c000a179:	83 ec 10             	sub    esp,0x10
c000a17c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a180:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a183:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a189:	75 0e                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a18b:	89 da                	mov    edx,ebx
c000a18d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a190:	c1 ea 16             	shr    edx,0x16
c000a193:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a197:	74 4e                	je     c000a1e7 <VAS::scanForEviction()+0x73>
c000a199:	53                   	push   ebx
c000a19a:	56                   	push   esi
c000a19b:	e8 72 f3 ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c000a1a0:	5a                   	pop    edx
c000a1a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1a3:	59                   	pop    ecx
c000a1a4:	89 d1                	mov    ecx,edx
c000a1a6:	81 e1 01 08 00 00    	and    ecx,0x801
c000a1ac:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a1b2:	74 3e                	je     c000a1f2 <VAS::scanForEviction()+0x7e>
c000a1b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a1ba:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a1c0:	76 2b                	jbe    c000a1ed <VAS::scanForEviction()+0x79>
c000a1c2:	47                   	inc    edi
c000a1c3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a1ca:	83 ff 03             	cmp    edi,0x3
c000a1cd:	74 32                	je     c000a201 <VAS::scanForEviction()+0x8d>
c000a1cf:	31 db                	xor    ebx,ebx
c000a1d1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a1d7:	75 c0                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1d9:	89 da                	mov    edx,ebx
c000a1db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1de:	c1 ea 16             	shr    edx,0x16
c000a1e1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a1e5:	75 b2                	jne    c000a199 <VAS::scanForEviction()+0x25>
c000a1e7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a1ed:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a1f0:	eb 91                	jmp    c000a183 <VAS::scanForEviction()+0xf>
c000a1f2:	f6 c2 20             	test   dl,0x20
c000a1f5:	74 13                	je     c000a20a <VAS::scanForEviction()+0x96>
c000a1f7:	83 e2 df             	and    edx,0xffffffdf
c000a1fa:	89 10                	mov    DWORD PTR [eax],edx
c000a1fc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a1ff:	eb b3                	jmp    c000a1b4 <VAS::scanForEviction()+0x40>
c000a201:	83 c4 10             	add    esp,0x10
c000a204:	31 c0                	xor    eax,eax
c000a206:	5b                   	pop    ebx
c000a207:	5e                   	pop    esi
c000a208:	5f                   	pop    edi
c000a209:	c3                   	ret    
c000a20a:	83 ec 08             	sub    esp,0x8
c000a20d:	89 d0                	mov    eax,edx
c000a20f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a218:	53                   	push   ebx
c000a219:	68 1e d6 01 c0       	push   0xc001d61e
c000a21e:	e8 31 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a223:	58                   	pop    eax
c000a224:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a227:	5a                   	pop    edx
c000a228:	51                   	push   ecx
c000a229:	56                   	push   esi
c000a22a:	e8 95 fd ff ff       	call   c0009fc4 <VAS::evict(unsigned long)>
c000a22f:	5b                   	pop    ebx
c000a230:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a233:	5f                   	pop    edi
c000a234:	50                   	push   eax
c000a235:	68 32 d6 01 c0       	push   0xc001d632
c000a23a:	e8 15 02 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a23f:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a246:	83 c4 10             	add    esp,0x10
c000a249:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a24d:	83 c4 10             	add    esp,0x10
c000a250:	5b                   	pop    ebx
c000a251:	5e                   	pop    esi
c000a252:	5f                   	pop    edi
c000a253:	c3                   	ret    

c000a254 <mapVASFirstTime>:
c000a254:	55                   	push   ebp
c000a255:	57                   	push   edi
c000a256:	56                   	push   esi
c000a257:	53                   	push   ebx
c000a258:	83 ec 0c             	sub    esp,0xc
c000a25b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a260:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a263:	4a                   	dec    edx
c000a264:	0f 84 8c 00 00 00    	je     c000a2f6 <mapVASFirstTime+0xa2>
c000a26a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a26d:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a270:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a275:	c1 e5 15             	shl    ebp,0x15
c000a278:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a27d:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a283:	29 eb                	sub    ebx,ebp
c000a285:	29 ef                	sub    edi,ebp
c000a287:	e8 09 d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a28c:	83 ec 0c             	sub    esp,0xc
c000a28f:	68 03 04 00 00       	push   0x403
c000a294:	6a 01                	push   0x1
c000a296:	53                   	push   ebx
c000a297:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a29d:	50                   	push   eax
c000a29e:	56                   	push   esi
c000a29f:	e8 ec f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2a4:	83 c4 20             	add    esp,0x20
c000a2a7:	39 fb                	cmp    ebx,edi
c000a2a9:	75 dc                	jne    c000a287 <mapVASFirstTime+0x33>
c000a2ab:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a2b0:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a2b5:	29 eb                	sub    ebx,ebp
c000a2b7:	29 ef                	sub    edi,ebp
c000a2b9:	e8 d7 d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a2be:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a2c2:	19 d2                	sbb    edx,edx
c000a2c4:	83 ec 0c             	sub    esp,0xc
c000a2c7:	83 e2 04             	and    edx,0x4
c000a2ca:	81 c2 03 04 00 00    	add    edx,0x403
c000a2d0:	52                   	push   edx
c000a2d1:	6a 01                	push   0x1
c000a2d3:	53                   	push   ebx
c000a2d4:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a2da:	50                   	push   eax
c000a2db:	56                   	push   esi
c000a2dc:	e8 af f8 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a2e1:	83 c4 20             	add    esp,0x20
c000a2e4:	39 df                	cmp    edi,ebx
c000a2e6:	75 d1                	jne    c000a2b9 <mapVASFirstTime+0x65>
c000a2e8:	0f 20 d8             	mov    eax,cr3
c000a2eb:	0f 22 d8             	mov    cr3,eax
c000a2ee:	83 c4 0c             	add    esp,0xc
c000a2f1:	5b                   	pop    ebx
c000a2f2:	5e                   	pop    esi
c000a2f3:	5f                   	pop    edi
c000a2f4:	5d                   	pop    ebp
c000a2f5:	c3                   	ret    
c000a2f6:	83 ec 0c             	sub    esp,0xc
c000a2f9:	68 45 d6 01 c0       	push   0xc001d645
c000a2fe:	e8 51 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a303:	83 c4 10             	add    esp,0x10
c000a306:	83 c4 0c             	add    esp,0xc
c000a309:	5b                   	pop    ebx
c000a30a:	5e                   	pop    esi
c000a30b:	5f                   	pop    edi
c000a30c:	5d                   	pop    ebp
c000a30d:	c3                   	ret    

c000a30e <__cxa_atexit>:
c000a30e:	31 c0                	xor    eax,eax
c000a310:	c3                   	ret    

c000a311 <__cxa_finalize>:
c000a311:	c3                   	ret    

c000a312 <__stack_chk_fail>:
c000a312:	55                   	push   ebp
c000a313:	89 e5                	mov    ebp,esp
c000a315:	83 ec 10             	sub    esp,0x10
c000a318:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a31b:	68 5e d6 01 c0       	push   0xc001d65e
c000a320:	e8 2f 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a325:	58                   	pop    eax
c000a326:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a329:	5a                   	pop    edx
c000a32a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a32d:	68 5e d6 01 c0       	push   0xc001d65e
c000a332:	e8 1d 01 00 00       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000a337:	c7 04 24 66 d6 01 c0 	mov    DWORD PTR [esp],0xc001d666
c000a33e:	e8 74 5d 00 00       	call   c00100b7 <KePanic(char const*)>
c000a343:	83 c4 10             	add    esp,0x10
c000a346:	c9                   	leave  
c000a347:	c3                   	ret    

c000a348 <__cxa_pure_virtual>:
c000a348:	83 ec 18             	sub    esp,0x18
c000a34b:	68 7e d6 01 c0       	push   0xc001d67e
c000a350:	e8 62 5d 00 00       	call   c00100b7 <KePanic(char const*)>
c000a355:	83 c4 1c             	add    esp,0x1c
c000a358:	c3                   	ret    

c000a359 <operator new[](unsigned long)>:
c000a359:	e9 5b d4 ff ff       	jmp    c00077b9 <malloc>

c000a35e <operator delete(void*, unsigned long)>:
c000a35e:	e9 76 d4 ff ff       	jmp    c00077d9 <rfree>

c000a363 <operator delete[](void*)>:
c000a363:	e9 71 d4 ff ff       	jmp    c00077d9 <rfree>

c000a368 <operator delete[](void*, unsigned long)>:
c000a368:	e9 6c d4 ff ff       	jmp    c00077d9 <rfree>

c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a36d:	55                   	push   ebp
c000a36e:	b9 04 00 00 00       	mov    ecx,0x4
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	be 93 d2 01 c0       	mov    esi,0xc001d293
c000a37a:	53                   	push   ebx
c000a37b:	83 ec 20             	sub    esp,0x20
c000a37e:	a1 92 d2 01 c0       	mov    eax,ds:0xc001d292
c000a383:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a387:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a38b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a38f:	a1 9f d2 01 c0       	mov    eax,ds:0xc001d29f
c000a394:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a398:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a39c:	fc                   	cld    
c000a39d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a39f:	89 ee                	mov    esi,ebp
c000a3a1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a3a5:	eb 02                	jmp    c000a3a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a3a7:	89 c6                	mov    esi,eax
c000a3a9:	31 d2                	xor    edx,edx
c000a3ab:	41                   	inc    ecx
c000a3ac:	89 f0                	mov    eax,esi
c000a3ae:	f7 f3                	div    ebx
c000a3b0:	39 de                	cmp    esi,ebx
c000a3b2:	73 f3                	jae    c000a3a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a3b4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a3b7:	eb 02                	jmp    c000a3bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a3b9:	89 c5                	mov    ebp,eax
c000a3bb:	31 d2                	xor    edx,edx
c000a3bd:	49                   	dec    ecx
c000a3be:	89 e8                	mov    eax,ebp
c000a3c0:	f7 f3                	div    ebx
c000a3c2:	39 dd                	cmp    ebp,ebx
c000a3c4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a3c8:	88 11                	mov    BYTE PTR [ecx],dl
c000a3ca:	73 ed                	jae    c000a3b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a3cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a3d0:	83 c4 20             	add    esp,0x20
c000a3d3:	5b                   	pop    ebx
c000a3d4:	5e                   	pop    esi
c000a3d5:	5f                   	pop    edi
c000a3d6:	5d                   	pop    ebp
c000a3d7:	c3                   	ret    

c000a3d8 <Dbg::logc(char)>:
c000a3d8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a3dc:	f6 05 30 04 02 c0 10 	test   BYTE PTR ds:0xc0020430,0x10
c000a3e3:	75 12                	jne    c000a3f7 <Dbg::logc(char)+0x1f>
c000a3e5:	ba fd 03 00 00       	mov    edx,0x3fd
c000a3ea:	ec                   	in     al,dx
c000a3eb:	a8 20                	test   al,0x20
c000a3ed:	74 fb                	je     c000a3ea <Dbg::logc(char)+0x12>
c000a3ef:	ba f8 03 00 00       	mov    edx,0x3f8
c000a3f4:	88 c8                	mov    al,cl
c000a3f6:	ee                   	out    dx,al
c000a3f7:	c3                   	ret    

c000a3f8 <Dbg::logs(char*)>:
c000a3f8:	53                   	push   ebx
c000a3f9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a3fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a400:	84 c0                	test   al,al
c000a402:	74 0f                	je     c000a413 <Dbg::logs(char*)+0x1b>
c000a404:	50                   	push   eax
c000a405:	43                   	inc    ebx
c000a406:	e8 cd ff ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a40b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a40e:	5a                   	pop    edx
c000a40f:	84 c0                	test   al,al
c000a411:	75 f1                	jne    c000a404 <Dbg::logs(char*)+0xc>
c000a413:	5b                   	pop    ebx
c000a414:	c3                   	ret    

c000a415 <Dbg::logWriteInt(unsigned int)>:
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	6a 0a                	push   0xa
c000a41a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a41e:	50                   	push   eax
c000a41f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a423:	50                   	push   eax
c000a424:	e8 44 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a429:	50                   	push   eax
c000a42a:	e8 c9 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a42f:	83 c4 20             	add    esp,0x20
c000a432:	c3                   	ret    

c000a433 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a433:	83 ec 10             	sub    esp,0x10
c000a436:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a43a:	50                   	push   eax
c000a43b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a43f:	50                   	push   eax
c000a440:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a444:	52                   	push   edx
c000a445:	e8 23 ff ff ff       	call   c000a36d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a44a:	50                   	push   eax
c000a44b:	e8 a8 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a450:	83 c4 20             	add    esp,0x20
c000a453:	c3                   	ret    

c000a454 <Dbg::kprintf(char const*, ...)>:
c000a454:	55                   	push   ebp
c000a455:	57                   	push   edi
c000a456:	56                   	push   esi
c000a457:	53                   	push   ebx
c000a458:	83 ec 0c             	sub    esp,0xc
c000a45b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a45f:	f6 05 30 04 02 c0 10 	test   BYTE PTR ds:0xc0020430,0x10
c000a466:	74 08                	je     c000a470 <Dbg::kprintf(char const*, ...)+0x1c>
c000a468:	83 c4 0c             	add    esp,0xc
c000a46b:	5b                   	pop    ebx
c000a46c:	5e                   	pop    esi
c000a46d:	5f                   	pop    edi
c000a46e:	5d                   	pop    ebp
c000a46f:	c3                   	ret    
c000a470:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a474:	31 ff                	xor    edi,edi
c000a476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a47a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a47d:	84 c0                	test   al,al
c000a47f:	74 e7                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a481:	8d 77 01             	lea    esi,[edi+0x1]
c000a484:	3c 25                	cmp    al,0x25
c000a486:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a489:	75 47                	jne    c000a4d2 <Dbg::kprintf(char const*, ...)+0x7e>
c000a48b:	83 c7 02             	add    edi,0x2
c000a48e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a491:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a494:	83 e8 25             	sub    eax,0x25
c000a497:	3c 53                	cmp    al,0x53
c000a499:	0f 87 d2 00 00 00    	ja     c000a571 <Dbg::kprintf(char const*, ...)+0x11d>
c000a49f:	25 ff 00 00 00       	and    eax,0xff
c000a4a4:	ff 24 85 94 d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe296c]
c000a4ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4af:	89 c8                	mov    eax,ecx
c000a4b1:	83 c1 04             	add    ecx,0x4
c000a4b4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a4ba:	55                   	push   ebp
c000a4bb:	e8 55 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a4c0:	58                   	pop    eax
c000a4c1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a4c4:	84 c0                	test   al,al
c000a4c6:	74 a0                	je     c000a468 <Dbg::kprintf(char const*, ...)+0x14>
c000a4c8:	8d 77 01             	lea    esi,[edi+0x1]
c000a4cb:	3c 25                	cmp    al,0x25
c000a4cd:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a4d0:	74 b9                	je     c000a48b <Dbg::kprintf(char const*, ...)+0x37>
c000a4d2:	50                   	push   eax
c000a4d3:	89 f7                	mov    edi,esi
c000a4d5:	e8 fe fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a4da:	89 ee                	mov    esi,ebp
c000a4dc:	58                   	pop    eax
c000a4dd:	eb e2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4e3:	89 c8                	mov    eax,ecx
c000a4e5:	83 c1 04             	add    ecx,0x4
c000a4e8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a4ea:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a4ee:	50                   	push   eax
c000a4ef:	e8 04 ff ff ff       	call   c000a3f8 <Dbg::logs(char*)>
c000a4f4:	58                   	pop    eax
c000a4f5:	eb ca                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a4f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a4fb:	89 d0                	mov    eax,edx
c000a4fd:	83 c2 04             	add    edx,0x4
c000a500:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a504:	8b 00                	mov    eax,DWORD PTR [eax]
c000a506:	50                   	push   eax
c000a507:	e8 09 ff ff ff       	call   c000a415 <Dbg::logWriteInt(unsigned int)>
c000a50c:	58                   	pop    eax
c000a50d:	eb b2                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a50f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a513:	89 d0                	mov    eax,edx
c000a515:	83 c2 04             	add    edx,0x4
c000a518:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a51b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a51f:	50                   	push   eax
c000a520:	e8 b3 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a525:	58                   	pop    eax
c000a526:	eb 99                	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a528:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a52c:	89 c8                	mov    eax,ecx
c000a52e:	83 c1 04             	add    ecx,0x4
c000a531:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a535:	6a 10                	push   0x10
c000a537:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a539:	51                   	push   ecx
c000a53a:	e8 f4 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a53f:	5d                   	pop    ebp
c000a540:	58                   	pop    eax
c000a541:	e9 7b ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a546:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a54a:	89 d0                	mov    eax,edx
c000a54c:	83 c2 08             	add    edx,0x8
c000a54f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a553:	6a 10                	push   0x10
c000a555:	8b 00                	mov    eax,DWORD PTR [eax]
c000a557:	50                   	push   eax
c000a558:	e8 d6 fe ff ff       	call   c000a433 <Dbg::logWriteIntBase(unsigned int, int)>
c000a55d:	58                   	pop    eax
c000a55e:	5a                   	pop    edx
c000a55f:	e9 5d ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a564:	6a 25                	push   0x25
c000a566:	e8 6d fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a56b:	5a                   	pop    edx
c000a56c:	e9 50 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a571:	6a 25                	push   0x25
c000a573:	e8 60 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a578:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a57c:	50                   	push   eax
c000a57d:	e8 56 fe ff ff       	call   c000a3d8 <Dbg::logc(char)>
c000a582:	5a                   	pop    edx
c000a583:	59                   	pop    ecx
c000a584:	e9 38 ff ff ff       	jmp    c000a4c1 <Dbg::kprintf(char const*, ...)+0x6d>
c000a589:	90                   	nop

c000a58a <File::read(unsigned long long, void*, int*)>:
c000a58a:	53                   	push   ebx
c000a58b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a58f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a593:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a59a:	3c 19                	cmp    al,0x19
c000a59c:	77 35                	ja     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a59e:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000a5a5:	85 c0                	test   eax,eax
c000a5a7:	74 2a                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a5af:	85 c0                	test   eax,eax
c000a5b1:	74 20                	je     c000a5d3 <File::read(unsigned long long, void*, int*)+0x49>
c000a5b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a5b7:	74 21                	je     c000a5da <File::read(unsigned long long, void*, int*)+0x50>
c000a5b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a5bf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a5c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a5c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a5cd:	5b                   	pop    ebx
c000a5ce:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a5d1:	ff e0                	jmp    eax
c000a5d3:	b8 0b 00 00 00       	mov    eax,0xb
c000a5d8:	eb 05                	jmp    c000a5df <File::read(unsigned long long, void*, int*)+0x55>
c000a5da:	b8 05 00 00 00       	mov    eax,0x5
c000a5df:	5b                   	pop    ebx
c000a5e0:	c3                   	ret    
c000a5e1:	90                   	nop

c000a5e2 <File::write(unsigned long long, void*, int*)>:
c000a5e2:	53                   	push   ebx
c000a5e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a5eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a5f2:	3c 19                	cmp    al,0x19
c000a5f4:	77 35                	ja     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a5f6:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000a5fd:	85 c0                	test   eax,eax
c000a5ff:	74 2a                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a601:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a607:	85 c0                	test   eax,eax
c000a609:	74 20                	je     c000a62b <File::write(unsigned long long, void*, int*)+0x49>
c000a60b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a60f:	74 21                	je     c000a632 <File::write(unsigned long long, void*, int*)+0x50>
c000a611:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a613:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a617:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a61d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a625:	5b                   	pop    ebx
c000a626:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a629:	ff e0                	jmp    eax
c000a62b:	b8 0b 00 00 00       	mov    eax,0xb
c000a630:	eb 05                	jmp    c000a637 <File::write(unsigned long long, void*, int*)+0x55>
c000a632:	b8 05 00 00 00       	mov    eax,0x5
c000a637:	5b                   	pop    ebx
c000a638:	c3                   	ret    
c000a639:	90                   	nop

c000a63a <Directory::read(unsigned long long, void*, int*)>:
c000a63a:	53                   	push   ebx
c000a63b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a63f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a643:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a64a:	3c 19                	cmp    al,0x19
c000a64c:	77 35                	ja     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a64e:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000a655:	85 c0                	test   eax,eax
c000a657:	74 2a                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a659:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a65f:	85 c0                	test   eax,eax
c000a661:	74 20                	je     c000a683 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a663:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a667:	74 21                	je     c000a68a <Directory::read(unsigned long long, void*, int*)+0x50>
c000a669:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a66b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a66f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a679:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a67d:	5b                   	pop    ebx
c000a67e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a681:	ff e0                	jmp    eax
c000a683:	b8 0b 00 00 00       	mov    eax,0xb
c000a688:	eb 05                	jmp    c000a68f <Directory::read(unsigned long long, void*, int*)+0x55>
c000a68a:	b8 05 00 00 00       	mov    eax,0x5
c000a68f:	5b                   	pop    ebx
c000a690:	c3                   	ret    
c000a691:	90                   	nop

c000a692 <Directory::write(unsigned long long, void*, int*)>:
c000a692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a696:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a69d:	b8 0b 00 00 00       	mov    eax,0xb
c000a6a2:	80 fa 19             	cmp    dl,0x19
c000a6a5:	77 18                	ja     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6a7:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000a6ae:	85 d2                	test   edx,edx
c000a6b0:	74 0d                	je     c000a6bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a6b2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a6b9:	19 c0                	sbb    eax,eax
c000a6bb:	83 e0 0a             	and    eax,0xa
c000a6be:	40                   	inc    eax
c000a6bf:	c3                   	ret    

c000a6c0 <File::isAtty()>:
c000a6c0:	31 c0                	xor    eax,eax
c000a6c2:	c3                   	ret    
c000a6c3:	90                   	nop

c000a6c4 <Directory::isAtty()>:
c000a6c4:	31 c0                	xor    eax,eax
c000a6c6:	c3                   	ret    
c000a6c7:	90                   	nop

c000a6c8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a6c8:	b8 0a 00 00 00       	mov    eax,0xa
c000a6cd:	c3                   	ret    

c000a6ce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a6ce:	b8 0a 00 00 00       	mov    eax,0xa
c000a6d3:	c3                   	ret    

c000a6d4 <Filesystem::allocateSwapfile(char const*, int)>:
c000a6d4:	31 c0                	xor    eax,eax
c000a6d6:	31 d2                	xor    edx,edx
c000a6d8:	c3                   	ret    
c000a6d9:	90                   	nop

c000a6da <File::~File()>:
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	ba 54 d8 01 c0       	mov    edx,0xc001d854
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	89 10                	mov    DWORD PTR [eax],edx
c000a6e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ec:	83 ec 0c             	sub    esp,0xc
c000a6ef:	50                   	push   eax
c000a6f0:	e8 ab e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a6f5:	83 c4 10             	add    esp,0x10
c000a6f8:	90                   	nop
c000a6f9:	83 c4 0c             	add    esp,0xc
c000a6fc:	c3                   	ret    
c000a6fd:	90                   	nop

c000a6fe <File::~File()>:
c000a6fe:	83 ec 0c             	sub    esp,0xc
c000a701:	83 ec 0c             	sub    esp,0xc
c000a704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a708:	e8 cd ff ff ff       	call   c000a6da <File::~File()>
c000a70d:	83 c4 10             	add    esp,0x10
c000a710:	83 ec 08             	sub    esp,0x8
c000a713:	68 14 01 00 00       	push   0x114
c000a718:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a71c:	e8 3d fc ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a721:	83 c4 10             	add    esp,0x10
c000a724:	83 c4 0c             	add    esp,0xc
c000a727:	c3                   	ret    

c000a728 <Directory::~Directory()>:
c000a728:	83 ec 0c             	sub    esp,0xc
c000a72b:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c000a730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a734:	89 10                	mov    DWORD PTR [eax],edx
c000a736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73a:	83 ec 0c             	sub    esp,0xc
c000a73d:	50                   	push   eax
c000a73e:	e8 5d e8 ff ff       	call   c0008fa0 <UnixFile::~UnixFile()>
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	90                   	nop
c000a747:	83 c4 0c             	add    esp,0xc
c000a74a:	c3                   	ret    
c000a74b:	90                   	nop

c000a74c <Directory::~Directory()>:
c000a74c:	83 ec 0c             	sub    esp,0xc
c000a74f:	83 ec 0c             	sub    esp,0xc
c000a752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a756:	e8 cd ff ff ff       	call   c000a728 <Directory::~Directory()>
c000a75b:	83 c4 10             	add    esp,0x10
c000a75e:	83 ec 08             	sub    esp,0x8
c000a761:	68 14 01 00 00       	push   0x114
c000a766:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a76a:	e8 ef fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a76f:	83 c4 10             	add    esp,0x10
c000a772:	83 c4 0c             	add    esp,0xc
c000a775:	c3                   	ret    

c000a776 <Filesystem::Filesystem()>:
c000a776:	ba ec d7 01 c0       	mov    edx,0xc001d7ec
c000a77b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a77f:	89 10                	mov    DWORD PTR [eax],edx
c000a781:	8b 15 14 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020514
c000a787:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a78b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a792:	a3 14 05 02 c0       	mov    ds:0xc0020514,eax
c000a797:	90                   	nop
c000a798:	c3                   	ret    
c000a799:	90                   	nop

c000a79a <Filesystem::~Filesystem()>:
c000a79a:	ba ec d7 01 c0       	mov    edx,0xc001d7ec
c000a79f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7a3:	89 10                	mov    DWORD PTR [eax],edx
c000a7a5:	90                   	nop
c000a7a6:	c3                   	ret    
c000a7a7:	90                   	nop

c000a7a8 <Filesystem::~Filesystem()>:
c000a7a8:	83 ec 0c             	sub    esp,0xc
c000a7ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a7af:	e8 e6 ff ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c000a7b4:	83 c4 04             	add    esp,0x4
c000a7b7:	83 ec 08             	sub    esp,0x8
c000a7ba:	6a 08                	push   0x8
c000a7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7c0:	e8 99 fb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000a7c5:	83 c4 10             	add    esp,0x10
c000a7c8:	83 c4 0c             	add    esp,0xc
c000a7cb:	c3                   	ret    

c000a7cc <Fs::getcwd(Process*, char*, int)>:
c000a7cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7d0:	31 c0                	xor    eax,eax
c000a7d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a7d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a7d9:	7d 15                	jge    c000a7f0 <Fs::getcwd(Process*, char*, int)+0x24>
c000a7db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7df:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a7e6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a7e9:	84 c9                	test   cl,cl
c000a7eb:	74 06                	je     c000a7f3 <Fs::getcwd(Process*, char*, int)+0x27>
c000a7ed:	40                   	inc    eax
c000a7ee:	eb e2                	jmp    c000a7d2 <Fs::getcwd(Process*, char*, int)+0x6>
c000a7f0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a7f3:	31 c0                	xor    eax,eax
c000a7f5:	c3                   	ret    

c000a7f6 <Fs::initVFS()>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	6a 08                	push   0x8
c000a7fb:	e8 b9 cf ff ff       	call   c00077b9 <malloc>
c000a800:	89 04 24             	mov    DWORD PTR [esp],eax
c000a803:	e8 dc c3 00 00       	call   c0016be4 <FAT::FAT()>
c000a808:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a80f:	e8 a5 cf ff ff       	call   c00077b9 <malloc>
c000a814:	89 04 24             	mov    DWORD PTR [esp],eax
c000a817:	e8 24 d1 00 00       	call   c0017940 <ISO9660::ISO9660()>
c000a81c:	83 c4 1c             	add    esp,0x1c
c000a81f:	c3                   	ret    

c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a820:	55                   	push   ebp
c000a821:	57                   	push   edi
c000a822:	56                   	push   esi
c000a823:	53                   	push   ebx
c000a824:	81 ec 10 04 00 00    	sub    esp,0x410
c000a82a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a831:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a838:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a83f:	68 00 04 00 00       	push   0x400
c000a844:	6a 00                	push   0x0
c000a846:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a84a:	56                   	push   esi
c000a84b:	e8 80 5c ff ff       	call   c00004d0 <memset>
c000a850:	83 c4 10             	add    esp,0x10
c000a853:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a857:	75 0b                	jne    c000a864 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a859:	50                   	push   eax
c000a85a:	50                   	push   eax
c000a85b:	57                   	push   edi
c000a85c:	56                   	push   esi
c000a85d:	e8 9e 5d ff ff       	call   c0000600 <strcpy>
c000a862:	eb 41                	jmp    c000a8a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a864:	8a 07                	mov    al,BYTE PTR [edi]
c000a866:	3c 5c                	cmp    al,0x5c
c000a868:	74 04                	je     c000a86e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a86a:	3c 2f                	cmp    al,0x2f
c000a86c:	75 18                	jne    c000a886 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a86e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a871:	3c 60                	cmp    al,0x60
c000a873:	7e 03                	jle    c000a878 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a875:	83 e8 20             	sub    eax,0x20
c000a878:	88 04 24             	mov    BYTE PTR [esp],al
c000a87b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a882:	50                   	push   eax
c000a883:	50                   	push   eax
c000a884:	eb 18                	jmp    c000a89e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a886:	50                   	push   eax
c000a887:	50                   	push   eax
c000a888:	55                   	push   ebp
c000a889:	56                   	push   esi
c000a88a:	e8 71 5d ff ff       	call   c0000600 <strcpy>
c000a88f:	5a                   	pop    edx
c000a890:	59                   	pop    ecx
c000a891:	68 c6 e4 01 c0       	push   0xc001e4c6
c000a896:	56                   	push   esi
c000a897:	e8 24 5f ff ff       	call   c00007c0 <strcat>
c000a89c:	5d                   	pop    ebp
c000a89d:	58                   	pop    eax
c000a89e:	57                   	push   edi
c000a89f:	56                   	push   esi
c000a8a0:	e8 1b 5f ff ff       	call   c00007c0 <strcat>
c000a8a5:	83 c4 10             	add    esp,0x10
c000a8a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a8ab:	3c 60                	cmp    al,0x60
c000a8ad:	7e 03                	jle    c000a8b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a8af:	83 e8 20             	sub    eax,0x20
c000a8b2:	88 04 24             	mov    BYTE PTR [esp],al
c000a8b5:	88 03                	mov    BYTE PTR [ebx],al
c000a8b7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a8be:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a8c4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a8c8:	bf 03 00 00 00       	mov    edi,0x3
c000a8cd:	b8 03 00 00 00       	mov    eax,0x3
c000a8d2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a8d5:	84 d2                	test   dl,dl
c000a8d7:	0f 84 91 00 00 00    	je     c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a8dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a8e0:	80 fa 5c             	cmp    dl,0x5c
c000a8e3:	74 05                	je     c000a8ea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a8e5:	80 fa 2f             	cmp    dl,0x2f
c000a8e8:	75 12                	jne    c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8ea:	89 c5                	mov    ebp,eax
c000a8ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a8f1:	74 09                	je     c000a8fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a8f3:	40                   	inc    eax
c000a8f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a8f8:	89 cf                	mov    edi,ecx
c000a8fa:	eb d6                	jmp    c000a8d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a8fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a901:	75 5b                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a903:	80 fa 2e             	cmp    dl,0x2e
c000a906:	75 56                	jne    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a908:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a90c:	74 19                	je     c000a927 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a90e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a913:	74 53                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a915:	89 f9                	mov    ecx,edi
c000a917:	41                   	inc    ecx
c000a918:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a91b:	80 fa 2f             	cmp    dl,0x2f
c000a91e:	74 f7                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a920:	80 fa 5c             	cmp    dl,0x5c
c000a923:	74 f2                	je     c000a917 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a925:	eb d1                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a927:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a92c:	74 3a                	je     c000a968 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a92e:	83 f8 03             	cmp    eax,0x3
c000a931:	74 c5                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a933:	41                   	inc    ecx
c000a934:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a937:	80 fa 2f             	cmp    dl,0x2f
c000a93a:	74 f7                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a93c:	80 fa 5c             	cmp    dl,0x5c
c000a93f:	74 f2                	je     c000a933 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a941:	48                   	dec    eax
c000a942:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a946:	75 06                	jne    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a948:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a94c:	eb f3                	jmp    c000a941 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a94e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a952:	74 07                	je     c000a95b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a954:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a958:	48                   	dec    eax
c000a959:	eb f3                	jmp    c000a94e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a95b:	40                   	inc    eax
c000a95c:	eb 9a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a95e:	80 fa 2f             	cmp    dl,0x2f
c000a961:	74 95                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a963:	80 fa 5c             	cmp    dl,0x5c
c000a966:	74 90                	je     c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a968:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a96b:	40                   	inc    eax
c000a96c:	eb 8a                	jmp    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a96e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a972:	83 ec 0c             	sub    esp,0xc
c000a975:	53                   	push   ebx
c000a976:	e8 c5 5b ff ff       	call   c0000540 <strlen>
c000a97b:	83 c4 10             	add    esp,0x10
c000a97e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000a983:	75 26                	jne    c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000a985:	83 ec 0c             	sub    esp,0xc
c000a988:	53                   	push   ebx
c000a989:	e8 b2 5b ff ff       	call   c0000540 <strlen>
c000a98e:	83 c4 10             	add    esp,0x10
c000a991:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000a996:	74 26                	je     c000a9be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	53                   	push   ebx
c000a99c:	e8 9f 5b ff ff       	call   c0000540 <strlen>
c000a9a1:	83 c4 10             	add    esp,0x10
c000a9a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000a9a9:	eb c7                	jmp    c000a972 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000a9ab:	83 ec 0c             	sub    esp,0xc
c000a9ae:	53                   	push   ebx
c000a9af:	e8 8c 5b ff ff       	call   c0000540 <strlen>
c000a9b4:	83 c4 10             	add    esp,0x10
c000a9b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9bc:	74 c7                	je     c000a985 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000a9be:	81 c4 0c 04 00 00    	add    esp,0x40c
c000a9c4:	5b                   	pop    ebx
c000a9c5:	5e                   	pop    esi
c000a9c6:	5f                   	pop    edi
c000a9c7:	5d                   	pop    ebp
c000a9c8:	c3                   	ret    
c000a9c9:	90                   	nop

c000a9ca <File::File(char const*, Process*)>:
c000a9ca:	83 ec 0c             	sub    esp,0xc
c000a9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9d1:	83 ec 08             	sub    esp,0x8
c000a9d4:	6a 00                	push   0x0
c000a9d6:	50                   	push   eax
c000a9d7:	e8 e2 e3 ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000a9dc:	83 c4 10             	add    esp,0x10
c000a9df:	ba 54 d8 01 c0       	mov    edx,0xc001d854
c000a9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e8:	89 10                	mov    DWORD PTR [eax],edx
c000a9ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a9ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000a9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f8:	83 c0 0d             	add    eax,0xd
c000a9fb:	83 ec 04             	sub    esp,0x4
c000a9fe:	52                   	push   edx
c000a9ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa03:	50                   	push   eax
c000aa04:	e8 17 fe ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa09:	83 c4 10             	add    esp,0x10
c000aa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa10:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa13:	8d 50 bf             	lea    edx,[eax-0x41]
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aa20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa24:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aa28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa2c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa32:	25 ff 00 00 00       	and    eax,0xff
c000aa37:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000aa3e:	85 c0                	test   eax,eax
c000aa40:	74 42                	je     c000aa84 <File::File(char const*, Process*)+0xba>
c000aa42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa46:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa4c:	25 ff 00 00 00       	and    eax,0xff
c000aa51:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000aa58:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aa5e:	85 c0                	test   eax,eax
c000aa60:	75 22                	jne    c000aa84 <File::File(char const*, Process*)+0xba>
c000aa62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa66:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aa6c:	25 ff 00 00 00       	and    eax,0xff
c000aa71:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000aa78:	83 ec 0c             	sub    esp,0xc
c000aa7b:	50                   	push   eax
c000aa7c:	e8 f9 1f 00 00       	call   c000ca7a <LogicalDisk::mount()>
c000aa81:	83 c4 10             	add    esp,0x10
c000aa84:	90                   	nop
c000aa85:	83 c4 0c             	add    esp,0xc
c000aa88:	c3                   	ret    
c000aa89:	90                   	nop

c000aa8a <File::open(FileOpenMode)>:
c000aa8a:	53                   	push   ebx
c000aa8b:	b8 0b 00 00 00       	mov    eax,0xb
c000aa90:	83 ec 08             	sub    esp,0x8
c000aa93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa97:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000aa9e:	80 fa 19             	cmp    dl,0x19
c000aaa1:	77 40                	ja     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaa3:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000aaaa:	85 d2                	test   edx,edx
c000aaac:	74 35                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aaae:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000aab4:	85 d2                	test   edx,edx
c000aab6:	74 2b                	je     c000aae3 <File::open(FileOpenMode)+0x59>
c000aab8:	b8 06 00 00 00       	mov    eax,0x6
c000aabd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000aac1:	75 20                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aac3:	8b 02                	mov    eax,DWORD PTR [edx]
c000aac5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aacb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aacf:	51                   	push   ecx
c000aad0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000aad3:	51                   	push   ecx
c000aad4:	52                   	push   edx
c000aad5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000aad8:	83 c4 10             	add    esp,0x10
c000aadb:	85 c0                	test   eax,eax
c000aadd:	75 04                	jne    c000aae3 <File::open(FileOpenMode)+0x59>
c000aadf:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000aae3:	83 c4 08             	add    esp,0x8
c000aae6:	5b                   	pop    ebx
c000aae7:	c3                   	ret    

c000aae8 <File::close()>:
c000aae8:	53                   	push   ebx
c000aae9:	b8 0b 00 00 00       	mov    eax,0xb
c000aaee:	83 ec 08             	sub    esp,0x8
c000aaf1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aaf5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aafc:	80 fa 19             	cmp    dl,0x19
c000aaff:	77 41                	ja     c000ab42 <File::close()+0x5a>
c000ab01:	8b 1c 95 80 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd680]
c000ab08:	85 db                	test   ebx,ebx
c000ab0a:	74 36                	je     c000ab42 <File::close()+0x5a>
c000ab0c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab13:	74 2d                	je     c000ab42 <File::close()+0x5a>
c000ab15:	b8 05 00 00 00       	mov    eax,0x5
c000ab1a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ab1e:	74 22                	je     c000ab42 <File::close()+0x5a>
c000ab20:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ab24:	8b 04 95 80 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd680]
c000ab2b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab31:	53                   	push   ebx
c000ab32:	53                   	push   ebx
c000ab33:	8b 10                	mov    edx,DWORD PTR [eax]
c000ab35:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ab3b:	50                   	push   eax
c000ab3c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ab3f:	83 c4 10             	add    esp,0x10
c000ab42:	83 c4 08             	add    esp,0x8
c000ab45:	5b                   	pop    ebx
c000ab46:	c3                   	ret    
c000ab47:	90                   	nop

c000ab48 <File::seek(unsigned long long)>:
c000ab48:	56                   	push   esi
c000ab49:	53                   	push   ebx
c000ab4a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab4f:	51                   	push   ecx
c000ab50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ab54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ab58:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ab5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ab63:	80 fa 19             	cmp    dl,0x19
c000ab66:	77 31                	ja     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab68:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000ab6f:	85 d2                	test   edx,edx
c000ab71:	74 26                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab73:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab79:	85 d2                	test   edx,edx
c000ab7b:	74 1c                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab7d:	b8 05 00 00 00       	mov    eax,0x5
c000ab82:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ab86:	74 11                	je     c000ab99 <File::seek(unsigned long long)+0x51>
c000ab88:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab8a:	53                   	push   ebx
c000ab8b:	51                   	push   ecx
c000ab8c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ab92:	52                   	push   edx
c000ab93:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	5a                   	pop    edx
c000ab9a:	5b                   	pop    ebx
c000ab9b:	5e                   	pop    esi
c000ab9c:	c3                   	ret    
c000ab9d:	90                   	nop

c000ab9e <File::tell(unsigned long long*)>:
c000ab9e:	83 ec 0c             	sub    esp,0xc
c000aba1:	b8 0b 00 00 00       	mov    eax,0xb
c000aba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abaa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abb1:	80 fa 19             	cmp    dl,0x19
c000abb4:	77 34                	ja     c000abea <File::tell(unsigned long long*)+0x4c>
c000abb6:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000abbd:	85 d2                	test   edx,edx
c000abbf:	74 29                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abc1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abc7:	85 d2                	test   edx,edx
c000abc9:	74 1f                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abcb:	b8 05 00 00 00       	mov    eax,0x5
c000abd0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abd4:	74 14                	je     c000abea <File::tell(unsigned long long*)+0x4c>
c000abd6:	50                   	push   eax
c000abd7:	8b 02                	mov    eax,DWORD PTR [edx]
c000abd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abdd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abe3:	52                   	push   edx
c000abe4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	83 c4 0c             	add    esp,0xc
c000abed:	c3                   	ret    

c000abee <File::rewind()>:
c000abee:	83 ec 10             	sub    esp,0x10
c000abf1:	6a 00                	push   0x0
c000abf3:	6a 00                	push   0x0
c000abf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abf9:	e8 4a ff ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c000abfe:	83 c4 1c             	add    esp,0x1c
c000ac01:	c3                   	ret    

c000ac02 <File::unlink()>:
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	b8 0b 00 00 00       	mov    eax,0xb
c000ac0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac0e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac15:	80 f9 19             	cmp    cl,0x19
c000ac18:	77 2f                	ja     c000ac49 <File::unlink()+0x47>
c000ac1a:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000ac21:	85 c9                	test   ecx,ecx
c000ac23:	74 24                	je     c000ac49 <File::unlink()+0x47>
c000ac25:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac2b:	85 c9                	test   ecx,ecx
c000ac2d:	74 1a                	je     c000ac49 <File::unlink()+0x47>
c000ac2f:	b8 06 00 00 00       	mov    eax,0x6
c000ac34:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac38:	75 0f                	jne    c000ac49 <File::unlink()+0x47>
c000ac3a:	83 c2 0d             	add    edx,0xd
c000ac3d:	50                   	push   eax
c000ac3e:	50                   	push   eax
c000ac3f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac41:	52                   	push   edx
c000ac42:	51                   	push   ecx
c000ac43:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ac46:	83 c4 10             	add    esp,0x10
c000ac49:	83 c4 0c             	add    esp,0xc
c000ac4c:	c3                   	ret    
c000ac4d:	90                   	nop

c000ac4e <File::rename(char const*)>:
c000ac4e:	83 ec 0c             	sub    esp,0xc
c000ac51:	b8 0b 00 00 00       	mov    eax,0xb
c000ac56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ac61:	80 f9 19             	cmp    cl,0x19
c000ac64:	77 32                	ja     c000ac98 <File::rename(char const*)+0x4a>
c000ac66:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000ac6d:	85 c9                	test   ecx,ecx
c000ac6f:	74 27                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ac77:	85 c9                	test   ecx,ecx
c000ac79:	74 1d                	je     c000ac98 <File::rename(char const*)+0x4a>
c000ac7b:	b8 06 00 00 00       	mov    eax,0x6
c000ac80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ac84:	75 12                	jne    c000ac98 <File::rename(char const*)+0x4a>
c000ac86:	83 c2 0d             	add    edx,0xd
c000ac89:	50                   	push   eax
c000ac8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ac8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac90:	52                   	push   edx
c000ac91:	51                   	push   ecx
c000ac92:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ac95:	83 c4 10             	add    esp,0x10
c000ac98:	83 c4 0c             	add    esp,0xc
c000ac9b:	c3                   	ret    

c000ac9c <File::chfatattr(unsigned char, unsigned char)>:
c000ac9c:	57                   	push   edi
c000ac9d:	b8 0b 00 00 00       	mov    eax,0xb
c000aca2:	56                   	push   esi
c000aca3:	53                   	push   ebx
c000aca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000acac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acb3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000acb7:	80 f9 19             	cmp    cl,0x19
c000acba:	77 37                	ja     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acbc:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000acc3:	85 c9                	test   ecx,ecx
c000acc5:	74 2c                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acc7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000accd:	85 c9                	test   ecx,ecx
c000accf:	74 22                	je     c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acd1:	b8 06 00 00 00       	mov    eax,0x6
c000acd6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acda:	75 17                	jne    c000acf3 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000acdc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000acde:	89 f0                	mov    eax,esi
c000ace0:	83 c2 0d             	add    edx,0xd
c000ace3:	0f b6 f0             	movzx  esi,al
c000ace6:	0f b6 db             	movzx  ebx,bl
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	52                   	push   edx
c000acec:	51                   	push   ecx
c000aced:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	5b                   	pop    ebx
c000acf4:	5e                   	pop    esi
c000acf5:	5f                   	pop    edi
c000acf6:	c3                   	ret    
c000acf7:	90                   	nop

c000acf8 <File::exists()>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	31 c0                	xor    eax,eax
c000acfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad08:	80 f9 19             	cmp    cl,0x19
c000ad0b:	77 24                	ja     c000ad31 <File::exists()+0x39>
c000ad0d:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000ad14:	85 c9                	test   ecx,ecx
c000ad16:	74 19                	je     c000ad31 <File::exists()+0x39>
c000ad18:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad1e:	85 c9                	test   ecx,ecx
c000ad20:	74 0f                	je     c000ad31 <File::exists()+0x39>
c000ad22:	83 c2 0d             	add    edx,0xd
c000ad25:	50                   	push   eax
c000ad26:	50                   	push   eax
c000ad27:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad29:	52                   	push   edx
c000ad2a:	51                   	push   ecx
c000ad2b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ad2e:	83 c4 10             	add    esp,0x10
c000ad31:	83 c4 0c             	add    esp,0xc
c000ad34:	c3                   	ret    
c000ad35:	90                   	nop

c000ad36 <File::stat(unsigned long long*, bool*)>:
c000ad36:	56                   	push   esi
c000ad37:	53                   	push   ebx
c000ad38:	50                   	push   eax
c000ad39:	b8 0b 00 00 00       	mov    eax,0xb
c000ad3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad42:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad51:	80 f9 19             	cmp    cl,0x19
c000ad54:	77 3d                	ja     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad56:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000ad5d:	85 c9                	test   ecx,ecx
c000ad5f:	74 32                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad61:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad67:	85 c9                	test   ecx,ecx
c000ad69:	74 28                	je     c000ad93 <File::stat(unsigned long long*, bool*)+0x5d>
c000ad6b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad6d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad71:	74 13                	je     c000ad86 <File::stat(unsigned long long*, bool*)+0x50>
c000ad73:	83 ec 04             	sub    esp,0x4
c000ad76:	56                   	push   esi
c000ad77:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ad7d:	51                   	push   ecx
c000ad7e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ad81:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ad84:	eb 0a                	jmp    c000ad90 <File::stat(unsigned long long*, bool*)+0x5a>
c000ad86:	53                   	push   ebx
c000ad87:	83 c2 0d             	add    edx,0xd
c000ad8a:	56                   	push   esi
c000ad8b:	52                   	push   edx
c000ad8c:	51                   	push   ecx
c000ad8d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ad90:	83 c4 10             	add    esp,0x10
c000ad93:	5a                   	pop    edx
c000ad94:	5b                   	pop    ebx
c000ad95:	5e                   	pop    esi
c000ad96:	c3                   	ret    

c000ad97 <Fs::setcwd(Process*, char*)>:
c000ad97:	55                   	push   ebp
c000ad98:	57                   	push   edi
c000ad99:	56                   	push   esi
c000ad9a:	53                   	push   ebx
c000ad9b:	81 ec 20 02 00 00    	sub    esp,0x220
c000ada1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ada8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000adae:	57                   	push   edi
c000adaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000adb6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000adba:	56                   	push   esi
c000adbb:	e8 60 fa ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000adc0:	89 34 24             	mov    DWORD PTR [esp],esi
c000adc3:	e8 78 57 ff ff       	call   c0000540 <strlen>
c000adc8:	83 c4 10             	add    esp,0x10
c000adcb:	83 f8 02             	cmp    eax,0x2
c000adce:	77 15                	ja     c000ade5 <Fs::setcwd(Process*, char*)+0x4e>
c000add0:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000add5:	83 eb 41             	sub    ebx,0x41
c000add8:	8b 04 9d 80 29 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd680]
c000addf:	85 c0                	test   eax,eax
c000ade1:	75 1c                	jne    c000adff <Fs::setcwd(Process*, char*)+0x68>
c000ade3:	eb 2f                	jmp    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ade5:	83 ec 0c             	sub    esp,0xc
c000ade8:	56                   	push   esi
c000ade9:	e8 52 57 ff ff       	call   c0000540 <strlen>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	83 f8 03             	cmp    eax,0x3
c000adf4:	75 57                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adf6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000adfb:	75 50                	jne    c000ae4d <Fs::setcwd(Process*, char*)+0xb6>
c000adfd:	eb d1                	jmp    c000add0 <Fs::setcwd(Process*, char*)+0x39>
c000adff:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae06:	75 0c                	jne    c000ae14 <Fs::setcwd(Process*, char*)+0x7d>
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	50                   	push   eax
c000ae0c:	e8 69 1c 00 00       	call   c000ca7a <LogicalDisk::mount()>
c000ae11:	83 c4 10             	add    esp,0x10
c000ae14:	b8 03 00 00 00       	mov    eax,0x3
c000ae19:	83 fb 19             	cmp    ebx,0x19
c000ae1c:	0f 87 c6 00 00 00    	ja     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae22:	8b 14 9d 80 29 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd680]
c000ae29:	b8 05 00 00 00       	mov    eax,0x5
c000ae2e:	85 d2                	test   edx,edx
c000ae30:	0f 84 b2 00 00 00    	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae36:	b8 06 00 00 00       	mov    eax,0x6
c000ae3b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ae42:	0f 85 92 00 00 00    	jne    c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000ae48:	e9 9b 00 00 00       	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae4d:	83 ec 0c             	sub    esp,0xc
c000ae50:	68 14 01 00 00       	push   0x114
c000ae55:	e8 5f c9 ff ff       	call   c00077b9 <malloc>
c000ae5a:	83 c4 0c             	add    esp,0xc
c000ae5d:	89 c3                	mov    ebx,eax
c000ae5f:	55                   	push   ebp
c000ae60:	56                   	push   esi
c000ae61:	50                   	push   eax
c000ae62:	e8 63 fb ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ae67:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000ae6c:	83 c4 0c             	add    esp,0xc
c000ae6f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000ae73:	50                   	push   eax
c000ae74:	8d 44 24 10          	lea    eax,[esp+0x10]
c000ae78:	50                   	push   eax
c000ae79:	53                   	push   ebx
c000ae7a:	e8 b7 fe ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	83 f8 02             	cmp    eax,0x2
c000ae85:	74 04                	je     c000ae8b <Fs::setcwd(Process*, char*)+0xf4>
c000ae87:	85 c0                	test   eax,eax
c000ae89:	74 1c                	je     c000aea7 <Fs::setcwd(Process*, char*)+0x110>
c000ae8b:	b8 01 00 00 00       	mov    eax,0x1
c000ae90:	85 db                	test   ebx,ebx
c000ae92:	74 54                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae99:	53                   	push   ebx
c000ae9a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	b8 01 00 00 00       	mov    eax,0x1
c000aea5:	eb 41                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aea7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000aeac:	75 1c                	jne    c000aeca <Fs::setcwd(Process*, char*)+0x133>
c000aeae:	b8 02 00 00 00       	mov    eax,0x2
c000aeb3:	85 db                	test   ebx,ebx
c000aeb5:	74 31                	je     c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aebc:	53                   	push   ebx
c000aebd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aec0:	83 c4 10             	add    esp,0x10
c000aec3:	b8 02 00 00 00       	mov    eax,0x2
c000aec8:	eb 1e                	jmp    c000aee8 <Fs::setcwd(Process*, char*)+0x151>
c000aeca:	85 db                	test   ebx,ebx
c000aecc:	74 0c                	je     c000aeda <Fs::setcwd(Process*, char*)+0x143>
c000aece:	83 ec 0c             	sub    esp,0xc
c000aed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aed3:	53                   	push   ebx
c000aed4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000aed7:	83 c4 10             	add    esp,0x10
c000aeda:	50                   	push   eax
c000aedb:	50                   	push   eax
c000aedc:	56                   	push   esi
c000aedd:	57                   	push   edi
c000aede:	e8 1d 57 ff ff       	call   c0000600 <strcpy>
c000aee3:	83 c4 10             	add    esp,0x10
c000aee6:	31 c0                	xor    eax,eax
c000aee8:	81 c4 1c 02 00 00    	add    esp,0x21c
c000aeee:	5b                   	pop    ebx
c000aeef:	5e                   	pop    esi
c000aef0:	5f                   	pop    edi
c000aef1:	5d                   	pop    ebp
c000aef2:	c3                   	ret    
c000aef3:	90                   	nop

c000aef4 <Directory::Directory(char const*, Process*)>:
c000aef4:	83 ec 0c             	sub    esp,0xc
c000aef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aefb:	83 ec 08             	sub    esp,0x8
c000aefe:	6a 00                	push   0x0
c000af00:	50                   	push   eax
c000af01:	e8 b8 de ff ff       	call   c0008dbe <UnixFile::UnixFile(int)>
c000af06:	83 c4 10             	add    esp,0x10
c000af09:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c000af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af12:	89 10                	mov    DWORD PTR [eax],edx
c000af14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af18:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af22:	83 c0 0d             	add    eax,0xd
c000af25:	83 ec 04             	sub    esp,0x4
c000af28:	52                   	push   edx
c000af29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af2d:	50                   	push   eax
c000af2e:	e8 ed f8 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af3a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af3d:	8d 50 bf             	lea    edx,[eax-0x41]
c000af40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af44:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af5c:	25 ff 00 00 00       	and    eax,0xff
c000af61:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000af68:	85 c0                	test   eax,eax
c000af6a:	74 42                	je     c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af70:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af76:	25 ff 00 00 00       	and    eax,0xff
c000af7b:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000af82:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000af88:	85 c0                	test   eax,eax
c000af8a:	75 22                	jne    c000afae <Directory::Directory(char const*, Process*)+0xba>
c000af8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af90:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af96:	25 ff 00 00 00       	and    eax,0xff
c000af9b:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c000afa2:	83 ec 0c             	sub    esp,0xc
c000afa5:	50                   	push   eax
c000afa6:	e8 cf 1a 00 00       	call   c000ca7a <LogicalDisk::mount()>
c000afab:	83 c4 10             	add    esp,0x10
c000afae:	90                   	nop
c000afaf:	83 c4 0c             	add    esp,0xc
c000afb2:	c3                   	ret    
c000afb3:	90                   	nop

c000afb4 <Directory::open()>:
c000afb4:	53                   	push   ebx
c000afb5:	b8 0b 00 00 00       	mov    eax,0xb
c000afba:	83 ec 08             	sub    esp,0x8
c000afbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afc1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afc8:	80 fa 19             	cmp    dl,0x19
c000afcb:	77 3d                	ja     c000b00a <Directory::open()+0x56>
c000afcd:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000afd4:	85 d2                	test   edx,edx
c000afd6:	74 32                	je     c000b00a <Directory::open()+0x56>
c000afd8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000afde:	85 d2                	test   edx,edx
c000afe0:	74 28                	je     c000b00a <Directory::open()+0x56>
c000afe2:	b8 06 00 00 00       	mov    eax,0x6
c000afe7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000afeb:	75 1d                	jne    c000b00a <Directory::open()+0x56>
c000afed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000aff3:	50                   	push   eax
c000aff4:	8b 02                	mov    eax,DWORD PTR [edx]
c000aff6:	51                   	push   ecx
c000aff7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000affa:	51                   	push   ecx
c000affb:	52                   	push   edx
c000affc:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000afff:	83 c4 10             	add    esp,0x10
c000b002:	85 c0                	test   eax,eax
c000b004:	75 04                	jne    c000b00a <Directory::open()+0x56>
c000b006:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b00a:	83 c4 08             	add    esp,0x8
c000b00d:	5b                   	pop    ebx
c000b00e:	c3                   	ret    
c000b00f:	90                   	nop

c000b010 <Directory::close()>:
c000b010:	53                   	push   ebx
c000b011:	b8 0b 00 00 00       	mov    eax,0xb
c000b016:	83 ec 08             	sub    esp,0x8
c000b019:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b01d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b024:	80 fa 19             	cmp    dl,0x19
c000b027:	77 41                	ja     c000b06a <Directory::close()+0x5a>
c000b029:	8b 1c 95 80 29 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd680]
c000b030:	85 db                	test   ebx,ebx
c000b032:	74 36                	je     c000b06a <Directory::close()+0x5a>
c000b034:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b03b:	74 2d                	je     c000b06a <Directory::close()+0x5a>
c000b03d:	b8 05 00 00 00       	mov    eax,0x5
c000b042:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b046:	74 22                	je     c000b06a <Directory::close()+0x5a>
c000b048:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b04c:	8b 04 95 80 29 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd680]
c000b053:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b059:	53                   	push   ebx
c000b05a:	53                   	push   ebx
c000b05b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b05d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b063:	50                   	push   eax
c000b064:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b067:	83 c4 10             	add    esp,0x10
c000b06a:	83 c4 08             	add    esp,0x8
c000b06d:	5b                   	pop    ebx
c000b06e:	c3                   	ret    
c000b06f:	90                   	nop

c000b070 <Directory::unlink()>:
c000b070:	83 ec 0c             	sub    esp,0xc
c000b073:	b8 0b 00 00 00       	mov    eax,0xb
c000b078:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b07c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b083:	80 f9 19             	cmp    cl,0x19
c000b086:	77 2f                	ja     c000b0b7 <Directory::unlink()+0x47>
c000b088:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000b08f:	85 c9                	test   ecx,ecx
c000b091:	74 24                	je     c000b0b7 <Directory::unlink()+0x47>
c000b093:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b099:	85 c9                	test   ecx,ecx
c000b09b:	74 1a                	je     c000b0b7 <Directory::unlink()+0x47>
c000b09d:	b8 06 00 00 00       	mov    eax,0x6
c000b0a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0a6:	75 0f                	jne    c000b0b7 <Directory::unlink()+0x47>
c000b0a8:	83 c2 0d             	add    edx,0xd
c000b0ab:	50                   	push   eax
c000b0ac:	50                   	push   eax
c000b0ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0af:	52                   	push   edx
c000b0b0:	51                   	push   ecx
c000b0b1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	83 c4 0c             	add    esp,0xc
c000b0ba:	c3                   	ret    
c000b0bb:	90                   	nop

c000b0bc <Directory::rename(char const*)>:
c000b0bc:	83 ec 0c             	sub    esp,0xc
c000b0bf:	b8 0b 00 00 00       	mov    eax,0xb
c000b0c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b0cf:	80 f9 19             	cmp    cl,0x19
c000b0d2:	77 32                	ja     c000b106 <Directory::rename(char const*)+0x4a>
c000b0d4:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000b0db:	85 c9                	test   ecx,ecx
c000b0dd:	74 27                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0df:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b0e5:	85 c9                	test   ecx,ecx
c000b0e7:	74 1d                	je     c000b106 <Directory::rename(char const*)+0x4a>
c000b0e9:	b8 06 00 00 00       	mov    eax,0x6
c000b0ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b0f2:	75 12                	jne    c000b106 <Directory::rename(char const*)+0x4a>
c000b0f4:	83 c2 0d             	add    edx,0xd
c000b0f7:	50                   	push   eax
c000b0f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b0fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b0fe:	52                   	push   edx
c000b0ff:	51                   	push   ecx
c000b100:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b103:	83 c4 10             	add    esp,0x10
c000b106:	83 c4 0c             	add    esp,0xc
c000b109:	c3                   	ret    

c000b10a <Directory::exists()>:
c000b10a:	83 ec 0c             	sub    esp,0xc
c000b10d:	31 c0                	xor    eax,eax
c000b10f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b113:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b11a:	80 f9 19             	cmp    cl,0x19
c000b11d:	77 24                	ja     c000b143 <Directory::exists()+0x39>
c000b11f:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000b126:	85 c9                	test   ecx,ecx
c000b128:	74 19                	je     c000b143 <Directory::exists()+0x39>
c000b12a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b130:	85 c9                	test   ecx,ecx
c000b132:	74 0f                	je     c000b143 <Directory::exists()+0x39>
c000b134:	83 c2 0d             	add    edx,0xd
c000b137:	50                   	push   eax
c000b138:	50                   	push   eax
c000b139:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13b:	52                   	push   edx
c000b13c:	51                   	push   ecx
c000b13d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	83 c4 0c             	add    esp,0xc
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::read(dirent*)>:
c000b148:	83 ec 1c             	sub    esp,0x1c
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b154:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b15b:	80 fa 19             	cmp    dl,0x19
c000b15e:	77 30                	ja     c000b190 <Directory::read(dirent*)+0x48>
c000b160:	8b 14 95 80 29 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd680]
c000b167:	85 d2                	test   edx,edx
c000b169:	74 25                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b16b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b172:	74 1c                	je     c000b190 <Directory::read(dirent*)+0x48>
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b179:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b17d:	52                   	push   edx
c000b17e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b182:	6a 00                	push   0x0
c000b184:	68 10 01 00 00       	push   0x110
c000b189:	51                   	push   ecx
c000b18a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b18d:	83 c4 20             	add    esp,0x20
c000b190:	83 c4 1c             	add    esp,0x1c
c000b193:	c3                   	ret    

c000b194 <Directory::create()>:
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	b8 0b 00 00 00       	mov    eax,0xb
c000b19c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a7:	80 f9 19             	cmp    cl,0x19
c000b1aa:	77 2f                	ja     c000b1db <Directory::create()+0x47>
c000b1ac:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c000b1b3:	85 c9                	test   ecx,ecx
c000b1b5:	74 24                	je     c000b1db <Directory::create()+0x47>
c000b1b7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bd:	85 c9                	test   ecx,ecx
c000b1bf:	74 1a                	je     c000b1db <Directory::create()+0x47>
c000b1c1:	b8 06 00 00 00       	mov    eax,0x6
c000b1c6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ca:	75 0f                	jne    c000b1db <Directory::create()+0x47>
c000b1cc:	83 c2 0d             	add    edx,0xd
c000b1cf:	50                   	push   eax
c000b1d0:	50                   	push   eax
c000b1d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1d3:	52                   	push   edx
c000b1d4:	51                   	push   ecx
c000b1d5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b1d8:	83 c4 10             	add    esp,0x10
c000b1db:	83 c4 0c             	add    esp,0xc
c000b1de:	c3                   	ret    
c000b1df:	90                   	nop

c000b1e0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b1e0:	b8 0a 00 00 00       	mov    eax,0xa
c000b1e5:	c3                   	ret    
c000b1e6:	66 90                	xchg   ax,ax

c000b1e8 <Bus::Bus(char const*)>:
c000b1e8:	83 ec 0c             	sub    esp,0xc
c000b1eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ef:	83 ec 08             	sub    esp,0x8
c000b1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1f6:	50                   	push   eax
c000b1f7:	e8 30 08 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	ba 8c d8 01 c0       	mov    edx,0xc001d88c
c000b204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b208:	89 10                	mov    DWORD PTR [eax],edx
c000b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b218:	90                   	nop
c000b219:	83 c4 0c             	add    esp,0xc
c000b21c:	c3                   	ret    
c000b21d:	90                   	nop
c000b21e:	66 90                	xchg   ax,ax

c000b220 <Bus::~Bus()>:
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	ba 8c d8 01 c0       	mov    edx,0xc001d88c
c000b228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22c:	89 10                	mov    DWORD PTR [eax],edx
c000b22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b232:	83 ec 0c             	sub    esp,0xc
c000b235:	50                   	push   eax
c000b236:	e8 5b 05 00 00       	call   c000b796 <Device::~Device()>
c000b23b:	83 c4 10             	add    esp,0x10
c000b23e:	90                   	nop
c000b23f:	83 c4 0c             	add    esp,0xc
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <Bus::~Bus()>:
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	83 ec 0c             	sub    esp,0xc
c000b24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b24e:	e8 cd ff ff ff       	call   c000b220 <Bus::~Bus()>
c000b253:	83 c4 10             	add    esp,0x10
c000b256:	83 ec 08             	sub    esp,0x8
c000b259:	68 58 01 00 00       	push   0x158
c000b25e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b262:	e8 f7 f0 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b267:	83 c4 10             	add    esp,0x10
c000b26a:	83 c4 0c             	add    esp,0xc
c000b26d:	c3                   	ret    

c000b26e <beepThread(void*)>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	48                   	dec    eax
c000b27b:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000b280:	75 01                	jne    c000b283 <beepThread(void*)+0x15>
c000b282:	fb                   	sti    
c000b283:	83 ec 0c             	sub    esp,0xc
c000b286:	6b c2 0a             	imul   eax,edx,0xa
c000b289:	50                   	push   eax
c000b28a:	e8 39 83 00 00       	call   c00135c8 <milliTenthSleep(unsigned int)>
c000b28f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b296:	e8 df a0 00 00       	call   c001537a <HalMakeBeep(int)>
c000b29b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b2a3:	83 c4 1c             	add    esp,0x1c
c000b2a6:	e9 19 82 00 00       	jmp    c00134c4 <blockTask(TaskState)>

c000b2ab <Krnl::beep(int, int, bool)>:
c000b2ab:	56                   	push   esi
c000b2ac:	53                   	push   ebx
c000b2ad:	83 ec 10             	sub    esp,0x10
c000b2b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b2b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bc:	e8 b9 a0 00 00       	call   c001537a <HalMakeBeep(int)>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 f0                	mov    eax,esi
c000b2c6:	84 c0                	test   al,al
c000b2c8:	74 1e                	je     c000b2e8 <Krnl::beep(int, int, bool)+0x3d>
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	6b db 0a             	imul   ebx,ebx,0xa
c000b2d0:	53                   	push   ebx
c000b2d1:	e8 f2 82 00 00       	call   c00135c8 <milliTenthSleep(unsigned int)>
c000b2d6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b2de:	83 c4 14             	add    esp,0x14
c000b2e1:	5b                   	pop    ebx
c000b2e2:	5e                   	pop    esi
c000b2e3:	e9 92 a0 00 00       	jmp    c001537a <HalMakeBeep(int)>
c000b2e8:	68 e6 00 00 00       	push   0xe6
c000b2ed:	53                   	push   ebx
c000b2ee:	68 6e b2 00 c0       	push   0xc000b26e
c000b2f3:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c000b2f9:	e8 aa 7d 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c000b2fe:	83 c4 14             	add    esp,0x14
c000b301:	5b                   	pop    ebx
c000b302:	5e                   	pop    esi
c000b303:	c3                   	ret    

c000b304 <User::loadClockSettings(int)>:
c000b304:	53                   	push   ebx
c000b305:	83 ec 14             	sub    esp,0x14
c000b308:	68 14 01 00 00       	push   0x114
c000b30d:	e8 a7 c4 ff ff       	call   c00077b9 <malloc>
c000b312:	83 c4 0c             	add    esp,0xc
c000b315:	89 c3                	mov    ebx,eax
c000b317:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c000b31d:	68 b0 d8 01 c0       	push   0xc001d8b0
c000b322:	50                   	push   eax
c000b323:	e8 a2 f6 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000b328:	58                   	pop    eax
c000b329:	5a                   	pop    edx
c000b32a:	6a 01                	push   0x1
c000b32c:	53                   	push   ebx
c000b32d:	e8 58 f7 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000b332:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b335:	e8 ae f7 ff ff       	call   c000aae8 <File::close()>
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	85 db                	test   ebx,ebx
c000b33f:	74 0f                	je     c000b350 <User::loadClockSettings(int)+0x4c>
c000b341:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b343:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b34a:	83 c4 08             	add    esp,0x8
c000b34d:	5b                   	pop    ebx
c000b34e:	ff e0                	jmp    eax
c000b350:	83 c4 08             	add    esp,0x8
c000b353:	5b                   	pop    ebx
c000b354:	c3                   	ret    
c000b355:	90                   	nop

c000b356 <Clock::Clock(char const*)>:
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35d:	83 ec 08             	sub    esp,0x8
c000b360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b364:	50                   	push   eax
c000b365:	e8 c2 06 00 00       	call   c000ba2c <Device::Device(char const*)>
c000b36a:	83 c4 10             	add    esp,0x10
c000b36d:	ba d8 d8 01 c0       	mov    edx,0xc001d8d8
c000b372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b376:	89 10                	mov    DWORD PTR [eax],edx
c000b378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b37c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b386:	90                   	nop
c000b387:	83 c4 0c             	add    esp,0xc
c000b38a:	c3                   	ret    
c000b38b:	90                   	nop

c000b38c <Clock::~Clock()>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	ba d8 d8 01 c0       	mov    edx,0xc001d8d8
c000b394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b398:	89 10                	mov    DWORD PTR [eax],edx
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	50                   	push   eax
c000b3a2:	e8 ef 03 00 00       	call   c000b796 <Device::~Device()>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	90                   	nop
c000b3ab:	83 c4 0c             	add    esp,0xc
c000b3ae:	c3                   	ret    
c000b3af:	90                   	nop

c000b3b0 <Clock::~Clock()>:
c000b3b0:	83 ec 0c             	sub    esp,0xc
c000b3b3:	83 ec 0c             	sub    esp,0xc
c000b3b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ba:	e8 cd ff ff ff       	call   c000b38c <Clock::~Clock()>
c000b3bf:	83 c4 10             	add    esp,0x10
c000b3c2:	83 ec 08             	sub    esp,0x8
c000b3c5:	68 58 01 00 00       	push   0x158
c000b3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ce:	e8 8b ef ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b3d3:	83 c4 10             	add    esp,0x10
c000b3d6:	83 c4 0c             	add    esp,0xc
c000b3d9:	c3                   	ret    

c000b3da <Clock::timeInSecondsLocal()>:
c000b3da:	53                   	push   ebx
c000b3db:	83 ec 14             	sub    esp,0x14
c000b3de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3e4:	50                   	push   eax
c000b3e5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b3e8:	0f b6 0d 18 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020518
c000b3ef:	03 0d 1c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002051c
c000b3f5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b3fb:	89 cb                	mov    ebx,ecx
c000b3fd:	c1 fb 1f             	sar    ebx,0x1f
c000b400:	01 c8                	add    eax,ecx
c000b402:	11 da                	adc    edx,ebx
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	31 c9                	xor    ecx,ecx
c000b409:	80 3d 19 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020519,0x0
c000b410:	74 05                	je     c000b417 <Clock::timeInSecondsLocal()+0x3d>
c000b412:	b9 08 07 00 00       	mov    ecx,0x708
c000b417:	31 db                	xor    ebx,ebx
c000b419:	01 c8                	add    eax,ecx
c000b41b:	11 da                	adc    edx,ebx
c000b41d:	83 c4 08             	add    esp,0x8
c000b420:	5b                   	pop    ebx
c000b421:	c3                   	ret    

c000b422 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b422:	57                   	push   edi
c000b423:	56                   	push   esi
c000b424:	53                   	push   ebx
c000b425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b429:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b42d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b42f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b433:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b436:	0f b6 05 18 05 02 c0 	movzx  eax,BYTE PTR ds:0xc0020518
c000b43d:	03 05 1c 05 02 c0    	add    eax,DWORD PTR ds:0xc002051c
c000b443:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b449:	99                   	cdq    
c000b44a:	29 c6                	sub    esi,eax
c000b44c:	19 d7                	sbb    edi,edx
c000b44e:	89 f0                	mov    eax,esi
c000b450:	89 fa                	mov    edx,edi
c000b452:	31 f6                	xor    esi,esi
c000b454:	80 3d 19 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020519,0x0
c000b45b:	74 05                	je     c000b462 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b45d:	be 08 07 00 00       	mov    esi,0x708
c000b462:	31 ff                	xor    edi,edi
c000b464:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b468:	29 f0                	sub    eax,esi
c000b46a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b46e:	19 fa                	sbb    edx,edi
c000b470:	89 d8                	mov    eax,ebx
c000b472:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b476:	5b                   	pop    ebx
c000b477:	5e                   	pop    esi
c000b478:	5f                   	pop    edi
c000b479:	ff e0                	jmp    eax

c000b47b <datetimeToSeconds(datetime_t)>:
c000b47b:	55                   	push   ebp
c000b47c:	57                   	push   edi
c000b47d:	56                   	push   esi
c000b47e:	53                   	push   ebx
c000b47f:	83 ec 14             	sub    esp,0x14
c000b482:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b486:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b48a:	89 d3                	mov    ebx,edx
c000b48c:	0f b6 c6             	movzx  eax,dh
c000b48f:	c1 eb 10             	shr    ebx,0x10
c000b492:	48                   	dec    eax
c000b493:	66 81 eb 6c 07       	sub    bx,0x76c
c000b498:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b49c:	0f b6 f5             	movzx  esi,ch
c000b49f:	89 cf                	mov    edi,ecx
c000b4a1:	6b f6 3c             	imul   esi,esi,0x3c
c000b4a4:	c1 ef 10             	shr    edi,0x10
c000b4a7:	0f b6 c9             	movzx  ecx,cl
c000b4aa:	89 f8                	mov    eax,edi
c000b4ac:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4b2:	0f b6 f8             	movzx  edi,al
c000b4b5:	0f b6 d2             	movzx  edx,dl
c000b4b8:	01 fe                	add    esi,edi
c000b4ba:	01 f1                	add    ecx,esi
c000b4bc:	0f b7 f3             	movzx  esi,bx
c000b4bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b4c3:	c1 f9 1f             	sar    ecx,0x1f
c000b4c6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b4cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b4cf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b4d4:	8b 0c 8d 20 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe26e0]
c000b4db:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b4df:	76 29                	jbe    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e1:	f6 c3 03             	test   bl,0x3
c000b4e4:	75 24                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b4e6:	31 d2                	xor    edx,edx
c000b4e8:	bf 64 00 00 00       	mov    edi,0x64
c000b4ed:	89 d8                	mov    eax,ebx
c000b4ef:	66 f7 f7             	div    di
c000b4f2:	66 85 d2             	test   dx,dx
c000b4f5:	75 12                	jne    c000b509 <datetimeToSeconds(datetime_t)+0x8e>
c000b4f7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b4fd:	bf 90 01 00 00       	mov    edi,0x190
c000b502:	99                   	cdq    
c000b503:	f7 ff                	idiv   edi
c000b505:	85 d2                	test   edx,edx
c000b507:	75 01                	jne    c000b50a <datetimeToSeconds(datetime_t)+0x8f>
c000b509:	41                   	inc    ecx
c000b50a:	66 83 fb 46          	cmp    bx,0x46
c000b50e:	76 45                	jbe    c000b555 <datetimeToSeconds(datetime_t)+0xda>
c000b510:	bb 46 00 00 00       	mov    ebx,0x46
c000b515:	bf 64 00 00 00       	mov    edi,0x64
c000b51a:	bd 90 01 00 00       	mov    ebp,0x190
c000b51f:	b8 6d 01 00 00       	mov    eax,0x16d
c000b524:	f6 c3 03             	test   bl,0x3
c000b527:	75 23                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b529:	89 d8                	mov    eax,ebx
c000b52b:	99                   	cdq    
c000b52c:	f7 ff                	idiv   edi
c000b52e:	b8 6e 01 00 00       	mov    eax,0x16e
c000b533:	85 d2                	test   edx,edx
c000b535:	75 15                	jne    c000b54c <datetimeToSeconds(datetime_t)+0xd1>
c000b537:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b53d:	99                   	cdq    
c000b53e:	f7 fd                	idiv   ebp
c000b540:	31 c0                	xor    eax,eax
c000b542:	85 d2                	test   edx,edx
c000b544:	0f 94 c0             	sete   al
c000b547:	05 6d 01 00 00       	add    eax,0x16d
c000b54c:	01 c1                	add    ecx,eax
c000b54e:	43                   	inc    ebx
c000b54f:	39 f3                	cmp    ebx,esi
c000b551:	7c cc                	jl     c000b51f <datetimeToSeconds(datetime_t)+0xa4>
c000b553:	eb 3b                	jmp    c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b555:	74 39                	je     c000b590 <datetimeToSeconds(datetime_t)+0x115>
c000b557:	b8 45 00 00 00       	mov    eax,0x45
c000b55c:	89 c2                	mov    edx,eax
c000b55e:	83 e2 03             	and    edx,0x3
c000b561:	39 f0                	cmp    eax,esi
c000b563:	7e 13                	jle    c000b578 <datetimeToSeconds(datetime_t)+0xfd>
c000b565:	85 d2                	test   edx,edx
c000b567:	0f 94 c2             	sete   dl
c000b56a:	48                   	dec    eax
c000b56b:	0f b6 d2             	movzx  edx,dl
c000b56e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b574:	29 d1                	sub    ecx,edx
c000b576:	eb e4                	jmp    c000b55c <datetimeToSeconds(datetime_t)+0xe1>
c000b578:	b8 6d 01 00 00       	mov    eax,0x16d
c000b57d:	85 d2                	test   edx,edx
c000b57f:	75 0d                	jne    c000b58e <datetimeToSeconds(datetime_t)+0x113>
c000b581:	31 c0                	xor    eax,eax
c000b583:	66 85 db             	test   bx,bx
c000b586:	0f 95 c0             	setne  al
c000b589:	05 6d 01 00 00       	add    eax,0x16d
c000b58e:	29 c1                	sub    ecx,eax
c000b590:	b8 80 51 01 00       	mov    eax,0x15180
c000b595:	f7 e9                	imul   ecx
c000b597:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b59b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b59f:	83 c4 14             	add    esp,0x14
c000b5a2:	5b                   	pop    ebx
c000b5a3:	5e                   	pop    esi
c000b5a4:	5f                   	pop    edi
c000b5a5:	5d                   	pop    ebp
c000b5a6:	c3                   	ret    
c000b5a7:	90                   	nop

c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b5a8:	57                   	push   edi
c000b5a9:	56                   	push   esi
c000b5aa:	53                   	push   ebx
c000b5ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b5af:	8b 06                	mov    eax,DWORD PTR [esi]
c000b5b1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b5b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5bc:	e8 ba fe ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c000b5c1:	59                   	pop    ecx
c000b5c2:	0f b6 0d 18 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020518
c000b5c9:	5b                   	pop    ebx
c000b5ca:	03 0d 1c 05 02 c0    	add    ecx,DWORD PTR ds:0xc002051c
c000b5d0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5d6:	89 cb                	mov    ebx,ecx
c000b5d8:	c1 fb 1f             	sar    ebx,0x1f
c000b5db:	29 c8                	sub    eax,ecx
c000b5dd:	19 da                	sbb    edx,ebx
c000b5df:	31 c9                	xor    ecx,ecx
c000b5e1:	80 3d 19 05 02 c0 00 	cmp    BYTE PTR ds:0xc0020519,0x0
c000b5e8:	74 05                	je     c000b5ef <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b5ea:	b9 08 07 00 00       	mov    ecx,0x708
c000b5ef:	31 db                	xor    ebx,ebx
c000b5f1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b5f5:	29 c8                	sub    eax,ecx
c000b5f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b5fb:	19 da                	sbb    edx,ebx
c000b5fd:	89 f8                	mov    eax,edi
c000b5ff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b603:	5b                   	pop    ebx
c000b604:	5e                   	pop    esi
c000b605:	5f                   	pop    edi
c000b606:	ff e0                	jmp    eax

c000b608 <secondsToDatetime(unsigned long long)>:
c000b608:	55                   	push   ebp
c000b609:	57                   	push   edi
c000b60a:	56                   	push   esi
c000b60b:	53                   	push   ebx
c000b60c:	83 ec 1c             	sub    esp,0x1c
c000b60f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b613:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b617:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b61b:	6a 00                	push   0x0
c000b61d:	68 80 51 01 00       	push   0x15180
c000b622:	55                   	push   ebp
c000b623:	57                   	push   edi
c000b624:	e8 97 05 01 00       	call   c001bbc0 <__udivdi3>
c000b629:	83 c4 10             	add    esp,0x10
c000b62c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b632:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b636:	6a 00                	push   0x0
c000b638:	68 80 51 01 00       	push   0x15180
c000b63d:	55                   	push   ebp
c000b63e:	57                   	push   edi
c000b63f:	bf 10 0e 00 00       	mov    edi,0xe10
c000b644:	e8 77 06 01 00       	call   c001bcc0 <__umoddi3>
c000b649:	83 c4 10             	add    esp,0x10
c000b64c:	99                   	cdq    
c000b64d:	f7 ff                	idiv   edi
c000b64f:	bf 3c 00 00 00       	mov    edi,0x3c
c000b654:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b657:	89 d0                	mov    eax,edx
c000b659:	99                   	cdq    
c000b65a:	f7 ff                	idiv   edi
c000b65c:	85 db                	test   ebx,ebx
c000b65e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b661:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b664:	79 11                	jns    c000b677 <secondsToDatetime(unsigned long long)+0x6f>
c000b666:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b66a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b670:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b675:	eb 07                	jmp    c000b67e <secondsToDatetime(unsigned long long)+0x76>
c000b677:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b67c:	89 d8                	mov    eax,ebx
c000b67e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b683:	99                   	cdq    
c000b684:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b689:	f7 f9                	idiv   ecx
c000b68b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b694:	31 d2                	xor    edx,edx
c000b696:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b69e:	01 c3                	add    ebx,eax
c000b6a0:	89 d8                	mov    eax,ebx
c000b6a2:	f7 f1                	div    ecx
c000b6a4:	31 d2                	xor    edx,edx
c000b6a6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b6a9:	89 d8                	mov    eax,ebx
c000b6ab:	f7 f7                	div    edi
c000b6ad:	31 d2                	xor    edx,edx
c000b6af:	29 c1                	sub    ecx,eax
c000b6b1:	89 d8                	mov    eax,ebx
c000b6b3:	f7 f5                	div    ebp
c000b6b5:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b6ba:	29 c1                	sub    ecx,eax
c000b6bc:	31 d2                	xor    edx,edx
c000b6be:	89 c8                	mov    eax,ecx
c000b6c0:	f7 f5                	div    ebp
c000b6c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b6c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b6cb:	31 d2                	xor    edx,edx
c000b6cd:	89 c8                	mov    eax,ecx
c000b6cf:	f7 f5                	div    ebp
c000b6d1:	31 d2                	xor    edx,edx
c000b6d3:	01 c3                	add    ebx,eax
c000b6d5:	89 c8                	mov    eax,ecx
c000b6d7:	f7 f7                	div    edi
c000b6d9:	bf 99 00 00 00       	mov    edi,0x99
c000b6de:	29 c3                	sub    ebx,eax
c000b6e0:	31 d2                	xor    edx,edx
c000b6e2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b6ea:	29 c3                	sub    ebx,eax
c000b6ec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b6ef:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b6f2:	bb 05 00 00 00       	mov    ebx,0x5
c000b6f7:	83 c1 02             	add    ecx,0x2
c000b6fa:	89 c8                	mov    eax,ecx
c000b6fc:	f7 f7                	div    edi
c000b6fe:	31 d2                	xor    edx,edx
c000b700:	89 c7                	mov    edi,eax
c000b702:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b708:	83 c0 02             	add    eax,0x2
c000b70b:	f7 f3                	div    ebx
c000b70d:	89 eb                	mov    ebx,ebp
c000b70f:	29 c3                	sub    ebx,eax
c000b711:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b717:	88 1e                	mov    BYTE PTR [esi],bl
c000b719:	19 c0                	sbb    eax,eax
c000b71b:	31 d2                	xor    edx,edx
c000b71d:	83 e0 0c             	and    eax,0xc
c000b720:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b724:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b72c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b730:	83 f9 01             	cmp    ecx,0x1
c000b733:	0f 96 c2             	setbe  dl
c000b736:	41                   	inc    ecx
c000b737:	01 d0                	add    eax,edx
c000b739:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b73c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b740:	83 c4 1c             	add    esp,0x1c
c000b743:	89 f0                	mov    eax,esi
c000b745:	5b                   	pop    ebx
c000b746:	5e                   	pop    esi
c000b747:	5f                   	pop    edi
c000b748:	5d                   	pop    ebp
c000b749:	c2 04 00             	ret    0x4

c000b74c <Clock::timeInDatetimeLocal()>:
c000b74c:	53                   	push   ebx
c000b74d:	83 ec 14             	sub    esp,0x14
c000b750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b754:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b758:	e8 7d fc ff ff       	call   c000b3da <Clock::timeInSecondsLocal()>
c000b75d:	83 c4 0c             	add    esp,0xc
c000b760:	52                   	push   edx
c000b761:	50                   	push   eax
c000b762:	53                   	push   ebx
c000b763:	e8 a0 fe ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c000b768:	89 d8                	mov    eax,ebx
c000b76a:	83 c4 14             	add    esp,0x14
c000b76d:	5b                   	pop    ebx
c000b76e:	c2 04 00             	ret    0x4
c000b771:	90                   	nop

c000b772 <Device::hibernate()>:
c000b772:	c3                   	ret    
c000b773:	90                   	nop

c000b774 <Device::wake()>:
c000b774:	c3                   	ret    
c000b775:	90                   	nop

c000b776 <Device::detect()>:
c000b776:	c3                   	ret    
c000b777:	90                   	nop

c000b778 <Device::disableLegacy()>:
c000b778:	c3                   	ret    
c000b779:	90                   	nop

c000b77a <Device::powerSaving(PowerSavingLevel)>:
c000b77a:	c3                   	ret    
c000b77b:	90                   	nop

c000b77c <DriverlessDevice::close(int, int, void*)>:
c000b77c:	31 c0                	xor    eax,eax
c000b77e:	c3                   	ret    
c000b77f:	90                   	nop

c000b780 <DriverlessDevice::detect()>:
c000b780:	c3                   	ret    
c000b781:	90                   	nop

c000b782 <DriverlessDevice::open(int, int, void*)>:
c000b782:	83 ec 18             	sub    esp,0x18
c000b785:	68 50 d9 01 c0       	push   0xc001d950
c000b78a:	e8 28 49 00 00       	call   c00100b7 <KePanic(char const*)>
c000b78f:	83 c8 ff             	or     eax,0xffffffff
c000b792:	83 c4 1c             	add    esp,0x1c
c000b795:	c3                   	ret    

c000b796 <Device::~Device()>:
c000b796:	ba b0 d9 01 c0       	mov    edx,0xc001d9b0
c000b79b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79f:	89 10                	mov    DWORD PTR [eax],edx
c000b7a1:	90                   	nop
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Device::~Device()>:
c000b7a4:	83 ec 0c             	sub    esp,0xc
c000b7a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7ab:	e8 e6 ff ff ff       	call   c000b796 <Device::~Device()>
c000b7b0:	83 c4 04             	add    esp,0x4
c000b7b3:	83 ec 08             	sub    esp,0x8
c000b7b6:	68 58 01 00 00       	push   0x158
c000b7bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7bf:	e8 9a eb ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	83 c4 0c             	add    esp,0xc
c000b7ca:	c3                   	ret    
c000b7cb:	90                   	nop

c000b7cc <Device::findAndLoadDriver()>:
c000b7cc:	c7 44 24 04 6e d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d96e
c000b7d4:	e9 7b ec ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000b7d9:	90                   	nop

c000b7da <Device::preOpenPCI(PCIDeviceInfo)>:
c000b7da:	57                   	push   edi
c000b7db:	b9 09 00 00 00       	mov    ecx,0x9
c000b7e0:	56                   	push   esi
c000b7e1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b7e5:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b7e9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b7f3:	81 c7 18 01 00 00    	add    edi,0x118
c000b7f9:	fc                   	cld    
c000b7fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b7fc:	5e                   	pop    esi
c000b7fd:	5f                   	pop    edi
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::preOpenACPI(void*, char*, char*)>:
c000b800:	57                   	push   edi
c000b801:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b806:	56                   	push   esi
c000b807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b80b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b80f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b819:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b81f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b825:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b829:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b82b:	b9 0e 00 00 00       	mov    ecx,0xe
c000b830:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b836:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b83c:	5e                   	pop    esi
c000b83d:	5f                   	pop    edi
c000b83e:	c3                   	ret    
c000b83f:	90                   	nop

c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b840:	53                   	push   ebx
c000b841:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b84d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b851:	0f b6 c0             	movzx  eax,al
c000b854:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b858:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b85c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b860:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b864:	5b                   	pop    ebx
c000b865:	e9 a6 05 00 00       	jmp    c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b86a <Device::getParent()>:
c000b86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b86e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b874:	c3                   	ret    
c000b875:	90                   	nop

c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b87e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b883:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b887:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b88b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b88f:	e9 e8 06 00 00       	jmp    c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b894 <Device::addChild(Device*)>:
c000b894:	53                   	push   ebx
c000b895:	83 ec 08             	sub    esp,0x8
c000b898:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8a0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b8a6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b8ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b8ae:	85 d2                	test   edx,edx
c000b8b0:	74 04                	je     c000b8b6 <Device::addChild(Device*)+0x22>
c000b8b2:	89 d3                	mov    ebx,edx
c000b8b4:	eb f6                	jmp    c000b8ac <Device::addChild(Device*)+0x18>
c000b8b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b8b9:	83 ec 0c             	sub    esp,0xc
c000b8bc:	6a 08                	push   0x8
c000b8be:	e8 f6 be ff ff       	call   c00077b9 <malloc>
c000b8c3:	89 03                	mov    DWORD PTR [ebx],eax
c000b8c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b8cb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b8d2:	83 c4 18             	add    esp,0x18
c000b8d5:	5b                   	pop    ebx
c000b8d6:	c3                   	ret    
c000b8d7:	90                   	nop

c000b8d8 <Device::removeAllChildren()>:
c000b8d8:	56                   	push   esi
c000b8d9:	53                   	push   ebx
c000b8da:	52                   	push   edx
c000b8db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8df:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b8e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b8e8:	74 17                	je     c000b901 <Device::removeAllChildren()+0x29>
c000b8ea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b8ed:	85 c0                	test   eax,eax
c000b8ef:	74 0c                	je     c000b8fd <Device::removeAllChildren()+0x25>
c000b8f1:	83 ec 0c             	sub    esp,0xc
c000b8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8f6:	50                   	push   eax
c000b8f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b8fa:	83 c4 10             	add    esp,0x10
c000b8fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b8ff:	eb e4                	jmp    c000b8e5 <Device::removeAllChildren()+0xd>
c000b901:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b90d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b913:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b91a:	58                   	pop    eax
c000b91b:	5b                   	pop    ebx
c000b91c:	5e                   	pop    esi
c000b91d:	c3                   	ret    

c000b91e <Device::hibernateAll()>:
c000b91e:	53                   	push   ebx
c000b91f:	83 ec 14             	sub    esp,0x14
c000b922:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b926:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b928:	53                   	push   ebx
c000b929:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b92c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b932:	83 c4 10             	add    esp,0x10
c000b935:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b938:	74 0f                	je     c000b949 <Device::hibernateAll()+0x2b>
c000b93a:	83 ec 0c             	sub    esp,0xc
c000b93d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b940:	e8 d9 ff ff ff       	call   c000b91e <Device::hibernateAll()>
c000b945:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b947:	eb e9                	jmp    c000b932 <Device::hibernateAll()+0x14>
c000b949:	83 c4 08             	add    esp,0x8
c000b94c:	5b                   	pop    ebx
c000b94d:	c3                   	ret    

c000b94e <Device::wakeAll()>:
c000b94e:	53                   	push   ebx
c000b94f:	83 ec 14             	sub    esp,0x14
c000b952:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b956:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b958:	53                   	push   ebx
c000b959:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b95c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b962:	83 c4 10             	add    esp,0x10
c000b965:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b968:	74 0f                	je     c000b979 <Device::wakeAll()+0x2b>
c000b96a:	83 ec 0c             	sub    esp,0xc
c000b96d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b970:	e8 d9 ff ff ff       	call   c000b94e <Device::wakeAll()>
c000b975:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b977:	eb e9                	jmp    c000b962 <Device::wakeAll()+0x14>
c000b979:	83 c4 08             	add    esp,0x8
c000b97c:	5b                   	pop    ebx
c000b97d:	c3                   	ret    

c000b97e <Device::detectAll()>:
c000b97e:	53                   	push   ebx
c000b97f:	83 ec 14             	sub    esp,0x14
c000b982:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b986:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b988:	53                   	push   ebx
c000b989:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000b98c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b992:	83 c4 10             	add    esp,0x10
c000b995:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b998:	74 0f                	je     c000b9a9 <Device::detectAll()+0x2b>
c000b99a:	83 ec 0c             	sub    esp,0xc
c000b99d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9a0:	e8 d9 ff ff ff       	call   c000b97e <Device::detectAll()>
c000b9a5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9a7:	eb e9                	jmp    c000b992 <Device::detectAll()+0x14>
c000b9a9:	83 c4 08             	add    esp,0x8
c000b9ac:	5b                   	pop    ebx
c000b9ad:	c3                   	ret    

c000b9ae <Device::disableLegacyAll()>:
c000b9ae:	c3                   	ret    
c000b9af:	90                   	nop

c000b9b0 <Device::loadDriversForAll()>:
c000b9b0:	c3                   	ret    
c000b9b1:	90                   	nop

c000b9b2 <Device::closeAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 08             	sub    esp,0x8
c000b9b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	6a 00                	push   0x0
c000b9be:	6a 00                	push   0x0
c000b9c0:	6a 00                	push   0x0
c000b9c2:	53                   	push   ebx
c000b9c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b9c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9cc:	83 c4 10             	add    esp,0x10
c000b9cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9d2:	74 0f                	je     c000b9e3 <Device::closeAll()+0x31>
c000b9d4:	83 ec 0c             	sub    esp,0xc
c000b9d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9da:	e8 d3 ff ff ff       	call   c000b9b2 <Device::closeAll()>
c000b9df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9e1:	eb e9                	jmp    c000b9cc <Device::closeAll()+0x1a>
c000b9e3:	83 c4 08             	add    esp,0x8
c000b9e6:	5b                   	pop    ebx
c000b9e7:	c3                   	ret    

c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>:
c000b9e8:	56                   	push   esi
c000b9e9:	53                   	push   ebx
c000b9ea:	83 ec 0c             	sub    esp,0xc
c000b9ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b9f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9f7:	56                   	push   esi
c000b9f8:	53                   	push   ebx
c000b9f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000b9fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba02:	83 c4 10             	add    esp,0x10
c000ba05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba08:	74 0f                	je     c000ba19 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba0a:	52                   	push   edx
c000ba0b:	52                   	push   edx
c000ba0c:	56                   	push   esi
c000ba0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba10:	e8 d3 ff ff ff       	call   c000b9e8 <Device::powerSavingAll(PowerSavingLevel)>
c000ba15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba17:	eb e9                	jmp    c000ba02 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000ba19:	58                   	pop    eax
c000ba1a:	5b                   	pop    ebx
c000ba1b:	5e                   	pop    esi
c000ba1c:	c3                   	ret    
c000ba1d:	90                   	nop

c000ba1e <Device::setName(char const*)>:
c000ba1e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000ba26:	e9 d5 4b ff ff       	jmp    c0000600 <strcpy>
c000ba2b:	90                   	nop

c000ba2c <Device::Device(char const*)>:
c000ba2c:	83 ec 1c             	sub    esp,0x1c
c000ba2f:	ba b0 d9 01 c0       	mov    edx,0xc001d9b0
c000ba34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000ba48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba4c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000ba56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba5a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000ba64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba68:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000ba72:	83 ec 08             	sub    esp,0x8
c000ba75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba7d:	e8 9c ff ff ff       	call   c000ba1e <Device::setName(char const*)>
c000ba82:	83 c4 10             	add    esp,0x10
c000ba85:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000ba8d:	83 ec 0c             	sub    esp,0xc
c000ba90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba94:	e8 20 bd ff ff       	call   c00077b9 <malloc>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baa2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baa9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000baad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000babd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bacd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000baea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb0a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb18:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bb22:	90                   	nop
c000bb23:	83 c4 1c             	add    esp,0x1c
c000bb26:	c3                   	ret    
c000bb27:	90                   	nop

c000bb28 <Device::getName()>:
c000bb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb2c:	05 d0 00 00 00       	add    eax,0xd0
c000bb31:	c3                   	ret    

c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb39:	83 ec 08             	sub    esp,0x8
c000bb3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb40:	50                   	push   eax
c000bb41:	e8 e6 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bb46:	83 c4 10             	add    esp,0x10
c000bb49:	ba dc d9 01 c0       	mov    edx,0xc001d9dc
c000bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb52:	89 10                	mov    DWORD PTR [eax],edx
c000bb54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb58:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bb62:	90                   	nop
c000bb63:	83 c4 0c             	add    esp,0xc
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bb68:	57                   	push   edi
c000bb69:	56                   	push   esi
c000bb6a:	53                   	push   ebx
c000bb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb6f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bb73:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb77:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bb7d:	75 0c                	jne    c000bb8b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bb7f:	52                   	push   edx
c000bb80:	52                   	push   edx
c000bb81:	53                   	push   ebx
c000bb82:	56                   	push   esi
c000bb83:	e8 ea 04 01 00       	call   c001c072 <LinkedList<Device>::addElement(Device*)>
c000bb88:	83 c4 10             	add    esp,0x10
c000bb8b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb94:	74 12                	je     c000bba8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bb96:	50                   	push   eax
c000bb97:	57                   	push   edi
c000bb98:	56                   	push   esi
c000bb99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb9c:	e8 c7 ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bba1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bba3:	83 c4 10             	add    esp,0x10
c000bba6:	eb e9                	jmp    c000bb91 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bba8:	5b                   	pop    ebx
c000bba9:	5e                   	pop    esi
c000bbaa:	5f                   	pop    edi
c000bbab:	c3                   	ret    

c000bbac <getDevicesOfType(DeviceType)>:
c000bbac:	53                   	push   ebx
c000bbad:	83 ec 14             	sub    esp,0x14
c000bbb0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbb4:	53                   	push   ebx
c000bbb5:	e8 94 05 01 00       	call   c001c14e <LinkedList<Device>::LinkedList()>
c000bbba:	83 c4 0c             	add    esp,0xc
c000bbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bbc1:	53                   	push   ebx
c000bbc2:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c000bbc8:	e8 9b ff ff ff       	call   c000bb68 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bbcd:	89 d8                	mov    eax,ebx
c000bbcf:	83 c4 18             	add    esp,0x18
c000bbd2:	5b                   	pop    ebx
c000bbd3:	c2 04 00             	ret    0x4
c000bbd6:	66 90                	xchg   ax,ax

c000bbd8 <HardDiskController::HardDiskController(char const*)>:
c000bbd8:	83 ec 0c             	sub    esp,0xc
c000bbdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbdf:	83 ec 08             	sub    esp,0x8
c000bbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbe6:	50                   	push   eax
c000bbe7:	e8 40 fe ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bbec:	83 c4 10             	add    esp,0x10
c000bbef:	ba 08 da 01 c0       	mov    edx,0xc001da08
c000bbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbf8:	89 10                	mov    DWORD PTR [eax],edx
c000bbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbfe:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc08:	90                   	nop
c000bc09:	83 c4 0c             	add    esp,0xc
c000bc0c:	c3                   	ret    
c000bc0d:	90                   	nop
c000bc0e:	66 90                	xchg   ax,ax

c000bc10 <HardDiskController::~HardDiskController()>:
c000bc10:	83 ec 0c             	sub    esp,0xc
c000bc13:	ba 08 da 01 c0       	mov    edx,0xc001da08
c000bc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc1c:	89 10                	mov    DWORD PTR [eax],edx
c000bc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc22:	83 ec 0c             	sub    esp,0xc
c000bc25:	50                   	push   eax
c000bc26:	e8 6b fb ff ff       	call   c000b796 <Device::~Device()>
c000bc2b:	83 c4 10             	add    esp,0x10
c000bc2e:	90                   	nop
c000bc2f:	83 c4 0c             	add    esp,0xc
c000bc32:	c3                   	ret    
c000bc33:	90                   	nop

c000bc34 <HardDiskController::~HardDiskController()>:
c000bc34:	83 ec 0c             	sub    esp,0xc
c000bc37:	83 ec 0c             	sub    esp,0xc
c000bc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc3e:	e8 cd ff ff ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c000bc43:	83 c4 10             	add    esp,0x10
c000bc46:	83 ec 08             	sub    esp,0x8
c000bc49:	68 58 01 00 00       	push   0x158
c000bc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc52:	e8 07 e7 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bc57:	83 c4 10             	add    esp,0x10
c000bc5a:	83 c4 0c             	add    esp,0xc
c000bc5d:	c3                   	ret    

c000bc5e <PhysicalDisk::eject()>:
c000bc5e:	83 c8 ff             	or     eax,0xffffffff
c000bc61:	c3                   	ret    

c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc69:	83 ec 08             	sub    esp,0x8
c000bc6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc70:	50                   	push   eax
c000bc71:	e8 b6 fd ff ff       	call   c000ba2c <Device::Device(char const*)>
c000bc76:	83 c4 10             	add    esp,0x10
c000bc79:	ba 34 da 01 c0       	mov    edx,0xc001da34
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	89 10                	mov    DWORD PTR [eax],edx
c000bc84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc88:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bcb0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bcb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bcc4:	90                   	nop
c000bcc5:	83 c4 0c             	add    esp,0xc
c000bcc8:	c3                   	ret    
c000bcc9:	90                   	nop

c000bcca <PhysicalDisk::startCache()>:
c000bcca:	56                   	push   esi
c000bccb:	53                   	push   ebx
c000bccc:	83 ec 10             	sub    esp,0x10
c000bccf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bcd3:	6a 44                	push   0x44
c000bcd5:	e8 df ba ff ff       	call   c00077b9 <malloc>
c000bcda:	89 c6                	mov    esi,eax
c000bcdc:	58                   	pop    eax
c000bcdd:	5a                   	pop    edx
c000bcde:	53                   	push   ebx
c000bcdf:	56                   	push   esi
c000bce0:	e8 ab 15 00 00       	call   c000d290 <VCache::VCache(PhysicalDisk*)>
c000bce5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bceb:	83 c4 14             	add    esp,0x14
c000bcee:	5b                   	pop    ebx
c000bcef:	5e                   	pop    esi
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <PhysicalDisk::~PhysicalDisk()>:
c000bcf2:	83 ec 0c             	sub    esp,0xc
c000bcf5:	ba 34 da 01 c0       	mov    edx,0xc001da34
c000bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfe:	89 10                	mov    DWORD PTR [eax],edx
c000bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	50                   	push   eax
c000bd08:	e8 89 fa ff ff       	call   c000b796 <Device::~Device()>
c000bd0d:	83 c4 10             	add    esp,0x10
c000bd10:	90                   	nop
c000bd11:	83 c4 0c             	add    esp,0xc
c000bd14:	c3                   	ret    
c000bd15:	90                   	nop

c000bd16 <PhysicalDisk::~PhysicalDisk()>:
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	83 ec 0c             	sub    esp,0xc
c000bd1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd20:	e8 cd ff ff ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c000bd25:	83 c4 10             	add    esp,0x10
c000bd28:	83 ec 08             	sub    esp,0x8
c000bd2b:	68 6c 01 00 00       	push   0x16c
c000bd30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd34:	e8 25 e6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000bd39:	83 c4 10             	add    esp,0x10
c000bd3c:	83 c4 0c             	add    esp,0xc
c000bd3f:	c3                   	ret    

c000bd40 <int_handler>:
c000bd40:	55                   	push   ebp
c000bd41:	57                   	push   edi
c000bd42:	56                   	push   esi
c000bd43:	53                   	push   ebx
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bd4b:	80 3d 98 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e98,0x0
c000bd52:	74 0b                	je     c000bd5f <int_handler+0x1f>
c000bd54:	fa                   	cli    
c000bd55:	f4                   	hlt    
c000bd56:	80 3d 98 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e98,0x0
c000bd5d:	75 f5                	jne    c000bd54 <int_handler+0x14>
c000bd5f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bd62:	8d 46 e0             	lea    eax,[esi-0x20]
c000bd65:	83 f8 17             	cmp    eax,0x17
c000bd68:	76 3e                	jbe    c000bda8 <int_handler+0x68>
c000bd6a:	c1 e6 04             	shl    esi,0x4
c000bd6d:	31 db                	xor    ebx,ebx
c000bd6f:	8d ae 20 15 02 c0    	lea    ebp,[esi-0x3ffdeae0]
c000bd75:	81 c6 20 05 02 c0    	add    esi,0xc0020520
c000bd7b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bd7f:	85 c0                	test   eax,eax
c000bd81:	74 13                	je     c000bd96 <int_handler+0x56>
c000bd83:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bd86:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bd8a:	74 2a                	je     c000bdb6 <int_handler+0x76>
c000bd8c:	83 ec 08             	sub    esp,0x8
c000bd8f:	52                   	push   edx
c000bd90:	57                   	push   edi
c000bd91:	ff d0                	call   eax
c000bd93:	83 c4 10             	add    esp,0x10
c000bd96:	43                   	inc    ebx
c000bd97:	83 fb 04             	cmp    ebx,0x4
c000bd9a:	75 df                	jne    c000bd7b <int_handler+0x3b>
c000bd9c:	83 c4 0c             	add    esp,0xc
c000bd9f:	31 c0                	xor    eax,eax
c000bda1:	5b                   	pop    ebx
c000bda2:	31 d2                	xor    edx,edx
c000bda4:	5e                   	pop    esi
c000bda5:	5f                   	pop    edi
c000bda6:	5d                   	pop    ebp
c000bda7:	c3                   	ret    
c000bda8:	83 ec 0c             	sub    esp,0xc
c000bdab:	50                   	push   eax
c000bdac:	e8 06 96 00 00       	call   c00153b7 <HalEndOfInterrupt(int)>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	eb b4                	jmp    c000bd6a <int_handler+0x2a>
c000bdb6:	83 ec 08             	sub    esp,0x8
c000bdb9:	52                   	push   edx
c000bdba:	57                   	push   edi
c000bdbb:	ff d0                	call   eax
c000bdbd:	83 c4 10             	add    esp,0x10
c000bdc0:	83 c4 0c             	add    esp,0xc
c000bdc3:	5b                   	pop    ebx
c000bdc4:	5e                   	pop    esi
c000bdc5:	5f                   	pop    edi
c000bdc6:	5d                   	pop    ebp
c000bdc7:	c3                   	ret    

c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bdc8:	56                   	push   esi
c000bdc9:	31 c0                	xor    eax,eax
c000bdcb:	53                   	push   ebx
c000bdcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bdd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdd4:	89 ca                	mov    edx,ecx
c000bdd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bdda:	c1 e2 04             	shl    edx,0x4
c000bddd:	83 bc 82 20 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdeae0],0x0
c000bde5:	74 15                	je     c000bdfc <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bde7:	40                   	inc    eax
c000bde8:	83 f8 04             	cmp    eax,0x4
c000bdeb:	75 f0                	jne    c000bddd <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bded:	c7 44 24 0c 64 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001da64
c000bdf5:	5b                   	pop    ebx
c000bdf6:	5e                   	pop    esi
c000bdf7:	e9 bb 42 00 00       	jmp    c00100b7 <KePanic(char const*)>
c000bdfc:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bdff:	89 1c 85 20 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeae0],ebx
c000be06:	89 34 85 20 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfae0],esi
c000be0d:	5b                   	pop    ebx
c000be0e:	5e                   	pop    esi
c000be0f:	c3                   	ret    

c000be10 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be10:	57                   	push   edi
c000be11:	8b 15 18 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020418
c000be17:	56                   	push   esi
c000be18:	53                   	push   ebx
c000be19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be21:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000be28:	74 5b                	je     c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000be2a:	89 c7                	mov    edi,eax
c000be2c:	84 c0                	test   al,al
c000be2e:	74 24                	je     c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000be30:	83 fe 0f             	cmp    esi,0xf
c000be33:	0f 8f d9 00 00 00    	jg     c000bf12 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000be39:	8a 86 40 f1 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0ec0]
c000be3f:	25 ff 00 00 00       	and    eax,0xff
c000be44:	66 8b bc 00 c0 2c 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd340]
c000be4c:	89 c6                	mov    esi,eax
c000be4e:	66 d1 ef             	shr    di,1
c000be51:	83 e7 01             	and    edi,0x1
c000be54:	83 ec 08             	sub    esp,0x8
c000be57:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c000be5c:	31 db                	xor    ebx,ebx
c000be5e:	50                   	push   eax
c000be5f:	68 71 da 01 c0       	push   0xc001da71
c000be64:	e8 eb e5 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000be69:	83 c4 10             	add    esp,0x10
c000be6c:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c000be71:	85 c0                	test   eax,eax
c000be73:	7f 51                	jg     c000bec6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000be75:	83 ec 0c             	sub    esp,0xc
c000be78:	68 88 da 01 c0       	push   0xc001da88
c000be7d:	e8 35 42 00 00       	call   c00100b7 <KePanic(char const*)>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	8d 4e 20             	lea    ecx,[esi+0x20]
c000be88:	31 d2                	xor    edx,edx
c000be8a:	89 c8                	mov    eax,ecx
c000be8c:	c1 e0 04             	shl    eax,0x4
c000be8f:	8b 9c 90 20 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdeae0]
c000be96:	85 db                	test   ebx,ebx
c000be98:	0f 84 8b 00 00 00    	je     c000bf29 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000be9e:	42                   	inc    edx
c000be9f:	83 fa 04             	cmp    edx,0x4
c000bea2:	75 eb                	jne    c000be8f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	68 dc da 01 c0       	push   0xc001dadc
c000beac:	e8 06 42 00 00       	call   c00100b7 <KePanic(char const*)>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000beb9:	5b                   	pop    ebx
c000beba:	5e                   	pop    esi
c000bebb:	5f                   	pop    edi
c000bebc:	c3                   	ret    
c000bebd:	43                   	inc    ebx
c000bebe:	39 1d c0 40 02 c0    	cmp    DWORD PTR ds:0xc00240c0,ebx
c000bec4:	7e af                	jle    c000be75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bec6:	83 ec 08             	sub    esp,0x8
c000bec9:	8b 04 9d e0 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf20]
c000bed0:	56                   	push   esi
c000bed1:	50                   	push   eax
c000bed2:	e8 cd f1 00 00       	call   c001b0a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bed7:	83 c4 10             	add    esp,0x10
c000beda:	84 c0                	test   al,al
c000bedc:	74 df                	je     c000bebd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bede:	81 e7 ff 00 00 00    	and    edi,0xff
c000bee4:	50                   	push   eax
c000bee5:	8d 46 20             	lea    eax,[esi+0x20]
c000bee8:	57                   	push   edi
c000bee9:	25 ff 00 00 00       	and    eax,0xff
c000beee:	6a 00                	push   0x0
c000bef0:	50                   	push   eax
c000bef1:	89 f0                	mov    eax,esi
c000bef3:	6a 00                	push   0x0
c000bef5:	25 ff 00 00 00       	and    eax,0xff
c000befa:	6a 00                	push   0x0
c000befc:	50                   	push   eax
c000befd:	8b 04 9d e0 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf20]
c000bf04:	50                   	push   eax
c000bf05:	e8 14 f3 00 00       	call   c001b21e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf0a:	83 c4 20             	add    esp,0x20
c000bf0d:	e9 73 ff ff ff       	jmp    c000be85 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf12:	83 ec 0c             	sub    esp,0xc
c000bf15:	31 ff                	xor    edi,edi
c000bf17:	68 a4 da 01 c0       	push   0xc001daa4
c000bf1c:	e8 96 41 00 00       	call   c00100b7 <KePanic(char const*)>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	e9 2b ff ff ff       	jmp    c000be54 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf29:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bf2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bf30:	89 14 85 20 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeae0],edx
c000bf37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3b:	5b                   	pop    ebx
c000bf3c:	89 14 85 20 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfae0],edx
c000bf43:	89 f0                	mov    eax,esi
c000bf45:	5e                   	pop    esi
c000bf46:	5f                   	pop    edi
c000bf47:	c3                   	ret    

c000bf48 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bf48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bf4c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf50:	c1 e0 04             	shl    eax,0x4
c000bf53:	8d 50 10             	lea    edx,[eax+0x10]
c000bf56:	39 88 20 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeae0],ecx
c000bf5c:	74 08                	je     c000bf66 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bf5e:	83 c0 04             	add    eax,0x4
c000bf61:	39 d0                	cmp    eax,edx
c000bf63:	75 f1                	jne    c000bf56 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bf65:	c3                   	ret    
c000bf66:	c7 80 20 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeae0],0x0
c000bf70:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000bf7a:	eb e2                	jmp    c000bf5e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000bf7c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bf7c:	53                   	push   ebx
c000bf7d:	83 ec 08             	sub    esp,0x8
c000bf80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf84:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000bf89:	74 0e                	je     c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bf8b:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000bf90:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000bf97:	75 37                	jne    c000bfd0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000bf99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf9d:	83 c0 20             	add    eax,0x20
c000bfa0:	c1 e0 04             	shl    eax,0x4
c000bfa3:	8d 50 10             	lea    edx,[eax+0x10]
c000bfa6:	39 98 20 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdeae0],ebx
c000bfac:	74 0c                	je     c000bfba <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000bfae:	83 c0 04             	add    eax,0x4
c000bfb1:	39 d0                	cmp    eax,edx
c000bfb3:	75 f1                	jne    c000bfa6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000bfb5:	83 c4 08             	add    esp,0x8
c000bfb8:	5b                   	pop    ebx
c000bfb9:	c3                   	ret    
c000bfba:	c7 80 20 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeae0],0x0
c000bfc4:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000bfce:	eb de                	jmp    c000bfae <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000bfd0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000bfd5:	7f 12                	jg     c000bfe9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000bfd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfdb:	31 c0                	xor    eax,eax
c000bfdd:	8a 81 40 f1 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0ec0]
c000bfe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe7:	eb b0                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000bfe9:	83 ec 0c             	sub    esp,0xc
c000bfec:	68 95 da 01 c0       	push   0xc001da95
c000bff1:	e8 c1 40 00 00       	call   c00100b7 <KePanic(char const*)>
c000bff6:	83 c4 10             	add    esp,0x10
c000bff9:	eb 9e                	jmp    c000bf99 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000bffb <setupINTS()>:
c000bffb:	31 c0                	xor    eax,eax
c000bffd:	c7 80 20 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeae0],0x0
c000c007:	c7 80 20 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfae0],0x0
c000c011:	c7 80 24 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeadc],0x0
c000c01b:	c7 80 24 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfadc],0x0
c000c025:	c7 80 28 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdead8],0x0
c000c02f:	c7 80 28 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfad8],0x0
c000c039:	c7 80 2c 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdead4],0x0
c000c043:	c7 80 2c 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfad4],0x0
c000c04d:	83 c0 10             	add    eax,0x10
c000c050:	3d 00 10 00 00       	cmp    eax,0x1000
c000c055:	75 a6                	jne    c000bffd <setupINTS()+0x2>
c000c057:	c3                   	ret    

c000c058 <convertLegacyIRQNumber(int)>:
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	8b 15 18 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020418
c000c061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c065:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c06c:	74 0f                	je     c000c07d <convertLegacyIRQNumber(int)+0x25>
c000c06e:	83 f8 0f             	cmp    eax,0xf
c000c071:	7f 0e                	jg     c000c081 <convertLegacyIRQNumber(int)+0x29>
c000c073:	31 c9                	xor    ecx,ecx
c000c075:	8a 88 40 f1 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0ec0]
c000c07b:	89 c8                	mov    eax,ecx
c000c07d:	83 c4 0c             	add    esp,0xc
c000c080:	c3                   	ret    
c000c081:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c085:	83 ec 0c             	sub    esp,0xc
c000c088:	68 a4 da 01 c0       	push   0xc001daa4
c000c08d:	e8 25 40 00 00       	call   c00100b7 <KePanic(char const*)>
c000c092:	83 c4 10             	add    esp,0x10
c000c095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c099:	83 c4 0c             	add    esp,0xc
c000c09c:	c3                   	ret    
c000c09d:	90                   	nop

c000c09e <startGUI(void*)>:
c000c09e:	55                   	push   ebp
c000c09f:	89 e5                	mov    ebp,esp
c000c0a1:	53                   	push   ebx
c000c0a2:	83 ec 04             	sub    esp,0x4
c000c0a5:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c0aa:	48                   	dec    eax
c000c0ab:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c0b0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c0b5:	85 c0                	test   eax,eax
c000c0b7:	75 01                	jne    c000c0ba <startGUI(void*)+0x1c>
c000c0b9:	fb                   	sti    
c000c0ba:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c000c0c0:	83 ec 08             	sub    esp,0x8
c000c0c3:	6a 01                	push   0x1
c000c0c5:	68 01 db 01 c0       	push   0xc001db01
c000c0ca:	e8 07 68 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000c0cf:	83 c4 10             	add    esp,0x10
c000c0d2:	83 ec 08             	sub    esp,0x8
c000c0d5:	53                   	push   ebx
c000c0d6:	50                   	push   eax
c000c0d7:	e8 2b 6a 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000c0dc:	83 c4 10             	add    esp,0x10
c000c0df:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c000c0e5:	83 ec 08             	sub    esp,0x8
c000c0e8:	6a 01                	push   0x1
c000c0ea:	68 1b db 01 c0       	push   0xc001db1b
c000c0ef:	e8 e2 67 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	83 ec 08             	sub    esp,0x8
c000c0fa:	53                   	push   ebx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 06 6a 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000c101:	83 c4 10             	add    esp,0x10
c000c104:	90                   	nop
c000c105:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c108:	c9                   	leave  
c000c109:	c3                   	ret    

c000c10a <startGUIVESA(void*)>:
c000c10a:	55                   	push   ebp
c000c10b:	89 e5                	mov    ebp,esp
c000c10d:	53                   	push   ebx
c000c10e:	83 ec 04             	sub    esp,0x4
c000c111:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c116:	48                   	dec    eax
c000c117:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c11c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c121:	85 c0                	test   eax,eax
c000c123:	75 01                	jne    c000c126 <startGUIVESA(void*)+0x1c>
c000c125:	fb                   	sti    
c000c126:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c000c12c:	83 ec 08             	sub    esp,0x8
c000c12f:	6a 01                	push   0x1
c000c131:	68 39 db 01 c0       	push   0xc001db39
c000c136:	e8 9b 67 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000c13b:	83 c4 10             	add    esp,0x10
c000c13e:	83 ec 08             	sub    esp,0x8
c000c141:	53                   	push   ebx
c000c142:	50                   	push   eax
c000c143:	e8 bf 69 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000c148:	83 c4 10             	add    esp,0x10
c000c14b:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c000c151:	83 ec 08             	sub    esp,0x8
c000c154:	6a 01                	push   0x1
c000c156:	68 1b db 01 c0       	push   0xc001db1b
c000c15b:	e8 76 67 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	83 ec 08             	sub    esp,0x8
c000c166:	53                   	push   ebx
c000c167:	50                   	push   eax
c000c168:	e8 9a 69 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	90                   	nop
c000c171:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c174:	c9                   	leave  
c000c175:	c3                   	ret    

c000c176 <sendKeyToTerminal(unsigned char)>:
c000c176:	55                   	push   ebp
c000c177:	89 e5                	mov    ebp,esp
c000c179:	83 ec 28             	sub    esp,0x28
c000c17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c17f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c182:	8b 15 64 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020464
c000c188:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c18b:	25 ff 00 00 00       	and    eax,0xff
c000c190:	83 ec 08             	sub    esp,0x8
c000c193:	50                   	push   eax
c000c194:	52                   	push   edx
c000c195:	e8 ac c8 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c1a1:	0f 85 8f 00 00 00    	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c1a7:	fa                   	cli    
c000c1a8:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c1ad:	40                   	inc    eax
c000c1ae:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c1b3:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c000c1b8:	40                   	inc    eax
c000c1b9:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c000c1be:	a1 20 25 02 c0       	mov    eax,ds:0xc0022520
c000c1c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1c6:	c7 05 20 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022520,0x0
c000c1d0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c1d4:	74 1f                	je     c000c1f5 <sendKeyToTerminal(unsigned char)+0x7f>
c000c1d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c1d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c1dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c1df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c1e2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c1e5:	83 ec 0c             	sub    esp,0xc
c000c1e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c1eb:	e8 9c 75 00 00       	call   c001378c <unblockTask(ThreadControlBlock*)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	eb db                	jmp    c000c1d0 <sendKeyToTerminal(unsigned char)+0x5a>
c000c1f5:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c000c1fa:	48                   	dec    eax
c000c1fb:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c000c200:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c000c205:	85 c0                	test   eax,eax
c000c207:	75 18                	jne    c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c209:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c000c20e:	85 c0                	test   eax,eax
c000c210:	74 0f                	je     c000c221 <sendKeyToTerminal(unsigned char)+0xab>
c000c212:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c000c21c:	e8 a7 70 00 00       	call   c00132c8 <schedule()>
c000c221:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c226:	48                   	dec    eax
c000c227:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c22c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c231:	85 c0                	test   eax,eax
c000c233:	75 01                	jne    c000c236 <sendKeyToTerminal(unsigned char)+0xc0>
c000c235:	fb                   	sti    
c000c236:	90                   	nop
c000c237:	c9                   	leave  
c000c238:	c3                   	ret    

c000c239 <sendKeyboardToken(KeyboardToken)>:
c000c239:	55                   	push   ebp
c000c23a:	89 e5                	mov    ebp,esp
c000c23c:	83 ec 18             	sub    esp,0x18
c000c23f:	e8 c3 3e 00 00       	call   c0010107 <Krnl::userIOReceived()>
c000c244:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c24a:	25 ff ff 00 00       	and    eax,0xffff
c000c24f:	83 f2 01             	xor    edx,0x1
c000c252:	88 90 40 25 02 c0    	mov    BYTE PTR [eax-0x3ffddac0],dl
c000c258:	a1 28 25 02 c0       	mov    eax,ds:0xc0022528
c000c25d:	85 c0                	test   eax,eax
c000c25f:	74 24                	je     c000c285 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c261:	8b 0d 28 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022528
c000c267:	83 ec 04             	sub    esp,0x4
c000c26a:	68 40 25 02 c0       	push   0xc0022540
c000c26f:	83 ec 08             	sub    esp,0x8
c000c272:	89 e2                	mov    edx,esp
c000c274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c277:	89 02                	mov    DWORD PTR [edx],eax
c000c279:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c27c:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c280:	ff d1                	call   ecx
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c289:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c28c:	a0 48 29 02 c0       	mov    al,ds:0xc0022948
c000c291:	38 c2                	cmp    dl,al
c000c293:	74 1e                	je     c000c2b3 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c295:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c298:	a2 48 29 02 c0       	mov    ds:0xc0022948,al
c000c29d:	a0 48 29 02 c0       	mov    al,ds:0xc0022948
c000c2a2:	25 ff 00 00 00       	and    eax,0xff
c000c2a7:	83 ec 0c             	sub    esp,0xc
c000c2aa:	50                   	push   eax
c000c2ab:	e8 e8 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c2b0:	83 c4 10             	add    esp,0x10
c000c2b3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c2b6:	84 c0                	test   al,al
c000c2b8:	0f 84 ae 00 00 00    	je     c000c36c <sendKeyboardToken(KeyboardToken)+0x133>
c000c2be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c1:	66 3d 10 03          	cmp    ax,0x310
c000c2c5:	75 06                	jne    c000c2cd <sendKeyboardToken(KeyboardToken)+0x94>
c000c2c7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c2cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d0:	66 3d 11 03          	cmp    ax,0x311
c000c2d4:	75 06                	jne    c000c2dc <sendKeyboardToken(KeyboardToken)+0xa3>
c000c2d6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	66 3d 12 03          	cmp    ax,0x312
c000c2e3:	75 06                	jne    c000c2eb <sendKeyboardToken(KeyboardToken)+0xb2>
c000c2e5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2ee:	66 3d 13 03          	cmp    ax,0x313
c000c2f2:	75 06                	jne    c000c2fa <sendKeyboardToken(KeyboardToken)+0xc1>
c000c2f4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c2fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2fd:	66 3d 14 03          	cmp    ax,0x314
c000c301:	75 06                	jne    c000c309 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c303:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c30c:	66 3d 15 03          	cmp    ax,0x315
c000c310:	75 06                	jne    c000c318 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c312:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c31b:	66 3d 16 03          	cmp    ax,0x316
c000c31f:	75 06                	jne    c000c327 <sendKeyboardToken(KeyboardToken)+0xee>
c000c321:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c32a:	66 3d 17 03          	cmp    ax,0x317
c000c32e:	75 06                	jne    c000c336 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c330:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c339:	66 3d 18 03          	cmp    ax,0x318
c000c33d:	75 06                	jne    c000c345 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c33f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c348:	66 3d 19 03          	cmp    ax,0x319
c000c34c:	75 06                	jne    c000c354 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c34e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c357:	66 3d 1a 03          	cmp    ax,0x31a
c000c35b:	0f 85 c9 00 00 00    	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c361:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c367:	e9 be 00 00 00       	jmp    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36f:	66 3d 10 03          	cmp    ax,0x310
c000c373:	75 0a                	jne    c000c37f <sendKeyboardToken(KeyboardToken)+0x146>
c000c375:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c37b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c382:	66 3d 11 03          	cmp    ax,0x311
c000c386:	75 0a                	jne    c000c392 <sendKeyboardToken(KeyboardToken)+0x159>
c000c388:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c38e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c395:	66 3d 12 03          	cmp    ax,0x312
c000c399:	75 0a                	jne    c000c3a5 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c39b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c3a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a8:	66 3d 13 03          	cmp    ax,0x313
c000c3ac:	75 0a                	jne    c000c3b8 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c3ae:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c3b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 14 03          	cmp    ax,0x314
c000c3bf:	75 0a                	jne    c000c3cb <sendKeyboardToken(KeyboardToken)+0x192>
c000c3c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c3c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ce:	66 3d 15 03          	cmp    ax,0x315
c000c3d2:	75 0a                	jne    c000c3de <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c3d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e1:	66 3d 16 03          	cmp    ax,0x316
c000c3e5:	75 0a                	jne    c000c3f1 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c3e7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c3ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f4:	66 3d 17 03          	cmp    ax,0x317
c000c3f8:	75 0a                	jne    c000c404 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c3fa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c400:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c407:	66 3d 18 03          	cmp    ax,0x318
c000c40b:	75 0a                	jne    c000c417 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c40d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c413:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41a:	66 3d 19 03          	cmp    ax,0x319
c000c41e:	75 0a                	jne    c000c42a <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c420:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c426:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42d:	66 3d 00 02          	cmp    ax,0x200
c000c431:	75 2c                	jne    c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c433:	a0 40 29 02 c0       	mov    al,ds:0xc0022940
c000c438:	83 f0 01             	xor    eax,0x1
c000c43b:	84 c0                	test   al,al
c000c43d:	74 20                	je     c000c45f <sendKeyboardToken(KeyboardToken)+0x226>
c000c43f:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000c444:	6a 01                	push   0x1
c000c446:	6a 00                	push   0x0
c000c448:	68 9e c0 00 c0       	push   0xc000c09e
c000c44d:	50                   	push   eax
c000c44e:	e8 55 6c 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c000c453:	83 c4 10             	add    esp,0x10
c000c456:	c6 05 40 29 02 c0 01 	mov    BYTE PTR ds:0xc0022940,0x1
c000c45d:	eb 33                	jmp    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c462:	66 3d 01 02          	cmp    ax,0x201
c000c466:	75 2a                	jne    c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c468:	a0 40 29 02 c0       	mov    al,ds:0xc0022940
c000c46d:	83 f0 01             	xor    eax,0x1
c000c470:	84 c0                	test   al,al
c000c472:	74 1e                	je     c000c492 <sendKeyboardToken(KeyboardToken)+0x259>
c000c474:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000c479:	6a 01                	push   0x1
c000c47b:	6a 00                	push   0x0
c000c47d:	68 0a c1 00 c0       	push   0xc000c10a
c000c482:	50                   	push   eax
c000c483:	e8 20 6c 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c000c488:	83 c4 10             	add    esp,0x10
c000c48b:	c6 05 40 29 02 c0 01 	mov    BYTE PTR ds:0xc0022940,0x1
c000c492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c495:	66 3d 1d 03          	cmp    ax,0x31d
c000c499:	75 06                	jne    c000c4a1 <sendKeyboardToken(KeyboardToken)+0x268>
c000c49b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c4a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a4:	66 3d 1c 03          	cmp    ax,0x31c
c000c4a8:	75 06                	jne    c000c4b0 <sendKeyboardToken(KeyboardToken)+0x277>
c000c4aa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c4b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b3:	66 3d 1b 03          	cmp    ax,0x31b
c000c4b7:	75 06                	jne    c000c4bf <sendKeyboardToken(KeyboardToken)+0x286>
c000c4b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c2:	66 3d 1e 03          	cmp    ax,0x31e
c000c4c6:	75 06                	jne    c000c4ce <sendKeyboardToken(KeyboardToken)+0x295>
c000c4c8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c4ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d1:	66 3d 1f 03          	cmp    ax,0x31f
c000c4d5:	75 06                	jne    c000c4dd <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c4d7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c4dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e0:	66 3d 1a 03          	cmp    ax,0x31a
c000c4e4:	75 06                	jne    c000c4ec <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c4e6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c4ec:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c4f0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c4f3:	83 f0 01             	xor    eax,0x1
c000c4f6:	84 c0                	test   al,al
c000c4f8:	74 7b                	je     c000c575 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c4fa:	a0 41 26 02 c0       	mov    al,ds:0xc0022641
c000c4ff:	84 c0                	test   al,al
c000c501:	74 43                	je     c000c546 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c503:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c507:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c50b:	74 2d                	je     c000c53a <sendKeyboardToken(KeyboardToken)+0x301>
c000c50d:	8b 15 44 29 02 c0    	mov    edx,DWORD PTR ds:0xc0022944
c000c513:	89 d0                	mov    eax,edx
c000c515:	c1 e0 02             	shl    eax,0x2
c000c518:	01 d0                	add    eax,edx
c000c51a:	01 c0                	add    eax,eax
c000c51c:	a3 44 29 02 c0       	mov    ds:0xc0022944,eax
c000c521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c524:	25 ff ff 00 00       	and    eax,0xffff
c000c529:	8d 50 d0             	lea    edx,[eax-0x30]
c000c52c:	a1 44 29 02 c0       	mov    eax,ds:0xc0022944
c000c531:	01 d0                	add    eax,edx
c000c533:	a3 44 29 02 c0       	mov    ds:0xc0022944,eax
c000c538:	eb 71                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c53a:	c7 05 44 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022944,0x0
c000c544:	eb 65                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c546:	a1 44 29 02 c0       	mov    eax,ds:0xc0022944
c000c54b:	85 c0                	test   eax,eax
c000c54d:	74 1a                	je     c000c569 <sendKeyboardToken(KeyboardToken)+0x330>
c000c54f:	a1 44 29 02 c0       	mov    eax,ds:0xc0022944
c000c554:	25 ff 00 00 00       	and    eax,0xff
c000c559:	83 ec 0c             	sub    esp,0xc
c000c55c:	50                   	push   eax
c000c55d:	e8 14 fc ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c562:	83 c4 10             	add    esp,0x10
c000c565:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c569:	c7 05 44 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022944,0x0
c000c573:	eb 36                	jmp    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c578:	66 3d 01 01          	cmp    ax,0x101
c000c57c:	75 2d                	jne    c000c5ab <sendKeyboardToken(KeyboardToken)+0x372>
c000c57e:	a1 44 29 02 c0       	mov    eax,ds:0xc0022944
c000c583:	85 c0                	test   eax,eax
c000c585:	74 1a                	je     c000c5a1 <sendKeyboardToken(KeyboardToken)+0x368>
c000c587:	a1 44 29 02 c0       	mov    eax,ds:0xc0022944
c000c58c:	25 ff 00 00 00       	and    eax,0xff
c000c591:	83 ec 0c             	sub    esp,0xc
c000c594:	50                   	push   eax
c000c595:	e8 dc fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c59a:	83 c4 10             	add    esp,0x10
c000c59d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5a1:	c7 05 44 29 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022944,0x0
c000c5ab:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c5ae:	83 f0 01             	xor    eax,0x1
c000c5b1:	84 c0                	test   al,al
c000c5b3:	74 4e                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5b5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5b8:	83 f0 01             	xor    eax,0x1
c000c5bb:	84 c0                	test   al,al
c000c5bd:	74 44                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5bf:	a0 40 26 02 c0       	mov    al,ds:0xc0022640
c000c5c4:	83 f0 01             	xor    eax,0x1
c000c5c7:	84 c0                	test   al,al
c000c5c9:	74 38                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ce:	66 83 f8 1f          	cmp    ax,0x1f
c000c5d2:	76 09                	jbe    c000c5dd <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d7:	66 83 f8 7e          	cmp    ax,0x7e
c000c5db:	76 12                	jbe    c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e0:	66 83 f8 0a          	cmp    ax,0xa
c000c5e4:	74 09                	je     c000c5ef <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e9:	66 83 f8 08          	cmp    ax,0x8
c000c5ed:	75 14                	jne    c000c603 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	25 ff 00 00 00       	and    eax,0xff
c000c5f7:	83 ec 0c             	sub    esp,0xc
c000c5fa:	50                   	push   eax
c000c5fb:	e8 76 fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c606:	83 f0 01             	xor    eax,0x1
c000c609:	84 c0                	test   al,al
c000c60b:	74 51                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c60d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c610:	83 f0 01             	xor    eax,0x1
c000c613:	84 c0                	test   al,al
c000c615:	74 47                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c617:	a0 40 26 02 c0       	mov    al,ds:0xc0022640
c000c61c:	84 c0                	test   al,al
c000c61e:	74 3e                	je     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c623:	66 83 f8 3f          	cmp    ax,0x3f
c000c627:	76 35                	jbe    c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c629:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62c:	66 83 f8 7f          	cmp    ax,0x7f
c000c630:	77 2c                	ja     c000c65e <sendKeyboardToken(KeyboardToken)+0x425>
c000c632:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c635:	88 c2                	mov    dl,al
c000c637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63a:	66 83 f8 5f          	cmp    ax,0x5f
c000c63e:	76 04                	jbe    c000c644 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c640:	b0 20                	mov    al,0x20
c000c642:	eb 02                	jmp    c000c646 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c644:	b0 00                	mov    al,0x0
c000c646:	29 c2                	sub    edx,eax
c000c648:	88 d0                	mov    al,dl
c000c64a:	83 e8 40             	sub    eax,0x40
c000c64d:	25 ff 00 00 00       	and    eax,0xff
c000c652:	83 ec 0c             	sub    esp,0xc
c000c655:	50                   	push   eax
c000c656:	e8 1b fb ff ff       	call   c000c176 <sendKeyToTerminal(unsigned char)>
c000c65b:	83 c4 10             	add    esp,0x10
c000c65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c661:	66 3d 00 03          	cmp    ax,0x300
c000c665:	75 0f                	jne    c000c676 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c667:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c66a:	83 f0 01             	xor    eax,0x1
c000c66d:	84 c0                	test   al,al
c000c66f:	74 05                	je     c000c676 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c671:	e8 23 bb ff ff       	call   c0008199 <doTerminalCycle()>
c000c676:	90                   	nop
c000c677:	c9                   	leave  
c000c678:	c3                   	ret    

c000c679 <clearInternalKeybuffer(VgaText*)>:
c000c679:	55                   	push   ebp
c000c67a:	89 e5                	mov    ebp,esp
c000c67c:	83 ec 08             	sub    esp,0x8
c000c67f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c682:	05 b2 00 00 00       	add    eax,0xb2
c000c687:	83 ec 0c             	sub    esp,0xc
c000c68a:	50                   	push   eax
c000c68b:	e8 b0 3e ff ff       	call   c0000540 <strlen>
c000c690:	83 c4 10             	add    esp,0x10
c000c693:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c696:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c69c:	83 ec 04             	sub    esp,0x4
c000c69f:	50                   	push   eax
c000c6a0:	6a 00                	push   0x0
c000c6a2:	52                   	push   edx
c000c6a3:	e8 28 3e ff ff       	call   c00004d0 <memset>
c000c6a8:	83 c4 10             	add    esp,0x10
c000c6ab:	90                   	nop
c000c6ac:	c9                   	leave  
c000c6ad:	c3                   	ret    

c000c6ae <readKeyboard(VgaText*, char*, unsigned long)>:
c000c6ae:	55                   	push   ebp
c000c6af:	89 e5                	mov    ebp,esp
c000c6b1:	83 ec 18             	sub    esp,0x18
c000c6b4:	a1 28 25 02 c0       	mov    eax,ds:0xc0022528
c000c6b9:	85 c0                	test   eax,eax
c000c6bb:	74 2a                	je     c000c6e7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c6bd:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c6c3:	8b 0d 28 25 02 c0    	mov    ecx,DWORD PTR ds:0xc0022528
c000c6c9:	83 ec 04             	sub    esp,0x4
c000c6cc:	68 40 25 02 c0       	push   0xc0022540
c000c6d1:	83 ec 08             	sub    esp,0x8
c000c6d4:	89 e2                	mov    edx,esp
c000c6d6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c6d9:	89 02                	mov    DWORD PTR [edx],eax
c000c6db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c6de:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c6e2:	ff d1                	call   ecx
c000c6e4:	83 c4 10             	add    esp,0x10
c000c6e7:	fb                   	sti    
c000c6e8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c6ef:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c6f3:	0f 84 a1 00 00 00    	je     c000c79a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c6f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fc:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c702:	84 c0                	test   al,al
c000c704:	75 28                	jne    c000c72e <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c706:	fa                   	cli    
c000c707:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c70c:	40                   	inc    eax
c000c70d:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c712:	e8 b1 6b 00 00       	call   c00132c8 <schedule()>
c000c717:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c71c:	48                   	dec    eax
c000c71d:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000c722:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000c727:	85 c0                	test   eax,eax
c000c729:	75 ce                	jne    c000c6f9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c72b:	fb                   	sti    
c000c72c:	eb cb                	jmp    c000c6f9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c72e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c731:	8d 50 01             	lea    edx,[eax+0x1]
c000c734:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c737:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c73a:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c740:	88 10                	mov    BYTE PTR [eax],dl
c000c742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c745:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c74b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c751:	05 b2 00 00 00       	add    eax,0xb2
c000c756:	83 ec 0c             	sub    esp,0xc
c000c759:	50                   	push   eax
c000c75a:	e8 e1 3d ff ff       	call   c0000540 <strlen>
c000c75f:	83 c4 10             	add    esp,0x10
c000c762:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c765:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c76b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c76e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c771:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c777:	83 ec 04             	sub    esp,0x4
c000c77a:	50                   	push   eax
c000c77b:	51                   	push   ecx
c000c77c:	52                   	push   edx
c000c77d:	e8 5e 3c ff ff       	call   c00003e0 <memmove>
c000c782:	83 c4 10             	add    esp,0x10
c000c785:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c788:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c78b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c78f:	0f 85 5a ff ff ff    	jne    c000c6ef <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c798:	eb 03                	jmp    c000c79d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c79a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c79d:	c9                   	leave  
c000c79e:	c3                   	ret    
c000c79f:	90                   	nop

c000c7a0 <Keyboard::Keyboard(char const*)>:
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a7:	83 ec 08             	sub    esp,0x8
c000c7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7ae:	50                   	push   eax
c000c7af:	e8 78 f2 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	ba 5c db 01 c0       	mov    edx,0xc001db5c
c000c7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c0:	89 10                	mov    DWORD PTR [eax],edx
c000c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c7d0:	c6 05 24 25 02 c0 01 	mov    BYTE PTR ds:0xc0022524,0x1
c000c7d7:	90                   	nop
c000c7d8:	83 c4 0c             	add    esp,0xc
c000c7db:	c3                   	ret    

c000c7dc <Keyboard::~Keyboard()>:
c000c7dc:	83 ec 0c             	sub    esp,0xc
c000c7df:	ba 5c db 01 c0       	mov    edx,0xc001db5c
c000c7e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7e8:	89 10                	mov    DWORD PTR [eax],edx
c000c7ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ee:	83 ec 0c             	sub    esp,0xc
c000c7f1:	50                   	push   eax
c000c7f2:	e8 9f ef ff ff       	call   c000b796 <Device::~Device()>
c000c7f7:	83 c4 10             	add    esp,0x10
c000c7fa:	90                   	nop
c000c7fb:	83 c4 0c             	add    esp,0xc
c000c7fe:	c3                   	ret    
c000c7ff:	90                   	nop

c000c800 <Keyboard::~Keyboard()>:
c000c800:	83 ec 0c             	sub    esp,0xc
c000c803:	83 ec 0c             	sub    esp,0xc
c000c806:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c80a:	e8 cd ff ff ff       	call   c000c7dc <Keyboard::~Keyboard()>
c000c80f:	83 c4 10             	add    esp,0x10
c000c812:	83 ec 08             	sub    esp,0x8
c000c815:	68 5c 01 00 00       	push   0x15c
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 3b db ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	83 c4 0c             	add    esp,0xc
c000c829:	c3                   	ret    

c000c82a <LogicalDisk::close(int, int, void*)>:
c000c82a:	83 c8 ff             	or     eax,0xffffffff
c000c82d:	c3                   	ret    

c000c82e <LogicalDisk::~LogicalDisk()>:
c000c82e:	83 ec 0c             	sub    esp,0xc
c000c831:	ba d4 db 01 c0       	mov    edx,0xc001dbd4
c000c836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83a:	89 10                	mov    DWORD PTR [eax],edx
c000c83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c840:	83 ec 0c             	sub    esp,0xc
c000c843:	50                   	push   eax
c000c844:	e8 4d ef ff ff       	call   c000b796 <Device::~Device()>
c000c849:	83 c4 10             	add    esp,0x10
c000c84c:	90                   	nop
c000c84d:	83 c4 0c             	add    esp,0xc
c000c850:	c3                   	ret    
c000c851:	90                   	nop

c000c852 <LogicalDisk::~LogicalDisk()>:
c000c852:	83 ec 0c             	sub    esp,0xc
c000c855:	83 ec 0c             	sub    esp,0xc
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	e8 cd ff ff ff       	call   c000c82e <LogicalDisk::~LogicalDisk()>
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	83 ec 08             	sub    esp,0x8
c000c867:	68 74 01 00 00       	push   0x174
c000c86c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c870:	e8 e9 da ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000c875:	83 c4 10             	add    esp,0x10
c000c878:	83 c4 0c             	add    esp,0xc
c000c87b:	c3                   	ret    

c000c87c <LogicalDisk::open(int, int, void*)>:
c000c87c:	83 ec 18             	sub    esp,0x18
c000c87f:	68 88 db 01 c0       	push   0xc001db88
c000c884:	e8 2e 38 00 00       	call   c00100b7 <KePanic(char const*)>
c000c889:	83 c8 ff             	or     eax,0xffffffff
c000c88c:	83 c4 1c             	add    esp,0x1c
c000c88f:	c3                   	ret    

c000c890 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c890:	53                   	push   ebx
c000c891:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c899:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c89d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c8a3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c8a9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c8af:	77 10                	ja     c000c8c1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c8b1:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c8b7:	89 d3                	mov    ebx,edx
c000c8b9:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c8bf:	72 05                	jb     c000c8c6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c8c1:	83 c8 ff             	or     eax,0xffffffff
c000c8c4:	89 c2                	mov    edx,eax
c000c8c6:	5b                   	pop    ebx
c000c8c7:	c3                   	ret    

c000c8c8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c8c8:	56                   	push   esi
c000c8c9:	83 c8 ff             	or     eax,0xffffffff
c000c8cc:	53                   	push   ebx
c000c8cd:	89 c2                	mov    edx,eax
c000c8cf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c8d3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c8d7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c8db:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c8e1:	77 27                	ja     c000c90a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c8e3:	89 d8                	mov    eax,ebx
c000c8e5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c8eb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c8f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c8f6:	89 c2                	mov    edx,eax
c000c8f8:	73 10                	jae    c000c90a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c8fa:	89 c8                	mov    eax,ecx
c000c8fc:	89 da                	mov    edx,ebx
c000c8fe:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c904:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c90a:	5b                   	pop    ebx
c000c90b:	5e                   	pop    esi
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c90e:	83 ec 1c             	sub    esp,0x1c
c000c911:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c915:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c919:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c91d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c921:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c925:	89 04 24             	mov    DWORD PTR [esp],eax
c000c928:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c934:	83 ec 08             	sub    esp,0x8
c000c937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c93b:	50                   	push   eax
c000c93c:	e8 eb f0 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	ba d4 db 01 c0       	mov    edx,0xc001dbd4
c000c949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c94d:	89 10                	mov    DWORD PTR [eax],edx
c000c94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c953:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c95e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c969:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000c973:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c97b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c97f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000c985:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000c98b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c98f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c992:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c996:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000c99c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000c9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c9aa:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000c9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b4:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000c9be:	90                   	nop
c000c9bf:	83 c4 1c             	add    esp,0x1c
c000c9c2:	c3                   	ret    
c000c9c3:	90                   	nop

c000c9c4 <LogicalDisk::assignDriveLetter()>:
c000c9c4:	55                   	push   ebp
c000c9c5:	57                   	push   edi
c000c9c6:	56                   	push   esi
c000c9c7:	53                   	push   ebx
c000c9c8:	83 ec 14             	sub    esp,0x14
c000c9cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c9cf:	8b 3d 60 29 02 c0    	mov    edi,DWORD PTR ds:0xc0022960
c000c9d5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000c9db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c9df:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000c9e5:	8b 3d 64 29 02 c0    	mov    edi,DWORD PTR ds:0xc0022964
c000c9eb:	3c 01                	cmp    al,0x1
c000c9ed:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000c9f1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000c9f5:	19 c0                	sbb    eax,eax
c000c9f7:	83 e0 02             	and    eax,0x2
c000c9fa:	83 c0 41             	add    eax,0x41
c000c9fd:	0f be e8             	movsx  ebp,al
c000ca00:	3c 43                	cmp    al,0x43
c000ca02:	75 10                	jne    c000ca14 <LogicalDisk::assignDriveLetter()+0x50>
c000ca04:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ca0b:	75 5d                	jne    c000ca6a <LogicalDisk::assignDriveLetter()+0xa6>
c000ca0d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000ca12:	75 56                	jne    c000ca6a <LogicalDisk::assignDriveLetter()+0xa6>
c000ca14:	8d 75 bf             	lea    esi,[ebp-0x41]
c000ca17:	ba 01 00 00 00       	mov    edx,0x1
c000ca1c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ca20:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ca24:	d3 e2                	shl    edx,cl
c000ca26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca2a:	89 d7                	mov    edi,edx
c000ca2c:	89 d6                	mov    esi,edx
c000ca2e:	c1 ff 1f             	sar    edi,0x1f
c000ca31:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000ca35:	21 f9                	and    ecx,edi
c000ca37:	09 d1                	or     ecx,edx
c000ca39:	75 2f                	jne    c000ca6a <LogicalDisk::assignDriveLetter()+0xa6>
c000ca3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000ca3f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca43:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ca49:	09 f2                	or     edx,esi
c000ca4b:	89 15 60 29 02 c0    	mov    DWORD PTR ds:0xc0022960,edx
c000ca51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca55:	09 fa                	or     edx,edi
c000ca57:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ca5b:	89 15 64 29 02 c0    	mov    DWORD PTR ds:0xc0022964,edx
c000ca61:	89 1c bd 80 29 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd680],ebx
c000ca68:	eb 08                	jmp    c000ca72 <LogicalDisk::assignDriveLetter()+0xae>
c000ca6a:	45                   	inc    ebp
c000ca6b:	40                   	inc    eax
c000ca6c:	3c 5b                	cmp    al,0x5b
c000ca6e:	75 90                	jne    c000ca00 <LogicalDisk::assignDriveLetter()+0x3c>
c000ca70:	31 c0                	xor    eax,eax
c000ca72:	83 c4 14             	add    esp,0x14
c000ca75:	5b                   	pop    ebx
c000ca76:	5e                   	pop    esi
c000ca77:	5f                   	pop    edi
c000ca78:	5d                   	pop    ebp
c000ca79:	c3                   	ret    

c000ca7a <LogicalDisk::mount()>:
c000ca7a:	56                   	push   esi
c000ca7b:	53                   	push   ebx
c000ca7c:	53                   	push   ebx
c000ca7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca81:	8b 1d 14 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020514
c000ca87:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000ca91:	85 db                	test   ebx,ebx
c000ca93:	74 27                	je     c000cabc <LogicalDisk::mount()+0x42>
c000ca95:	51                   	push   ecx
c000ca96:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ca9d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ca9f:	83 e8 41             	sub    eax,0x41
c000caa2:	50                   	push   eax
c000caa3:	56                   	push   esi
c000caa4:	53                   	push   ebx
c000caa5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000caa8:	83 c4 10             	add    esp,0x10
c000caab:	84 c0                	test   al,al
c000caad:	74 08                	je     c000cab7 <LogicalDisk::mount()+0x3d>
c000caaf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cab5:	eb 07                	jmp    c000cabe <LogicalDisk::mount()+0x44>
c000cab7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000caba:	eb d5                	jmp    c000ca91 <LogicalDisk::mount()+0x17>
c000cabc:	31 c0                	xor    eax,eax
c000cabe:	5a                   	pop    edx
c000cabf:	5b                   	pop    ebx
c000cac0:	5e                   	pop    esi
c000cac1:	c3                   	ret    

c000cac2 <LogicalDisk::unmount()>:
c000cac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cac6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cad0:	c3                   	ret    
c000cad1:	90                   	nop

c000cad2 <LogicalDisk::eject()>:
c000cad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cad6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cadc:	8b 10                	mov    edx,DWORD PTR [eax]
c000cade:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cae2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cae5:	90                   	nop

c000cae6 <LogicalDisk::unassignDriveLetter()>:
c000cae6:	57                   	push   edi
c000cae7:	56                   	push   esi
c000cae8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caec:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000caf3:	84 c9                	test   cl,cl
c000caf5:	75 0f                	jne    c000cb06 <LogicalDisk::unassignDriveLetter()+0x20>
c000caf7:	c7 44 24 0c ac db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dbac
c000caff:	5e                   	pop    esi
c000cb00:	5f                   	pop    edi
c000cb01:	e9 b1 35 00 00       	jmp    c00100b7 <KePanic(char const*)>
c000cb06:	83 e9 41             	sub    ecx,0x41
c000cb09:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cb10:	b8 01 00 00 00       	mov    eax,0x1
c000cb15:	c7 04 8d 80 29 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd680],0x0
c000cb20:	d3 e0                	shl    eax,cl
c000cb22:	89 c7                	mov    edi,eax
c000cb24:	f7 d0                	not    eax
c000cb26:	c1 ff 1f             	sar    edi,0x1f
c000cb29:	21 05 60 29 02 c0    	and    DWORD PTR ds:0xc0022960,eax
c000cb2f:	89 fe                	mov    esi,edi
c000cb31:	f7 d6                	not    esi
c000cb33:	21 35 64 29 02 c0    	and    DWORD PTR ds:0xc0022964,esi
c000cb39:	5e                   	pop    esi
c000cb3a:	5f                   	pop    edi
c000cb3b:	c3                   	ret    

c000cb3c <LogicalDisk::read(unsigned long long, int, void*)>:
c000cb3c:	57                   	push   edi
c000cb3d:	56                   	push   esi
c000cb3e:	53                   	push   ebx
c000cb3f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb47:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cb4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cb4f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb55:	77 41                	ja     c000cb98 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cb57:	99                   	cdq    
c000cb58:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cb5e:	01 c8                	add    eax,ecx
c000cb60:	11 da                	adc    edx,ebx
c000cb62:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cb68:	19 d7                	sbb    edi,edx
c000cb6a:	72 33                	jb     c000cb9f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cb6c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cb72:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cb78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cb7c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cb80:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cb86:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cb8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb90:	5b                   	pop    ebx
c000cb91:	5e                   	pop    esi
c000cb92:	5f                   	pop    edi
c000cb93:	e9 4e 0a 00 00       	jmp    c000d5e6 <VCache::read(unsigned long long, int, void*)>
c000cb98:	b8 05 00 00 00       	mov    eax,0x5
c000cb9d:	eb 05                	jmp    c000cba4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cb9f:	b8 07 00 00 00       	mov    eax,0x7
c000cba4:	5b                   	pop    ebx
c000cba5:	5e                   	pop    esi
c000cba6:	5f                   	pop    edi
c000cba7:	c3                   	ret    

c000cba8 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cba8:	57                   	push   edi
c000cba9:	56                   	push   esi
c000cbaa:	53                   	push   ebx
c000cbab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbbb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbc1:	77 41                	ja     c000cc04 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cbc3:	99                   	cdq    
c000cbc4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cbca:	01 c8                	add    eax,ecx
c000cbcc:	11 da                	adc    edx,ebx
c000cbce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cbd4:	19 d7                	sbb    edi,edx
c000cbd6:	72 33                	jb     c000cc0b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cbd8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cbde:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cbe4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cbe8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cbec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cbf2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cbf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbfc:	5b                   	pop    ebx
c000cbfd:	5e                   	pop    esi
c000cbfe:	5f                   	pop    edi
c000cbff:	e9 cc 08 00 00       	jmp    c000d4d0 <VCache::write(unsigned long long, int, void*)>
c000cc04:	b8 05 00 00 00       	mov    eax,0x5
c000cc09:	eb 05                	jmp    c000cc10 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cc0b:	b8 07 00 00 00       	mov    eax,0x7
c000cc10:	5b                   	pop    ebx
c000cc11:	5e                   	pop    esi
c000cc12:	5f                   	pop    edi
c000cc13:	c3                   	ret    

c000cc14 <Mouse::Mouse(char const*)>:
c000cc14:	83 ec 0c             	sub    esp,0xc
c000cc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc1b:	83 ec 08             	sub    esp,0x8
c000cc1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc22:	50                   	push   eax
c000cc23:	e8 04 ee ff ff       	call   c000ba2c <Device::Device(char const*)>
c000cc28:	83 c4 10             	add    esp,0x10
c000cc2b:	ba 00 dc 01 c0       	mov    edx,0xc001dc00
c000cc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc34:	89 10                	mov    DWORD PTR [eax],edx
c000cc36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc3a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cc44:	90                   	nop
c000cc45:	83 c4 0c             	add    esp,0xc
c000cc48:	c3                   	ret    
c000cc49:	90                   	nop
c000cc4a:	66 90                	xchg   ax,ax

c000cc4c <Mouse::~Mouse()>:
c000cc4c:	83 ec 0c             	sub    esp,0xc
c000cc4f:	ba 00 dc 01 c0       	mov    edx,0xc001dc00
c000cc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc58:	89 10                	mov    DWORD PTR [eax],edx
c000cc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc5e:	83 ec 0c             	sub    esp,0xc
c000cc61:	50                   	push   eax
c000cc62:	e8 2f eb ff ff       	call   c000b796 <Device::~Device()>
c000cc67:	83 c4 10             	add    esp,0x10
c000cc6a:	90                   	nop
c000cc6b:	83 c4 0c             	add    esp,0xc
c000cc6e:	c3                   	ret    
c000cc6f:	90                   	nop

c000cc70 <Mouse::~Mouse()>:
c000cc70:	83 ec 0c             	sub    esp,0xc
c000cc73:	83 ec 0c             	sub    esp,0xc
c000cc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc7a:	e8 cd ff ff ff       	call   c000cc4c <Mouse::~Mouse()>
c000cc7f:	83 c4 10             	add    esp,0x10
c000cc82:	83 ec 08             	sub    esp,0x8
c000cc85:	68 58 01 00 00       	push   0x158
c000cc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc8e:	e8 cb d6 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000cc93:	83 c4 10             	add    esp,0x10
c000cc96:	83 c4 0c             	add    esp,0xc
c000cc99:	c3                   	ret    

c000cc9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cc9a:	55                   	push   ebp
c000cc9b:	57                   	push   edi
c000cc9c:	56                   	push   esi
c000cc9d:	53                   	push   ebx
c000cc9e:	81 ec 28 01 00 00    	sub    esp,0x128
c000cca4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ccab:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ccb2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ccb9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ccc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccc4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ccc8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cccf:	e8 54 ee ff ff       	call   c000bb28 <Device::getName()>
c000ccd4:	5a                   	pop    edx
c000ccd5:	59                   	pop    ecx
c000ccd6:	50                   	push   eax
c000ccd7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ccdb:	55                   	push   ebp
c000ccdc:	e8 1f 39 ff ff       	call   c0000600 <strcpy>
c000cce1:	5b                   	pop    ebx
c000cce2:	58                   	pop    eax
c000cce3:	68 24 dc 01 c0       	push   0xc001dc24
c000cce8:	55                   	push   ebp
c000cce9:	e8 d2 3a ff ff       	call   c00007c0 <strcat>
c000ccee:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ccf5:	e8 bf aa ff ff       	call   c00077b9 <malloc>
c000ccfa:	83 c4 0c             	add    esp,0xc
c000ccfd:	89 c3                	mov    ebx,eax
c000ccff:	57                   	push   edi
c000cd00:	56                   	push   esi
c000cd01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cd09:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cd10:	55                   	push   ebp
c000cd11:	50                   	push   eax
c000cd12:	e8 f7 fb ff ff       	call   c000c90e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cd17:	83 c4 14             	add    esp,0x14
c000cd1a:	53                   	push   ebx
c000cd1b:	e8 a4 fc ff ff       	call   c000c9c4 <LogicalDisk::assignDriveLetter()>
c000cd20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cd23:	e8 52 fd ff ff       	call   c000ca7a <LogicalDisk::mount()>
c000cd28:	58                   	pop    eax
c000cd29:	5a                   	pop    edx
c000cd2a:	53                   	push   ebx
c000cd2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd32:	e8 5d eb ff ff       	call   c000b894 <Device::addChild(Device*)>
c000cd37:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cd3d:	5b                   	pop    ebx
c000cd3e:	5e                   	pop    esi
c000cd3f:	5f                   	pop    edi
c000cd40:	5d                   	pop    ebp
c000cd41:	c3                   	ret    

c000cd42 <createPartitionsForDisk(PhysicalDisk*)>:
c000cd42:	55                   	push   ebp
c000cd43:	57                   	push   edi
c000cd44:	56                   	push   esi
c000cd45:	53                   	push   ebx
c000cd46:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cd4c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cd53:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cd59:	3d 00 02 00 00       	cmp    eax,0x200
c000cd5e:	74 27                	je     c000cd87 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cd60:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cd66:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cd6c:	83 ec 10             	sub    esp,0x10
c000cd6f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cd73:	99                   	cdq    
c000cd74:	c1 e6 0a             	shl    esi,0xa
c000cd77:	52                   	push   edx
c000cd78:	89 fd                	mov    ebp,edi
c000cd7a:	50                   	push   eax
c000cd7b:	55                   	push   ebp
c000cd7c:	56                   	push   esi
c000cd7d:	e8 3e ee 00 00       	call   c001bbc0 <__udivdi3>
c000cd82:	e9 b1 00 00 00       	jmp    c000ce38 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cd87:	83 ec 0c             	sub    esp,0xc
c000cd8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cd8c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cd90:	56                   	push   esi
c000cd91:	6a 01                	push   0x1
c000cd93:	6a 00                	push   0x0
c000cd95:	6a 00                	push   0x0
c000cd97:	53                   	push   ebx
c000cd98:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cd9b:	83 c4 20             	add    esp,0x20
c000cd9e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cda6:	75 0a                	jne    c000cdb2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cda8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cdb0:	74 2c                	je     c000cdde <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cdb2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cdb8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cdbe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cdc4:	83 ec 10             	sub    esp,0x10
c000cdc7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cdcb:	89 f7                	mov    edi,esi
c000cdcd:	c1 e0 0a             	shl    eax,0xa
c000cdd0:	c1 ff 1f             	sar    edi,0x1f
c000cdd3:	57                   	push   edi
c000cdd4:	56                   	push   esi
c000cdd5:	52                   	push   edx
c000cdd6:	50                   	push   eax
c000cdd7:	e8 e4 ed 00 00       	call   c001bbc0 <__udivdi3>
c000cddc:	eb 5a                	jmp    c000ce38 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cdde:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cde5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cdec:	83 e1 7f             	and    ecx,0x7f
c000cdef:	83 e0 7f             	and    eax,0x7f
c000cdf2:	01 c1                	add    ecx,eax
c000cdf4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cdfb:	83 e0 7f             	and    eax,0x7f
c000cdfe:	01 c1                	add    ecx,eax
c000ce00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ce07:	83 e0 7f             	and    eax,0x7f
c000ce0a:	00 c1                	add    cl,al
c000ce0c:	74 41                	je     c000ce4f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ce0e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce14:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce20:	83 ec 10             	sub    esp,0x10
c000ce23:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce27:	89 f7                	mov    edi,esi
c000ce29:	c1 e0 0a             	shl    eax,0xa
c000ce2c:	c1 ff 1f             	sar    edi,0x1f
c000ce2f:	57                   	push   edi
c000ce30:	56                   	push   esi
c000ce31:	52                   	push   edx
c000ce32:	50                   	push   eax
c000ce33:	e8 88 ed 00 00       	call   c001bbc0 <__udivdi3>
c000ce38:	83 c4 14             	add    esp,0x14
c000ce3b:	52                   	push   edx
c000ce3c:	50                   	push   eax
c000ce3d:	6a 00                	push   0x0
c000ce3f:	6a 00                	push   0x0
c000ce41:	53                   	push   ebx
c000ce42:	e8 53 fe ff ff       	call   c000cc9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce47:	83 c4 20             	add    esp,0x20
c000ce4a:	e9 79 01 00 00       	jmp    c000cfc8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000ce4f:	89 f0                	mov    eax,esi
c000ce51:	31 f6                	xor    esi,esi
c000ce53:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ce5a:	75 02                	jne    c000ce5e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000ce5c:	89 f1                	mov    ecx,esi
c000ce5e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ce65:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000ce6c:	c1 e2 08             	shl    edx,0x8
c000ce6f:	c1 e7 10             	shl    edi,0x10
c000ce72:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000ce7a:	09 fa                	or     edx,edi
c000ce7c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000ce84:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000ce8b:	83 c0 10             	add    eax,0x10
c000ce8e:	09 fa                	or     edx,edi
c000ce90:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000ce97:	c1 e7 18             	shl    edi,0x18
c000ce9a:	09 fa                	or     edx,edi
c000ce9c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cea3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cea7:	c1 e7 10             	shl    edi,0x10
c000ceaa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ceb1:	c1 e2 08             	shl    edx,0x8
c000ceb4:	09 fa                	or     edx,edi
c000ceb6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cebd:	09 fa                	or     edx,edi
c000cebf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cec6:	c1 e7 18             	shl    edi,0x18
c000cec9:	09 fa                	or     edx,edi
c000cecb:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cecf:	46                   	inc    esi
c000ced0:	83 fe 04             	cmp    esi,0x4
c000ced3:	0f 85 7a ff ff ff    	jne    c000ce53 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000ced9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cedd:	83 f0 01             	xor    eax,0x1
c000cee0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cee4:	75 57                	jne    c000cf3d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ceea:	83 f0 01             	xor    eax,0x1
c000ceed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cef1:	75 4a                	jne    c000cf3d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cef3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cef7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000ceff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cf07:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf0d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf13:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf19:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf1d:	89 f7                	mov    edi,esi
c000cf1f:	c1 e0 0a             	shl    eax,0xa
c000cf22:	c1 ff 1f             	sar    edi,0x1f
c000cf25:	57                   	push   edi
c000cf26:	56                   	push   esi
c000cf27:	52                   	push   edx
c000cf28:	50                   	push   eax
c000cf29:	e8 92 ec 00 00       	call   c001bbc0 <__udivdi3>
c000cf2e:	83 c4 10             	add    esp,0x10
c000cf31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf39:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cf3d:	84 c9                	test   cl,cl
c000cf3f:	74 53                	je     c000cf94 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cf41:	0f b6 c9             	movzx  ecx,cl
c000cf44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf4c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cf50:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cf54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf5c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000cf60:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000cf64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf74:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000cf78:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000cf7c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000cf80:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000cf84:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf88:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf8c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000cf90:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000cf94:	31 ed                	xor    ebp,ebp
c000cf96:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000cf9a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000cf9e:	89 f8                	mov    eax,edi
c000cfa0:	09 f0                	or     eax,esi
c000cfa2:	74 1e                	je     c000cfc2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cfa4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000cfa8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000cfac:	89 d1                	mov    ecx,edx
c000cfae:	09 c1                	or     ecx,eax
c000cfb0:	74 10                	je     c000cfc2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000cfb2:	83 ec 0c             	sub    esp,0xc
c000cfb5:	57                   	push   edi
c000cfb6:	56                   	push   esi
c000cfb7:	52                   	push   edx
c000cfb8:	50                   	push   eax
c000cfb9:	53                   	push   ebx
c000cfba:	e8 db fc ff ff       	call   c000cc9a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfbf:	83 c4 20             	add    esp,0x20
c000cfc2:	45                   	inc    ebp
c000cfc3:	83 fd 04             	cmp    ebp,0x4
c000cfc6:	75 ce                	jne    c000cf96 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000cfc8:	81 c4 5c 02 00 00    	add    esp,0x25c
c000cfce:	5b                   	pop    ebx
c000cfcf:	5e                   	pop    esi
c000cfd0:	5f                   	pop    edi
c000cfd1:	5d                   	pop    ebp
c000cfd2:	c3                   	ret    
c000cfd3:	90                   	nop

c000cfd4 <Serial::Serial(char const*)>:
c000cfd4:	83 ec 0c             	sub    esp,0xc
c000cfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdb:	83 ec 08             	sub    esp,0x8
c000cfde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfe2:	50                   	push   eax
c000cfe3:	e8 44 ea ff ff       	call   c000ba2c <Device::Device(char const*)>
c000cfe8:	83 c4 10             	add    esp,0x10
c000cfeb:	ba 38 dc 01 c0       	mov    edx,0xc001dc38
c000cff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff4:	89 10                	mov    DWORD PTR [eax],edx
c000cff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cffa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d004:	90                   	nop
c000d005:	83 c4 0c             	add    esp,0xc
c000d008:	c3                   	ret    
c000d009:	90                   	nop
c000d00a:	66 90                	xchg   ax,ax

c000d00c <Serial::~Serial()>:
c000d00c:	83 ec 0c             	sub    esp,0xc
c000d00f:	ba 38 dc 01 c0       	mov    edx,0xc001dc38
c000d014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d018:	89 10                	mov    DWORD PTR [eax],edx
c000d01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01e:	83 ec 0c             	sub    esp,0xc
c000d021:	50                   	push   eax
c000d022:	e8 6f e7 ff ff       	call   c000b796 <Device::~Device()>
c000d027:	83 c4 10             	add    esp,0x10
c000d02a:	90                   	nop
c000d02b:	83 c4 0c             	add    esp,0xc
c000d02e:	c3                   	ret    
c000d02f:	90                   	nop

c000d030 <Serial::~Serial()>:
c000d030:	83 ec 0c             	sub    esp,0xc
c000d033:	83 ec 0c             	sub    esp,0xc
c000d036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d03a:	e8 cd ff ff ff       	call   c000d00c <Serial::~Serial()>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	83 ec 08             	sub    esp,0x8
c000d045:	68 58 01 00 00       	push   0x158
c000d04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d04e:	e8 0b d3 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d053:	83 c4 10             	add    esp,0x10
c000d056:	83 c4 0c             	add    esp,0xc
c000d059:	c3                   	ret    
c000d05a:	66 90                	xchg   ax,ax

c000d05c <Timer::Timer(char const*)>:
c000d05c:	83 ec 0c             	sub    esp,0xc
c000d05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d063:	83 ec 08             	sub    esp,0x8
c000d066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d06a:	50                   	push   eax
c000d06b:	e8 bc e9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d070:	83 c4 10             	add    esp,0x10
c000d073:	ba 7c dc 01 c0       	mov    edx,0xc001dc7c
c000d078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07c:	89 10                	mov    DWORD PTR [eax],edx
c000d07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d082:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d08c:	90                   	nop
c000d08d:	83 c4 0c             	add    esp,0xc
c000d090:	c3                   	ret    
c000d091:	90                   	nop
c000d092:	66 90                	xchg   ax,ax

c000d094 <Timer::~Timer()>:
c000d094:	83 ec 0c             	sub    esp,0xc
c000d097:	ba 7c dc 01 c0       	mov    edx,0xc001dc7c
c000d09c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a0:	89 10                	mov    DWORD PTR [eax],edx
c000d0a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a6:	83 ec 0c             	sub    esp,0xc
c000d0a9:	50                   	push   eax
c000d0aa:	e8 e7 e6 ff ff       	call   c000b796 <Device::~Device()>
c000d0af:	83 c4 10             	add    esp,0x10
c000d0b2:	90                   	nop
c000d0b3:	83 c4 0c             	add    esp,0xc
c000d0b6:	c3                   	ret    
c000d0b7:	90                   	nop

c000d0b8 <Timer::~Timer()>:
c000d0b8:	83 ec 0c             	sub    esp,0xc
c000d0bb:	83 ec 0c             	sub    esp,0xc
c000d0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0c2:	e8 cd ff ff ff       	call   c000d094 <Timer::~Timer()>
c000d0c7:	83 c4 10             	add    esp,0x10
c000d0ca:	83 ec 08             	sub    esp,0x8
c000d0cd:	68 5c 01 00 00       	push   0x15c
c000d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d6:	e8 83 d2 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d0db:	83 c4 10             	add    esp,0x10
c000d0de:	83 c4 0c             	add    esp,0xc
c000d0e1:	c3                   	ret    

c000d0e2 <Timer::read()>:
c000d0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0e6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d0ec:	c3                   	ret    

c000d0ed <setupTimer(int)>:
c000d0ed:	53                   	push   ebx
c000d0ee:	83 ec 14             	sub    esp,0x14
c000d0f1:	68 5c 01 00 00       	push   0x15c
c000d0f6:	e8 be a6 ff ff       	call   c00077b9 <malloc>
c000d0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0fe:	89 c3                	mov    ebx,eax
c000d100:	e8 37 e4 00 00       	call   c001b53c <PIT::PIT()>
c000d105:	58                   	pop    eax
c000d106:	5a                   	pop    edx
c000d107:	53                   	push   ebx
c000d108:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c000d10e:	e8 81 e7 ff ff       	call   c000b894 <Device::addChild(Device*)>
c000d113:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d115:	6a 00                	push   0x0
c000d117:	6a 00                	push   0x0
c000d119:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d11d:	53                   	push   ebx
c000d11e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d121:	89 d8                	mov    eax,ebx
c000d123:	83 c4 28             	add    esp,0x28
c000d126:	5b                   	pop    ebx
c000d127:	c3                   	ret    

c000d128 <timerHandler(unsigned int)>:
c000d128:	56                   	push   esi
c000d129:	53                   	push   ebx
c000d12a:	51                   	push   ecx
c000d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12f:	01 05 ec 29 02 c0    	add    DWORD PTR ds:0xc00229ec,eax
c000d135:	80 3d 1d 04 02 c0 00 	cmp    BYTE PTR ds:0xc002041d,0x0
c000d13c:	0f 84 4a 01 00 00    	je     c000d28c <timerHandler(unsigned int)+0x164>
c000d142:	fa                   	cli    
c000d143:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c000d149:	83 ec 0c             	sub    esp,0xc
c000d14c:	ff 05 c4 36 02 c0    	inc    DWORD PTR ds:0xc00236c4
c000d152:	68 d8 36 02 c0       	push   0xc00236d8
c000d157:	e8 34 f0 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	84 c0                	test   al,al
c000d161:	0f 85 a1 00 00 00    	jne    c000d208 <timerHandler(unsigned int)+0xe0>
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	68 d8 36 02 c0       	push   0xc00236d8
c000d16f:	e8 38 f0 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	89 c6                	mov    esi,eax
c000d179:	8d 76 00             	lea    esi,[esi+0x0]
c000d17c:	83 ec 0c             	sub    esp,0xc
c000d17f:	68 d8 36 02 c0       	push   0xc00236d8
c000d184:	e8 23 f0 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d189:	c7 04 24 d8 36 02 c0 	mov    DWORD PTR [esp],0xc00236d8
c000d190:	89 c3                	mov    ebx,eax
c000d192:	e8 1d f0 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d197:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d19a:	83 c4 10             	add    esp,0x10
c000d19d:	3b 05 ec 29 02 c0    	cmp    eax,DWORD PTR ds:0xc00229ec
c000d1a3:	77 23                	ja     c000d1c8 <timerHandler(unsigned int)+0xa0>
c000d1a5:	83 ec 0c             	sub    esp,0xc
c000d1a8:	53                   	push   ebx
c000d1a9:	e8 de 65 00 00       	call   c001378c <unblockTask(ThreadControlBlock*)>
c000d1ae:	83 c4 10             	add    esp,0x10
c000d1b1:	39 de                	cmp    esi,ebx
c000d1b3:	75 27                	jne    c000d1dc <timerHandler(unsigned int)+0xb4>
c000d1b5:	83 ec 0c             	sub    esp,0xc
c000d1b8:	68 d8 36 02 c0       	push   0xc00236d8
c000d1bd:	e8 ea ef 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1c2:	89 c6                	mov    esi,eax
c000d1c4:	eb 12                	jmp    c000d1d8 <timerHandler(unsigned int)+0xb0>
c000d1c6:	66 90                	xchg   ax,ax
c000d1c8:	52                   	push   edx
c000d1c9:	52                   	push   edx
c000d1ca:	53                   	push   ebx
c000d1cb:	68 d8 36 02 c0       	push   0xc00236d8
c000d1d0:	e8 97 f0 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d1d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d1d8:	83 c4 10             	add    esp,0x10
c000d1db:	90                   	nop
c000d1dc:	83 ec 0c             	sub    esp,0xc
c000d1df:	68 d8 36 02 c0       	push   0xc00236d8
c000d1e4:	e8 a7 ef 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d1e9:	83 c4 10             	add    esp,0x10
c000d1ec:	84 c0                	test   al,al
c000d1ee:	75 18                	jne    c000d208 <timerHandler(unsigned int)+0xe0>
c000d1f0:	83 ec 0c             	sub    esp,0xc
c000d1f3:	68 d8 36 02 c0       	push   0xc00236d8
c000d1f8:	e8 af ef 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d1fd:	83 c4 10             	add    esp,0x10
c000d200:	39 f0                	cmp    eax,esi
c000d202:	0f 85 74 ff ff ff    	jne    c000d17c <timerHandler(unsigned int)+0x54>
c000d208:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d20d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d211:	74 41                	je     c000d254 <timerHandler(unsigned int)+0x12c>
c000d213:	80 3d 1c 04 02 c0 00 	cmp    BYTE PTR ds:0xc002041c,0x0
c000d21a:	74 38                	je     c000d254 <timerHandler(unsigned int)+0x12c>
c000d21c:	fa                   	cli    
c000d21d:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c000d223:	a1 ec 29 02 c0       	mov    eax,ds:0xc00229ec
c000d228:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d22e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d231:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d237:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d23a:	72 08                	jb     c000d244 <timerHandler(unsigned int)+0x11c>
c000d23c:	e8 87 60 00 00       	call   c00132c8 <schedule()>
c000d241:	8d 76 00             	lea    esi,[esi+0x0]
c000d244:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000d249:	48                   	dec    eax
c000d24a:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000d24f:	75 03                	jne    c000d254 <timerHandler(unsigned int)+0x12c>
c000d251:	fb                   	sti    
c000d252:	66 90                	xchg   ax,ax
c000d254:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c000d259:	48                   	dec    eax
c000d25a:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c000d25f:	75 1b                	jne    c000d27c <timerHandler(unsigned int)+0x154>
c000d261:	83 3d c0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236c0,0x0
c000d268:	74 12                	je     c000d27c <timerHandler(unsigned int)+0x154>
c000d26a:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c000d274:	e8 4f 60 00 00       	call   c00132c8 <schedule()>
c000d279:	8d 76 00             	lea    esi,[esi+0x0]
c000d27c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c000d281:	48                   	dec    eax
c000d282:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c000d287:	75 03                	jne    c000d28c <timerHandler(unsigned int)+0x164>
c000d289:	fb                   	sti    
c000d28a:	66 90                	xchg   ax,ax
c000d28c:	58                   	pop    eax
c000d28d:	5b                   	pop    ebx
c000d28e:	5e                   	pop    esi
c000d28f:	c3                   	ret    

c000d290 <VCache::VCache(PhysicalDisk*)>:
c000d290:	53                   	push   ebx
c000d291:	83 ec 18             	sub    esp,0x18
c000d294:	ba ac dc 01 c0       	mov    edx,0xc001dcac
c000d299:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d29d:	89 10                	mov    DWORD PTR [eax],edx
c000d29f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2a3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2ae:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2b9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d2c0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d2c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d2d2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d2d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2dd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d2e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d2ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d2f0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d2f7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d2fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d302:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d30a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d312:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d31a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d321:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d329:	83 ec 0c             	sub    esp,0xc
c000d32c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d330:	e8 84 a4 ff ff       	call   c00077b9 <malloc>
c000d335:	83 c4 10             	add    esp,0x10
c000d338:	89 c3                	mov    ebx,eax
c000d33a:	83 ec 0c             	sub    esp,0xc
c000d33d:	53                   	push   ebx
c000d33e:	e8 51 5d 00 00       	call   c0013094 <Mutex::Mutex()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d34d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d351:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d355:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d363:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d367:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d36d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d371:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d374:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d378:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d37e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d384:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d388:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d38b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d392:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d396:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d39a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3a0:	05 00 01 00 00       	add    eax,0x100
c000d3a5:	c1 e0 04             	shl    eax,0x4
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	50                   	push   eax
c000d3ac:	e8 08 a4 ff ff       	call   c00077b9 <malloc>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	89 c2                	mov    edx,eax
c000d3b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d3bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3cc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d3d4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d3da:	c1 e0 06             	shl    eax,0x6
c000d3dd:	83 ec 0c             	sub    esp,0xc
c000d3e0:	50                   	push   eax
c000d3e1:	e8 d3 a3 ff ff       	call   c00077b9 <malloc>
c000d3e6:	83 c4 10             	add    esp,0x10
c000d3e9:	89 c2                	mov    edx,eax
c000d3eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ef:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d3f2:	90                   	nop
c000d3f3:	83 c4 18             	add    esp,0x18
c000d3f6:	5b                   	pop    ebx
c000d3f7:	c3                   	ret    

c000d3f8 <VCache::invalidateReadBuffer()>:
c000d3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3fc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d402:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d406:	c3                   	ret    
c000d407:	90                   	nop

c000d408 <VCache::writeWriteBuffer()>:
c000d408:	53                   	push   ebx
c000d409:	83 ec 08             	sub    esp,0x8
c000d40c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d410:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d414:	74 1e                	je     c000d434 <VCache::writeWriteBuffer()+0x2c>
c000d416:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d419:	83 ec 0c             	sub    esp,0xc
c000d41c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d41e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d421:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d424:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d427:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d42a:	50                   	push   eax
c000d42b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d42e:	83 c4 20             	add    esp,0x20
c000d431:	8d 76 00             	lea    esi,[esi+0x0]
c000d434:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d43b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d442:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d446:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d44d:	83 c4 08             	add    esp,0x8
c000d450:	5b                   	pop    ebx
c000d451:	c3                   	ret    
c000d452:	66 90                	xchg   ax,ax

c000d454 <VCache::~VCache()>:
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	ba ac dc 01 c0       	mov    edx,0xc001dcac
c000d45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d460:	89 10                	mov    DWORD PTR [eax],edx
c000d462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d466:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d469:	84 c0                	test   al,al
c000d46b:	74 0f                	je     c000d47c <VCache::~VCache()+0x28>
c000d46d:	83 ec 0c             	sub    esp,0xc
c000d470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d474:	e8 8f ff ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c000d479:	83 c4 10             	add    esp,0x10
c000d47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d480:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d483:	83 ec 0c             	sub    esp,0xc
c000d486:	50                   	push   eax
c000d487:	e8 3d a3 ff ff       	call   c00077c9 <free>
c000d48c:	83 c4 10             	add    esp,0x10
c000d48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d493:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d496:	83 ec 0c             	sub    esp,0xc
c000d499:	50                   	push   eax
c000d49a:	e8 2a a3 ff ff       	call   c00077c9 <free>
c000d49f:	83 c4 10             	add    esp,0x10
c000d4a2:	90                   	nop
c000d4a3:	83 c4 0c             	add    esp,0xc
c000d4a6:	c3                   	ret    
c000d4a7:	90                   	nop

c000d4a8 <VCache::~VCache()>:
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	83 ec 0c             	sub    esp,0xc
c000d4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4b2:	e8 9d ff ff ff       	call   c000d454 <VCache::~VCache()>
c000d4b7:	83 c4 10             	add    esp,0x10
c000d4ba:	83 ec 08             	sub    esp,0x8
c000d4bd:	6a 44                	push   0x44
c000d4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c3:	e8 96 ce ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d4c8:	83 c4 10             	add    esp,0x10
c000d4cb:	83 c4 0c             	add    esp,0xc
c000d4ce:	c3                   	ret    
c000d4cf:	90                   	nop

c000d4d0 <VCache::write(unsigned long long, int, void*)>:
c000d4d0:	55                   	push   ebp
c000d4d1:	57                   	push   edi
c000d4d2:	56                   	push   esi
c000d4d3:	53                   	push   ebx
c000d4d4:	83 ec 1c             	sub    esp,0x1c
c000d4d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d4db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d4df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4e3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d4e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d4eb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d4ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d4f3:	31 c0                	xor    eax,eax
c000d4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f8:	39 e8                	cmp    eax,ebp
c000d4fa:	7d 18                	jge    c000d514 <VCache::write(unsigned long long, int, void*)+0x44>
c000d4fc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d4ff:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d505:	0f af c8             	imul   ecx,eax
c000d508:	89 ca                	mov    edx,ecx
c000d50a:	01 f2                	add    edx,esi
c000d50c:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d50e:	40                   	inc    eax
c000d50f:	eb e7                	jmp    c000d4f8 <VCache::write(unsigned long long, int, void*)+0x28>
c000d511:	8d 76 00             	lea    esi,[esi+0x0]
c000d514:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d518:	74 0a                	je     c000d524 <VCache::write(unsigned long long, int, void*)+0x54>
c000d51a:	53                   	push   ebx
c000d51b:	e8 d8 fe ff ff       	call   c000d3f8 <VCache::invalidateReadBuffer()>
c000d520:	58                   	pop    eax
c000d521:	8d 76 00             	lea    esi,[esi+0x0]
c000d524:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d528:	74 5a                	je     c000d584 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d52a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d52d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d531:	89 f8                	mov    eax,edi
c000d533:	99                   	cdq    
c000d534:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d537:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d53a:	31 c1                	xor    ecx,eax
c000d53c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d540:	31 d0                	xor    eax,edx
c000d542:	09 c1                	or     ecx,eax
c000d544:	75 32                	jne    c000d578 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d546:	83 fd 01             	cmp    ebp,0x1
c000d549:	75 2d                	jne    c000d578 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d54b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d54e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d554:	0f af f9             	imul   edi,ecx
c000d557:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d55a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d55c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d55f:	40                   	inc    eax
c000d560:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d563:	83 f8 40             	cmp    eax,0x40
c000d566:	75 74                	jne    c000d5dc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d568:	83 ec 0c             	sub    esp,0xc
c000d56b:	53                   	push   ebx
c000d56c:	e8 97 fe ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c000d571:	83 c4 10             	add    esp,0x10
c000d574:	eb 66                	jmp    c000d5dc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d576:	66 90                	xchg   ax,ax
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	53                   	push   ebx
c000d57c:	e8 87 fe ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d587:	83 fd 3f             	cmp    ebp,0x3f
c000d58a:	7f 24                	jg     c000d5b0 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d58c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d590:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d593:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d596:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d59a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d59e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d5a1:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d5a4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d5ac:	eb 2e                	jmp    c000d5dc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d5ae:	66 90                	xchg   ax,ax
c000d5b0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d5b6:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d5ba:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d5be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5c2:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d5c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5ca:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d5ce:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d5d1:	83 c4 1c             	add    esp,0x1c
c000d5d4:	5b                   	pop    ebx
c000d5d5:	5e                   	pop    esi
c000d5d6:	5f                   	pop    edi
c000d5d7:	5d                   	pop    ebp
c000d5d8:	ff e0                	jmp    eax
c000d5da:	66 90                	xchg   ax,ax
c000d5dc:	83 c4 1c             	add    esp,0x1c
c000d5df:	31 c0                	xor    eax,eax
c000d5e1:	5b                   	pop    ebx
c000d5e2:	5e                   	pop    esi
c000d5e3:	5f                   	pop    edi
c000d5e4:	5d                   	pop    ebp
c000d5e5:	c3                   	ret    

c000d5e6 <VCache::read(unsigned long long, int, void*)>:
c000d5e6:	55                   	push   ebp
c000d5e7:	57                   	push   edi
c000d5e8:	56                   	push   esi
c000d5e9:	53                   	push   ebx
c000d5ea:	83 ec 1c             	sub    esp,0x1c
c000d5ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d5f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5f9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d5fd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d605:	31 c0                	xor    eax,eax
c000d607:	90                   	nop
c000d608:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d60c:	7d 16                	jge    c000d624 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d60e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d611:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d617:	0f af c8             	imul   ecx,eax
c000d61a:	89 ca                	mov    edx,ecx
c000d61c:	01 f2                	add    edx,esi
c000d61e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d620:	40                   	inc    eax
c000d621:	eb e5                	jmp    c000d608 <VCache::read(unsigned long long, int, void*)+0x22>
c000d623:	90                   	nop
c000d624:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d628:	74 0e                	je     c000d638 <VCache::read(unsigned long long, int, void*)+0x52>
c000d62a:	83 ec 0c             	sub    esp,0xc
c000d62d:	53                   	push   ebx
c000d62e:	e8 d5 fd ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c000d633:	83 c4 10             	add    esp,0x10
c000d636:	66 90                	xchg   ax,ax
c000d638:	83 ec 0c             	sub    esp,0xc
c000d63b:	53                   	push   ebx
c000d63c:	e8 b7 fd ff ff       	call   c000d3f8 <VCache::invalidateReadBuffer()>
c000d641:	83 c4 0c             	add    esp,0xc
c000d644:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d647:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d64d:	6a 00                	push   0x0
c000d64f:	56                   	push   esi
c000d650:	e8 7b 2e ff ff       	call   c00004d0 <memset>
c000d655:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d658:	8b 10                	mov    edx,DWORD PTR [eax]
c000d65a:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d65e:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d662:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d666:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d66a:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d66e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d672:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d675:	83 c4 2c             	add    esp,0x2c
c000d678:	5b                   	pop    ebx
c000d679:	5e                   	pop    esi
c000d67a:	5f                   	pop    edi
c000d67b:	5d                   	pop    ebp
c000d67c:	ff e0                	jmp    eax

c000d67e <Video::putrect(int, int, int, int, unsigned int)>:
c000d67e:	55                   	push   ebp
c000d67f:	57                   	push   edi
c000d680:	56                   	push   esi
c000d681:	53                   	push   ebx
c000d682:	83 ec 1c             	sub    esp,0x1c
c000d685:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d689:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d68d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d691:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d695:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d69d:	01 df                	add    edi,ebx
c000d69f:	39 fb                	cmp    ebx,edi
c000d6a1:	7d 1f                	jge    c000d6c2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d6a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d6a7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d6ab:	7d 12                	jge    c000d6bf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d6ad:	8b 16                	mov    edx,DWORD PTR [esi]
c000d6af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d6b3:	53                   	push   ebx
c000d6b4:	55                   	push   ebp
c000d6b5:	45                   	inc    ebp
c000d6b6:	56                   	push   esi
c000d6b7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	eb e8                	jmp    c000d6a7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d6bf:	43                   	inc    ebx
c000d6c0:	eb dd                	jmp    c000d69f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d6c2:	83 c4 1c             	add    esp,0x1c
c000d6c5:	5b                   	pop    ebx
c000d6c6:	5e                   	pop    esi
c000d6c7:	5f                   	pop    edi
c000d6c8:	5d                   	pop    ebp
c000d6c9:	c3                   	ret    

c000d6ca <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d6ca:	55                   	push   ebp
c000d6cb:	57                   	push   edi
c000d6cc:	31 ff                	xor    edi,edi
c000d6ce:	56                   	push   esi
c000d6cf:	53                   	push   ebx
c000d6d0:	83 ec 1c             	sub    esp,0x1c
c000d6d3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d6d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6db:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d6e2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d6e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6eb:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d6ef:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d6f3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d6f6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d6fa:	01 f9                	add    ecx,edi
c000d6fc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d700:	7d 2f                	jge    c000d731 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d702:	31 f6                	xor    esi,esi
c000d704:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d708:	01 f2                	add    edx,esi
c000d70a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d70e:	7d 1a                	jge    c000d72a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d710:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d713:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d716:	46                   	inc    esi
c000d717:	51                   	push   ecx
c000d718:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d71c:	52                   	push   edx
c000d71d:	55                   	push   ebp
c000d71e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d721:	83 c4 10             	add    esp,0x10
c000d724:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d728:	eb da                	jmp    c000d704 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d72a:	47                   	inc    edi
c000d72b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d72f:	eb c5                	jmp    c000d6f6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d731:	83 c4 1c             	add    esp,0x1c
c000d734:	5b                   	pop    ebx
c000d735:	5e                   	pop    esi
c000d736:	5f                   	pop    edi
c000d737:	5d                   	pop    ebp
c000d738:	c3                   	ret    
c000d739:	90                   	nop

c000d73a <Video::blit(unsigned int*, int, int, int, int)>:
c000d73a:	55                   	push   ebp
c000d73b:	57                   	push   edi
c000d73c:	56                   	push   esi
c000d73d:	53                   	push   ebx
c000d73e:	83 ec 1c             	sub    esp,0x1c
c000d741:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d745:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d749:	85 c0                	test   eax,eax
c000d74b:	79 02                	jns    c000d74f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d74d:	31 c0                	xor    eax,eax
c000d74f:	c1 e0 02             	shl    eax,0x2
c000d752:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d75a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d75e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d762:	39 d8                	cmp    eax,ebx
c000d764:	7e 49                	jle    c000d7af <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d766:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d76c:	7c 41                	jl     c000d7af <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d76e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d772:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d776:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d77a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d77e:	39 f9                	cmp    ecx,edi
c000d780:	7e 22                	jle    c000d7a4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d782:	83 c5 04             	add    ebp,0x4
c000d785:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d78b:	7c 14                	jl     c000d7a1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d78d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d78f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d792:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d796:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d79a:	56                   	push   esi
c000d79b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d79e:	83 c4 10             	add    esp,0x10
c000d7a1:	47                   	inc    edi
c000d7a2:	eb d2                	jmp    c000d776 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d7a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7a8:	43                   	inc    ebx
c000d7a9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d7ad:	eb ab                	jmp    c000d75a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d7af:	83 c4 1c             	add    esp,0x1c
c000d7b2:	5b                   	pop    ebx
c000d7b3:	5e                   	pop    esi
c000d7b4:	5f                   	pop    edi
c000d7b5:	5d                   	pop    ebp
c000d7b6:	c3                   	ret    
c000d7b7:	90                   	nop

c000d7b8 <Video::clearScreen(unsigned int)>:
c000d7b8:	57                   	push   edi
c000d7b9:	56                   	push   esi
c000d7ba:	53                   	push   ebx
c000d7bb:	31 db                	xor    ebx,ebx
c000d7bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7c1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d7c7:	7e 1f                	jle    c000d7e8 <Video::clearScreen(unsigned int)+0x30>
c000d7c9:	31 ff                	xor    edi,edi
c000d7cb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d7d1:	7e 12                	jle    c000d7e5 <Video::clearScreen(unsigned int)+0x2d>
c000d7d3:	8b 06                	mov    eax,DWORD PTR [esi]
c000d7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d9:	53                   	push   ebx
c000d7da:	57                   	push   edi
c000d7db:	47                   	inc    edi
c000d7dc:	56                   	push   esi
c000d7dd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	eb e6                	jmp    c000d7cb <Video::clearScreen(unsigned int)+0x13>
c000d7e5:	43                   	inc    ebx
c000d7e6:	eb d9                	jmp    c000d7c1 <Video::clearScreen(unsigned int)+0x9>
c000d7e8:	5b                   	pop    ebx
c000d7e9:	5e                   	pop    esi
c000d7ea:	5f                   	pop    edi
c000d7eb:	c3                   	ret    

c000d7ec <Video::putpixel(int, int, unsigned int)>:
c000d7ec:	c7 44 24 04 b4 dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dcb4
c000d7f4:	e9 be 28 00 00       	jmp    c00100b7 <KePanic(char const*)>
c000d7f9:	90                   	nop

c000d7fa <Video::Video(char const*)>:
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d801:	83 ec 08             	sub    esp,0x8
c000d804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d808:	50                   	push   eax
c000d809:	e8 1e e2 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000d80e:	83 c4 10             	add    esp,0x10
c000d811:	ba 24 dd 01 c0       	mov    edx,0xc001dd24
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	89 10                	mov    DWORD PTR [eax],edx
c000d81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d820:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d82a:	90                   	nop
c000d82b:	83 c4 0c             	add    esp,0xc
c000d82e:	c3                   	ret    
c000d82f:	90                   	nop

c000d830 <Video::~Video()>:
c000d830:	83 ec 0c             	sub    esp,0xc
c000d833:	ba 24 dd 01 c0       	mov    edx,0xc001dd24
c000d838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83c:	89 10                	mov    DWORD PTR [eax],edx
c000d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d842:	83 ec 0c             	sub    esp,0xc
c000d845:	50                   	push   eax
c000d846:	e8 4b df ff ff       	call   c000b796 <Device::~Device()>
c000d84b:	83 c4 10             	add    esp,0x10
c000d84e:	90                   	nop
c000d84f:	83 c4 0c             	add    esp,0xc
c000d852:	c3                   	ret    
c000d853:	90                   	nop

c000d854 <Video::~Video()>:
c000d854:	83 ec 0c             	sub    esp,0xc
c000d857:	83 ec 0c             	sub    esp,0xc
c000d85a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d85e:	e8 cd ff ff ff       	call   c000d830 <Video::~Video()>
c000d863:	83 c4 10             	add    esp,0x10
c000d866:	83 ec 08             	sub    esp,0x8
c000d869:	68 64 01 00 00       	push   0x164
c000d86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d872:	e8 e7 ca ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c000d877:	83 c4 10             	add    esp,0x10
c000d87a:	83 c4 0c             	add    esp,0xc
c000d87d:	c3                   	ret    

c000d87e <Video::isMonochrome()>:
c000d87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d882:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d888:	c3                   	ret    
c000d889:	90                   	nop

c000d88a <Video::getWidth()>:
c000d88a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d88e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d894:	c3                   	ret    
c000d895:	90                   	nop

c000d896 <Video::getHeight()>:
c000d896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d89a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d8a0:	c3                   	ret    
c000d8a1:	90                   	nop

c000d8a2 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d8a2:	55                   	push   ebp
c000d8a3:	57                   	push   edi
c000d8a4:	56                   	push   esi
c000d8a5:	53                   	push   ebx
c000d8a6:	83 ec 2c             	sub    esp,0x2c
c000d8a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8ad:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d8b1:	83 f8 01             	cmp    eax,0x1
c000d8b4:	19 c9                	sbb    ecx,ecx
c000d8b6:	31 db                	xor    ebx,ebx
c000d8b8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d8bc:	89 cd                	mov    ebp,ecx
c000d8be:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d8c6:	f7 d5                	not    ebp
c000d8c8:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d8ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d8d2:	01 d8                	add    eax,ebx
c000d8d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8d8:	56                   	push   esi
c000d8d9:	e8 b8 ff ff ff       	call   c000d896 <Video::getHeight()>
c000d8de:	59                   	pop    ecx
c000d8df:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d8e3:	7e 70                	jle    c000d955 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d8e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d8e9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d8ed:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d8f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d8f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d8f8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d8ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d903:	89 f8                	mov    eax,edi
c000d905:	83 c0 20             	add    eax,0x20
c000d908:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d90c:	56                   	push   esi
c000d90d:	e8 78 ff ff ff       	call   c000d88a <Video::getWidth()>
c000d912:	5a                   	pop    edx
c000d913:	39 c7                	cmp    edi,eax
c000d915:	7d 34                	jge    c000d94b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d917:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d91c:	74 05                	je     c000d923 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d91e:	8b 06                	mov    eax,DWORD PTR [esi]
c000d920:	55                   	push   ebp
c000d921:	eb 0d                	jmp    c000d930 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d923:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d928:	74 12                	je     c000d93c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d92a:	8b 06                	mov    eax,DWORD PTR [esi]
c000d92c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d930:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d934:	57                   	push   edi
c000d935:	56                   	push   esi
c000d936:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d939:	83 c4 10             	add    esp,0x10
c000d93c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d940:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d944:	47                   	inc    edi
c000d945:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d949:	75 c1                	jne    c000d90c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d94b:	43                   	inc    ebx
c000d94c:	83 fb 20             	cmp    ebx,0x20
c000d94f:	0f 85 79 ff ff ff    	jne    c000d8ce <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d955:	83 c4 2c             	add    esp,0x2c
c000d958:	5b                   	pop    ebx
c000d959:	5e                   	pop    esi
c000d95a:	5f                   	pop    edi
c000d95b:	5d                   	pop    ebp
c000d95c:	c3                   	ret    
c000d95d:	90                   	nop

c000d95e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000d95e:	55                   	push   ebp
c000d95f:	57                   	push   edi
c000d960:	56                   	push   esi
c000d961:	53                   	push   ebx
c000d962:	83 ec 28             	sub    esp,0x28
c000d965:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d969:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000d96d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000d971:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000d975:	c1 e6 08             	shl    esi,0x8
c000d978:	01 c6                	add    esi,eax
c000d97a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000d97e:	c1 e0 08             	shl    eax,0x8
c000d981:	01 d0                	add    eax,edx
c000d983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d98b:	0f af c6             	imul   eax,esi
c000d98e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000d995:	50                   	push   eax
c000d996:	e8 1e 9e ff ff       	call   c00077b9 <malloc>
c000d99b:	83 c4 10             	add    esp,0x10
c000d99e:	89 c7                	mov    edi,eax
c000d9a0:	85 c0                	test   eax,eax
c000d9a2:	75 10                	jne    c000d9b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000d9a4:	83 ec 0c             	sub    esp,0xc
c000d9a7:	68 d5 dc 01 c0       	push   0xc001dcd5
c000d9ac:	e8 06 27 00 00       	call   c00100b7 <KePanic(char const*)>
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000d9b7:	ba 12 00 00 00       	mov    edx,0x12
c000d9bc:	84 c0                	test   al,al
c000d9be:	74 11                	je     c000d9d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000d9c0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000d9c4:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000d9c8:	c1 fa 03             	sar    edx,0x3
c000d9cb:	0f af d1             	imul   edx,ecx
c000d9ce:	83 c2 12             	add    edx,0x12
c000d9d1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000d9d5:	74 04                	je     c000d9db <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000d9d7:	85 f6                	test   esi,esi
c000d9d9:	75 12                	jne    c000d9ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000d9db:	83 ec 0c             	sub    esp,0xc
c000d9de:	68 e5 dc 01 c0       	push   0xc001dce5
c000d9e3:	e8 6c ca ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000d9e8:	e9 b8 00 00 00       	jmp    c000daa5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000d9ed:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000d9f1:	80 f9 02             	cmp    cl,0x2
c000d9f4:	0f 85 96 00 00 00    	jne    c000da90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000d9fa:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000d9ff:	75 0e                	jne    c000da0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da01:	84 c0                	test   al,al
c000da03:	75 0a                	jne    c000da0f <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000da05:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000da08:	83 e8 18             	sub    eax,0x18
c000da0b:	a8 f7                	test   al,0xf7
c000da0d:	74 0a                	je     c000da19 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000da0f:	83 ec 0c             	sub    esp,0xc
c000da12:	68 fa dc 01 c0       	push   0xc001dcfa
c000da17:	eb 7f                	jmp    c000da98 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000da19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000da21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000da29:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000da2d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da35:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000da39:	75 0c                	jne    c000da47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000da3b:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000da40:	c1 e0 18             	shl    eax,0x18
c000da43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da47:	45                   	inc    ebp
c000da48:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000da4d:	c1 e1 10             	shl    ecx,0x10
c000da50:	89 c8                	mov    eax,ecx
c000da52:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000da57:	c1 e1 08             	shl    ecx,0x8
c000da5a:	09 c1                	or     ecx,eax
c000da5c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000da60:	09 c1                	or     ecx,eax
c000da62:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000da66:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000da6a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000da6e:	c1 f8 03             	sar    eax,0x3
c000da71:	01 c2                	add    edx,eax
c000da73:	89 e8                	mov    eax,ebp
c000da75:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000da79:	39 c6                	cmp    esi,eax
c000da7b:	7f b0                	jg     c000da2d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000da7d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000da81:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da85:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000da88:	7e 22                	jle    c000daac <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000da8a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000da8e:	eb 99                	jmp    c000da29 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000da90:	50                   	push   eax
c000da91:	50                   	push   eax
c000da92:	51                   	push   ecx
c000da93:	68 08 dd 01 c0       	push   0xc001dd08
c000da98:	e8 b7 c9 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000da9d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000daa0:	e8 24 9d ff ff       	call   c00077c9 <free>
c000daa5:	83 c4 10             	add    esp,0x10
c000daa8:	31 ff                	xor    edi,edi
c000daaa:	eb 0f                	jmp    c000dabb <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000daac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dab0:	89 30                	mov    DWORD PTR [eax],esi
c000dab2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dab6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dab9:	89 30                	mov    DWORD PTR [eax],esi
c000dabb:	83 c4 1c             	add    esp,0x1c
c000dabe:	89 f8                	mov    eax,edi
c000dac0:	5b                   	pop    ebx
c000dac1:	5e                   	pop    esi
c000dac2:	5f                   	pop    edi
c000dac3:	5d                   	pop    ebp
c000dac4:	c3                   	ret    
c000dac5:	90                   	nop

c000dac6 <Video::putTGA(int, int, unsigned char*, int)>:
c000dac6:	55                   	push   ebp
c000dac7:	57                   	push   edi
c000dac8:	56                   	push   esi
c000dac9:	53                   	push   ebx
c000daca:	83 ec 28             	sub    esp,0x28
c000dacd:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dad1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dad5:	50                   	push   eax
c000dad6:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dada:	50                   	push   eax
c000dadb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dadf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dae3:	56                   	push   esi
c000dae4:	e8 75 fe ff ff       	call   c000d95e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dae9:	83 c4 20             	add    esp,0x20
c000daec:	85 c0                	test   eax,eax
c000daee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000daf2:	74 35                	je     c000db29 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000daf4:	89 c7                	mov    edi,eax
c000daf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dafa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dafe:	39 d8                	cmp    eax,ebx
c000db00:	7e 27                	jle    c000db29 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db02:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000db06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db0a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000db0e:	39 e8                	cmp    eax,ebp
c000db10:	7e 14                	jle    c000db26 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000db12:	8b 06                	mov    eax,DWORD PTR [esi]
c000db14:	83 c7 04             	add    edi,0x4
c000db17:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000db1a:	53                   	push   ebx
c000db1b:	55                   	push   ebp
c000db1c:	45                   	inc    ebp
c000db1d:	56                   	push   esi
c000db1e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db21:	83 c4 10             	add    esp,0x10
c000db24:	eb e0                	jmp    c000db06 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000db26:	43                   	inc    ebx
c000db27:	eb cd                	jmp    c000daf6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000db29:	83 c4 1c             	add    esp,0x1c
c000db2c:	5b                   	pop    ebx
c000db2d:	5e                   	pop    esi
c000db2e:	5f                   	pop    edi
c000db2f:	5d                   	pop    ebp
c000db30:	c3                   	ret    
c000db31:	66 90                	xchg   ax,ax
c000db33:	90                   	nop

c000db34 <ACPI::close(int, int, void*)>:
c000db34:	83 ec 1c             	sub    esp,0x1c
c000db37:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000db3f:	74 0b                	je     c000db4c <ACPI::close(int, int, void*)+0x18>
c000db41:	b8 00 00 00 00       	mov    eax,0x0
c000db46:	e9 9d 00 00 00       	jmp    c000dbe8 <ACPI::close(int, int, void*)+0xb4>
c000db4b:	90                   	nop
c000db4c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000db51:	75 29                	jne    c000db7c <ACPI::close(int, int, void*)+0x48>
c000db53:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c000db58:	85 c0                	test   eax,eax
c000db5a:	74 08                	je     c000db64 <ACPI::close(int, int, void*)+0x30>
c000db5c:	a1 08 2a 02 c0       	mov    eax,ds:0xc0022a08
c000db61:	ff d0                	call   eax
c000db63:	90                   	nop
c000db64:	83 ec 0c             	sub    esp,0xc
c000db67:	68 64 dd 01 c0       	push   0xc001dd64
c000db6c:	e8 46 25 00 00       	call   c00100b7 <KePanic(char const*)>
c000db71:	83 c4 10             	add    esp,0x10
c000db74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db79:	eb 6d                	jmp    c000dbe8 <ACPI::close(int, int, void*)+0xb4>
c000db7b:	90                   	nop
c000db7c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000db81:	75 5d                	jne    c000dbe0 <ACPI::close(int, int, void*)+0xac>
c000db83:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000db88:	85 c0                	test   eax,eax
c000db8a:	74 08                	je     c000db94 <ACPI::close(int, int, void*)+0x60>
c000db8c:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000db91:	ff d0                	call   eax
c000db93:	90                   	nop
c000db94:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000db99:	8d 76 00             	lea    esi,[esi+0x0]
c000db9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dba0:	25 ff 00 00 00       	and    eax,0xff
c000dba5:	83 e0 02             	and    eax,0x2
c000dba8:	74 1e                	je     c000dbc8 <ACPI::close(int, int, void*)+0x94>
c000dbaa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dbb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dbb5:	89 c2                	mov    edx,eax
c000dbb7:	ec                   	in     al,dx
c000dbb8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dbbc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dbc0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dbc4:	eb d6                	jmp    c000db9c <ACPI::close(int, int, void*)+0x68>
c000dbc6:	66 90                	xchg   ax,ax
c000dbc8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dbcf:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dbd4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dbd8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dbdc:	ee                   	out    dx,al
c000dbdd:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbe8:	83 c4 1c             	add    esp,0x1c
c000dbeb:	c3                   	ret    

c000dbec <findRSDP()>:
c000dbec:	83 ec 1c             	sub    esp,0x1c
c000dbef:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000dbf4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dbfa:	83 e0 04             	and    eax,0x4
c000dbfd:	84 c0                	test   al,al
c000dbff:	75 07                	jne    c000dc08 <findRSDP()+0x1c>
c000dc01:	b8 00 00 00 00       	mov    eax,0x0
c000dc06:	eb 70                	jmp    c000dc78 <findRSDP()+0x8c>
c000dc08:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c000dc0d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dc12:	7f 1c                	jg     c000dc30 <findRSDP()+0x44>
c000dc14:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000dc19:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dc1f:	83 e2 fb             	and    edx,0xfffffffb
c000dc22:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dc28:	b8 00 00 00 00       	mov    eax,0x0
c000dc2d:	eb 49                	jmp    c000dc78 <findRSDP()+0x8c>
c000dc2f:	90                   	nop
c000dc30:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dc38:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dc40:	77 2e                	ja     c000dc70 <findRSDP()+0x84>
c000dc42:	83 ec 04             	sub    esp,0x4
c000dc45:	6a 08                	push   0x8
c000dc47:	68 ff dd 01 c0       	push   0xc001ddff
c000dc4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc50:	e8 3b 27 ff ff       	call   c0000390 <memcmp>
c000dc55:	83 c4 10             	add    esp,0x10
c000dc58:	85 c0                	test   eax,eax
c000dc5a:	0f 94 c0             	sete   al
c000dc5d:	84 c0                	test   al,al
c000dc5f:	74 07                	je     c000dc68 <findRSDP()+0x7c>
c000dc61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc65:	eb 11                	jmp    c000dc78 <findRSDP()+0x8c>
c000dc67:	90                   	nop
c000dc68:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dc6d:	eb c9                	jmp    c000dc38 <findRSDP()+0x4c>
c000dc6f:	90                   	nop
c000dc70:	b8 00 00 00 00       	mov    eax,0x0
c000dc75:	8d 76 00             	lea    esi,[esi+0x0]
c000dc78:	83 c4 1c             	add    esp,0x1c
c000dc7b:	c3                   	ret    

c000dc7c <loadACPITables(unsigned char*)>:
c000dc7c:	57                   	push   edi
c000dc7d:	56                   	push   esi
c000dc7e:	53                   	push   ebx
c000dc7f:	83 ec 60             	sub    esp,0x60
c000dc82:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000dc87:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc8d:	83 e0 04             	and    eax,0x4
c000dc90:	84 c0                	test   al,al
c000dc92:	0f 84 3c 02 00 00    	je     c000ded4 <loadACPITables(unsigned char*)+0x258>
c000dc98:	a0 20 2c 02 c0       	mov    al,ds:0xc0022c20
c000dc9d:	84 c0                	test   al,al
c000dc9f:	74 77                	je     c000dd18 <loadACPITables(unsigned char*)+0x9c>
c000dca1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dca5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dca9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dcad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dcb0:	83 e8 24             	sub    eax,0x24
c000dcb3:	c1 e8 03             	shr    eax,0x3
c000dcb6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dcba:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dcc2:	66 90                	xchg   ax,ax
c000dcc4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dcc8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dccc:	0f 8d b6 00 00 00    	jge    c000dd88 <loadACPITables(unsigned char*)+0x10c>
c000dcd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dcd6:	83 c0 24             	add    eax,0x24
c000dcd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dcdd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dce1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dce5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dce9:	c1 e0 03             	shl    eax,0x3
c000dcec:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dcf0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dcf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcf9:	89 c1                	mov    ecx,eax
c000dcfb:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000dd00:	8d 50 01             	lea    edx,[eax+0x1]
c000dd03:	89 15 0c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a0c,edx
c000dd09:	89 ca                	mov    edx,ecx
c000dd0b:	89 14 c5 24 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5dc],edx
c000dd12:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000dd16:	eb ac                	jmp    c000dcc4 <loadACPITables(unsigned char*)+0x48>
c000dd18:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dd20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dd24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd27:	83 e8 24             	sub    eax,0x24
c000dd2a:	c1 e8 02             	shr    eax,0x2
c000dd2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dd31:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dd39:	8d 76 00             	lea    esi,[esi+0x0]
c000dd3c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd40:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dd44:	7d 42                	jge    c000dd88 <loadACPITables(unsigned char*)+0x10c>
c000dd46:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd4a:	83 c0 24             	add    eax,0x24
c000dd4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dd51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dd55:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000dd59:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dd5d:	c1 e0 02             	shl    eax,0x2
c000dd60:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dd64:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dd68:	8b 08                	mov    ecx,DWORD PTR [eax]
c000dd6a:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000dd6f:	8d 50 01             	lea    edx,[eax+0x1]
c000dd72:	89 15 0c 2a 02 c0    	mov    DWORD PTR ds:0xc0022a0c,edx
c000dd78:	89 ca                	mov    edx,ecx
c000dd7a:	89 14 c5 24 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5dc],edx
c000dd81:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000dd85:	eb b5                	jmp    c000dd3c <loadACPITables(unsigned char*)+0xc0>
c000dd87:	90                   	nop
c000dd88:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dd90:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000dd95:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dd99:	0f 8d 39 01 00 00    	jge    c000ded8 <loadACPITables(unsigned char*)+0x25c>
c000dd9f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dda3:	8b 04 c5 24 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd5dc]
c000ddaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddb2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ddb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ddba:	25 ff 0f 00 00       	and    eax,0xfff
c000ddbf:	89 c6                	mov    esi,eax
c000ddc1:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c000ddc7:	83 ec 0c             	sub    esp,0xc
c000ddca:	6a 01                	push   0x1
c000ddcc:	e8 30 b4 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000ddd1:	83 c4 10             	add    esp,0x10
c000ddd4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ddd8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ddde:	83 ec 0c             	sub    esp,0xc
c000dde1:	6a 01                	push   0x1
c000dde3:	6a 01                	push   0x1
c000dde5:	50                   	push   eax
c000dde6:	52                   	push   edx
c000dde7:	53                   	push   ebx
c000dde8:	e8 a3 bd ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dded:	83 c4 20             	add    esp,0x20
c000ddf0:	09 f0                	or     eax,esi
c000ddf2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddf6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ddfa:	c1 e0 03             	shl    eax,0x3
c000ddfd:	05 20 2a 02 c0       	add    eax,0xc0022a20
c000de02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000de06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de0e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000de16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000de26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de2a:	89 c6                	mov    esi,eax
c000de2c:	89 d7                	mov    edi,edx
c000de2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de30:	89 c8                	mov    eax,ecx
c000de32:	89 fa                	mov    edx,edi
c000de34:	89 f3                	mov    ebx,esi
c000de36:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000de3a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000de3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000de4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de51:	05 00 10 00 00       	add    eax,0x1000
c000de56:	c1 e8 0c             	shr    eax,0xc
c000de59:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000de5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de61:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de69:	25 ff 0f 00 00       	and    eax,0xfff
c000de6e:	89 c6                	mov    esi,eax
c000de70:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c000de76:	83 ec 0c             	sub    esp,0xc
c000de79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000de7d:	e8 7f b3 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000de82:	83 c4 10             	add    esp,0x10
c000de85:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de89:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de8f:	83 ec 0c             	sub    esp,0xc
c000de92:	6a 01                	push   0x1
c000de94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000de98:	50                   	push   eax
c000de99:	52                   	push   edx
c000de9a:	53                   	push   ebx
c000de9b:	e8 f0 bc ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dea0:	83 c4 20             	add    esp,0x20
c000dea3:	09 f0                	or     eax,esi
c000dea5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dead:	83 ec 0c             	sub    esp,0xc
c000deb0:	50                   	push   eax
c000deb1:	e8 7b b6 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c000deb6:	83 c4 10             	add    esp,0x10
c000deb9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000debd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dec1:	89 14 c5 24 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd5dc],edx
c000dec8:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000decc:	e9 bf fe ff ff       	jmp    c000dd90 <loadACPITables(unsigned char*)+0x114>
c000ded1:	8d 76 00             	lea    esi,[esi+0x0]
c000ded4:	90                   	nop
c000ded5:	8d 76 00             	lea    esi,[esi+0x0]
c000ded8:	83 c4 60             	add    esp,0x60
c000dedb:	5b                   	pop    ebx
c000dedc:	5e                   	pop    esi
c000dedd:	5f                   	pop    edi
c000dede:	c3                   	ret    
c000dedf:	90                   	nop

c000dee0 <findRSDT(unsigned char*)>:
c000dee0:	57                   	push   edi
c000dee1:	56                   	push   esi
c000dee2:	53                   	push   ebx
c000dee3:	83 ec 50             	sub    esp,0x50
c000dee6:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000deeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000def1:	83 e0 04             	and    eax,0x4
c000def4:	84 c0                	test   al,al
c000def6:	75 0c                	jne    c000df04 <findRSDT(unsigned char*)+0x24>
c000def8:	b8 00 00 00 00       	mov    eax,0x0
c000defd:	e9 26 01 00 00       	jmp    c000e028 <findRSDT(unsigned char*)+0x148>
c000df02:	66 90                	xchg   ax,ax
c000df04:	89 e0                	mov    eax,esp
c000df06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000df0a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000df0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df12:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000df1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000df1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000df2a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000df2e:	89 c6                	mov    esi,eax
c000df30:	89 d7                	mov    edi,edx
c000df32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df34:	89 c8                	mov    eax,ecx
c000df36:	89 fa                	mov    edx,edi
c000df38:	89 f3                	mov    ebx,esi
c000df3a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000df3e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000df42:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df46:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000df4a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000df4e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000df56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df5e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df66:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000df6a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000df6e:	25 ff 0f 00 00       	and    eax,0xfff
c000df73:	89 c6                	mov    esi,eax
c000df75:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c000df7b:	83 ec 0c             	sub    esp,0xc
c000df7e:	6a 02                	push   0x2
c000df80:	e8 7c b2 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000df8c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	6a 01                	push   0x1
c000df97:	6a 02                	push   0x2
c000df99:	50                   	push   eax
c000df9a:	52                   	push   edx
c000df9b:	53                   	push   ebx
c000df9c:	e8 ef bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfa1:	83 c4 20             	add    esp,0x20
c000dfa4:	09 f0                	or     eax,esi
c000dfa6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dfae:	25 ff 0f 00 00       	and    eax,0xfff
c000dfb3:	89 c6                	mov    esi,eax
c000dfb5:	8b 1d 10 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020510
c000dfbb:	83 ec 0c             	sub    esp,0xc
c000dfbe:	6a 02                	push   0x2
c000dfc0:	e8 3c b2 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c000dfc5:	83 c4 10             	add    esp,0x10
c000dfc8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000dfcc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfd2:	83 ec 0c             	sub    esp,0xc
c000dfd5:	6a 01                	push   0x1
c000dfd7:	6a 02                	push   0x2
c000dfd9:	50                   	push   eax
c000dfda:	52                   	push   edx
c000dfdb:	53                   	push   ebx
c000dfdc:	e8 af bb ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfe1:	83 c4 20             	add    esp,0x20
c000dfe4:	09 f0                	or     eax,esi
c000dfe6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dfea:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000dfef:	75 13                	jne    c000e004 <findRSDT(unsigned char*)+0x124>
c000dff1:	c6 05 20 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022c20,0x0
c000dff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dffc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e000:	eb 22                	jmp    c000e024 <findRSDT(unsigned char*)+0x144>
c000e002:	66 90                	xchg   ax,ax
c000e004:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e009:	75 11                	jne    c000e01c <findRSDT(unsigned char*)+0x13c>
c000e00b:	c6 05 20 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c20,0x1
c000e012:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e016:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e01a:	eb 08                	jmp    c000e024 <findRSDT(unsigned char*)+0x144>
c000e01c:	b8 00 00 00 00       	mov    eax,0x0
c000e021:	eb 05                	jmp    c000e028 <findRSDT(unsigned char*)+0x148>
c000e023:	90                   	nop
c000e024:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e028:	83 c4 50             	add    esp,0x50
c000e02b:	5b                   	pop    ebx
c000e02c:	5e                   	pop    esi
c000e02d:	5f                   	pop    edi
c000e02e:	c3                   	ret    
c000e02f:	90                   	nop

c000e030 <findDataTable(unsigned char*, char*)>:
c000e030:	83 ec 1c             	sub    esp,0x1c
c000e033:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e038:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e03e:	83 e0 04             	and    eax,0x4
c000e041:	84 c0                	test   al,al
c000e043:	75 07                	jne    c000e04c <findDataTable(unsigned char*, char*)+0x1c>
c000e045:	b8 00 00 00 00       	mov    eax,0x0
c000e04a:	eb 58                	jmp    c000e0a4 <findDataTable(unsigned char*, char*)+0x74>
c000e04c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e054:	a1 0c 2a 02 c0       	mov    eax,ds:0xc0022a0c
c000e059:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e05d:	7d 3d                	jge    c000e09c <findDataTable(unsigned char*, char*)+0x6c>
c000e05f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e063:	c1 e0 03             	shl    eax,0x3
c000e066:	05 20 2a 02 c0       	add    eax,0xc0022a20
c000e06b:	83 ec 04             	sub    esp,0x4
c000e06e:	6a 04                	push   0x4
c000e070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e074:	50                   	push   eax
c000e075:	e8 16 23 ff ff       	call   c0000390 <memcmp>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	85 c0                	test   eax,eax
c000e07f:	0f 94 c0             	sete   al
c000e082:	84 c0                	test   al,al
c000e084:	74 0e                	je     c000e094 <findDataTable(unsigned char*, char*)+0x64>
c000e086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e08a:	8b 04 c5 24 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd5dc]
c000e091:	eb 11                	jmp    c000e0a4 <findDataTable(unsigned char*, char*)+0x74>
c000e093:	90                   	nop
c000e094:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e098:	eb ba                	jmp    c000e054 <findDataTable(unsigned char*, char*)+0x24>
c000e09a:	66 90                	xchg   ax,ax
c000e09c:	b8 00 00 00 00       	mov    eax,0x0
c000e0a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0a4:	83 c4 1c             	add    esp,0x1c
c000e0a7:	c3                   	ret    

c000e0a8 <scanMADT()>:
c000e0a8:	53                   	push   ebx
c000e0a9:	83 ec 38             	sub    esp,0x38
c000e0ac:	a1 30 04 02 c0       	mov    eax,ds:0xc0020430
c000e0b1:	25 00 04 00 00       	and    eax,0x400
c000e0b6:	74 14                	je     c000e0cc <scanMADT()+0x24>
c000e0b8:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e0bd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e0c3:	83 e2 fb             	and    edx,0xfffffffb
c000e0c6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e0cc:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e0d1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0d7:	83 e0 04             	and    eax,0x4
c000e0da:	84 c0                	test   al,al
c000e0dc:	0f 84 8a 04 00 00    	je     c000e56c <scanMADT()+0x4c4>
c000e0e2:	e8 05 fb ff ff       	call   c000dbec <findRSDP()>
c000e0e7:	a3 2c 2c 02 c0       	mov    ds:0xc0022c2c,eax
c000e0ec:	a1 2c 2c 02 c0       	mov    eax,ds:0xc0022c2c
c000e0f1:	85 c0                	test   eax,eax
c000e0f3:	75 1b                	jne    c000e110 <scanMADT()+0x68>
c000e0f5:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e0fa:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e100:	83 e2 fb             	and    edx,0xfffffffb
c000e103:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e109:	e9 66 04 00 00       	jmp    c000e574 <scanMADT()+0x4cc>
c000e10e:	66 90                	xchg   ax,ax
c000e110:	a1 2c 2c 02 c0       	mov    eax,ds:0xc0022c2c
c000e115:	83 ec 0c             	sub    esp,0xc
c000e118:	50                   	push   eax
c000e119:	e8 c2 fd ff ff       	call   c000dee0 <findRSDT(unsigned char*)>
c000e11e:	83 c4 10             	add    esp,0x10
c000e121:	a3 28 2c 02 c0       	mov    ds:0xc0022c28,eax
c000e126:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c000e12b:	85 c0                	test   eax,eax
c000e12d:	75 19                	jne    c000e148 <scanMADT()+0xa0>
c000e12f:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e134:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e13a:	83 e2 fb             	and    edx,0xfffffffb
c000e13d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e143:	e9 2c 04 00 00       	jmp    c000e574 <scanMADT()+0x4cc>
c000e148:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	50                   	push   eax
c000e151:	e8 26 fb ff ff       	call   c000dc7c <loadACPITables(unsigned char*)>
c000e156:	83 c4 10             	add    esp,0x10
c000e159:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c000e15e:	83 ec 08             	sub    esp,0x8
c000e161:	68 08 de 01 c0       	push   0xc001de08
c000e166:	50                   	push   eax
c000e167:	e8 c4 fe ff ff       	call   c000e030 <findDataTable(unsigned char*, char*)>
c000e16c:	83 c4 10             	add    esp,0x10
c000e16f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e173:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e178:	75 1a                	jne    c000e194 <scanMADT()+0xec>
c000e17a:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e17f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e185:	83 e2 fe             	and    edx,0xfffffffe
c000e188:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e18e:	e9 e1 03 00 00       	jmp    c000e574 <scanMADT()+0x4cc>
c000e193:	90                   	nop
c000e194:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e19c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1a3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e1a7:	0f 87 c7 03 00 00    	ja     c000e574 <scanMADT()+0x4cc>
c000e1ad:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e1b5:	0f 87 b9 03 00 00    	ja     c000e574 <scanMADT()+0x4cc>
c000e1bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1bf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1c7:	8d 50 01             	lea    edx,[eax+0x1]
c000e1ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e1ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e1d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e1d6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e1da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e1de:	8d 50 01             	lea    edx,[eax+0x1]
c000e1e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e1e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e1e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e1ed:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e1f1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e1f6:	0f 86 74 03 00 00    	jbe    c000e570 <scanMADT()+0x4c8>
c000e1fc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e201:	75 5d                	jne    c000e260 <scanMADT()+0x1b8>
c000e203:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e207:	8d 50 01             	lea    edx,[eax+0x1]
c000e20a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e20e:	8a 15 20 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022e20
c000e214:	81 e2 ff 00 00 00    	and    edx,0xff
c000e21a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e21e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e222:	88 82 60 2e 02 c0    	mov    BYTE PTR [edx-0x3ffdd1a0],al
c000e228:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e22c:	8d 42 01             	lea    eax,[edx+0x1]
c000e22f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e233:	a0 20 2e 02 c0       	mov    al,ds:0xc0022e20
c000e238:	8d 48 01             	lea    ecx,[eax+0x1]
c000e23b:	88 0d 20 2e 02 c0    	mov    BYTE PTR ds:0xc0022e20,cl
c000e241:	25 ff 00 00 00       	and    eax,0xff
c000e246:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e24a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e24e:	88 90 40 2e 02 c0    	mov    BYTE PTR [eax-0x3ffdd1c0],dl
c000e254:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e259:	e9 f6 02 00 00       	jmp    c000e554 <scanMADT()+0x4ac>
c000e25e:	66 90                	xchg   ax,ax
c000e260:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e265:	0f 85 29 01 00 00    	jne    c000e394 <scanMADT()+0x2ec>
c000e26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26f:	8d 50 01             	lea    edx,[eax+0x1]
c000e272:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e276:	8a 15 e0 2c 02 c0    	mov    dl,BYTE PTR ds:0xc0022ce0
c000e27c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e282:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e286:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e28a:	88 82 00 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd300],al
c000e290:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e294:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e298:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e29c:	01 d0                	add    eax,edx
c000e29e:	83 c0 2c             	add    eax,0x2c
c000e2a1:	8a 00                	mov    al,BYTE PTR [eax]
c000e2a3:	31 d2                	xor    edx,edx
c000e2a5:	88 c2                	mov    dl,al
c000e2a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2ab:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2b2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e2b6:	25 ff 00 00 00       	and    eax,0xff
c000e2bb:	c1 e0 08             	shl    eax,0x8
c000e2be:	89 d1                	mov    ecx,edx
c000e2c0:	09 c1                	or     ecx,eax
c000e2c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2c6:	8d 50 02             	lea    edx,[eax+0x2]
c000e2c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e2d1:	25 ff 00 00 00       	and    eax,0xff
c000e2d6:	c1 e0 10             	shl    eax,0x10
c000e2d9:	09 c1                	or     ecx,eax
c000e2db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2df:	8d 50 03             	lea    edx,[eax+0x3]
c000e2e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e2ea:	25 ff 00 00 00       	and    eax,0xff
c000e2ef:	c1 e0 18             	shl    eax,0x18
c000e2f2:	09 c1                	or     ecx,eax
c000e2f4:	89 ca                	mov    edx,ecx
c000e2f6:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000e2fb:	25 ff 00 00 00       	and    eax,0xff
c000e300:	89 14 85 20 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd2e0],edx
c000e307:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e30c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e310:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e314:	01 d0                	add    eax,edx
c000e316:	83 c0 2c             	add    eax,0x2c
c000e319:	8a 00                	mov    al,BYTE PTR [eax]
c000e31b:	31 d2                	xor    edx,edx
c000e31d:	88 c2                	mov    dl,al
c000e31f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e323:	8d 48 01             	lea    ecx,[eax+0x1]
c000e326:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e32a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e32e:	25 ff 00 00 00       	and    eax,0xff
c000e333:	c1 e0 08             	shl    eax,0x8
c000e336:	89 d1                	mov    ecx,edx
c000e338:	09 c1                	or     ecx,eax
c000e33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e33e:	8d 50 02             	lea    edx,[eax+0x2]
c000e341:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e345:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e349:	25 ff 00 00 00       	and    eax,0xff
c000e34e:	c1 e0 10             	shl    eax,0x10
c000e351:	09 c1                	or     ecx,eax
c000e353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e357:	8d 50 03             	lea    edx,[eax+0x3]
c000e35a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e35e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e362:	25 ff 00 00 00       	and    eax,0xff
c000e367:	c1 e0 18             	shl    eax,0x18
c000e36a:	09 c1                	or     ecx,eax
c000e36c:	89 ca                	mov    edx,ecx
c000e36e:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000e373:	25 ff 00 00 00       	and    eax,0xff
c000e378:	89 14 85 a0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd260],edx
c000e37f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e384:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000e389:	40                   	inc    eax
c000e38a:	a2 e0 2c 02 c0       	mov    ds:0xc0022ce0,al
c000e38f:	e9 c0 01 00 00       	jmp    c000e554 <scanMADT()+0x4ac>
c000e394:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e399:	0f 85 fd 00 00 00    	jne    c000e49c <scanMADT()+0x3f4>
c000e39f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3a3:	8d 50 01             	lea    edx,[eax+0x1]
c000e3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3b2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e3b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ba:	8d 50 01             	lea    edx,[eax+0x1]
c000e3bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3c9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e3cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d5:	01 d0                	add    eax,edx
c000e3d7:	83 c0 2c             	add    eax,0x2c
c000e3da:	8a 00                	mov    al,BYTE PTR [eax]
c000e3dc:	31 d2                	xor    edx,edx
c000e3de:	88 c2                	mov    dl,al
c000e3e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3eb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ef:	25 ff 00 00 00       	and    eax,0xff
c000e3f4:	c1 e0 08             	shl    eax,0x8
c000e3f7:	89 d1                	mov    ecx,edx
c000e3f9:	09 c1                	or     ecx,eax
c000e3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ff:	8d 50 02             	lea    edx,[eax+0x2]
c000e402:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e406:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e40a:	25 ff 00 00 00       	and    eax,0xff
c000e40f:	c1 e0 10             	shl    eax,0x10
c000e412:	09 c1                	or     ecx,eax
c000e414:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e418:	8d 50 03             	lea    edx,[eax+0x3]
c000e41b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e41f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e423:	25 ff 00 00 00       	and    eax,0xff
c000e428:	c1 e0 18             	shl    eax,0x18
c000e42b:	09 c8                	or     eax,ecx
c000e42d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e431:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e436:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e43a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e43e:	01 d0                	add    eax,edx
c000e440:	83 c0 2c             	add    eax,0x2c
c000e443:	8a 00                	mov    al,BYTE PTR [eax]
c000e445:	25 ff 00 00 00       	and    eax,0xff
c000e44a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e44e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e451:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e455:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e459:	81 e2 ff 00 00 00    	and    edx,0xff
c000e45f:	c1 e2 08             	shl    edx,0x8
c000e462:	09 d0                	or     eax,edx
c000e464:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e469:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e46e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e472:	25 ff 00 00 00       	and    eax,0xff
c000e477:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e47b:	88 90 40 f1 01 c0    	mov    BYTE PTR [eax-0x3ffe0ec0],dl
c000e481:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e485:	31 d2                	xor    edx,edx
c000e487:	88 c2                	mov    dl,al
c000e489:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e48e:	66 89 84 12 c0 2c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd340],ax
c000e496:	e9 b9 00 00 00       	jmp    c000e554 <scanMADT()+0x4ac>
c000e49b:	90                   	nop
c000e49c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e4a1:	0f 85 a1 00 00 00    	jne    c000e548 <scanMADT()+0x4a0>
c000e4a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4b2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4b6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ba:	25 ff 00 00 00       	and    eax,0xff
c000e4bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e4c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cb:	01 d0                	add    eax,edx
c000e4cd:	83 c0 2c             	add    eax,0x2c
c000e4d0:	8a 00                	mov    al,BYTE PTR [eax]
c000e4d2:	31 d2                	xor    edx,edx
c000e4d4:	88 c2                	mov    dl,al
c000e4d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4da:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4e1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4e5:	25 ff 00 00 00       	and    eax,0xff
c000e4ea:	c1 e0 08             	shl    eax,0x8
c000e4ed:	09 d0                	or     eax,edx
c000e4ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e4f3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e4f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4fc:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e503:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e507:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e50b:	25 ff 00 00 00       	and    eax,0xff
c000e510:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e518:	c1 e0 08             	shl    eax,0x8
c000e51b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e51f:	89 c1                	mov    ecx,eax
c000e521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e525:	c1 e0 18             	shl    eax,0x18
c000e528:	89 c3                	mov    ebx,eax
c000e52a:	a1 30 2c 02 c0       	mov    eax,ds:0xc0022c30
c000e52f:	8d 50 01             	lea    edx,[eax+0x1]
c000e532:	89 15 30 2c 02 c0    	mov    DWORD PTR ds:0xc0022c30,edx
c000e538:	09 d9                	or     ecx,ebx
c000e53a:	89 ca                	mov    edx,ecx
c000e53c:	89 14 85 40 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd3c0],edx
c000e543:	eb 0f                	jmp    c000e554 <scanMADT()+0x4ac>
c000e545:	8d 76 00             	lea    esi,[esi+0x0]
c000e548:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e54d:	75 05                	jne    c000e554 <scanMADT()+0x4ac>
c000e54f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e554:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e558:	31 d2                	xor    edx,edx
c000e55a:	88 c2                	mov    dl,al
c000e55c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e560:	01 d0                	add    eax,edx
c000e562:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e566:	e9 31 fc ff ff       	jmp    c000e19c <scanMADT()+0xf4>
c000e56b:	90                   	nop
c000e56c:	90                   	nop
c000e56d:	eb 05                	jmp    c000e574 <scanMADT()+0x4cc>
c000e56f:	90                   	nop
c000e570:	90                   	nop
c000e571:	8d 76 00             	lea    esi,[esi+0x0]
c000e574:	83 c4 38             	add    esp,0x38
c000e577:	5b                   	pop    ebx
c000e578:	c3                   	ret    
c000e579:	90                   	nop
c000e57a:	66 90                	xchg   ax,ax

c000e57c <ACPI::ACPI()>:
c000e57c:	83 ec 0c             	sub    esp,0xc
c000e57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e583:	83 ec 08             	sub    esp,0x8
c000e586:	68 0d de 01 c0       	push   0xc001de0d
c000e58b:	50                   	push   eax
c000e58c:	e8 9b d4 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000e591:	83 c4 10             	add    esp,0x10
c000e594:	ba 44 df 01 c0       	mov    edx,0xc001df44
c000e599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59d:	89 10                	mov    DWORD PTR [eax],edx
c000e59f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5ae:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e5c6:	e8 dd fa ff ff       	call   c000e0a8 <scanMADT()>
c000e5cb:	90                   	nop
c000e5cc:	83 c4 0c             	add    esp,0xc
c000e5cf:	c3                   	ret    

c000e5d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e5d0:	83 ec 2c             	sub    esp,0x2c
c000e5d3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e5d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e5db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e5df:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e5e3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e5e8:	88 d0                	mov    al,dl
c000e5ea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e5ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e5f3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e5fb:	90                   	nop
c000e5fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e600:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e606:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e60a:	0f 8d 9c 00 00 00    	jge    c000e6ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e610:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e614:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e618:	83 c2 2a             	add    edx,0x2a
c000e61b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e61f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e624:	75 7a                	jne    c000e6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e626:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e62a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e62e:	83 c2 2a             	add    edx,0x2a
c000e631:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e635:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e639:	75 65                	jne    c000e6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e63b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e640:	74 3a                	je     c000e67c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e642:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e646:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e64a:	83 c2 2a             	add    edx,0x2a
c000e64d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e651:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e655:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e658:	39 c2                	cmp    edx,eax
c000e65a:	74 10                	je     c000e66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e65c:	83 ec 0c             	sub    esp,0xc
c000e65f:	68 88 dd 01 c0       	push   0xc001dd88
c000e664:	e8 4e 1a 00 00       	call   c00100b7 <KePanic(char const*)>
c000e669:	83 c4 10             	add    esp,0x10
c000e66c:	83 ec 0c             	sub    esp,0xc
c000e66f:	68 12 de 01 c0       	push   0xc001de12
c000e674:	e8 3e 1a 00 00       	call   c00100b7 <KePanic(char const*)>
c000e679:	83 c4 10             	add    esp,0x10
c000e67c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e680:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e684:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e688:	83 c2 2a             	add    edx,0x2a
c000e68b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e68f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e691:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e694:	89 01                	mov    DWORD PTR [ecx],eax
c000e696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e699:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e69e:	66 90                	xchg   ax,ax
c000e6a0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e6a4:	e9 53 ff ff ff       	jmp    c000e5fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000e6ac:	90                   	nop
c000e6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6b1:	83 c4 2c             	add    esp,0x2c
c000e6b4:	c2 04 00             	ret    0x4
c000e6b7:	90                   	nop

c000e6b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e6b8:	83 ec 1c             	sub    esp,0x1c
c000e6bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e6c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e6c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e6cc:	88 c8                	mov    al,cl
c000e6ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e6d2:	88 d0                	mov    al,dl
c000e6d4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6dc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e6e9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e6ed:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6ff:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e706:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e70f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e715:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e719:	8d 48 01             	lea    ecx,[eax+0x1]
c000e71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e720:	83 c2 2a             	add    edx,0x2a
c000e723:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e72b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e731:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e735:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e738:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e73c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e744:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e74a:	8d 50 01             	lea    edx,[eax+0x1]
c000e74d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e751:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e75b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e761:	3d 00 02 00 00       	cmp    eax,0x200
c000e766:	75 10                	jne    c000e778 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	68 21 de 01 c0       	push   0xc001de21
c000e770:	e8 42 19 00 00       	call   c00100b7 <KePanic(char const*)>
c000e775:	83 c4 10             	add    esp,0x10
c000e778:	90                   	nop
c000e779:	83 c4 1c             	add    esp,0x1c
c000e77c:	c3                   	ret    
c000e77d:	90                   	nop
c000e77e:	66 90                	xchg   ax,ax

c000e780 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e780:	b8 00 00 00 00       	mov    eax,0x0
c000e785:	c3                   	ret    
c000e786:	66 90                	xchg   ax,ax

c000e788 <ACPI::detectPCI()>:
c000e788:	53                   	push   ebx
c000e789:	83 ec 28             	sub    esp,0x28
c000e78c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e791:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e796:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000e79b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7a1:	83 e0 04             	and    eax,0x4
c000e7a4:	84 c0                	test   al,al
c000e7a6:	74 2c                	je     c000e7d4 <ACPI::detectPCI()+0x4c>
c000e7a8:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c000e7ad:	83 ec 08             	sub    esp,0x8
c000e7b0:	68 3e de 01 c0       	push   0xc001de3e
c000e7b5:	50                   	push   eax
c000e7b6:	e8 75 f8 ff ff       	call   c000e030 <findDataTable(unsigned char*, char*)>
c000e7bb:	83 c4 10             	add    esp,0x10
c000e7be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e7c2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e7c7:	74 0b                	je     c000e7d4 <ACPI::detectPCI()+0x4c>
c000e7c9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7ce:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e7d3:	90                   	nop
c000e7d4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e7dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7e0:	8a 00                	mov    al,BYTE PTR [eax]
c000e7e2:	3c 01                	cmp    al,0x1
c000e7e4:	75 0e                	jne    c000e7f4 <ACPI::detectPCI()+0x6c>
c000e7e6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7eb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e7f0:	eb 2a                	jmp    c000e81c <ACPI::detectPCI()+0x94>
c000e7f2:	66 90                	xchg   ax,ax
c000e7f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7f8:	8a 00                	mov    al,BYTE PTR [eax]
c000e7fa:	3c 02                	cmp    al,0x2
c000e7fc:	75 1e                	jne    c000e81c <ACPI::detectPCI()+0x94>
c000e7fe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e803:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e808:	74 12                	je     c000e81c <ACPI::detectPCI()+0x94>
c000e80a:	83 ec 0c             	sub    esp,0xc
c000e80d:	68 b8 dd 01 c0       	push   0xc001ddb8
c000e812:	e8 a0 18 00 00       	call   c00100b7 <KePanic(char const*)>
c000e817:	83 c4 10             	add    esp,0x10
c000e81a:	66 90                	xchg   ax,ax
c000e81c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e820:	83 f0 01             	xor    eax,0x1
c000e823:	84 c0                	test   al,al
c000e825:	74 41                	je     c000e868 <ACPI::detectPCI()+0xe0>
c000e827:	e8 04 19 ff ff       	call   c0000130 <manualPCIProbe>
c000e82c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e830:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e835:	75 0d                	jne    c000e844 <ACPI::detectPCI()+0xbc>
c000e837:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e83c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e841:	eb 25                	jmp    c000e868 <ACPI::detectPCI()+0xe0>
c000e843:	90                   	nop
c000e844:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e849:	75 1d                	jne    c000e868 <ACPI::detectPCI()+0xe0>
c000e84b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e850:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e855:	74 11                	je     c000e868 <ACPI::detectPCI()+0xe0>
c000e857:	83 ec 0c             	sub    esp,0xc
c000e85a:	68 b8 dd 01 c0       	push   0xc001ddb8
c000e85f:	e8 53 18 00 00       	call   c00100b7 <KePanic(char const*)>
c000e864:	83 c4 10             	add    esp,0x10
c000e867:	90                   	nop
c000e868:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e86d:	0f 84 85 00 00 00    	je     c000e8f8 <ACPI::detectPCI()+0x170>
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	68 43 de 01 c0       	push   0xc001de43
c000e87b:	e8 bf 11 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000e880:	83 c4 10             	add    esp,0x10
c000e883:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e88b:	83 ec 0c             	sub    esp,0xc
c000e88e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e892:	e8 22 8f ff ff       	call   c00077b9 <malloc>
c000e897:	83 c4 10             	add    esp,0x10
c000e89a:	89 c3                	mov    ebx,eax
c000e89c:	83 ec 0c             	sub    esp,0xc
c000e89f:	53                   	push   ebx
c000e8a0:	e8 c9 96 00 00       	call   c0017f6e <PCI::PCI()>
c000e8a5:	83 c4 10             	add    esp,0x10
c000e8a8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8b0:	83 ec 08             	sub    esp,0x8
c000e8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8b7:	50                   	push   eax
c000e8b8:	e8 d7 cf ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e8bd:	83 c4 10             	add    esp,0x10
c000e8c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8c6:	83 c0 08             	add    eax,0x8
c000e8c9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8cb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8d0:	74 0a                	je     c000e8dc <ACPI::detectPCI()+0x154>
c000e8d2:	ba 01 00 00 00       	mov    edx,0x1
c000e8d7:	eb 0b                	jmp    c000e8e4 <ACPI::detectPCI()+0x15c>
c000e8d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8dc:	ba 02 00 00 00       	mov    edx,0x2
c000e8e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8e4:	6a 00                	push   0x0
c000e8e6:	6a 00                	push   0x0
c000e8e8:	52                   	push   edx
c000e8e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8ed:	ff d0                	call   eax
c000e8ef:	83 c4 10             	add    esp,0x10
c000e8f2:	e9 91 00 00 00       	jmp    c000e988 <ACPI::detectPCI()+0x200>
c000e8f7:	90                   	nop
c000e8f8:	83 ec 0c             	sub    esp,0xc
c000e8fb:	68 5b de 01 c0       	push   0xc001de5b
c000e900:	e8 3a 11 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000e905:	83 c4 10             	add    esp,0x10
c000e908:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e90f:	83 ec 0c             	sub    esp,0xc
c000e912:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e916:	e8 9e 8e ff ff       	call   c00077b9 <malloc>
c000e91b:	83 c4 10             	add    esp,0x10
c000e91e:	89 c3                	mov    ebx,eax
c000e920:	83 ec 0c             	sub    esp,0xc
c000e923:	53                   	push   ebx
c000e924:	e8 71 a1 00 00       	call   c0018a9a <IDE::IDE()>
c000e929:	83 c4 10             	add    esp,0x10
c000e92c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e934:	83 ec 08             	sub    esp,0x8
c000e937:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e93b:	50                   	push   eax
c000e93c:	e8 53 cf ff ff       	call   c000b894 <Device::addChild(Device*)>
c000e941:	83 c4 10             	add    esp,0x10
c000e944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e948:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e956:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000e95f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e963:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000e96c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e970:	8b 00                	mov    eax,DWORD PTR [eax]
c000e972:	83 c0 08             	add    eax,0x8
c000e975:	8b 00                	mov    eax,DWORD PTR [eax]
c000e977:	6a 00                	push   0x0
c000e979:	6a 00                	push   0x0
c000e97b:	6a 00                	push   0x0
c000e97d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e981:	ff d0                	call   eax
c000e983:	83 c4 10             	add    esp,0x10
c000e986:	66 90                	xchg   ax,ax
c000e988:	90                   	nop
c000e989:	83 c4 28             	add    esp,0x28
c000e98c:	5b                   	pop    ebx
c000e98d:	c3                   	ret    
c000e98e:	66 90                	xchg   ax,ax

c000e990 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000e990:	83 ec 1c             	sub    esp,0x1c
c000e993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e997:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e99a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e99e:	8b 15 18 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020418
c000e9a4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9a8:	25 ff 00 00 00       	and    eax,0xff
c000e9ad:	83 ec 08             	sub    esp,0x8
c000e9b0:	50                   	push   eax
c000e9b1:	52                   	push   edx
c000e9b2:	e8 ef 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000e9b7:	83 c4 10             	add    esp,0x10
c000e9ba:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000e9be:	8b 15 18 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020418
c000e9c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e9c8:	25 ff 00 00 00       	and    eax,0xff
c000e9cd:	83 ec 04             	sub    esp,0x4
c000e9d0:	6a 01                	push   0x1
c000e9d2:	50                   	push   eax
c000e9d3:	52                   	push   edx
c000e9d4:	e8 e3 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000e9d9:	83 c4 10             	add    esp,0x10
c000e9dc:	90                   	nop
c000e9dd:	83 c4 1c             	add    esp,0x1c
c000e9e0:	c3                   	ret    
c000e9e1:	90                   	nop
c000e9e2:	66 90                	xchg   ax,ax

c000e9e4 <ACPI::sleep()>:
c000e9e4:	83 ec 0c             	sub    esp,0xc
c000e9e7:	a1 00 2a 02 c0       	mov    eax,ds:0xc0022a00
c000e9ec:	85 c0                	test   eax,eax
c000e9ee:	74 08                	je     c000e9f8 <ACPI::sleep()+0x14>
c000e9f0:	a1 00 2a 02 c0       	mov    eax,ds:0xc0022a00
c000e9f5:	ff d0                	call   eax
c000e9f7:	90                   	nop
c000e9f8:	90                   	nop
c000e9f9:	83 c4 0c             	add    esp,0xc
c000e9fc:	c3                   	ret    
c000e9fd:	90                   	nop
c000e9fe:	66 90                	xchg   ax,ax

c000ea00 <ACPI::open(int, int, void*)>:
c000ea00:	57                   	push   edi
c000ea01:	56                   	push   esi
c000ea02:	53                   	push   ebx
c000ea03:	81 ec 70 01 00 00    	sub    esp,0x170
c000ea09:	83 ec 0c             	sub    esp,0xc
c000ea0c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ea13:	e8 70 fd ff ff       	call   c000e788 <ACPI::detectPCI()>
c000ea18:	83 c4 10             	add    esp,0x10
c000ea1b:	83 ec 0c             	sub    esp,0xc
c000ea1e:	68 e0 dd 01 c0       	push   0xc001dde0
c000ea23:	e8 17 10 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000ea28:	83 c4 10             	add    esp,0x10
c000ea2b:	83 ec 0c             	sub    esp,0xc
c000ea2e:	68 70 de 01 c0       	push   0xc001de70
c000ea33:	e8 27 34 00 00       	call   c0011e5f <Thr::loadKernelSymbolTable(char const*)>
c000ea38:	83 c4 10             	add    esp,0x10
c000ea3b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ea43:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ea4e:	83 ec 0c             	sub    esp,0xc
c000ea51:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ea58:	e8 5c 8d ff ff       	call   c00077b9 <malloc>
c000ea5d:	83 c4 10             	add    esp,0x10
c000ea60:	89 c3                	mov    ebx,eax
c000ea62:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000ea67:	83 ec 04             	sub    esp,0x4
c000ea6a:	50                   	push   eax
c000ea6b:	68 8e de 01 c0       	push   0xc001de8e
c000ea70:	53                   	push   ebx
c000ea71:	e8 54 bf ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ea76:	83 c4 10             	add    esp,0x10
c000ea79:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ea80:	83 ec 08             	sub    esp,0x8
c000ea83:	6a 01                	push   0x1
c000ea85:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ea8c:	e8 f9 bf ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000ea91:	83 c4 10             	add    esp,0x10
c000ea94:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ea9b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eaa3:	75 17                	jne    c000eabc <ACPI::open(int, int, void*)+0xbc>
c000eaa5:	83 ec 0c             	sub    esp,0xc
c000eaa8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eaaf:	e8 34 c0 ff ff       	call   c000aae8 <File::close()>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	eb 0b                	jmp    c000eac4 <ACPI::open(int, int, void*)+0xc4>
c000eab9:	8d 76 00             	lea    esi,[esi+0x0]
c000eabc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eac4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eacc:	74 1e                	je     c000eaec <ACPI::open(int, int, void*)+0xec>
c000eace:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ead5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ead7:	83 c0 08             	add    eax,0x8
c000eada:	8b 00                	mov    eax,DWORD PTR [eax]
c000eadc:	83 ec 0c             	sub    esp,0xc
c000eadf:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eae6:	ff d0                	call   eax
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	90                   	nop
c000eaec:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eaf3:	83 f0 01             	xor    eax,0x1
c000eaf6:	84 c0                	test   al,al
c000eaf8:	74 42                	je     c000eb3c <ACPI::open(int, int, void*)+0x13c>
c000eafa:	83 ec 0c             	sub    esp,0xc
c000eafd:	68 ac de 01 c0       	push   0xc001deac
c000eb02:	e8 38 0f 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000eb07:	83 c4 10             	add    esp,0x10
c000eb0a:	83 ec 04             	sub    esp,0x4
c000eb0d:	6a 0c                	push   0xc
c000eb0f:	68 c7 de 01 c0       	push   0xc001dec7
c000eb14:	68 d8 de 01 c0       	push   0xc001ded8
c000eb19:	e8 6c 29 00 00       	call   c001148a <Reg::readIntWithDefault(char*, char*, int)>
c000eb1e:	83 c4 10             	add    esp,0x10
c000eb21:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000eb28:	83 ec 0c             	sub    esp,0xc
c000eb2b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000eb32:	e8 d4 a8 ff ff       	call   c000940b <Virt::setupPageSwapping(int)>
c000eb37:	83 c4 10             	add    esp,0x10
c000eb3a:	66 90                	xchg   ax,ax
c000eb3c:	83 ec 0c             	sub    esp,0xc
c000eb3f:	68 57 cf 01 c0       	push   0xc001cf57
c000eb44:	e8 f6 0e 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eb53:	83 ec 08             	sub    esp,0x8
c000eb56:	6a 12                	push   0x12
c000eb58:	50                   	push   eax
c000eb59:	e8 4e d0 ff ff       	call   c000bbac <getDevicesOfType(DeviceType)>
c000eb5e:	83 c4 0c             	add    esp,0xc
c000eb61:	8d 76 00             	lea    esi,[esi+0x0]
c000eb64:	83 ec 0c             	sub    esp,0xc
c000eb67:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eb6e:	50                   	push   eax
c000eb6f:	e8 28 d8 00 00       	call   c001c39c <LinkedList<Device>::isEmpty()>
c000eb74:	83 c4 10             	add    esp,0x10
c000eb77:	83 f0 01             	xor    eax,0x1
c000eb7a:	84 c0                	test   al,al
c000eb7c:	0f 84 46 01 00 00    	je     c000ecc8 <ACPI::open(int, int, void*)+0x2c8>
c000eb82:	83 ec 0c             	sub    esp,0xc
c000eb85:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eb8c:	50                   	push   eax
c000eb8d:	e8 26 d8 00 00       	call   c001c3b8 <LinkedList<Device>::getFirstElement()>
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eb9c:	83 ec 0c             	sub    esp,0xc
c000eb9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eba6:	50                   	push   eax
c000eba7:	e8 14 d8 00 00       	call   c001c3c0 <LinkedList<Device>::removeFirst()>
c000ebac:	83 c4 10             	add    esp,0x10
c000ebaf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ebb6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ebbd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ebc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ebc8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ebce:	ba 09 00 00 00       	mov    edx,0x9
c000ebd3:	fc                   	cld    
c000ebd4:	89 c7                	mov    edi,eax
c000ebd6:	89 de                	mov    esi,ebx
c000ebd8:	89 d1                	mov    ecx,edx
c000ebda:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ebdc:	83 ec 08             	sub    esp,0x8
c000ebdf:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ebe3:	50                   	push   eax
c000ebe4:	83 ec 24             	sub    esp,0x24
c000ebe7:	89 e0                	mov    eax,esp
c000ebe9:	89 c3                	mov    ebx,eax
c000ebeb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ebef:	ba 09 00 00 00       	mov    edx,0x9
c000ebf4:	89 df                	mov    edi,ebx
c000ebf6:	89 c6                	mov    esi,eax
c000ebf8:	89 d1                	mov    ecx,edx
c000ebfa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ebfc:	e8 4f 98 00 00       	call   c0018450 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ec01:	83 c4 30             	add    esp,0x30
c000ec04:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ec0b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ec13:	0f 84 4b ff ff ff    	je     c000eb64 <ACPI::open(int, int, void*)+0x164>
c000ec19:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ec24:	83 ec 0c             	sub    esp,0xc
c000ec27:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ec2e:	e8 86 8b ff ff       	call   c00077b9 <malloc>
c000ec33:	83 c4 10             	add    esp,0x10
c000ec36:	89 c3                	mov    ebx,eax
c000ec38:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000ec3d:	83 ec 04             	sub    esp,0x4
c000ec40:	50                   	push   eax
c000ec41:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec48:	53                   	push   ebx
c000ec49:	e8 7c bd ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ec4e:	83 c4 10             	add    esp,0x10
c000ec51:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ec62:	e8 91 c0 ff ff       	call   c000acf8 <File::exists()>
c000ec67:	83 c4 10             	add    esp,0x10
c000ec6a:	84 c0                	test   al,al
c000ec6c:	74 2a                	je     c000ec98 <ACPI::open(int, int, void*)+0x298>
c000ec6e:	83 ec 08             	sub    esp,0x8
c000ec71:	6a 01                	push   0x1
c000ec73:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ec7a:	e8 57 3c 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	83 ec 08             	sub    esp,0x8
c000ec85:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ec8c:	50                   	push   eax
c000ec8d:	e8 75 3e 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000ec92:	83 c4 10             	add    esp,0x10
c000ec95:	8d 76 00             	lea    esi,[esi+0x0]
c000ec98:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eca0:	0f 84 be fe ff ff    	je     c000eb64 <ACPI::open(int, int, void*)+0x164>
c000eca6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ecad:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecaf:	83 c0 08             	add    eax,0x8
c000ecb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecb4:	83 ec 0c             	sub    esp,0xc
c000ecb7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecbe:	ff d0                	call   eax
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	e9 9c fe ff ff       	jmp    c000eb64 <ACPI::open(int, int, void*)+0x164>
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecd2:	50                   	push   eax
c000ecd3:	e8 c0 d6 00 00       	call   c001c398 <LinkedList<Device>::~LinkedList()>
c000ecd8:	83 c4 10             	add    esp,0x10
c000ecdb:	8b 1d 18 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020418
c000ece1:	83 ec 08             	sub    esp,0x8
c000ece4:	6a 01                	push   0x1
c000ece6:	68 df de 01 c0       	push   0xc001dedf
c000eceb:	e8 e6 3b 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000ecf0:	83 c4 10             	add    esp,0x10
c000ecf3:	83 ec 08             	sub    esp,0x8
c000ecf6:	53                   	push   ebx
c000ecf7:	50                   	push   eax
c000ecf8:	e8 0a 3e 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000ed05:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed0b:	83 e0 04             	and    eax,0x4
c000ed0e:	84 c0                	test   al,al
c000ed10:	0f 84 16 01 00 00    	je     c000ee2c <ACPI::open(int, int, void*)+0x42c>
c000ed16:	83 ec 0c             	sub    esp,0xc
c000ed19:	68 fc de 01 c0       	push   0xc001defc
c000ed1e:	e8 1c 0d 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000ed23:	83 c4 10             	add    esp,0x10
c000ed26:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ed31:	83 ec 0c             	sub    esp,0xc
c000ed34:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ed3b:	e8 79 8a ff ff       	call   c00077b9 <malloc>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	89 c3                	mov    ebx,eax
c000ed45:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c000ed4a:	83 ec 04             	sub    esp,0x4
c000ed4d:	50                   	push   eax
c000ed4e:	68 19 df 01 c0       	push   0xc001df19
c000ed53:	53                   	push   ebx
c000ed54:	e8 71 bc ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000ed59:	83 c4 10             	add    esp,0x10
c000ed5c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ed63:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ed6b:	74 1b                	je     c000ed88 <ACPI::open(int, int, void*)+0x388>
c000ed6d:	83 ec 0c             	sub    esp,0xc
c000ed70:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ed77:	e8 7c bf ff ff       	call   c000acf8 <File::exists()>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	84 c0                	test   al,al
c000ed81:	74 05                	je     c000ed88 <ACPI::open(int, int, void*)+0x388>
c000ed83:	b0 01                	mov    al,0x1
c000ed85:	eb 05                	jmp    c000ed8c <ACPI::open(int, int, void*)+0x38c>
c000ed87:	90                   	nop
c000ed88:	b0 00                	mov    al,0x0
c000ed8a:	66 90                	xchg   ax,ax
c000ed8c:	84 c0                	test   al,al
c000ed8e:	74 28                	je     c000edb8 <ACPI::open(int, int, void*)+0x3b8>
c000ed90:	83 ec 08             	sub    esp,0x8
c000ed93:	6a 01                	push   0x1
c000ed95:	68 19 df 01 c0       	push   0xc001df19
c000ed9a:	e8 37 3b 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c000ed9f:	83 c4 10             	add    esp,0x10
c000eda2:	83 ec 08             	sub    esp,0x8
c000eda5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000edac:	50                   	push   eax
c000edad:	e8 55 3d 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c000edb2:	83 c4 10             	add    esp,0x10
c000edb5:	8d 76 00             	lea    esi,[esi+0x0]
c000edb8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edc0:	74 2a                	je     c000edec <ACPI::open(int, int, void*)+0x3ec>
c000edc2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000edca:	74 20                	je     c000edec <ACPI::open(int, int, void*)+0x3ec>
c000edcc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000edd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000edd5:	83 c0 08             	add    eax,0x8
c000edd8:	8b 00                	mov    eax,DWORD PTR [eax]
c000edda:	83 ec 0c             	sub    esp,0xc
c000eddd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ede4:	ff d0                	call   eax
c000ede6:	83 c4 10             	add    esp,0x10
c000ede9:	8d 76 00             	lea    esi,[esi+0x0]
c000edec:	a1 28 2c 02 c0       	mov    eax,ds:0xc0022c28
c000edf1:	83 ec 08             	sub    esp,0x8
c000edf4:	68 36 df 01 c0       	push   0xc001df36
c000edf9:	50                   	push   eax
c000edfa:	e8 31 f2 ff ff       	call   c000e030 <findDataTable(unsigned char*, char*)>
c000edff:	83 c4 10             	add    esp,0x10
c000ee02:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ee09:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ee11:	74 19                	je     c000ee2c <ACPI::open(int, int, void*)+0x42c>
c000ee13:	83 ec 08             	sub    esp,0x8
c000ee16:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ee1d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ee24:	e8 67 fb ff ff       	call   c000e990 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ee29:	83 c4 10             	add    esp,0x10
c000ee2c:	b8 00 00 00 00       	mov    eax,0x0
c000ee31:	81 c4 70 01 00 00    	add    esp,0x170
c000ee37:	5b                   	pop    ebx
c000ee38:	5e                   	pop    esi
c000ee39:	5f                   	pop    edi
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <CPU::close(int, int, void*)>:
c000ee3c:	31 c0                	xor    eax,eax
c000ee3e:	c3                   	ret    
c000ee3f:	90                   	nop

c000ee40 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ee40:	60                   	pusha  
c000ee41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee4d:	9c                   	pushf  
c000ee4e:	fa                   	cli    
c000ee4f:	0f 09                	wbinvd 
c000ee51:	0f 30                	wrmsr  
c000ee53:	9d                   	popf   
c000ee54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ee58:	89 02                	mov    DWORD PTR [edx],eax
c000ee5a:	61                   	popa   
c000ee5b:	c3                   	ret    

c000ee5c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ee5c:	60                   	pusha  
c000ee5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee61:	9c                   	pushf  
c000ee62:	fa                   	cli    
c000ee63:	0f 09                	wbinvd 
c000ee65:	31 c0                	xor    eax,eax
c000ee67:	31 d2                	xor    edx,edx
c000ee69:	0f 32                	rdmsr  
c000ee6b:	9d                   	popf   
c000ee6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee70:	89 02                	mov    DWORD PTR [edx],eax
c000ee72:	61                   	popa   
c000ee73:	c3                   	ret    

c000ee74 <CPU::AMD_K6_writeback(int, int, int)>:
c000ee74:	56                   	push   esi
c000ee75:	53                   	push   ebx
c000ee76:	83 ec 10             	sub    esp,0x10
c000ee79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ee82:	75 5d                	jne    c000eee1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ee84:	83 f8 08             	cmp    eax,0x8
c000ee87:	75 09                	jne    c000ee92 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ee89:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ee8e:	7e 13                	jle    c000eea3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ee90:	eb 30                	jmp    c000eec2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ee92:	83 f8 06             	cmp    eax,0x6
c000ee95:	7c 4a                	jl     c000eee1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ee97:	83 f8 07             	cmp    eax,0x7
c000ee9a:	7e 07                	jle    c000eea3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ee9c:	83 f8 09             	cmp    eax,0x9
c000ee9f:	74 21                	je     c000eec2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000eea1:	eb 3e                	jmp    c000eee1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000eea3:	89 e6                	mov    esi,esp
c000eea5:	8b 1d 3c 04 02 c0    	mov    ebx,DWORD PTR ds:0xc002043c
c000eeab:	56                   	push   esi
c000eeac:	c1 eb 15             	shr    ebx,0x15
c000eeaf:	68 82 00 00 c0       	push   0xc0000082
c000eeb4:	83 e3 7e             	and    ebx,0x7e
c000eeb7:	e8 a0 ff ff ff       	call   c000ee5c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000eebc:	56                   	push   esi
c000eebd:	6a 00                	push   0x0
c000eebf:	53                   	push   ebx
c000eec0:	eb 12                	jmp    c000eed4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000eec2:	89 e3                	mov    ebx,esp
c000eec4:	53                   	push   ebx
c000eec5:	68 82 00 00 c0       	push   0xc0000082
c000eeca:	e8 8d ff ff ff       	call   c000ee5c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000eecf:	53                   	push   ebx
c000eed0:	6a 00                	push   0x0
c000eed2:	6a 00                	push   0x0
c000eed4:	68 82 00 00 c0       	push   0xc0000082
c000eed9:	e8 62 ff ff ff       	call   c000ee40 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000eede:	83 c4 18             	add    esp,0x18
c000eee1:	83 c4 10             	add    esp,0x10
c000eee4:	5b                   	pop    ebx
c000eee5:	5e                   	pop    esi
c000eee6:	c3                   	ret    
c000eee7:	90                   	nop

c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000eee8:	55                   	push   ebp
c000eee9:	57                   	push   edi
c000eeea:	56                   	push   esi
c000eeeb:	53                   	push   ebx
c000eeec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eef0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eef4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eef8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000eefc:	39 05 50 f1 01 c0    	cmp    DWORD PTR ds:0xc001f150,eax
c000ef02:	75 23                	jne    c000ef27 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ef04:	a1 8c 2e 02 c0       	mov    eax,ds:0xc0022e8c
c000ef09:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ef0d:	89 06                	mov    DWORD PTR [esi],eax
c000ef0f:	a1 88 2e 02 c0       	mov    eax,ds:0xc0022e88
c000ef14:	89 07                	mov    DWORD PTR [edi],eax
c000ef16:	a1 84 2e 02 c0       	mov    eax,ds:0xc0022e84
c000ef1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ef1e:	a1 80 2e 02 c0       	mov    eax,ds:0xc0022e80
c000ef23:	89 02                	mov    DWORD PTR [edx],eax
c000ef25:	eb 3f                	jmp    c000ef66 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ef27:	31 c9                	xor    ecx,ecx
c000ef29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef2d:	0f a2                	cpuid  
c000ef2f:	89 06                	mov    DWORD PTR [esi],eax
c000ef31:	89 1f                	mov    DWORD PTR [edi],ebx
c000ef33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef37:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ef3a:	89 10                	mov    DWORD PTR [eax],edx
c000ef3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef40:	a3 50 f1 01 c0       	mov    ds:0xc001f150,eax
c000ef45:	8b 06                	mov    eax,DWORD PTR [esi]
c000ef47:	a3 8c 2e 02 c0       	mov    ds:0xc0022e8c,eax
c000ef4c:	8b 07                	mov    eax,DWORD PTR [edi]
c000ef4e:	a3 88 2e 02 c0       	mov    ds:0xc0022e88,eax
c000ef53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ef56:	a3 84 2e 02 c0       	mov    ds:0xc0022e84,eax
c000ef5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ef5f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef61:	a3 80 2e 02 c0       	mov    ds:0xc0022e80,eax
c000ef66:	5b                   	pop    ebx
c000ef67:	5e                   	pop    esi
c000ef68:	5f                   	pop    edi
c000ef69:	5d                   	pop    ebp
c000ef6a:	c3                   	ret    
c000ef6b:	90                   	nop

c000ef6c <CPU::cpuidCheckEDX(unsigned int)>:
c000ef6c:	83 ec 10             	sub    esp,0x10
c000ef6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef73:	50                   	push   eax
c000ef74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef78:	50                   	push   eax
c000ef79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef7d:	50                   	push   eax
c000ef7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef82:	50                   	push   eax
c000ef83:	6a 01                	push   0x1
c000ef85:	e8 5e ff ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ef8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ef8e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ef92:	0f 95 c0             	setne  al
c000ef95:	83 c4 24             	add    esp,0x24
c000ef98:	c3                   	ret    
c000ef99:	90                   	nop

c000ef9a <CPU::cpuidCheckECX(unsigned int)>:
c000ef9a:	83 ec 10             	sub    esp,0x10
c000ef9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efa1:	50                   	push   eax
c000efa2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efa6:	50                   	push   eax
c000efa7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efab:	50                   	push   eax
c000efac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efb0:	50                   	push   eax
c000efb1:	6a 01                	push   0x1
c000efb3:	e8 30 ff ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efbc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000efc0:	0f 95 c0             	setne  al
c000efc3:	83 c4 24             	add    esp,0x24
c000efc6:	c3                   	ret    
c000efc7:	90                   	nop

c000efc8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000efc8:	83 ec 10             	sub    esp,0x10
c000efcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efcf:	50                   	push   eax
c000efd0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efd4:	50                   	push   eax
c000efd5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efd9:	50                   	push   eax
c000efda:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000efde:	50                   	push   eax
c000efdf:	6a 07                	push   0x7
c000efe1:	e8 02 ff ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000efe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000efea:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000efee:	0f 95 c0             	setne  al
c000eff1:	83 c4 24             	add    esp,0x24
c000eff4:	c3                   	ret    
c000eff5:	90                   	nop

c000eff6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000eff6:	83 ec 10             	sub    esp,0x10
c000eff9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000effd:	50                   	push   eax
c000effe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f002:	50                   	push   eax
c000f003:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f007:	50                   	push   eax
c000f008:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f00c:	50                   	push   eax
c000f00d:	6a 07                	push   0x7
c000f00f:	e8 d4 fe ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f014:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f018:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f01c:	0f 95 c0             	setne  al
c000f01f:	83 c4 24             	add    esp,0x24
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <CPU::CPU()>:
c000f024:	83 ec 0c             	sub    esp,0xc
c000f027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f02b:	83 ec 08             	sub    esp,0x8
c000f02e:	68 59 e0 01 c0       	push   0xc001e059
c000f033:	50                   	push   eax
c000f034:	e8 f3 c9 ff ff       	call   c000ba2c <Device::Device(char const*)>
c000f039:	83 c4 10             	add    esp,0x10
c000f03c:	ba e0 e0 01 c0       	mov    edx,0xc001e0e0
c000f041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f045:	89 10                	mov    DWORD PTR [eax],edx
c000f047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f04b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f059:	05 78 01 00 00       	add    eax,0x178
c000f05e:	83 ec 0c             	sub    esp,0xc
c000f061:	50                   	push   eax
c000f062:	e8 13 80 ff ff       	call   c000707a <GDT::GDT()>
c000f067:	83 c4 10             	add    esp,0x10
c000f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f06e:	05 7c 09 00 00       	add    eax,0x97c
c000f073:	83 ec 0c             	sub    esp,0xc
c000f076:	50                   	push   eax
c000f077:	e8 38 82 ff ff       	call   c00072b4 <IDT::IDT()>
c000f07c:	83 c4 10             	add    esp,0x10
c000f07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f083:	05 7c 11 00 00       	add    eax,0x117c
c000f088:	83 ec 0c             	sub    esp,0xc
c000f08b:	50                   	push   eax
c000f08c:	e8 b3 9a ff ff       	call   c0008b44 <TSS::TSS()>
c000f091:	83 c4 10             	add    esp,0x10
c000f094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f098:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0a3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f0ad:	90                   	nop
c000f0ae:	83 c4 0c             	add    esp,0xc
c000f0b1:	c3                   	ret    

c000f0b2 <CPU::displayFeatures()>:
c000f0b2:	c3                   	ret    
c000f0b3:	90                   	nop

c000f0b4 <CPU::detectFeatures()>:
c000f0b4:	55                   	push   ebp
c000f0b5:	57                   	push   edi
c000f0b6:	56                   	push   esi
c000f0b7:	53                   	push   ebx
c000f0b8:	83 ec 30             	sub    esp,0x30
c000f0bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f0bf:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f0c9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f0d0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f0d6:	6a 0d                	push   0xd
c000f0d8:	6a 00                	push   0x0
c000f0da:	55                   	push   ebp
c000f0db:	e8 f0 13 ff ff       	call   c00004d0 <memset>
c000f0e0:	83 c4 10             	add    esp,0x10
c000f0e3:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000f0e8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f0ef:	0f 84 d5 05 00 00    	je     c000f6ca <CPU::detectFeatures()+0x616>
c000f0f5:	83 ec 0c             	sub    esp,0xc
c000f0f8:	89 ef                	mov    edi,ebp
c000f0fa:	6a 10                	push   0x10
c000f0fc:	e8 6b fe ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f101:	83 e0 01             	and    eax,0x1
c000f104:	8d 14 00             	lea    edx,[eax+eax*1]
c000f107:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f10d:	83 e0 fd             	and    eax,0xfffffffd
c000f110:	09 d0                	or     eax,edx
c000f112:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f118:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f11f:	e8 48 fe ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f124:	83 e0 01             	and    eax,0x1
c000f127:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f12e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f134:	83 e0 fb             	and    eax,0xfffffffb
c000f137:	09 d0                	or     eax,edx
c000f139:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f13f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f146:	e8 21 fe ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f14b:	83 e0 01             	and    eax,0x1
c000f14e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f155:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f15b:	83 e0 f7             	and    eax,0xfffffff7
c000f15e:	09 d0                	or     eax,edx
c000f160:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f166:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f16d:	e8 fa fd ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f172:	83 e0 01             	and    eax,0x1
c000f175:	c1 e0 04             	shl    eax,0x4
c000f178:	88 c2                	mov    dl,al
c000f17a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f180:	83 e0 ef             	and    eax,0xffffffef
c000f183:	09 d0                	or     eax,edx
c000f185:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f18b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f192:	e8 d5 fd ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f197:	83 e0 01             	and    eax,0x1
c000f19a:	c1 e0 05             	shl    eax,0x5
c000f19d:	88 c2                	mov    dl,al
c000f19f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1a5:	83 e0 df             	and    eax,0xffffffdf
c000f1a8:	09 d0                	or     eax,edx
c000f1aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1b0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f1b7:	e8 b0 fd ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f1bc:	83 e0 01             	and    eax,0x1
c000f1bf:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1c2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f1c8:	83 e0 fd             	and    eax,0xfffffffd
c000f1cb:	09 d0                	or     eax,edx
c000f1cd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f1d3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f1da:	e8 8d fd ff ff       	call   c000ef6c <CPU::cpuidCheckEDX(unsigned int)>
c000f1df:	83 e0 01             	and    eax,0x1
c000f1e2:	c1 e0 06             	shl    eax,0x6
c000f1e5:	88 c2                	mov    dl,al
c000f1e7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f1ed:	83 e0 bf             	and    eax,0xffffffbf
c000f1f0:	09 d0                	or     eax,edx
c000f1f2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f1f8:	58                   	pop    eax
c000f1f9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f1fd:	50                   	push   eax
c000f1fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f202:	50                   	push   eax
c000f203:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f207:	56                   	push   esi
c000f208:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f20c:	50                   	push   eax
c000f20d:	6a 00                	push   0x0
c000f20f:	e8 d4 fc ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f214:	b8 04 00 00 00       	mov    eax,0x4
c000f219:	89 c1                	mov    ecx,eax
c000f21b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f21d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f223:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f227:	89 c1                	mov    ecx,eax
c000f229:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f22b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f231:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f235:	89 c1                	mov    ecx,eax
c000f237:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f239:	83 c4 18             	add    esp,0x18
c000f23c:	68 68 df 01 c0       	push   0xc001df68
c000f241:	55                   	push   ebp
c000f242:	e8 99 14 ff ff       	call   c00006e0 <strcmp>
c000f247:	83 c4 10             	add    esp,0x10
c000f24a:	85 c0                	test   eax,eax
c000f24c:	75 0f                	jne    c000f25d <CPU::detectFeatures()+0x1a9>
c000f24e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f258:	e9 22 02 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f25d:	50                   	push   eax
c000f25e:	50                   	push   eax
c000f25f:	68 75 df 01 c0       	push   0xc001df75
c000f264:	55                   	push   ebp
c000f265:	e8 76 14 ff ff       	call   c00006e0 <strcmp>
c000f26a:	83 c4 10             	add    esp,0x10
c000f26d:	85 c0                	test   eax,eax
c000f26f:	74 dd                	je     c000f24e <CPU::detectFeatures()+0x19a>
c000f271:	50                   	push   eax
c000f272:	50                   	push   eax
c000f273:	68 82 df 01 c0       	push   0xc001df82
c000f278:	55                   	push   ebp
c000f279:	e8 62 14 ff ff       	call   c00006e0 <strcmp>
c000f27e:	83 c4 10             	add    esp,0x10
c000f281:	85 c0                	test   eax,eax
c000f283:	74 2a                	je     c000f2af <CPU::detectFeatures()+0x1fb>
c000f285:	50                   	push   eax
c000f286:	50                   	push   eax
c000f287:	68 8f df 01 c0       	push   0xc001df8f
c000f28c:	55                   	push   ebp
c000f28d:	e8 4e 14 ff ff       	call   c00006e0 <strcmp>
c000f292:	83 c4 10             	add    esp,0x10
c000f295:	85 c0                	test   eax,eax
c000f297:	74 16                	je     c000f2af <CPU::detectFeatures()+0x1fb>
c000f299:	50                   	push   eax
c000f29a:	50                   	push   eax
c000f29b:	68 9c df 01 c0       	push   0xc001df9c
c000f2a0:	55                   	push   ebp
c000f2a1:	e8 3a 14 ff ff       	call   c00006e0 <strcmp>
c000f2a6:	83 c4 10             	add    esp,0x10
c000f2a9:	85 c0                	test   eax,eax
c000f2ab:	74 48                	je     c000f2f5 <CPU::detectFeatures()+0x241>
c000f2ad:	eb 0f                	jmp    c000f2be <CPU::detectFeatures()+0x20a>
c000f2af:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f2b9:	e9 c1 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f2be:	50                   	push   eax
c000f2bf:	50                   	push   eax
c000f2c0:	68 a9 df 01 c0       	push   0xc001dfa9
c000f2c5:	55                   	push   ebp
c000f2c6:	e8 15 14 ff ff       	call   c00006e0 <strcmp>
c000f2cb:	83 c4 10             	add    esp,0x10
c000f2ce:	85 c0                	test   eax,eax
c000f2d0:	74 23                	je     c000f2f5 <CPU::detectFeatures()+0x241>
c000f2d2:	57                   	push   edi
c000f2d3:	57                   	push   edi
c000f2d4:	68 b6 df 01 c0       	push   0xc001dfb6
c000f2d9:	55                   	push   ebp
c000f2da:	e8 01 14 ff ff       	call   c00006e0 <strcmp>
c000f2df:	83 c4 10             	add    esp,0x10
c000f2e2:	85 c0                	test   eax,eax
c000f2e4:	75 1e                	jne    c000f304 <CPU::detectFeatures()+0x250>
c000f2e6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f2f0:	e9 8a 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f2f5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f2ff:	e9 7b 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f304:	56                   	push   esi
c000f305:	56                   	push   esi
c000f306:	68 c3 df 01 c0       	push   0xc001dfc3
c000f30b:	55                   	push   ebp
c000f30c:	e8 cf 13 ff ff       	call   c00006e0 <strcmp>
c000f311:	83 c4 10             	add    esp,0x10
c000f314:	85 c0                	test   eax,eax
c000f316:	75 0f                	jne    c000f327 <CPU::detectFeatures()+0x273>
c000f318:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f322:	e9 58 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f327:	51                   	push   ecx
c000f328:	51                   	push   ecx
c000f329:	68 82 df 01 c0       	push   0xc001df82
c000f32e:	55                   	push   ebp
c000f32f:	e8 ac 13 ff ff       	call   c00006e0 <strcmp>
c000f334:	83 c4 10             	add    esp,0x10
c000f337:	85 c0                	test   eax,eax
c000f339:	75 0f                	jne    c000f34a <CPU::detectFeatures()+0x296>
c000f33b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f345:	e9 35 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f34a:	52                   	push   edx
c000f34b:	52                   	push   edx
c000f34c:	68 d0 df 01 c0       	push   0xc001dfd0
c000f351:	55                   	push   ebp
c000f352:	e8 89 13 ff ff       	call   c00006e0 <strcmp>
c000f357:	83 c4 10             	add    esp,0x10
c000f35a:	85 c0                	test   eax,eax
c000f35c:	75 0f                	jne    c000f36d <CPU::detectFeatures()+0x2b9>
c000f35e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f368:	e9 12 01 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f36d:	50                   	push   eax
c000f36e:	50                   	push   eax
c000f36f:	68 dd df 01 c0       	push   0xc001dfdd
c000f374:	55                   	push   ebp
c000f375:	e8 66 13 ff ff       	call   c00006e0 <strcmp>
c000f37a:	83 c4 10             	add    esp,0x10
c000f37d:	85 c0                	test   eax,eax
c000f37f:	75 0f                	jne    c000f390 <CPU::detectFeatures()+0x2dc>
c000f381:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f38b:	e9 ef 00 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f390:	50                   	push   eax
c000f391:	50                   	push   eax
c000f392:	68 ea df 01 c0       	push   0xc001dfea
c000f397:	55                   	push   ebp
c000f398:	e8 43 13 ff ff       	call   c00006e0 <strcmp>
c000f39d:	83 c4 10             	add    esp,0x10
c000f3a0:	85 c0                	test   eax,eax
c000f3a2:	75 0f                	jne    c000f3b3 <CPU::detectFeatures()+0x2ff>
c000f3a4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f3ae:	e9 cc 00 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f3b3:	50                   	push   eax
c000f3b4:	50                   	push   eax
c000f3b5:	68 f7 df 01 c0       	push   0xc001dff7
c000f3ba:	55                   	push   ebp
c000f3bb:	e8 20 13 ff ff       	call   c00006e0 <strcmp>
c000f3c0:	83 c4 10             	add    esp,0x10
c000f3c3:	85 c0                	test   eax,eax
c000f3c5:	75 0f                	jne    c000f3d6 <CPU::detectFeatures()+0x322>
c000f3c7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f3d1:	e9 a9 00 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f3d6:	50                   	push   eax
c000f3d7:	50                   	push   eax
c000f3d8:	68 04 e0 01 c0       	push   0xc001e004
c000f3dd:	55                   	push   ebp
c000f3de:	e8 fd 12 ff ff       	call   c00006e0 <strcmp>
c000f3e3:	83 c4 10             	add    esp,0x10
c000f3e6:	85 c0                	test   eax,eax
c000f3e8:	75 0f                	jne    c000f3f9 <CPU::detectFeatures()+0x345>
c000f3ea:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f3f4:	e9 86 00 00 00       	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f3f9:	50                   	push   eax
c000f3fa:	50                   	push   eax
c000f3fb:	68 11 e0 01 c0       	push   0xc001e011
c000f400:	55                   	push   ebp
c000f401:	e8 da 12 ff ff       	call   c00006e0 <strcmp>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	85 c0                	test   eax,eax
c000f40b:	75 0c                	jne    c000f419 <CPU::detectFeatures()+0x365>
c000f40d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f417:	eb 66                	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f419:	50                   	push   eax
c000f41a:	50                   	push   eax
c000f41b:	68 1e e0 01 c0       	push   0xc001e01e
c000f420:	55                   	push   ebp
c000f421:	e8 ba 12 ff ff       	call   c00006e0 <strcmp>
c000f426:	83 c4 10             	add    esp,0x10
c000f429:	85 c0                	test   eax,eax
c000f42b:	75 0c                	jne    c000f439 <CPU::detectFeatures()+0x385>
c000f42d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f437:	eb 46                	jmp    c000f47f <CPU::detectFeatures()+0x3cb>
c000f439:	57                   	push   edi
c000f43a:	57                   	push   edi
c000f43b:	68 2b e0 01 c0       	push   0xc001e02b
c000f440:	55                   	push   ebp
c000f441:	e8 9a 12 ff ff       	call   c00006e0 <strcmp>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	85 c0                	test   eax,eax
c000f44b:	74 e0                	je     c000f42d <CPU::detectFeatures()+0x379>
c000f44d:	56                   	push   esi
c000f44e:	56                   	push   esi
c000f44f:	68 38 e0 01 c0       	push   0xc001e038
c000f454:	55                   	push   ebp
c000f455:	e8 86 12 ff ff       	call   c00006e0 <strcmp>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	85 c0                	test   eax,eax
c000f45f:	74 cc                	je     c000f42d <CPU::detectFeatures()+0x379>
c000f461:	51                   	push   ecx
c000f462:	51                   	push   ecx
c000f463:	68 45 e0 01 c0       	push   0xc001e045
c000f468:	55                   	push   ebp
c000f469:	e8 72 12 ff ff       	call   c00006e0 <strcmp>
c000f46e:	83 c4 10             	add    esp,0x10
c000f471:	85 c0                	test   eax,eax
c000f473:	74 b8                	je     c000f42d <CPU::detectFeatures()+0x379>
c000f475:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f47f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f484:	0f 86 be 00 00 00    	jbe    c000f548 <CPU::detectFeatures()+0x494>
c000f48a:	83 ec 0c             	sub    esp,0xc
c000f48d:	68 80 00 00 00       	push   0x80
c000f492:	e8 31 fb ff ff       	call   c000efc8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f497:	83 e0 01             	and    eax,0x1
c000f49a:	c1 e0 06             	shl    eax,0x6
c000f49d:	88 c2                	mov    dl,al
c000f49f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4a5:	83 e0 bf             	and    eax,0xffffffbf
c000f4a8:	09 d0                	or     eax,edx
c000f4aa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4b0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f4b7:	e8 0c fb ff ff       	call   c000efc8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4bc:	83 e0 01             	and    eax,0x1
c000f4bf:	c1 e0 04             	shl    eax,0x4
c000f4c2:	88 c2                	mov    dl,al
c000f4c4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4ca:	83 e0 ef             	and    eax,0xffffffef
c000f4cd:	09 d0                	or     eax,edx
c000f4cf:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f4d5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f4dc:	e8 e7 fa ff ff       	call   c000efc8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f4e1:	c1 e0 07             	shl    eax,0x7
c000f4e4:	88 c2                	mov    dl,al
c000f4e6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4ec:	83 e0 7f             	and    eax,0x7f
c000f4ef:	09 d0                	or     eax,edx
c000f4f1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4f7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f4fe:	e8 f3 fa ff ff       	call   c000eff6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f503:	83 e0 01             	and    eax,0x1
c000f506:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f50d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f513:	83 e0 f7             	and    eax,0xfffffff7
c000f516:	09 d0                	or     eax,edx
c000f518:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f51e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f525:	e8 cc fa ff ff       	call   c000eff6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f52a:	83 c4 10             	add    esp,0x10
c000f52d:	83 e0 01             	and    eax,0x1
c000f530:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f537:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f53d:	83 e0 fb             	and    eax,0xfffffffb
c000f540:	09 d0                	or     eax,edx
c000f542:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f548:	83 ec 0c             	sub    esp,0xc
c000f54b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f54f:	50                   	push   eax
c000f550:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f554:	50                   	push   eax
c000f555:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f559:	56                   	push   esi
c000f55a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f55e:	50                   	push   eax
c000f55f:	6a 01                	push   0x1
c000f561:	e8 82 f9 ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f566:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f56a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f570:	88 ca                	mov    dl,cl
c000f572:	83 e0 f0             	and    eax,0xfffffff0
c000f575:	83 e2 0f             	and    edx,0xf
c000f578:	09 d0                	or     eax,edx
c000f57a:	88 ca                	mov    dl,cl
c000f57c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f582:	c0 ea 04             	shr    dl,0x4
c000f585:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f589:	0f b6 c2             	movzx  eax,dl
c000f58c:	83 c4 20             	add    esp,0x20
c000f58f:	c1 e0 06             	shl    eax,0x6
c000f592:	89 c7                	mov    edi,eax
c000f594:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f59a:	66 25 3f c0          	and    ax,0xc03f
c000f59e:	09 f8                	or     eax,edi
c000f5a0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f5a7:	89 c8                	mov    eax,ecx
c000f5a9:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f5b0:	c1 e8 08             	shr    eax,0x8
c000f5b3:	83 e5 3f             	and    ebp,0x3f
c000f5b6:	83 e0 0f             	and    eax,0xf
c000f5b9:	89 c7                	mov    edi,eax
c000f5bb:	c1 e7 06             	shl    edi,0x6
c000f5be:	09 ef                	or     edi,ebp
c000f5c0:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f5c7:	89 fa                	mov    edx,edi
c000f5c9:	83 e5 c0             	and    ebp,0xffffffc0
c000f5cc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f5d2:	88 c2                	mov    dl,al
c000f5d4:	c0 ea 02             	shr    dl,0x2
c000f5d7:	89 d7                	mov    edi,edx
c000f5d9:	09 ef                	or     edi,ebp
c000f5db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f5e1:	89 fa                	mov    edx,edi
c000f5e3:	83 e5 cf             	and    ebp,0xffffffcf
c000f5e6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f5ec:	89 cf                	mov    edi,ecx
c000f5ee:	c1 ef 0c             	shr    edi,0xc
c000f5f1:	83 e7 03             	and    edi,0x3
c000f5f4:	c1 e7 04             	shl    edi,0x4
c000f5f7:	09 ef                	or     edi,ebp
c000f5f9:	3c 06                	cmp    al,0x6
c000f5fb:	89 fa                	mov    edx,edi
c000f5fd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f603:	74 04                	je     c000f609 <CPU::detectFeatures()+0x555>
c000f605:	3c 0f                	cmp    al,0xf
c000f607:	75 5c                	jne    c000f665 <CPU::detectFeatures()+0x5b1>
c000f609:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f60d:	89 cf                	mov    edi,ecx
c000f60f:	c1 ef 10             	shr    edi,0x10
c000f612:	c1 e7 04             	shl    edi,0x4
c000f615:	09 fa                	or     edx,edi
c000f617:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f61d:	0f b6 d2             	movzx  edx,dl
c000f620:	66 81 e7 3f c0       	and    di,0xc03f
c000f625:	c1 e2 06             	shl    edx,0x6
c000f628:	09 fa                	or     edx,edi
c000f62a:	3c 0f                	cmp    al,0xf
c000f62c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f633:	75 30                	jne    c000f665 <CPU::detectFeatures()+0x5b1>
c000f635:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f63b:	c1 e9 14             	shr    ecx,0x14
c000f63e:	83 e0 3f             	and    eax,0x3f
c000f641:	83 c1 0f             	add    ecx,0xf
c000f644:	88 ca                	mov    dl,cl
c000f646:	c0 e9 02             	shr    cl,0x2
c000f649:	c1 e2 06             	shl    edx,0x6
c000f64c:	09 d0                	or     eax,edx
c000f64e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f654:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f65a:	83 e0 c0             	and    eax,0xffffffc0
c000f65d:	09 c1                	or     ecx,eax
c000f65f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f665:	83 ec 0c             	sub    esp,0xc
c000f668:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f66f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f673:	50                   	push   eax
c000f674:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f678:	55                   	push   ebp
c000f679:	56                   	push   esi
c000f67a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f67e:	57                   	push   edi
c000f67f:	68 00 00 00 80       	push   0x80000000
c000f684:	e8 5f f8 ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f689:	83 c4 20             	add    esp,0x20
c000f68c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f694:	76 22                	jbe    c000f6b8 <CPU::detectFeatures()+0x604>
c000f696:	83 ec 0c             	sub    esp,0xc
c000f699:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f69d:	50                   	push   eax
c000f69e:	55                   	push   ebp
c000f69f:	56                   	push   esi
c000f6a0:	57                   	push   edi
c000f6a1:	68 01 00 00 80       	push   0x80000001
c000f6a6:	e8 3d f8 ff ff       	call   c000eee8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f6ab:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f6b5:	83 c4 20             	add    esp,0x20
c000f6b8:	52                   	push   edx
c000f6b9:	52                   	push   edx
c000f6ba:	68 51 e0 01 c0       	push   0xc001e051
c000f6bf:	53                   	push   ebx
c000f6c0:	e8 59 c3 ff ff       	call   c000ba1e <Device::setName(char const*)>
c000f6c5:	83 c4 10             	add    esp,0x10
c000f6c8:	eb 67                	jmp    c000f731 <CPU::detectFeatures()+0x67d>
c000f6ca:	50                   	push   eax
c000f6cb:	50                   	push   eax
c000f6cc:	68 b6 df 01 c0       	push   0xc001dfb6
c000f6d1:	55                   	push   ebp
c000f6d2:	e8 29 0f ff ff       	call   c0000600 <strcpy>
c000f6d7:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f6e1:	e8 dd 0a ff ff       	call   c00001c3 <is486>
c000f6e6:	83 c4 10             	add    esp,0x10
c000f6e9:	85 c0                	test   eax,eax
c000f6eb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6f1:	74 1d                	je     c000f710 <CPU::detectFeatures()+0x65c>
c000f6f3:	83 c8 07             	or     eax,0x7
c000f6f6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6fc:	0f 20 c0             	mov    eax,cr0
c000f6ff:	83 e0 14             	and    eax,0x14
c000f702:	83 f8 04             	cmp    eax,0x4
c000f705:	75 0e                	jne    c000f715 <CPU::detectFeatures()+0x661>
c000f707:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f70e:	eb 21                	jmp    c000f731 <CPU::detectFeatures()+0x67d>
c000f710:	83 e0 f8             	and    eax,0xfffffff8
c000f713:	eb e1                	jmp    c000f6f6 <CPU::detectFeatures()+0x642>
c000f715:	e8 84 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f71a:	83 e0 01             	and    eax,0x1
c000f71d:	8d 14 00             	lea    edx,[eax+eax*1]
c000f720:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f726:	83 e0 fd             	and    eax,0xfffffffd
c000f729:	09 d0                	or     eax,edx
c000f72b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f731:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f738:	74 0e                	je     c000f748 <CPU::detectFeatures()+0x694>
c000f73a:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000f73f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f746:	eb 20                	jmp    c000f768 <CPU::detectFeatures()+0x6b4>
c000f748:	e8 51 0a ff ff       	call   c000019e <hasLegacyFPU>
c000f74d:	83 e0 01             	and    eax,0x1
c000f750:	8d 14 00             	lea    edx,[eax+eax*1]
c000f753:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f759:	83 e0 fd             	and    eax,0xfffffffd
c000f75c:	09 d0                	or     eax,edx
c000f75e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f764:	a8 02                	test   al,0x2
c000f766:	75 d2                	jne    c000f73a <CPU::detectFeatures()+0x686>
c000f768:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f76f:	83 c4 2c             	add    esp,0x2c
c000f772:	5b                   	pop    ebx
c000f773:	5e                   	pop    esi
c000f774:	5f                   	pop    edi
c000f775:	5d                   	pop    ebp
c000f776:	c3                   	ret    
c000f777:	90                   	nop

c000f778 <CPU::setupSMEP()>:
c000f778:	0f 20 e0             	mov    eax,cr4
c000f77b:	0d 00 00 10 00       	or     eax,0x100000
c000f780:	0f 22 e0             	mov    cr4,eax
c000f783:	c3                   	ret    

c000f784 <CPU::setupUMIP()>:
c000f784:	0f 20 e0             	mov    eax,cr4
c000f787:	80 cc 08             	or     ah,0x8
c000f78a:	0f 22 e0             	mov    cr4,eax
c000f78d:	c3                   	ret    

c000f78e <CPU::setupTSC()>:
c000f78e:	0f 20 e0             	mov    eax,cr4
c000f791:	83 c8 04             	or     eax,0x4
c000f794:	0f 22 e0             	mov    cr4,eax
c000f797:	c3                   	ret    

c000f798 <CPU::setupLargePages()>:
c000f798:	0f 20 e0             	mov    eax,cr4
c000f79b:	83 c8 10             	or     eax,0x10
c000f79e:	0f 22 e0             	mov    cr4,eax
c000f7a1:	c3                   	ret    

c000f7a2 <CPU::setupPAT()>:
c000f7a2:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c000f7a7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f7ae:	74 2c                	je     c000f7dc <CPU::setupPAT()+0x3a>
c000f7b0:	53                   	push   ebx
c000f7b1:	83 ec 10             	sub    esp,0x10
c000f7b4:	68 77 02 00 00       	push   0x277
c000f7b9:	50                   	push   eax
c000f7ba:	e8 33 76 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f7bf:	83 e2 f8             	and    edx,0xfffffff8
c000f7c2:	83 ca 01             	or     edx,0x1
c000f7c5:	52                   	push   edx
c000f7c6:	50                   	push   eax
c000f7c7:	68 77 02 00 00       	push   0x277
c000f7cc:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c000f7d2:	e8 47 76 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f7d7:	83 c4 28             	add    esp,0x28
c000f7da:	5b                   	pop    ebx
c000f7db:	c3                   	ret    
c000f7dc:	c3                   	ret    
c000f7dd:	90                   	nop

c000f7de <CPU::setupMTRR()>:
c000f7de:	c3                   	ret    
c000f7df:	90                   	nop

c000f7e0 <CPU::setupGlobalPages()>:
c000f7e0:	0f 20 e0             	mov    eax,cr4
c000f7e3:	0c 80                	or     al,0x80
c000f7e5:	0f 22 e0             	mov    cr4,eax
c000f7e8:	c3                   	ret    
c000f7e9:	90                   	nop

c000f7ea <CPU::allowUsermodeDataAccess()>:
c000f7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f7ee:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f7f5:	74 03                	je     c000f7fa <CPU::allowUsermodeDataAccess()+0x10>
c000f7f7:	0f 01 cb             	stac   
c000f7fa:	c3                   	ret    
c000f7fb:	90                   	nop

c000f7fc <CPU::prohibitUsermodeDataAccess()>:
c000f7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f800:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f807:	74 03                	je     c000f80c <CPU::prohibitUsermodeDataAccess()+0x10>
c000f809:	0f 01 ca             	clac   
c000f80c:	c3                   	ret    
c000f80d:	90                   	nop

c000f80e <CPU::setupSMAP()>:
c000f80e:	0f 20 e0             	mov    eax,cr4
c000f811:	0d 00 00 20 00       	or     eax,0x200000
c000f816:	0f 22 e0             	mov    cr4,eax
c000f819:	eb e1                	jmp    c000f7fc <CPU::prohibitUsermodeDataAccess()>
c000f81b:	90                   	nop

c000f81c <CPU::setupFeatures()>:
c000f81c:	53                   	push   ebx
c000f81d:	83 ec 08             	sub    esp,0x8
c000f820:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f824:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f82b:	74 18                	je     c000f845 <CPU::setupFeatures()+0x29>
c000f82d:	83 ec 0c             	sub    esp,0xc
c000f830:	68 5d e0 01 c0       	push   0xc001e05d
c000f835:	e8 1a ac ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f83a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f83d:	e8 42 ff ff ff       	call   c000f784 <CPU::setupUMIP()>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f84c:	74 18                	je     c000f866 <CPU::setupFeatures()+0x4a>
c000f84e:	83 ec 0c             	sub    esp,0xc
c000f851:	68 67 e0 01 c0       	push   0xc001e067
c000f856:	e8 f9 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f85b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f85e:	e8 2b ff ff ff       	call   c000f78e <CPU::setupTSC()>
c000f863:	83 c4 10             	add    esp,0x10
c000f866:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f86d:	74 18                	je     c000f887 <CPU::setupFeatures()+0x6b>
c000f86f:	83 ec 0c             	sub    esp,0xc
c000f872:	68 70 e0 01 c0       	push   0xc001e070
c000f877:	e8 d8 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f87c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f87f:	e8 14 ff ff ff       	call   c000f798 <CPU::setupLargePages()>
c000f884:	83 c4 10             	add    esp,0x10
c000f887:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f88e:	74 18                	je     c000f8a8 <CPU::setupFeatures()+0x8c>
c000f890:	83 ec 0c             	sub    esp,0xc
c000f893:	68 79 e0 01 c0       	push   0xc001e079
c000f898:	e8 b7 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f89d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8a0:	e8 3b ff ff ff       	call   c000f7e0 <CPU::setupGlobalPages()>
c000f8a5:	83 c4 10             	add    esp,0x10
c000f8a8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f8af:	74 18                	je     c000f8c9 <CPU::setupFeatures()+0xad>
c000f8b1:	83 ec 0c             	sub    esp,0xc
c000f8b4:	68 8b e0 01 c0       	push   0xc001e08b
c000f8b9:	e8 96 ab ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c000f8be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8c1:	e8 dc fe ff ff       	call   c000f7a2 <CPU::setupPAT()>
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f8d0:	74 11                	je     c000f8e3 <CPU::setupFeatures()+0xc7>
c000f8d2:	c7 44 24 10 94 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e094
c000f8da:	83 c4 08             	add    esp,0x8
c000f8dd:	5b                   	pop    ebx
c000f8de:	e9 71 ab ff ff       	jmp    c000a454 <Dbg::kprintf(char const*, ...)>
c000f8e3:	83 c4 08             	add    esp,0x8
c000f8e6:	5b                   	pop    ebx
c000f8e7:	c3                   	ret    

c000f8e8 <CPU::open(int, int, void*)>:
c000f8e8:	57                   	push   edi
c000f8e9:	56                   	push   esi
c000f8ea:	53                   	push   ebx
c000f8eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8ef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f8f9:	83 ec 0c             	sub    esp,0xc
c000f8fc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f902:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f908:	50                   	push   eax
c000f909:	e8 ce 77 ff ff       	call   c00070dc <GDT::setup()>
c000f90e:	83 c4 0c             	add    esp,0xc
c000f911:	6a 00                	push   0x0
c000f913:	68 ef be ad de       	push   0xdeadbeef
c000f918:	57                   	push   edi
c000f919:	e8 6a 92 ff ff       	call   c0008b88 <TSS::setup(unsigned long, unsigned long)>
c000f91e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f921:	e8 42 92 ff ff       	call   c0008b68 <TSS::flush()>
c000f926:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f92c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f92f:	e8 f6 79 ff ff       	call   c000732a <IDT::setup()>
c000f934:	b8 00 04 00 00       	mov    eax,0x400
c000f939:	0f 23 f8             	mov    db7,eax
c000f93c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f946:	e8 4a 81 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f94b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f951:	89 30                	mov    DWORD PTR [eax],esi
c000f953:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f959:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000f95c:	58                   	pop    eax
c000f95d:	5a                   	pop    edx
c000f95e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000f964:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f968:	e8 05 a2 ff ff       	call   c0009b72 <VAS::setCPUSpecific(unsigned long)>
c000f96d:	c7 04 24 9e e0 01 c0 	mov    DWORD PTR [esp],0xc001e09e
c000f974:	e8 c6 00 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000f979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f97c:	e8 33 f7 ff ff       	call   c000f0b4 <CPU::detectFeatures()>
c000f981:	c7 04 24 c1 e0 01 c0 	mov    DWORD PTR [esp],0xc001e0c1
c000f988:	e8 b2 00 00 00       	call   c000fa3f <KeSetBootMessage(char const*)>
c000f98d:	e8 42 58 00 00       	call   c00151d4 <HalInitialise()>
c000f992:	a1 30 04 02 c0       	mov    eax,ds:0xc0020430
c000f997:	83 e0 10             	and    eax,0x10
c000f99a:	83 f8 01             	cmp    eax,0x1
c000f99d:	19 c0                	sbb    eax,eax
c000f99f:	83 e0 46             	and    eax,0x46
c000f9a2:	83 c0 1e             	add    eax,0x1e
c000f9a5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9a8:	e8 40 d7 ff ff       	call   c000d0ed <setupTimer(int)>
c000f9ad:	83 c4 10             	add    esp,0x10
c000f9b0:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000f9b6:	f6 05 30 04 02 c0 20 	test   BYTE PTR ds:0xc0020430,0x20
c000f9bd:	74 0c                	je     c000f9cb <CPU::open(int, int, void*)+0xe3>
c000f9bf:	83 ec 0c             	sub    esp,0xc
c000f9c2:	53                   	push   ebx
c000f9c3:	e8 54 fe ff ff       	call   c000f81c <CPU::setupFeatures()>
c000f9c8:	83 c4 10             	add    esp,0x10
c000f9cb:	5b                   	pop    ebx
c000f9cc:	31 c0                	xor    eax,eax
c000f9ce:	5e                   	pop    esi
c000f9cf:	5f                   	pop    edi
c000f9d0:	c3                   	ret    

c000f9d1 <KeDisplaySplashScreen()>:
c000f9d1:	55                   	push   ebp
c000f9d2:	bd 05 00 00 00       	mov    ebp,0x5
c000f9d7:	57                   	push   edi
c000f9d8:	bf 60 f1 01 c0       	mov    edi,0xc001f160
c000f9dd:	56                   	push   esi
c000f9de:	be 0a 00 00 00       	mov    esi,0xa
c000f9e3:	53                   	push   ebx
c000f9e4:	31 db                	xor    ebx,ebx
c000f9e6:	83 ec 0c             	sub    esp,0xc
c000f9e9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000f9ec:	84 c0                	test   al,al
c000f9ee:	74 47                	je     c000fa37 <KeDisplaySplashScreen()+0x66>
c000f9f0:	80 bb 96 f1 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0e6a],0xdb
c000f9f7:	75 13                	jne    c000fa0c <KeDisplaySplashScreen()+0x3b>
c000f9f9:	0f b6 93 95 f1 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0e6b]
c000fa00:	83 e2 fe             	and    edx,0xfffffffe
c000fa03:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa09:	75 01                	jne    c000fa0c <KeDisplaySplashScreen()+0x3b>
c000fa0b:	46                   	inc    esi
c000fa0c:	3c 0d                	cmp    al,0xd
c000fa0e:	74 24                	je     c000fa34 <KeDisplaySplashScreen()+0x63>
c000fa10:	3c 0a                	cmp    al,0xa
c000fa12:	75 0a                	jne    c000fa1e <KeDisplaySplashScreen()+0x4d>
c000fa14:	45                   	inc    ebp
c000fa15:	be 0a 00 00 00       	mov    esi,0xa
c000fa1a:	31 db                	xor    ebx,ebx
c000fa1c:	eb 16                	jmp    c000fa34 <KeDisplaySplashScreen()+0x63>
c000fa1e:	83 ec 0c             	sub    esp,0xc
c000fa21:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fa24:	55                   	push   ebp
c000fa25:	43                   	inc    ebx
c000fa26:	52                   	push   edx
c000fa27:	6a 00                	push   0x0
c000fa29:	6a 0e                	push   0xe
c000fa2b:	50                   	push   eax
c000fa2c:	e8 07 64 00 00       	call   c0015e38 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fa31:	83 c4 20             	add    esp,0x20
c000fa34:	47                   	inc    edi
c000fa35:	eb b2                	jmp    c000f9e9 <KeDisplaySplashScreen()+0x18>
c000fa37:	83 c4 0c             	add    esp,0xc
c000fa3a:	5b                   	pop    ebx
c000fa3b:	5e                   	pop    esi
c000fa3c:	5f                   	pop    edi
c000fa3d:	5d                   	pop    ebp
c000fa3e:	c3                   	ret    

c000fa3f <KeSetBootMessage(char const*)>:
c000fa3f:	57                   	push   edi
c000fa40:	56                   	push   esi
c000fa41:	53                   	push   ebx
c000fa42:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fa48:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fa4f:	68 9e 00 00 00       	push   0x9e
c000fa54:	6a 00                	push   0x0
c000fa56:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fa5a:	56                   	push   esi
c000fa5b:	e8 70 0a ff ff       	call   c00004d0 <memset>
c000fa60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa63:	e8 d8 0a ff ff       	call   c0000540 <strlen>
c000fa68:	ba 50 00 00 00       	mov    edx,0x50
c000fa6d:	83 c4 10             	add    esp,0x10
c000fa70:	29 c2                	sub    edx,eax
c000fa72:	31 c9                	xor    ecx,ecx
c000fa74:	83 e2 fe             	and    edx,0xfffffffe
c000fa77:	01 f2                	add    edx,esi
c000fa79:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fa7e:	84 c0                	test   al,al
c000fa80:	74 0a                	je     c000fa8c <KeSetBootMessage(char const*)+0x4d>
c000fa82:	80 cc 0f             	or     ah,0xf
c000fa85:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fa89:	41                   	inc    ecx
c000fa8a:	eb ed                	jmp    c000fa79 <KeSetBootMessage(char const*)+0x3a>
c000fa8c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fa91:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fa96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fa98:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fa9e:	5b                   	pop    ebx
c000fa9f:	5e                   	pop    esi
c000faa0:	5f                   	pop    edi
c000faa1:	c3                   	ret    

c000faa2 <EnvVarContainer::getEnv(char const*)>:
c000faa2:	57                   	push   edi
c000faa3:	56                   	push   esi
c000faa4:	53                   	push   ebx
c000faa5:	31 db                	xor    ebx,ebx
c000faa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000faab:	39 1e                	cmp    DWORD PTR [esi],ebx
c000faad:	7e 2b                	jle    c000fada <EnvVarContainer::getEnv(char const*)+0x38>
c000faaf:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fab6:	50                   	push   eax
c000fab7:	50                   	push   eax
c000fab8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fabb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fabe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fac2:	e8 19 0c ff ff       	call   c00006e0 <strcmp>
c000fac7:	83 c4 10             	add    esp,0x10
c000faca:	85 c0                	test   eax,eax
c000facc:	75 09                	jne    c000fad7 <EnvVarContainer::getEnv(char const*)+0x35>
c000face:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fad1:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fad5:	eb 05                	jmp    c000fadc <EnvVarContainer::getEnv(char const*)+0x3a>
c000fad7:	43                   	inc    ebx
c000fad8:	eb d1                	jmp    c000faab <EnvVarContainer::getEnv(char const*)+0x9>
c000fada:	31 c0                	xor    eax,eax
c000fadc:	5b                   	pop    ebx
c000fadd:	5e                   	pop    esi
c000fade:	5f                   	pop    edi
c000fadf:	c3                   	ret    

c000fae0 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fae0:	55                   	push   ebp
c000fae1:	57                   	push   edi
c000fae2:	56                   	push   esi
c000fae3:	53                   	push   ebx
c000fae4:	83 ec 28             	sub    esp,0x28
c000fae7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000faeb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000faef:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000faf3:	56                   	push   esi
c000faf4:	e8 47 0a ff ff       	call   c0000540 <strlen>
c000faf9:	40                   	inc    eax
c000fafa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fafd:	e8 b7 7c ff ff       	call   c00077b9 <malloc>
c000fb02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb05:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb09:	e8 32 0a ff ff       	call   c0000540 <strlen>
c000fb0e:	40                   	inc    eax
c000fb0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb12:	e8 a2 7c ff ff       	call   c00077b9 <malloc>
c000fb17:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fb1e:	e8 1d 0a ff ff       	call   c0000540 <strlen>
c000fb23:	83 c4 0c             	add    esp,0xc
c000fb26:	40                   	inc    eax
c000fb27:	50                   	push   eax
c000fb28:	6a 00                	push   0x0
c000fb2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb2e:	e8 9d 09 ff ff       	call   c00004d0 <memset>
c000fb33:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb36:	e8 05 0a ff ff       	call   c0000540 <strlen>
c000fb3b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fb3f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb47:	89 de                	mov    esi,ebx
c000fb49:	e8 f2 09 ff ff       	call   c0000540 <strlen>
c000fb4e:	83 c4 0c             	add    esp,0xc
c000fb51:	40                   	inc    eax
c000fb52:	50                   	push   eax
c000fb53:	6a 00                	push   0x0
c000fb55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fb59:	e8 72 09 ff ff       	call   c00004d0 <memset>
c000fb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb61:	e8 da 09 ff ff       	call   c0000540 <strlen>
c000fb66:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fb6a:	8d 48 01             	lea    ecx,[eax+0x1]
c000fb6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fb72:	40                   	inc    eax
c000fb73:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fb76:	c1 e0 03             	shl    eax,0x3
c000fb79:	5a                   	pop    edx
c000fb7a:	59                   	pop    ecx
c000fb7b:	50                   	push   eax
c000fb7c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fb7f:	e8 21 7c ff ff       	call   c00077a5 <realloc>
c000fb84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fb88:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fb8b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fb8e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fb92:	b9 08 00 00 00       	mov    ecx,0x8
c000fb97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb99:	83 c4 2c             	add    esp,0x2c
c000fb9c:	5b                   	pop    ebx
c000fb9d:	5e                   	pop    esi
c000fb9e:	5f                   	pop    edi
c000fb9f:	5d                   	pop    ebp
c000fba0:	c3                   	ret    
c000fba1:	90                   	nop

c000fba2 <EnvVarContainer::deleteEnv(char const*)>:
c000fba2:	c3                   	ret    
c000fba3:	90                   	nop

c000fba4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fba4:	55                   	push   ebp
c000fba5:	57                   	push   edi
c000fba6:	56                   	push   esi
c000fba7:	53                   	push   ebx
c000fba8:	81 ec 38 01 00 00    	sub    esp,0x138
c000fbae:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fbb5:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fbbc:	68 14 01 00 00       	push   0x114
c000fbc1:	e8 f3 7b ff ff       	call   c00077b9 <malloc>
c000fbc6:	83 c4 0c             	add    esp,0xc
c000fbc9:	89 c3                	mov    ebx,eax
c000fbcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fbce:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fbd5:	50                   	push   eax
c000fbd6:	e8 ef ad ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c000fbdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbde:	e8 15 b1 ff ff       	call   c000acf8 <File::exists()>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	84 c0                	test   al,al
c000fbe8:	75 31                	jne    c000fc1b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fbea:	50                   	push   eax
c000fbeb:	50                   	push   eax
c000fbec:	6a 12                	push   0x12
c000fbee:	53                   	push   ebx
c000fbef:	e8 96 ae ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fbf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbf6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fbf9:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbfc:	e8 3f 09 ff ff       	call   c0000540 <strlen>
c000fc01:	5a                   	pop    edx
c000fc02:	31 d2                	xor    edx,edx
c000fc04:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc08:	51                   	push   ecx
c000fc09:	56                   	push   esi
c000fc0a:	52                   	push   edx
c000fc0b:	50                   	push   eax
c000fc0c:	53                   	push   ebx
c000fc0d:	ff d7                	call   edi
c000fc0f:	83 c4 14             	add    esp,0x14
c000fc12:	53                   	push   ebx
c000fc13:	e8 d0 ae ff ff       	call   c000aae8 <File::close()>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	56                   	push   esi
c000fc1c:	31 f6                	xor    esi,esi
c000fc1e:	68 00 01 00 00       	push   0x100
c000fc23:	6a 00                	push   0x0
c000fc25:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fc29:	50                   	push   eax
c000fc2a:	e8 a1 08 ff ff       	call   c00004d0 <memset>
c000fc2f:	5f                   	pop    edi
c000fc30:	58                   	pop    eax
c000fc31:	6a 01                	push   0x1
c000fc33:	53                   	push   ebx
c000fc34:	e8 51 ae ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fc44:	83 ec 0c             	sub    esp,0xc
c000fc47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc49:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fc4d:	51                   	push   ecx
c000fc4e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fc52:	52                   	push   edx
c000fc53:	6a 00                	push   0x0
c000fc55:	6a 01                	push   0x1
c000fc57:	53                   	push   ebx
c000fc58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fc5b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fc5f:	83 c4 20             	add    esp,0x20
c000fc62:	3c 0d                	cmp    al,0xd
c000fc64:	0f 84 09 01 00 00    	je     c000fd73 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fc6a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc6f:	0f 84 ef 00 00 00    	je     c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fc75:	3c 0a                	cmp    al,0xa
c000fc77:	74 13                	je     c000fc8c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fc79:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fc7e:	74 0c                	je     c000fc8c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fc80:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fc86:	0f 8e d8 00 00 00    	jle    c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fc8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8d 78 01             	lea    edi,[eax+0x1]
c000fc96:	57                   	push   edi
c000fc97:	e8 1d 7b ff ff       	call   c00077b9 <malloc>
c000fc9c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fca0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fca4:	8d 56 04             	lea    edx,[esi+0x4]
c000fca7:	89 14 24             	mov    DWORD PTR [esp],edx
c000fcaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcae:	e8 06 7b ff ff       	call   c00077b9 <malloc>
c000fcb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fcb7:	83 c4 0c             	add    esp,0xc
c000fcba:	57                   	push   edi
c000fcbb:	6a 00                	push   0x0
c000fcbd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcc1:	e8 0a 08 ff ff       	call   c00004d0 <memset>
c000fcc6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fcca:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fcce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fcd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcd4:	83 c4 0c             	add    esp,0xc
c000fcd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcdb:	52                   	push   edx
c000fcdc:	6a 00                	push   0x0
c000fcde:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fce2:	e8 e9 07 ff ff       	call   c00004d0 <memset>
c000fce7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fceb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fcef:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcf2:	e8 49 08 ff ff       	call   c0000540 <strlen>
c000fcf7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fcfb:	89 c1                	mov    ecx,eax
c000fcfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd02:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fd05:	40                   	inc    eax
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd0c:	85 d2                	test   edx,edx
c000fd0e:	75 0c                	jne    c000fd1c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fd10:	83 ec 0c             	sub    esp,0xc
c000fd13:	6a 08                	push   0x8
c000fd15:	e8 9f 7a ff ff       	call   c00077b9 <malloc>
c000fd1a:	eb 0c                	jmp    c000fd28 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fd1c:	c1 e0 03             	shl    eax,0x3
c000fd1f:	51                   	push   ecx
c000fd20:	51                   	push   ecx
c000fd21:	50                   	push   eax
c000fd22:	52                   	push   edx
c000fd23:	e8 7d 7a ff ff       	call   c00077a5 <realloc>
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd2e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd31:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fd34:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd38:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd3c:	b9 08 00 00 00       	mov    ecx,0x8
c000fd41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd43:	31 f6                	xor    esi,esi
c000fd45:	50                   	push   eax
c000fd46:	68 00 01 00 00       	push   0x100
c000fd4b:	6a 00                	push   0x0
c000fd4d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd51:	50                   	push   eax
c000fd52:	e8 79 07 ff ff       	call   c00004d0 <memset>
c000fd57:	83 c4 10             	add    esp,0x10
c000fd5a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd62:	eb 0f                	jmp    c000fd73 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd64:	3c 3d                	cmp    al,0x3d
c000fd66:	74 07                	je     c000fd6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fd68:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fd6c:	46                   	inc    esi
c000fd6d:	eb 04                	jmp    c000fd73 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd6f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fd73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd78:	0f 85 c6 fe ff ff    	jne    c000fc44 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fd7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fd84:	5b                   	pop    ebx
c000fd85:	5e                   	pop    esi
c000fd86:	5f                   	pop    edi
c000fd87:	5d                   	pop    ebp
c000fd88:	c3                   	ret    
c000fd89:	90                   	nop

c000fd8a <EnvVarContainer::__loadSystem()>:
c000fd8a:	83 ec 10             	sub    esp,0x10
c000fd8d:	68 c0 f2 01 c0       	push   0xc001f2c0
c000fd92:	68 04 e1 01 c0       	push   0xc001e104
c000fd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd9b:	e8 04 fe ff ff       	call   c000fba4 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fda0:	83 c4 1c             	add    esp,0x1c
c000fda3:	c3                   	ret    

c000fda4 <EnvVarContainer::__loadUser()>:
c000fda4:	c3                   	ret    
c000fda5:	90                   	nop

c000fda6 <EnvVarContainer::EnvVarContainer(Process*)>:
c000fda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdaa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fdb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdb8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fdbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fdc6:	90                   	nop
c000fdc7:	c3                   	ret    

c000fdc8 <EnvVarContainer::~EnvVarContainer()>:
c000fdc8:	83 ec 0c             	sub    esp,0xc
c000fdcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdd2:	85 c0                	test   eax,eax
c000fdd4:	74 1d                	je     c000fdf3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fddc:	85 c0                	test   eax,eax
c000fdde:	74 13                	je     c000fdf3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fde4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde7:	83 ec 0c             	sub    esp,0xc
c000fdea:	50                   	push   eax
c000fdeb:	e8 d9 79 ff ff       	call   c00077c9 <free>
c000fdf0:	83 c4 10             	add    esp,0x10
c000fdf3:	90                   	nop
c000fdf4:	83 c4 0c             	add    esp,0xc
c000fdf7:	c3                   	ret    

c000fdf8 <Krnl::getEnv(Process*, char const*)>:
c000fdf8:	53                   	push   ebx
c000fdf9:	83 ec 08             	sub    esp,0x8
c000fdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe04:	39 05 f0 36 02 c0    	cmp    DWORD PTR ds:0xc00236f0,eax
c000fe0a:	74 04                	je     c000fe10 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe0c:	85 c0                	test   eax,eax
c000fe0e:	75 0b                	jne    c000fe1b <Krnl::getEnv(Process*, char const*)+0x23>
c000fe10:	a1 90 2e 02 c0       	mov    eax,ds:0xc0022e90
c000fe15:	85 c0                	test   eax,eax
c000fe17:	75 19                	jne    c000fe32 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fe19:	eb 27                	jmp    c000fe42 <Krnl::getEnv(Process*, char const*)+0x4a>
c000fe1b:	52                   	push   edx
c000fe1c:	52                   	push   edx
c000fe1d:	53                   	push   ebx
c000fe1e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fe24:	e8 79 fc ff ff       	call   c000faa2 <EnvVarContainer::getEnv(char const*)>
c000fe29:	83 c4 10             	add    esp,0x10
c000fe2c:	85 c0                	test   eax,eax
c000fe2e:	75 28                	jne    c000fe58 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe30:	eb de                	jmp    c000fe10 <Krnl::getEnv(Process*, char const*)+0x18>
c000fe32:	52                   	push   edx
c000fe33:	52                   	push   edx
c000fe34:	53                   	push   ebx
c000fe35:	50                   	push   eax
c000fe36:	e8 67 fc ff ff       	call   c000faa2 <EnvVarContainer::getEnv(char const*)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	85 c0                	test   eax,eax
c000fe40:	75 16                	jne    c000fe58 <Krnl::getEnv(Process*, char const*)+0x60>
c000fe42:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fe46:	a1 94 2e 02 c0       	mov    eax,ds:0xc0022e94
c000fe4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe4f:	83 c4 08             	add    esp,0x8
c000fe52:	5b                   	pop    ebx
c000fe53:	e9 4a fc ff ff       	jmp    c000faa2 <EnvVarContainer::getEnv(char const*)>
c000fe58:	83 c4 08             	add    esp,0x8
c000fe5b:	5b                   	pop    ebx
c000fe5c:	c3                   	ret    

c000fe5d <Krnl::setEnvSystem(char const*, char const*)>:
c000fe5d:	83 ec 10             	sub    esp,0x10
c000fe60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe68:	ff 35 94 2e 02 c0    	push   DWORD PTR ds:0xc0022e94
c000fe6e:	e8 6d fc ff ff       	call   c000fae0 <EnvVarContainer::setEnv(char const*, char const*)>
c000fe73:	83 c4 1c             	add    esp,0x1c
c000fe76:	c3                   	ret    

c000fe77 <Krnl::setEnvUser(char const*, char const*)>:
c000fe77:	a1 90 2e 02 c0       	mov    eax,ds:0xc0022e90
c000fe7c:	85 c0                	test   eax,eax
c000fe7e:	74 15                	je     c000fe95 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000fe80:	83 ec 10             	sub    esp,0x10
c000fe83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe8b:	50                   	push   eax
c000fe8c:	e8 4f fc ff ff       	call   c000fae0 <EnvVarContainer::setEnv(char const*, char const*)>
c000fe91:	83 c4 1c             	add    esp,0x1c
c000fe94:	c3                   	ret    
c000fe95:	c3                   	ret    

c000fe96 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000fe96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe9a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000fea0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fea4:	e9 37 fc ff ff       	jmp    c000fae0 <EnvVarContainer::setEnv(char const*, char const*)>

c000fea9 <Krnl::deleteEnvSystem(char const*)>:
c000fea9:	c3                   	ret    

c000feaa <Krnl::deleteEnvUser(char const*)>:
c000feaa:	c3                   	ret    

c000feab <Krnl::deleteEnvProcess(Process*, char const*)>:
c000feab:	c3                   	ret    

c000feac <Krnl::newProcessEnv(Process*)>:
c000feac:	83 ec 28             	sub    esp,0x28
c000feaf:	6a 0c                	push   0xc
c000feb1:	e8 03 79 ff ff       	call   c00077b9 <malloc>
c000feb6:	5a                   	pop    edx
c000feb7:	59                   	pop    ecx
c000feb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000febc:	50                   	push   eax
c000febd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fec1:	e8 e0 fe ff ff       	call   c000fda6 <EnvVarContainer::EnvVarContainer(Process*)>
c000fec6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feca:	83 c4 2c             	add    esp,0x2c
c000fecd:	c3                   	ret    

c000fece <Krnl::copyProcessEnv(Process*, Process*)>:
c000fece:	57                   	push   edi
c000fecf:	56                   	push   esi
c000fed0:	53                   	push   ebx
c000fed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed5:	83 ec 0c             	sub    esp,0xc
c000fed8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000fede:	6a 0c                	push   0xc
c000fee0:	e8 d4 78 ff ff       	call   c00077b9 <malloc>
c000fee5:	89 c3                	mov    ebx,eax
c000fee7:	58                   	pop    eax
c000fee8:	5a                   	pop    edx
c000fee9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feed:	53                   	push   ebx
c000feee:	e8 b3 fe ff ff       	call   c000fda6 <EnvVarContainer::EnvVarContainer(Process*)>
c000fef3:	8b 07                	mov    eax,DWORD PTR [edi]
c000fef5:	89 03                	mov    DWORD PTR [ebx],eax
c000fef7:	c1 e0 03             	shl    eax,0x3
c000fefa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fefd:	e8 b7 78 ff ff       	call   c00077b9 <malloc>
c000ff02:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ff05:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ff07:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ff0a:	c1 e1 03             	shl    ecx,0x3
c000ff0d:	89 c7                	mov    edi,eax
c000ff0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	89 d8                	mov    eax,ebx
c000ff16:	5b                   	pop    ebx
c000ff17:	5e                   	pop    esi
c000ff18:	5f                   	pop    edi
c000ff19:	c3                   	ret    

c000ff1a <Krnl::loadSystemEnv()>:
c000ff1a:	53                   	push   ebx
c000ff1b:	83 ec 14             	sub    esp,0x14
c000ff1e:	6a 0c                	push   0xc
c000ff20:	e8 94 78 ff ff       	call   c00077b9 <malloc>
c000ff25:	89 c3                	mov    ebx,eax
c000ff27:	58                   	pop    eax
c000ff28:	5a                   	pop    edx
c000ff29:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c000ff2f:	53                   	push   ebx
c000ff30:	e8 71 fe ff ff       	call   c000fda6 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff38:	89 1d 94 2e 02 c0    	mov    DWORD PTR ds:0xc0022e94,ebx
c000ff3e:	e8 47 fe ff ff       	call   c000fd8a <EnvVarContainer::__loadSystem()>
c000ff43:	83 c4 18             	add    esp,0x18
c000ff46:	5b                   	pop    ebx
c000ff47:	c3                   	ret    

c000ff48 <Krnl::loadUserEnv()>:
c000ff48:	53                   	push   ebx
c000ff49:	83 ec 14             	sub    esp,0x14
c000ff4c:	6a 0c                	push   0xc
c000ff4e:	e8 66 78 ff ff       	call   c00077b9 <malloc>
c000ff53:	89 c3                	mov    ebx,eax
c000ff55:	58                   	pop    eax
c000ff56:	5a                   	pop    edx
c000ff57:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c000ff5d:	53                   	push   ebx
c000ff5e:	e8 43 fe ff ff       	call   c000fda6 <EnvVarContainer::EnvVarContainer(Process*)>
c000ff63:	89 1d 90 2e 02 c0    	mov    DWORD PTR ds:0xc0022e90,ebx
c000ff69:	83 c4 18             	add    esp,0x18
c000ff6c:	5b                   	pop    ebx
c000ff6d:	c3                   	ret    

c000ff6e <Krnl::flushEnv()>:
c000ff6e:	c3                   	ret    

c000ff6f <Krnl::getProcessTotalEnvCount(Process*)>:
c000ff6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff73:	8b 15 90 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022e90
c000ff79:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ff7f:	a1 94 2e 02 c0       	mov    eax,ds:0xc0022e94
c000ff84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff86:	03 01                	add    eax,DWORD PTR [ecx]
c000ff88:	85 d2                	test   edx,edx
c000ff8a:	74 02                	je     c000ff8e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c000ff8c:	03 02                	add    eax,DWORD PTR [edx]
c000ff8e:	c3                   	ret    

c000ff8f <Krnl::getProcessEnvPair(Process*, int)>:
c000ff8f:	57                   	push   edi
c000ff90:	56                   	push   esi
c000ff91:	8b 35 90 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e90
c000ff97:	53                   	push   ebx
c000ff98:	85 f6                	test   esi,esi
c000ff9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffa2:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000ffa8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ffac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ffae:	75 16                	jne    c000ffc6 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c000ffb0:	39 c2                	cmp    edx,eax
c000ffb2:	7c 16                	jl     c000ffca <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000ffb4:	8b 0d 94 2e 02 c0    	mov    ecx,DWORD PTR ds:0xc0022e94
c000ffba:	8b 31                	mov    esi,DWORD PTR [ecx]
c000ffbc:	01 c6                	add    esi,eax
c000ffbe:	39 d6                	cmp    esi,edx
c000ffc0:	7e 3c                	jle    c000fffe <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000ffc2:	29 c2                	sub    edx,eax
c000ffc4:	eb 04                	jmp    c000ffca <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c000ffc6:	39 c2                	cmp    edx,eax
c000ffc8:	7d 05                	jge    c000ffcf <Krnl::getProcessEnvPair(Process*, int)+0x40>
c000ffca:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000ffcd:	eb 20                	jmp    c000ffef <Krnl::getProcessEnvPair(Process*, int)+0x60>
c000ffcf:	8b 3e                	mov    edi,DWORD PTR [esi]
c000ffd1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000ffd4:	39 d1                	cmp    ecx,edx
c000ffd6:	7e 04                	jle    c000ffdc <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c000ffd8:	29 c2                	sub    edx,eax
c000ffda:	eb 10                	jmp    c000ffec <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c000ffdc:	8b 35 94 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e94
c000ffe2:	03 0e                	add    ecx,DWORD PTR [esi]
c000ffe4:	39 d1                	cmp    ecx,edx
c000ffe6:	7e 16                	jle    c000fffe <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c000ffe8:	29 c2                	sub    edx,eax
c000ffea:	29 fa                	sub    edx,edi
c000ffec:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ffef:	8d 14 d0             	lea    edx,[eax+edx*8]
c000fff2:	8b 02                	mov    eax,DWORD PTR [edx]
c000fff4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fff7:	89 03                	mov    DWORD PTR [ebx],eax
c000fff9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000fffc:	eb 1d                	jmp    c001001b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c000fffe:	83 ec 0c             	sub    esp,0xc
c0010001:	68 26 e1 01 c0       	push   0xc001e126
c0010006:	e8 ac 00 00 00       	call   c00100b7 <KePanic(char const*)>
c001000b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010011:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010018:	83 c4 10             	add    esp,0x10
c001001b:	89 d8                	mov    eax,ebx
c001001d:	5b                   	pop    ebx
c001001e:	5e                   	pop    esi
c001001f:	5f                   	pop    edi
c0010020:	c2 04 00             	ret    0x4

c0010023 <CPU::current()>:
c0010023:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0010028:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001002e:	c3                   	ret    

c001002f <operator new(unsigned long)>:
c001002f:	e9 85 77 ff ff       	jmp    c00077b9 <malloc>

c0010034 <operator delete(void*)>:
c0010034:	e9 a0 77 ff ff       	jmp    c00077d9 <rfree>

c0010039 <disableIRQs()>:
c0010039:	fa                   	cli    
c001003a:	c3                   	ret    

c001003b <enableIRQs()>:
c001003b:	fb                   	sti    
c001003c:	c3                   	ret    

c001003d <lockScheduler()>:
c001003d:	fa                   	cli    
c001003e:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0010044:	c3                   	ret    

c0010045 <unlockScheduler()>:
c0010045:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c001004a:	48                   	dec    eax
c001004b:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0010050:	75 01                	jne    c0010053 <unlockScheduler()+0xe>
c0010052:	fb                   	sti    
c0010053:	c3                   	ret    

c0010054 <lockStuff()>:
c0010054:	fa                   	cli    
c0010055:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c001005b:	ff 05 c4 36 02 c0    	inc    DWORD PTR ds:0xc00236c4
c0010061:	c3                   	ret    

c0010062 <unlockStuff()>:
c0010062:	83 ec 0c             	sub    esp,0xc
c0010065:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c001006a:	48                   	dec    eax
c001006b:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0010070:	75 18                	jne    c001008a <unlockStuff()+0x28>
c0010072:	83 3d c0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236c0,0x0
c0010079:	74 0f                	je     c001008a <unlockStuff()+0x28>
c001007b:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c0010085:	e8 3e 32 00 00       	call   c00132c8 <schedule()>
c001008a:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c001008f:	48                   	dec    eax
c0010090:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0010095:	75 01                	jne    c0010098 <unlockStuff()+0x36>
c0010097:	fb                   	sti    
c0010098:	83 c4 0c             	add    esp,0xc
c001009b:	c3                   	ret    

c001009c <Virt::getAKernelVAS()>:
c001009c:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c00100a1:	c3                   	ret    

c00100a2 <__not_memcpy>:
c00100a2:	57                   	push   edi
c00100a3:	56                   	push   esi
c00100a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00100ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00100b0:	89 c7                	mov    edi,eax
c00100b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100b4:	5e                   	pop    esi
c00100b5:	5f                   	pop    edi
c00100b6:	c3                   	ret    

c00100b7 <KePanic(char const*)>:
c00100b7:	c6 05 98 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e98,0x1
c00100be:	e9 fd 4f 00 00       	jmp    c00150c0 <HalPanic(char const*)>

c00100c3 <Krnl::powerThread(void*)>:
c00100c3:	83 ec 0c             	sub    esp,0xc
c00100c6:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00100cb:	48                   	dec    eax
c00100cc:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00100d1:	75 01                	jne    c00100d4 <Krnl::powerThread(void*)+0x11>
c00100d3:	fb                   	sti    
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	c6 05 a0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ea0,0x0
c00100de:	6a 0a                	push   0xa
c00100e0:	e8 f3 34 00 00       	call   c00135d8 <sleep(unsigned int)>
c00100e5:	83 05 e4 2e 02 c0 0a 	add    DWORD PTR ds:0xc0022ee4,0xa
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	eb e3                	jmp    c00100d4 <Krnl::powerThread(void*)+0x11>

c00100f1 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00100f1:	57                   	push   edi
c00100f2:	b9 09 00 00 00       	mov    ecx,0x9
c00100f7:	56                   	push   esi
c00100f8:	bf c0 2e 02 c0       	mov    edi,0xc0022ec0
c00100fd:	fc                   	cld    
c00100fe:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010102:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010104:	5e                   	pop    esi
c0010105:	5f                   	pop    edi
c0010106:	c3                   	ret    

c0010107 <Krnl::userIOReceived()>:
c0010107:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c0010111:	c3                   	ret    

c0010112 <Krnl::handlePowerButton()>:
c0010112:	83 ec 0c             	sub    esp,0xc
c0010115:	a1 c0 2e 02 c0       	mov    eax,ds:0xc0022ec0
c001011a:	83 f8 02             	cmp    eax,0x2
c001011d:	75 10                	jne    c001012f <Krnl::handlePowerButton()+0x1d>
c001011f:	83 ec 0c             	sub    esp,0xc
c0010122:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0010128:	e8 29 6d ff ff       	call   c0006e56 <Computer::shutdown()>
c001012d:	eb 11                	jmp    c0010140 <Krnl::handlePowerButton()+0x2e>
c001012f:	48                   	dec    eax
c0010130:	75 11                	jne    c0010143 <Krnl::handlePowerButton()+0x31>
c0010132:	83 ec 0c             	sub    esp,0xc
c0010135:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c001013b:	e8 46 6d ff ff       	call   c0006e86 <Computer::sleep()>
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	83 c4 0c             	add    esp,0xc
c0010146:	c3                   	ret    

c0010147 <Krnl::handleSleepButton()>:
c0010147:	83 ec 0c             	sub    esp,0xc
c001014a:	a1 c4 2e 02 c0       	mov    eax,ds:0xc0022ec4
c001014f:	83 f8 02             	cmp    eax,0x2
c0010152:	75 10                	jne    c0010164 <Krnl::handleSleepButton()+0x1d>
c0010154:	83 ec 0c             	sub    esp,0xc
c0010157:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c001015d:	e8 f4 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010162:	eb 11                	jmp    c0010175 <Krnl::handleSleepButton()+0x2e>
c0010164:	48                   	dec    eax
c0010165:	75 11                	jne    c0010178 <Krnl::handleSleepButton()+0x31>
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0010170:	e8 11 6d ff ff       	call   c0006e86 <Computer::sleep()>
c0010175:	83 c4 10             	add    esp,0x10
c0010178:	83 c4 0c             	add    esp,0xc
c001017b:	c3                   	ret    

c001017c <Krnl::setupPowerManager()>:
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	c7 05 e4 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ee4,0x0
c0010189:	68 f0 00 00 00       	push   0xf0
c001018e:	c6 05 a0 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022ea0,0x0
c0010195:	6a 00                	push   0x0
c0010197:	68 c3 00 01 c0       	push   0xc00100c3
c001019c:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c00101a2:	e8 01 2f 00 00       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c00101a7:	c7 05 c0 2e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022ec0,0x2
c00101b1:	c7 05 c4 2e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022ec4,0x1
c00101bb:	c7 05 c8 2e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022ec8,0x3
c00101c5:	c7 05 cc 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ecc,0x0
c00101cf:	c7 05 d8 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed8,0x0
c00101d9:	c7 05 d0 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022ed0,0x0
c00101e3:	c7 05 dc 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022edc,0x0
c00101ed:	c7 05 d4 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022ed4,0x3c
c00101f7:	c7 05 e0 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022ee0,0x3c
c0010201:	83 c4 1c             	add    esp,0x1c
c0010204:	c3                   	ret    
c0010205:	66 90                	xchg   ax,ax
c0010207:	90                   	nop

c0010208 <KeResolveCompatibilitySymbol(char*)>:
c0010208:	83 ec 0c             	sub    esp,0xc
c001020b:	83 ec 08             	sub    esp,0x8
c001020e:	68 40 e1 01 c0       	push   0xc001e140
c0010213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010217:	e8 c4 04 ff ff       	call   c00006e0 <strcmp>
c001021c:	83 c4 10             	add    esp,0x10
c001021f:	85 c0                	test   eax,eax
c0010221:	0f 94 c0             	sete   al
c0010224:	84 c0                	test   al,al
c0010226:	74 0c                	je     c0010234 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010228:	b8 18 04 02 c0       	mov    eax,0xc0020418
c001022d:	e9 62 01 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010232:	66 90                	xchg   ax,ax
c0010234:	83 ec 08             	sub    esp,0x8
c0010237:	68 49 e1 01 c0       	push   0xc001e149
c001023c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010240:	e8 9b 04 ff ff       	call   c00006e0 <strcmp>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	85 c0                	test   eax,eax
c001024a:	0f 94 c0             	sete   al
c001024d:	84 c0                	test   al,al
c001024f:	74 0b                	je     c001025c <KeResolveCompatibilitySymbol(char*)+0x54>
c0010251:	b8 c0 bb 01 c0       	mov    eax,0xc001bbc0
c0010256:	e9 39 01 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001025b:	90                   	nop
c001025c:	83 ec 08             	sub    esp,0x8
c001025f:	68 53 e1 01 c0       	push   0xc001e153
c0010264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010268:	e8 73 04 ff ff       	call   c00006e0 <strcmp>
c001026d:	83 c4 10             	add    esp,0x10
c0010270:	85 c0                	test   eax,eax
c0010272:	0f 94 c0             	sete   al
c0010275:	84 c0                	test   al,al
c0010277:	74 0b                	je     c0010284 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010279:	b8 f4 b8 01 c0       	mov    eax,0xc001b8f4
c001027e:	e9 11 01 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010283:	90                   	nop
c0010284:	83 ec 08             	sub    esp,0x8
c0010287:	68 5c e1 01 c0       	push   0xc001e15c
c001028c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010290:	e8 4b 04 ff ff       	call   c00006e0 <strcmp>
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	85 c0                	test   eax,eax
c001029a:	0f 94 c0             	sete   al
c001029d:	84 c0                	test   al,al
c001029f:	74 0b                	je     c00102ac <KeResolveCompatibilitySymbol(char*)+0xa4>
c00102a1:	b8 b7 00 01 c0       	mov    eax,0xc00100b7
c00102a6:	e9 e9 00 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102ab:	90                   	nop
c00102ac:	83 ec 08             	sub    esp,0x8
c00102af:	68 6f e1 01 c0       	push   0xc001e16f
c00102b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b8:	e8 23 04 ff ff       	call   c00006e0 <strcmp>
c00102bd:	83 c4 10             	add    esp,0x10
c00102c0:	85 c0                	test   eax,eax
c00102c2:	0f 94 c0             	sete   al
c00102c5:	84 c0                	test   al,al
c00102c7:	74 0b                	je     c00102d4 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00102c9:	b8 3f fa 00 c0       	mov    eax,0xc000fa3f
c00102ce:	e9 c1 00 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102d3:	90                   	nop
c00102d4:	83 ec 08             	sub    esp,0x8
c00102d7:	68 8c e1 01 c0       	push   0xc001e18c
c00102dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e0:	e8 fb 03 ff ff       	call   c00006e0 <strcmp>
c00102e5:	83 c4 10             	add    esp,0x10
c00102e8:	85 c0                	test   eax,eax
c00102ea:	0f 94 c0             	sete   al
c00102ed:	84 c0                	test   al,al
c00102ef:	74 0b                	je     c00102fc <KeResolveCompatibilitySymbol(char*)+0xf4>
c00102f1:	b8 c0 bc 01 c0       	mov    eax,0xc001bcc0
c00102f6:	e9 99 00 00 00       	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102fb:	90                   	nop
c00102fc:	83 ec 08             	sub    esp,0x8
c00102ff:	68 96 e1 01 c0       	push   0xc001e196
c0010304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010308:	e8 d3 03 ff ff       	call   c00006e0 <strcmp>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	85 c0                	test   eax,eax
c0010312:	0f 94 c0             	sete   al
c0010315:	84 c0                	test   al,al
c0010317:	74 07                	je     c0010320 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010319:	b8 40 ba 01 c0       	mov    eax,0xc001ba40
c001031e:	eb 74                	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010320:	83 ec 08             	sub    esp,0x8
c0010323:	68 9f e1 01 c0       	push   0xc001e19f
c0010328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032c:	e8 af 03 ff ff       	call   c00006e0 <strcmp>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	85 c0                	test   eax,eax
c0010336:	0f 94 c0             	sete   al
c0010339:	84 c0                	test   al,al
c001033b:	74 07                	je     c0010344 <KeResolveCompatibilitySymbol(char*)+0x13c>
c001033d:	b8 1c 04 02 c0       	mov    eax,0xc002041c
c0010342:	eb 50                	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010344:	83 ec 08             	sub    esp,0x8
c0010347:	68 b7 e1 01 c0       	push   0xc001e1b7
c001034c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010350:	e8 8b 03 ff ff       	call   c00006e0 <strcmp>
c0010355:	83 c4 10             	add    esp,0x10
c0010358:	85 c0                	test   eax,eax
c001035a:	0f 94 c0             	sete   al
c001035d:	84 c0                	test   al,al
c001035f:	74 07                	je     c0010368 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010361:	b8 1c 04 02 c0       	mov    eax,0xc002041c
c0010366:	eb 2c                	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010368:	83 ec 08             	sub    esp,0x8
c001036b:	68 c4 e1 01 c0       	push   0xc001e1c4
c0010370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010374:	e8 67 03 ff ff       	call   c00006e0 <strcmp>
c0010379:	83 c4 10             	add    esp,0x10
c001037c:	85 c0                	test   eax,eax
c001037e:	0f 94 c0             	sete   al
c0010381:	84 c0                	test   al,al
c0010383:	74 07                	je     c001038c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010385:	b8 1d 04 02 c0       	mov    eax,0xc002041d
c001038a:	eb 08                	jmp    c0010394 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001038c:	b8 00 00 00 00       	mov    eax,0x0
c0010391:	8d 76 00             	lea    esi,[esi+0x0]
c0010394:	83 c4 0c             	add    esp,0xc
c0010397:	c3                   	ret    

c0010398 <SysSeekDir(regs*)>:
c0010398:	31 c0                	xor    eax,eax
c001039a:	31 d2                	xor    edx,edx
c001039c:	c3                   	ret    

c001039d <SysTellDir(regs*)>:
c001039d:	31 c0                	xor    eax,eax
c001039f:	31 d2                	xor    edx,edx
c00103a1:	c3                   	ret    

c00103a2 <SysVerify(regs*)>:
c00103a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103a6:	31 d2                	xor    edx,edx
c00103a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00103ab:	c3                   	ret    

c00103ac <SysGetArgc(regs*)>:
c00103ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00103b1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00103b4:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00103ba:	99                   	cdq    
c00103bb:	c3                   	ret    

c00103bc <SysTTYName(regs*)>:
c00103bc:	b8 01 00 00 00       	mov    eax,0x1
c00103c1:	31 d2                	xor    edx,edx
c00103c3:	c3                   	ret    

c00103c4 <SysFormatDisk(regs*)>:
c00103c4:	56                   	push   esi
c00103c5:	53                   	push   ebx
c00103c6:	50                   	push   eax
c00103c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103cb:	8b 1d 14 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020514
c00103d1:	eb 28                	jmp    c00103fb <SysFormatDisk(regs*)+0x37>
c00103d3:	83 ec 0c             	sub    esp,0xc
c00103d6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00103d9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00103dc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00103de:	51                   	push   ecx
c00103df:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00103e2:	51                   	push   ecx
c00103e3:	50                   	push   eax
c00103e4:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c00103eb:	50                   	push   eax
c00103ec:	53                   	push   ebx
c00103ed:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00103f0:	83 c4 20             	add    esp,0x20
c00103f3:	83 f8 08             	cmp    eax,0x8
c00103f6:	75 12                	jne    c001040a <SysFormatDisk(regs*)+0x46>
c00103f8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00103fb:	85 db                	test   ebx,ebx
c00103fd:	75 d4                	jne    c00103d3 <SysFormatDisk(regs*)+0xf>
c00103ff:	59                   	pop    ecx
c0010400:	b8 03 00 00 00       	mov    eax,0x3
c0010405:	31 d2                	xor    edx,edx
c0010407:	5b                   	pop    ebx
c0010408:	5e                   	pop    esi
c0010409:	c3                   	ret    
c001040a:	85 c0                	test   eax,eax
c001040c:	74 1b                	je     c0010429 <SysFormatDisk(regs*)+0x65>
c001040e:	83 f8 09             	cmp    eax,0x9
c0010411:	74 0b                	je     c001041e <SysFormatDisk(regs*)+0x5a>
c0010413:	59                   	pop    ecx
c0010414:	b8 02 00 00 00       	mov    eax,0x2
c0010419:	31 d2                	xor    edx,edx
c001041b:	5b                   	pop    ebx
c001041c:	5e                   	pop    esi
c001041d:	c3                   	ret    
c001041e:	59                   	pop    ecx
c001041f:	b8 01 00 00 00       	mov    eax,0x1
c0010424:	31 d2                	xor    edx,edx
c0010426:	5b                   	pop    ebx
c0010427:	5e                   	pop    esi
c0010428:	c3                   	ret    
c0010429:	59                   	pop    ecx
c001042a:	31 c0                	xor    eax,eax
c001042c:	31 d2                	xor    edx,edx
c001042e:	5b                   	pop    ebx
c001042f:	5e                   	pop    esi
c0010430:	c3                   	ret    

c0010431 <SysSetDiskVolumeLabel(regs*)>:
c0010431:	56                   	push   esi
c0010432:	53                   	push   ebx
c0010433:	53                   	push   ebx
c0010434:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010438:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001043b:	83 f8 19             	cmp    eax,0x19
c001043e:	77 2d                	ja     c001046d <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010440:	8b 0c 85 80 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd680]
c0010447:	85 c9                	test   ecx,ecx
c0010449:	74 22                	je     c001046d <SysSetDiskVolumeLabel(regs*)+0x3c>
c001044b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001044e:	85 db                	test   ebx,ebx
c0010450:	74 1b                	je     c001046d <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010452:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010458:	85 d2                	test   edx,edx
c001045a:	74 11                	je     c001046d <SysSetDiskVolumeLabel(regs*)+0x3c>
c001045c:	8b 32                	mov    esi,DWORD PTR [edx]
c001045e:	53                   	push   ebx
c001045f:	50                   	push   eax
c0010460:	51                   	push   ecx
c0010461:	52                   	push   edx
c0010462:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010465:	83 c4 10             	add    esp,0x10
c0010468:	99                   	cdq    
c0010469:	59                   	pop    ecx
c001046a:	5b                   	pop    ebx
c001046b:	5e                   	pop    esi
c001046c:	c3                   	ret    
c001046d:	59                   	pop    ecx
c001046e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010473:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010478:	5b                   	pop    ebx
c0010479:	5e                   	pop    esi
c001047a:	c3                   	ret    

c001047b <SysGetDiskVolumeLabel(regs*)>:
c001047b:	57                   	push   edi
c001047c:	56                   	push   esi
c001047d:	53                   	push   ebx
c001047e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010482:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010485:	83 fa 19             	cmp    edx,0x19
c0010488:	77 38                	ja     c00104c2 <SysGetDiskVolumeLabel(regs*)+0x47>
c001048a:	8b 0c 95 80 29 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd680]
c0010491:	85 c9                	test   ecx,ecx
c0010493:	74 2d                	je     c00104c2 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010495:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010498:	85 db                	test   ebx,ebx
c001049a:	74 26                	je     c00104c2 <SysGetDiskVolumeLabel(regs*)+0x47>
c001049c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001049f:	85 f6                	test   esi,esi
c00104a1:	74 1f                	je     c00104c2 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104a3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c00104a9:	85 c0                	test   eax,eax
c00104ab:	74 15                	je     c00104c2 <SysGetDiskVolumeLabel(regs*)+0x47>
c00104ad:	83 ec 0c             	sub    esp,0xc
c00104b0:	8b 38                	mov    edi,DWORD PTR [eax]
c00104b2:	56                   	push   esi
c00104b3:	53                   	push   ebx
c00104b4:	52                   	push   edx
c00104b5:	51                   	push   ecx
c00104b6:	50                   	push   eax
c00104b7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00104ba:	83 c4 20             	add    esp,0x20
c00104bd:	99                   	cdq    
c00104be:	5b                   	pop    ebx
c00104bf:	5e                   	pop    esi
c00104c0:	5f                   	pop    edi
c00104c1:	c3                   	ret    
c00104c2:	5b                   	pop    ebx
c00104c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00104c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104cd:	5e                   	pop    esi
c00104ce:	5f                   	pop    edi
c00104cf:	c3                   	ret    

c00104d0 <SysShutdown(regs*)>:
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00104da:	85 c0                	test   eax,eax
c00104dc:	74 18                	je     c00104f6 <SysShutdown(regs*)+0x26>
c00104de:	83 f8 01             	cmp    eax,0x1
c00104e1:	74 38                	je     c001051b <SysShutdown(regs*)+0x4b>
c00104e3:	83 f8 02             	cmp    eax,0x2
c00104e6:	74 24                	je     c001050c <SysShutdown(regs*)+0x3c>
c00104e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00104ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00104f2:	83 c4 0c             	add    esp,0xc
c00104f5:	c3                   	ret    
c00104f6:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00104fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00104fd:	6a 00                	push   0x0
c00104ff:	6a 00                	push   0x0
c0010501:	6a 00                	push   0x0
c0010503:	50                   	push   eax
c0010504:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010507:	83 c4 10             	add    esp,0x10
c001050a:	eb dc                	jmp    c00104e8 <SysShutdown(regs*)+0x18>
c001050c:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0010511:	8b 10                	mov    edx,DWORD PTR [eax]
c0010513:	6a 00                	push   0x0
c0010515:	6a 00                	push   0x0
c0010517:	6a 01                	push   0x1
c0010519:	eb e8                	jmp    c0010503 <SysShutdown(regs*)+0x33>
c001051b:	a1 00 2a 02 c0       	mov    eax,ds:0xc0022a00
c0010520:	85 c0                	test   eax,eax
c0010522:	74 02                	je     c0010526 <SysShutdown(regs*)+0x56>
c0010524:	ff d0                	call   eax
c0010526:	31 c0                	xor    eax,eax
c0010528:	31 d2                	xor    edx,edx
c001052a:	83 c4 0c             	add    esp,0xc
c001052d:	c3                   	ret    

c001052e <SysRealpath(regs*)>:
c001052e:	83 ec 0c             	sub    esp,0xc
c0010531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010535:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010538:	85 d2                	test   edx,edx
c001053a:	74 07                	je     c0010543 <SysRealpath(regs*)+0x15>
c001053c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001053f:	85 c0                	test   eax,eax
c0010541:	75 0b                	jne    c001054e <SysRealpath(regs*)+0x20>
c0010543:	b8 01 00 00 00       	mov    eax,0x1
c0010548:	31 d2                	xor    edx,edx
c001054a:	83 c4 0c             	add    esp,0xc
c001054d:	c3                   	ret    
c001054e:	51                   	push   ecx
c001054f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010555:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010558:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001055e:	51                   	push   ecx
c001055f:	52                   	push   edx
c0010560:	50                   	push   eax
c0010561:	e8 ba a2 ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010566:	83 c4 10             	add    esp,0x10
c0010569:	31 c0                	xor    eax,eax
c001056b:	31 d2                	xor    edx,edx
c001056d:	83 c4 0c             	add    esp,0xc
c0010570:	c3                   	ret    

c0010571 <SysReadDir(regs*)>:
c0010571:	53                   	push   ebx
c0010572:	83 ec 18             	sub    esp,0x18
c0010575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010579:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001057c:	83 f8 02             	cmp    eax,0x2
c001057f:	76 61                	jbe    c00105e2 <SysReadDir(regs*)+0x71>
c0010581:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010588:	77 49                	ja     c00105d3 <SysReadDir(regs*)+0x62>
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	50                   	push   eax
c001058e:	e8 18 8b ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010593:	83 c4 10             	add    esp,0x10
c0010596:	85 c0                	test   eax,eax
c0010598:	74 39                	je     c00105d3 <SysReadDir(regs*)+0x62>
c001059a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00105a2:	83 ec 0c             	sub    esp,0xc
c00105a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00105ab:	51                   	push   ecx
c00105ac:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00105af:	51                   	push   ecx
c00105b0:	6a 00                	push   0x0
c00105b2:	68 10 01 00 00       	push   0x110
c00105b7:	50                   	push   eax
c00105b8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00105bb:	83 c4 20             	add    esp,0x20
c00105be:	85 c0                	test   eax,eax
c00105c0:	74 29                	je     c00105eb <SysReadDir(regs*)+0x7a>
c00105c2:	83 f8 07             	cmp    eax,0x7
c00105c5:	74 1b                	je     c00105e2 <SysReadDir(regs*)+0x71>
c00105c7:	b8 02 00 00 00       	mov    eax,0x2
c00105cc:	31 d2                	xor    edx,edx
c00105ce:	83 c4 18             	add    esp,0x18
c00105d1:	5b                   	pop    ebx
c00105d2:	c3                   	ret    
c00105d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105dd:	83 c4 18             	add    esp,0x18
c00105e0:	5b                   	pop    ebx
c00105e1:	c3                   	ret    
c00105e2:	b8 01 00 00 00       	mov    eax,0x1
c00105e7:	31 d2                	xor    edx,edx
c00105e9:	eb e3                	jmp    c00105ce <SysReadDir(regs*)+0x5d>
c00105eb:	31 c0                	xor    eax,eax
c00105ed:	31 d2                	xor    edx,edx
c00105ef:	eb dd                	jmp    c00105ce <SysReadDir(regs*)+0x5d>

c00105f1 <SysIsATTY(regs*)>:
c00105f1:	83 ec 0c             	sub    esp,0xc
c00105f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00105fb:	83 f8 02             	cmp    eax,0x2
c00105fe:	76 07                	jbe    c0010607 <SysIsATTY(regs*)+0x16>
c0010600:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010605:	75 28                	jne    c001062f <SysIsATTY(regs*)+0x3e>
c0010607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001060c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001060f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010615:	85 c0                	test   eax,eax
c0010617:	74 26                	je     c001063f <SysIsATTY(regs*)+0x4e>
c0010619:	83 ec 0c             	sub    esp,0xc
c001061c:	8b 10                	mov    edx,DWORD PTR [eax]
c001061e:	50                   	push   eax
c001061f:	ff 12                	call   DWORD PTR [edx]
c0010621:	31 d2                	xor    edx,edx
c0010623:	25 ff 00 00 00       	and    eax,0xff
c0010628:	83 c4 10             	add    esp,0x10
c001062b:	83 c4 0c             	add    esp,0xc
c001062e:	c3                   	ret    
c001062f:	83 ec 0c             	sub    esp,0xc
c0010632:	50                   	push   eax
c0010633:	e8 73 8a ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010638:	83 c4 10             	add    esp,0x10
c001063b:	85 c0                	test   eax,eax
c001063d:	75 da                	jne    c0010619 <SysIsATTY(regs*)+0x28>
c001063f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010644:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010649:	83 c4 0c             	add    esp,0xc
c001064c:	c3                   	ret    

c001064d <SysSeek(regs*)>:
c001064d:	53                   	push   ebx
c001064e:	83 ec 08             	sub    esp,0x8
c0010651:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010655:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010658:	8d 50 fd             	lea    edx,[eax-0x3]
c001065b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010661:	77 34                	ja     c0010697 <SysSeek(regs*)+0x4a>
c0010663:	83 ec 0c             	sub    esp,0xc
c0010666:	50                   	push   eax
c0010667:	e8 3f 8a ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001066c:	83 c4 0c             	add    esp,0xc
c001066f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010672:	31 db                	xor    ebx,ebx
c0010674:	53                   	push   ebx
c0010675:	51                   	push   ecx
c0010676:	50                   	push   eax
c0010677:	e8 cc a4 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001067c:	83 c4 10             	add    esp,0x10
c001067f:	85 c0                	test   eax,eax
c0010681:	0f 95 c0             	setne  al
c0010684:	31 d2                	xor    edx,edx
c0010686:	25 ff 00 00 00       	and    eax,0xff
c001068b:	f7 d8                	neg    eax
c001068d:	83 d2 00             	adc    edx,0x0
c0010690:	83 c4 08             	add    esp,0x8
c0010693:	f7 da                	neg    edx
c0010695:	5b                   	pop    ebx
c0010696:	c3                   	ret    
c0010697:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001069c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106a1:	83 c4 08             	add    esp,0x8
c00106a4:	5b                   	pop    ebx
c00106a5:	c3                   	ret    

c00106a6 <SysTell(regs*)>:
c00106a6:	53                   	push   ebx
c00106a7:	83 ec 08             	sub    esp,0x8
c00106aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106b1:	83 f8 02             	cmp    eax,0x2
c00106b4:	76 50                	jbe    c0010706 <SysTell(regs*)+0x60>
c00106b6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106bb:	76 19                	jbe    c00106d6 <SysTell(regs*)+0x30>
c00106bd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00106c0:	31 d2                	xor    edx,edx
c00106c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00106c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106cf:	31 c0                	xor    eax,eax
c00106d1:	83 c4 08             	add    esp,0x8
c00106d4:	5b                   	pop    ebx
c00106d5:	c3                   	ret    
c00106d6:	83 ec 0c             	sub    esp,0xc
c00106d9:	50                   	push   eax
c00106da:	e8 cc 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00106df:	5a                   	pop    edx
c00106e0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00106e3:	59                   	pop    ecx
c00106e4:	53                   	push   ebx
c00106e5:	50                   	push   eax
c00106e6:	e8 b3 a4 ff ff       	call   c000ab9e <File::tell(unsigned long long*)>
c00106eb:	83 c4 10             	add    esp,0x10
c00106ee:	85 c0                	test   eax,eax
c00106f0:	0f 95 c0             	setne  al
c00106f3:	31 d2                	xor    edx,edx
c00106f5:	25 ff 00 00 00       	and    eax,0xff
c00106fa:	f7 d8                	neg    eax
c00106fc:	83 d2 00             	adc    edx,0x0
c00106ff:	83 c4 08             	add    esp,0x8
c0010702:	f7 da                	neg    edx
c0010704:	5b                   	pop    ebx
c0010705:	c3                   	ret    
c0010706:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001070b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010710:	83 c4 08             	add    esp,0x8
c0010713:	5b                   	pop    ebx
c0010714:	c3                   	ret    

c0010715 <SysSize(regs*)>:
c0010715:	53                   	push   ebx
c0010716:	83 ec 18             	sub    esp,0x18
c0010719:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001071d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010720:	83 f8 02             	cmp    eax,0x2
c0010723:	76 56                	jbe    c001077b <SysSize(regs*)+0x66>
c0010725:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001072a:	76 19                	jbe    c0010745 <SysSize(regs*)+0x30>
c001072c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001072f:	31 d2                	xor    edx,edx
c0010731:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010737:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001073e:	31 c0                	xor    eax,eax
c0010740:	83 c4 18             	add    esp,0x18
c0010743:	5b                   	pop    ebx
c0010744:	c3                   	ret    
c0010745:	83 ec 0c             	sub    esp,0xc
c0010748:	50                   	push   eax
c0010749:	e8 5d 89 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c001074e:	83 c4 0c             	add    esp,0xc
c0010751:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010755:	52                   	push   edx
c0010756:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010759:	52                   	push   edx
c001075a:	50                   	push   eax
c001075b:	e8 d6 a5 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c0010760:	83 c4 10             	add    esp,0x10
c0010763:	85 c0                	test   eax,eax
c0010765:	0f 95 c0             	setne  al
c0010768:	31 d2                	xor    edx,edx
c001076a:	25 ff 00 00 00       	and    eax,0xff
c001076f:	f7 d8                	neg    eax
c0010771:	83 d2 00             	adc    edx,0x0
c0010774:	83 c4 18             	add    esp,0x18
c0010777:	f7 da                	neg    edx
c0010779:	5b                   	pop    ebx
c001077a:	c3                   	ret    
c001077b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010780:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010785:	83 c4 18             	add    esp,0x18
c0010788:	5b                   	pop    ebx
c0010789:	c3                   	ret    

c001078a <SysSizeFromFilename(regs*)>:
c001078a:	57                   	push   edi
c001078b:	56                   	push   esi
c001078c:	53                   	push   ebx
c001078d:	83 ec 20             	sub    esp,0x20
c0010790:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010794:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010797:	83 fb 02             	cmp    ebx,0x2
c001079a:	0f 86 8c 00 00 00    	jbe    c001082c <SysSizeFromFilename(regs*)+0xa2>
c00107a0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00107a6:	76 1b                	jbe    c00107c3 <SysSizeFromFilename(regs*)+0x39>
c00107a8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00107ab:	31 d2                	xor    edx,edx
c00107ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107ba:	83 c4 20             	add    esp,0x20
c00107bd:	31 c0                	xor    eax,eax
c00107bf:	5b                   	pop    ebx
c00107c0:	5e                   	pop    esi
c00107c1:	5f                   	pop    edi
c00107c2:	c3                   	ret    
c00107c3:	83 ec 0c             	sub    esp,0xc
c00107c6:	68 14 01 00 00       	push   0x114
c00107cb:	e8 e9 6f ff ff       	call   c00077b9 <malloc>
c00107d0:	83 c4 0c             	add    esp,0xc
c00107d3:	89 c7                	mov    edi,eax
c00107d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107da:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107dd:	50                   	push   eax
c00107de:	53                   	push   ebx
c00107df:	57                   	push   edi
c00107e0:	e8 e5 a1 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00107e5:	83 c4 0c             	add    esp,0xc
c00107e8:	8d 44 24 23          	lea    eax,[esp+0x23]
c00107ec:	50                   	push   eax
c00107ed:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00107f0:	52                   	push   edx
c00107f1:	57                   	push   edi
c00107f2:	e8 3f a5 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00107f7:	83 c4 10             	add    esp,0x10
c00107fa:	85 ff                	test   edi,edi
c00107fc:	74 14                	je     c0010812 <SysSizeFromFilename(regs*)+0x88>
c00107fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010802:	8b 17                	mov    edx,DWORD PTR [edi]
c0010804:	83 ec 0c             	sub    esp,0xc
c0010807:	57                   	push   edi
c0010808:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001080b:	83 c4 10             	add    esp,0x10
c001080e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010812:	85 c0                	test   eax,eax
c0010814:	0f 95 c0             	setne  al
c0010817:	31 d2                	xor    edx,edx
c0010819:	25 ff 00 00 00       	and    eax,0xff
c001081e:	f7 d8                	neg    eax
c0010820:	83 d2 00             	adc    edx,0x0
c0010823:	83 c4 20             	add    esp,0x20
c0010826:	f7 da                	neg    edx
c0010828:	5b                   	pop    ebx
c0010829:	5e                   	pop    esi
c001082a:	5f                   	pop    edi
c001082b:	c3                   	ret    
c001082c:	83 c4 20             	add    esp,0x20
c001082f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010834:	5b                   	pop    ebx
c0010835:	ba ff ff ff ff       	mov    edx,0xffffffff
c001083a:	5e                   	pop    esi
c001083b:	5f                   	pop    edi
c001083c:	c3                   	ret    

c001083d <SysClose(regs*)>:
c001083d:	53                   	push   ebx
c001083e:	83 ec 08             	sub    esp,0x8
c0010841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010845:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010848:	83 f8 02             	cmp    eax,0x2
c001084b:	76 41                	jbe    c001088e <SysClose(regs*)+0x51>
c001084d:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010853:	83 fa 01             	cmp    edx,0x1
c0010856:	76 2d                	jbe    c0010885 <SysClose(regs*)+0x48>
c0010858:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001085d:	77 2f                	ja     c001088e <SysClose(regs*)+0x51>
c001085f:	83 ec 0c             	sub    esp,0xc
c0010862:	50                   	push   eax
c0010863:	e8 43 88 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010868:	89 c3                	mov    ebx,eax
c001086a:	89 04 24             	mov    DWORD PTR [esp],eax
c001086d:	e8 76 a2 ff ff       	call   c000aae8 <File::close()>
c0010872:	83 c4 10             	add    esp,0x10
c0010875:	85 db                	test   ebx,ebx
c0010877:	74 0c                	je     c0010885 <SysClose(regs*)+0x48>
c0010879:	83 ec 0c             	sub    esp,0xc
c001087c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001087e:	53                   	push   ebx
c001087f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010882:	83 c4 10             	add    esp,0x10
c0010885:	31 c0                	xor    eax,eax
c0010887:	31 d2                	xor    edx,edx
c0010889:	83 c4 08             	add    esp,0x8
c001088c:	5b                   	pop    ebx
c001088d:	c3                   	ret    
c001088e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010893:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010898:	83 c4 08             	add    esp,0x8
c001089b:	5b                   	pop    ebx
c001089c:	c3                   	ret    

c001089d <SysOpenDir(regs*)>:
c001089d:	56                   	push   esi
c001089e:	53                   	push   ebx
c001089f:	50                   	push   eax
c00108a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00108a7:	85 c0                	test   eax,eax
c00108a9:	74 5b                	je     c0010906 <SysOpenDir(regs*)+0x69>
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	68 14 01 00 00       	push   0x114
c00108b3:	e8 01 6f ff ff       	call   c00077b9 <malloc>
c00108b8:	83 c4 0c             	add    esp,0xc
c00108bb:	89 c6                	mov    esi,eax
c00108bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108c5:	50                   	push   eax
c00108c6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00108c9:	50                   	push   eax
c00108ca:	56                   	push   esi
c00108cb:	e8 24 a6 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c00108d0:	83 c4 10             	add    esp,0x10
c00108d3:	85 f6                	test   esi,esi
c00108d5:	74 2f                	je     c0010906 <SysOpenDir(regs*)+0x69>
c00108d7:	83 ec 0c             	sub    esp,0xc
c00108da:	56                   	push   esi
c00108db:	e8 d4 a6 ff ff       	call   c000afb4 <Directory::open()>
c00108e0:	83 c4 10             	add    esp,0x10
c00108e3:	85 c0                	test   eax,eax
c00108e5:	75 1f                	jne    c0010906 <SysOpenDir(regs*)+0x69>
c00108e7:	83 ec 0c             	sub    esp,0xc
c00108ea:	56                   	push   esi
c00108eb:	e8 c6 84 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c00108f0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00108f3:	83 c4 10             	add    esp,0x10
c00108f6:	89 02                	mov    DWORD PTR [edx],eax
c00108f8:	c1 f8 1f             	sar    eax,0x1f
c00108fb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00108fe:	31 c0                	xor    eax,eax
c0010900:	59                   	pop    ecx
c0010901:	31 d2                	xor    edx,edx
c0010903:	5b                   	pop    ebx
c0010904:	5e                   	pop    esi
c0010905:	c3                   	ret    
c0010906:	59                   	pop    ecx
c0010907:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001090c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010911:	5b                   	pop    ebx
c0010912:	5e                   	pop    esi
c0010913:	c3                   	ret    

c0010914 <SysCloseDir(regs*)>:
c0010914:	53                   	push   ebx
c0010915:	83 ec 08             	sub    esp,0x8
c0010918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001091f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010922:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010928:	77 2f                	ja     c0010959 <SysCloseDir(regs*)+0x45>
c001092a:	83 ec 0c             	sub    esp,0xc
c001092d:	50                   	push   eax
c001092e:	e8 78 87 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0010933:	89 c3                	mov    ebx,eax
c0010935:	89 04 24             	mov    DWORD PTR [esp],eax
c0010938:	e8 d3 a6 ff ff       	call   c000b010 <Directory::close()>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	85 db                	test   ebx,ebx
c0010942:	74 0c                	je     c0010950 <SysCloseDir(regs*)+0x3c>
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010949:	53                   	push   ebx
c001094a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	31 c0                	xor    eax,eax
c0010952:	31 d2                	xor    edx,edx
c0010954:	83 c4 08             	add    esp,0x8
c0010957:	5b                   	pop    ebx
c0010958:	c3                   	ret    
c0010959:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001095e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010963:	83 c4 08             	add    esp,0x8
c0010966:	5b                   	pop    ebx
c0010967:	c3                   	ret    

c0010968 <SysMakeDir(regs*)>:
c0010968:	56                   	push   esi
c0010969:	53                   	push   ebx
c001096a:	83 ec 10             	sub    esp,0x10
c001096d:	68 14 01 00 00       	push   0x114
c0010972:	e8 42 6e ff ff       	call   c00077b9 <malloc>
c0010977:	83 c4 0c             	add    esp,0xc
c001097a:	89 c3                	mov    ebx,eax
c001097c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010981:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010984:	56                   	push   esi
c0010985:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010989:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001098c:	50                   	push   eax
c001098d:	53                   	push   ebx
c001098e:	e8 61 a5 ff ff       	call   c000aef4 <Directory::Directory(char const*, Process*)>
c0010993:	83 c4 10             	add    esp,0x10
c0010996:	85 db                	test   ebx,ebx
c0010998:	74 32                	je     c00109cc <SysMakeDir(regs*)+0x64>
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	53                   	push   ebx
c001099e:	e8 f1 a7 ff ff       	call   c000b194 <Directory::create()>
c00109a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109a6:	89 c6                	mov    esi,eax
c00109a8:	e8 63 a6 ff ff       	call   c000b010 <Directory::close()>
c00109ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109b5:	83 c4 10             	add    esp,0x10
c00109b8:	31 c0                	xor    eax,eax
c00109ba:	59                   	pop    ecx
c00109bb:	85 f6                	test   esi,esi
c00109bd:	5b                   	pop    ebx
c00109be:	0f 95 c0             	setne  al
c00109c1:	5e                   	pop    esi
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	f7 d8                	neg    eax
c00109c6:	83 d2 00             	adc    edx,0x0
c00109c9:	f7 da                	neg    edx
c00109cb:	c3                   	ret    
c00109cc:	59                   	pop    ecx
c00109cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109d7:	5b                   	pop    ebx
c00109d8:	5e                   	pop    esi
c00109d9:	c3                   	ret    

c00109da <SysWait(regs*)>:
c00109da:	83 ec 10             	sub    esp,0x10
c00109dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00109e1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109e4:	52                   	push   edx
c00109e5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00109e8:	51                   	push   ecx
c00109e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ec:	50                   	push   eax
c00109ed:	e8 02 2b 00 00       	call   c00134f4 <waitTask(int, int*, int)>
c00109f2:	83 c4 1c             	add    esp,0x1c
c00109f5:	99                   	cdq    
c00109f6:	c3                   	ret    

c00109f7 <SysNotImpl(regs*)>:
c00109f7:	83 ec 18             	sub    esp,0x18
c00109fa:	68 d1 e1 01 c0       	push   0xc001e1d1
c00109ff:	e8 b3 f6 ff ff       	call   c00100b7 <KePanic(char const*)>
c0010a04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a0e:	83 c4 1c             	add    esp,0x1c
c0010a11:	c3                   	ret    

c0010a12 <SysPanic(regs*)>:
c0010a12:	83 ec 18             	sub    esp,0x18
c0010a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a19:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a1c:	50                   	push   eax
c0010a1d:	e8 95 f6 ff ff       	call   c00100b7 <KePanic(char const*)>
c0010a22:	b8 01 00 00 00       	mov    eax,0x1
c0010a27:	31 d2                	xor    edx,edx
c0010a29:	83 c4 1c             	add    esp,0x1c
c0010a2c:	c3                   	ret    

c0010a2d <SysRmdir(regs*)>:
c0010a2d:	56                   	push   esi
c0010a2e:	53                   	push   ebx
c0010a2f:	83 ec 20             	sub    esp,0x20
c0010a32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a36:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010a39:	68 14 01 00 00       	push   0x114
c0010a3e:	e8 76 6d ff ff       	call   c00077b9 <malloc>
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	89 c3                	mov    ebx,eax
c0010a48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a50:	50                   	push   eax
c0010a51:	56                   	push   esi
c0010a52:	53                   	push   ebx
c0010a53:	e8 72 9f ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010a58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a5b:	e8 a2 a1 ff ff       	call   c000ac02 <File::unlink()>
c0010a60:	83 c4 10             	add    esp,0x10
c0010a63:	85 db                	test   ebx,ebx
c0010a65:	74 14                	je     c0010a7b <SysRmdir(regs*)+0x4e>
c0010a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a6d:	83 ec 0c             	sub    esp,0xc
c0010a70:	53                   	push   ebx
c0010a71:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a7b:	85 c0                	test   eax,eax
c0010a7d:	0f 95 c0             	setne  al
c0010a80:	31 d2                	xor    edx,edx
c0010a82:	25 ff 00 00 00       	and    eax,0xff
c0010a87:	f7 d8                	neg    eax
c0010a89:	83 d2 00             	adc    edx,0x0
c0010a8c:	83 c4 14             	add    esp,0x14
c0010a8f:	f7 da                	neg    edx
c0010a91:	5b                   	pop    ebx
c0010a92:	5e                   	pop    esi
c0010a93:	c3                   	ret    

c0010a94 <SysUnlink(regs*)>:
c0010a94:	56                   	push   esi
c0010a95:	53                   	push   ebx
c0010a96:	83 ec 20             	sub    esp,0x20
c0010a99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010a9d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010aa0:	68 14 01 00 00       	push   0x114
c0010aa5:	e8 0f 6d ff ff       	call   c00077b9 <malloc>
c0010aaa:	83 c4 0c             	add    esp,0xc
c0010aad:	89 c3                	mov    ebx,eax
c0010aaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ab4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ab7:	50                   	push   eax
c0010ab8:	56                   	push   esi
c0010ab9:	53                   	push   ebx
c0010aba:	e8 0b 9f ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010abf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ac2:	e8 3b a1 ff ff       	call   c000ac02 <File::unlink()>
c0010ac7:	83 c4 10             	add    esp,0x10
c0010aca:	85 db                	test   ebx,ebx
c0010acc:	74 14                	je     c0010ae2 <SysUnlink(regs*)+0x4e>
c0010ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ad2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	53                   	push   ebx
c0010ad8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010adb:	83 c4 10             	add    esp,0x10
c0010ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ae2:	85 c0                	test   eax,eax
c0010ae4:	0f 95 c0             	setne  al
c0010ae7:	31 d2                	xor    edx,edx
c0010ae9:	25 ff 00 00 00       	and    eax,0xff
c0010aee:	f7 d8                	neg    eax
c0010af0:	83 d2 00             	adc    edx,0x0
c0010af3:	83 c4 14             	add    esp,0x14
c0010af6:	f7 da                	neg    edx
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	c3                   	ret    

c0010afb <SysGetArgv(regs*)>:
c0010afb:	83 ec 0c             	sub    esp,0xc
c0010afe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b02:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b05:	85 c0                	test   eax,eax
c0010b07:	78 2c                	js     c0010b35 <SysGetArgv(regs*)+0x3a>
c0010b09:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b0f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b12:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010b18:	7d 1b                	jge    c0010b35 <SysGetArgv(regs*)+0x3a>
c0010b1a:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010b21:	85 c0                	test   eax,eax
c0010b23:	74 18                	je     c0010b3d <SysGetArgv(regs*)+0x42>
c0010b25:	83 ec 08             	sub    esp,0x8
c0010b28:	50                   	push   eax
c0010b29:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010b2c:	50                   	push   eax
c0010b2d:	e8 ce fa fe ff       	call   c0000600 <strcpy>
c0010b32:	83 c4 10             	add    esp,0x10
c0010b35:	31 c0                	xor    eax,eax
c0010b37:	31 d2                	xor    edx,edx
c0010b39:	83 c4 0c             	add    esp,0xc
c0010b3c:	c3                   	ret    
c0010b3d:	b8 01 00 00 00       	mov    eax,0x1
c0010b42:	31 d2                	xor    edx,edx
c0010b44:	83 c4 0c             	add    esp,0xc
c0010b47:	c3                   	ret    

c0010b48 <SysUSleep(regs*)>:
c0010b48:	83 ec 1c             	sub    esp,0x1c
c0010b4b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010b4f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010b52:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010b55:	6a 00                	push   0x0
c0010b57:	6a 64                	push   0x64
c0010b59:	52                   	push   edx
c0010b5a:	50                   	push   eax
c0010b5b:	e8 60 b0 00 00       	call   c001bbc0 <__udivdi3>
c0010b60:	83 c4 14             	add    esp,0x14
c0010b63:	50                   	push   eax
c0010b64:	e8 5f 2a 00 00       	call   c00135c8 <milliTenthSleep(unsigned int)>
c0010b69:	31 c0                	xor    eax,eax
c0010b6b:	31 d2                	xor    edx,edx
c0010b6d:	83 c4 1c             	add    esp,0x1c
c0010b70:	c3                   	ret    

c0010b71 <SysSpawn(regs*)>:
c0010b71:	56                   	push   esi
c0010b72:	53                   	push   ebx
c0010b73:	50                   	push   eax
c0010b74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b78:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010b7b:	85 c0                	test   eax,eax
c0010b7d:	75 08                	jne    c0010b87 <SysSpawn(regs*)+0x16>
c0010b7f:	59                   	pop    ecx
c0010b80:	31 c0                	xor    eax,eax
c0010b82:	31 d2                	xor    edx,edx
c0010b84:	5b                   	pop    ebx
c0010b85:	5e                   	pop    esi
c0010b86:	c3                   	ret    
c0010b87:	83 ec 0c             	sub    esp,0xc
c0010b8a:	68 1f 07 00 00       	push   0x71f
c0010b8f:	e8 25 6c ff ff       	call   c00077b9 <malloc>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	89 c6                	mov    esi,eax
c0010b99:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b9c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b9f:	85 c0                	test   eax,eax
c0010ba1:	75 33                	jne    c0010bd6 <SysSpawn(regs*)+0x65>
c0010ba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ba8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bab:	52                   	push   edx
c0010bac:	50                   	push   eax
c0010bad:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010bb0:	53                   	push   ebx
c0010bb1:	56                   	push   esi
c0010bb2:	e8 f5 20 00 00       	call   c0012cac <Process::Process(char const*, Process*, char**)>
c0010bb7:	83 c4 10             	add    esp,0x10
c0010bba:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010bc1:	75 bc                	jne    c0010b7f <SysSpawn(regs*)+0xe>
c0010bc3:	83 ec 0c             	sub    esp,0xc
c0010bc6:	56                   	push   esi
c0010bc7:	e8 d4 25 00 00       	call   c00131a0 <Process::createUserThread()>
c0010bcc:	8b 06                	mov    eax,DWORD PTR [esi]
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	99                   	cdq    
c0010bd2:	59                   	pop    ecx
c0010bd3:	5b                   	pop    ebx
c0010bd4:	5e                   	pop    esi
c0010bd5:	c3                   	ret    
c0010bd6:	31 c0                	xor    eax,eax
c0010bd8:	eb d1                	jmp    c0010bab <SysSpawn(regs*)+0x3a>

c0010bda <SysGetEnv(regs*)>:
c0010bda:	57                   	push   edi
c0010bdb:	56                   	push   esi
c0010bdc:	53                   	push   ebx
c0010bdd:	83 ec 1c             	sub    esp,0x1c
c0010be0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010be4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010be9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010bec:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010bef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf2:	50                   	push   eax
c0010bf3:	e8 77 f3 ff ff       	call   c000ff6f <Krnl::getProcessTotalEnvCount(Process*)>
c0010bf8:	83 c4 10             	add    esp,0x10
c0010bfb:	39 c7                	cmp    edi,eax
c0010bfd:	7c 14                	jl     c0010c13 <SysGetEnv(regs*)+0x39>
c0010bff:	85 f6                	test   esi,esi
c0010c01:	75 0b                	jne    c0010c0e <SysGetEnv(regs*)+0x34>
c0010c03:	83 c4 10             	add    esp,0x10
c0010c06:	31 c0                	xor    eax,eax
c0010c08:	5b                   	pop    ebx
c0010c09:	31 d2                	xor    edx,edx
c0010c0b:	5e                   	pop    esi
c0010c0c:	5f                   	pop    edi
c0010c0d:	c3                   	ret    
c0010c0e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c11:	eb f0                	jmp    c0010c03 <SysGetEnv(regs*)+0x29>
c0010c13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010c17:	52                   	push   edx
c0010c18:	57                   	push   edi
c0010c19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c1f:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010c22:	51                   	push   ecx
c0010c23:	50                   	push   eax
c0010c24:	e8 66 f3 ff ff       	call   c000ff8f <Krnl::getProcessEnvPair(Process*, int)>
c0010c29:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010c2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c30:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c34:	83 c4 0c             	add    esp,0xc
c0010c37:	85 db                	test   ebx,ebx
c0010c39:	75 23                	jne    c0010c5e <SysGetEnv(regs*)+0x84>
c0010c3b:	83 ec 0c             	sub    esp,0xc
c0010c3e:	50                   	push   eax
c0010c3f:	e8 fc f8 fe ff       	call   c0000540 <strlen>
c0010c44:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c47:	89 c3                	mov    ebx,eax
c0010c49:	e8 f2 f8 fe ff       	call   c0000540 <strlen>
c0010c4e:	31 d2                	xor    edx,edx
c0010c50:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	83 c4 10             	add    esp,0x10
c0010c5a:	5b                   	pop    ebx
c0010c5b:	5e                   	pop    esi
c0010c5c:	5f                   	pop    edi
c0010c5d:	c3                   	ret    
c0010c5e:	83 ec 08             	sub    esp,0x8
c0010c61:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010c64:	50                   	push   eax
c0010c65:	56                   	push   esi
c0010c66:	e8 95 f9 fe ff       	call   c0000600 <strcpy>
c0010c6b:	58                   	pop    eax
c0010c6c:	5a                   	pop    edx
c0010c6d:	68 eb e1 01 c0       	push   0xc001e1eb
c0010c72:	56                   	push   esi
c0010c73:	e8 48 fb fe ff       	call   c00007c0 <strcat>
c0010c78:	59                   	pop    ecx
c0010c79:	5b                   	pop    ebx
c0010c7a:	57                   	push   edi
c0010c7b:	56                   	push   esi
c0010c7c:	e8 3f fb fe ff       	call   c00007c0 <strcat>
c0010c81:	83 c4 10             	add    esp,0x10
c0010c84:	e9 7a ff ff ff       	jmp    c0010c03 <SysGetEnv(regs*)+0x29>

c0010c89 <SysSetFatAttrib(regs*)>:
c0010c89:	57                   	push   edi
c0010c8a:	56                   	push   esi
c0010c8b:	53                   	push   ebx
c0010c8c:	83 ec 1c             	sub    esp,0x1c
c0010c8f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010c93:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010c96:	68 14 01 00 00       	push   0x114
c0010c9b:	e8 19 6b ff ff       	call   c00077b9 <malloc>
c0010ca0:	83 c4 0c             	add    esp,0xc
c0010ca3:	89 c3                	mov    ebx,eax
c0010ca5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010caa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cad:	50                   	push   eax
c0010cae:	57                   	push   edi
c0010caf:	53                   	push   ebx
c0010cb0:	e8 15 9d ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010cb5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010cb8:	83 c4 0c             	add    esp,0xc
c0010cbb:	0f b6 d4             	movzx  edx,ah
c0010cbe:	25 ff 00 00 00       	and    eax,0xff
c0010cc3:	52                   	push   edx
c0010cc4:	50                   	push   eax
c0010cc5:	53                   	push   ebx
c0010cc6:	e8 d1 9f ff ff       	call   c000ac9c <File::chfatattr(unsigned char, unsigned char)>
c0010ccb:	83 c4 10             	add    esp,0x10
c0010cce:	85 db                	test   ebx,ebx
c0010cd0:	74 14                	je     c0010ce6 <SysSetFatAttrib(regs*)+0x5d>
c0010cd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cd6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	53                   	push   ebx
c0010cdc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010cdf:	83 c4 10             	add    esp,0x10
c0010ce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ce6:	85 c0                	test   eax,eax
c0010ce8:	0f 95 c0             	setne  al
c0010ceb:	31 d2                	xor    edx,edx
c0010ced:	25 ff 00 00 00       	and    eax,0xff
c0010cf2:	f7 d8                	neg    eax
c0010cf4:	83 d2 00             	adc    edx,0x0
c0010cf7:	83 c4 10             	add    esp,0x10
c0010cfa:	f7 da                	neg    edx
c0010cfc:	5b                   	pop    ebx
c0010cfd:	5e                   	pop    esi
c0010cfe:	5f                   	pop    edi
c0010cff:	c3                   	ret    

c0010d00 <SysPipe(regs*)>:
c0010d00:	57                   	push   edi
c0010d01:	56                   	push   esi
c0010d02:	53                   	push   ebx
c0010d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d07:	83 ec 0c             	sub    esp,0xc
c0010d0a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010d0d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010d10:	6a 20                	push   0x20
c0010d12:	e8 a2 6a ff ff       	call   c00077b9 <malloc>
c0010d17:	89 c3                	mov    ebx,eax
c0010d19:	58                   	pop    eax
c0010d1a:	5a                   	pop    edx
c0010d1b:	68 00 50 00 00       	push   0x5000
c0010d20:	53                   	push   ebx
c0010d21:	e8 98 73 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010d26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d29:	e8 88 80 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010d2e:	89 07                	mov    DWORD PTR [edi],eax
c0010d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d33:	e8 7e 80 ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010d38:	83 c4 10             	add    esp,0x10
c0010d3b:	89 06                	mov    DWORD PTR [esi],eax
c0010d3d:	31 d2                	xor    edx,edx
c0010d3f:	5b                   	pop    ebx
c0010d40:	31 c0                	xor    eax,eax
c0010d42:	5e                   	pop    esi
c0010d43:	5f                   	pop    edi
c0010d44:	c3                   	ret    

c0010d45 <SysGetUnixTime(regs*)>:
c0010d45:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0010d4a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010d50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d54:	e9 81 a6 ff ff       	jmp    c000b3da <Clock::timeInSecondsLocal()>

c0010d59 <string_ends_with(char const*, char const*)>:
c0010d59:	57                   	push   edi
c0010d5a:	56                   	push   esi
c0010d5b:	53                   	push   ebx
c0010d5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d60:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	53                   	push   ebx
c0010d68:	e8 d3 f7 fe ff       	call   c0000540 <strlen>
c0010d6d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d70:	89 c6                	mov    esi,eax
c0010d72:	e8 c9 f7 fe ff       	call   c0000540 <strlen>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	39 c6                	cmp    esi,eax
c0010d7c:	7d 06                	jge    c0010d84 <string_ends_with(char const*, char const*)+0x2b>
c0010d7e:	5b                   	pop    ebx
c0010d7f:	31 c0                	xor    eax,eax
c0010d81:	5e                   	pop    esi
c0010d82:	5f                   	pop    edi
c0010d83:	c3                   	ret    
c0010d84:	83 ec 08             	sub    esp,0x8
c0010d87:	29 c6                	sub    esi,eax
c0010d89:	57                   	push   edi
c0010d8a:	01 f3                	add    ebx,esi
c0010d8c:	53                   	push   ebx
c0010d8d:	e8 4e f9 fe ff       	call   c00006e0 <strcmp>
c0010d92:	83 c4 10             	add    esp,0x10
c0010d95:	85 c0                	test   eax,eax
c0010d97:	5b                   	pop    ebx
c0010d98:	0f 94 c0             	sete   al
c0010d9b:	5e                   	pop    esi
c0010d9c:	25 ff 00 00 00       	and    eax,0xff
c0010da1:	5f                   	pop    edi
c0010da2:	c3                   	ret    

c0010da3 <SysOpen(regs*)>:
c0010da3:	56                   	push   esi
c0010da4:	53                   	push   ebx
c0010da5:	81 ec 04 01 00 00    	sub    esp,0x104
c0010dab:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010db2:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010db5:	85 c9                	test   ecx,ecx
c0010db7:	0f 84 b9 01 00 00    	je     c0010f76 <SysOpen(regs*)+0x1d3>
c0010dbd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010dc0:	85 c0                	test   eax,eax
c0010dc2:	0f 84 ae 01 00 00    	je     c0010f76 <SysOpen(regs*)+0x1d3>
c0010dc8:	52                   	push   edx
c0010dc9:	68 ed e1 01 c0       	push   0xc001e1ed
c0010dce:	50                   	push   eax
c0010dcf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010dd3:	56                   	push   esi
c0010dd4:	e8 47 9a ff ff       	call   c000a820 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010dd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0010ddc:	e8 5f f7 fe ff       	call   c0000540 <strlen>
c0010de1:	83 c4 10             	add    esp,0x10
c0010de4:	48                   	dec    eax
c0010de5:	74 1d                	je     c0010e04 <SysOpen(regs*)+0x61>
c0010de7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010dea:	eb 0f                	jmp    c0010dfb <SysOpen(regs*)+0x58>
c0010dec:	80 fa 3a             	cmp    dl,0x3a
c0010def:	74 0f                	je     c0010e00 <SysOpen(regs*)+0x5d>
c0010df1:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010df5:	48                   	dec    eax
c0010df6:	74 0c                	je     c0010e04 <SysOpen(regs*)+0x61>
c0010df8:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010dfb:	80 fa 2e             	cmp    dl,0x2e
c0010dfe:	75 ec                	jne    c0010dec <SysOpen(regs*)+0x49>
c0010e00:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010e04:	83 ec 08             	sub    esp,0x8
c0010e07:	68 f1 e1 01 c0       	push   0xc001e1f1
c0010e0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e0f:	50                   	push   eax
c0010e10:	e8 44 ff ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010e15:	83 c4 10             	add    esp,0x10
c0010e18:	85 c0                	test   eax,eax
c0010e1a:	74 1d                	je     c0010e39 <SysOpen(regs*)+0x96>
c0010e1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e1f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010e25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e2c:	81 c4 04 01 00 00    	add    esp,0x104
c0010e32:	31 c0                	xor    eax,eax
c0010e34:	31 d2                	xor    edx,edx
c0010e36:	5b                   	pop    ebx
c0010e37:	5e                   	pop    esi
c0010e38:	c3                   	ret    
c0010e39:	83 ec 08             	sub    esp,0x8
c0010e3c:	68 f6 e1 01 c0       	push   0xc001e1f6
c0010e41:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e44:	50                   	push   eax
c0010e45:	e8 0f ff ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010e4a:	83 c4 10             	add    esp,0x10
c0010e4d:	85 c0                	test   eax,eax
c0010e4f:	75 cb                	jne    c0010e1c <SysOpen(regs*)+0x79>
c0010e51:	83 ec 08             	sub    esp,0x8
c0010e54:	68 f2 e1 01 c0       	push   0xc001e1f2
c0010e59:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e5c:	50                   	push   eax
c0010e5d:	e8 7e f8 fe ff       	call   c00006e0 <strcmp>
c0010e62:	83 c4 10             	add    esp,0x10
c0010e65:	85 c0                	test   eax,eax
c0010e67:	74 b3                	je     c0010e1c <SysOpen(regs*)+0x79>
c0010e69:	83 ec 08             	sub    esp,0x8
c0010e6c:	68 f1 e1 01 c0       	push   0xc001e1f1
c0010e71:	56                   	push   esi
c0010e72:	e8 e2 fe ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	85 c0                	test   eax,eax
c0010e7c:	75 9e                	jne    c0010e1c <SysOpen(regs*)+0x79>
c0010e7e:	83 ec 08             	sub    esp,0x8
c0010e81:	68 fb e1 01 c0       	push   0xc001e1fb
c0010e86:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e89:	50                   	push   eax
c0010e8a:	e8 ca fe ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010e8f:	83 c4 10             	add    esp,0x10
c0010e92:	85 c0                	test   eax,eax
c0010e94:	0f 85 ef 00 00 00    	jne    c0010f89 <SysOpen(regs*)+0x1e6>
c0010e9a:	83 ec 08             	sub    esp,0x8
c0010e9d:	68 00 e2 01 c0       	push   0xc001e200
c0010ea2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ea5:	50                   	push   eax
c0010ea6:	e8 ae fe ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010eab:	83 c4 10             	add    esp,0x10
c0010eae:	85 c0                	test   eax,eax
c0010eb0:	0f 85 d3 00 00 00    	jne    c0010f89 <SysOpen(regs*)+0x1e6>
c0010eb6:	83 ec 08             	sub    esp,0x8
c0010eb9:	68 fc e1 01 c0       	push   0xc001e1fc
c0010ebe:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010ec1:	51                   	push   ecx
c0010ec2:	e8 19 f8 fe ff       	call   c00006e0 <strcmp>
c0010ec7:	83 c4 10             	add    esp,0x10
c0010eca:	85 c0                	test   eax,eax
c0010ecc:	0f 84 b7 00 00 00    	je     c0010f89 <SysOpen(regs*)+0x1e6>
c0010ed2:	83 ec 08             	sub    esp,0x8
c0010ed5:	68 fb e1 01 c0       	push   0xc001e1fb
c0010eda:	56                   	push   esi
c0010edb:	e8 79 fe ff ff       	call   c0010d59 <string_ends_with(char const*, char const*)>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	85 c0                	test   eax,eax
c0010ee5:	0f 85 9e 00 00 00    	jne    c0010f89 <SysOpen(regs*)+0x1e6>
c0010eeb:	83 ec 0c             	sub    esp,0xc
c0010eee:	68 14 01 00 00       	push   0x114
c0010ef3:	e8 c1 68 ff ff       	call   c00077b9 <malloc>
c0010ef8:	83 c4 0c             	add    esp,0xc
c0010efb:	89 c6                	mov    esi,eax
c0010efd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f02:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f05:	50                   	push   eax
c0010f06:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010f09:	52                   	push   edx
c0010f0a:	56                   	push   esi
c0010f0b:	e8 ba 9a ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0010f10:	83 c4 10             	add    esp,0x10
c0010f13:	85 f6                	test   esi,esi
c0010f15:	74 5f                	je     c0010f76 <SysOpen(regs*)+0x1d3>
c0010f17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010f1a:	89 d0                	mov    eax,edx
c0010f1c:	25 ff 00 00 00       	and    eax,0xff
c0010f21:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010f24:	89 d0                	mov    eax,edx
c0010f26:	83 e0 01             	and    eax,0x1
c0010f29:	f6 c2 02             	test   dl,0x2
c0010f2c:	74 03                	je     c0010f31 <SysOpen(regs*)+0x18e>
c0010f2e:	83 c8 02             	or     eax,0x2
c0010f31:	f6 c2 04             	test   dl,0x4
c0010f34:	74 03                	je     c0010f39 <SysOpen(regs*)+0x196>
c0010f36:	83 c8 04             	or     eax,0x4
c0010f39:	f6 c2 08             	test   dl,0x8
c0010f3c:	74 03                	je     c0010f41 <SysOpen(regs*)+0x19e>
c0010f3e:	83 c8 0a             	or     eax,0xa
c0010f41:	83 e2 10             	and    edx,0x10
c0010f44:	74 03                	je     c0010f49 <SysOpen(regs*)+0x1a6>
c0010f46:	83 c8 12             	or     eax,0x12
c0010f49:	83 ec 08             	sub    esp,0x8
c0010f4c:	50                   	push   eax
c0010f4d:	56                   	push   esi
c0010f4e:	e8 37 9b ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	85 c0                	test   eax,eax
c0010f58:	75 1c                	jne    c0010f76 <SysOpen(regs*)+0x1d3>
c0010f5a:	83 ec 0c             	sub    esp,0xc
c0010f5d:	56                   	push   esi
c0010f5e:	e8 53 7e ff ff       	call   c0008db6 <UnixFile::getFileDescriptor()>
c0010f63:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	89 02                	mov    DWORD PTR [edx],eax
c0010f6b:	c1 f8 1f             	sar    eax,0x1f
c0010f6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f71:	e9 b6 fe ff ff       	jmp    c0010e2c <SysOpen(regs*)+0x89>
c0010f76:	81 c4 04 01 00 00    	add    esp,0x104
c0010f7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f86:	5b                   	pop    ebx
c0010f87:	5e                   	pop    esi
c0010f88:	c3                   	ret    
c0010f89:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f8c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010f92:	e9 8e fe ff ff       	jmp    c0010e25 <SysOpen(regs*)+0x82>

c0010f97 <KeSystemCall(regs*, void*)>:
c0010f97:	53                   	push   ebx
c0010f98:	83 ec 10             	sub    esp,0x10
c0010f9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010f9f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010fa2:	68 05 e2 01 c0       	push   0xc001e205
c0010fa7:	e8 a8 94 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0010fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010faf:	83 c4 10             	add    esp,0x10
c0010fb2:	83 f8 31             	cmp    eax,0x31
c0010fb5:	77 16                	ja     c0010fcd <KeSystemCall(regs*, void*)+0x36>
c0010fb7:	8b 14 85 20 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0ce0]
c0010fbe:	85 d2                	test   edx,edx
c0010fc0:	74 0b                	je     c0010fcd <KeSystemCall(regs*, void*)+0x36>
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	53                   	push   ebx
c0010fc6:	ff d2                	call   edx
c0010fc8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0010fcb:	eb 0d                	jmp    c0010fda <KeSystemCall(regs*, void*)+0x43>
c0010fcd:	52                   	push   edx
c0010fce:	52                   	push   edx
c0010fcf:	50                   	push   eax
c0010fd0:	68 15 e2 01 c0       	push   0xc001e215
c0010fd5:	e8 7a 94 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0010fda:	83 c4 10             	add    esp,0x10
c0010fdd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010fe2:	31 d2                	xor    edx,edx
c0010fe4:	83 c4 08             	add    esp,0x8
c0010fe7:	5b                   	pop    ebx
c0010fe8:	c3                   	ret    

c0010fe9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0010fe9:	55                   	push   ebp
c0010fea:	57                   	push   edi
c0010feb:	56                   	push   esi
c0010fec:	53                   	push   ebx
c0010fed:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010ff3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0010ffa:	8a 1e                	mov    bl,BYTE PTR [esi]
c0010ffc:	8d 6e 01             	lea    ebp,[esi+0x1]
c0010fff:	80 fb 40             	cmp    bl,0x40
c0011002:	75 1b                	jne    c001101f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011004:	8a 16                	mov    dl,BYTE PTR [esi]
c0011006:	84 d2                	test   dl,dl
c0011008:	0f 84 f1 00 00 00    	je     c00110ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001100e:	8d 46 01             	lea    eax,[esi+0x1]
c0011011:	80 fa 3a             	cmp    dl,0x3a
c0011014:	74 04                	je     c001101a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011016:	89 c6                	mov    esi,eax
c0011018:	eb ea                	jmp    c0011004 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001101a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001101d:	89 c6                	mov    esi,eax
c001101f:	50                   	push   eax
c0011020:	6a 40                	push   0x40
c0011022:	6a 00                	push   0x0
c0011024:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011028:	50                   	push   eax
c0011029:	e8 a2 f4 fe ff       	call   c00004d0 <memset>
c001102e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011035:	31 c0                	xor    eax,eax
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001103c:	84 c9                	test   cl,cl
c001103e:	0f 84 bb 00 00 00    	je     c00110ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011044:	3d c7 00 00 00       	cmp    eax,0xc7
c0011049:	0f 8f b0 00 00 00    	jg     c00110ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001104f:	80 f9 0a             	cmp    cl,0xa
c0011052:	0f 85 98 00 00 00    	jne    c00110f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011058:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001105d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011061:	a8 df                	test   al,0xdf
c0011063:	0f 94 c1             	sete   cl
c0011066:	3c 23                	cmp    al,0x23
c0011068:	0f 94 c2             	sete   dl
c001106b:	08 d1                	or     cl,dl
c001106d:	75 4a                	jne    c00110b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001106f:	8d 50 f7             	lea    edx,[eax-0x9]
c0011072:	80 fa 01             	cmp    dl,0x1
c0011075:	76 42                	jbe    c00110b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011077:	3c 5b                	cmp    al,0x5b
c0011079:	75 42                	jne    c00110bd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001107b:	80 fb 40             	cmp    bl,0x40
c001107e:	75 39                	jne    c00110b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011087:	52                   	push   edx
c0011088:	e8 b3 f4 fe ff       	call   c0000540 <strlen>
c001108d:	83 c4 10             	add    esp,0x10
c0011090:	83 f8 3f             	cmp    eax,0x3f
c0011093:	77 6a                	ja     c00110ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011095:	50                   	push   eax
c0011096:	50                   	push   eax
c0011097:	8d 54 24 61          	lea    edx,[esp+0x61]
c001109b:	52                   	push   edx
c001109c:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110a0:	52                   	push   edx
c00110a1:	e8 5a f5 fe ff       	call   c0000600 <strcpy>
c00110a6:	58                   	pop    eax
c00110a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00110ab:	52                   	push   edx
c00110ac:	e8 8f f4 fe ff       	call   c0000540 <strlen>
c00110b1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	31 d2                	xor    edx,edx
c00110bb:	eb 3a                	jmp    c00110f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00110bd:	80 fb 40             	cmp    bl,0x40
c00110c0:	74 06                	je     c00110c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00110c2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00110c6:	eb 20                	jmp    c00110e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00110c8:	50                   	push   eax
c00110c9:	50                   	push   eax
c00110ca:	55                   	push   ebp
c00110cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110cf:	50                   	push   eax
c00110d0:	e8 0b f6 fe ff       	call   c00006e0 <strcmp>
c00110d5:	83 c4 10             	add    esp,0x10
c00110d8:	85 c0                	test   eax,eax
c00110da:	75 dd                	jne    c00110b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00110dc:	eb e4                	jmp    c00110c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00110de:	8d 50 01             	lea    edx,[eax+0x1]
c00110e1:	80 f9 3d             	cmp    cl,0x3d
c00110e4:	74 1d                	je     c0011103 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00110e6:	89 d0                	mov    eax,edx
c00110e8:	8a 08                	mov    cl,BYTE PTR [eax]
c00110ea:	84 c9                	test   cl,cl
c00110ec:	75 f0                	jne    c00110de <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00110ee:	eb 0f                	jmp    c00110ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110f0:	8d 50 01             	lea    edx,[eax+0x1]
c00110f3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00110f7:	47                   	inc    edi
c00110f8:	89 d0                	mov    eax,edx
c00110fa:	e9 3b ff ff ff       	jmp    c001103a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00110ff:	31 c0                	xor    eax,eax
c0011101:	eb 33                	jmp    c0011136 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011107:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001110a:	50                   	push   eax
c001110b:	50                   	push   eax
c001110c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011110:	50                   	push   eax
c0011111:	56                   	push   esi
c0011112:	e8 c9 f5 fe ff       	call   c00006e0 <strcmp>
c0011117:	83 c4 10             	add    esp,0x10
c001111a:	85 c0                	test   eax,eax
c001111c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011120:	75 97                	jne    c00110b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011122:	51                   	push   ecx
c0011123:	51                   	push   ecx
c0011124:	52                   	push   edx
c0011125:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001112c:	e8 cf f4 fe ff       	call   c0000600 <strcpy>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	b0 01                	mov    al,0x1
c0011136:	81 c4 2c 01 00 00    	add    esp,0x12c
c001113c:	5b                   	pop    ebx
c001113d:	5e                   	pop    esi
c001113e:	5f                   	pop    edi
c001113f:	5d                   	pop    ebp
c0011140:	c3                   	ret    

c0011141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011141:	57                   	push   edi
c0011142:	56                   	push   esi
c0011143:	53                   	push   ebx
c0011144:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001114a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011151:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011158:	53                   	push   ebx
c0011159:	e8 e2 f3 fe ff       	call   c0000540 <strlen>
c001115e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011161:	89 c7                	mov    edi,eax
c0011163:	e8 d8 f3 fe ff       	call   c0000540 <strlen>
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001116f:	3d ff 00 00 00       	cmp    eax,0xff
c0011174:	0f 87 d3 00 00 00    	ja     c001124d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001117a:	57                   	push   edi
c001117b:	57                   	push   edi
c001117c:	56                   	push   esi
c001117d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011181:	56                   	push   esi
c0011182:	e8 79 f4 fe ff       	call   c0000600 <strcpy>
c0011187:	58                   	pop    eax
c0011188:	5a                   	pop    edx
c0011189:	68 c6 e4 01 c0       	push   0xc001e4c6
c001118e:	56                   	push   esi
c001118f:	e8 2c f6 fe ff       	call   c00007c0 <strcat>
c0011194:	59                   	pop    ecx
c0011195:	5f                   	pop    edi
c0011196:	53                   	push   ebx
c0011197:	56                   	push   esi
c0011198:	e8 23 f6 fe ff       	call   c00007c0 <strcat>
c001119d:	58                   	pop    eax
c001119e:	5a                   	pop    edx
c001119f:	68 29 e2 01 c0       	push   0xc001e229
c00111a4:	56                   	push   esi
c00111a5:	e8 16 f6 fe ff       	call   c00007c0 <strcat>
c00111aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00111b1:	e8 03 66 ff ff       	call   c00077b9 <malloc>
c00111b6:	83 c4 0c             	add    esp,0xc
c00111b9:	89 c3                	mov    ebx,eax
c00111bb:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c00111c1:	56                   	push   esi
c00111c2:	50                   	push   eax
c00111c3:	e8 02 98 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00111c8:	83 c4 10             	add    esp,0x10
c00111cb:	85 db                	test   ebx,ebx
c00111cd:	74 7e                	je     c001124d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00111cf:	51                   	push   ecx
c00111d0:	51                   	push   ecx
c00111d1:	6a 01                	push   0x1
c00111d3:	53                   	push   ebx
c00111d4:	e8 b1 98 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	85 c0                	test   eax,eax
c00111de:	74 08                	je     c00111e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111e5:	53                   	push   ebx
c00111e6:	eb 5f                	jmp    c0011247 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00111e8:	52                   	push   edx
c00111e9:	8d 44 24 17          	lea    eax,[esp+0x17]
c00111ed:	50                   	push   eax
c00111ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c00111f2:	50                   	push   eax
c00111f3:	53                   	push   ebx
c00111f4:	e8 3d 9b ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00111f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00111fd:	83 c4 10             	add    esp,0x10
c0011200:	89 c1                	mov    ecx,eax
c0011202:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011206:	74 31                	je     c0011239 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011208:	83 ec 0c             	sub    esp,0xc
c001120b:	50                   	push   eax
c001120c:	e8 a8 65 ff ff       	call   c00077b9 <malloc>
c0011211:	89 c6                	mov    esi,eax
c0011213:	58                   	pop    eax
c0011214:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011216:	8d 54 24 20          	lea    edx,[esp+0x20]
c001121a:	52                   	push   edx
c001121b:	56                   	push   esi
c001121c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011220:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011224:	53                   	push   ebx
c0011225:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011228:	83 c4 20             	add    esp,0x20
c001122b:	85 c0                	test   eax,eax
c001122d:	75 0a                	jne    c0011239 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001122f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011233:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011237:	74 18                	je     c0011251 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011239:	83 ec 0c             	sub    esp,0xc
c001123c:	53                   	push   ebx
c001123d:	e8 a6 98 ff ff       	call   c000aae8 <File::close()>
c0011242:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011247:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	31 c0                	xor    eax,eax
c001124f:	eb 3b                	jmp    c001128c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011251:	83 ec 0c             	sub    esp,0xc
c0011254:	53                   	push   ebx
c0011255:	e8 8e 98 ff ff       	call   c000aae8 <File::close()>
c001125a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001125c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001125f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011262:	83 c4 0c             	add    esp,0xc
c0011265:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001126c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011273:	56                   	push   esi
c0011274:	e8 70 fd ff ff       	call   c0010fe9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011279:	89 34 24             	mov    DWORD PTR [esp],esi
c001127c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011280:	e8 44 65 ff ff       	call   c00077c9 <free>
c0011285:	83 c4 10             	add    esp,0x10
c0011288:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001128c:	81 c4 20 01 00 00    	add    esp,0x120
c0011292:	5b                   	pop    ebx
c0011293:	5e                   	pop    esi
c0011294:	5f                   	pop    edi
c0011295:	c3                   	ret    

c0011296 <Reg::getLine(char*, char*, char*)>:
c0011296:	57                   	push   edi
c0011297:	56                   	push   esi
c0011298:	53                   	push   ebx
c0011299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001129d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00112a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00112a5:	57                   	push   edi
c00112a6:	56                   	push   esi
c00112a7:	53                   	push   ebx
c00112a8:	68 2e e2 01 c0       	push   0xc001e22e
c00112ad:	e8 8f fe ff ff       	call   c0011141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112b2:	83 c4 10             	add    esp,0x10
c00112b5:	84 c0                	test   al,al
c00112b7:	75 10                	jne    c00112c9 <Reg::getLine(char*, char*, char*)+0x33>
c00112b9:	57                   	push   edi
c00112ba:	56                   	push   esi
c00112bb:	53                   	push   ebx
c00112bc:	68 53 e2 01 c0       	push   0xc001e253
c00112c1:	e8 7b fe ff ff       	call   c0011141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	5b                   	pop    ebx
c00112ca:	5e                   	pop    esi
c00112cb:	5f                   	pop    edi
c00112cc:	c3                   	ret    

c00112cd <Reg::readInt(char*, char*, int*)>:
c00112cd:	55                   	push   ebp
c00112ce:	57                   	push   edi
c00112cf:	56                   	push   esi
c00112d0:	53                   	push   ebx
c00112d1:	81 ec f0 00 00 00    	sub    esp,0xf0
c00112d7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00112db:	57                   	push   edi
c00112dc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00112e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00112ea:	e8 a7 ff ff ff       	call   c0011296 <Reg::getLine(char*, char*, char*)>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	84 c0                	test   al,al
c00112f4:	0f 84 b3 00 00 00    	je     c00113ad <Reg::readInt(char*, char*, int*)+0xe0>
c00112fa:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00112fe:	80 fa 2b             	cmp    dl,0x2b
c0011301:	74 0c                	je     c001130f <Reg::readInt(char*, char*, int*)+0x42>
c0011303:	80 fa 2d             	cmp    dl,0x2d
c0011306:	75 0e                	jne    c0011316 <Reg::readInt(char*, char*, int*)+0x49>
c0011308:	ba 01 00 00 00       	mov    edx,0x1
c001130d:	eb 0b                	jmp    c001131a <Reg::readInt(char*, char*, int*)+0x4d>
c001130f:	ba 01 00 00 00       	mov    edx,0x1
c0011314:	eb 02                	jmp    c0011318 <Reg::readInt(char*, char*, int*)+0x4b>
c0011316:	31 d2                	xor    edx,edx
c0011318:	31 c0                	xor    eax,eax
c001131a:	be 0a 00 00 00       	mov    esi,0xa
c001131f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011324:	75 20                	jne    c0011346 <Reg::readInt(char*, char*, int*)+0x79>
c0011326:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001132a:	80 f9 78             	cmp    cl,0x78
c001132d:	75 0a                	jne    c0011339 <Reg::readInt(char*, char*, int*)+0x6c>
c001132f:	83 c2 02             	add    edx,0x2
c0011332:	be 10 00 00 00       	mov    esi,0x10
c0011337:	eb 0d                	jmp    c0011346 <Reg::readInt(char*, char*, int*)+0x79>
c0011339:	80 f9 62             	cmp    cl,0x62
c001133c:	75 08                	jne    c0011346 <Reg::readInt(char*, char*, int*)+0x79>
c001133e:	83 c2 02             	add    edx,0x2
c0011341:	be 02 00 00 00       	mov    esi,0x2
c0011346:	01 d7                	add    edi,edx
c0011348:	31 d2                	xor    edx,edx
c001134a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001134c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011350:	80 fb 0d             	cmp    bl,0xd
c0011353:	0f 94 c3             	sete   bl
c0011356:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001135b:	0f 94 c1             	sete   cl
c001135e:	08 cb                	or     bl,cl
c0011360:	75 3a                	jne    c001139c <Reg::readInt(char*, char*, int*)+0xcf>
c0011362:	0f af d6             	imul   edx,esi
c0011365:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001136a:	83 fe 10             	cmp    esi,0x10
c001136d:	75 26                	jne    c0011395 <Reg::readInt(char*, char*, int*)+0xc8>
c001136f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011373:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0011376:	89 e9                	mov    ecx,ebp
c0011378:	80 f9 05             	cmp    cl,0x5
c001137b:	77 06                	ja     c0011383 <Reg::readInt(char*, char*, int*)+0xb6>
c001137d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011381:	eb 16                	jmp    c0011399 <Reg::readInt(char*, char*, int*)+0xcc>
c0011383:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011387:	83 e9 61             	sub    ecx,0x61
c001138a:	80 f9 05             	cmp    cl,0x5
c001138d:	77 06                	ja     c0011395 <Reg::readInt(char*, char*, int*)+0xc8>
c001138f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011393:	eb 04                	jmp    c0011399 <Reg::readInt(char*, char*, int*)+0xcc>
c0011395:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011399:	47                   	inc    edi
c001139a:	eb ae                	jmp    c001134a <Reg::readInt(char*, char*, int*)+0x7d>
c001139c:	84 c0                	test   al,al
c001139e:	74 02                	je     c00113a2 <Reg::readInt(char*, char*, int*)+0xd5>
c00113a0:	f7 da                	neg    edx
c00113a2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00113a9:	89 10                	mov    DWORD PTR [eax],edx
c00113ab:	88 d8                	mov    al,bl
c00113ad:	81 c4 ec 00 00 00    	add    esp,0xec
c00113b3:	5b                   	pop    ebx
c00113b4:	5e                   	pop    esi
c00113b5:	5f                   	pop    edi
c00113b6:	5d                   	pop    ebp
c00113b7:	c3                   	ret    

c00113b8 <Reg::readString(char*, char*, char*, int)>:
c00113b8:	57                   	push   edi
c00113b9:	56                   	push   esi
c00113ba:	53                   	push   ebx
c00113bb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00113c1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00113c8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00113cc:	57                   	push   edi
c00113cd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00113d4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00113db:	e8 b6 fe ff ff       	call   c0011296 <Reg::getLine(char*, char*, char*)>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	89 c6                	mov    esi,eax
c00113e5:	84 c0                	test   al,al
c00113e7:	74 44                	je     c001142d <Reg::readString(char*, char*, char*, int)+0x75>
c00113e9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00113f0:	31 c0                	xor    eax,eax
c00113f2:	4a                   	dec    edx
c00113f3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00113f6:	84 c9                	test   cl,cl
c00113f8:	74 0f                	je     c0011409 <Reg::readString(char*, char*, char*, int)+0x51>
c00113fa:	39 c2                	cmp    edx,eax
c00113fc:	7e 0b                	jle    c0011409 <Reg::readString(char*, char*, char*, int)+0x51>
c00113fe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011401:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011406:	40                   	inc    eax
c0011407:	eb ea                	jmp    c00113f3 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011409:	83 ec 0c             	sub    esp,0xc
c001140c:	53                   	push   ebx
c001140d:	e8 2e f1 fe ff       	call   c0000540 <strlen>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001141a:	75 11                	jne    c001142d <Reg::readString(char*, char*, char*, int)+0x75>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	53                   	push   ebx
c0011420:	e8 1b f1 fe ff       	call   c0000540 <strlen>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001142d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011433:	89 f0                	mov    eax,esi
c0011435:	5b                   	pop    ebx
c0011436:	5e                   	pop    esi
c0011437:	5f                   	pop    edi
c0011438:	c3                   	ret    

c0011439 <Reg::readBool(char*, char*, bool*)>:
c0011439:	83 ec 20             	sub    esp,0x20
c001143c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011440:	50                   	push   eax
c0011441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011449:	e8 7f fe ff ff       	call   c00112cd <Reg::readInt(char*, char*, int*)>
c001144e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011453:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011457:	0f 95 02             	setne  BYTE PTR [edx]
c001145a:	83 c4 2c             	add    esp,0x2c
c001145d:	c3                   	ret    

c001145e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001145e:	53                   	push   ebx
c001145f:	83 ec 1c             	sub    esp,0x1c
c0011462:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011466:	8d 44 24 13          	lea    eax,[esp+0x13]
c001146a:	50                   	push   eax
c001146b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001146f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011473:	e8 c1 ff ff ff       	call   c0011439 <Reg::readBool(char*, char*, bool*)>
c0011478:	83 c4 10             	add    esp,0x10
c001147b:	84 c0                	test   al,al
c001147d:	74 04                	je     c0011483 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001147f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011483:	88 d8                	mov    al,bl
c0011485:	83 c4 18             	add    esp,0x18
c0011488:	5b                   	pop    ebx
c0011489:	c3                   	ret    

c001148a <Reg::readIntWithDefault(char*, char*, int)>:
c001148a:	53                   	push   ebx
c001148b:	83 ec 1c             	sub    esp,0x1c
c001148e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011492:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011496:	50                   	push   eax
c0011497:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001149b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001149f:	e8 29 fe ff ff       	call   c00112cd <Reg::readInt(char*, char*, int*)>
c00114a4:	83 c4 10             	add    esp,0x10
c00114a7:	84 c0                	test   al,al
c00114a9:	74 04                	je     c00114af <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00114ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114af:	89 d8                	mov    eax,ebx
c00114b1:	83 c4 18             	add    esp,0x18
c00114b4:	5b                   	pop    ebx
c00114b5:	c3                   	ret    

c00114b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00114b6:	57                   	push   edi
c00114b7:	56                   	push   esi
c00114b8:	56                   	push   esi
c00114b9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00114bd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00114c1:	56                   	push   esi
c00114c2:	57                   	push   edi
c00114c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cb:	e8 e8 fe ff ff       	call   c00113b8 <Reg::readString(char*, char*, char*, int)>
c00114d0:	83 c4 10             	add    esp,0x10
c00114d3:	84 c0                	test   al,al
c00114d5:	75 1a                	jne    c00114f1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00114d7:	51                   	push   ecx
c00114d8:	56                   	push   esi
c00114d9:	6a 00                	push   0x0
c00114db:	57                   	push   edi
c00114dc:	e8 ef ef fe ff       	call   c00004d0 <memset>
c00114e1:	8d 4e ff             	lea    ecx,[esi-0x1]
c00114e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00114f1:	89 f8                	mov    eax,edi
c00114f3:	5a                   	pop    edx
c00114f4:	5e                   	pop    esi
c00114f5:	5f                   	pop    edi
c00114f6:	c3                   	ret    

c00114f7 <SysEject(regs*)>:
c00114f7:	83 ec 0c             	sub    esp,0xc
c00114fa:	83 ca ff             	or     edx,0xffffffff
c00114fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011501:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011504:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011509:	83 e9 41             	sub    ecx,0x41
c001150c:	83 f9 19             	cmp    ecx,0x19
c001150f:	77 18                	ja     c0011529 <SysEject(regs*)+0x32>
c0011511:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c0011518:	85 c9                	test   ecx,ecx
c001151a:	74 0d                	je     c0011529 <SysEject(regs*)+0x32>
c001151c:	83 ec 0c             	sub    esp,0xc
c001151f:	51                   	push   ecx
c0011520:	e8 ad b5 ff ff       	call   c000cad2 <LogicalDisk::eject()>
c0011525:	83 c4 10             	add    esp,0x10
c0011528:	99                   	cdq    
c0011529:	83 c4 0c             	add    esp,0xc
c001152c:	c3                   	ret    

c001152d <SysExit(regs*)>:
c001152d:	83 ec 18             	sub    esp,0x18
c0011530:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011534:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011537:	e8 b0 26 00 00       	call   c0013bec <terminateTask(int)>
c001153c:	83 c8 ff             	or     eax,0xffffffff
c001153f:	83 c4 1c             	add    esp,0x1c
c0011542:	89 c2                	mov    edx,eax
c0011544:	c3                   	ret    

c0011545 <SysGetCwd(regs*)>:
c0011545:	83 ec 10             	sub    esp,0x10
c0011548:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001154c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001154f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011557:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001155a:	e8 6d 92 ff ff       	call   c000a7cc <Fs::getcwd(Process*, char*, int)>
c001155f:	83 c4 1c             	add    esp,0x1c
c0011562:	99                   	cdq    
c0011563:	c3                   	ret    

c0011564 <SysGetPID(regs*)>:
c0011564:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011569:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001156c:	8b 00                	mov    eax,DWORD PTR [eax]
c001156e:	99                   	cdq    
c001156f:	c3                   	ret    

c0011570 <SysGetRAMData(regs*)>:
c0011570:	8b 0d 48 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020448
c0011576:	69 05 44 04 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020444,0xc8
c0011580:	99                   	cdq    
c0011581:	f7 f9                	idiv   ecx
c0011583:	c1 e0 18             	shl    eax,0x18
c0011586:	09 c8                	or     eax,ecx
c0011588:	99                   	cdq    
c0011589:	c3                   	ret    

c001158a <SysGetVGAPtr(regs*)>:
c001158a:	55                   	push   ebp
c001158b:	57                   	push   edi
c001158c:	56                   	push   esi
c001158d:	53                   	push   ebx
c001158e:	83 ec 18             	sub    esp,0x18
c0011591:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011595:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011598:	e8 4f 21 00 00       	call   c00136ec <Thr::processFromPID(int)>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	89 c1                	mov    ecx,eax
c00115a2:	b8 01 00 00 00       	mov    eax,0x1
c00115a7:	85 c9                	test   ecx,ecx
c00115a9:	74 57                	je     c0011602 <SysGetVGAPtr(regs*)+0x78>
c00115ab:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00115b1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00115b5:	74 0c                	je     c00115c3 <SysGetVGAPtr(regs*)+0x39>
c00115b7:	83 ec 0c             	sub    esp,0xc
c00115ba:	55                   	push   ebp
c00115bb:	e8 37 6e ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00115c0:	83 c4 10             	add    esp,0x10
c00115c3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00115c6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00115c9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00115ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115d0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00115d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115d6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00115dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115df:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00115e2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00115e8:	50                   	push   eax
c00115e9:	50                   	push   eax
c00115ea:	68 6e e2 01 c0       	push   0xc001e26e
c00115ef:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115f2:	05 a8 0f 00 00       	add    eax,0xfa8
c00115f7:	50                   	push   eax
c00115f8:	e8 03 f0 fe ff       	call   c0000600 <strcpy>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	31 c0                	xor    eax,eax
c0011602:	83 c4 0c             	add    esp,0xc
c0011605:	31 d2                	xor    edx,edx
c0011607:	5b                   	pop    ebx
c0011608:	5e                   	pop    esi
c0011609:	5f                   	pop    edi
c001160a:	5d                   	pop    ebp
c001160b:	c3                   	ret    

c001160c <SysLoadDLL(regs*)>:
c001160c:	56                   	push   esi
c001160d:	53                   	push   ebx
c001160e:	31 d2                	xor    edx,edx
c0011610:	51                   	push   ecx
c0011611:	b8 01 00 00 00       	mov    eax,0x1
c0011616:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001161a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001161e:	0f 84 8c 00 00 00    	je     c00116b0 <SysLoadDLL(regs*)+0xa4>
c0011624:	83 ec 0c             	sub    esp,0xc
c0011627:	68 14 01 00 00       	push   0x114
c001162c:	e8 88 61 ff ff       	call   c00077b9 <malloc>
c0011631:	83 c4 0c             	add    esp,0xc
c0011634:	89 c3                	mov    ebx,eax
c0011636:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001163b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001163e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011641:	53                   	push   ebx
c0011642:	e8 83 93 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011647:	83 c4 10             	add    esp,0x10
c001164a:	31 d2                	xor    edx,edx
c001164c:	b8 02 00 00 00       	mov    eax,0x2
c0011651:	85 db                	test   ebx,ebx
c0011653:	74 5b                	je     c00116b0 <SysLoadDLL(regs*)+0xa4>
c0011655:	83 ec 0c             	sub    esp,0xc
c0011658:	53                   	push   ebx
c0011659:	e8 9a 96 ff ff       	call   c000acf8 <File::exists()>
c001165e:	83 c4 10             	add    esp,0x10
c0011661:	84 c0                	test   al,al
c0011663:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011665:	75 11                	jne    c0011678 <SysLoadDLL(regs*)+0x6c>
c0011667:	83 ec 0c             	sub    esp,0xc
c001166a:	53                   	push   ebx
c001166b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001166e:	83 c4 10             	add    esp,0x10
c0011671:	b8 03 00 00 00       	mov    eax,0x3
c0011676:	eb 36                	jmp    c00116ae <SysLoadDLL(regs*)+0xa2>
c0011678:	83 ec 0c             	sub    esp,0xc
c001167b:	53                   	push   ebx
c001167c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001167f:	58                   	pop    eax
c0011680:	5a                   	pop    edx
c0011681:	6a 00                	push   0x0
c0011683:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011686:	e8 4b 12 00 00       	call   c00128d6 <Thr::loadDLL(char const*, bool)>
c001168b:	83 c4 10             	add    esp,0x10
c001168e:	89 c1                	mov    ecx,eax
c0011690:	31 d2                	xor    edx,edx
c0011692:	b8 04 00 00 00       	mov    eax,0x4
c0011697:	85 c9                	test   ecx,ecx
c0011699:	74 15                	je     c00116b0 <SysLoadDLL(regs*)+0xa4>
c001169b:	53                   	push   ebx
c001169c:	53                   	push   ebx
c001169d:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00116a3:	51                   	push   ecx
c00116a4:	e8 5e 14 00 00       	call   c0012b07 <Thr::executeDLL(unsigned long, void*)>
c00116a9:	83 c4 10             	add    esp,0x10
c00116ac:	31 c0                	xor    eax,eax
c00116ae:	31 d2                	xor    edx,edx
c00116b0:	59                   	pop    ecx
c00116b1:	5b                   	pop    ebx
c00116b2:	5e                   	pop    esi
c00116b3:	c3                   	ret    

c00116b4 <SysRead(regs*)>:
c00116b4:	57                   	push   edi
c00116b5:	56                   	push   esi
c00116b6:	53                   	push   ebx
c00116b7:	83 ec 10             	sub    esp,0x10
c00116ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00116be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116c1:	83 f8 02             	cmp    eax,0x2
c00116c4:	77 10                	ja     c00116d6 <SysRead(regs*)+0x22>
c00116c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116cb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00116ce:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00116d4:	eb 0e                	jmp    c00116e4 <SysRead(regs*)+0x30>
c00116d6:	83 ec 0c             	sub    esp,0xc
c00116d9:	50                   	push   eax
c00116da:	e8 cc 79 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	89 c1                	mov    ecx,eax
c00116e4:	83 c8 ff             	or     eax,0xffffffff
c00116e7:	85 c9                	test   ecx,ecx
c00116e9:	89 c2                	mov    edx,eax
c00116eb:	74 28                	je     c0011715 <SysRead(regs*)+0x61>
c00116ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116f5:	31 ff                	xor    edi,edi
c00116f7:	83 ec 0c             	sub    esp,0xc
c00116fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00116fc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011700:	52                   	push   edx
c0011701:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011704:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011707:	57                   	push   edi
c0011708:	56                   	push   esi
c0011709:	51                   	push   ecx
c001170a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001170d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011711:	83 c4 20             	add    esp,0x20
c0011714:	99                   	cdq    
c0011715:	83 c4 10             	add    esp,0x10
c0011718:	5b                   	pop    ebx
c0011719:	5e                   	pop    esi
c001171a:	5f                   	pop    edi
c001171b:	c3                   	ret    

c001171c <SysSbrk(regs*)>:
c001171c:	56                   	push   esi
c001171d:	53                   	push   ebx
c001171e:	50                   	push   eax
c001171f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011724:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011728:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001172b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001172e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011734:	85 db                	test   ebx,ebx
c0011736:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011739:	74 02                	je     c001173d <SysSbrk(regs*)+0x21>
c001173b:	79 06                	jns    c0011743 <SysSbrk(regs*)+0x27>
c001173d:	89 f0                	mov    eax,esi
c001173f:	31 d2                	xor    edx,edx
c0011741:	eb 2a                	jmp    c001176d <SysSbrk(regs*)+0x51>
c0011743:	83 c8 ff             	or     eax,0xffffffff
c0011746:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001174c:	89 c2                	mov    edx,eax
c001174e:	77 1d                	ja     c001176d <SysSbrk(regs*)+0x51>
c0011750:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011756:	50                   	push   eax
c0011757:	c1 ea 0c             	shr    edx,0xc
c001175a:	68 07 0c 00 00       	push   0xc07
c001175f:	52                   	push   edx
c0011760:	51                   	push   ecx
c0011761:	e8 34 82 ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c0011766:	89 f0                	mov    eax,esi
c0011768:	31 d2                	xor    edx,edx
c001176a:	83 c4 10             	add    esp,0x10
c001176d:	59                   	pop    ecx
c001176e:	5b                   	pop    ebx
c001176f:	5e                   	pop    esi
c0011770:	c3                   	ret    

c0011771 <SysSetCwd(regs*)>:
c0011771:	83 ec 14             	sub    esp,0x14
c0011774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011778:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001177b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011780:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011783:	e8 0f 96 ff ff       	call   c000ad97 <Fs::setcwd(Process*, char*)>
c0011788:	83 c4 1c             	add    esp,0x1c
c001178b:	99                   	cdq    
c001178c:	c3                   	ret    

c001178d <SysSetTime(regs*)>:
c001178d:	55                   	push   ebp
c001178e:	31 c9                	xor    ecx,ecx
c0011790:	57                   	push   edi
c0011791:	bd 0c 00 00 00       	mov    ebp,0xc
c0011796:	56                   	push   esi
c0011797:	53                   	push   ebx
c0011798:	31 db                	xor    ebx,ebx
c001179a:	83 ec 10             	sub    esp,0x10
c001179d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00117a1:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00117a4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00117a7:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00117aa:	89 c2                	mov    edx,eax
c00117ac:	66 81 ef 6c 07       	sub    di,0x76c
c00117b1:	83 e2 1f             	and    edx,0x1f
c00117b4:	c1 e7 10             	shl    edi,0x10
c00117b7:	42                   	inc    edx
c00117b8:	c1 e8 05             	shr    eax,0x5
c00117bb:	88 d1                	mov    cl,dl
c00117bd:	31 d2                	xor    edx,edx
c00117bf:	f7 f5                	div    ebp
c00117c1:	89 dd                	mov    ebp,ebx
c00117c3:	88 d5                	mov    ch,dl
c00117c5:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00117cb:	0f b7 c1             	movzx  eax,cx
c00117ce:	31 d2                	xor    edx,edx
c00117d0:	09 f8                	or     eax,edi
c00117d2:	bf 3c 00 00 00       	mov    edi,0x3c
c00117d7:	89 c1                	mov    ecx,eax
c00117d9:	89 f0                	mov    eax,esi
c00117db:	f7 f7                	div    edi
c00117dd:	c1 e2 10             	shl    edx,0x10
c00117e0:	09 d5                	or     ebp,edx
c00117e2:	31 d2                	xor    edx,edx
c00117e4:	89 eb                	mov    ebx,ebp
c00117e6:	f7 f7                	div    edi
c00117e8:	bf 10 0e 00 00       	mov    edi,0xe10
c00117ed:	88 d7                	mov    bh,dl
c00117ef:	89 f0                	mov    eax,esi
c00117f1:	31 d2                	xor    edx,edx
c00117f3:	f7 f7                	div    edi
c00117f5:	bf 18 00 00 00       	mov    edi,0x18
c00117fa:	31 d2                	xor    edx,edx
c00117fc:	f7 f7                	div    edi
c00117fe:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0011803:	88 d3                	mov    bl,dl
c0011805:	53                   	push   ebx
c0011806:	51                   	push   ecx
c0011807:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001180d:	e8 96 9d ff ff       	call   c000b5a8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011812:	83 c4 1c             	add    esp,0x1c
c0011815:	83 f0 01             	xor    eax,0x1
c0011818:	5b                   	pop    ebx
c0011819:	0f b6 c0             	movzx  eax,al
c001181c:	5e                   	pop    esi
c001181d:	31 d2                	xor    edx,edx
c001181f:	5f                   	pop    edi
c0011820:	5d                   	pop    ebp
c0011821:	c3                   	ret    

c0011822 <SysTimezone(regs*)>:
c0011822:	53                   	push   ebx
c0011823:	83 ec 08             	sub    esp,0x8
c0011826:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001182a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001182e:	75 17                	jne    c0011847 <SysTimezone(regs*)+0x25>
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	68 78 e2 01 c0       	push   0xc001e278
c0011838:	e8 17 8c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001183d:	83 c8 ff             	or     eax,0xffffffff
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	89 c2                	mov    edx,eax
c0011845:	eb 20                	jmp    c0011867 <SysTimezone(regs*)+0x45>
c0011847:	83 ec 0c             	sub    esp,0xc
c001184a:	68 8d e2 01 c0       	push   0xc001e28d
c001184f:	e8 00 8c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011854:	58                   	pop    eax
c0011855:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011858:	e8 a7 9a ff ff       	call   c000b304 <User::loadClockSettings(int)>
c001185d:	83 c4 10             	add    esp,0x10
c0011860:	b8 01 00 00 00       	mov    eax,0x1
c0011865:	31 d2                	xor    edx,edx
c0011867:	83 c4 08             	add    esp,0x8
c001186a:	5b                   	pop    ebx
c001186b:	c3                   	ret    

c001186c <SysWrite(regs*)>:
c001186c:	57                   	push   edi
c001186d:	56                   	push   esi
c001186e:	53                   	push   ebx
c001186f:	83 ec 10             	sub    esp,0x10
c0011872:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011876:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011879:	83 f8 02             	cmp    eax,0x2
c001187c:	77 10                	ja     c001188e <SysWrite(regs*)+0x22>
c001187e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011883:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011886:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001188c:	eb 0e                	jmp    c001189c <SysWrite(regs*)+0x30>
c001188e:	83 ec 0c             	sub    esp,0xc
c0011891:	50                   	push   eax
c0011892:	e8 14 78 ff ff       	call   c00090ab <getFromFileDescriptor(int)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	89 c1                	mov    ecx,eax
c001189c:	83 c8 ff             	or     eax,0xffffffff
c001189f:	85 c9                	test   ecx,ecx
c00118a1:	89 c2                	mov    edx,eax
c00118a3:	74 28                	je     c00118cd <SysWrite(regs*)+0x61>
c00118a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118ad:	31 ff                	xor    edi,edi
c00118af:	83 ec 0c             	sub    esp,0xc
c00118b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00118b4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118b8:	52                   	push   edx
c00118b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00118bc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00118bf:	57                   	push   edi
c00118c0:	56                   	push   esi
c00118c1:	51                   	push   ecx
c00118c2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00118c9:	83 c4 20             	add    esp,0x20
c00118cc:	99                   	cdq    
c00118cd:	83 c4 10             	add    esp,0x10
c00118d0:	5b                   	pop    ebx
c00118d1:	5e                   	pop    esi
c00118d2:	5f                   	pop    edi
c00118d3:	c3                   	ret    

c00118d4 <SysWsbe(regs*)>:
c00118d4:	57                   	push   edi
c00118d5:	b9 0b 00 00 00       	mov    ecx,0xb
c00118da:	56                   	push   esi
c00118db:	be cc e2 01 c0       	mov    esi,0xc001e2cc
c00118e0:	53                   	push   ebx
c00118e1:	83 ec 30             	sub    esp,0x30
c00118e4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00118e8:	fc                   	cld    
c00118e9:	83 ec 0c             	sub    esp,0xc
c00118ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00118ee:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00118f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118fa:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011900:	8b 06                	mov    eax,DWORD PTR [esi]
c0011902:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011905:	57                   	push   edi
c0011906:	e8 35 ec fe ff       	call   c0000540 <strlen>
c001190b:	5a                   	pop    edx
c001190c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011910:	52                   	push   edx
c0011911:	31 d2                	xor    edx,edx
c0011913:	57                   	push   edi
c0011914:	52                   	push   edx
c0011915:	50                   	push   eax
c0011916:	56                   	push   esi
c0011917:	ff d3                	call   ebx
c0011919:	83 c4 14             	add    esp,0x14
c001191c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011920:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011923:	e8 c4 22 00 00       	call   c0013bec <terminateTask(int)>
c0011928:	83 c4 40             	add    esp,0x40
c001192b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011930:	5b                   	pop    ebx
c0011931:	31 d2                	xor    edx,edx
c0011933:	5e                   	pop    esi
c0011934:	5f                   	pop    edi
c0011935:	c3                   	ret    

c0011936 <SysYield(regs*)>:
c0011936:	83 ec 0c             	sub    esp,0xc
c0011939:	fa                   	cli    
c001193a:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0011940:	e8 83 19 00 00       	call   c00132c8 <schedule()>
c0011945:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c001194a:	48                   	dec    eax
c001194b:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0011950:	75 01                	jne    c0011953 <SysYield(regs*)+0x1d>
c0011952:	fb                   	sti    
c0011953:	31 c0                	xor    eax,eax
c0011955:	31 d2                	xor    edx,edx
c0011957:	83 c4 0c             	add    esp,0xc
c001195a:	c3                   	ret    

c001195b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001195b:	55                   	push   ebp
c001195c:	57                   	push   edi
c001195d:	56                   	push   esi
c001195e:	53                   	push   ebx
c001195f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011965:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001196d:	0f 95 c2             	setne  dl
c0011970:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011978:	0f 94 c0             	sete   al
c001197b:	84 c2                	test   dl,al
c001197d:	74 34                	je     c00119b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001197f:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001198a:	74 27                	je     c00119b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c001198c:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011993:	05 00 10 00 00       	add    eax,0x1000
c0011998:	89 c1                	mov    ecx,eax
c001199a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001199f:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00119a5:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00119ac:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00119b3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00119ba:	83 ec 0c             	sub    esp,0xc
c00119bd:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00119c3:	6a 01                	push   0x1
c00119c5:	e8 37 78 ff ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c00119ca:	83 c4 10             	add    esp,0x10
c00119cd:	89 c3                	mov    ebx,eax
c00119cf:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00119d5:	0f 86 25 01 00 00    	jbe    c0011b00 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00119db:	c1 ee 0c             	shr    esi,0xc
c00119de:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00119e5:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00119e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00119f1:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00119f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00119fc:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011a03:	29 ef                	sub    edi,ebp
c0011a05:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011a09:	0f 83 f8 00 00 00    	jae    c0011b07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011a0f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011a15:	76 05                	jbe    c0011a1c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011a17:	bf 00 10 00 00       	mov    edi,0x1000
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	31 d2                	xor    edx,edx
c0011a21:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011a28:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011a2a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011a2e:	50                   	push   eax
c0011a2f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011a33:	56                   	push   esi
c0011a34:	52                   	push   edx
c0011a35:	57                   	push   edi
c0011a36:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011a3d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011a40:	83 c4 20             	add    esp,0x20
c0011a43:	85 c0                	test   eax,eax
c0011a45:	75 06                	jne    c0011a4d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011a47:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011a4b:	74 13                	je     c0011a60 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011a4d:	83 ec 0c             	sub    esp,0xc
c0011a50:	53                   	push   ebx
c0011a51:	e8 db 7a ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	31 c0                	xor    eax,eax
c0011a5b:	e9 7c 01 00 00       	jmp    c0011bdc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011a60:	fa                   	cli    
c0011a61:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0011a67:	e8 29 60 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011a6c:	6a 07                	push   0x7
c0011a6e:	89 c7                	mov    edi,eax
c0011a70:	53                   	push   ebx
c0011a71:	50                   	push   eax
c0011a72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a7a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011a80:	e8 11 7e ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011a85:	83 c4 0c             	add    esp,0xc
c0011a88:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011a8f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011a95:	6a 00                	push   0x0
c0011a97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a9c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011aa5:	e8 5e 7c ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011aaa:	58                   	pop    eax
c0011aab:	5a                   	pop    edx
c0011aac:	68 07 0c 00 00       	push   0xc07
c0011ab1:	55                   	push   ebp
c0011ab2:	57                   	push   edi
c0011ab3:	89 df                	mov    edi,ebx
c0011ab5:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011abc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ac2:	6a 00                	push   0x0
c0011ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ac9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011acc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ad2:	e8 7f 81 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ad7:	b9 00 10 00 00       	mov    ecx,0x1000
c0011adc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ade:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0011ae3:	83 c4 20             	add    esp,0x20
c0011ae6:	48                   	dec    eax
c0011ae7:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0011aec:	85 c0                	test   eax,eax
c0011aee:	75 01                	jne    c0011af1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011af0:	fb                   	sti    
c0011af1:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011af7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011afb:	e9 f1 fe ff ff       	jmp    c00119f1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011b00:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011b07:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011b0e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011b14:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011b1a:	0f 86 ae 00 00 00    	jbe    c0011bce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011b20:	fa                   	cli    
c0011b21:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0011b27:	c1 ee 0c             	shr    esi,0xc
c0011b2a:	51                   	push   ecx
c0011b2b:	31 ff                	xor    edi,edi
c0011b2d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b34:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b3a:	6a 00                	push   0x0
c0011b3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b4a:	e8 b9 7b ff ff       	call   c0009708 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	e8 3e 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011b57:	47                   	inc    edi
c0011b58:	6a 07                	push   0x7
c0011b5a:	53                   	push   ebx
c0011b5b:	50                   	push   eax
c0011b5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011b60:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011b66:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011b69:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011b6f:	e8 22 7d ff ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b74:	58                   	pop    eax
c0011b75:	5a                   	pop    edx
c0011b76:	68 07 0c 00 00       	push   0xc07
c0011b7b:	55                   	push   ebp
c0011b7c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b86:	50                   	push   eax
c0011b87:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b8e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b94:	6a 00                	push   0x0
c0011b96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b9e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ba4:	e8 ad 80 ff ff       	call   c0009c56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ba9:	83 c4 1c             	add    esp,0x1c
c0011bac:	68 00 10 00 00       	push   0x1000
c0011bb1:	6a 00                	push   0x0
c0011bb3:	53                   	push   ebx
c0011bb4:	e8 17 e9 fe ff       	call   c00004d0 <memset>
c0011bb9:	83 c4 10             	add    esp,0x10
c0011bbc:	39 fe                	cmp    esi,edi
c0011bbe:	77 92                	ja     c0011b52 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011bc0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0011bc5:	48                   	dec    eax
c0011bc6:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0011bcb:	75 01                	jne    c0011bce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011bcd:	fb                   	sti    
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	53                   	push   ebx
c0011bd2:	e8 5a 79 ff ff       	call   c0009531 <Virt::freeKernelVirtualPages(unsigned long)>
c0011bd7:	83 c4 10             	add    esp,0x10
c0011bda:	b0 01                	mov    al,0x1
c0011bdc:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011be2:	5b                   	pop    ebx
c0011be3:	5e                   	pop    esi
c0011be4:	5f                   	pop    edi
c0011be5:	5d                   	pop    ebp
c0011be6:	c3                   	ret    

c0011be7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011be7:	55                   	push   ebp
c0011be8:	57                   	push   edi
c0011be9:	56                   	push   esi
c0011bea:	53                   	push   ebx
c0011beb:	83 ec 48             	sub    esp,0x48
c0011bee:	68 14 01 00 00       	push   0x114
c0011bf3:	e8 c1 5b ff ff       	call   c00077b9 <malloc>
c0011bf8:	83 c4 0c             	add    esp,0xc
c0011bfb:	89 c6                	mov    esi,eax
c0011bfd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011c01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011c05:	50                   	push   eax
c0011c06:	e8 bf 8d ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011c0b:	58                   	pop    eax
c0011c0c:	5a                   	pop    edx
c0011c0d:	6a 01                	push   0x1
c0011c0f:	56                   	push   esi
c0011c10:	e8 75 8e ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011c15:	83 c4 10             	add    esp,0x10
c0011c18:	85 c0                	test   eax,eax
c0011c1a:	0f 85 47 01 00 00    	jne    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	6a 34                	push   0x34
c0011c2d:	e8 87 5b ff ff       	call   c00077b9 <malloc>
c0011c32:	89 c3                	mov    ebx,eax
c0011c34:	58                   	pop    eax
c0011c35:	8b 06                	mov    eax,DWORD PTR [esi]
c0011c37:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011c3b:	57                   	push   edi
c0011c3c:	53                   	push   ebx
c0011c3d:	6a 00                	push   0x0
c0011c3f:	6a 34                	push   0x34
c0011c41:	56                   	push   esi
c0011c42:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c45:	83 c4 20             	add    esp,0x20
c0011c48:	85 c0                	test   eax,eax
c0011c4a:	0f 85 17 01 00 00    	jne    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c50:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011c56:	0f 85 0b 01 00 00    	jne    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c5c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c5f:	85 c0                	test   eax,eax
c0011c61:	0f 84 00 01 00 00    	je     c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c67:	31 d2                	xor    edx,edx
c0011c69:	55                   	push   ebp
c0011c6a:	52                   	push   edx
c0011c6b:	50                   	push   eax
c0011c6c:	56                   	push   esi
c0011c6d:	e8 d6 8e ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011c72:	83 c4 10             	add    esp,0x10
c0011c75:	85 c0                	test   eax,eax
c0011c77:	0f 85 ea 00 00 00    	jne    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011c7d:	83 ec 0c             	sub    esp,0xc
c0011c80:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011c83:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011c87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011c8b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011c8f:	0f af c2             	imul   eax,edx
c0011c92:	50                   	push   eax
c0011c93:	e8 21 5b ff ff       	call   c00077b9 <malloc>
c0011c98:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011c9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011c9e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ca1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ca5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011ca9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011cad:	0f af c2             	imul   eax,edx
c0011cb0:	99                   	cdq    
c0011cb1:	52                   	push   edx
c0011cb2:	50                   	push   eax
c0011cb3:	56                   	push   esi
c0011cb4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011cb7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011cba:	83 c4 20             	add    esp,0x20
c0011cbd:	85 c0                	test   eax,eax
c0011cbf:	0f 84 a2 00 00 00    	je     c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cc5:	31 d2                	xor    edx,edx
c0011cc7:	51                   	push   ecx
c0011cc8:	52                   	push   edx
c0011cc9:	50                   	push   eax
c0011cca:	56                   	push   esi
c0011ccb:	e8 78 8e ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	85 c0                	test   eax,eax
c0011cd5:	0f 85 8c 00 00 00    	jne    c0011d67 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011ce2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011ce6:	31 ed                	xor    ebp,ebp
c0011ce8:	0f af c2             	imul   eax,edx
c0011ceb:	50                   	push   eax
c0011cec:	e8 c8 5a ff ff       	call   c00077b9 <malloc>
c0011cf1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011cf7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011cfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cfe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d02:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d06:	0f af c2             	imul   eax,edx
c0011d09:	99                   	cdq    
c0011d0a:	52                   	push   edx
c0011d0b:	50                   	push   eax
c0011d0c:	56                   	push   esi
c0011d0d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d10:	83 c4 20             	add    esp,0x20
c0011d13:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011d1b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011d1f:	0f 86 80 00 00 00    	jbe    c0011da5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011d25:	0f b7 fd             	movzx  edi,bp
c0011d28:	c1 e7 05             	shl    edi,0x5
c0011d2b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011d2f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011d32:	75 6b                	jne    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011d34:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d3b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011d3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d42:	52                   	push   edx
c0011d43:	31 d2                	xor    edx,edx
c0011d45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011d48:	52                   	push   edx
c0011d49:	50                   	push   eax
c0011d4a:	56                   	push   esi
c0011d4b:	e8 f8 8d ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	85 c0                	test   eax,eax
c0011d55:	74 17                	je     c0011d6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011d57:	83 ec 0c             	sub    esp,0xc
c0011d5a:	68 f8 e2 01 c0       	push   0xc001e2f8
c0011d5f:	e8 f0 86 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	31 c0                	xor    eax,eax
c0011d69:	e9 87 00 00 00       	jmp    c0011df5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011d6e:	83 ec 0c             	sub    esp,0xc
c0011d71:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011d74:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011d77:	50                   	push   eax
c0011d78:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011d7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d80:	56                   	push   esi
c0011d81:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011d85:	e8 d1 fb ff ff       	call   c001195b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011d8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d8e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011d92:	83 c4 20             	add    esp,0x20
c0011d95:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011d99:	73 04                	jae    c0011d9f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011d9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d9f:	45                   	inc    ebp
c0011da0:	e9 76 ff ff ff       	jmp    c0011d1b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011da5:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011da9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011dad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011db1:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011db7:	83 ec 0c             	sub    esp,0xc
c0011dba:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011dc0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011dc5:	05 00 10 00 00       	add    eax,0x1000
c0011dca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dd1:	e8 f3 59 ff ff       	call   c00077c9 <free>
c0011dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011dd9:	e8 eb 59 ff ff       	call   c00077c9 <free>
c0011dde:	58                   	pop    eax
c0011ddf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011de3:	e8 e1 59 ff ff       	call   c00077c9 <free>
c0011de8:	89 34 24             	mov    DWORD PTR [esp],esi
c0011deb:	e8 f8 8c ff ff       	call   c000aae8 <File::close()>
c0011df0:	83 c4 10             	add    esp,0x10
c0011df3:	b0 01                	mov    al,0x1
c0011df5:	83 c4 3c             	add    esp,0x3c
c0011df8:	5b                   	pop    ebx
c0011df9:	5e                   	pop    esi
c0011dfa:	5f                   	pop    edi
c0011dfb:	5d                   	pop    ebp
c0011dfc:	c3                   	ret    

c0011dfd <Thr::runtimeReferenceHelper()>:
c0011dfd:	83 ec 18             	sub    esp,0x18
c0011e00:	68 00 e3 01 c0       	push   0xc001e300
c0011e05:	e8 4a 86 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0011e0a:	fa                   	cli    
c0011e0b:	83 c4 10             	add    esp,0x10
c0011e0e:	eb fe                	jmp    c0011e0e <Thr::runtimeReferenceHelper()+0x11>

c0011e10 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011e10:	57                   	push   edi
c0011e11:	56                   	push   esi
c0011e12:	53                   	push   ebx
c0011e13:	31 db                	xor    ebx,ebx
c0011e15:	39 1d a0 36 02 c0    	cmp    DWORD PTR ds:0xc00236a0,ebx
c0011e1b:	7e 3c                	jle    c0011e59 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011e1d:	8b 34 9d 20 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc9e0]
c0011e24:	31 ff                	xor    edi,edi
c0011e26:	39 3c 9d 20 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdcae0],edi
c0011e2d:	7e 27                	jle    c0011e56 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011e2f:	50                   	push   eax
c0011e30:	50                   	push   eax
c0011e31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e35:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e37:	03 04 9d a0 35 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdca60]
c0011e3e:	50                   	push   eax
c0011e3f:	e8 9c e8 fe ff       	call   c00006e0 <strcmp>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	85 c0                	test   eax,eax
c0011e49:	75 05                	jne    c0011e50 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011e4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011e4e:	eb 0b                	jmp    c0011e5b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011e50:	83 c6 10             	add    esi,0x10
c0011e53:	47                   	inc    edi
c0011e54:	eb d0                	jmp    c0011e26 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011e56:	43                   	inc    ebx
c0011e57:	eb bc                	jmp    c0011e15 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011e59:	31 c0                	xor    eax,eax
c0011e5b:	5b                   	pop    ebx
c0011e5c:	5e                   	pop    esi
c0011e5d:	5f                   	pop    edi
c0011e5e:	c3                   	ret    

c0011e5f <Thr::loadKernelSymbolTable(char const*)>:
c0011e5f:	55                   	push   ebp
c0011e60:	57                   	push   edi
c0011e61:	56                   	push   esi
c0011e62:	53                   	push   ebx
c0011e63:	83 ec 68             	sub    esp,0x68
c0011e66:	8b 35 f0 36 02 c0    	mov    esi,DWORD PTR ds:0xc00236f0
c0011e6c:	68 14 01 00 00       	push   0x114
c0011e71:	e8 43 59 ff ff       	call   c00077b9 <malloc>
c0011e76:	83 c4 0c             	add    esp,0xc
c0011e79:	89 c3                	mov    ebx,eax
c0011e7b:	56                   	push   esi
c0011e7c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011e80:	50                   	push   eax
c0011e81:	e8 44 8b ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0011e86:	5e                   	pop    esi
c0011e87:	5f                   	pop    edi
c0011e88:	6a 01                	push   0x1
c0011e8a:	53                   	push   ebx
c0011e8b:	e8 fa 8b ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	85 c0                	test   eax,eax
c0011e95:	74 0a                	je     c0011ea1 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011e97:	83 ec 0c             	sub    esp,0xc
c0011e9a:	68 22 e3 01 c0       	push   0xc001e322
c0011e9f:	eb 34                	jmp    c0011ed5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011ea1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011ea9:	83 ec 0c             	sub    esp,0xc
c0011eac:	6a 34                	push   0x34
c0011eae:	e8 06 59 ff ff       	call   c00077b9 <malloc>
c0011eb3:	59                   	pop    ecx
c0011eb4:	89 c7                	mov    edi,eax
c0011eb6:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ebc:	56                   	push   esi
c0011ebd:	57                   	push   edi
c0011ebe:	6a 00                	push   0x0
c0011ec0:	6a 34                	push   0x34
c0011ec2:	53                   	push   ebx
c0011ec3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011ec6:	83 c4 20             	add    esp,0x20
c0011ec9:	85 c0                	test   eax,eax
c0011ecb:	74 17                	je     c0011ee4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011ecd:	83 ec 0c             	sub    esp,0xc
c0011ed0:	68 39 e3 01 c0       	push   0xc001e339
c0011ed5:	e8 dd e1 ff ff       	call   c00100b7 <KePanic(char const*)>
c0011eda:	83 c4 10             	add    esp,0x10
c0011edd:	31 c0                	xor    eax,eax
c0011edf:	e9 31 02 00 00       	jmp    c0012115 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011ee4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011eea:	75 e1                	jne    c0011ecd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011eec:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011eef:	85 c0                	test   eax,eax
c0011ef1:	74 da                	je     c0011ecd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011ef3:	52                   	push   edx
c0011ef4:	31 d2                	xor    edx,edx
c0011ef6:	52                   	push   edx
c0011ef7:	50                   	push   eax
c0011ef8:	53                   	push   ebx
c0011ef9:	e8 4a 8c ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011efe:	83 c4 10             	add    esp,0x10
c0011f01:	85 c0                	test   eax,eax
c0011f03:	75 c8                	jne    c0011ecd <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f05:	83 ec 0c             	sub    esp,0xc
c0011f08:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f0c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f10:	31 ed                	xor    ebp,ebp
c0011f12:	0f af c2             	imul   eax,edx
c0011f15:	50                   	push   eax
c0011f16:	e8 9e 58 ff ff       	call   c00077b9 <malloc>
c0011f1b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011f1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f21:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011f28:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011f2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011f30:	0f af c2             	imul   eax,edx
c0011f33:	99                   	cdq    
c0011f34:	52                   	push   edx
c0011f35:	50                   	push   eax
c0011f36:	53                   	push   ebx
c0011f37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011f3a:	83 c4 20             	add    esp,0x20
c0011f3d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011f4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011f55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f5d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0011f61:	0f 86 aa 00 00 00    	jbe    c0012011 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0011f67:	0f b7 f5             	movzx  esi,bp
c0011f6a:	6b f6 28             	imul   esi,esi,0x28
c0011f6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0011f71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0011f74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f78:	50                   	push   eax
c0011f79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011f7d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0011f81:	8b 16                	mov    edx,DWORD PTR [esi]
c0011f83:	6b c0 28             	imul   eax,eax,0x28
c0011f86:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0011f8a:	89 d0                	mov    eax,edx
c0011f8c:	31 d2                	xor    edx,edx
c0011f8e:	52                   	push   edx
c0011f8f:	50                   	push   eax
c0011f90:	53                   	push   ebx
c0011f91:	e8 b2 8b ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0011f96:	83 c4 0c             	add    esp,0xc
c0011f99:	6a 20                	push   0x20
c0011f9b:	6a 00                	push   0x0
c0011f9d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fa1:	52                   	push   edx
c0011fa2:	e8 29 e5 fe ff       	call   c00004d0 <memset>
c0011fa7:	58                   	pop    eax
c0011fa8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011faa:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0011fae:	51                   	push   ecx
c0011faf:	8d 54 24 40          	lea    edx,[esp+0x40]
c0011fb3:	52                   	push   edx
c0011fb4:	6a 00                	push   0x0
c0011fb6:	6a 1f                	push   0x1f
c0011fb8:	53                   	push   ebx
c0011fb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011fbc:	83 c4 18             	add    esp,0x18
c0011fbf:	68 50 e3 01 c0       	push   0xc001e350
c0011fc4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0011fc8:	52                   	push   edx
c0011fc9:	e8 12 e7 fe ff       	call   c00006e0 <strcmp>
c0011fce:	83 c4 10             	add    esp,0x10
c0011fd1:	85 c0                	test   eax,eax
c0011fd3:	75 0f                	jne    c0011fe4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0011fd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011fd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011fdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe4:	50                   	push   eax
c0011fe5:	50                   	push   eax
c0011fe6:	68 58 e3 01 c0       	push   0xc001e358
c0011feb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011fef:	50                   	push   eax
c0011ff0:	e8 eb e6 fe ff       	call   c00006e0 <strcmp>
c0011ff5:	83 c4 10             	add    esp,0x10
c0011ff8:	85 c0                	test   eax,eax
c0011ffa:	75 0f                	jne    c001200b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0011ffc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0011fff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012003:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012007:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001200b:	45                   	inc    ebp
c001200c:	e9 4c ff ff ff       	jmp    c0011f5d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012011:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012016:	75 10                	jne    c0012028 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012018:	83 ec 0c             	sub    esp,0xc
c001201b:	68 60 e3 01 c0       	push   0xc001e360
c0012020:	e8 92 e0 ff ff       	call   c00100b7 <KePanic(char const*)>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001202d:	75 10                	jne    c001203f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	68 60 e3 01 c0       	push   0xc001e360
c0012037:	e8 7b e0 ff ff       	call   c00100b7 <KePanic(char const*)>
c001203c:	83 c4 10             	add    esp,0x10
c001203f:	31 d2                	xor    edx,edx
c0012041:	50                   	push   eax
c0012042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012046:	52                   	push   edx
c0012047:	50                   	push   eax
c0012048:	53                   	push   ebx
c0012049:	e8 fa 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001204e:	5a                   	pop    edx
c001204f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012053:	e8 61 57 ff ff       	call   c00077b9 <malloc>
c0012058:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001205c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012060:	31 c9                	xor    ecx,ecx
c0012062:	5e                   	pop    esi
c0012063:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012065:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012069:	55                   	push   ebp
c001206a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001206e:	51                   	push   ecx
c001206f:	52                   	push   edx
c0012070:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012074:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012078:	53                   	push   ebx
c0012079:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001207c:	83 c4 14             	add    esp,0x14
c001207f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012083:	e8 31 57 ff ff       	call   c00077b9 <malloc>
c0012088:	89 c6                	mov    esi,eax
c001208a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001208c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001208f:	56                   	push   esi
c0012090:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012094:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012098:	51                   	push   ecx
c0012099:	52                   	push   edx
c001209a:	53                   	push   ebx
c001209b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001209e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00120a2:	8b 15 a0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236a0
c00120a8:	83 c4 1c             	add    esp,0x1c
c00120ab:	c1 e8 04             	shr    eax,0x4
c00120ae:	89 04 95 20 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcae0],eax
c00120b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120b9:	31 d2                	xor    edx,edx
c00120bb:	52                   	push   edx
c00120bc:	50                   	push   eax
c00120bd:	53                   	push   ebx
c00120be:	e8 85 8a ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00120c3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00120c5:	31 d2                	xor    edx,edx
c00120c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00120ca:	56                   	push   esi
c00120cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120cf:	52                   	push   edx
c00120d0:	50                   	push   eax
c00120d1:	53                   	push   ebx
c00120d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00120d5:	83 c4 14             	add    esp,0x14
c00120d8:	53                   	push   ebx
c00120d9:	e8 0a 8a ff ff       	call   c000aae8 <File::close()>
c00120de:	5d                   	pop    ebp
c00120df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120e3:	e8 e1 56 ff ff       	call   c00077c9 <free>
c00120e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00120eb:	e8 d9 56 ff ff       	call   c00077c9 <free>
c00120f0:	a1 a0 36 02 c0       	mov    eax,ds:0xc00236a0
c00120f5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00120f9:	8d 50 01             	lea    edx,[eax+0x1]
c00120fc:	89 0c 85 20 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9e0],ecx
c0012103:	89 34 85 a0 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdca60],esi
c001210a:	89 15 a0 36 02 c0    	mov    DWORD PTR ds:0xc00236a0,edx
c0012110:	83 c4 10             	add    esp,0x10
c0012113:	b0 01                	mov    al,0x1
c0012115:	83 c4 5c             	add    esp,0x5c
c0012118:	5b                   	pop    ebx
c0012119:	5e                   	pop    esi
c001211a:	5f                   	pop    edi
c001211b:	5d                   	pop    ebp
c001211c:	c3                   	ret    

c001211d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001211d:	55                   	push   ebp
c001211e:	57                   	push   edi
c001211f:	56                   	push   esi
c0012120:	53                   	push   ebx
c0012121:	81 ec 68 03 00 00    	sub    esp,0x368
c0012127:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001212e:	8b 1d f0 36 02 c0    	mov    ebx,DWORD PTR ds:0xc00236f0
c0012134:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012138:	68 14 01 00 00       	push   0x114
c001213d:	e8 77 56 ff ff       	call   c00077b9 <malloc>
c0012142:	83 c4 0c             	add    esp,0xc
c0012145:	89 c5                	mov    ebp,eax
c0012147:	53                   	push   ebx
c0012148:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001214f:	50                   	push   eax
c0012150:	e8 75 88 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0012155:	5e                   	pop    esi
c0012156:	5f                   	pop    edi
c0012157:	6a 01                	push   0x1
c0012159:	55                   	push   ebp
c001215a:	e8 2b 89 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c001215f:	83 c4 10             	add    esp,0x10
c0012162:	85 c0                	test   eax,eax
c0012164:	0f 85 a7 06 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001216a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012172:	83 ec 0c             	sub    esp,0xc
c0012175:	6a 34                	push   0x34
c0012177:	e8 3d 56 ff ff       	call   c00077b9 <malloc>
c001217c:	5b                   	pop    ebx
c001217d:	89 c7                	mov    edi,eax
c001217f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012183:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012186:	53                   	push   ebx
c0012187:	57                   	push   edi
c0012188:	6a 00                	push   0x0
c001218a:	6a 34                	push   0x34
c001218c:	55                   	push   ebp
c001218d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012190:	83 c4 20             	add    esp,0x20
c0012193:	85 c0                	test   eax,eax
c0012195:	0f 85 76 06 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001219b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00121a1:	0f 85 6a 06 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121a7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00121aa:	85 c0                	test   eax,eax
c00121ac:	0f 84 5f 06 00 00    	je     c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121b2:	31 d2                	xor    edx,edx
c00121b4:	51                   	push   ecx
c00121b5:	52                   	push   edx
c00121b6:	50                   	push   eax
c00121b7:	55                   	push   ebp
c00121b8:	e8 8b 89 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00121bd:	83 c4 10             	add    esp,0x10
c00121c0:	85 c0                	test   eax,eax
c00121c2:	0f 85 49 06 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00121c8:	83 ec 0c             	sub    esp,0xc
c00121cb:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00121ce:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00121d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00121d6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00121da:	0f af c2             	imul   eax,edx
c00121dd:	50                   	push   eax
c00121de:	e8 d6 55 ff ff       	call   c00077b9 <malloc>
c00121e3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00121e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121f1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00121f5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00121f9:	0f af c2             	imul   eax,edx
c00121fc:	99                   	cdq    
c00121fd:	52                   	push   edx
c00121fe:	50                   	push   eax
c00121ff:	55                   	push   ebp
c0012200:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012203:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012206:	83 c4 20             	add    esp,0x20
c0012209:	85 c0                	test   eax,eax
c001220b:	0f 84 00 06 00 00    	je     c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012211:	52                   	push   edx
c0012212:	31 d2                	xor    edx,edx
c0012214:	52                   	push   edx
c0012215:	50                   	push   eax
c0012216:	55                   	push   ebp
c0012217:	e8 2c 89 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001221c:	83 c4 10             	add    esp,0x10
c001221f:	85 c0                	test   eax,eax
c0012221:	0f 85 ea 05 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012227:	83 ec 0c             	sub    esp,0xc
c001222a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001222e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012232:	31 f6                	xor    esi,esi
c0012234:	0f af c2             	imul   eax,edx
c0012237:	50                   	push   eax
c0012238:	e8 7c 55 ff ff       	call   c00077b9 <malloc>
c001223d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012240:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012247:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001224b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001224f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012253:	0f af c2             	imul   eax,edx
c0012256:	99                   	cdq    
c0012257:	52                   	push   edx
c0012258:	50                   	push   eax
c0012259:	55                   	push   ebp
c001225a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001225d:	83 c4 20             	add    esp,0x20
c0012260:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012264:	0f 86 8a 00 00 00    	jbe    c00122f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001226a:	0f b7 de             	movzx  ebx,si
c001226d:	c1 e3 05             	shl    ebx,0x5
c0012270:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012274:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012277:	75 75                	jne    c00122ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012279:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001227c:	31 d2                	xor    edx,edx
c001227e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012282:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012289:	50                   	push   eax
c001228a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001228d:	52                   	push   edx
c001228e:	50                   	push   eax
c001228f:	55                   	push   ebp
c0012290:	e8 b3 88 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	85 c0                	test   eax,eax
c001229a:	0f 85 71 05 00 00    	jne    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122a0:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00122a7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122aa:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00122ae:	31 d2                	xor    edx,edx
c00122b0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00122b4:	83 ec 0c             	sub    esp,0xc
c00122b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122bb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00122c2:	50                   	push   eax
c00122c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00122c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122cb:	52                   	push   edx
c00122cc:	50                   	push   eax
c00122cd:	55                   	push   ebp
c00122ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122d1:	83 c4 1c             	add    esp,0x1c
c00122d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00122d7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00122da:	50                   	push   eax
c00122db:	6a 00                	push   0x0
c00122dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00122e5:	50                   	push   eax
c00122e6:	e8 e5 e1 fe ff       	call   c00004d0 <memset>
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	46                   	inc    esi
c00122ef:	e9 6c ff ff ff       	jmp    c0012260 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00122f4:	53                   	push   ebx
c00122f5:	31 db                	xor    ebx,ebx
c00122f7:	68 00 01 00 00       	push   0x100
c00122fc:	6a 00                	push   0x0
c00122fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012302:	50                   	push   eax
c0012303:	e8 c8 e1 fe ff       	call   c00004d0 <memset>
c0012308:	83 c4 0c             	add    esp,0xc
c001230b:	68 00 01 00 00       	push   0x100
c0012310:	6a 00                	push   0x0
c0012312:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012319:	50                   	push   eax
c001231a:	e8 b1 e1 fe ff       	call   c00004d0 <memset>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001232a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012332:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001233a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012342:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001234a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001234e:	0f 86 30 01 00 00    	jbe    c0012484 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012354:	0f b7 f3             	movzx  esi,bx
c0012357:	6b f6 28             	imul   esi,esi,0x28
c001235a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001235e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012361:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012365:	52                   	push   edx
c0012366:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001236a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001236e:	8b 06                	mov    eax,DWORD PTR [esi]
c0012370:	6b d2 28             	imul   edx,edx,0x28
c0012373:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012377:	31 d2                	xor    edx,edx
c0012379:	52                   	push   edx
c001237a:	50                   	push   eax
c001237b:	55                   	push   ebp
c001237c:	e8 c7 87 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012381:	83 c4 0c             	add    esp,0xc
c0012384:	6a 20                	push   0x20
c0012386:	6a 00                	push   0x0
c0012388:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001238f:	51                   	push   ecx
c0012390:	e8 3b e1 fe ff       	call   c00004d0 <memset>
c0012395:	59                   	pop    ecx
c0012396:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012399:	8d 54 24 58          	lea    edx,[esp+0x58]
c001239d:	52                   	push   edx
c001239e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00123a5:	51                   	push   ecx
c00123a6:	6a 00                	push   0x0
c00123a8:	6a 1f                	push   0x1f
c00123aa:	55                   	push   ebp
c00123ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123ae:	83 c4 1c             	add    esp,0x1c
c00123b1:	6a 09                	push   0x9
c00123b3:	68 7a e3 01 c0       	push   0xc001e37a
c00123b8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00123bf:	51                   	push   ecx
c00123c0:	e8 cb df fe ff       	call   c0000390 <memcmp>
c00123c5:	83 c4 10             	add    esp,0x10
c00123c8:	85 c0                	test   eax,eax
c00123ca:	75 21                	jne    c00123ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00123cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00123d4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00123d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00123dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00123df:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00123e6:	89 d0                	mov    eax,edx
c00123e8:	40                   	inc    eax
c00123e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00123ed:	50                   	push   eax
c00123ee:	6a 09                	push   0x9
c00123f0:	68 84 e3 01 c0       	push   0xc001e384
c00123f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00123fc:	50                   	push   eax
c00123fd:	e8 8e df fe ff       	call   c0000390 <memcmp>
c0012402:	83 c4 10             	add    esp,0x10
c0012405:	85 c0                	test   eax,eax
c0012407:	75 21                	jne    c001242a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012409:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001240d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012411:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012415:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012419:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001241c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012423:	89 d0                	mov    eax,edx
c0012425:	40                   	inc    eax
c0012426:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001242a:	50                   	push   eax
c001242b:	50                   	push   eax
c001242c:	68 50 e3 01 c0       	push   0xc001e350
c0012431:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012438:	50                   	push   eax
c0012439:	e8 a2 e2 fe ff       	call   c00006e0 <strcmp>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	85 c0                	test   eax,eax
c0012443:	75 0f                	jne    c0012454 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012445:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012448:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001244c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012454:	50                   	push   eax
c0012455:	50                   	push   eax
c0012456:	68 58 e3 01 c0       	push   0xc001e358
c001245b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012462:	50                   	push   eax
c0012463:	e8 78 e2 fe ff       	call   c00006e0 <strcmp>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	85 c0                	test   eax,eax
c001246d:	75 0f                	jne    c001247e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001246f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012472:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012476:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001247a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001247e:	43                   	inc    ebx
c001247f:	e9 c6 fe ff ff       	jmp    c001234a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012484:	31 d2                	xor    edx,edx
c0012486:	50                   	push   eax
c0012487:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001248b:	52                   	push   edx
c001248c:	50                   	push   eax
c001248d:	55                   	push   ebp
c001248e:	e8 b5 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c0012493:	58                   	pop    eax
c0012494:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012498:	e8 1c 53 ff ff       	call   c00077b9 <malloc>
c001249d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124a0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124a4:	31 d2                	xor    edx,edx
c00124a6:	58                   	pop    eax
c00124a7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00124ab:	53                   	push   ebx
c00124ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00124b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124b4:	52                   	push   edx
c00124b5:	50                   	push   eax
c00124b6:	55                   	push   ebp
c00124b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124ba:	83 c4 14             	add    esp,0x14
c00124bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00124c1:	e8 f3 52 ff ff       	call   c00077b9 <malloc>
c00124c6:	31 d2                	xor    edx,edx
c00124c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00124cc:	83 c4 0c             	add    esp,0xc
c00124cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124d3:	52                   	push   edx
c00124d4:	50                   	push   eax
c00124d5:	55                   	push   ebp
c00124d6:	e8 6d 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c00124db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124de:	31 d2                	xor    edx,edx
c00124e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00124e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124eb:	52                   	push   edx
c00124ec:	50                   	push   eax
c00124ed:	55                   	push   ebp
c00124ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124f1:	83 c4 20             	add    esp,0x20
c00124f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124fc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012500:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012504:	0f 84 0b 03 00 00    	je     c0012815 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001250a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012511:	31 d2                	xor    edx,edx
c0012513:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012517:	c1 e8 03             	shr    eax,0x3
c001251a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001251e:	51                   	push   ecx
c001251f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012523:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012527:	52                   	push   edx
c0012528:	50                   	push   eax
c0012529:	55                   	push   ebp
c001252a:	e8 19 86 ff ff       	call   c000ab48 <File::seek(unsigned long long)>
c001252f:	5b                   	pop    ebx
c0012530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012534:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001253b:	e8 79 52 ff ff       	call   c00077b9 <malloc>
c0012540:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012543:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012547:	31 d2                	xor    edx,edx
c0012549:	5e                   	pop    esi
c001254a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001254e:	50                   	push   eax
c001254f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012553:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012557:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001255e:	52                   	push   edx
c001255f:	50                   	push   eax
c0012560:	55                   	push   ebp
c0012561:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012564:	83 c4 20             	add    esp,0x20
c0012567:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001256f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012573:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012577:	0f 8d 7c 02 00 00    	jge    c00127f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001257d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012585:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001258a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001258d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012595:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012599:	89 d8                	mov    eax,ebx
c001259b:	c1 e8 08             	shr    eax,0x8
c001259e:	89 c6                	mov    esi,eax
c00125a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00125a4:	c1 e6 04             	shl    esi,0x4
c00125a7:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00125ab:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00125ae:	85 d2                	test   edx,edx
c00125b0:	0f 85 bf 00 00 00    	jne    c0012675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125b6:	83 ec 0c             	sub    esp,0xc
c00125b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125bd:	03 06                	add    eax,DWORD PTR [esi]
c00125bf:	50                   	push   eax
c00125c0:	e8 4b f8 ff ff       	call   c0011e10 <Thr::getAddressOfKernelSymbol(char const*)>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	89 c2                	mov    edx,eax
c00125ca:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00125cf:	85 c0                	test   eax,eax
c00125d1:	0f 85 9e 00 00 00    	jne    c0012675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125de:	03 06                	add    eax,DWORD PTR [esi]
c00125e0:	50                   	push   eax
c00125e1:	e8 22 dc ff ff       	call   c0010208 <KeResolveCompatibilitySymbol(char*)>
c00125e6:	83 c4 10             	add    esp,0x10
c00125e9:	89 c2                	mov    edx,eax
c00125eb:	85 c0                	test   eax,eax
c00125ed:	0f 85 82 00 00 00    	jne    c0012675 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00125f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00125f7:	50                   	push   eax
c00125f8:	50                   	push   eax
c00125f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125fd:	03 06                	add    eax,DWORD PTR [esi]
c00125ff:	50                   	push   eax
c0012600:	68 8e e3 01 c0       	push   0xc001e38e
c0012605:	e8 4a 7e ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001260a:	58                   	pop    eax
c001260b:	5a                   	pop    edx
c001260c:	68 a8 e3 01 c0       	push   0xc001e3a8
c0012611:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012618:	50                   	push   eax
c0012619:	e8 e2 df fe ff       	call   c0000600 <strcpy>
c001261e:	59                   	pop    ecx
c001261f:	58                   	pop    eax
c0012620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012624:	03 06                	add    eax,DWORD PTR [esi]
c0012626:	50                   	push   eax
c0012627:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001262e:	50                   	push   eax
c001262f:	e8 8c e1 fe ff       	call   c00007c0 <strcat>
c0012634:	58                   	pop    eax
c0012635:	5a                   	pop    edx
c0012636:	68 3e e4 01 c0       	push   0xc001e43e
c001263b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012642:	50                   	push   eax
c0012643:	e8 78 e1 fe ff       	call   c00007c0 <strcat>
c0012648:	83 c4 10             	add    esp,0x10
c001264b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012650:	0f 84 5d 01 00 00    	je     c00127b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012656:	83 ec 0c             	sub    esp,0xc
c0012659:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012660:	50                   	push   eax
c0012661:	e8 51 da ff ff       	call   c00100b7 <KePanic(char const*)>
c0012666:	83 c4 10             	add    esp,0x10
c0012669:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001266d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012671:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012675:	80 fb 01             	cmp    bl,0x1
c0012678:	0f 85 88 00 00 00    	jne    c0012706 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001267e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012685:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012689:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001268d:	01 ce                	add    esi,ecx
c001268f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012695:	0f 94 c0             	sete   al
c0012698:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001269e:	0f 94 c3             	sete   bl
c00126a1:	09 c3                	or     ebx,eax
c00126a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00126a5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00126aa:	74 41                	je     c00126ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00126ac:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00126af:	84 db                	test   bl,bl
c00126b1:	75 15                	jne    c00126c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00126b3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126b7:	66 83 f8 0c          	cmp    ax,0xc
c00126bb:	76 05                	jbe    c00126c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00126bd:	b8 0c 00 00 00       	mov    eax,0xc
c00126c2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00126c6:	76 37                	jbe    c00126ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00126c8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00126cc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126d1:	0f 84 dc 00 00 00    	je     c00127b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126d7:	83 ec 0c             	sub    esp,0xc
c00126da:	68 bf e3 01 c0       	push   0xc001e3bf
c00126df:	e8 d3 d9 ff ff       	call   c00100b7 <KePanic(char const*)>
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126eb:	eb 12                	jmp    c00126ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00126ed:	01 c1                	add    ecx,eax
c00126ef:	84 db                	test   bl,bl
c00126f1:	75 0c                	jne    c00126ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00126f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126f7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00126fb:	77 02                	ja     c00126ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00126fd:	01 d1                	add    ecx,edx
c00126ff:	89 0e                	mov    DWORD PTR [esi],ecx
c0012701:	e9 ea 00 00 00       	jmp    c00127f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012706:	80 fb 02             	cmp    bl,0x2
c0012709:	75 7c                	jne    c0012787 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001270b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012712:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012716:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001271a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012720:	74 20                	je     c0012742 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012722:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012728:	74 18                	je     c0012742 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001272a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001272e:	b9 0a 00 00 00       	mov    ecx,0xa
c0012733:	66 83 f8 0e          	cmp    ax,0xe
c0012737:	77 03                	ja     c001273c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012739:	8d 48 fc             	lea    ecx,[eax-0x4]
c001273c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012740:	76 1f                	jbe    c0012761 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012742:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012746:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001274b:	74 66                	je     c00127b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001274d:	83 ec 0c             	sub    esp,0xc
c0012750:	68 db e3 01 c0       	push   0xc001e3db
c0012755:	e8 5d d9 ff ff       	call   c00100b7 <KePanic(char const*)>
c001275a:	83 c4 10             	add    esp,0x10
c001275d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012761:	8b 06                	mov    eax,DWORD PTR [esi]
c0012763:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012768:	74 13                	je     c001277d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001276a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001276e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012775:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012779:	01 c8                	add    eax,ecx
c001277b:	eb 04                	jmp    c0012781 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001277d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012781:	01 c2                	add    edx,eax
c0012783:	89 16                	mov    DWORD PTR [esi],edx
c0012785:	eb 69                	jmp    c00127f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012787:	0f b6 db             	movzx  ebx,bl
c001278a:	50                   	push   eax
c001278b:	50                   	push   eax
c001278c:	53                   	push   ebx
c001278d:	68 f7 e3 01 c0       	push   0xc001e3f7
c0012792:	e8 bd 7c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012797:	83 c4 10             	add    esp,0x10
c001279a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001279f:	74 12                	je     c00127b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127a1:	83 ec 0c             	sub    esp,0xc
c00127a4:	68 02 e4 01 c0       	push   0xc001e402
c00127a9:	e8 09 d9 ff ff       	call   c00100b7 <KePanic(char const*)>
c00127ae:	83 c4 10             	add    esp,0x10
c00127b1:	eb 3d                	jmp    c00127f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127b3:	83 ec 0c             	sub    esp,0xc
c00127b6:	55                   	push   ebp
c00127b7:	e8 2c 83 ff ff       	call   c000aae8 <File::close()>
c00127bc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00127c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127c5:	59                   	pop    ecx
c00127c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127ca:	e8 fa 4f ff ff       	call   c00077c9 <free>
c00127cf:	5b                   	pop    ebx
c00127d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127d4:	e8 f0 4f ff ff       	call   c00077c9 <free>
c00127d9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00127dc:	e8 e8 4f ff ff       	call   c00077c9 <free>
c00127e1:	5e                   	pop    esi
c00127e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127e6:	e8 de 4f ff ff       	call   c00077c9 <free>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	eb 21                	jmp    c0012811 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00127f0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00127f4:	e9 76 fd ff ff       	jmp    c001256f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00127f9:	83 ec 0c             	sub    esp,0xc
c00127fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012800:	e8 c4 4f ff ff       	call   c00077c9 <free>
c0012805:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012809:	83 c4 10             	add    esp,0x10
c001280c:	e9 eb fc ff ff       	jmp    c00124fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012811:	31 c0                	xor    eax,eax
c0012813:	eb 33                	jmp    c0012848 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012815:	83 ec 0c             	sub    esp,0xc
c0012818:	55                   	push   ebp
c0012819:	e8 ca 82 ff ff       	call   c000aae8 <File::close()>
c001281e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012821:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012824:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012827:	58                   	pop    eax
c0012828:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001282c:	e8 98 4f ff ff       	call   c00077c9 <free>
c0012831:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012834:	e8 90 4f ff ff       	call   c00077c9 <free>
c0012839:	5a                   	pop    edx
c001283a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001283e:	e8 86 4f ff ff       	call   c00077c9 <free>
c0012843:	83 c4 10             	add    esp,0x10
c0012846:	b0 01                	mov    al,0x1
c0012848:	81 c4 5c 03 00 00    	add    esp,0x35c
c001284e:	5b                   	pop    ebx
c001284f:	5e                   	pop    esi
c0012850:	5f                   	pop    edi
c0012851:	5d                   	pop    ebp
c0012852:	c3                   	ret    

c0012853 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012853:	56                   	push   esi
c0012854:	31 d2                	xor    edx,edx
c0012856:	53                   	push   ebx
c0012857:	8b 1d 00 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f00
c001285d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012861:	39 d3                	cmp    ebx,edx
c0012863:	7e 1b                	jle    c0012880 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012865:	8b 04 95 20 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcee0]
c001286c:	39 c8                	cmp    eax,ecx
c001286e:	77 0d                	ja     c001287d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012870:	8b 34 95 20 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd0e0]
c0012877:	01 c6                	add    esi,eax
c0012879:	39 ce                	cmp    esi,ecx
c001287b:	77 05                	ja     c0012882 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001287d:	42                   	inc    edx
c001287e:	eb e1                	jmp    c0012861 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012880:	31 c0                	xor    eax,eax
c0012882:	5b                   	pop    ebx
c0012883:	5e                   	pop    esi
c0012884:	c3                   	ret    

c0012885 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012885:	53                   	push   ebx
c0012886:	31 c0                	xor    eax,eax
c0012888:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001288c:	8b 1d 00 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f00
c0012892:	39 c3                	cmp    ebx,eax
c0012894:	7e 22                	jle    c00128b8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012896:	8b 14 85 20 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcee0]
c001289d:	39 ca                	cmp    edx,ecx
c001289f:	77 14                	ja     c00128b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128a1:	03 14 85 20 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd0e0]
c00128a8:	39 ca                	cmp    edx,ecx
c00128aa:	76 09                	jbe    c00128b5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00128ac:	8b 04 85 20 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcce0]
c00128b3:	eb 05                	jmp    c00128ba <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00128b5:	40                   	inc    eax
c00128b6:	eb da                	jmp    c0012892 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00128b8:	31 c0                	xor    eax,eax
c00128ba:	5b                   	pop    ebx
c00128bb:	c3                   	ret    

c00128bc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00128bc:	53                   	push   ebx
c00128bd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128c1:	53                   	push   ebx
c00128c2:	e8 8c ff ff ff       	call   c0012853 <Thr::getDriverBaseFromAddress(unsigned long)>
c00128c7:	5a                   	pop    edx
c00128c8:	31 d2                	xor    edx,edx
c00128ca:	85 c0                	test   eax,eax
c00128cc:	74 04                	je     c00128d2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00128ce:	89 da                	mov    edx,ebx
c00128d0:	29 c2                	sub    edx,eax
c00128d2:	89 d0                	mov    eax,edx
c00128d4:	5b                   	pop    ebx
c00128d5:	c3                   	ret    

c00128d6 <Thr::loadDLL(char const*, bool)>:
c00128d6:	55                   	push   ebp
c00128d7:	57                   	push   edi
c00128d8:	56                   	push   esi
c00128d9:	53                   	push   ebx
c00128da:	81 ec 34 01 00 00    	sub    esp,0x134
c00128e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00128e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00128ee:	56                   	push   esi
c00128ef:	68 1a e4 01 c0       	push   0xc001e41a
c00128f4:	e8 5b 7b ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00128f9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012900:	e8 b4 4e ff ff       	call   c00077b9 <malloc>
c0012905:	83 c4 0c             	add    esp,0xc
c0012908:	89 c3                	mov    ebx,eax
c001290a:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c0012910:	56                   	push   esi
c0012911:	50                   	push   eax
c0012912:	e8 b3 80 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0012917:	83 c4 10             	add    esp,0x10
c001291a:	85 db                	test   ebx,ebx
c001291c:	75 3c                	jne    c001295a <Thr::loadDLL(char const*, bool)+0x84>
c001291e:	89 f8                	mov    eax,edi
c0012920:	84 c0                	test   al,al
c0012922:	0f 84 d2 01 00 00    	je     c0012afa <Thr::loadDLL(char const*, bool)+0x224>
c0012928:	55                   	push   ebp
c0012929:	55                   	push   ebp
c001292a:	68 2b e4 01 c0       	push   0xc001e42b
c001292f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012933:	55                   	push   ebp
c0012934:	e8 c7 dc fe ff       	call   c0000600 <strcpy>
c0012939:	58                   	pop    eax
c001293a:	5a                   	pop    edx
c001293b:	56                   	push   esi
c001293c:	55                   	push   ebp
c001293d:	e8 7e de fe ff       	call   c00007c0 <strcat>
c0012942:	59                   	pop    ecx
c0012943:	58                   	pop    eax
c0012944:	68 3e e4 01 c0       	push   0xc001e43e
c0012949:	55                   	push   ebp
c001294a:	e8 71 de fe ff       	call   c00007c0 <strcat>
c001294f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012952:	e8 60 d7 ff ff       	call   c00100b7 <KePanic(char const*)>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	51                   	push   ecx
c001295b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001295f:	50                   	push   eax
c0012960:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012964:	50                   	push   eax
c0012965:	53                   	push   ebx
c0012966:	e8 cb 83 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001296b:	83 c4 10             	add    esp,0x10
c001296e:	85 db                	test   ebx,ebx
c0012970:	74 0c                	je     c001297e <Thr::loadDLL(char const*, bool)+0xa8>
c0012972:	83 ec 0c             	sub    esp,0xc
c0012975:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012977:	53                   	push   ebx
c0012978:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001297b:	83 c4 10             	add    esp,0x10
c001297e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012983:	75 0a                	jne    c001298f <Thr::loadDLL(char const*, bool)+0xb9>
c0012985:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012989:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001298d:	75 3c                	jne    c00129cb <Thr::loadDLL(char const*, bool)+0xf5>
c001298f:	89 f8                	mov    eax,edi
c0012991:	84 c0                	test   al,al
c0012993:	0f 84 49 01 00 00    	je     c0012ae2 <Thr::loadDLL(char const*, bool)+0x20c>
c0012999:	51                   	push   ecx
c001299a:	51                   	push   ecx
c001299b:	68 2b e4 01 c0       	push   0xc001e42b
c00129a0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00129a4:	53                   	push   ebx
c00129a5:	e8 56 dc fe ff       	call   c0000600 <strcpy>
c00129aa:	5d                   	pop    ebp
c00129ab:	58                   	pop    eax
c00129ac:	56                   	push   esi
c00129ad:	53                   	push   ebx
c00129ae:	e8 0d de fe ff       	call   c00007c0 <strcat>
c00129b3:	58                   	pop    eax
c00129b4:	5a                   	pop    edx
c00129b5:	68 3e e4 01 c0       	push   0xc001e43e
c00129ba:	53                   	push   ebx
c00129bb:	e8 00 de fe ff       	call   c00007c0 <strcat>
c00129c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00129c3:	e8 ef d6 ff ff       	call   c00100b7 <KePanic(char const*)>
c00129c8:	83 c4 10             	add    esp,0x10
c00129cb:	52                   	push   edx
c00129cc:	6a 03                	push   0x3
c00129ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00129d6:	05 ff 0f 00 00       	add    eax,0xfff
c00129db:	83 d2 00             	adc    edx,0x0
c00129de:	0f ac d0 0c          	shrd   eax,edx,0xc
c00129e2:	50                   	push   eax
c00129e3:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c00129e9:	e8 ac 6f ff ff       	call   c000999a <VAS::allocatePages(int, int)>
c00129ee:	59                   	pop    ecx
c00129ef:	89 c3                	mov    ebx,eax
c00129f1:	5d                   	pop    ebp
c00129f2:	50                   	push   eax
c00129f3:	68 f6 d1 01 c0       	push   0xc001d1f6
c00129f8:	e8 57 7a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00129fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a00:	e8 3b db fe ff       	call   c0000540 <strlen>
c0012a05:	8b 2d 00 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022f00
c0012a0b:	40                   	inc    eax
c0012a0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a0f:	e8 a5 4d ff ff       	call   c00077b9 <malloc>
c0012a14:	89 04 ad 20 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcce0],eax
c0012a1b:	58                   	pop    eax
c0012a1c:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c0012a21:	5a                   	pop    edx
c0012a22:	56                   	push   esi
c0012a23:	ff 34 85 20 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcce0]
c0012a2a:	e8 d1 db fe ff       	call   c0000600 <strcpy>
c0012a2f:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c0012a34:	8d 50 01             	lea    edx,[eax+0x1]
c0012a37:	89 1c 85 20 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcee0],ebx
c0012a3e:	89 15 00 2f 02 c0    	mov    DWORD PTR ds:0xc0022f00,edx
c0012a44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012a48:	83 c4 0c             	add    esp,0xc
c0012a4b:	89 14 85 20 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd0e0],edx
c0012a52:	6a 01                	push   0x1
c0012a54:	53                   	push   ebx
c0012a55:	56                   	push   esi
c0012a56:	e8 c2 f6 ff ff       	call   c001211d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012a5b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012a67:	0f 85 89 00 00 00    	jne    c0012af6 <Thr::loadDLL(char const*, bool)+0x220>
c0012a6d:	89 f8                	mov    eax,edi
c0012a6f:	84 c0                	test   al,al
c0012a71:	74 73                	je     c0012ae6 <Thr::loadDLL(char const*, bool)+0x210>
c0012a73:	83 ec 0c             	sub    esp,0xc
c0012a76:	68 40 e4 01 c0       	push   0xc001e440
c0012a7b:	e8 37 d6 ff ff       	call   c00100b7 <KePanic(char const*)>
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	eb 61                	jmp    c0012ae6 <Thr::loadDLL(char const*, bool)+0x210>
c0012a85:	50                   	push   eax
c0012a86:	50                   	push   eax
c0012a87:	89 e8                	mov    eax,ebp
c0012a89:	c1 e0 0c             	shl    eax,0xc
c0012a8c:	01 d8                	add    eax,ebx
c0012a8e:	50                   	push   eax
c0012a8f:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c0012a95:	e8 78 6a ff ff       	call   c0009512 <VAS::getPageTableEntry(unsigned long)>
c0012a9a:	83 c4 10             	add    esp,0x10
c0012a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a9f:	a8 60                	test   al,0x60
c0012aa1:	75 11                	jne    c0012ab4 <Thr::loadDLL(char const*, bool)+0x1de>
c0012aa3:	83 ec 0c             	sub    esp,0xc
c0012aa6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012aab:	50                   	push   eax
c0012aac:	e8 82 4f ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012ab1:	83 c4 10             	add    esp,0x10
c0012ab4:	45                   	inc    ebp
c0012ab5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ab9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012abd:	05 ff 0f 00 00       	add    eax,0xfff
c0012ac2:	bf 00 00 00 00       	mov    edi,0x0
c0012ac7:	83 d2 00             	adc    edx,0x0
c0012aca:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ace:	c1 ea 0c             	shr    edx,0xc
c0012ad1:	39 c5                	cmp    ebp,eax
c0012ad3:	89 d1                	mov    ecx,edx
c0012ad5:	89 f8                	mov    eax,edi
c0012ad7:	19 c8                	sbb    eax,ecx
c0012ad9:	72 aa                	jb     c0012a85 <Thr::loadDLL(char const*, bool)+0x1af>
c0012adb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ae0:	75 18                	jne    c0012afa <Thr::loadDLL(char const*, bool)+0x224>
c0012ae2:	31 db                	xor    ebx,ebx
c0012ae4:	eb 14                	jmp    c0012afa <Thr::loadDLL(char const*, bool)+0x224>
c0012ae6:	83 ec 0c             	sub    esp,0xc
c0012ae9:	68 5f e4 01 c0       	push   0xc001e45f
c0012aee:	e8 c4 d5 ff ff       	call   c00100b7 <KePanic(char const*)>
c0012af3:	83 c4 10             	add    esp,0x10
c0012af6:	31 ed                	xor    ebp,ebp
c0012af8:	eb bb                	jmp    c0012ab5 <Thr::loadDLL(char const*, bool)+0x1df>
c0012afa:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b00:	89 d8                	mov    eax,ebx
c0012b02:	5b                   	pop    ebx
c0012b03:	5e                   	pop    esi
c0012b04:	5f                   	pop    edi
c0012b05:	5d                   	pop    ebp
c0012b06:	c3                   	ret    

c0012b07 <Thr::executeDLL(unsigned long, void*)>:
c0012b07:	56                   	push   esi
c0012b08:	53                   	push   ebx
c0012b09:	52                   	push   edx
c0012b0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b0e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012b12:	85 db                	test   ebx,ebx
c0012b14:	75 10                	jne    c0012b26 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012b16:	83 ec 0c             	sub    esp,0xc
c0012b19:	68 7b e4 01 c0       	push   0xc001e47b
c0012b1e:	e8 94 d5 ff ff       	call   c00100b7 <KePanic(char const*)>
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	50                   	push   eax
c0012b27:	50                   	push   eax
c0012b28:	53                   	push   ebx
c0012b29:	68 a5 e4 01 c0       	push   0xc001e4a5
c0012b2e:	e8 21 79 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012b33:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012b37:	89 d8                	mov    eax,ebx
c0012b39:	83 c4 14             	add    esp,0x14
c0012b3c:	5b                   	pop    ebx
c0012b3d:	5e                   	pop    esi
c0012b3e:	ff e0                	jmp    eax

c0012b40 <userModeEntryPoint(void*)>:
c0012b40:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0012b45:	48                   	dec    eax
c0012b46:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0012b4b:	75 03                	jne    c0012b50 <userModeEntryPoint(void*)+0x10>
c0012b4d:	fb                   	sti    
c0012b4e:	66 90                	xchg   ax,ax
c0012b50:	fb                   	sti    
c0012b51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b59:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012b5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b63:	e9 d7 d6 fe ff       	jmp    c000023f <goToUsermode>

c0012b68 <changeTSS>:
c0012b68:	83 ec 14             	sub    esp,0x14
c0012b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b70:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012b73:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012b78:	c1 e2 15             	shl    edx,0x15
c0012b7b:	29 d0                	sub    eax,edx
c0012b7d:	50                   	push   eax
c0012b7e:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0012b83:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012b89:	05 7c 11 00 00       	add    eax,0x117c
c0012b8e:	50                   	push   eax
c0012b8f:	e8 c0 5f ff ff       	call   c0008b54 <TSS::setESP(unsigned long)>
c0012b94:	83 c4 1c             	add    esp,0x1c
c0012b97:	c3                   	ret    

c0012b98 <switchToThread(ThreadControlBlock*)>:
c0012b98:	57                   	push   edi
c0012b99:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0012b9e:	56                   	push   esi
c0012b9f:	85 c0                	test   eax,eax
c0012ba1:	53                   	push   ebx
c0012ba2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ba6:	0f 85 90 00 00 00    	jne    c0012c3c <switchToThread(ThreadControlBlock*)+0xa4>
c0012bac:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012baf:	80 fa ff             	cmp    dl,0xff
c0012bb2:	0f 84 80 00 00 00    	je     c0012c38 <switchToThread(ThreadControlBlock*)+0xa0>
c0012bb8:	81 e2 ff 00 00 00    	and    edx,0xff
c0012bbe:	b8 00 04 00 00       	mov    eax,0x400
c0012bc3:	29 d0                	sub    eax,edx
c0012bc5:	d1 f8                	sar    eax,1
c0012bc7:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012bca:	66 90                	xchg   ax,ax
c0012bcc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012bcf:	e8 e5 25 00 00       	call   c00151b9 <HalQueryPerformanceCounter()>
c0012bd4:	a3 08 37 02 c0       	mov    ds:0xc0023708,eax
c0012bd9:	89 15 0c 37 02 c0    	mov    DWORD PTR ds:0xc002370c,edx
c0012bdf:	89 c6                	mov    esi,eax
c0012be1:	89 d7                	mov    edi,edx
c0012be3:	2b 35 f8 36 02 c0    	sub    esi,DWORD PTR ds:0xc00236f8
c0012be9:	a3 f8 36 02 c0       	mov    ds:0xc00236f8,eax
c0012bee:	1b 3d fc 36 02 c0    	sbb    edi,DWORD PTR ds:0xc00236fc
c0012bf4:	89 35 00 37 02 c0    	mov    DWORD PTR ds:0xc0023700,esi
c0012bfa:	89 3d 04 37 02 c0    	mov    DWORD PTR ds:0xc0023704,edi
c0012c00:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012c06:	89 15 fc 36 02 c0    	mov    DWORD PTR ds:0xc00236fc,edx
c0012c0c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012c0f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012c12:	01 c6                	add    esi,eax
c0012c14:	11 d7                	adc    edi,edx
c0012c16:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012c1f:	53                   	push   ebx
c0012c20:	e8 52 d6 fe ff       	call   c0000277 <switchToThreadASM>
c0012c25:	0f 20 c0             	mov    eax,cr0
c0012c28:	83 c8 08             	or     eax,0x8
c0012c2b:	0f 22 c0             	mov    cr0,eax
c0012c2e:	83 c4 10             	add    esp,0x10
c0012c31:	5b                   	pop    ebx
c0012c32:	5e                   	pop    esi
c0012c33:	5f                   	pop    edi
c0012c34:	c3                   	ret    
c0012c35:	8d 76 00             	lea    esi,[esi+0x0]
c0012c38:	31 c0                	xor    eax,eax
c0012c3a:	eb 90                	jmp    c0012bcc <switchToThread(ThreadControlBlock*)+0x34>
c0012c3c:	5b                   	pop    ebx
c0012c3d:	c7 05 c0 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x1
c0012c47:	5e                   	pop    esi
c0012c48:	5f                   	pop    edi
c0012c49:	c3                   	ret    
c0012c4a:	66 90                	xchg   ax,ax

c0012c4c <Process::addArgs(char**)>:
c0012c4c:	57                   	push   edi
c0012c4d:	56                   	push   esi
c0012c4e:	53                   	push   ebx
c0012c4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012c57:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012c61:	85 ff                	test   edi,edi
c0012c63:	74 43                	je     c0012ca8 <Process::addArgs(char**)+0x5c>
c0012c65:	8b 07                	mov    eax,DWORD PTR [edi]
c0012c67:	85 c0                	test   eax,eax
c0012c69:	74 3d                	je     c0012ca8 <Process::addArgs(char**)+0x5c>
c0012c6b:	31 db                	xor    ebx,ebx
c0012c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c70:	83 ec 0c             	sub    esp,0xc
c0012c73:	50                   	push   eax
c0012c74:	e8 c7 d8 fe ff       	call   c0000540 <strlen>
c0012c79:	40                   	inc    eax
c0012c7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7d:	e8 37 4b ff ff       	call   c00077b9 <malloc>
c0012c82:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012c89:	5a                   	pop    edx
c0012c8a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012c8d:	59                   	pop    ecx
c0012c8e:	43                   	inc    ebx
c0012c8f:	52                   	push   edx
c0012c90:	50                   	push   eax
c0012c91:	e8 6a d9 fe ff       	call   c0000600 <strcpy>
c0012c96:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012ca2:	85 c0                	test   eax,eax
c0012ca4:	75 ca                	jne    c0012c70 <Process::addArgs(char**)+0x24>
c0012ca6:	66 90                	xchg   ax,ax
c0012ca8:	5b                   	pop    ebx
c0012ca9:	5e                   	pop    esi
c0012caa:	5f                   	pop    edi
c0012cab:	c3                   	ret    

c0012cac <Process::Process(char const*, Process*, char**)>:
c0012cac:	56                   	push   esi
c0012cad:	53                   	push   ebx
c0012cae:	83 ec 14             	sub    esp,0x14
c0012cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cb5:	05 0c 02 00 00       	add    eax,0x20c
c0012cba:	bb 07 00 00 00       	mov    ebx,0x7
c0012cbf:	89 c6                	mov    esi,eax
c0012cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc4:	85 db                	test   ebx,ebx
c0012cc6:	78 14                	js     c0012cdc <Process::Process(char const*, Process*, char**)+0x30>
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	56                   	push   esi
c0012ccc:	e8 fb 97 00 00       	call   c001c4cc <ThreadControlBlock::ThreadControlBlock()>
c0012cd1:	83 c4 10             	add    esp,0x10
c0012cd4:	83 c6 5f             	add    esi,0x5f
c0012cd7:	4b                   	dec    ebx
c0012cd8:	eb ea                	jmp    c0012cc4 <Process::Process(char const*, Process*, char**)+0x18>
c0012cda:	66 90                	xchg   ax,ax
c0012cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ce0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012ce7:	83 ec 0c             	sub    esp,0xc
c0012cea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012cee:	e8 b9 d1 ff ff       	call   c000feac <Krnl::newProcessEnv(Process*)>
c0012cf3:	83 c4 10             	add    esp,0x10
c0012cf6:	89 c2                	mov    edx,eax
c0012cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cfc:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012d02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d06:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012d0f:	a1 e8 f3 01 c0       	mov    eax,ds:0xc001f3e8
c0012d14:	8d 50 01             	lea    edx,[eax+0x1]
c0012d17:	89 15 e8 f3 01 c0    	mov    DWORD PTR ds:0xc001f3e8,edx
c0012d1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012d21:	89 02                	mov    DWORD PTR [edx],eax
c0012d23:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012d2b:	83 ec 0c             	sub    esp,0xc
c0012d2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d32:	e8 82 4a ff ff       	call   c00077b9 <malloc>
c0012d37:	83 c4 10             	add    esp,0x10
c0012d3a:	89 c3                	mov    ebx,eax
c0012d3c:	83 ec 08             	sub    esp,0x8
c0012d3f:	6a 00                	push   0x0
c0012d41:	53                   	push   ebx
c0012d42:	e8 fd 6f ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012d47:	83 c4 10             	add    esp,0x10
c0012d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d4e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d58:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012d62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d66:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d6a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012d7a:	85 c0                	test   eax,eax
c0012d7c:	74 42                	je     c0012dc0 <Process::Process(char const*, Process*, char**)+0x114>
c0012d7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d82:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012d88:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d92:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012da2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dac:	05 0c 01 00 00       	add    eax,0x10c
c0012db1:	83 ec 08             	sub    esp,0x8
c0012db4:	52                   	push   edx
c0012db5:	50                   	push   eax
c0012db6:	e8 45 d8 fe ff       	call   c0000600 <strcpy>
c0012dbb:	83 c4 10             	add    esp,0x10
c0012dbe:	eb 64                	jmp    c0012e24 <Process::Process(char const*, Process*, char**)+0x178>
c0012dc0:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012dc8:	83 ec 0c             	sub    esp,0xc
c0012dcb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012dcf:	e8 e5 49 ff ff       	call   c00077b9 <malloc>
c0012dd4:	83 c4 10             	add    esp,0x10
c0012dd7:	89 c3                	mov    ebx,eax
c0012dd9:	83 ec 08             	sub    esp,0x8
c0012ddc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012de0:	53                   	push   ebx
c0012de1:	e8 14 5b ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012de6:	83 c4 10             	add    esp,0x10
c0012de9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ded:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012df7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012dfd:	83 ec 0c             	sub    esp,0xc
c0012e00:	50                   	push   eax
c0012e01:	e8 94 53 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012e06:	83 c4 10             	add    esp,0x10
c0012e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e0d:	05 0c 01 00 00       	add    eax,0x10c
c0012e12:	83 ec 08             	sub    esp,0x8
c0012e15:	68 c4 e4 01 c0       	push   0xc001e4c4
c0012e1a:	50                   	push   eax
c0012e1b:	e8 e0 d7 fe ff       	call   c0000600 <strcpy>
c0012e20:	83 c4 10             	add    esp,0x10
c0012e23:	90                   	nop
c0012e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e28:	83 c0 0c             	add    eax,0xc
c0012e2b:	83 ec 08             	sub    esp,0x8
c0012e2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e32:	50                   	push   eax
c0012e33:	e8 c8 d7 fe ff       	call   c0000600 <strcpy>
c0012e38:	83 c4 10             	add    esp,0x10
c0012e3b:	83 ec 08             	sub    esp,0x8
c0012e3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e46:	e8 01 fe ff ff       	call   c0012c4c <Process::addArgs(char**)>
c0012e4b:	83 c4 10             	add    esp,0x10
c0012e4e:	83 ec 08             	sub    esp,0x8
c0012e51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e59:	e8 89 ed ff ff       	call   c0011be7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012e65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e69:	83 f0 01             	xor    eax,0x1
c0012e6c:	88 c2                	mov    dl,al
c0012e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e72:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012e78:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012e7c:	25 ff 00 00 00       	and    eax,0xff
c0012e81:	83 ec 08             	sub    esp,0x8
c0012e84:	50                   	push   eax
c0012e85:	68 1c e5 01 c0       	push   0xc001e51c
c0012e8a:	e8 c5 75 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0012e8f:	83 c4 10             	add    esp,0x10
c0012e92:	90                   	nop
c0012e93:	83 c4 14             	add    esp,0x14
c0012e96:	5b                   	pop    ebx
c0012e97:	5e                   	pop    esi
c0012e98:	c3                   	ret    
c0012e99:	90                   	nop
c0012e9a:	66 90                	xchg   ax,ax

c0012e9c <Process::Process(bool, char const*, Process*, char**)>:
c0012e9c:	56                   	push   esi
c0012e9d:	53                   	push   ebx
c0012e9e:	83 ec 24             	sub    esp,0x24
c0012ea1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ea5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012ea9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ead:	05 0c 02 00 00       	add    eax,0x20c
c0012eb2:	bb 07 00 00 00       	mov    ebx,0x7
c0012eb7:	89 c6                	mov    esi,eax
c0012eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ebc:	85 db                	test   ebx,ebx
c0012ebe:	78 14                	js     c0012ed4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012ec0:	83 ec 0c             	sub    esp,0xc
c0012ec3:	56                   	push   esi
c0012ec4:	e8 03 96 00 00       	call   c001c4cc <ThreadControlBlock::ThreadControlBlock()>
c0012ec9:	83 c4 10             	add    esp,0x10
c0012ecc:	83 c6 5f             	add    esi,0x5f
c0012ecf:	4b                   	dec    ebx
c0012ed0:	eb ea                	jmp    c0012ebc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012ed2:	66 90                	xchg   ax,ax
c0012ed4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ed8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012edf:	83 ec 0c             	sub    esp,0xc
c0012ee2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ee6:	e8 c1 cf ff ff       	call   c000feac <Krnl::newProcessEnv(Process*)>
c0012eeb:	83 c4 10             	add    esp,0x10
c0012eee:	89 c2                	mov    edx,eax
c0012ef0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ef4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012efa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012efe:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012f07:	a1 e8 f3 01 c0       	mov    eax,ds:0xc001f3e8
c0012f0c:	8d 50 01             	lea    edx,[eax+0x1]
c0012f0f:	89 15 e8 f3 01 c0    	mov    DWORD PTR ds:0xc001f3e8,edx
c0012f15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f19:	89 02                	mov    DWORD PTR [edx],eax
c0012f1b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012f23:	83 ec 0c             	sub    esp,0xc
c0012f26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f2a:	e8 8a 48 ff ff       	call   c00077b9 <malloc>
c0012f2f:	83 c4 10             	add    esp,0x10
c0012f32:	89 c3                	mov    ebx,eax
c0012f34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012f38:	25 ff 00 00 00       	and    eax,0xff
c0012f3d:	83 ec 08             	sub    esp,0x8
c0012f40:	50                   	push   eax
c0012f41:	53                   	push   ebx
c0012f42:	e8 fd 6d ff ff       	call   c0009d44 <VAS::VAS(bool)>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f4e:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012f54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f58:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012f62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f66:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012f6a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012f70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f74:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f7a:	85 c0                	test   eax,eax
c0012f7c:	74 42                	je     c0012fc0 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0012f7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f82:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012f88:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012f8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f92:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012f98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f9c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012fa2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012fa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fac:	05 0c 01 00 00       	add    eax,0x10c
c0012fb1:	83 ec 08             	sub    esp,0x8
c0012fb4:	52                   	push   edx
c0012fb5:	50                   	push   eax
c0012fb6:	e8 45 d6 fe ff       	call   c0000600 <strcpy>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	eb 64                	jmp    c0013024 <Process::Process(bool, char const*, Process*, char**)+0x188>
c0012fc0:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0012fc8:	83 ec 0c             	sub    esp,0xc
c0012fcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012fcf:	e8 e5 47 ff ff       	call   c00077b9 <malloc>
c0012fd4:	83 c4 10             	add    esp,0x10
c0012fd7:	89 c3                	mov    ebx,eax
c0012fd9:	83 ec 08             	sub    esp,0x8
c0012fdc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012fe0:	53                   	push   ebx
c0012fe1:	e8 14 59 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012fe6:	83 c4 10             	add    esp,0x10
c0012fe9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fed:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ff7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ffd:	83 ec 0c             	sub    esp,0xc
c0013000:	50                   	push   eax
c0013001:	e8 94 51 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0013006:	83 c4 10             	add    esp,0x10
c0013009:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001300d:	05 0c 01 00 00       	add    eax,0x10c
c0013012:	83 ec 08             	sub    esp,0x8
c0013015:	68 c4 e4 01 c0       	push   0xc001e4c4
c001301a:	50                   	push   eax
c001301b:	e8 e0 d5 fe ff       	call   c0000600 <strcpy>
c0013020:	83 c4 10             	add    esp,0x10
c0013023:	90                   	nop
c0013024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013028:	83 c0 0c             	add    eax,0xc
c001302b:	83 ec 08             	sub    esp,0x8
c001302e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013032:	50                   	push   eax
c0013033:	e8 c8 d5 fe ff       	call   c0000600 <strcpy>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	83 ec 08             	sub    esp,0x8
c001303e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013042:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013046:	e8 01 fc ff ff       	call   c0012c4c <Process::addArgs(char**)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	90                   	nop
c001304f:	83 c4 24             	add    esp,0x24
c0013052:	5b                   	pop    ebx
c0013053:	5e                   	pop    esi
c0013054:	c3                   	ret    
c0013055:	8d 76 00             	lea    esi,[esi+0x0]

c0013058 <taskStartupFunction>:
c0013058:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001305d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013060:	c3                   	ret    
c0013061:	90                   	nop
c0013062:	66 90                	xchg   ax,ax

c0013064 <Semaphore::Semaphore(int)>:
c0013064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001306c:	89 10                	mov    DWORD PTR [eax],edx
c001306e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013072:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001307d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013088:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001308f:	90                   	nop
c0013090:	c3                   	ret    
c0013091:	90                   	nop
c0013092:	66 90                	xchg   ax,ax

c0013094 <Mutex::Mutex()>:
c0013094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013098:	6a 01                	push   0x1
c001309a:	50                   	push   eax
c001309b:	e8 c4 ff ff ff       	call   c0013064 <Semaphore::Semaphore(int)>
c00130a0:	83 c4 08             	add    esp,0x8
c00130a3:	90                   	nop
c00130a4:	c3                   	ret    
c00130a5:	90                   	nop
c00130a6:	66 90                	xchg   ax,ax

c00130a8 <Process::createThread(void (*)(void*), void*, int)>:
c00130a8:	57                   	push   edi
c00130a9:	31 c9                	xor    ecx,ecx
c00130ab:	56                   	push   esi
c00130ac:	53                   	push   ebx
c00130ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130b1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00130b8:	89 f2                	mov    edx,esi
c00130ba:	66 90                	xchg   ax,ax
c00130bc:	31 c0                	xor    eax,eax
c00130be:	66 89 d0             	mov    ax,dx
c00130c1:	83 e2 01             	and    edx,0x1
c00130c4:	74 12                	je     c00130d8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00130c6:	d1 f8                	sar    eax,1
c00130c8:	41                   	inc    ecx
c00130c9:	89 c2                	mov    edx,eax
c00130cb:	83 f9 10             	cmp    ecx,0x10
c00130ce:	75 ec                	jne    c00130bc <Process::createThread(void (*)(void*), void*, int)+0x14>
c00130d0:	31 db                	xor    ebx,ebx
c00130d2:	89 d8                	mov    eax,ebx
c00130d4:	5b                   	pop    ebx
c00130d5:	5e                   	pop    esi
c00130d6:	5f                   	pop    edi
c00130d7:	c3                   	ret    
c00130d8:	b8 01 00 00 00       	mov    eax,0x1
c00130dd:	d3 e0                	shl    eax,cl
c00130df:	09 c6                	or     esi,eax
c00130e1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00130e4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00130eb:	01 c0                	add    eax,eax
c00130ed:	01 c8                	add    eax,ecx
c00130ef:	8d 04 80             	lea    eax,[eax+eax*4]
c00130f2:	01 d8                	add    eax,ebx
c00130f4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00130fb:	75 0b                	jne    c0013108 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00130fd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0013107:	90                   	nop
c0013108:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001310e:	83 ec 08             	sub    esp,0x8
c0013111:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013114:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013117:	01 c0                	add    eax,eax
c0013119:	01 c8                	add    eax,ecx
c001311b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001311e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013121:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0013127:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001312d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013131:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0013137:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001313d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013144:	89 ca                	mov    edx,ecx
c0013146:	f7 da                	neg    edx
c0013148:	c1 e2 15             	shl    edx,0x15
c001314b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013151:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013157:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001315b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013165:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001316b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001316f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013175:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001317f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013189:	53                   	push   ebx
c001318a:	68 e4 36 02 c0       	push   0xc00236e4
c001318f:	e8 d8 90 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	89 d8                	mov    eax,ebx
c0013199:	5b                   	pop    ebx
c001319a:	5e                   	pop    esi
c001319b:	5f                   	pop    edi
c001319c:	c3                   	ret    
c001319d:	90                   	nop
c001319e:	66 90                	xchg   ax,ax

c00131a0 <Process::createUserThread()>:
c00131a0:	83 ec 0c             	sub    esp,0xc
c00131a3:	68 80 00 00 00       	push   0x80
c00131a8:	6a 00                	push   0x0
c00131aa:	68 40 2b 01 c0       	push   0xc0012b40
c00131af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131b3:	50                   	push   eax
c00131b4:	e8 ef fe ff ff       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c00131b9:	83 c4 1c             	add    esp,0x1c
c00131bc:	c3                   	ret    
c00131bd:	8d 76 00             	lea    esi,[esi+0x0]

c00131c0 <setupMultitasking(void (*)())>:
c00131c0:	56                   	push   esi
c00131c1:	53                   	push   ebx
c00131c2:	53                   	push   ebx
c00131c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131c7:	eb 13                	jmp    c00131dc <setupMultitasking(void (*)())+0x1c>
c00131c9:	8d 76 00             	lea    esi,[esi+0x0]
c00131cc:	83 ec 0c             	sub    esp,0xc
c00131cf:	68 e4 36 02 c0       	push   0xc00236e4
c00131d4:	e8 db 8f 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00131d9:	83 c4 10             	add    esp,0x10
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	68 e4 36 02 c0       	push   0xc00236e4
c00131e4:	e8 a7 8f 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	84 c0                	test   al,al
c00131ee:	74 dc                	je     c00131cc <setupMultitasking(void (*)())+0xc>
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	68 1f 07 00 00       	push   0x71f
c00131f8:	e8 bc 45 ff ff       	call   c00077b9 <malloc>
c00131fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013204:	89 c3                	mov    ebx,eax
c0013206:	6a 00                	push   0x0
c0013208:	68 c8 e4 01 c0       	push   0xc001e4c8
c001320d:	6a 01                	push   0x1
c001320f:	50                   	push   eax
c0013210:	e8 87 fc ff ff       	call   c0012e9c <Process::Process(bool, char const*, Process*, char**)>
c0013215:	83 c4 14             	add    esp,0x14
c0013218:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c001321e:	89 1d f0 36 02 c0    	mov    DWORD PTR ds:0xc00236f0,ebx
c0013224:	50                   	push   eax
c0013225:	e8 cd 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001322a:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013232:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001323c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013242:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013245:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001324f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013255:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001325b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013265:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001326f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013279:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001327f:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013285:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001328f:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013295:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001329f:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00132a5:	5a                   	pop    edx
c00132a6:	59                   	pop    ecx
c00132a7:	68 c4 e4 01 c0       	push   0xc001e4c4
c00132ac:	50                   	push   eax
c00132ad:	e8 4e d3 fe ff       	call   c0000600 <strcpy>
c00132b2:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00132b9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00132bd:	83 c4 14             	add    esp,0x14
c00132c0:	5b                   	pop    ebx
c00132c1:	5e                   	pop    esi
c00132c2:	e9 a2 cf fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00132c7:	90                   	nop

c00132c8 <schedule()>:
c00132c8:	8b 15 c4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236c4
c00132ce:	85 d2                	test   edx,edx
c00132d0:	74 0e                	je     c00132e0 <schedule()+0x18>
c00132d2:	c7 05 c0 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x1
c00132dc:	c3                   	ret    
c00132dd:	8d 76 00             	lea    esi,[esi+0x0]
c00132e0:	53                   	push   ebx
c00132e1:	83 ec 14             	sub    esp,0x14
c00132e4:	68 e4 36 02 c0       	push   0xc00236e4
c00132e9:	e8 a2 8e 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00132ee:	83 c4 10             	add    esp,0x10
c00132f1:	84 c0                	test   al,al
c00132f3:	75 3b                	jne    c0013330 <schedule()+0x68>
c00132f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00132fd:	4a                   	dec    edx
c00132fe:	74 38                	je     c0013338 <schedule()+0x70>
c0013300:	83 ec 0c             	sub    esp,0xc
c0013303:	68 e4 36 02 c0       	push   0xc00236e4
c0013308:	e8 9f 8e 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001330d:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c0013314:	89 c3                	mov    ebx,eax
c0013316:	e8 99 8e 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001331b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013325:	e8 6e f8 ff ff       	call   c0012b98 <switchToThread(ThreadControlBlock*)>
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	8d 76 00             	lea    esi,[esi+0x0]
c0013330:	83 c4 08             	add    esp,0x8
c0013333:	5b                   	pop    ebx
c0013334:	c3                   	ret    
c0013335:	8d 76 00             	lea    esi,[esi+0x0]
c0013338:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001333f:	83 ec 08             	sub    esp,0x8
c0013342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013347:	50                   	push   eax
c0013348:	68 e4 36 02 c0       	push   0xc00236e4
c001334d:	e8 1a 8f 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	eb a9                	jmp    c0013300 <schedule()+0x38>
c0013357:	90                   	nop

c0013358 <Semaphore::tryAcquire()>:
c0013358:	53                   	push   ebx
c0013359:	83 ec 08             	sub    esp,0x8
c001335c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013360:	fa                   	cli    
c0013361:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013366:	8d 50 01             	lea    edx,[eax+0x1]
c0013369:	89 15 c8 36 02 c0    	mov    DWORD PTR ds:0xc00236c8,edx
c001336f:	8b 15 c4 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236c4
c0013375:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013378:	89 1d c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,ebx
c001337e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013381:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013383:	7c 33                	jl     c00133b8 <Semaphore::tryAcquire()+0x60>
c0013385:	89 15 c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,edx
c001338b:	85 d2                	test   edx,edx
c001338d:	75 0d                	jne    c001339c <Semaphore::tryAcquire()+0x44>
c001338f:	8b 15 c0 36 02 c0    	mov    edx,DWORD PTR ds:0xc00236c0
c0013395:	85 d2                	test   edx,edx
c0013397:	75 6b                	jne    c0013404 <Semaphore::tryAcquire()+0xac>
c0013399:	8d 76 00             	lea    esi,[esi+0x0]
c001339c:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00133a1:	85 c0                	test   eax,eax
c00133a3:	74 0b                	je     c00133b0 <Semaphore::tryAcquire()+0x58>
c00133a5:	8d 76 00             	lea    esi,[esi+0x0]
c00133a8:	31 c0                	xor    eax,eax
c00133aa:	83 c4 08             	add    esp,0x8
c00133ad:	5b                   	pop    ebx
c00133ae:	c3                   	ret    
c00133af:	90                   	nop
c00133b0:	fb                   	sti    
c00133b1:	83 c4 08             	add    esp,0x8
c00133b4:	5b                   	pop    ebx
c00133b5:	c3                   	ret    
c00133b6:	66 90                	xchg   ax,ax
c00133b8:	43                   	inc    ebx
c00133b9:	89 15 c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,edx
c00133bf:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00133c2:	85 d2                	test   edx,edx
c00133c4:	75 22                	jne    c00133e8 <Semaphore::tryAcquire()+0x90>
c00133c6:	8b 0d c0 36 02 c0    	mov    ecx,DWORD PTR ds:0xc00236c0
c00133cc:	85 c9                	test   ecx,ecx
c00133ce:	74 18                	je     c00133e8 <Semaphore::tryAcquire()+0x90>
c00133d0:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c00133da:	e8 e9 fe ff ff       	call   c00132c8 <schedule()>
c00133df:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00133e4:	48                   	dec    eax
c00133e5:	8d 76 00             	lea    esi,[esi+0x0]
c00133e8:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00133ed:	85 c0                	test   eax,eax
c00133ef:	75 0b                	jne    c00133fc <Semaphore::tryAcquire()+0xa4>
c00133f1:	fb                   	sti    
c00133f2:	b0 01                	mov    al,0x1
c00133f4:	83 c4 08             	add    esp,0x8
c00133f7:	5b                   	pop    ebx
c00133f8:	c3                   	ret    
c00133f9:	8d 76 00             	lea    esi,[esi+0x0]
c00133fc:	b0 01                	mov    al,0x1
c00133fe:	83 c4 08             	add    esp,0x8
c0013401:	5b                   	pop    ebx
c0013402:	c3                   	ret    
c0013403:	90                   	nop
c0013404:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c001340e:	e8 b5 fe ff ff       	call   c00132c8 <schedule()>
c0013413:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013418:	48                   	dec    eax
c0013419:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c001341e:	85 c0                	test   eax,eax
c0013420:	75 86                	jne    c00133a8 <Semaphore::tryAcquire()+0x50>
c0013422:	eb 8c                	jmp    c00133b0 <Semaphore::tryAcquire()+0x58>

c0013424 <Semaphore::assertLocked(char const*)>:
c0013424:	83 ec 0c             	sub    esp,0xc
c0013427:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001342b:	fa                   	cli    
c001342c:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013432:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013437:	8d 48 01             	lea    ecx,[eax+0x1]
c001343a:	89 0d c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,ecx
c0013440:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013442:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013445:	7c 29                	jl     c0013470 <Semaphore::assertLocked(char const*)+0x4c>
c0013447:	90                   	nop
c0013448:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c001344d:	85 c0                	test   eax,eax
c001344f:	75 0b                	jne    c001345c <Semaphore::assertLocked(char const*)+0x38>
c0013451:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0013456:	85 c0                	test   eax,eax
c0013458:	75 2e                	jne    c0013488 <Semaphore::assertLocked(char const*)+0x64>
c001345a:	66 90                	xchg   ax,ax
c001345c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013461:	48                   	dec    eax
c0013462:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013467:	75 03                	jne    c001346c <Semaphore::assertLocked(char const*)+0x48>
c0013469:	fb                   	sti    
c001346a:	66 90                	xchg   ax,ax
c001346c:	83 c4 0c             	add    esp,0xc
c001346f:	c3                   	ret    
c0013470:	83 ec 0c             	sub    esp,0xc
c0013473:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013477:	52                   	push   edx
c0013478:	e8 3a cc ff ff       	call   c00100b7 <KePanic(char const*)>
c001347d:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013482:	83 c4 10             	add    esp,0x10
c0013485:	48                   	dec    eax
c0013486:	eb c0                	jmp    c0013448 <Semaphore::assertLocked(char const*)+0x24>
c0013488:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c0013492:	e8 31 fe ff ff       	call   c00132c8 <schedule()>
c0013497:	eb c3                	jmp    c001345c <Semaphore::assertLocked(char const*)+0x38>
c0013499:	8d 76 00             	lea    esi,[esi+0x0]

c001349c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001349c:	83 ec 0c             	sub    esp,0xc
c001349f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134ab:	e8 18 fe ff ff       	call   c00132c8 <schedule()>
c00134b0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00134b5:	48                   	dec    eax
c00134b6:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00134bb:	75 03                	jne    c00134c0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00134bd:	fb                   	sti    
c00134be:	66 90                	xchg   ax,ax
c00134c0:	83 c4 0c             	add    esp,0xc
c00134c3:	c3                   	ret    

c00134c4 <blockTask(TaskState)>:
c00134c4:	83 ec 0c             	sub    esp,0xc
c00134c7:	fa                   	cli    
c00134c8:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c00134ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00134da:	e8 e9 fd ff ff       	call   c00132c8 <schedule()>
c00134df:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00134e4:	48                   	dec    eax
c00134e5:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00134ea:	75 04                	jne    c00134f0 <blockTask(TaskState)+0x2c>
c00134ec:	fb                   	sti    
c00134ed:	8d 76 00             	lea    esi,[esi+0x0]
c00134f0:	83 c4 0c             	add    esp,0xc
c00134f3:	c3                   	ret    

c00134f4 <waitTask(int, int*, int)>:
c00134f4:	83 ec 18             	sub    esp,0x18
c00134f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00134fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013500:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013503:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001350c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001350f:	6a 07                	push   0x7
c0013511:	e8 ae ff ff ff       	call   c00134c4 <blockTask(TaskState)>
c0013516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001351b:	83 c4 10             	add    esp,0x10
c001351e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013521:	85 d2                	test   edx,edx
c0013523:	74 0b                	je     c0013530 <waitTask(int, int*, int)+0x3c>
c0013525:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013528:	89 02                	mov    DWORD PTR [edx],eax
c001352a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001352f:	90                   	nop
c0013530:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013533:	83 c4 0c             	add    esp,0xc
c0013536:	c3                   	ret    
c0013537:	90                   	nop

c0013538 <milliTenthSleepUntil(unsigned int)>:
c0013538:	83 ec 0c             	sub    esp,0xc
c001353b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353f:	39 05 ec 29 02 c0    	cmp    DWORD PTR ds:0xc00229ec,eax
c0013545:	76 05                	jbe    c001354c <milliTenthSleepUntil(unsigned int)+0x14>
c0013547:	90                   	nop
c0013548:	83 c4 0c             	add    esp,0xc
c001354b:	c3                   	ret    
c001354c:	fa                   	cli    
c001354d:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013553:	83 ec 08             	sub    esp,0x8
c0013556:	ff 05 c4 36 02 c0    	inc    DWORD PTR ds:0xc00236c4
c001355c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013562:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013565:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001356b:	52                   	push   edx
c001356c:	68 d8 36 02 c0       	push   0xc00236d8
c0013571:	e8 f6 8c 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013576:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001357d:	e8 42 ff ff ff       	call   c00134c4 <blockTask(TaskState)>
c0013582:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	48                   	dec    eax
c001358b:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0013590:	85 c0                	test   eax,eax
c0013592:	75 0c                	jne    c00135a0 <milliTenthSleepUntil(unsigned int)+0x68>
c0013594:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0013599:	85 c0                	test   eax,eax
c001359b:	75 17                	jne    c00135b4 <milliTenthSleepUntil(unsigned int)+0x7c>
c001359d:	8d 76 00             	lea    esi,[esi+0x0]
c00135a0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00135a5:	48                   	dec    eax
c00135a6:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00135ab:	75 9b                	jne    c0013548 <milliTenthSleepUntil(unsigned int)+0x10>
c00135ad:	fb                   	sti    
c00135ae:	83 c4 0c             	add    esp,0xc
c00135b1:	c3                   	ret    
c00135b2:	66 90                	xchg   ax,ax
c00135b4:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c00135be:	e8 05 fd ff ff       	call   c00132c8 <schedule()>
c00135c3:	eb db                	jmp    c00135a0 <milliTenthSleepUntil(unsigned int)+0x68>
c00135c5:	8d 76 00             	lea    esi,[esi+0x0]

c00135c8 <milliTenthSleep(unsigned int)>:
c00135c8:	a1 ec 29 02 c0       	mov    eax,ds:0xc00229ec
c00135cd:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00135d1:	e9 62 ff ff ff       	jmp    c0013538 <milliTenthSleepUntil(unsigned int)>
c00135d6:	66 90                	xchg   ax,ax

c00135d8 <sleep(unsigned int)>:
c00135d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00135dc:	8d 04 80             	lea    eax,[eax+eax*4]
c00135df:	8d 04 80             	lea    eax,[eax+eax*4]
c00135e2:	8d 04 80             	lea    eax,[eax+eax*4]
c00135e5:	8d 04 80             	lea    eax,[eax+eax*4]
c00135e8:	c1 e0 04             	shl    eax,0x4
c00135eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00135ef:	eb d7                	jmp    c00135c8 <milliTenthSleep(unsigned int)>
c00135f1:	90                   	nop
c00135f2:	66 90                	xchg   ax,ax

c00135f4 <Semaphore::acquire()>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135fb:	fa                   	cli    
c00135fc:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013601:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013607:	8d 48 01             	lea    ecx,[eax+0x1]
c001360a:	89 0d c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,ecx
c0013610:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013613:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013615:	7d 2d                	jge    c0013644 <Semaphore::acquire()+0x50>
c0013617:	41                   	inc    ecx
c0013618:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001361b:	90                   	nop
c001361c:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0013621:	85 c0                	test   eax,eax
c0013623:	75 0b                	jne    c0013630 <Semaphore::acquire()+0x3c>
c0013625:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c001362a:	85 c0                	test   eax,eax
c001362c:	75 62                	jne    c0013690 <Semaphore::acquire()+0x9c>
c001362e:	66 90                	xchg   ax,ax
c0013630:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013635:	48                   	dec    eax
c0013636:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c001363b:	75 03                	jne    c0013640 <Semaphore::acquire()+0x4c>
c001363d:	fb                   	sti    
c001363e:	66 90                	xchg   ax,ax
c0013640:	83 c4 0c             	add    esp,0xc
c0013643:	c3                   	ret    
c0013644:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013649:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013650:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013653:	85 c9                	test   ecx,ecx
c0013655:	74 4d                	je     c00136a4 <Semaphore::acquire()+0xb0>
c0013657:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001365a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013660:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013663:	90                   	nop
c0013664:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013669:	83 ec 0c             	sub    esp,0xc
c001366c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001366f:	68 44 e5 01 c0       	push   0xc001e544
c0013674:	e8 db 6d ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013679:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013680:	e8 3f fe ff ff       	call   c00134c4 <blockTask(TaskState)>
c0013685:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c001368a:	83 c4 10             	add    esp,0x10
c001368d:	48                   	dec    eax
c001368e:	eb 8c                	jmp    c001361c <Semaphore::acquire()+0x28>
c0013690:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c001369a:	e8 29 fc ff ff       	call   c00132c8 <schedule()>
c001369f:	eb 8f                	jmp    c0013630 <Semaphore::acquire()+0x3c>
c00136a1:	8d 76 00             	lea    esi,[esi+0x0]
c00136a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136a9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00136ac:	eb b6                	jmp    c0013664 <Semaphore::acquire()+0x70>
c00136ae:	66 90                	xchg   ax,ax

c00136b0 <taskReturned>:
c00136b0:	83 ec 18             	sub    esp,0x18
c00136b3:	68 64 e5 01 c0       	push   0xc001e564
c00136b8:	e8 fa c9 ff ff       	call   c00100b7 <KePanic(char const*)>
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	6a 02                	push   0x2
c00136c5:	e8 fa fd ff ff       	call   c00134c4 <blockTask(TaskState)>
c00136ca:	fa                   	cli    
c00136cb:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c00136d1:	e8 f2 fb ff ff       	call   c00132c8 <schedule()>
c00136d6:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00136db:	83 c4 10             	add    esp,0x10
c00136de:	48                   	dec    eax
c00136df:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00136e4:	85 c0                	test   eax,eax
c00136e6:	75 d8                	jne    c00136c0 <taskReturned+0x10>
c00136e8:	fb                   	sti    
c00136e9:	eb d5                	jmp    c00136c0 <taskReturned+0x10>
c00136eb:	90                   	nop

c00136ec <Thr::processFromPID(int)>:
c00136ec:	57                   	push   edi
c00136ed:	56                   	push   esi
c00136ee:	53                   	push   ebx
c00136ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136f3:	fa                   	cli    
c00136f4:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c00136fa:	83 ec 0c             	sub    esp,0xc
c00136fd:	68 e4 36 02 c0       	push   0xc00236e4
c0013702:	e8 a5 8a 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013707:	83 c4 10             	add    esp,0x10
c001370a:	89 c7                	mov    edi,eax
c001370c:	eb 16                	jmp    c0013724 <Thr::processFromPID(int)+0x38>
c001370e:	66 90                	xchg   ax,ax
c0013710:	83 ec 0c             	sub    esp,0xc
c0013713:	68 e4 36 02 c0       	push   0xc00236e4
c0013718:	e8 8f 8a 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	39 f8                	cmp    eax,edi
c0013722:	74 4c                	je     c0013770 <Thr::processFromPID(int)+0x84>
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	68 e4 36 02 c0       	push   0xc00236e4
c001372c:	e8 7b 8a 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013731:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c0013738:	89 c3                	mov    ebx,eax
c001373a:	e8 75 8a 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001373f:	58                   	pop    eax
c0013740:	5a                   	pop    edx
c0013741:	53                   	push   ebx
c0013742:	68 e4 36 02 c0       	push   0xc00236e4
c0013747:	e8 20 8b 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001374c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001374f:	83 c4 10             	add    esp,0x10
c0013752:	39 30                	cmp    DWORD PTR [eax],esi
c0013754:	75 ba                	jne    c0013710 <Thr::processFromPID(int)+0x24>
c0013756:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c001375b:	48                   	dec    eax
c001375c:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013761:	74 09                	je     c001376c <Thr::processFromPID(int)+0x80>
c0013763:	90                   	nop
c0013764:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013767:	5b                   	pop    ebx
c0013768:	5e                   	pop    esi
c0013769:	5f                   	pop    edi
c001376a:	c3                   	ret    
c001376b:	90                   	nop
c001376c:	fb                   	sti    
c001376d:	eb f5                	jmp    c0013764 <Thr::processFromPID(int)+0x78>
c001376f:	90                   	nop
c0013770:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013775:	48                   	dec    eax
c0013776:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c001377b:	75 07                	jne    c0013784 <Thr::processFromPID(int)+0x98>
c001377d:	fb                   	sti    
c001377e:	5b                   	pop    ebx
c001377f:	5e                   	pop    esi
c0013780:	5f                   	pop    edi
c0013781:	c3                   	ret    
c0013782:	66 90                	xchg   ax,ax
c0013784:	5b                   	pop    ebx
c0013785:	31 c0                	xor    eax,eax
c0013787:	5e                   	pop    esi
c0013788:	5f                   	pop    edi
c0013789:	c3                   	ret    
c001378a:	66 90                	xchg   ax,ax

c001378c <unblockTask(ThreadControlBlock*)>:
c001378c:	53                   	push   ebx
c001378d:	83 ec 08             	sub    esp,0x8
c0013790:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013794:	fa                   	cli    
c0013795:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c001379b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001379e:	85 c0                	test   eax,eax
c00137a0:	74 66                	je     c0013808 <unblockTask(ThreadControlBlock*)+0x7c>
c00137a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00137a5:	48                   	dec    eax
c00137a6:	74 38                	je     c00137e0 <unblockTask(ThreadControlBlock*)+0x54>
c00137a8:	83 ec 0c             	sub    esp,0xc
c00137ab:	68 e4 36 02 c0       	push   0xc00236e4
c00137b0:	e8 f7 89 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137b5:	83 c4 10             	add    esp,0x10
c00137b8:	85 c0                	test   eax,eax
c00137ba:	75 1c                	jne    c00137d8 <unblockTask(ThreadControlBlock*)+0x4c>
c00137bc:	eb 5e                	jmp    c001381c <unblockTask(ThreadControlBlock*)+0x90>
c00137be:	66 90                	xchg   ax,ax
c00137c0:	83 ec 08             	sub    esp,0x8
c00137c3:	50                   	push   eax
c00137c4:	68 e4 36 02 c0       	push   0xc00236e4
c00137c9:	e8 8e 8d 00 00       	call   c001c55c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00137ce:	83 c4 10             	add    esp,0x10
c00137d1:	85 c0                	test   eax,eax
c00137d3:	74 47                	je     c001381c <unblockTask(ThreadControlBlock*)+0x90>
c00137d5:	8d 76 00             	lea    esi,[esi+0x0]
c00137d8:	39 c3                	cmp    ebx,eax
c00137da:	75 e4                	jne    c00137c0 <unblockTask(ThreadControlBlock*)+0x34>
c00137dc:	eb 12                	jmp    c00137f0 <unblockTask(ThreadControlBlock*)+0x64>
c00137de:	66 90                	xchg   ax,ax
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	68 e6 e4 01 c0       	push   0xc001e4e6
c00137e8:	e8 67 6c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c00137f5:	48                   	dec    eax
c00137f6:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00137fb:	75 03                	jne    c0013800 <unblockTask(ThreadControlBlock*)+0x74>
c00137fd:	fb                   	sti    
c00137fe:	66 90                	xchg   ax,ax
c0013800:	83 c4 08             	add    esp,0x8
c0013803:	5b                   	pop    ebx
c0013804:	c3                   	ret    
c0013805:	8d 76 00             	lea    esi,[esi+0x0]
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	68 cf e4 01 c0       	push   0xc001e4cf
c0013810:	e8 3f 6c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	eb d6                	jmp    c00137f0 <unblockTask(ThreadControlBlock*)+0x64>
c001381a:	66 90                	xchg   ax,ax
c001381c:	83 ec 08             	sub    esp,0x8
c001381f:	53                   	push   ebx
c0013820:	68 e4 36 02 c0       	push   0xc00236e4
c0013825:	e8 42 8a 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	eb c1                	jmp    c00137f0 <unblockTask(ThreadControlBlock*)+0x64>
c001382f:	90                   	nop

c0013830 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013830:	55                   	push   ebp
c0013831:	57                   	push   edi
c0013832:	56                   	push   esi
c0013833:	53                   	push   ebx
c0013834:	83 ec 1c             	sub    esp,0x1c
c0013837:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001383b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001383e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013844:	85 ed                	test   ebp,ebp
c0013846:	7e 24                	jle    c001386c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013848:	31 f6                	xor    esi,esi
c001384a:	66 90                	xchg   ax,ax
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013856:	46                   	inc    esi
c0013857:	57                   	push   edi
c0013858:	e8 6c 3f ff ff       	call   c00077c9 <free>
c001385d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013869:	7f e1                	jg     c001384c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001386b:	90                   	nop
c001386c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013876:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001387b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001387e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013881:	d3 c0                	rol    eax,cl
c0013883:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001388a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001388d:	89 f7                	mov    edi,esi
c001388f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013897:	0f 85 77 01 00 00    	jne    c0013a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c001389d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00138a3:	85 ed                	test   ebp,ebp
c00138a5:	74 1d                	je     c00138c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00138a7:	83 ec 0c             	sub    esp,0xc
c00138aa:	55                   	push   ebp
c00138ab:	e8 18 c5 ff ff       	call   c000fdc8 <EnvVarContainer::~EnvVarContainer()>
c00138b0:	59                   	pop    ecx
c00138b1:	5e                   	pop    esi
c00138b2:	6a 0c                	push   0xc
c00138b4:	55                   	push   ebp
c00138b5:	e8 a4 6a ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c00138ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00138bd:	83 c4 10             	add    esp,0x10
c00138c0:	89 f7                	mov    edi,esi
c00138c2:	66 90                	xchg   ax,ax
c00138c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00138ca:	85 c0                	test   eax,eax
c00138cc:	0f 84 b6 00 00 00    	je     c0013988 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00138d2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00138d5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138d9:	31 c9                	xor    ecx,ecx
c00138db:	eb 17                	jmp    c00138f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00138dd:	8d 76 00             	lea    esi,[esi+0x0]
c00138e0:	41                   	inc    ecx
c00138e1:	83 f9 10             	cmp    ecx,0x10
c00138e4:	0f 84 9e 00 00 00    	je     c0013988 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00138ea:	66 90                	xchg   ax,ax
c00138ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00138f2:	66 90                	xchg   ax,ax
c00138f4:	31 d2                	xor    edx,edx
c00138f6:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00138fd:	d3 fa                	sar    edx,cl
c00138ff:	83 e2 01             	and    edx,0x1
c0013902:	74 dc                	je     c00138e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013904:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013907:	01 d2                	add    edx,edx
c0013909:	01 ca                	add    edx,ecx
c001390b:	8d 14 92             	lea    edx,[edx+edx*4]
c001390e:	01 d0                	add    eax,edx
c0013910:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013916:	83 fd 07             	cmp    ebp,0x7
c0013919:	75 c5                	jne    c00138e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001391b:	05 40 02 00 00       	add    eax,0x240
c0013920:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013923:	83 fd ff             	cmp    ebp,0xffffffff
c0013926:	0f 8c f0 00 00 00    	jl     c0013a1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001392c:	0f 84 ae 01 00 00    	je     c0013ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013932:	85 ed                	test   ebp,ebp
c0013934:	0f 84 92 01 00 00    	je     c0013acc <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c001393a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001393c:	75 a2                	jne    c00138e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001393e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013944:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013948:	01 d0                	add    eax,edx
c001394a:	66 90                	xchg   ax,ax
c001394c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013950:	83 ec 0c             	sub    esp,0xc
c0013953:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013959:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001395c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013962:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013969:	50                   	push   eax
c001396a:	e8 1d fe ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c001396f:	83 c4 10             	add    esp,0x10
c0013972:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013975:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013979:	89 f7                	mov    edi,esi
c001397b:	41                   	inc    ecx
c001397c:	83 f9 10             	cmp    ecx,0x10
c001397f:	0f 85 67 ff ff ff    	jne    c00138ec <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013985:	8d 76 00             	lea    esi,[esi+0x0]
c0013988:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001398e:	85 c0                	test   eax,eax
c0013990:	74 62                	je     c00139f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013992:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013998:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001399e:	74 54                	je     c00139f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	68 e4 36 02 c0       	push   0xc00236e4
c00139a8:	e8 ff 87 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00139ad:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c00139b4:	89 c7                	mov    edi,eax
c00139b6:	e8 d5 87 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00139bb:	83 c4 10             	add    esp,0x10
c00139be:	84 c0                	test   al,al
c00139c0:	0f 84 ce 00 00 00    	je     c0013a94 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00139c6:	66 90                	xchg   ax,ax
c00139c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139cb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00139d1:	85 d2                	test   edx,edx
c00139d3:	74 0f                	je     c00139e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c00139d5:	83 ec 0c             	sub    esp,0xc
c00139d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00139da:	52                   	push   edx
c00139db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139de:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00139e1:	83 c4 10             	add    esp,0x10
c00139e4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00139ee:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00139f1:	8d 76 00             	lea    esi,[esi+0x0]
c00139f4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00139fa:	85 db                	test   ebx,ebx
c00139fc:	74 16                	je     c0013a14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	53                   	push   ebx
c0013a02:	e8 2b 5d ff ff       	call   c0009732 <VAS::~VAS()>
c0013a07:	58                   	pop    eax
c0013a08:	5a                   	pop    edx
c0013a09:	6a 14                	push   0x14
c0013a0b:	53                   	push   ebx
c0013a0c:	e8 4d 69 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0013a11:	83 c4 10             	add    esp,0x10
c0013a14:	83 c4 1c             	add    esp,0x1c
c0013a17:	5b                   	pop    ebx
c0013a18:	5e                   	pop    esi
c0013a19:	5f                   	pop    edi
c0013a1a:	5d                   	pop    ebp
c0013a1b:	c3                   	ret    
c0013a1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a20:	83 ec 0c             	sub    esp,0xc
c0013a23:	68 98 e5 01 c0       	push   0xc001e598
c0013a28:	e8 8a c6 ff ff       	call   c00100b7 <KePanic(char const*)>
c0013a2d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a30:	83 c4 10             	add    esp,0x10
c0013a33:	89 f7                	mov    edi,esi
c0013a35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a39:	e9 a2 fe ff ff       	jmp    c00138e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a3e:	66 90                	xchg   ax,ax
c0013a40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013a46:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013a4c:	75 1e                	jne    c0013a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013a4e:	83 ec 0c             	sub    esp,0xc
c0013a51:	68 00 e6 01 c0       	push   0xc001e600
c0013a56:	e8 f9 69 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013a5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013a62:	e8 5d fa ff ff       	call   c00134c4 <blockTask(TaskState)>
c0013a67:	83 c4 10             	add    esp,0x10
c0013a6a:	66 90                	xchg   ax,ax
c0013a6c:	83 ec 08             	sub    esp,0x8
c0013a6f:	56                   	push   esi
c0013a70:	68 e4 36 02 c0       	push   0xc00236e4
c0013a75:	e8 f2 87 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a7a:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c0013a81:	e8 26 87 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	39 f8                	cmp    eax,edi
c0013a8b:	0f 84 37 ff ff ff    	je     c00139c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013a91:	8d 76 00             	lea    esi,[esi+0x0]
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	68 e4 36 02 c0       	push   0xc00236e4
c0013a9c:	e8 0b 87 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013aa1:	c7 04 24 e4 36 02 c0 	mov    DWORD PTR [esp],0xc00236e4
c0013aa8:	89 c6                	mov    esi,eax
c0013aaa:	e8 05 87 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013aaf:	83 c4 10             	add    esp,0x10
c0013ab2:	39 f3                	cmp    ebx,esi
c0013ab4:	74 b6                	je     c0013a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ab6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013ab9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013abc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013ac2:	75 a8                	jne    c0013a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ac4:	e9 77 ff ff ff       	jmp    c0013a40 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0013acc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	68 cc e5 01 c0       	push   0xc001e5cc
c0013ad8:	e9 4b ff ff ff       	jmp    c0013a28 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013add:	8d 76 00             	lea    esi,[esi+0x0]
c0013ae0:	8b 36                	mov    esi,DWORD PTR [esi]
c0013ae2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ae6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013ae9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013aec:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013af2:	01 d7                	add    edi,edx
c0013af4:	89 f8                	mov    eax,edi
c0013af6:	e9 51 fe ff ff       	jmp    c001394c <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013afb:	90                   	nop

c0013afc <cleanerTaskFunction(void*)>:
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 08             	sub    esp,0x8
c0013b00:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013b05:	48                   	dec    eax
c0013b06:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013b0b:	75 03                	jne    c0013b10 <cleanerTaskFunction(void*)+0x14>
c0013b0d:	fb                   	sti    
c0013b0e:	66 90                	xchg   ax,ax
c0013b10:	fa                   	cli    
c0013b11:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013b16:	80 3d ac 36 02 c0 00 	cmp    BYTE PTR ds:0xc00236ac,0x0
c0013b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0013b20:	89 15 c8 36 02 c0    	mov    DWORD PTR ds:0xc00236c8,edx
c0013b26:	0f 84 ac 00 00 00    	je     c0013bd8 <cleanerTaskFunction(void*)+0xdc>
c0013b2c:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013b31:	85 c0                	test   eax,eax
c0013b33:	75 03                	jne    c0013b38 <cleanerTaskFunction(void*)+0x3c>
c0013b35:	fb                   	sti    
c0013b36:	66 90                	xchg   ax,ax
c0013b38:	c6 05 ac 36 02 c0 00 	mov    BYTE PTR ds:0xc00236ac,0x0
c0013b3f:	fa                   	cli    
c0013b40:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013b46:	ff 05 c4 36 02 c0    	inc    DWORD PTR ds:0xc00236c4
c0013b4c:	fa                   	cli    
c0013b4d:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013b53:	eb 2b                	jmp    c0013b80 <cleanerTaskFunction(void*)+0x84>
c0013b55:	8d 76 00             	lea    esi,[esi+0x0]
c0013b58:	83 ec 0c             	sub    esp,0xc
c0013b5b:	68 cc 36 02 c0       	push   0xc00236cc
c0013b60:	e8 47 86 00 00       	call   c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b65:	c7 04 24 cc 36 02 c0 	mov    DWORD PTR [esp],0xc00236cc
c0013b6c:	89 c3                	mov    ebx,eax
c0013b6e:	e8 41 86 00 00       	call   c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b76:	e8 b5 fc ff ff       	call   c0013830 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013b7b:	83 c4 10             	add    esp,0x10
c0013b7e:	66 90                	xchg   ax,ax
c0013b80:	83 ec 0c             	sub    esp,0xc
c0013b83:	68 cc 36 02 c0       	push   0xc00236cc
c0013b88:	e8 03 86 00 00       	call   c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	84 c0                	test   al,al
c0013b92:	74 c4                	je     c0013b58 <cleanerTaskFunction(void*)+0x5c>
c0013b94:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013b99:	48                   	dec    eax
c0013b9a:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013b9f:	75 03                	jne    c0013ba4 <cleanerTaskFunction(void*)+0xa8>
c0013ba1:	fb                   	sti    
c0013ba2:	66 90                	xchg   ax,ax
c0013ba4:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013ba9:	48                   	dec    eax
c0013baa:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0013baf:	0f 85 4b ff ff ff    	jne    c0013b00 <cleanerTaskFunction(void*)+0x4>
c0013bb5:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0013bba:	85 c0                	test   eax,eax
c0013bbc:	0f 84 3e ff ff ff    	je     c0013b00 <cleanerTaskFunction(void*)+0x4>
c0013bc2:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c0013bcc:	e8 f7 f6 ff ff       	call   c00132c8 <schedule()>
c0013bd1:	e9 2a ff ff ff       	jmp    c0013b00 <cleanerTaskFunction(void*)+0x4>
c0013bd6:	66 90                	xchg   ax,ax
c0013bd8:	83 ec 0c             	sub    esp,0xc
c0013bdb:	6a 02                	push   0x2
c0013bdd:	e8 ba f8 ff ff       	call   c001349c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013be2:	83 c4 10             	add    esp,0x10
c0013be5:	e9 4e ff ff ff       	jmp    c0013b38 <cleanerTaskFunction(void*)+0x3c>
c0013bea:	66 90                	xchg   ax,ax

c0013bec <terminateTask(int)>:
c0013bec:	83 ec 14             	sub    esp,0x14
c0013bef:	fa                   	cli    
c0013bf0:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013bf6:	ff 05 c4 36 02 c0    	inc    DWORD PTR ds:0xc00236c4
c0013bfc:	fa                   	cli    
c0013bfd:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013c03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c0c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c14:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013c17:	50                   	push   eax
c0013c18:	68 cc 36 02 c0       	push   0xc00236cc
c0013c1d:	e8 4a 86 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013c31:	a1 a8 36 02 c0       	mov    eax,ds:0xc00236a8
c0013c36:	85 c0                	test   eax,eax
c0013c38:	74 5e                	je     c0013c98 <terminateTask(int)+0xac>
c0013c3a:	83 ec 0c             	sub    esp,0xc
c0013c3d:	c6 05 ac 36 02 c0 01 	mov    BYTE PTR ds:0xc00236ac,0x1
c0013c44:	50                   	push   eax
c0013c45:	e8 42 fb ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c50:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013c55:	48                   	dec    eax
c0013c56:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013c5b:	75 03                	jne    c0013c60 <terminateTask(int)+0x74>
c0013c5d:	fb                   	sti    
c0013c5e:	66 90                	xchg   ax,ax
c0013c60:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013c65:	48                   	dec    eax
c0013c66:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0013c6b:	75 0b                	jne    c0013c78 <terminateTask(int)+0x8c>
c0013c6d:	83 3d c0 36 02 c0 00 	cmp    DWORD PTR ds:0xc00236c0,0x0
c0013c74:	75 36                	jne    c0013cac <terminateTask(int)+0xc0>
c0013c76:	66 90                	xchg   ax,ax
c0013c78:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013c7d:	48                   	dec    eax
c0013c7e:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013c83:	75 03                	jne    c0013c88 <terminateTask(int)+0x9c>
c0013c85:	fb                   	sti    
c0013c86:	66 90                	xchg   ax,ax
c0013c88:	fa                   	cli    
c0013c89:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013c8f:	90                   	nop
c0013c90:	e8 33 f6 ff ff       	call   c00132c8 <schedule()>
c0013c95:	eb e1                	jmp    c0013c78 <terminateTask(int)+0x8c>
c0013c97:	90                   	nop
c0013c98:	83 ec 0c             	sub    esp,0xc
c0013c9b:	68 fd e4 01 c0       	push   0xc001e4fd
c0013ca0:	e8 af 67 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0013ca5:	83 c4 10             	add    esp,0x10
c0013ca8:	eb a6                	jmp    c0013c50 <terminateTask(int)+0x64>
c0013caa:	66 90                	xchg   ax,ax
c0013cac:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c0013cb6:	eb d8                	jmp    c0013c90 <terminateTask(int)+0xa4>

c0013cb8 <Thr::terminateFromIRQ(int)>:
c0013cb8:	83 ec 18             	sub    esp,0x18
c0013cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cbf:	50                   	push   eax
c0013cc0:	e8 27 ff ff ff       	call   c0013bec <terminateTask(int)>
c0013cc5:	90                   	nop
c0013cc6:	66 90                	xchg   ax,ax

c0013cc8 <Semaphore::release()>:
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ccf:	fa                   	cli    
c0013cd0:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013cd5:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013cdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0013cde:	89 0d c4 36 02 c0    	mov    DWORD PTR ds:0xc00236c4,ecx
c0013ce4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013ce7:	85 c9                	test   ecx,ecx
c0013ce9:	74 41                	je     c0013d2c <Semaphore::release()+0x64>
c0013ceb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013cee:	83 ec 0c             	sub    esp,0xc
c0013cf1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013cf4:	51                   	push   ecx
c0013cf5:	e8 92 fa ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c0013cfa:	a1 c4 36 02 c0       	mov    eax,ds:0xc00236c4
c0013cff:	83 c4 10             	add    esp,0x10
c0013d02:	48                   	dec    eax
c0013d03:	90                   	nop
c0013d04:	a3 c4 36 02 c0       	mov    ds:0xc00236c4,eax
c0013d09:	85 c0                	test   eax,eax
c0013d0b:	75 0b                	jne    c0013d18 <Semaphore::release()+0x50>
c0013d0d:	a1 c0 36 02 c0       	mov    eax,ds:0xc00236c0
c0013d12:	85 c0                	test   eax,eax
c0013d14:	75 1e                	jne    c0013d34 <Semaphore::release()+0x6c>
c0013d16:	66 90                	xchg   ax,ax
c0013d18:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013d1d:	48                   	dec    eax
c0013d1e:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013d23:	75 03                	jne    c0013d28 <Semaphore::release()+0x60>
c0013d25:	fb                   	sti    
c0013d26:	66 90                	xchg   ax,ax
c0013d28:	83 c4 0c             	add    esp,0xc
c0013d2b:	c3                   	ret    
c0013d2c:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013d2f:	eb d3                	jmp    c0013d04 <Semaphore::release()+0x3c>
c0013d31:	8d 76 00             	lea    esi,[esi+0x0]
c0013d34:	c7 05 c0 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00236c0,0x0
c0013d3e:	e8 85 f5 ff ff       	call   c00132c8 <schedule()>
c0013d43:	eb d3                	jmp    c0013d18 <Semaphore::release()+0x50>
c0013d45:	8d 76 00             	lea    esi,[esi+0x0]

c0013d48 <__static_initialization_and_destruction_0(int, int)>:
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013d50:	0f 85 8e 00 00 00    	jne    c0013de4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d56:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013d5e:	0f 85 80 00 00 00    	jne    c0013de4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	68 e4 36 02 c0       	push   0xc00236e4
c0013d6c:	e8 a7 87 00 00       	call   c001c518 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013d71:	83 c4 10             	add    esp,0x10
c0013d74:	83 ec 04             	sub    esp,0x4
c0013d77:	68 b0 f0 01 c0       	push   0xc001f0b0
c0013d7c:	68 e4 36 02 c0       	push   0xc00236e4
c0013d81:	68 c8 c4 01 c0       	push   0xc001c4c8
c0013d86:	e8 83 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	83 ec 0c             	sub    esp,0xc
c0013d91:	68 d8 36 02 c0       	push   0xc00236d8
c0013d96:	e8 7d 87 00 00       	call   c001c518 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	83 ec 04             	sub    esp,0x4
c0013da1:	68 b0 f0 01 c0       	push   0xc001f0b0
c0013da6:	68 d8 36 02 c0       	push   0xc00236d8
c0013dab:	68 c8 c4 01 c0       	push   0xc001c4c8
c0013db0:	e8 59 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	83 ec 0c             	sub    esp,0xc
c0013dbb:	68 cc 36 02 c0       	push   0xc00236cc
c0013dc0:	e8 53 87 00 00       	call   c001c518 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013dc5:	83 c4 10             	add    esp,0x10
c0013dc8:	83 ec 04             	sub    esp,0x4
c0013dcb:	68 b0 f0 01 c0       	push   0xc001f0b0
c0013dd0:	68 cc 36 02 c0       	push   0xc00236cc
c0013dd5:	68 c8 c4 01 c0       	push   0xc001c4c8
c0013dda:	e8 2f 65 ff ff       	call   c000a30e <__cxa_atexit>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	66 90                	xchg   ax,ax
c0013de4:	90                   	nop
c0013de5:	83 c4 0c             	add    esp,0xc
c0013de8:	c3                   	ret    
c0013de9:	8d 76 00             	lea    esi,[esi+0x0]

c0013dec <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013dec:	83 ec 0c             	sub    esp,0xc
c0013def:	83 ec 08             	sub    esp,0x8
c0013df2:	68 ff ff 00 00       	push   0xffff
c0013df7:	6a 01                	push   0x1
c0013df9:	e8 4a ff ff ff       	call   c0013d48 <__static_initialization_and_destruction_0(int, int)>
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	83 c4 0c             	add    esp,0xc
c0013e04:	c3                   	ret    

c0013e05 <Vm::inbv(unsigned short)>:
c0013e05:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e09:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e0e:	75 06                	jne    c0013e16 <Vm::inbv(unsigned short)+0x11>
c0013e10:	a0 2c 37 02 c0       	mov    al,ds:0xc002372c
c0013e15:	c3                   	ret    
c0013e16:	ec                   	in     al,dx
c0013e17:	c3                   	ret    

c0013e18 <Vm::outbv(unsigned short, unsigned char)>:
c0013e18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013e1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e20:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013e25:	75 25                	jne    c0013e4c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013e27:	8b 0d 2c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002372c
c0013e2d:	8d 51 01             	lea    edx,[ecx+0x1]
c0013e30:	88 81 40 37 02 c0    	mov    BYTE PTR [ecx-0x3ffdc8c0],al
c0013e36:	89 15 2c 37 02 c0    	mov    DWORD PTR ds:0xc002372c,edx
c0013e3c:	83 fa 20             	cmp    edx,0x20
c0013e3f:	75 0c                	jne    c0013e4d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013e41:	c7 05 2c 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x1f
c0013e4b:	c3                   	ret    
c0013e4c:	ee                   	out    dx,al
c0013e4d:	c3                   	ret    

c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>:
c0013e4e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013e53:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013e58:	c1 e0 04             	shl    eax,0x4
c0013e5b:	01 d0                	add    eax,edx
c0013e5d:	c3                   	ret    

c0013e5e <Vm::getSegment(unsigned int)>:
c0013e5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e62:	c1 e8 10             	shr    eax,0x10
c0013e65:	c3                   	ret    

c0013e66 <Vm::getOffset(unsigned int)>:
c0013e66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e6a:	c3                   	ret    

c0013e6b <Vm::mainloop2()>:
c0013e6b:	83 ec 18             	sub    esp,0x18
c0013e6e:	fa                   	cli    
c0013e6f:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013e75:	6a 02                	push   0x2
c0013e77:	c6 05 25 37 02 c0 01 	mov    BYTE PTR ds:0xc0023725,0x1
c0013e7e:	e8 19 f6 ff ff       	call   c001349c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013e83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e88:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013e8c:	52                   	push   edx
c0013e8d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013e91:	52                   	push   edx
c0013e92:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013e96:	52                   	push   edx
c0013e97:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013e9b:	50                   	push   eax
c0013e9c:	e8 6e c3 fe ff       	call   c000020f <goToVM86>
c0013ea1:	83 c4 2c             	add    esp,0x2c
c0013ea4:	c3                   	ret    

c0013ea5 <Vm::mainVm8086Loop(void*)>:
c0013ea5:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013eaa:	48                   	dec    eax
c0013eab:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013eb0:	75 01                	jne    c0013eb3 <Vm::mainVm8086Loop(void*)+0xe>
c0013eb2:	fb                   	sti    
c0013eb3:	eb b6                	jmp    c0013e6b <Vm::mainloop2()>

c0013eb5 <Vm::mainloop3(unsigned long)>:
c0013eb5:	83 ec 18             	sub    esp,0x18
c0013eb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ebc:	fa                   	cli    
c0013ebd:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013ec3:	6a 02                	push   0x2
c0013ec5:	c6 05 24 37 02 c0 01 	mov    BYTE PTR ds:0xc0023724,0x1
c0013ecc:	a3 20 37 02 c0       	mov    ds:0xc0023720,eax
c0013ed1:	e8 c6 f5 ff ff       	call   c001349c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013ed6:	83 c4 1c             	add    esp,0x1c
c0013ed9:	eb 90                	jmp    c0013e6b <Vm::mainloop2()>

c0013edb <Vm::initialise8086()>:
c0013edb:	83 ec 0c             	sub    esp,0xc
c0013ede:	68 80 00 00 00       	push   0x80
c0013ee3:	6a 00                	push   0x0
c0013ee5:	68 a5 3e 01 c0       	push   0xc0013ea5
c0013eea:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c0013ef0:	e8 b3 f1 ff ff       	call   c00130a8 <Process::createThread(void (*)(void*), void*, int)>
c0013ef5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013efc:	a3 28 37 02 c0       	mov    ds:0xc0023728,eax
c0013f01:	68 00 01 00 00       	push   0x100
c0013f06:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0013f0b:	6a 00                	push   0x0
c0013f0d:	6a 00                	push   0x0
c0013f0f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013f15:	e8 76 5c ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f1a:	83 c4 2c             	add    esp,0x2c
c0013f1d:	c3                   	ret    

c0013f1e <Vm::finish8086()>:
c0013f1e:	53                   	push   ebx
c0013f1f:	83 ec 08             	sub    esp,0x8
c0013f22:	fa                   	cli    
c0013f23:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013f29:	80 3d 24 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023724,0x0
c0013f30:	75 15                	jne    c0013f47 <Vm::finish8086()+0x29>
c0013f32:	e8 91 f3 ff ff       	call   c00132c8 <schedule()>
c0013f37:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013f3c:	48                   	dec    eax
c0013f3d:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013f42:	75 de                	jne    c0013f22 <Vm::finish8086()+0x4>
c0013f44:	fb                   	sti    
c0013f45:	eb db                	jmp    c0013f22 <Vm::finish8086()+0x4>
c0013f47:	83 ec 0c             	sub    esp,0xc
c0013f4a:	8b 1d 20 37 02 c0    	mov    ebx,DWORD PTR ds:0xc0023720
c0013f50:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c0013f56:	c6 05 24 37 02 c0 00 	mov    BYTE PTR ds:0xc0023724,0x0
c0013f5d:	e8 2a f8 ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c0013f62:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013f67:	83 c4 10             	add    esp,0x10
c0013f6a:	8d 50 ff             	lea    edx,[eax-0x1]
c0013f6d:	89 15 c8 36 02 c0    	mov    DWORD PTR ds:0xc00236c8,edx
c0013f73:	85 d2                	test   edx,edx
c0013f75:	75 01                	jne    c0013f78 <Vm::finish8086()+0x5a>
c0013f77:	fb                   	sti    
c0013f78:	89 d8                	mov    eax,ebx
c0013f7a:	83 c4 08             	add    esp,0x8
c0013f7d:	5b                   	pop    ebx
c0013f7e:	c3                   	ret    

c0013f7f <Vm::getOutput8086(unsigned char*)>:
c0013f7f:	57                   	push   edi
c0013f80:	8b 0d 2c 37 02 c0    	mov    ecx,DWORD PTR ds:0xc002372c
c0013f86:	56                   	push   esi
c0013f87:	be 40 37 02 c0       	mov    esi,0xc0023740
c0013f8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013f90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f92:	a1 2c 37 02 c0       	mov    eax,ds:0xc002372c
c0013f97:	5e                   	pop    esi
c0013f98:	c7 05 2c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x0
c0013fa2:	5f                   	pop    edi
c0013fa3:	c3                   	ret    

c0013fa4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0013fa4:	55                   	push   ebp
c0013fa5:	57                   	push   edi
c0013fa6:	56                   	push   esi
c0013fa7:	53                   	push   ebx
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013faf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013fb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013fb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013fbb:	fa                   	cli    
c0013fbc:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c0013fc2:	80 3d 25 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023725,0x0
c0013fc9:	75 15                	jne    c0013fe0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0013fcb:	e8 f8 f2 ff ff       	call   c00132c8 <schedule()>
c0013fd0:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0013fd5:	48                   	dec    eax
c0013fd6:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0013fdb:	75 de                	jne    c0013fbb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013fdd:	fb                   	sti    
c0013fde:	eb db                	jmp    c0013fbb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0013fe0:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c0013fe5:	c7 05 2c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x0
c0013fef:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0013ff3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0013ff7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0013ffb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0013fff:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014003:	0f b7 ff             	movzx  edi,di
c0014006:	0f b7 f6             	movzx  esi,si
c0014009:	50                   	push   eax
c001400a:	6a 20                	push   0x20
c001400c:	6a 00                	push   0x0
c001400e:	68 40 37 02 c0       	push   0xc0023740
c0014013:	e8 b8 c4 fe ff       	call   c00004d0 <memset>
c0014018:	5a                   	pop    edx
c0014019:	59                   	pop    ecx
c001401a:	57                   	push   edi
c001401b:	56                   	push   esi
c001401c:	e8 2d fe ff ff       	call   c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>
c0014021:	83 c4 10             	add    esp,0x10
c0014024:	89 c7                	mov    edi,eax
c0014026:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001402a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001402e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014030:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0014035:	c6 05 25 37 02 c0 00 	mov    BYTE PTR ds:0xc0023725,0x0
c001403c:	48                   	dec    eax
c001403d:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0014042:	75 01                	jne    c0014045 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014044:	fb                   	sti    
c0014045:	83 ec 0c             	sub    esp,0xc
c0014048:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c001404e:	e8 39 f7 ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c0014053:	83 c4 1c             	add    esp,0x1c
c0014056:	b0 01                	mov    al,0x1
c0014058:	5b                   	pop    ebx
c0014059:	5e                   	pop    esi
c001405a:	5f                   	pop    edi
c001405b:	5d                   	pop    ebp
c001405c:	c3                   	ret    

c001405d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001405d:	55                   	push   ebp
c001405e:	57                   	push   edi
c001405f:	56                   	push   esi
c0014060:	53                   	push   ebx
c0014061:	83 ec 2c             	sub    esp,0x2c
c0014064:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014068:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001406c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014070:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014074:	fa                   	cli    
c0014075:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c001407b:	0f b6 35 25 37 02 c0 	movzx  esi,BYTE PTR ds:0xc0023725
c0014082:	89 f0                	mov    eax,esi
c0014084:	84 c0                	test   al,al
c0014086:	75 1d                	jne    c00140a5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014088:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001408c:	e8 37 f2 ff ff       	call   c00132c8 <schedule()>
c0014091:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0014096:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001409a:	48                   	dec    eax
c001409b:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00140a0:	75 d2                	jne    c0014074 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140a2:	fb                   	sti    
c00140a3:	eb cf                	jmp    c0014074 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140a5:	a1 28 37 02 c0       	mov    eax,ds:0xc0023728
c00140aa:	c7 05 2c 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002372c,0x0
c00140b4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00140b8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140bc:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00140c0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00140c4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00140c8:	50                   	push   eax
c00140c9:	6a 20                	push   0x20
c00140cb:	6a 00                	push   0x0
c00140cd:	68 40 37 02 c0       	push   0xc0023740
c00140d2:	e8 f9 c3 fe ff       	call   c00004d0 <memset>
c00140d7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00140de:	e8 d6 36 ff ff       	call   c00077b9 <malloc>
c00140e3:	83 c4 0c             	add    esp,0xc
c00140e6:	89 c3                	mov    ebx,eax
c00140e8:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c00140ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00140f2:	50                   	push   eax
c00140f3:	e8 d2 68 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	85 db                	test   ebx,ebx
c00140fd:	75 0a                	jne    c0014109 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	68 28 e6 01 c0       	push   0xc001e628
c0014107:	eb 3e                	jmp    c0014147 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014109:	50                   	push   eax
c001410a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001410e:	50                   	push   eax
c001410f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014113:	50                   	push   eax
c0014114:	53                   	push   ebx
c0014115:	e8 1c 6c ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c001411a:	83 c4 10             	add    esp,0x10
c001411d:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014122:	74 0a                	je     c001412e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 3c e6 01 c0       	push   0xc001e63c
c001412c:	eb 19                	jmp    c0014147 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001412e:	51                   	push   ecx
c001412f:	51                   	push   ecx
c0014130:	6a 01                	push   0x1
c0014132:	53                   	push   ebx
c0014133:	e8 52 69 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0014138:	83 c4 10             	add    esp,0x10
c001413b:	85 c0                	test   eax,eax
c001413d:	74 24                	je     c0014163 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	68 55 e6 01 c0       	push   0xc001e655
c0014147:	e8 6b bf ff ff       	call   c00100b7 <KePanic(char const*)>
c001414c:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0014151:	83 c4 10             	add    esp,0x10
c0014154:	48                   	dec    eax
c0014155:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c001415a:	85 c0                	test   eax,eax
c001415c:	75 01                	jne    c001415f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001415e:	fb                   	sti    
c001415f:	31 f6                	xor    esi,esi
c0014161:	eb 58                	jmp    c00141bb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014163:	0f b7 ed             	movzx  ebp,bp
c0014166:	50                   	push   eax
c0014167:	0f b7 ff             	movzx  edi,di
c001416a:	50                   	push   eax
c001416b:	55                   	push   ebp
c001416c:	57                   	push   edi
c001416d:	e8 dc fc ff ff       	call   c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>
c0014172:	5a                   	pop    edx
c0014173:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014175:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014179:	51                   	push   ecx
c001417a:	50                   	push   eax
c001417b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001417f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014183:	53                   	push   ebx
c0014184:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014187:	83 c4 14             	add    esp,0x14
c001418a:	53                   	push   ebx
c001418b:	e8 58 69 ff ff       	call   c000aae8 <File::close()>
c0014190:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	48                   	dec    eax
c0014199:	c6 05 25 37 02 c0 00 	mov    BYTE PTR ds:0xc0023725,0x0
c00141a0:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c00141a5:	85 c0                	test   eax,eax
c00141a7:	75 01                	jne    c00141aa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00141a9:	fb                   	sti    
c00141aa:	83 ec 0c             	sub    esp,0xc
c00141ad:	ff 35 28 37 02 c0    	push   DWORD PTR ds:0xc0023728
c00141b3:	e8 d4 f5 ff ff       	call   c001378c <unblockTask(ThreadControlBlock*)>
c00141b8:	83 c4 10             	add    esp,0x10
c00141bb:	83 c4 2c             	add    esp,0x2c
c00141be:	89 f0                	mov    eax,esi
c00141c0:	5b                   	pop    ebx
c00141c1:	5e                   	pop    esi
c00141c2:	5f                   	pop    edi
c00141c3:	5d                   	pop    ebp
c00141c4:	c3                   	ret    

c00141c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00141c5:	57                   	push   edi
c00141c6:	56                   	push   esi
c00141c7:	53                   	push   ebx
c00141c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00141cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141d4:	83 e8 06             	sub    eax,0x6
c00141d7:	0f b7 c0             	movzx  eax,ax
c00141da:	50                   	push   eax
c00141db:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00141e0:	50                   	push   eax
c00141e1:	e8 68 fc ff ff       	call   c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>
c00141e6:	5a                   	pop    edx
c00141e7:	5e                   	pop    esi
c00141e8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00141eb:	8d 56 fa             	lea    edx,[esi-0x6]
c00141ee:	81 e2 ff ff 00 00    	and    edx,0xffff
c00141f4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00141f7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00141fa:	83 c2 02             	add    edx,0x2
c00141fd:	66 89 10             	mov    WORD PTR [eax],dx
c0014200:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014203:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0014207:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001420a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001420e:	89 d6                	mov    esi,edx
c0014210:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0014216:	66 81 e6 ff fd       	and    si,0xfdff
c001421b:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c001421f:	74 07                	je     c0014228 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014221:	89 d6                	mov    esi,edx
c0014223:	66 81 ce 00 02       	or     si,0x200
c0014228:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001422c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014231:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014235:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001423d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014240:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014248:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001424b:	5b                   	pop    ebx
c001424c:	5e                   	pop    esi
c001424d:	5f                   	pop    edi
c001424e:	c3                   	ret    

c001424f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001424f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014254:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014259:	c1 e0 04             	shl    eax,0x4
c001425c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001425f:	c3                   	ret    

c0014260 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014260:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014265:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001426a:	c1 e0 04             	shl    eax,0x4
c001426d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014271:	c3                   	ret    

c0014272 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014272:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014277:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001427c:	c1 e0 04             	shl    eax,0x4
c001427f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014282:	c3                   	ret    

c0014283 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014283:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014288:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001428d:	c1 e0 04             	shl    eax,0x4
c0014290:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014294:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014297:	c3                   	ret    

c0014298 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014298:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001429d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142a2:	c1 e0 04             	shl    eax,0x4
c00142a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142a9:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00142ad:	c3                   	ret    

c00142ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00142ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00142b8:	c1 e0 04             	shl    eax,0x4
c00142bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00142bf:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00142c2:	c3                   	ret    

c00142c3 <Vm::faultHandler(regs*)>:
c00142c3:	55                   	push   ebp
c00142c4:	57                   	push   edi
c00142c5:	56                   	push   esi
c00142c6:	53                   	push   ebx
c00142c7:	83 ec 1c             	sub    esp,0x1c
c00142ca:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00142ce:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00142d1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00142d5:	0f b7 f8             	movzx  edi,ax
c00142d8:	52                   	push   edx
c00142d9:	0f b7 c0             	movzx  eax,ax
c00142dc:	50                   	push   eax
c00142dd:	e8 6c fb ff ff       	call   c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>
c00142e2:	5a                   	pop    edx
c00142e3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00142e6:	59                   	pop    ecx
c00142e7:	89 c1                	mov    ecx,eax
c00142e9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00142ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142f0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00142f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142f9:	0f b7 c5             	movzx  eax,bp
c00142fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014300:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014308:	e8 41 fb ff ff       	call   c0013e4e <Vm::realToLinear(unsigned short, unsigned short)>
c001430d:	5e                   	pop    esi
c001430e:	be 06 00 00 00       	mov    esi,0x6
c0014313:	5a                   	pop    edx
c0014314:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0014319:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001431e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014321:	80 fa 9d             	cmp    dl,0x9d
c0014324:	0f 84 2c 02 00 00    	je     c0014556 <Vm::faultHandler(regs*)+0x293>
c001432a:	0f 87 91 00 00 00    	ja     c00143c1 <Vm::faultHandler(regs*)+0xfe>
c0014330:	80 fa 66             	cmp    dl,0x66
c0014333:	0f 84 98 01 00 00    	je     c00144d1 <Vm::faultHandler(regs*)+0x20e>
c0014339:	77 47                	ja     c0014382 <Vm::faultHandler(regs*)+0xbf>
c001433b:	80 fa 36             	cmp    dl,0x36
c001433e:	0f 84 80 01 00 00    	je     c00144c4 <Vm::faultHandler(regs*)+0x201>
c0014344:	77 1a                	ja     c0014360 <Vm::faultHandler(regs*)+0x9d>
c0014346:	80 fa 26             	cmp    dl,0x26
c0014349:	0f 84 4e 01 00 00    	je     c001449d <Vm::faultHandler(regs*)+0x1da>
c001434f:	80 fa 2e             	cmp    dl,0x2e
c0014352:	0f 85 e2 05 00 00    	jne    c001493a <Vm::faultHandler(regs*)+0x677>
c0014358:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001435b:	31 f6                	xor    esi,esi
c001435d:	41                   	inc    ecx
c001435e:	eb be                	jmp    c001431e <Vm::faultHandler(regs*)+0x5b>
c0014360:	80 fa 64             	cmp    dl,0x64
c0014363:	0f 84 41 01 00 00    	je     c00144aa <Vm::faultHandler(regs*)+0x1e7>
c0014369:	0f 87 48 01 00 00    	ja     c00144b7 <Vm::faultHandler(regs*)+0x1f4>
c001436f:	80 fa 3e             	cmp    dl,0x3e
c0014372:	0f 85 c2 05 00 00    	jne    c001493a <Vm::faultHandler(regs*)+0x677>
c0014378:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001437b:	be 01 00 00 00       	mov    esi,0x1
c0014380:	eb db                	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c0014382:	80 fa 6d             	cmp    dl,0x6d
c0014385:	0f 84 ec 02 00 00    	je     c0014677 <Vm::faultHandler(regs*)+0x3b4>
c001438b:	77 17                	ja     c00143a4 <Vm::faultHandler(regs*)+0xe1>
c001438d:	80 fa 67             	cmp    dl,0x67
c0014390:	0f 84 48 01 00 00    	je     c00144de <Vm::faultHandler(regs*)+0x21b>
c0014396:	80 fa 6c             	cmp    dl,0x6c
c0014399:	0f 84 69 02 00 00    	je     c0014608 <Vm::faultHandler(regs*)+0x345>
c001439f:	e9 96 05 00 00       	jmp    c001493a <Vm::faultHandler(regs*)+0x677>
c00143a4:	80 fa 6f             	cmp    dl,0x6f
c00143a7:	0f 84 f4 03 00 00    	je     c00147a1 <Vm::faultHandler(regs*)+0x4de>
c00143ad:	0f 82 59 03 00 00    	jb     c001470c <Vm::faultHandler(regs*)+0x449>
c00143b3:	80 fa 9c             	cmp    dl,0x9c
c00143b6:	0f 84 2f 01 00 00    	je     c00144eb <Vm::faultHandler(regs*)+0x228>
c00143bc:	e9 79 05 00 00       	jmp    c001493a <Vm::faultHandler(regs*)+0x677>
c00143c1:	80 fa ec             	cmp    dl,0xec
c00143c4:	0f 84 14 05 00 00    	je     c00148de <Vm::faultHandler(regs*)+0x61b>
c00143ca:	77 7b                	ja     c0014447 <Vm::faultHandler(regs*)+0x184>
c00143cc:	80 fa e4             	cmp    dl,0xe4
c00143cf:	0f 84 93 04 00 00    	je     c0014868 <Vm::faultHandler(regs*)+0x5a5>
c00143d5:	77 53                	ja     c001442a <Vm::faultHandler(regs*)+0x167>
c00143d7:	80 fa cd             	cmp    dl,0xcd
c00143da:	0f 84 d9 01 00 00    	je     c00145b9 <Vm::faultHandler(regs*)+0x2f6>
c00143e0:	80 fa cf             	cmp    dl,0xcf
c00143e3:	0f 85 51 05 00 00    	jne    c001493a <Vm::faultHandler(regs*)+0x677>
c00143e9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00143ec:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00143ef:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00143f3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00143f6:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00143fa:	81 ca 00 02 02 00    	or     edx,0x20200
c0014400:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014403:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014407:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001440d:	66 c1 e8 09          	shr    ax,0x9
c0014411:	83 e0 01             	and    eax,0x1
c0014414:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014417:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001441a:	83 c0 06             	add    eax,0x6
c001441d:	25 ff ff 00 00       	and    eax,0xffff
c0014422:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014425:	e9 0c 05 00 00       	jmp    c0014936 <Vm::faultHandler(regs*)+0x673>
c001442a:	80 fa e6             	cmp    dl,0xe6
c001442d:	0f 84 7f 04 00 00    	je     c00148b2 <Vm::faultHandler(regs*)+0x5ef>
c0014433:	0f 82 4b 04 00 00    	jb     c0014884 <Vm::faultHandler(regs*)+0x5c1>
c0014439:	80 fa e7             	cmp    dl,0xe7
c001443c:	0f 84 87 04 00 00    	je     c00148c9 <Vm::faultHandler(regs*)+0x606>
c0014442:	e9 f3 04 00 00       	jmp    c001493a <Vm::faultHandler(regs*)+0x677>
c0014447:	80 fa ef             	cmp    dl,0xef
c001444a:	0f 84 d1 04 00 00    	je     c0014921 <Vm::faultHandler(regs*)+0x65e>
c0014450:	77 28                	ja     c001447a <Vm::faultHandler(regs*)+0x1b7>
c0014452:	80 fa ed             	cmp    dl,0xed
c0014455:	0f 84 9f 04 00 00    	je     c00148fa <Vm::faultHandler(regs*)+0x637>
c001445b:	80 fa ee             	cmp    dl,0xee
c001445e:	0f 85 d6 04 00 00    	jne    c001493a <Vm::faultHandler(regs*)+0x677>
c0014464:	50                   	push   eax
c0014465:	50                   	push   eax
c0014466:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001446a:	50                   	push   eax
c001446b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001446f:	50                   	push   eax
c0014470:	e8 a3 f9 ff ff       	call   c0013e18 <Vm::outbv(unsigned short, unsigned char)>
c0014475:	e9 9f 04 00 00       	jmp    c0014919 <Vm::faultHandler(regs*)+0x656>
c001447a:	80 fa fa             	cmp    dl,0xfa
c001447d:	0f 84 69 01 00 00    	je     c00145ec <Vm::faultHandler(regs*)+0x329>
c0014483:	80 fa fb             	cmp    dl,0xfb
c0014486:	0f 84 6e 01 00 00    	je     c00145fa <Vm::faultHandler(regs*)+0x337>
c001448c:	80 fa f3             	cmp    dl,0xf3
c001448f:	0f 85 a5 04 00 00    	jne    c001493a <Vm::faultHandler(regs*)+0x677>
c0014495:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014498:	e9 c0 fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c001449d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144a0:	be 02 00 00 00       	mov    esi,0x2
c00144a5:	e9 b3 fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144aa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ad:	be 03 00 00 00       	mov    esi,0x3
c00144b2:	e9 a6 fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144b7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144ba:	be 04 00 00 00       	mov    esi,0x4
c00144bf:	e9 99 fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144c4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144c7:	be 05 00 00 00       	mov    esi,0x5
c00144cc:	e9 8c fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144d1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144d4:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00144d9:	e9 7f fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00144e1:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00144e6:	e9 72 fe ff ff       	jmp    c001435d <Vm::faultHandler(regs*)+0x9a>
c00144eb:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00144ee:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00144f2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00144f7:	74 30                	je     c0014529 <Vm::faultHandler(regs*)+0x266>
c00144f9:	83 e9 04             	sub    ecx,0x4
c00144fc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014502:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014508:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001450b:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001450e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014514:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014518:	0f 84 15 04 00 00    	je     c0014933 <Vm::faultHandler(regs*)+0x670>
c001451e:	80 ce 02             	or     dh,0x2
c0014521:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014524:	e9 0a 04 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014529:	83 e9 02             	sub    ecx,0x2
c001452c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014532:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014535:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014539:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001453f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014543:	74 05                	je     c001454a <Vm::faultHandler(regs*)+0x287>
c0014545:	80 ce 02             	or     dh,0x2
c0014548:	eb 03                	jmp    c001454d <Vm::faultHandler(regs*)+0x28a>
c001454a:	80 e6 fd             	and    dh,0xfd
c001454d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014551:	e9 dd 03 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014556:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001455b:	74 2a                	je     c0014587 <Vm::faultHandler(regs*)+0x2c4>
c001455d:	8b 10                	mov    edx,DWORD PTR [eax]
c001455f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014565:	81 ca 00 02 02 00    	or     edx,0x20200
c001456b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001456e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014570:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014576:	c1 e8 09             	shr    eax,0x9
c0014579:	83 e0 01             	and    eax,0x1
c001457c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001457f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014582:	83 c0 04             	add    eax,0x4
c0014585:	eb 25                	jmp    c00145ac <Vm::faultHandler(regs*)+0x2e9>
c0014587:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001458a:	81 ca 00 02 02 00    	or     edx,0x20200
c0014590:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014593:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014596:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001459c:	66 c1 e8 09          	shr    ax,0x9
c00145a0:	83 e0 01             	and    eax,0x1
c00145a3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00145a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145a9:	83 c0 02             	add    eax,0x2
c00145ac:	25 ff ff 00 00       	and    eax,0xffff
c00145b1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00145b4:	e9 7a 03 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c00145b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00145bd:	3c ee                	cmp    al,0xee
c00145bf:	75 10                	jne    c00145d1 <Vm::faultHandler(regs*)+0x30e>
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00145c7:	e8 e9 f8 ff ff       	call   c0013eb5 <Vm::mainloop3(unsigned long)>
c00145cc:	e9 4b 03 00 00       	jmp    c001491c <Vm::faultHandler(regs*)+0x659>
c00145d1:	83 ec 0c             	sub    esp,0xc
c00145d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00145d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145dc:	51                   	push   ecx
c00145dd:	50                   	push   eax
c00145de:	53                   	push   ebx
c00145df:	e8 e1 fb ff ff       	call   c00141c5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00145e4:	83 c4 20             	add    esp,0x20
c00145e7:	e9 4a 03 00 00       	jmp    c0014936 <Vm::faultHandler(regs*)+0x673>
c00145ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145f1:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00145f5:	e9 39 03 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c00145fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145ff:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014603:	e9 2b 03 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014608:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001460b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014610:	74 2b                	je     c001463d <Vm::faultHandler(regs*)+0x37a>
c0014612:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014619:	76 22                	jbe    c001463d <Vm::faultHandler(regs*)+0x37a>
c001461b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001461f:	50                   	push   eax
c0014620:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014624:	50                   	push   eax
c0014625:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014629:	50                   	push   eax
c001462a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001462e:	50                   	push   eax
c001462f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014633:	50                   	push   eax
c0014634:	6a 6c                	push   0x6c
c0014636:	6a 6c                	push   0x6c
c0014638:	e9 b9 01 00 00       	jmp    c00147f6 <Vm::faultHandler(regs*)+0x533>
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014644:	0f b7 f6             	movzx  esi,si
c0014647:	50                   	push   eax
c0014648:	e8 b8 f7 ff ff       	call   c0013e05 <Vm::inbv(unsigned short)>
c001464d:	83 c4 0c             	add    esp,0xc
c0014650:	0f b6 c0             	movzx  eax,al
c0014653:	50                   	push   eax
c0014654:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014658:	50                   	push   eax
c0014659:	56                   	push   esi
c001465a:	e8 24 fc ff ff       	call   c0014283 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001465f:	83 c4 10             	add    esp,0x10
c0014662:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014665:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014669:	74 03                	je     c001466e <Vm::faultHandler(regs*)+0x3ab>
c001466b:	48                   	dec    eax
c001466c:	eb 01                	jmp    c001466f <Vm::faultHandler(regs*)+0x3ac>
c001466e:	40                   	inc    eax
c001466f:	0f b7 c0             	movzx  eax,ax
c0014672:	e9 8d 00 00 00       	jmp    c0014704 <Vm::faultHandler(regs*)+0x441>
c0014677:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001467a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001467d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014682:	74 29                	je     c00146ad <Vm::faultHandler(regs*)+0x3ea>
c0014684:	3d ff ff 00 00       	cmp    eax,0xffff
c0014689:	76 22                	jbe    c00146ad <Vm::faultHandler(regs*)+0x3ea>
c001468b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001468f:	50                   	push   eax
c0014690:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014694:	50                   	push   eax
c0014695:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014699:	50                   	push   eax
c001469a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001469e:	50                   	push   eax
c001469f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146a3:	50                   	push   eax
c00146a4:	6a 6d                	push   0x6d
c00146a6:	6a 6d                	push   0x6d
c00146a8:	e9 49 01 00 00       	jmp    c00147f6 <Vm::faultHandler(regs*)+0x533>
c00146ad:	0f b7 c8             	movzx  ecx,ax
c00146b0:	0f b7 f6             	movzx  esi,si
c00146b3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00146b6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00146bb:	74 20                	je     c00146dd <Vm::faultHandler(regs*)+0x41a>
c00146bd:	ed                   	in     eax,dx
c00146be:	55                   	push   ebp
c00146bf:	50                   	push   eax
c00146c0:	51                   	push   ecx
c00146c1:	56                   	push   esi
c00146c2:	e8 e7 fb ff ff       	call   c00142ae <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00146c7:	83 c4 10             	add    esp,0x10
c00146ca:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146d1:	74 05                	je     c00146d8 <Vm::faultHandler(regs*)+0x415>
c00146d3:	83 e8 04             	sub    eax,0x4
c00146d6:	eb 27                	jmp    c00146ff <Vm::faultHandler(regs*)+0x43c>
c00146d8:	83 c0 04             	add    eax,0x4
c00146db:	eb 22                	jmp    c00146ff <Vm::faultHandler(regs*)+0x43c>
c00146dd:	66 ed                	in     ax,dx
c00146df:	0f b7 c0             	movzx  eax,ax
c00146e2:	57                   	push   edi
c00146e3:	50                   	push   eax
c00146e4:	51                   	push   ecx
c00146e5:	56                   	push   esi
c00146e6:	e8 ad fb ff ff       	call   c0014298 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00146f1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00146f5:	74 05                	je     c00146fc <Vm::faultHandler(regs*)+0x439>
c00146f7:	83 e8 02             	sub    eax,0x2
c00146fa:	eb 03                	jmp    c00146ff <Vm::faultHandler(regs*)+0x43c>
c00146fc:	83 c0 02             	add    eax,0x2
c00146ff:	25 ff ff 00 00       	and    eax,0xffff
c0014704:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014707:	e9 27 02 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c001470c:	8d 46 ff             	lea    eax,[esi-0x1]
c001470f:	3c 05                	cmp    al,0x5
c0014711:	77 24                	ja     c0014737 <Vm::faultHandler(regs*)+0x474>
c0014713:	0f b6 c0             	movzx  eax,al
c0014716:	ff 24 85 c8 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1938]
c001471d:	0f b7 fd             	movzx  edi,bp
c0014720:	eb 15                	jmp    c0014737 <Vm::faultHandler(regs*)+0x474>
c0014722:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014726:	eb 0f                	jmp    c0014737 <Vm::faultHandler(regs*)+0x474>
c0014728:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001472c:	eb 09                	jmp    c0014737 <Vm::faultHandler(regs*)+0x474>
c001472e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014732:	eb 03                	jmp    c0014737 <Vm::faultHandler(regs*)+0x474>
c0014734:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014737:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001473a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001473f:	74 29                	je     c001476a <Vm::faultHandler(regs*)+0x4a7>
c0014741:	3d ff ff 00 00       	cmp    eax,0xffff
c0014746:	76 22                	jbe    c001476a <Vm::faultHandler(regs*)+0x4a7>
c0014748:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001474c:	50                   	push   eax
c001474d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014751:	50                   	push   eax
c0014752:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014756:	50                   	push   eax
c0014757:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001475b:	50                   	push   eax
c001475c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014760:	50                   	push   eax
c0014761:	6a 6e                	push   0x6e
c0014763:	6a 6e                	push   0x6e
c0014765:	e9 8c 00 00 00       	jmp    c00147f6 <Vm::faultHandler(regs*)+0x533>
c001476a:	0f b7 c0             	movzx  eax,ax
c001476d:	52                   	push   edx
c001476e:	52                   	push   edx
c001476f:	50                   	push   eax
c0014770:	57                   	push   edi
c0014771:	e8 d9 fa ff ff       	call   c001424f <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014776:	59                   	pop    ecx
c0014777:	0f b6 c0             	movzx  eax,al
c001477a:	5e                   	pop    esi
c001477b:	50                   	push   eax
c001477c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014780:	50                   	push   eax
c0014781:	e8 92 f6 ff ff       	call   c0013e18 <Vm::outbv(unsigned short, unsigned char)>
c0014786:	83 c4 10             	add    esp,0x10
c0014789:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001478c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014790:	74 03                	je     c0014795 <Vm::faultHandler(regs*)+0x4d2>
c0014792:	48                   	dec    eax
c0014793:	eb 01                	jmp    c0014796 <Vm::faultHandler(regs*)+0x4d3>
c0014795:	40                   	inc    eax
c0014796:	0f b7 c0             	movzx  eax,ax
c0014799:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001479c:	e9 92 01 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c00147a1:	8d 46 ff             	lea    eax,[esi-0x1]
c00147a4:	3c 05                	cmp    al,0x5
c00147a6:	77 1f                	ja     c00147c7 <Vm::faultHandler(regs*)+0x504>
c00147a8:	0f b6 c0             	movzx  eax,al
c00147ab:	ff 24 85 e0 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1920]
c00147b2:	89 ef                	mov    edi,ebp
c00147b4:	eb 11                	jmp    c00147c7 <Vm::faultHandler(regs*)+0x504>
c00147b6:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00147b9:	eb 0c                	jmp    c00147c7 <Vm::faultHandler(regs*)+0x504>
c00147bb:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00147be:	eb 07                	jmp    c00147c7 <Vm::faultHandler(regs*)+0x504>
c00147c0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00147c3:	eb 02                	jmp    c00147c7 <Vm::faultHandler(regs*)+0x504>
c00147c5:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00147c7:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00147ca:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00147cf:	74 37                	je     c0014808 <Vm::faultHandler(regs*)+0x545>
c00147d1:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00147d7:	76 2f                	jbe    c0014808 <Vm::faultHandler(regs*)+0x545>
c00147d9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00147dd:	50                   	push   eax
c00147de:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00147e2:	50                   	push   eax
c00147e3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00147e7:	50                   	push   eax
c00147e8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00147ec:	50                   	push   eax
c00147ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00147f1:	50                   	push   eax
c00147f2:	6a 6f                	push   0x6f
c00147f4:	6a 6f                	push   0x6f
c00147f6:	68 6e e6 01 c0       	push   0xc001e66e
c00147fb:	e8 54 5c ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014800:	83 c4 20             	add    esp,0x20
c0014803:	e9 86 01 00 00       	jmp    c001498e <Vm::faultHandler(regs*)+0x6cb>
c0014808:	0f b7 d7             	movzx  edx,di
c001480b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001480e:	0f b7 c6             	movzx  eax,si
c0014811:	81 e1 00 04 00 00    	and    ecx,0x400
c0014817:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001481a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001481f:	74 1d                	je     c001483e <Vm::faultHandler(regs*)+0x57b>
c0014821:	55                   	push   ebp
c0014822:	55                   	push   ebp
c0014823:	50                   	push   eax
c0014824:	52                   	push   edx
c0014825:	e8 48 fa ff ff       	call   c0014272 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001482a:	83 c4 10             	add    esp,0x10
c001482d:	89 fa                	mov    edx,edi
c001482f:	ef                   	out    dx,eax
c0014830:	85 c9                	test   ecx,ecx
c0014832:	74 05                	je     c0014839 <Vm::faultHandler(regs*)+0x576>
c0014834:	83 ee 04             	sub    esi,0x4
c0014837:	eb 21                	jmp    c001485a <Vm::faultHandler(regs*)+0x597>
c0014839:	83 c6 04             	add    esi,0x4
c001483c:	eb 1c                	jmp    c001485a <Vm::faultHandler(regs*)+0x597>
c001483e:	55                   	push   ebp
c001483f:	55                   	push   ebp
c0014840:	50                   	push   eax
c0014841:	52                   	push   edx
c0014842:	e8 19 fa ff ff       	call   c0014260 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	89 fa                	mov    edx,edi
c001484c:	66 ef                	out    dx,ax
c001484e:	85 c9                	test   ecx,ecx
c0014850:	74 05                	je     c0014857 <Vm::faultHandler(regs*)+0x594>
c0014852:	83 ee 02             	sub    esi,0x2
c0014855:	eb 03                	jmp    c001485a <Vm::faultHandler(regs*)+0x597>
c0014857:	83 c6 02             	add    esi,0x2
c001485a:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014860:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014863:	e9 cb 00 00 00       	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014868:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001486f:	83 ec 0c             	sub    esp,0xc
c0014872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014876:	50                   	push   eax
c0014877:	e8 89 f5 ff ff       	call   c0013e05 <Vm::inbv(unsigned short)>
c001487c:	0f b6 c0             	movzx  eax,al
c001487f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014882:	eb 3f                	jmp    c00148c3 <Vm::faultHandler(regs*)+0x600>
c0014884:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014889:	74 07                	je     c0014892 <Vm::faultHandler(regs*)+0x5cf>
c001488b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001488f:	ed                   	in     eax,dx
c0014890:	eb 14                	jmp    c00148a6 <Vm::faultHandler(regs*)+0x5e3>
c0014892:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014895:	66 31 f6             	xor    si,si
c0014898:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001489b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001489f:	66 ed                	in     ax,dx
c00148a1:	0f b7 c0             	movzx  eax,ax
c00148a4:	09 f0                	or     eax,esi
c00148a6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00148a9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148ad:	e9 84 00 00 00       	jmp    c0014936 <Vm::faultHandler(regs*)+0x673>
c00148b2:	52                   	push   edx
c00148b3:	52                   	push   edx
c00148b4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00148b8:	50                   	push   eax
c00148b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148bd:	50                   	push   eax
c00148be:	e8 55 f5 ff ff       	call   c0013e18 <Vm::outbv(unsigned short, unsigned char)>
c00148c3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00148c7:	eb 53                	jmp    c001491c <Vm::faultHandler(regs*)+0x659>
c00148c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00148cc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00148d0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148d5:	74 03                	je     c00148da <Vm::faultHandler(regs*)+0x617>
c00148d7:	ef                   	out    dx,eax
c00148d8:	eb cf                	jmp    c00148a9 <Vm::faultHandler(regs*)+0x5e6>
c00148da:	66 ef                	out    dx,ax
c00148dc:	eb cb                	jmp    c00148a9 <Vm::faultHandler(regs*)+0x5e6>
c00148de:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00148e5:	83 ec 0c             	sub    esp,0xc
c00148e8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00148ec:	50                   	push   eax
c00148ed:	e8 13 f5 ff ff       	call   c0013e05 <Vm::inbv(unsigned short)>
c00148f2:	0f b6 c0             	movzx  eax,al
c00148f5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00148f8:	eb 1f                	jmp    c0014919 <Vm::faultHandler(regs*)+0x656>
c00148fa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00148fd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014902:	74 03                	je     c0014907 <Vm::faultHandler(regs*)+0x644>
c0014904:	ed                   	in     eax,dx
c0014905:	eb 0d                	jmp    c0014914 <Vm::faultHandler(regs*)+0x651>
c0014907:	66 ed                	in     ax,dx
c0014909:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001490c:	0f b7 c0             	movzx  eax,ax
c001490f:	66 31 d2             	xor    dx,dx
c0014912:	09 d0                	or     eax,edx
c0014914:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014917:	eb 1a                	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014919:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001491c:	83 c4 10             	add    esp,0x10
c001491f:	eb 15                	jmp    c0014936 <Vm::faultHandler(regs*)+0x673>
c0014921:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014924:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014927:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001492c:	74 03                	je     c0014931 <Vm::faultHandler(regs*)+0x66e>
c001492e:	ef                   	out    dx,eax
c001492f:	eb 02                	jmp    c0014933 <Vm::faultHandler(regs*)+0x670>
c0014931:	66 ef                	out    dx,ax
c0014933:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014936:	b0 01                	mov    al,0x1
c0014938:	eb 56                	jmp    c0014990 <Vm::faultHandler(regs*)+0x6cd>
c001493a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001493e:	50                   	push   eax
c001493f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014943:	50                   	push   eax
c0014944:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014948:	50                   	push   eax
c0014949:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001494d:	50                   	push   eax
c001494e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014952:	50                   	push   eax
c0014953:	52                   	push   edx
c0014954:	52                   	push   edx
c0014955:	68 9b e6 01 c0       	push   0xc001e69b
c001495a:	e8 f5 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001495f:	83 c4 20             	add    esp,0x20
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	6a 60                	push   0x60
c0014967:	e8 99 f4 ff ff       	call   c0013e05 <Vm::inbv(unsigned short)>
c001496c:	83 c4 10             	add    esp,0x10
c001496f:	3c 1c                	cmp    al,0x1c
c0014971:	74 04                	je     c0014977 <Vm::faultHandler(regs*)+0x6b4>
c0014973:	3c 5a                	cmp    al,0x5a
c0014975:	75 eb                	jne    c0014962 <Vm::faultHandler(regs*)+0x69f>
c0014977:	3c 5a                	cmp    al,0x5a
c0014979:	74 04                	je     c001497f <Vm::faultHandler(regs*)+0x6bc>
c001497b:	3c 1c                	cmp    al,0x1c
c001497d:	75 0f                	jne    c001498e <Vm::faultHandler(regs*)+0x6cb>
c001497f:	83 ec 0c             	sub    esp,0xc
c0014982:	6a 60                	push   0x60
c0014984:	e8 7c f4 ff ff       	call   c0013e05 <Vm::inbv(unsigned short)>
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	eb e9                	jmp    c0014977 <Vm::faultHandler(regs*)+0x6b4>
c001498e:	31 c0                	xor    eax,eax
c0014990:	83 c4 1c             	add    esp,0x1c
c0014993:	5b                   	pop    ebx
c0014994:	5e                   	pop    esi
c0014995:	5f                   	pop    edi
c0014996:	5d                   	pop    ebp
c0014997:	c3                   	ret    

c0014998 <noCopro(unsigned long)>:
c0014998:	c3                   	ret    

c0014999 <nmiHandler(regs*, void*)>:
c0014999:	83 ec 0c             	sub    esp,0xc
c001499c:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00149a1:	83 ec 0c             	sub    esp,0xc
c00149a4:	50                   	push   eax
c00149a5:	e8 30 26 ff ff       	call   c0006fda <Computer::handleNMI()>
c00149aa:	83 c4 10             	add    esp,0x10
c00149ad:	90                   	nop
c00149ae:	83 c4 0c             	add    esp,0xc
c00149b1:	c3                   	ret    

c00149b2 <doubleFault(regs*, void*)>:
c00149b2:	55                   	push   ebp
c00149b3:	89 e5                	mov    ebp,esp
c00149b5:	83 ec 08             	sub    esp,0x8
c00149b8:	83 ec 0c             	sub    esp,0xc
c00149bb:	68 f8 e6 01 c0       	push   0xc001e6f8
c00149c0:	e8 f2 b6 ff ff       	call   c00100b7 <KePanic(char const*)>
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	90                   	nop
c00149c9:	c9                   	leave  
c00149ca:	c3                   	ret    

c00149cb <displayDebugInfo(regs*)>:
c00149cb:	83 ec 1c             	sub    esp,0x1c
c00149ce:	0f 20 c0             	mov    eax,cr0
c00149d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149d5:	0f 20 d0             	mov    eax,cr2
c00149d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00149dc:	0f 20 d8             	mov    eax,cr3
c00149df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149e3:	0f 20 e0             	mov    eax,cr4
c00149e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00149e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149ed:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00149f0:	83 ec 08             	sub    esp,0x8
c00149f3:	50                   	push   eax
c00149f4:	68 14 e7 01 c0       	push   0xc001e714
c00149f9:	e8 56 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00149fe:	83 c4 10             	add    esp,0x10
c0014a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a05:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014a08:	83 ec 08             	sub    esp,0x8
c0014a0b:	50                   	push   eax
c0014a0c:	68 05 e7 01 c0       	push   0xc001e705
c0014a11:	e8 3e 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a16:	83 c4 10             	add    esp,0x10
c0014a19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a1d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014a20:	83 ec 08             	sub    esp,0x8
c0014a23:	50                   	push   eax
c0014a24:	68 10 e7 01 c0       	push   0xc001e710
c0014a29:	e8 26 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a38:	83 ec 08             	sub    esp,0x8
c0014a3b:	50                   	push   eax
c0014a3c:	68 1f e7 01 c0       	push   0xc001e71f
c0014a41:	e8 0e 5a ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014a50:	83 ec 08             	sub    esp,0x8
c0014a53:	50                   	push   eax
c0014a54:	68 2a e7 01 c0       	push   0xc001e72a
c0014a59:	e8 f6 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a5e:	83 c4 10             	add    esp,0x10
c0014a61:	83 ec 08             	sub    esp,0x8
c0014a64:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014a68:	68 35 e7 01 c0       	push   0xc001e735
c0014a6d:	e8 e2 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a72:	83 c4 10             	add    esp,0x10
c0014a75:	83 ec 08             	sub    esp,0x8
c0014a78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014a7c:	68 40 e7 01 c0       	push   0xc001e740
c0014a81:	e8 ce 59 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014a86:	83 c4 10             	add    esp,0x10
c0014a89:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014a8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014a94:	83 ec 0c             	sub    esp,0xc
c0014a97:	50                   	push   eax
c0014a98:	e8 5a 39 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014a9d:	83 c4 10             	add    esp,0x10
c0014aa0:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014aa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014aab:	83 ec 08             	sub    esp,0x8
c0014aae:	68 4b e7 01 c0       	push   0xc001e74b
c0014ab3:	50                   	push   eax
c0014ab4:	e8 7d 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ab9:	83 c4 10             	add    esp,0x10
c0014abc:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014ac1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ac7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014acc:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ace:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ad1:	83 c2 0c             	add    edx,0xc
c0014ad4:	83 ec 08             	sub    esp,0x8
c0014ad7:	52                   	push   edx
c0014ad8:	50                   	push   eax
c0014ad9:	e8 58 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ade:	83 c4 10             	add    esp,0x10
c0014ae1:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014ae6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014aec:	83 ec 08             	sub    esp,0x8
c0014aef:	68 54 e7 01 c0       	push   0xc001e754
c0014af4:	50                   	push   eax
c0014af5:	e8 3c 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b02:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b0c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014b0f:	83 ec 08             	sub    esp,0x8
c0014b12:	52                   	push   edx
c0014b13:	50                   	push   eax
c0014b14:	e8 d7 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b19:	83 c4 10             	add    esp,0x10
c0014b1c:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b27:	83 ec 08             	sub    esp,0x8
c0014b2a:	68 5c e7 01 c0       	push   0xc001e75c
c0014b2f:	50                   	push   eax
c0014b30:	e8 01 3c ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b35:	83 c4 10             	add    esp,0x10
c0014b38:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b3d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b47:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014b4a:	83 ec 08             	sub    esp,0x8
c0014b4d:	52                   	push   edx
c0014b4e:	50                   	push   eax
c0014b4f:	e8 9c 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b54:	83 c4 10             	add    esp,0x10
c0014b57:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b62:	83 ec 08             	sub    esp,0x8
c0014b65:	68 64 e7 01 c0       	push   0xc001e764
c0014b6a:	50                   	push   eax
c0014b6b:	e8 c6 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b70:	83 c4 10             	add    esp,0x10
c0014b73:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b78:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b82:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014b85:	83 ec 08             	sub    esp,0x8
c0014b88:	52                   	push   edx
c0014b89:	50                   	push   eax
c0014b8a:	e8 61 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014b97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b9d:	83 ec 08             	sub    esp,0x8
c0014ba0:	68 6c e7 01 c0       	push   0xc001e76c
c0014ba5:	50                   	push   eax
c0014ba6:	e8 8b 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bab:	83 c4 10             	add    esp,0x10
c0014bae:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014bb3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bb9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bbd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014bc0:	83 ec 08             	sub    esp,0x8
c0014bc3:	52                   	push   edx
c0014bc4:	50                   	push   eax
c0014bc5:	e8 26 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bca:	83 c4 10             	add    esp,0x10
c0014bcd:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014bd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bd8:	83 ec 08             	sub    esp,0x8
c0014bdb:	68 74 e7 01 c0       	push   0xc001e774
c0014be0:	50                   	push   eax
c0014be1:	e8 50 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014bee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bf4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bf8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014bfb:	83 ec 08             	sub    esp,0x8
c0014bfe:	52                   	push   edx
c0014bff:	50                   	push   eax
c0014c00:	e8 eb 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c13:	83 ec 08             	sub    esp,0x8
c0014c16:	68 7c e7 01 c0       	push   0xc001e77c
c0014c1b:	50                   	push   eax
c0014c1c:	e8 15 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c33:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014c36:	83 ec 08             	sub    esp,0x8
c0014c39:	52                   	push   edx
c0014c3a:	50                   	push   eax
c0014c3b:	e8 b0 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c4e:	83 ec 08             	sub    esp,0x8
c0014c51:	68 84 e7 01 c0       	push   0xc001e784
c0014c56:	50                   	push   eax
c0014c57:	e8 da 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c5c:	83 c4 10             	add    esp,0x10
c0014c5f:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c64:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c6a:	83 ec 08             	sub    esp,0x8
c0014c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c71:	50                   	push   eax
c0014c72:	e8 79 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c85:	83 ec 08             	sub    esp,0x8
c0014c88:	68 8d e7 01 c0       	push   0xc001e78d
c0014c8d:	50                   	push   eax
c0014c8e:	e8 a3 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c93:	83 c4 10             	add    esp,0x10
c0014c96:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014c9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ca1:	83 ec 08             	sub    esp,0x8
c0014ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ca8:	50                   	push   eax
c0014ca9:	e8 42 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014cb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cbc:	83 ec 08             	sub    esp,0x8
c0014cbf:	68 95 e7 01 c0       	push   0xc001e795
c0014cc4:	50                   	push   eax
c0014cc5:	e8 6c 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0014cd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd8:	83 ec 08             	sub    esp,0x8
c0014cdb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014cdf:	50                   	push   eax
c0014ce0:	e8 0b 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ce5:	83 c4 10             	add    esp,0x10
c0014ce8:	fa                   	cli    
c0014ce9:	f4                   	hlt    
c0014cea:	eb fe                	jmp    c0014cea <displayDebugInfo(regs*)+0x31f>

c0014cec <HalSystemIdle()>:
c0014cec:	56                   	push   esi
c0014ced:	53                   	push   ebx
c0014cee:	83 ec 14             	sub    esp,0x14
c0014cf1:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0014cf6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cfc:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014d02:	83 e0 04             	and    eax,0x4
c0014d05:	84 c0                	test   al,al
c0014d07:	0f 95 c0             	setne  al
c0014d0a:	84 c0                	test   al,al
c0014d0c:	74 4c                	je     c0014d5a <HalSystemIdle()+0x6e>
c0014d0e:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0014d13:	83 ec 08             	sub    esp,0x8
c0014d16:	68 e1 00 00 00       	push   0xe1
c0014d1b:	50                   	push   eax
c0014d1c:	e8 d1 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014d21:	83 c4 10             	add    esp,0x10
c0014d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014d28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d2c:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0014d31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d35:	83 e2 02             	and    edx,0x2
c0014d38:	89 d3                	mov    ebx,edx
c0014d3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014d3e:	83 e2 00             	and    edx,0x0
c0014d41:	89 d6                	mov    esi,edx
c0014d43:	56                   	push   esi
c0014d44:	53                   	push   ebx
c0014d45:	68 e1 00 00 00       	push   0xe1
c0014d4a:	50                   	push   eax
c0014d4b:	e8 ce 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	e8 3c b4 fe ff       	call   c0000194 <doTPAUSE>
c0014d58:	eb 01                	jmp    c0014d5b <HalSystemIdle()+0x6f>
c0014d5a:	f4                   	hlt    
c0014d5b:	90                   	nop
c0014d5c:	83 c4 14             	add    esp,0x14
c0014d5f:	5b                   	pop    ebx
c0014d60:	5e                   	pop    esi
c0014d61:	c3                   	ret    

c0014d62 <displayProgramFault(char const*)>:
c0014d62:	83 ec 0c             	sub    esp,0xc
c0014d65:	83 ec 0c             	sub    esp,0xc
c0014d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d6c:	e8 e3 56 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014d71:	83 c4 10             	add    esp,0x10
c0014d74:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d7e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d84:	85 c0                	test   eax,eax
c0014d86:	74 21                	je     c0014da9 <displayProgramFault(char const*)+0x47>
c0014d88:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d98:	6a 04                	push   0x4
c0014d9a:	6a 0f                	push   0xf
c0014d9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014da0:	50                   	push   eax
c0014da1:	e8 02 3a ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014da6:	83 c4 10             	add    esp,0x10
c0014da9:	90                   	nop
c0014daa:	83 c4 0c             	add    esp,0xc
c0014dad:	c3                   	ret    

c0014dae <gpFault(regs*, void*)>:
c0014dae:	83 ec 1c             	sub    esp,0x1c
c0014db1:	c7 05 70 37 02 c0 c3 42 01 c0 	mov    DWORD PTR ds:0xc0023770,0xc00142c3
c0014dbb:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014dc0:	85 c0                	test   eax,eax
c0014dc2:	74 1c                	je     c0014de0 <gpFault(regs*, void*)+0x32>
c0014dc4:	a1 70 37 02 c0       	mov    eax,ds:0xc0023770
c0014dc9:	83 ec 0c             	sub    esp,0xc
c0014dcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014dd0:	ff d0                	call   eax
c0014dd2:	83 c4 10             	add    esp,0x10
c0014dd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014dd9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014dde:	75 2e                	jne    c0014e0e <gpFault(regs*, void*)+0x60>
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014de7:	e8 df fb ff ff       	call   c00149cb <displayDebugInfo(regs*)>
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	83 ec 0c             	sub    esp,0xc
c0014df2:	68 9d e7 01 c0       	push   0xc001e79d
c0014df7:	e8 66 ff ff ff       	call   c0014d62 <displayProgramFault(char const*)>
c0014dfc:	83 c4 10             	add    esp,0x10
c0014dff:	83 ec 0c             	sub    esp,0xc
c0014e02:	6a 00                	push   0x0
c0014e04:	e8 af ee ff ff       	call   c0013cb8 <Thr::terminateFromIRQ(int)>
c0014e09:	83 c4 10             	add    esp,0x10
c0014e0c:	eb 01                	jmp    c0014e0f <gpFault(regs*, void*)+0x61>
c0014e0e:	90                   	nop
c0014e0f:	83 c4 1c             	add    esp,0x1c
c0014e12:	c3                   	ret    

c0014e13 <pgFault(regs*, void*)>:
c0014e13:	83 ec 1c             	sub    esp,0x1c
c0014e16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e1a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014e1d:	0f 20 d0             	mov    eax,cr2
c0014e20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e28:	83 ec 04             	sub    esp,0x4
c0014e2b:	52                   	push   edx
c0014e2c:	50                   	push   eax
c0014e2d:	68 7c e8 01 c0       	push   0xc001e87c
c0014e32:	e8 1d 56 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e44:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014e4a:	0f 20 d2             	mov    edx,cr2
c0014e4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e55:	83 ec 08             	sub    esp,0x8
c0014e58:	52                   	push   edx
c0014e59:	50                   	push   eax
c0014e5a:	e8 27 52 ff ff       	call   c000a086 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	84 c0                	test   al,al
c0014e64:	75 2e                	jne    c0014e94 <pgFault(regs*, void*)+0x81>
c0014e66:	83 ec 0c             	sub    esp,0xc
c0014e69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e6d:	e8 59 fb ff ff       	call   c00149cb <displayDebugInfo(regs*)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	83 ec 0c             	sub    esp,0xc
c0014e78:	68 b6 e7 01 c0       	push   0xc001e7b6
c0014e7d:	e8 e0 fe ff ff       	call   c0014d62 <displayProgramFault(char const*)>
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	83 ec 0c             	sub    esp,0xc
c0014e88:	6a 00                	push   0x0
c0014e8a:	e8 29 ee ff ff       	call   c0013cb8 <Thr::terminateFromIRQ(int)>
c0014e8f:	83 c4 10             	add    esp,0x10
c0014e92:	eb 01                	jmp    c0014e95 <pgFault(regs*, void*)+0x82>
c0014e94:	90                   	nop
c0014e95:	83 c4 1c             	add    esp,0x1c
c0014e98:	c3                   	ret    

c0014e99 <otherISRHandler(regs*, void*)>:
c0014e99:	83 ec 0c             	sub    esp,0xc
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea3:	e8 23 fb ff ff       	call   c00149cb <displayDebugInfo(regs*)>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	68 a4 e8 01 c0       	push   0xc001e8a4
c0014eb3:	e8 aa fe ff ff       	call   c0014d62 <displayProgramFault(char const*)>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	6a 00                	push   0x0
c0014ec0:	e8 f3 ed ff ff       	call   c0013cb8 <Thr::terminateFromIRQ(int)>
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	90                   	nop
c0014ec9:	83 c4 0c             	add    esp,0xc
c0014ecc:	c3                   	ret    

c0014ecd <opcodeFault(regs*, void*)>:
c0014ecd:	55                   	push   ebp
c0014ece:	89 e5                	mov    ebp,esp
c0014ed0:	83 ec 08             	sub    esp,0x8
c0014ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed9:	83 ec 08             	sub    esp,0x8
c0014edc:	50                   	push   eax
c0014edd:	68 c1 e7 01 c0       	push   0xc001e7c1
c0014ee2:	e8 6d 55 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0014eef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ef5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014efb:	84 c0                	test   al,al
c0014efd:	74 21                	je     c0014f20 <opcodeFault(regs*, void*)+0x53>
c0014eff:	83 ec 0c             	sub    esp,0xc
c0014f02:	68 cc e8 01 c0       	push   0xc001e8cc
c0014f07:	e8 48 55 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0014f0c:	83 c4 10             	add    esp,0x10
c0014f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f12:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f15:	8d 50 19             	lea    edx,[eax+0x19]
c0014f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f1e:	eb 2b                	jmp    c0014f4b <opcodeFault(regs*, void*)+0x7e>
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f26:	e8 a0 fa ff ff       	call   c00149cb <displayDebugInfo(regs*)>
c0014f2b:	83 c4 10             	add    esp,0x10
c0014f2e:	83 ec 0c             	sub    esp,0xc
c0014f31:	68 cf e7 01 c0       	push   0xc001e7cf
c0014f36:	e8 27 fe ff ff       	call   c0014d62 <displayProgramFault(char const*)>
c0014f3b:	83 c4 10             	add    esp,0x10
c0014f3e:	83 ec 0c             	sub    esp,0xc
c0014f41:	6a 00                	push   0x0
c0014f43:	e8 70 ed ff ff       	call   c0013cb8 <Thr::terminateFromIRQ(int)>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	c9                   	leave  
c0014f4c:	c3                   	ret    

c0014f4d <i386SaveCoprocessor(void*)>:
c0014f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f51:	83 c0 3f             	add    eax,0x3f
c0014f54:	83 e0 c0             	and    eax,0xffffffc0
c0014f57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f5b:	ff 25 6c 37 02 c0    	jmp    DWORD PTR ds:0xc002376c

c0014f61 <i386LoadCoprocessor(void*)>:
c0014f61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f65:	83 c0 3f             	add    eax,0x3f
c0014f68:	83 e0 c0             	and    eax,0xffffffc0
c0014f6b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f6f:	ff 25 68 37 02 c0    	jmp    DWORD PTR ds:0xc0023768

c0014f75 <x87EmulHandler(regs*, void*)>:
c0014f75:	53                   	push   ebx
c0014f76:	83 ec 08             	sub    esp,0x8
c0014f79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f7e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0014f82:	74 10                	je     c0014f94 <x87EmulHandler(regs*, void*)+0x1f>
c0014f84:	83 ec 0c             	sub    esp,0xc
c0014f87:	68 dc e7 01 c0       	push   0xc001e7dc
c0014f8c:	e8 26 b1 ff ff       	call   c00100b7 <KePanic(char const*)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	0f 20 c0             	mov    eax,cr0
c0014f97:	a8 08                	test   al,0x8
c0014f99:	74 59                	je     c0014ff4 <x87EmulHandler(regs*, void*)+0x7f>
c0014f9b:	0f 06                	clts   
c0014f9d:	a1 64 37 02 c0       	mov    eax,ds:0xc0023764
c0014fa2:	85 c0                	test   eax,eax
c0014fa4:	74 0e                	je     c0014fb4 <x87EmulHandler(regs*, void*)+0x3f>
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014fac:	e8 9c ff ff ff       	call   c0014f4d <i386SaveCoprocessor(void*)>
c0014fb1:	83 c4 10             	add    esp,0x10
c0014fb4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014fba:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0014fbe:	75 12                	jne    c0014fd2 <x87EmulHandler(regs*, void*)+0x5d>
c0014fc0:	83 ec 0c             	sub    esp,0xc
c0014fc3:	68 40 02 00 00       	push   0x240
c0014fc8:	e8 ec 27 ff ff       	call   c00077b9 <malloc>
c0014fcd:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0014fd0:	eb 10                	jmp    c0014fe2 <x87EmulHandler(regs*, void*)+0x6d>
c0014fd2:	83 ec 0c             	sub    esp,0xc
c0014fd5:	a1 64 37 02 c0       	mov    eax,ds:0xc0023764
c0014fda:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0014fdd:	e8 7f ff ff ff       	call   c0014f61 <i386LoadCoprocessor(void*)>
c0014fe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fe7:	83 c4 10             	add    esp,0x10
c0014fea:	a3 64 37 02 c0       	mov    ds:0xc0023764,eax
c0014fef:	83 c4 08             	add    esp,0x8
c0014ff2:	5b                   	pop    ebx
c0014ff3:	c3                   	ret    
c0014ff4:	83 ec 0c             	sub    esp,0xc
c0014ff7:	68 f0 e7 01 c0       	push   0xc001e7f0
c0014ffc:	e8 53 54 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0015001:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015009:	83 c4 18             	add    esp,0x18
c001500c:	5b                   	pop    ebx
c001500d:	e9 a6 ec ff ff       	jmp    c0013cb8 <Thr::terminateFromIRQ(int)>

c0015012 <HalInitialiseCoprocessor()>:
c0015012:	83 ec 10             	sub    esp,0x10
c0015015:	c7 05 64 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023764,0x0
c001501f:	6a 00                	push   0x0
c0015021:	68 75 4f 01 c0       	push   0xc0014f75
c0015026:	6a 07                	push   0x7
c0015028:	e8 9b 6d ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001502d:	e8 8e 65 00 00       	call   c001b5c0 <avxDetect>
c0015032:	83 c4 10             	add    esp,0x10
c0015035:	85 c0                	test   eax,eax
c0015037:	74 1c                	je     c0015055 <HalInitialiseCoprocessor()+0x43>
c0015039:	c7 05 6c 37 02 c0 ea b5 01 c0 	mov    DWORD PTR ds:0xc002376c,0xc001b5ea
c0015043:	c7 05 68 37 02 c0 fb b5 01 c0 	mov    DWORD PTR ds:0xc0023768,0xc001b5fb
c001504d:	83 c4 0c             	add    esp,0xc
c0015050:	e9 b7 65 00 00       	jmp    c001b60c <avxInit>
c0015055:	e8 e6 67 00 00       	call   c001b840 <absolutelyNoChanceInHell>
c001505a:	85 c0                	test   eax,eax
c001505c:	74 1c                	je     c001507a <HalInitialiseCoprocessor()+0x68>
c001505e:	c7 05 6c 37 02 c0 58 b8 01 c0 	mov    DWORD PTR ds:0xc002376c,0xc001b858
c0015068:	c7 05 68 37 02 c0 60 b8 01 c0 	mov    DWORD PTR ds:0xc0023768,0xc001b860
c0015072:	83 c4 0c             	add    esp,0xc
c0015075:	e9 ee 67 00 00       	jmp    c001b868 <sseInit>
c001507a:	e8 07 68 00 00       	call   c001b886 <x87Detect>
c001507f:	85 c0                	test   eax,eax
c0015081:	74 1c                	je     c001509f <HalInitialiseCoprocessor()+0x8d>
c0015083:	c7 05 6c 37 02 c0 a1 b8 01 c0 	mov    DWORD PTR ds:0xc002376c,0xc001b8a1
c001508d:	c7 05 68 37 02 c0 a8 b8 01 c0 	mov    DWORD PTR ds:0xc0023768,0xc001b8a8
c0015097:	83 c4 0c             	add    esp,0xc
c001509a:	e9 10 68 00 00       	jmp    c001b8af <x87Init>
c001509f:	c7 05 6c 37 02 c0 98 49 01 c0 	mov    DWORD PTR ds:0xc002376c,0xc0014998
c00150a9:	c7 05 68 37 02 c0 98 49 01 c0 	mov    DWORD PTR ds:0xc0023768,0xc0014998
c00150b3:	0f 20 c0             	mov    eax,cr0
c00150b6:	83 c8 04             	or     eax,0x4
c00150b9:	0f 22 c0             	mov    cr0,eax
c00150bc:	83 c4 0c             	add    esp,0xc
c00150bf:	c3                   	ret    

c00150c0 <HalPanic(char const*)>:
c00150c0:	53                   	push   ebx
c00150c1:	83 ec 10             	sub    esp,0x10
c00150c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00150c8:	fa                   	cli    
c00150c9:	53                   	push   ebx
c00150ca:	68 06 e8 01 c0       	push   0xc001e806
c00150cf:	e8 80 53 ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c00150d4:	83 c4 0c             	add    esp,0xc
c00150d7:	6a 01                	push   0x1
c00150d9:	6a 0f                	push   0xf
c00150db:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c00150e1:	e8 64 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00150e6:	58                   	pop    eax
c00150e7:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c00150ed:	e8 50 33 ff ff       	call   c0008442 <VgaText::clearScreen()>
c00150f2:	5a                   	pop    edx
c00150f3:	59                   	pop    ecx
c00150f4:	68 6e e8 01 c0       	push   0xc001e86e
c00150f9:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c00150ff:	e8 7e 31 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c0015104:	83 c4 0c             	add    esp,0xc
c0015107:	6a 01                	push   0x1
c0015109:	6a 0f                	push   0xf
c001510b:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c0015111:	e8 34 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015116:	58                   	pop    eax
c0015117:	5a                   	pop    edx
c0015118:	68 1f e8 01 c0       	push   0xc001e81f
c001511d:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c0015123:	e8 0e 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015128:	83 c4 0c             	add    esp,0xc
c001512b:	6a 0f                	push   0xf
c001512d:	6a 01                	push   0x1
c001512f:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c0015135:	e8 10 31 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001513a:	59                   	pop    ecx
c001513b:	58                   	pop    eax
c001513c:	68 28 e8 01 c0       	push   0xc001e828
c0015141:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c0015147:	e8 ea 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001514c:	83 c4 0c             	add    esp,0xc
c001514f:	6a 01                	push   0x1
c0015151:	6a 0f                	push   0xf
c0015153:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c0015159:	e8 ec 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001515e:	58                   	pop    eax
c001515f:	5a                   	pop    edx
c0015160:	68 6c e8 01 c0       	push   0xc001e86c
c0015165:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c001516b:	e8 c6 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015170:	59                   	pop    ecx
c0015171:	58                   	pop    eax
c0015172:	68 35 e8 01 c0       	push   0xc001e835
c0015177:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c001517d:	e8 b4 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015182:	58                   	pop    eax
c0015183:	5a                   	pop    edx
c0015184:	68 6f e8 01 c0       	push   0xc001e86f
c0015189:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c001518f:	e8 a2 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015194:	59                   	pop    ecx
c0015195:	58                   	pop    eax
c0015196:	53                   	push   ebx
c0015197:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c001519d:	e8 94 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a2:	58                   	pop    eax
c00151a3:	5a                   	pop    edx
c00151a4:	68 6c e8 01 c0       	push   0xc001e86c
c00151a9:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c00151af:	e8 82 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151b4:	83 c4 10             	add    esp,0x10
c00151b7:	eb fe                	jmp    c00151b7 <HalPanic(char const*)+0xf7>

c00151b9 <HalQueryPerformanceCounter()>:
c00151b9:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00151be:	31 d2                	xor    edx,edx
c00151c0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00151c6:	31 c0                	xor    eax,eax
c00151c8:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00151cf:	74 02                	je     c00151d3 <HalQueryPerformanceCounter()+0x1a>
c00151d1:	0f 31                	rdtsc  
c00151d3:	c3                   	ret    

c00151d4 <HalInitialise()>:
c00151d4:	53                   	push   ebx
c00151d5:	83 ec 08             	sub    esp,0x8
c00151d8:	e8 1e 6e ff ff       	call   c000bffb <setupINTS()>
c00151dd:	80 3d e0 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022ce0,0x0
c00151e4:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00151e9:	75 07                	jne    c00151f2 <HalInitialise()+0x1e>
c00151eb:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00151f2:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00151f8:	83 e0 01             	and    eax,0x1
c00151fb:	a2 60 37 02 c0       	mov    ds:0xc0023760,al
c0015200:	e8 a7 02 00 00       	call   c00154ac <picOpen()>
c0015205:	80 3d 60 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023760,0x0
c001520c:	74 0a                	je     c0015218 <HalInitialise()+0x44>
c001520e:	e8 e1 01 00 00       	call   c00153f4 <picDisable()>
c0015213:	e8 26 5d 00 00       	call   c001af3e <apicOpen()>
c0015218:	bb 0f 00 00 00       	mov    ebx,0xf
c001521d:	50                   	push   eax
c001521e:	6a 00                	push   0x0
c0015220:	68 99 4e 01 c0       	push   0xc0014e99
c0015225:	6a 00                	push   0x0
c0015227:	e8 9c 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001522c:	83 c4 0c             	add    esp,0xc
c001522f:	6a 00                	push   0x0
c0015231:	68 99 4e 01 c0       	push   0xc0014e99
c0015236:	6a 01                	push   0x1
c0015238:	e8 8b 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001523d:	83 c4 0c             	add    esp,0xc
c0015240:	6a 00                	push   0x0
c0015242:	68 99 49 01 c0       	push   0xc0014999
c0015247:	6a 02                	push   0x2
c0015249:	e8 7a 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001524e:	83 c4 0c             	add    esp,0xc
c0015251:	6a 00                	push   0x0
c0015253:	68 99 4e 01 c0       	push   0xc0014e99
c0015258:	6a 03                	push   0x3
c001525a:	e8 69 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001525f:	83 c4 0c             	add    esp,0xc
c0015262:	6a 00                	push   0x0
c0015264:	68 99 4e 01 c0       	push   0xc0014e99
c0015269:	6a 04                	push   0x4
c001526b:	e8 58 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015270:	83 c4 0c             	add    esp,0xc
c0015273:	6a 00                	push   0x0
c0015275:	68 99 4e 01 c0       	push   0xc0014e99
c001527a:	6a 05                	push   0x5
c001527c:	e8 47 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015281:	83 c4 0c             	add    esp,0xc
c0015284:	6a 00                	push   0x0
c0015286:	68 cd 4e 01 c0       	push   0xc0014ecd
c001528b:	6a 06                	push   0x6
c001528d:	e8 36 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015292:	83 c4 0c             	add    esp,0xc
c0015295:	6a 00                	push   0x0
c0015297:	68 b2 49 01 c0       	push   0xc00149b2
c001529c:	6a 08                	push   0x8
c001529e:	e8 25 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152a3:	83 c4 0c             	add    esp,0xc
c00152a6:	6a 00                	push   0x0
c00152a8:	68 99 4e 01 c0       	push   0xc0014e99
c00152ad:	6a 09                	push   0x9
c00152af:	e8 14 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152b4:	83 c4 0c             	add    esp,0xc
c00152b7:	6a 00                	push   0x0
c00152b9:	68 99 4e 01 c0       	push   0xc0014e99
c00152be:	6a 0a                	push   0xa
c00152c0:	e8 03 6b ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152c5:	83 c4 0c             	add    esp,0xc
c00152c8:	6a 00                	push   0x0
c00152ca:	68 99 4e 01 c0       	push   0xc0014e99
c00152cf:	6a 0b                	push   0xb
c00152d1:	e8 f2 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152d6:	83 c4 0c             	add    esp,0xc
c00152d9:	6a 00                	push   0x0
c00152db:	68 ae 4d 01 c0       	push   0xc0014dae
c00152e0:	6a 0d                	push   0xd
c00152e2:	e8 e1 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152e7:	83 c4 0c             	add    esp,0xc
c00152ea:	6a 00                	push   0x0
c00152ec:	68 13 4e 01 c0       	push   0xc0014e13
c00152f1:	6a 0e                	push   0xe
c00152f3:	e8 d0 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	50                   	push   eax
c00152fc:	6a 00                	push   0x0
c00152fe:	68 99 4e 01 c0       	push   0xc0014e99
c0015303:	53                   	push   ebx
c0015304:	43                   	inc    ebx
c0015305:	e8 be 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001530a:	83 c4 10             	add    esp,0x10
c001530d:	83 fb 1e             	cmp    ebx,0x1e
c0015310:	75 e9                	jne    c00152fb <HalInitialise()+0x127>
c0015312:	50                   	push   eax
c0015313:	6a 00                	push   0x0
c0015315:	68 97 0f 01 c0       	push   0xc0010f97
c001531a:	6a 60                	push   0x60
c001531c:	e8 a7 6a ff ff       	call   c000bdc8 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015321:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0015326:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015330:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0015337:	e8 7d 24 ff ff       	call   c00077b9 <malloc>
c001533c:	89 04 24             	mov    DWORD PTR [esp],eax
c001533f:	89 c3                	mov    ebx,eax
c0015341:	e8 2e 09 00 00       	call   c0015c74 <RTC::RTC()>
c0015346:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015350:	5a                   	pop    edx
c0015351:	59                   	pop    ecx
c0015352:	53                   	push   ebx
c0015353:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015359:	e8 36 65 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001535e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015360:	6a 00                	push   0x0
c0015362:	6a 00                	push   0x0
c0015364:	6a 00                	push   0x0
c0015366:	53                   	push   ebx
c0015367:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001536a:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c001536f:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015375:	83 c4 28             	add    esp,0x28
c0015378:	5b                   	pop    ebx
c0015379:	c3                   	ret    

c001537a <HalMakeBeep(int)>:
c001537a:	53                   	push   ebx
c001537b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001537f:	85 db                	test   ebx,ebx
c0015381:	75 07                	jne    c001538a <HalMakeBeep(int)+0x10>
c0015383:	e4 61                	in     al,0x61
c0015385:	83 e0 fc             	and    eax,0xfffffffc
c0015388:	eb 26                	jmp    c00153b0 <HalMakeBeep(int)+0x36>
c001538a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001538f:	99                   	cdq    
c0015390:	f7 fb                	idiv   ebx
c0015392:	89 c1                	mov    ecx,eax
c0015394:	b0 b6                	mov    al,0xb6
c0015396:	e6 43                	out    0x43,al
c0015398:	88 c8                	mov    al,cl
c001539a:	e6 42                	out    0x42,al
c001539c:	89 c8                	mov    eax,ecx
c001539e:	c1 e8 08             	shr    eax,0x8
c00153a1:	e6 42                	out    0x42,al
c00153a3:	e4 61                	in     al,0x61
c00153a5:	88 c2                	mov    dl,al
c00153a7:	83 ca 03             	or     edx,0x3
c00153aa:	38 c2                	cmp    dl,al
c00153ac:	74 04                	je     c00153b2 <HalMakeBeep(int)+0x38>
c00153ae:	88 d0                	mov    al,dl
c00153b0:	e6 61                	out    0x61,al
c00153b2:	5b                   	pop    ebx
c00153b3:	c3                   	ret    

c00153b4 <HalGetRand()>:
c00153b4:	31 c0                	xor    eax,eax
c00153b6:	c3                   	ret    

c00153b7 <HalEndOfInterrupt(int)>:
c00153b7:	80 3d 60 37 02 c0 00 	cmp    BYTE PTR ds:0xc0023760,0x0
c00153be:	74 23                	je     c00153e3 <HalEndOfInterrupt(int)+0x2c>
c00153c0:	83 ec 14             	sub    esp,0x14
c00153c3:	6a 1b                	push   0x1b
c00153c5:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00153cb:	e8 22 1a ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00153d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00153d5:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00153df:	83 c4 1c             	add    esp,0x1c
c00153e2:	c3                   	ret    
c00153e3:	e9 54 02 00 00       	jmp    c001563c <picEOI(int)>

c00153e8 <HalRestart()>:
c00153e8:	c3                   	ret    

c00153e9 <HalShutdown()>:
c00153e9:	c3                   	ret    

c00153ea <HalSleep()>:
c00153ea:	c3                   	ret    
c00153eb:	90                   	nop

c00153ec <picIoWait()>:
c00153ec:	eb 00                	jmp    c00153ee <picIoWait()+0x2>
c00153ee:	eb 00                	jmp    c00153f0 <picIoWait()+0x4>
c00153f0:	90                   	nop
c00153f1:	c3                   	ret    
c00153f2:	66 90                	xchg   ax,ax

c00153f4 <picDisable()>:
c00153f4:	83 ec 10             	sub    esp,0x10
c00153f7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00153fe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0015403:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015407:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001540c:	ee                   	out    dx,al
c001540d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015414:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0015419:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001541d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015422:	ee                   	out    dx,al
c0015423:	90                   	nop
c0015424:	83 c4 10             	add    esp,0x10
c0015427:	c3                   	ret    

c0015428 <picGetIRQReg(int)>:
c0015428:	83 ec 10             	sub    esp,0x10
c001542b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001542f:	25 ff 00 00 00       	and    eax,0xff
c0015434:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001543b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001543f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015443:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015448:	ee                   	out    dx,al
c0015449:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001544d:	25 ff 00 00 00       	and    eax,0xff
c0015452:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015459:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001545d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015461:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015466:	ee                   	out    dx,al
c0015467:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001546e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015473:	89 c2                	mov    edx,eax
c0015475:	ec                   	in     al,dx
c0015476:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001547a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001547e:	25 ff 00 00 00       	and    eax,0xff
c0015483:	c1 e0 08             	shl    eax,0x8
c0015486:	89 c1                	mov    ecx,eax
c0015488:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001548f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015494:	89 c2                	mov    edx,eax
c0015496:	ec                   	in     al,dx
c0015497:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001549b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001549f:	25 ff 00 00 00       	and    eax,0xff
c00154a4:	09 c8                	or     eax,ecx
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	c3                   	ret    
c00154aa:	66 90                	xchg   ax,ax

c00154ac <picOpen()>:
c00154ac:	83 ec 50             	sub    esp,0x50
c00154af:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00154b6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00154bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00154bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00154c3:	ee                   	out    dx,al
c00154c4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00154cb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00154d0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00154d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00154d8:	ee                   	out    dx,al
c00154d9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00154e1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00154e9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00154f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154f4:	89 c2                	mov    edx,eax
c00154f6:	ec                   	in     al,dx
c00154f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00154fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00154ff:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015503:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001550a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001550e:	89 c2                	mov    edx,eax
c0015510:	ec                   	in     al,dx
c0015511:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015515:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015519:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001551d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015524:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015529:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001552d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015531:	ee                   	out    dx,al
c0015532:	e8 b5 fe ff ff       	call   c00153ec <picIoWait()>
c0015537:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001553e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015543:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015547:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001554b:	ee                   	out    dx,al
c001554c:	e8 9b fe ff ff       	call   c00153ec <picIoWait()>
c0015551:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015555:	25 ff 00 00 00       	and    eax,0xff
c001555a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015561:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015565:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015569:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001556d:	ee                   	out    dx,al
c001556e:	e8 79 fe ff ff       	call   c00153ec <picIoWait()>
c0015573:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015577:	25 ff 00 00 00       	and    eax,0xff
c001557c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015583:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015587:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001558b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001558f:	ee                   	out    dx,al
c0015590:	e8 57 fe ff ff       	call   c00153ec <picIoWait()>
c0015595:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001559c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00155a1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00155a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00155a9:	ee                   	out    dx,al
c00155aa:	e8 3d fe ff ff       	call   c00153ec <picIoWait()>
c00155af:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00155b6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00155bb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00155bf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00155c3:	ee                   	out    dx,al
c00155c4:	e8 23 fe ff ff       	call   c00153ec <picIoWait()>
c00155c9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00155d0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00155d5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00155d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00155dd:	ee                   	out    dx,al
c00155de:	e8 09 fe ff ff       	call   c00153ec <picIoWait()>
c00155e3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00155ea:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00155ef:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00155f3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00155f7:	ee                   	out    dx,al
c00155f8:	e8 ef fd ff ff       	call   c00153ec <picIoWait()>
c00155fd:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015601:	25 ff 00 00 00       	and    eax,0xff
c0015606:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001560d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015611:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015615:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015619:	ee                   	out    dx,al
c001561a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c001561e:	25 ff 00 00 00       	and    eax,0xff
c0015623:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001562a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001562e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015632:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015636:	ee                   	out    dx,al
c0015637:	90                   	nop
c0015638:	83 c4 50             	add    esp,0x50
c001563b:	c3                   	ret    

c001563c <picEOI(int)>:
c001563c:	83 ec 10             	sub    esp,0x10
c001563f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015644:	75 22                	jne    c0015668 <picEOI(int)+0x2c>
c0015646:	6a 0b                	push   0xb
c0015648:	e8 db fd ff ff       	call   c0015428 <picGetIRQReg(int)>
c001564d:	83 c4 04             	add    esp,0x4
c0015650:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015655:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001565a:	25 ff ff 00 00       	and    eax,0xffff
c001565f:	25 80 00 00 00       	and    eax,0x80
c0015664:	74 72                	je     c00156d8 <picEOI(int)+0x9c>
c0015666:	66 90                	xchg   ax,ax
c0015668:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001566d:	75 31                	jne    c00156a0 <picEOI(int)+0x64>
c001566f:	6a 0b                	push   0xb
c0015671:	e8 b2 fd ff ff       	call   c0015428 <picGetIRQReg(int)>
c0015676:	83 c4 04             	add    esp,0x4
c0015679:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001567e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015682:	66 85 c0             	test   ax,ax
c0015685:	78 19                	js     c00156a0 <picEOI(int)+0x64>
c0015687:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001568e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015693:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015697:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001569c:	ee                   	out    dx,al
c001569d:	eb 3d                	jmp    c00156dc <picEOI(int)+0xa0>
c001569f:	90                   	nop
c00156a0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00156a5:	7e 19                	jle    c00156c0 <picEOI(int)+0x84>
c00156a7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00156ae:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00156b3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00156b7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00156bc:	ee                   	out    dx,al
c00156bd:	8d 76 00             	lea    esi,[esi+0x0]
c00156c0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00156c7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00156cc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00156d0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00156d5:	ee                   	out    dx,al
c00156d6:	eb 04                	jmp    c00156dc <picEOI(int)+0xa0>
c00156d8:	90                   	nop
c00156d9:	8d 76 00             	lea    esi,[esi+0x0]
c00156dc:	83 c4 10             	add    esp,0x10
c00156df:	c3                   	ret    

c00156e0 <RTC::open(int, int, void*)>:
c00156e0:	31 c0                	xor    eax,eax
c00156e2:	c3                   	ret    
c00156e3:	90                   	nop

c00156e4 <RTC::close(int, int, void*)>:
c00156e4:	31 c0                	xor    eax,eax
c00156e6:	c3                   	ret    
c00156e7:	90                   	nop

c00156e8 <RTC::timeInSecondsUTC()>:
c00156e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00156f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00156f8:	c3                   	ret    
c00156f9:	90                   	nop

c00156fa <RTC::timeInDatetimeUTC()>:
c00156fa:	53                   	push   ebx
c00156fb:	83 ec 14             	sub    esp,0x14
c00156fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015706:	8b 10                	mov    edx,DWORD PTR [eax]
c0015708:	50                   	push   eax
c0015709:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001570c:	83 c4 0c             	add    esp,0xc
c001570f:	52                   	push   edx
c0015710:	50                   	push   eax
c0015711:	53                   	push   ebx
c0015712:	e8 f1 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c0015717:	89 d8                	mov    eax,ebx
c0015719:	83 c4 14             	add    esp,0x14
c001571c:	5b                   	pop    ebx
c001571d:	c2 04 00             	ret    0x4

c0015720 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015720:	56                   	push   esi
c0015721:	53                   	push   ebx
c0015722:	83 ec 14             	sub    esp,0x14
c0015725:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015729:	8b 03                	mov    eax,DWORD PTR [ebx]
c001572b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001572e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015732:	52                   	push   edx
c0015733:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015737:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001573b:	50                   	push   eax
c001573c:	e8 c7 5e ff ff       	call   c000b608 <secondsToDatetime(unsigned long long)>
c0015741:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015745:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015749:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001574d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015751:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015755:	89 f0                	mov    eax,esi
c0015757:	83 c4 20             	add    esp,0x20
c001575a:	5b                   	pop    ebx
c001575b:	5e                   	pop    esi
c001575c:	ff e0                	jmp    eax

c001575e <RTC::~RTC()>:
c001575e:	83 ec 0c             	sub    esp,0xc
c0015761:	ba 0c e9 01 c0       	mov    edx,0xc001e90c
c0015766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001576a:	89 10                	mov    DWORD PTR [eax],edx
c001576c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015770:	83 ec 0c             	sub    esp,0xc
c0015773:	50                   	push   eax
c0015774:	e8 13 5c ff ff       	call   c000b38c <Clock::~Clock()>
c0015779:	83 c4 10             	add    esp,0x10
c001577c:	90                   	nop
c001577d:	83 c4 0c             	add    esp,0xc
c0015780:	c3                   	ret    
c0015781:	90                   	nop

c0015782 <RTC::~RTC()>:
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	83 ec 0c             	sub    esp,0xc
c0015788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001578c:	e8 cd ff ff ff       	call   c001575e <RTC::~RTC()>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	83 ec 08             	sub    esp,0x8
c0015797:	68 60 01 00 00       	push   0x160
c001579c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157a0:	e8 b9 4b ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	83 c4 0c             	add    esp,0xc
c00157ab:	c3                   	ret    

c00157ac <RTC::get_update_in_progress_flag()>:
c00157ac:	83 ec 14             	sub    esp,0x14
c00157af:	6a 0a                	push   0xa
c00157b1:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00157b7:	e8 ea 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00157bc:	83 c4 1c             	add    esp,0x1c
c00157bf:	c0 e8 07             	shr    al,0x7
c00157c2:	c3                   	ret    
c00157c3:	90                   	nop

c00157c4 <RTC::completeRTCRefresh()>:
c00157c4:	55                   	push   ebp
c00157c5:	57                   	push   edi
c00157c6:	56                   	push   esi
c00157c7:	53                   	push   ebx
c00157c8:	83 ec 2c             	sub    esp,0x2c
c00157cb:	8b 1d ec 29 02 c0    	mov    ebx,DWORD PTR ds:0xc00229ec
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00157d8:	e8 cf ff ff ff       	call   c00157ac <RTC::get_update_in_progress_flag()>
c00157dd:	83 c4 10             	add    esp,0x10
c00157e0:	84 c0                	test   al,al
c00157e2:	74 0e                	je     c00157f2 <RTC::completeRTCRefresh()+0x2e>
c00157e4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00157ea:	3b 05 ec 29 02 c0    	cmp    eax,DWORD PTR ds:0xc00229ec
c00157f0:	73 df                	jae    c00157d1 <RTC::completeRTCRefresh()+0xd>
c00157f2:	55                   	push   ebp
c00157f3:	55                   	push   ebp
c00157f4:	6a 00                	push   0x0
c00157f6:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00157fc:	e8 a5 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015801:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015805:	58                   	pop    eax
c0015806:	5a                   	pop    edx
c0015807:	6a 02                	push   0x2
c0015809:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c001580f:	e8 92 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015814:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015818:	59                   	pop    ecx
c0015819:	5b                   	pop    ebx
c001581a:	6a 04                	push   0x4
c001581c:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015822:	e8 7f 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015827:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001582b:	5e                   	pop    esi
c001582c:	5f                   	pop    edi
c001582d:	6a 07                	push   0x7
c001582f:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015835:	e8 6c 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001583a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001583e:	5d                   	pop    ebp
c001583f:	58                   	pop    eax
c0015840:	6a 08                	push   0x8
c0015842:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015848:	e8 59 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001584d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015851:	58                   	pop    eax
c0015852:	5a                   	pop    edx
c0015853:	6a 09                	push   0x9
c0015855:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c001585b:	e8 46 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015860:	83 c4 10             	add    esp,0x10
c0015863:	0f b6 e8             	movzx  ebp,al
c0015866:	8b 1d ec 29 02 c0    	mov    ebx,DWORD PTR ds:0xc00229ec
c001586c:	83 ec 0c             	sub    esp,0xc
c001586f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015873:	e8 34 ff ff ff       	call   c00157ac <RTC::get_update_in_progress_flag()>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	84 c0                	test   al,al
c001587d:	74 0e                	je     c001588d <RTC::completeRTCRefresh()+0xc9>
c001587f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015885:	3b 05 ec 29 02 c0    	cmp    eax,DWORD PTR ds:0xc00229ec
c001588b:	73 df                	jae    c001586c <RTC::completeRTCRefresh()+0xa8>
c001588d:	50                   	push   eax
c001588e:	50                   	push   eax
c001588f:	6a 00                	push   0x0
c0015891:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015897:	e8 0a 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001589c:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00158a0:	58                   	pop    eax
c00158a1:	5a                   	pop    edx
c00158a2:	6a 02                	push   0x2
c00158a4:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00158aa:	e8 f7 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158af:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00158b3:	59                   	pop    ecx
c00158b4:	5b                   	pop    ebx
c00158b5:	6a 04                	push   0x4
c00158b7:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00158bd:	e8 e4 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158c2:	5e                   	pop    esi
c00158c3:	88 c3                	mov    bl,al
c00158c5:	5f                   	pop    edi
c00158c6:	6a 07                	push   0x7
c00158c8:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00158ce:	e8 d3 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158d3:	89 c6                	mov    esi,eax
c00158d5:	58                   	pop    eax
c00158d6:	5a                   	pop    edx
c00158d7:	6a 08                	push   0x8
c00158d9:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00158df:	e8 c2 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00158e8:	59                   	pop    ecx
c00158e9:	5f                   	pop    edi
c00158ea:	6a 09                	push   0x9
c00158ec:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c00158f2:	e8 af 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158f7:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00158fb:	0f b6 f8             	movzx  edi,al
c00158fe:	83 c4 10             	add    esp,0x10
c0015901:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015905:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015909:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001590d:	89 f1                	mov    ecx,esi
c001590f:	0f 94 c0             	sete   al
c0015912:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015916:	0f 94 c2             	sete   dl
c0015919:	21 d0                	and    eax,edx
c001591b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001591f:	0f 94 c2             	sete   dl
c0015922:	21 c2                	and    edx,eax
c0015924:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015928:	0f 94 c0             	sete   al
c001592b:	21 d0                	and    eax,edx
c001592d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015931:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015935:	0f 94 c1             	sete   cl
c0015938:	84 c8                	test   al,cl
c001593a:	75 29                	jne    c0015965 <RTC::completeRTCRefresh()+0x1a1>
c001593c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015940:	89 fd                	mov    ebp,edi
c0015942:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015946:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001594a:	89 f0                	mov    eax,esi
c001594c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015950:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015954:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015958:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001595c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015960:	e9 01 ff ff ff       	jmp    c0015866 <RTC::completeRTCRefresh()+0xa2>
c0015965:	39 fd                	cmp    ebp,edi
c0015967:	75 d3                	jne    c001593c <RTC::completeRTCRefresh()+0x178>
c0015969:	55                   	push   ebp
c001596a:	55                   	push   ebp
c001596b:	6a 0b                	push   0xb
c001596d:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015973:	e8 2e 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015978:	83 c4 10             	add    esp,0x10
c001597b:	89 c5                	mov    ebp,eax
c001597d:	a8 04                	test   al,0x4
c001597f:	75 78                	jne    c00159f9 <RTC::completeRTCRefresh()+0x235>
c0015981:	b1 0a                	mov    cl,0xa
c0015983:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015987:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001598b:	83 e2 0f             	and    edx,0xf
c001598e:	c0 e8 04             	shr    al,0x4
c0015991:	c1 ef 04             	shr    edi,0x4
c0015994:	f6 e1                	mul    cl
c0015996:	6b ff 0a             	imul   edi,edi,0xa
c0015999:	01 d0                	add    eax,edx
c001599b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001599f:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00159a3:	83 e2 0f             	and    edx,0xf
c00159a6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00159aa:	c0 e8 04             	shr    al,0x4
c00159ad:	f6 e1                	mul    cl
c00159af:	01 d0                	add    eax,edx
c00159b1:	88 da                	mov    dl,bl
c00159b3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00159b7:	83 e2 0f             	and    edx,0xf
c00159ba:	88 d8                	mov    al,bl
c00159bc:	83 e3 80             	and    ebx,0xffffff80
c00159bf:	c0 e8 04             	shr    al,0x4
c00159c2:	83 e0 07             	and    eax,0x7
c00159c5:	f6 e1                	mul    cl
c00159c7:	01 d0                	add    eax,edx
c00159c9:	89 f2                	mov    edx,esi
c00159cb:	09 c3                	or     ebx,eax
c00159cd:	83 e2 0f             	and    edx,0xf
c00159d0:	89 f0                	mov    eax,esi
c00159d2:	c0 e8 04             	shr    al,0x4
c00159d5:	f6 e1                	mul    cl
c00159d7:	8d 34 02             	lea    esi,[edx+eax*1]
c00159da:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159de:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00159e2:	83 e2 0f             	and    edx,0xf
c00159e5:	c0 e8 04             	shr    al,0x4
c00159e8:	f6 e1                	mul    cl
c00159ea:	01 d0                	add    eax,edx
c00159ec:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00159f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159f4:	83 e0 0f             	and    eax,0xf
c00159f7:	01 c7                	add    edi,eax
c00159f9:	83 e5 02             	and    ebp,0x2
c00159fc:	75 14                	jne    c0015a12 <RTC::completeRTCRefresh()+0x24e>
c00159fe:	84 db                	test   bl,bl
c0015a00:	79 10                	jns    c0015a12 <RTC::completeRTCRefresh()+0x24e>
c0015a02:	83 e3 7f             	and    ebx,0x7f
c0015a05:	b9 18 00 00 00       	mov    ecx,0x18
c0015a0a:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015a0d:	99                   	cdq    
c0015a0e:	f7 f9                	idiv   ecx
c0015a10:	88 d3                	mov    bl,dl
c0015a12:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015a18:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015a1e:	77 06                	ja     c0015a26 <RTC::completeRTCRefresh()+0x262>
c0015a20:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015a26:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015a2b:	31 d2                	xor    edx,edx
c0015a2d:	c1 e1 10             	shl    ecx,0x10
c0015a30:	89 d7                	mov    edi,edx
c0015a32:	c1 e5 10             	shl    ebp,0x10
c0015a35:	31 c0                	xor    eax,eax
c0015a37:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015a3d:	09 cf                	or     edi,ecx
c0015a3f:	89 fa                	mov    edx,edi
c0015a41:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015a45:	88 da                	mov    dl,bl
c0015a47:	89 f3                	mov    ebx,esi
c0015a49:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015a4d:	88 d8                	mov    al,bl
c0015a4f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015a53:	0f b7 c8             	movzx  ecx,ax
c0015a56:	09 e9                	or     ecx,ebp
c0015a58:	89 c8                	mov    eax,ecx
c0015a5a:	51                   	push   ecx
c0015a5b:	51                   	push   ecx
c0015a5c:	52                   	push   edx
c0015a5d:	50                   	push   eax
c0015a5e:	e8 18 5a ff ff       	call   c000b47b <datetimeToSeconds(datetime_t)>
c0015a63:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015a67:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015a6d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015a73:	83 c4 3c             	add    esp,0x3c
c0015a76:	5b                   	pop    ebx
c0015a77:	5e                   	pop    esi
c0015a78:	5f                   	pop    edi
c0015a79:	5d                   	pop    ebp
c0015a7a:	c3                   	ret    
c0015a7b:	90                   	nop

c0015a7c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015a7c:	55                   	push   ebp
c0015a7d:	57                   	push   edi
c0015a7e:	56                   	push   esi
c0015a7f:	53                   	push   ebx
c0015a80:	83 ec 30             	sub    esp,0x30
c0015a83:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015a87:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015a8b:	6a 00                	push   0x0
c0015a8d:	6a 00                	push   0x0
c0015a8f:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015a95:	e8 22 15 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015a9a:	83 c4 0c             	add    esp,0xc
c0015a9d:	6a 00                	push   0x0
c0015a9f:	6a 02                	push   0x2
c0015aa1:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015aa7:	e8 10 15 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015aac:	31 d2                	xor    edx,edx
c0015aae:	89 f9                	mov    ecx,edi
c0015ab0:	89 f8                	mov    eax,edi
c0015ab2:	c1 e9 10             	shr    ecx,0x10
c0015ab5:	0f b6 c4             	movzx  eax,ah
c0015ab8:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015abc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ac0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ac4:	b9 64 00 00 00       	mov    ecx,0x64
c0015ac9:	89 f0                	mov    eax,esi
c0015acb:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015acf:	89 f0                	mov    eax,esi
c0015ad1:	0f b6 c4             	movzx  eax,ah
c0015ad4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015ad8:	89 f0                	mov    eax,esi
c0015ada:	c1 e8 10             	shr    eax,0x10
c0015add:	66 f7 f1             	div    cx
c0015ae0:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015ae5:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015aea:	59                   	pop    ecx
c0015aeb:	5b                   	pop    ebx
c0015aec:	89 fb                	mov    ebx,edi
c0015aee:	6a 0b                	push   0xb
c0015af0:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015af6:	e8 ab 13 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015afb:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015aff:	83 c4 10             	add    esp,0x10
c0015b02:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015b07:	75 74                	jne    c0015b7d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015b09:	b2 0a                	mov    dl,0xa
c0015b0b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015b0f:	0f b6 c1             	movzx  eax,cl
c0015b12:	f6 f2                	div    dl
c0015b14:	88 c3                	mov    bl,al
c0015b16:	88 e0                	mov    al,ah
c0015b18:	c1 e3 04             	shl    ebx,0x4
c0015b1b:	09 c3                	or     ebx,eax
c0015b1d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015b22:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015b26:	f6 f2                	div    dl
c0015b28:	88 c1                	mov    cl,al
c0015b2a:	88 e0                	mov    al,ah
c0015b2c:	c1 e1 04             	shl    ecx,0x4
c0015b2f:	09 c1                	or     ecx,eax
c0015b31:	89 f8                	mov    eax,edi
c0015b33:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015b37:	0f b6 c0             	movzx  eax,al
c0015b3a:	f6 f2                	div    dl
c0015b3c:	88 c3                	mov    bl,al
c0015b3e:	88 e0                	mov    al,ah
c0015b40:	c1 e3 04             	shl    ebx,0x4
c0015b43:	09 c3                	or     ebx,eax
c0015b45:	89 f0                	mov    eax,esi
c0015b47:	0f b6 c0             	movzx  eax,al
c0015b4a:	f6 f2                	div    dl
c0015b4c:	88 c1                	mov    cl,al
c0015b4e:	88 e0                	mov    al,ah
c0015b50:	c1 e1 04             	shl    ecx,0x4
c0015b53:	09 c1                	or     ecx,eax
c0015b55:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015b5a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015b5e:	f6 f2                	div    dl
c0015b60:	88 c1                	mov    cl,al
c0015b62:	88 e0                	mov    al,ah
c0015b64:	c1 e1 04             	shl    ecx,0x4
c0015b67:	09 c1                	or     ecx,eax
c0015b69:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015b6e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015b72:	f6 f2                	div    dl
c0015b74:	89 c5                	mov    ebp,eax
c0015b76:	88 e0                	mov    al,ah
c0015b78:	c1 e5 04             	shl    ebp,0x4
c0015b7b:	09 c5                	or     ebp,eax
c0015b7d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015b82:	75 17                	jne    c0015b9b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015b84:	80 fb 0b             	cmp    bl,0xb
c0015b87:	76 0c                	jbe    c0015b95 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015b89:	80 eb 0c             	sub    bl,0xc
c0015b8c:	75 02                	jne    c0015b90 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015b8e:	b3 0c                	mov    bl,0xc
c0015b90:	83 cb 80             	or     ebx,0xffffff80
c0015b93:	eb 06                	jmp    c0015b9b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015b95:	84 db                	test   bl,bl
c0015b97:	75 02                	jne    c0015b9b <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015b99:	b3 0c                	mov    bl,0xc
c0015b9b:	0f b6 db             	movzx  ebx,bl
c0015b9e:	50                   	push   eax
c0015b9f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015ba4:	50                   	push   eax
c0015ba5:	6a 00                	push   0x0
c0015ba7:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015bad:	e8 0a 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bb2:	83 c4 0c             	add    esp,0xc
c0015bb5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015bba:	50                   	push   eax
c0015bbb:	6a 02                	push   0x2
c0015bbd:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015bc3:	e8 f4 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bc8:	83 c4 0c             	add    esp,0xc
c0015bcb:	53                   	push   ebx
c0015bcc:	6a 04                	push   0x4
c0015bce:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015bd4:	e8 e3 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bd9:	83 c4 0c             	add    esp,0xc
c0015bdc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015be1:	50                   	push   eax
c0015be2:	6a 07                	push   0x7
c0015be4:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015bea:	e8 cd 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015bef:	83 c4 0c             	add    esp,0xc
c0015bf2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015bf7:	50                   	push   eax
c0015bf8:	6a 08                	push   0x8
c0015bfa:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015c00:	e8 b7 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c05:	83 c4 0c             	add    esp,0xc
c0015c08:	89 e8                	mov    eax,ebp
c0015c0a:	0f b6 e8             	movzx  ebp,al
c0015c0d:	55                   	push   ebp
c0015c0e:	6a 09                	push   0x9
c0015c10:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015c16:	e8 a1 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c1b:	5a                   	pop    edx
c0015c1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c20:	e8 9f fb ff ff       	call   c00157c4 <RTC::completeRTCRefresh()>
c0015c25:	83 c4 3c             	add    esp,0x3c
c0015c28:	b0 01                	mov    al,0x1
c0015c2a:	5b                   	pop    ebx
c0015c2b:	5e                   	pop    esi
c0015c2c:	5f                   	pop    edi
c0015c2d:	5d                   	pop    ebp
c0015c2e:	c3                   	ret    

c0015c2f <rtcIRQHandler(regs*, void*)>:
c0015c2f:	53                   	push   ebx
c0015c30:	83 ec 10             	sub    esp,0x10
c0015c33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015c37:	6a 0c                	push   0xc
c0015c39:	ff 35 18 04 02 c0    	push   DWORD PTR ds:0xc0020418
c0015c3f:	e8 62 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	84 c0                	test   al,al
c0015c49:	79 24                	jns    c0015c6f <rtcIRQHandler(regs*, void*)+0x40>
c0015c4b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015c52:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015c59:	66 ff 05 74 37 02 c0 	inc    WORD PTR ds:0xc0023774
c0015c60:	75 0d                	jne    c0015c6f <rtcIRQHandler(regs*, void*)+0x40>
c0015c62:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015c66:	83 c4 08             	add    esp,0x8
c0015c69:	5b                   	pop    ebx
c0015c6a:	e9 55 fb ff ff       	jmp    c00157c4 <RTC::completeRTCRefresh()>
c0015c6f:	83 c4 08             	add    esp,0x8
c0015c72:	5b                   	pop    ebx
c0015c73:	c3                   	ret    

c0015c74 <RTC::RTC()>:
c0015c74:	83 ec 1c             	sub    esp,0x1c
c0015c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7b:	83 ec 08             	sub    esp,0x8
c0015c7e:	68 ef e8 01 c0       	push   0xc001e8ef
c0015c83:	50                   	push   eax
c0015c84:	e8 cd 56 ff ff       	call   c000b356 <Clock::Clock(char const*)>
c0015c89:	83 c4 10             	add    esp,0x10
c0015c8c:	ba 0c e9 01 c0       	mov    edx,0xc001e90c
c0015c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c95:	89 10                	mov    DWORD PTR [eax],edx
c0015c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c9b:	83 ec 0c             	sub    esp,0xc
c0015c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ca2:	6a 01                	push   0x1
c0015ca4:	68 2f 5c 01 c0       	push   0xc0015c2f
c0015ca9:	6a 08                	push   0x8
c0015cab:	50                   	push   eax
c0015cac:	e8 8f 5b ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015cb1:	83 c4 20             	add    esp,0x20
c0015cb4:	89 c2                	mov    edx,eax
c0015cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cba:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015cc0:	fa                   	cli    
c0015cc1:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0015cc6:	40                   	inc    eax
c0015cc7:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0015ccc:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0015cd1:	83 ec 08             	sub    esp,0x8
c0015cd4:	6a 0b                	push   0xb
c0015cd6:	50                   	push   eax
c0015cd7:	e8 ca 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cdc:	83 c4 10             	add    esp,0x10
c0015cdf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015ce3:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c0015ce8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015cec:	83 ca 10             	or     edx,0x10
c0015cef:	81 e2 ff 00 00 00    	and    edx,0xff
c0015cf5:	83 ec 04             	sub    esp,0x4
c0015cf8:	52                   	push   edx
c0015cf9:	6a 0b                	push   0xb
c0015cfb:	50                   	push   eax
c0015cfc:	e8 bb 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d01:	83 c4 10             	add    esp,0x10
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d0b:	e8 b4 fa ff ff       	call   c00157c4 <RTC::completeRTCRefresh()>
c0015d10:	83 c4 10             	add    esp,0x10
c0015d13:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0015d18:	48                   	dec    eax
c0015d19:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c0015d1e:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c0015d23:	85 c0                	test   eax,eax
c0015d25:	75 01                	jne    c0015d28 <RTC::RTC()+0xb4>
c0015d27:	fb                   	sti    
c0015d28:	90                   	nop
c0015d29:	83 c4 1c             	add    esp,0x1c
c0015d2c:	c3                   	ret    
c0015d2d:	66 90                	xchg   ax,ax
c0015d2f:	90                   	nop

c0015d30 <HalConsoleScroll(int, int)>:
c0015d30:	83 ec 10             	sub    esp,0x10
c0015d33:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015d3b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015d43:	90                   	nop
c0015d44:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015d49:	0f 8f e1 00 00 00    	jg     c0015e30 <HalConsoleScroll(int, int)+0x100>
c0015d4f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015d57:	90                   	nop
c0015d58:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015d60:	0f 8f be 00 00 00    	jg     c0015e24 <HalConsoleScroll(int, int)+0xf4>
c0015d66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d6a:	89 d0                	mov    eax,edx
c0015d6c:	c1 e0 02             	shl    eax,0x2
c0015d6f:	01 d0                	add    eax,edx
c0015d71:	c1 e0 05             	shl    eax,0x5
c0015d74:	89 c2                	mov    edx,eax
c0015d76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d7a:	01 d0                	add    eax,edx
c0015d7c:	89 c2                	mov    edx,eax
c0015d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015d85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d89:	89 d0                	mov    eax,edx
c0015d8b:	c1 e0 02             	shl    eax,0x2
c0015d8e:	01 d0                	add    eax,edx
c0015d90:	c1 e0 05             	shl    eax,0x5
c0015d93:	89 c2                	mov    edx,eax
c0015d95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d99:	01 d0                	add    eax,edx
c0015d9b:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015da1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015da5:	01 c2                	add    edx,eax
c0015da7:	8a 01                	mov    al,BYTE PTR [ecx]
c0015da9:	88 02                	mov    BYTE PTR [edx],al
c0015dab:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015db0:	75 66                	jne    c0015e18 <HalConsoleScroll(int, int)+0xe8>
c0015db2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015db6:	83 e0 01             	and    eax,0x1
c0015db9:	74 39                	je     c0015df4 <HalConsoleScroll(int, int)+0xc4>
c0015dbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015dbf:	83 e0 0f             	and    eax,0xf
c0015dc2:	88 c2                	mov    dl,al
c0015dc4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015dc8:	c1 e0 04             	shl    eax,0x4
c0015dcb:	88 d1                	mov    cl,dl
c0015dcd:	09 c1                	or     ecx,eax
c0015dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dd3:	89 d0                	mov    eax,edx
c0015dd5:	c1 e0 02             	shl    eax,0x2
c0015dd8:	01 d0                	add    eax,edx
c0015dda:	c1 e0 05             	shl    eax,0x5
c0015ddd:	89 c2                	mov    edx,eax
c0015ddf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de3:	01 d0                	add    eax,edx
c0015de5:	89 c2                	mov    edx,eax
c0015de7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015deb:	01 d0                	add    eax,edx
c0015ded:	88 ca                	mov    dl,cl
c0015def:	88 10                	mov    BYTE PTR [eax],dl
c0015df1:	eb 25                	jmp    c0015e18 <HalConsoleScroll(int, int)+0xe8>
c0015df3:	90                   	nop
c0015df4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015df8:	89 d0                	mov    eax,edx
c0015dfa:	c1 e0 02             	shl    eax,0x2
c0015dfd:	01 d0                	add    eax,edx
c0015dff:	c1 e0 05             	shl    eax,0x5
c0015e02:	89 c2                	mov    edx,eax
c0015e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e08:	01 d0                	add    eax,edx
c0015e0a:	89 c2                	mov    edx,eax
c0015e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e10:	01 d0                	add    eax,edx
c0015e12:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015e15:	8d 76 00             	lea    esi,[esi+0x0]
c0015e18:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015e1c:	e9 37 ff ff ff       	jmp    c0015d58 <HalConsoleScroll(int, int)+0x28>
c0015e21:	8d 76 00             	lea    esi,[esi+0x0]
c0015e24:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015e28:	e9 17 ff ff ff       	jmp    c0015d44 <HalConsoleScroll(int, int)+0x14>
c0015e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0015e30:	90                   	nop
c0015e31:	83 c4 10             	add    esp,0x10
c0015e34:	c3                   	ret    
c0015e35:	8d 76 00             	lea    esi,[esi+0x0]

c0015e38 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015e38:	83 ec 14             	sub    esp,0x14
c0015e3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e3f:	88 04 24             	mov    BYTE PTR [esp],al
c0015e42:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015e45:	25 ff 00 00 00       	and    eax,0xff
c0015e4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e4e:	89 d1                	mov    ecx,edx
c0015e50:	83 e1 0f             	and    ecx,0xf
c0015e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e57:	c1 e2 04             	shl    edx,0x4
c0015e5a:	81 e2 ff 00 00 00    	and    edx,0xff
c0015e60:	09 ca                	or     edx,ecx
c0015e62:	c1 e2 08             	shl    edx,0x8
c0015e65:	09 d0                	or     eax,edx
c0015e67:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015e6c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015e74:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e78:	89 d0                	mov    eax,edx
c0015e7a:	c1 e0 02             	shl    eax,0x2
c0015e7d:	01 d0                	add    eax,edx
c0015e7f:	c1 e0 04             	shl    eax,0x4
c0015e82:	89 c2                	mov    edx,eax
c0015e84:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015e88:	01 d0                	add    eax,edx
c0015e8a:	01 c0                	add    eax,eax
c0015e8c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015e90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e94:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015e99:	66 89 02             	mov    WORD PTR [edx],ax
c0015e9c:	90                   	nop
c0015e9d:	83 c4 14             	add    esp,0x14
c0015ea0:	c3                   	ret    
c0015ea1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ea4 <HalConsoleCursorUpdate(int, int)>:
c0015ea4:	83 ec 20             	sub    esp,0x20
c0015ea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015eab:	89 c2                	mov    edx,eax
c0015ead:	89 d0                	mov    eax,edx
c0015eaf:	c1 e0 02             	shl    eax,0x2
c0015eb2:	01 d0                	add    eax,edx
c0015eb4:	c1 e0 04             	shl    eax,0x4
c0015eb7:	89 c2                	mov    edx,eax
c0015eb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015ebd:	01 d0                	add    eax,edx
c0015ebf:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015ec4:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015ecb:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015ed0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015ed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ed8:	ee                   	out    dx,al
c0015ed9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015ede:	25 ff 00 00 00       	and    eax,0xff
c0015ee3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015eea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015eee:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015ef2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015ef6:	ee                   	out    dx,al
c0015ef7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015efe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015f03:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015f07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015f0b:	ee                   	out    dx,al
c0015f0c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f11:	66 c1 e8 08          	shr    ax,0x8
c0015f15:	25 ff 00 00 00       	and    eax,0xff
c0015f1a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015f21:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f25:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015f29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f2d:	ee                   	out    dx,al
c0015f2e:	90                   	nop
c0015f2f:	83 c4 20             	add    esp,0x20
c0015f32:	c3                   	ret    
c0015f33:	90                   	nop

c0015f34 <FAT::getName()>:
c0015f34:	b8 40 e9 01 c0       	mov    eax,0xc001e940
c0015f39:	c3                   	ret    
c0015f3a:	66 90                	xchg   ax,ax

c0015f3c <FAT::tell(void*, unsigned long long*)>:
c0015f3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f41:	75 09                	jne    c0015f4c <FAT::tell(void*, unsigned long long*)+0x10>
c0015f43:	b8 04 00 00 00       	mov    eax,0x4
c0015f48:	c3                   	ret    
c0015f49:	8d 76 00             	lea    esi,[esi+0x0]
c0015f4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f51:	75 09                	jne    c0015f5c <FAT::tell(void*, unsigned long long*)+0x20>
c0015f53:	b8 04 00 00 00       	mov    eax,0x4
c0015f58:	c3                   	ret    
c0015f59:	8d 76 00             	lea    esi,[esi+0x0]
c0015f5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015f63:	ba 00 00 00 00       	mov    edx,0x0
c0015f68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f6c:	89 01                	mov    DWORD PTR [ecx],eax
c0015f6e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015f71:	b8 00 00 00 00       	mov    eax,0x0
c0015f76:	c3                   	ret    
c0015f77:	90                   	nop

c0015f78 <FAT::stat(void*, unsigned long long*)>:
c0015f78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015f7d:	75 09                	jne    c0015f88 <FAT::stat(void*, unsigned long long*)+0x10>
c0015f7f:	b8 04 00 00 00       	mov    eax,0x4
c0015f84:	c3                   	ret    
c0015f85:	8d 76 00             	lea    esi,[esi+0x0]
c0015f88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015f8d:	75 09                	jne    c0015f98 <FAT::stat(void*, unsigned long long*)+0x20>
c0015f8f:	b8 04 00 00 00       	mov    eax,0x4
c0015f94:	c3                   	ret    
c0015f95:	8d 76 00             	lea    esi,[esi+0x0]
c0015f98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0015f9f:	ba 00 00 00 00       	mov    edx,0x0
c0015fa4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fa8:	89 01                	mov    DWORD PTR [ecx],eax
c0015faa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015fad:	b8 00 00 00 00       	mov    eax,0x0
c0015fb2:	c3                   	ret    
c0015fb3:	90                   	nop

c0015fb4 <FAT::~FAT()>:
c0015fb4:	83 ec 0c             	sub    esp,0xc
c0015fb7:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c0015fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc0:	89 10                	mov    DWORD PTR [eax],edx
c0015fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc6:	83 ec 0c             	sub    esp,0xc
c0015fc9:	50                   	push   eax
c0015fca:	e8 cb 47 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	90                   	nop
c0015fd3:	83 c4 0c             	add    esp,0xc
c0015fd6:	c3                   	ret    
c0015fd7:	90                   	nop

c0015fd8 <FAT::~FAT()>:
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	83 ec 0c             	sub    esp,0xc
c0015fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fe2:	e8 cd ff ff ff       	call   c0015fb4 <FAT::~FAT()>
c0015fe7:	83 c4 10             	add    esp,0x10
c0015fea:	83 ec 08             	sub    esp,0x8
c0015fed:	6a 08                	push   0x8
c0015fef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ff3:	e8 66 43 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0015ff8:	83 c4 10             	add    esp,0x10
c0015ffb:	83 c4 0c             	add    esp,0xc
c0015ffe:	c3                   	ret    
c0015fff:	90                   	nop

c0016000 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0016000:	83 ec 1c             	sub    esp,0x1c
c0016003:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001600a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001600f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016013:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c001601a:	83 f8 ff             	cmp    eax,0xffffffff
c001601d:	75 35                	jne    c0016054 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001601f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016023:	88 c2                	mov    dl,al
c0016025:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c001602a:	01 d0                	add    eax,edx
c001602c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016030:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c0016036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001603a:	89 14 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],edx
c0016041:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0016046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001604a:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016051:	eb 19                	jmp    c001606c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016053:	90                   	nop
c0016054:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016058:	88 c2                	mov    dl,al
c001605a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001605e:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c0016065:	01 d0                	add    eax,edx
c0016067:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001606b:	90                   	nop
c001606c:	83 ec 04             	sub    esp,0x4
c001606f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016077:	8d 44 24 15          	lea    eax,[esp+0x15]
c001607b:	50                   	push   eax
c001607c:	e8 d3 ed fe ff       	call   c0004e54 <f_getlabel>
c0016081:	83 c4 10             	add    esp,0x10
c0016084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016088:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001608d:	75 09                	jne    c0016098 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001608f:	b8 00 00 00 00       	mov    eax,0x0
c0016094:	eb 0a                	jmp    c00160a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016096:	66 90                	xchg   ax,ax
c0016098:	b8 01 00 00 00       	mov    eax,0x1
c001609d:	8d 76 00             	lea    esi,[esi+0x0]
c00160a0:	83 c4 1c             	add    esp,0x1c
c00160a3:	c3                   	ret    

c00160a4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00160a4:	57                   	push   edi
c00160a5:	83 ec 58             	sub    esp,0x58
c00160a8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00160b0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00160b4:	b8 00 00 00 00       	mov    eax,0x0
c00160b9:	b9 0f 00 00 00       	mov    ecx,0xf
c00160be:	fc                   	cld    
c00160bf:	89 d7                	mov    edi,edx
c00160c1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00160c3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00160c7:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c00160ce:	83 f8 ff             	cmp    eax,0xffffffff
c00160d1:	75 35                	jne    c0016108 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00160d3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00160d7:	88 c2                	mov    dl,al
c00160d9:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00160de:	01 d0                	add    eax,edx
c00160e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00160e4:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c00160ea:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00160ee:	89 14 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],edx
c00160f5:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00160fa:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00160fe:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c0016105:	eb 19                	jmp    c0016120 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0016107:	90                   	nop
c0016108:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001610c:	88 c2                	mov    dl,al
c001610e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016112:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c0016119:	01 d0                	add    eax,edx
c001611b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001611f:	90                   	nop
c0016120:	83 ec 08             	sub    esp,0x8
c0016123:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0016127:	8d 44 24 18          	lea    eax,[esp+0x18]
c001612b:	50                   	push   eax
c001612c:	e8 8f a6 fe ff       	call   c00007c0 <strcat>
c0016131:	83 c4 10             	add    esp,0x10
c0016134:	83 ec 0c             	sub    esp,0xc
c0016137:	8d 44 24 18          	lea    eax,[esp+0x18]
c001613b:	50                   	push   eax
c001613c:	e8 64 ee fe ff       	call   c0004fa5 <f_setlabel>
c0016141:	83 c4 10             	add    esp,0x10
c0016144:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016148:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001614d:	75 09                	jne    c0016158 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001614f:	b8 00 00 00 00       	mov    eax,0x0
c0016154:	eb 0a                	jmp    c0016160 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016156:	66 90                	xchg   ax,ax
c0016158:	b8 01 00 00 00       	mov    eax,0x1
c001615d:	8d 76 00             	lea    esi,[esi+0x0]
c0016160:	83 c4 58             	add    esp,0x58
c0016163:	5f                   	pop    edi
c0016164:	c3                   	ret    
c0016165:	90                   	nop
c0016166:	66 90                	xchg   ax,ax

c0016168 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016168:	83 ec 2c             	sub    esp,0x2c
c001616b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016173:	83 ec 08             	sub    esp,0x8
c0016176:	68 64 e9 01 c0       	push   0xc001e964
c001617b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001617f:	e8 5c a5 fe ff       	call   c00006e0 <strcmp>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	85 c0                	test   eax,eax
c0016189:	0f 94 c0             	sete   al
c001618c:	84 c0                	test   al,al
c001618e:	74 10                	je     c00161a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016190:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016198:	e9 b3 00 00 00       	jmp    c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001619d:	8d 76 00             	lea    esi,[esi+0x0]
c00161a0:	83 ec 08             	sub    esp,0x8
c00161a3:	68 56 e9 01 c0       	push   0xc001e956
c00161a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161ac:	e8 2f a5 fe ff       	call   c00006e0 <strcmp>
c00161b1:	83 c4 10             	add    esp,0x10
c00161b4:	85 c0                	test   eax,eax
c00161b6:	0f 94 c0             	sete   al
c00161b9:	84 c0                	test   al,al
c00161bb:	74 0f                	je     c00161cc <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00161bd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161c5:	e9 86 00 00 00       	jmp    c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161ca:	66 90                	xchg   ax,ax
c00161cc:	83 ec 08             	sub    esp,0x8
c00161cf:	68 5c e9 01 c0       	push   0xc001e95c
c00161d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161d8:	e8 03 a5 fe ff       	call   c00006e0 <strcmp>
c00161dd:	83 c4 10             	add    esp,0x10
c00161e0:	85 c0                	test   eax,eax
c00161e2:	0f 94 c0             	sete   al
c00161e5:	84 c0                	test   al,al
c00161e7:	74 0b                	je     c00161f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00161e9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00161f1:	eb 5d                	jmp    c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00161f3:	90                   	nop
c00161f4:	83 ec 08             	sub    esp,0x8
c00161f7:	68 bc c9 01 c0       	push   0xc001c9bc
c00161fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016200:	e8 db a4 fe ff       	call   c00006e0 <strcmp>
c0016205:	83 c4 10             	add    esp,0x10
c0016208:	85 c0                	test   eax,eax
c001620a:	0f 94 c0             	sete   al
c001620d:	84 c0                	test   al,al
c001620f:	74 0b                	je     c001621c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016211:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0016219:	eb 35                	jmp    c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001621b:	90                   	nop
c001621c:	83 ec 08             	sub    esp,0x8
c001621f:	68 62 e9 01 c0       	push   0xc001e962
c0016224:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016228:	e8 b3 a4 fe ff       	call   c00006e0 <strcmp>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	85 c0                	test   eax,eax
c0016232:	0f 94 c0             	sete   al
c0016235:	84 c0                	test   al,al
c0016237:	74 0b                	je     c0016244 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016239:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016241:	eb 0d                	jmp    c0016250 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016243:	90                   	nop
c0016244:	b8 08 00 00 00       	mov    eax,0x8
c0016249:	e9 ea 00 00 00       	jmp    c0016338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001624e:	66 90                	xchg   ax,ax
c0016250:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016257:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001625c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016260:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c0016267:	83 f8 ff             	cmp    eax,0xffffffff
c001626a:	75 34                	jne    c00162a0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001626c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016270:	88 c2                	mov    dl,al
c0016272:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0016277:	01 d0                	add    eax,edx
c0016279:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001627d:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c0016283:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016287:	89 14 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],edx
c001628e:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0016293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016297:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c001629e:	eb 18                	jmp    c00162b8 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00162a0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00162a4:	88 c2                	mov    dl,al
c00162a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00162aa:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c00162b1:	01 d0                	add    eax,edx
c00162b3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00162b7:	90                   	nop
c00162b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162bc:	88 04 24             	mov    BYTE PTR [esp],al
c00162bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00162c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162c7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00162cf:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00162d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162dc:	83 ec 0c             	sub    esp,0xc
c00162df:	68 00 20 00 00       	push   0x2000
c00162e4:	e8 d0 14 ff ff       	call   c00077b9 <malloc>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00162f0:	68 00 20 00 00       	push   0x2000
c00162f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00162fd:	50                   	push   eax
c00162fe:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0016302:	50                   	push   eax
c0016303:	e8 8d ef fe ff       	call   c0005295 <f_mkfs>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001630f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016314:	75 0a                	jne    c0016320 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0016316:	b8 00 00 00 00       	mov    eax,0x0
c001631b:	eb 1b                	jmp    c0016338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001631d:	8d 76 00             	lea    esi,[esi+0x0]
c0016320:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016325:	75 09                	jne    c0016330 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0016327:	b8 09 00 00 00       	mov    eax,0x9
c001632c:	eb 0a                	jmp    c0016338 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001632e:	66 90                	xchg   ax,ax
c0016330:	b8 01 00 00 00       	mov    eax,0x1
c0016335:	8d 76 00             	lea    esi,[esi+0x0]
c0016338:	83 c4 2c             	add    esp,0x2c
c001633b:	c3                   	ret    

c001633c <FAT::tryMount(LogicalDisk*, int)>:
c001633c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016342:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0016347:	83 f8 14             	cmp    eax,0x14
c001634a:	75 18                	jne    c0016364 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	68 68 e9 01 c0       	push   0xc001e968
c0016354:	e8 5e 9d ff ff       	call   c00100b7 <KePanic(char const*)>
c0016359:	83 c4 10             	add    esp,0x10
c001635c:	b0 00                	mov    al,0x0
c001635e:	e9 e9 01 00 00       	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016363:	90                   	nop
c0016364:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001636b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016371:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016377:	3d 00 02 00 00       	cmp    eax,0x200
c001637c:	74 0a                	je     c0016388 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001637e:	b0 00                	mov    al,0x0
c0016380:	e9 c7 01 00 00       	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016385:	8d 76 00             	lea    esi,[esi+0x0]
c0016388:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016390:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016397:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c001639e:	83 f8 ff             	cmp    eax,0xffffffff
c00163a1:	74 09                	je     c00163ac <FAT::tryMount(LogicalDisk*, int)+0x70>
c00163a3:	b0 01                	mov    al,0x1
c00163a5:	e9 a2 01 00 00       	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00163aa:	66 90                	xchg   ax,ax
c00163ac:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00163b6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00163be:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00163c5:	88 c2                	mov    dl,al
c00163c7:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00163cc:	01 d0                	add    eax,edx
c00163ce:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00163d5:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c00163db:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00163e2:	89 14 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],edx
c00163e9:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00163ee:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00163f5:	89 14 85 20 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7e0],edx
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	68 34 02 00 00       	push   0x234
c0016404:	e8 b0 13 ff ff       	call   c00077b9 <malloc>
c0016409:	83 c4 10             	add    esp,0x10
c001640c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016413:	83 ec 04             	sub    esp,0x4
c0016416:	6a 00                	push   0x0
c0016418:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001641f:	50                   	push   eax
c0016420:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016427:	e8 8f d6 fe ff       	call   c0003abb <f_mount>
c001642c:	83 c4 10             	add    esp,0x10
c001642f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016436:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001643e:	74 1c                	je     c001645c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001644a:	e8 8a 13 ff ff       	call   c00077d9 <rfree>
c001644f:	83 c4 10             	add    esp,0x10
c0016452:	b0 00                	mov    al,0x0
c0016454:	e9 f3 00 00 00       	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016459:	8d 76 00             	lea    esi,[esi+0x0]
c001645c:	83 ec 04             	sub    esp,0x4
c001645f:	68 00 01 00 00       	push   0x100
c0016464:	6a 00                	push   0x0
c0016466:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001646d:	50                   	push   eax
c001646e:	e8 5d a0 fe ff       	call   c00004d0 <memset>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	83 ec 08             	sub    esp,0x8
c0016479:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016480:	50                   	push   eax
c0016481:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016488:	50                   	push   eax
c0016489:	e8 32 a3 fe ff       	call   c00007c0 <strcat>
c001648e:	83 c4 10             	add    esp,0x10
c0016491:	83 ec 08             	sub    esp,0x8
c0016494:	68 76 e9 01 c0       	push   0xc001e976
c0016499:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00164a0:	50                   	push   eax
c00164a1:	e8 1a a3 fe ff       	call   c00007c0 <strcat>
c00164a6:	83 c4 10             	add    esp,0x10
c00164a9:	83 ec 04             	sub    esp,0x4
c00164ac:	6a 01                	push   0x1
c00164ae:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00164b5:	50                   	push   eax
c00164b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164ba:	50                   	push   eax
c00164bb:	e8 5d d6 fe ff       	call   c0003b1d <f_open>
c00164c0:	83 c4 10             	add    esp,0x10
c00164c3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00164ca:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00164d1:	85 c0                	test   eax,eax
c00164d3:	74 0b                	je     c00164e0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00164d5:	78 31                	js     c0016508 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00164d7:	83 e8 04             	sub    eax,0x4
c00164da:	83 f8 01             	cmp    eax,0x1
c00164dd:	77 29                	ja     c0016508 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00164df:	90                   	nop
c00164e0:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00164ef:	50                   	push   eax
c00164f0:	e8 db dd fe ff       	call   c00042d0 <f_close>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	90                   	nop
c00164f9:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016501:	74 41                	je     c0016544 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016503:	eb 33                	jmp    c0016538 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016505:	8d 76 00             	lea    esi,[esi+0x0]
c0016508:	83 ec 0c             	sub    esp,0xc
c001650b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016512:	e8 c2 12 ff ff       	call   c00077d9 <rfree>
c0016517:	83 c4 10             	add    esp,0x10
c001651a:	83 ec 04             	sub    esp,0x4
c001651d:	6a 00                	push   0x0
c001651f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016526:	50                   	push   eax
c0016527:	6a 00                	push   0x0
c0016529:	e8 8d d5 fe ff       	call   c0003abb <f_mount>
c001652e:	83 c4 10             	add    esp,0x10
c0016531:	b0 00                	mov    al,0x0
c0016533:	eb 17                	jmp    c001654c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016535:	8d 76 00             	lea    esi,[esi+0x0]
c0016538:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c001653d:	40                   	inc    eax
c001653e:	a3 80 37 02 c0       	mov    ds:0xc0023780,eax
c0016543:	90                   	nop
c0016544:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001654b:	90                   	nop
c001654c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016552:	c3                   	ret    
c0016553:	90                   	nop

c0016554 <FAT::allocateSwapfile(char const*, int)>:
c0016554:	55                   	push   ebp
c0016555:	57                   	push   edi
c0016556:	56                   	push   esi
c0016557:	53                   	push   ebx
c0016558:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001655e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016569:	83 ec 0c             	sub    esp,0xc
c001656c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016573:	e8 41 12 ff ff       	call   c00077b9 <malloc>
c0016578:	83 c4 10             	add    esp,0x10
c001657b:	89 c7                	mov    edi,eax
c001657d:	a1 f0 36 02 c0       	mov    eax,ds:0xc00236f0
c0016582:	83 ec 04             	sub    esp,0x4
c0016585:	50                   	push   eax
c0016586:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001658d:	57                   	push   edi
c001658e:	e8 37 44 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c0016593:	83 c4 10             	add    esp,0x10
c0016596:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001659d:	83 ec 04             	sub    esp,0x4
c00165a0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00165a4:	50                   	push   eax
c00165a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00165a9:	50                   	push   eax
c00165aa:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00165b1:	e8 80 47 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00165b6:	83 c4 10             	add    esp,0x10
c00165b9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00165c0:	c1 e0 14             	shl    eax,0x14
c00165c3:	89 c7                	mov    edi,eax
c00165c5:	89 c5                	mov    ebp,eax
c00165c7:	c1 fd 1f             	sar    ebp,0x1f
c00165ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00165d2:	89 f9                	mov    ecx,edi
c00165d4:	31 c1                	xor    ecx,eax
c00165d6:	89 cb                	mov    ebx,ecx
c00165d8:	89 e9                	mov    ecx,ebp
c00165da:	31 d1                	xor    ecx,edx
c00165dc:	89 ce                	mov    esi,ecx
c00165de:	89 f0                	mov    eax,esi
c00165e0:	09 d8                	or     eax,ebx
c00165e2:	0f 84 9c 00 00 00    	je     c0016684 <FAT::allocateSwapfile(char const*, int)+0x130>
c00165e8:	83 ec 0c             	sub    esp,0xc
c00165eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00165f2:	e8 0b 46 ff ff       	call   c000ac02 <File::unlink()>
c00165f7:	83 c4 10             	add    esp,0x10
c00165fa:	83 ec 08             	sub    esp,0x8
c00165fd:	6a 12                	push   0x12
c00165ff:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016606:	e8 7f 44 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016615:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001661b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016622:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016629:	c1 e0 14             	shl    eax,0x14
c001662c:	83 ec 04             	sub    esp,0x4
c001662f:	6a 01                	push   0x1
c0016631:	50                   	push   eax
c0016632:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016639:	e8 f7 ea fe ff       	call   c0005135 <f_expand>
c001663e:	83 c4 10             	add    esp,0x10
c0016641:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016648:	8b 00                	mov    eax,DWORD PTR [eax]
c001664a:	83 c0 10             	add    eax,0x10
c001664d:	8b 00                	mov    eax,DWORD PTR [eax]
c001664f:	83 ec 0c             	sub    esp,0xc
c0016652:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016656:	52                   	push   edx
c0016657:	8d 54 24 30          	lea    edx,[esp+0x30]
c001665b:	52                   	push   edx
c001665c:	6a 00                	push   0x0
c001665e:	68 00 04 00 00       	push   0x400
c0016663:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001666a:	ff d0                	call   eax
c001666c:	83 c4 20             	add    esp,0x20
c001666f:	83 ec 0c             	sub    esp,0xc
c0016672:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016679:	e8 6a 44 ff ff       	call   c000aae8 <File::close()>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	8d 76 00             	lea    esi,[esi+0x0]
c0016684:	83 ec 08             	sub    esp,0x8
c0016687:	6a 01                	push   0x1
c0016689:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016690:	e8 f5 43 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001669f:	8b 00                	mov    eax,DWORD PTR [eax]
c00166a1:	83 c0 0c             	add    eax,0xc
c00166a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00166a6:	83 ec 0c             	sub    esp,0xc
c00166a9:	8d 54 24 24          	lea    edx,[esp+0x24]
c00166ad:	52                   	push   edx
c00166ae:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00166b2:	52                   	push   edx
c00166b3:	6a 00                	push   0x0
c00166b5:	6a 04                	push   0x4
c00166b7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00166be:	ff d0                	call   eax
c00166c0:	83 c4 20             	add    esp,0x20
c00166c3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166ca:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00166d0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166d7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00166de:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00166e1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00166e8:	83 ec 0c             	sub    esp,0xc
c00166eb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166f2:	e8 f1 43 ff ff       	call   c000aae8 <File::close()>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016701:	ba 00 00 00 00       	mov    edx,0x0
c0016706:	81 c4 3c 04 00 00    	add    esp,0x43c
c001670c:	5b                   	pop    ebx
c001670d:	5e                   	pop    esi
c001670e:	5f                   	pop    edi
c001670f:	5d                   	pop    ebp
c0016710:	c3                   	ret    
c0016711:	90                   	nop
c0016712:	66 90                	xchg   ax,ax

c0016714 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016714:	57                   	push   edi
c0016715:	56                   	push   esi
c0016716:	53                   	push   ebx
c0016717:	81 ec 50 02 00 00    	sub    esp,0x250
c001671d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016725:	74 0d                	je     c0016734 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016727:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001672f:	75 0f                	jne    c0016740 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016731:	8d 76 00             	lea    esi,[esi+0x0]
c0016734:	b8 04 00 00 00       	mov    eax,0x4
c0016739:	e9 36 01 00 00       	jmp    c0016874 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001673e:	66 90                	xchg   ax,ax
c0016740:	83 ec 08             	sub    esp,0x8
c0016743:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001674a:	50                   	push   eax
c001674b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016752:	e8 3c de fe ff       	call   c0004593 <f_readdir>
c0016757:	83 c4 10             	add    esp,0x10
c001675a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016761:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016772:	83 c0 16             	add    eax,0x16
c0016775:	50                   	push   eax
c0016776:	e8 c5 9d fe ff       	call   c0000540 <strlen>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	ba 00 00 00 00       	mov    edx,0x0
c0016783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016787:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001678b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016792:	25 ff 00 00 00       	and    eax,0xff
c0016797:	83 e0 10             	and    eax,0x10
c001679a:	74 08                	je     c00167a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001679c:	b8 02 00 00 00       	mov    eax,0x2
c00167a1:	eb 09                	jmp    c00167ac <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00167a3:	90                   	nop
c00167a4:	b8 01 00 00 00       	mov    eax,0x1
c00167a9:	8d 76 00             	lea    esi,[esi+0x0]
c00167ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167b0:	83 ec 08             	sub    esp,0x8
c00167b3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00167ba:	83 c0 16             	add    eax,0x16
c00167bd:	50                   	push   eax
c00167be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00167c2:	83 c0 10             	add    eax,0x10
c00167c5:	50                   	push   eax
c00167c6:	e8 35 9e fe ff       	call   c0000600 <strcpy>
c00167cb:	83 c4 10             	add    esp,0x10
c00167ce:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00167d5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00167dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167e0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00167e7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00167ee:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00167f5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00167fc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016803:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001680a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016811:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016818:	89 c6                	mov    esi,eax
c001681a:	89 d7                	mov    edi,edx
c001681c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001681e:	89 c8                	mov    eax,ecx
c0016820:	89 fa                	mov    edx,edi
c0016822:	89 f3                	mov    ebx,esi
c0016824:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001682b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016832:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016839:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016840:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016846:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001684d:	84 c0                	test   al,al
c001684f:	75 07                	jne    c0016858 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016851:	b8 07 00 00 00       	mov    eax,0x7
c0016856:	eb 1c                	jmp    c0016874 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016858:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001685f:	85 c0                	test   eax,eax
c0016861:	75 09                	jne    c001686c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016863:	b8 00 00 00 00       	mov    eax,0x0
c0016868:	eb 0a                	jmp    c0016874 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001686a:	66 90                	xchg   ax,ax
c001686c:	b8 01 00 00 00       	mov    eax,0x1
c0016871:	8d 76 00             	lea    esi,[esi+0x0]
c0016874:	81 c4 50 02 00 00    	add    esp,0x250
c001687a:	5b                   	pop    ebx
c001687b:	5e                   	pop    esi
c001687c:	5f                   	pop    edi
c001687d:	c3                   	ret    
c001687e:	66 90                	xchg   ax,ax

c0016880 <FAT::read(void*, unsigned long, void*, int*)>:
c0016880:	83 ec 1c             	sub    esp,0x1c
c0016883:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016888:	74 0a                	je     c0016894 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001688a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001688f:	75 0b                	jne    c001689c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016891:	8d 76 00             	lea    esi,[esi+0x0]
c0016894:	b8 04 00 00 00       	mov    eax,0x4
c0016899:	eb 41                	jmp    c00168dc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001689b:	90                   	nop
c001689c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168a0:	50                   	push   eax
c00168a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00168a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00168ad:	e8 36 d5 fe ff       	call   c0003de8 <f_read>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00168bd:	89 c2                	mov    edx,eax
c00168bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168c3:	89 10                	mov    DWORD PTR [eax],edx
c00168c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168c9:	85 c0                	test   eax,eax
c00168cb:	75 07                	jne    c00168d4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00168cd:	b8 00 00 00 00       	mov    eax,0x0
c00168d2:	eb 08                	jmp    c00168dc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00168d4:	b8 01 00 00 00       	mov    eax,0x1
c00168d9:	8d 76 00             	lea    esi,[esi+0x0]
c00168dc:	83 c4 1c             	add    esp,0x1c
c00168df:	c3                   	ret    

c00168e0 <FAT::write(void*, unsigned long, void*, int*)>:
c00168e0:	83 ec 1c             	sub    esp,0x1c
c00168e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00168e8:	74 0a                	je     c00168f4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00168ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00168ef:	75 0b                	jne    c00168fc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00168f1:	8d 76 00             	lea    esi,[esi+0x0]
c00168f4:	b8 04 00 00 00       	mov    eax,0x4
c00168f9:	eb 41                	jmp    c001693c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00168fb:	90                   	nop
c00168fc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016900:	50                   	push   eax
c0016901:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016905:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016909:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001690d:	e8 d5 d6 fe ff       	call   c0003fe7 <f_write>
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016919:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001691d:	89 c2                	mov    edx,eax
c001691f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016923:	89 10                	mov    DWORD PTR [eax],edx
c0016925:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016929:	85 c0                	test   eax,eax
c001692b:	75 07                	jne    c0016934 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001692d:	b8 00 00 00 00       	mov    eax,0x0
c0016932:	eb 08                	jmp    c001693c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016934:	b8 01 00 00 00       	mov    eax,0x1
c0016939:	8d 76 00             	lea    esi,[esi+0x0]
c001693c:	83 c4 1c             	add    esp,0x1c
c001693f:	c3                   	ret    

c0016940 <FAT::close(void*)>:
c0016940:	83 ec 1c             	sub    esp,0x1c
c0016943:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016948:	75 0a                	jne    c0016954 <FAT::close(void*)+0x14>
c001694a:	b8 04 00 00 00       	mov    eax,0x4
c001694f:	eb 3f                	jmp    c0016990 <FAT::close(void*)+0x50>
c0016951:	8d 76 00             	lea    esi,[esi+0x0]
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001695b:	e8 70 d9 fe ff       	call   c00042d0 <f_close>
c0016960:	83 c4 10             	add    esp,0x10
c0016963:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016967:	83 ec 0c             	sub    esp,0xc
c001696a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001696e:	e8 56 0e ff ff       	call   c00077c9 <free>
c0016973:	83 c4 10             	add    esp,0x10
c0016976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001697a:	85 c0                	test   eax,eax
c001697c:	75 0a                	jne    c0016988 <FAT::close(void*)+0x48>
c001697e:	b8 00 00 00 00       	mov    eax,0x0
c0016983:	eb 0b                	jmp    c0016990 <FAT::close(void*)+0x50>
c0016985:	8d 76 00             	lea    esi,[esi+0x0]
c0016988:	b8 01 00 00 00       	mov    eax,0x1
c001698d:	8d 76 00             	lea    esi,[esi+0x0]
c0016990:	83 c4 1c             	add    esp,0x1c
c0016993:	c3                   	ret    

c0016994 <FAT::closeDir(void*)>:
c0016994:	83 ec 1c             	sub    esp,0x1c
c0016997:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001699c:	75 0a                	jne    c00169a8 <FAT::closeDir(void*)+0x14>
c001699e:	b8 04 00 00 00       	mov    eax,0x4
c00169a3:	eb 3f                	jmp    c00169e4 <FAT::closeDir(void*)+0x50>
c00169a5:	8d 76 00             	lea    esi,[esi+0x0]
c00169a8:	83 ec 0c             	sub    esp,0xc
c00169ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169af:	e8 bd db fe ff       	call   c0004571 <f_closedir>
c00169b4:	83 c4 10             	add    esp,0x10
c00169b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169bb:	83 ec 0c             	sub    esp,0xc
c00169be:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169c2:	e8 02 0e ff ff       	call   c00077c9 <free>
c00169c7:	83 c4 10             	add    esp,0x10
c00169ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ce:	85 c0                	test   eax,eax
c00169d0:	75 0a                	jne    c00169dc <FAT::closeDir(void*)+0x48>
c00169d2:	b8 00 00 00 00       	mov    eax,0x0
c00169d7:	eb 0b                	jmp    c00169e4 <FAT::closeDir(void*)+0x50>
c00169d9:	8d 76 00             	lea    esi,[esi+0x0]
c00169dc:	b8 01 00 00 00       	mov    eax,0x1
c00169e1:	8d 76 00             	lea    esi,[esi+0x0]
c00169e4:	83 c4 1c             	add    esp,0x1c
c00169e7:	c3                   	ret    

c00169e8 <FAT::seek(void*, unsigned long long)>:
c00169e8:	83 ec 2c             	sub    esp,0x2c
c00169eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00169ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169fb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016a00:	75 0a                	jne    c0016a0c <FAT::seek(void*, unsigned long long)+0x24>
c0016a02:	b8 04 00 00 00       	mov    eax,0x4
c0016a07:	eb 33                	jmp    c0016a3c <FAT::seek(void*, unsigned long long)+0x54>
c0016a09:	8d 76 00             	lea    esi,[esi+0x0]
c0016a0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a10:	83 ec 08             	sub    esp,0x8
c0016a13:	50                   	push   eax
c0016a14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a18:	e8 e2 d8 fe ff       	call   c00042ff <f_lseek>
c0016a1d:	83 c4 10             	add    esp,0x10
c0016a20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a28:	85 c0                	test   eax,eax
c0016a2a:	75 08                	jne    c0016a34 <FAT::seek(void*, unsigned long long)+0x4c>
c0016a2c:	b8 00 00 00 00       	mov    eax,0x0
c0016a31:	eb 09                	jmp    c0016a3c <FAT::seek(void*, unsigned long long)+0x54>
c0016a33:	90                   	nop
c0016a34:	b8 01 00 00 00       	mov    eax,0x1
c0016a39:	8d 76 00             	lea    esi,[esi+0x0]
c0016a3c:	83 c4 2c             	add    esp,0x2c
c0016a3f:	c3                   	ret    

c0016a40 <fatWrapperReadDisk>:
c0016a40:	53                   	push   ebx
c0016a41:	83 ec 18             	sub    esp,0x18
c0016a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a4c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016a50:	25 ff 00 00 00       	and    eax,0xff
c0016a55:	8b 0c 85 80 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd680]
c0016a5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016a64:	ba 00 00 00 00       	mov    edx,0x0
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a70:	53                   	push   ebx
c0016a71:	52                   	push   edx
c0016a72:	50                   	push   eax
c0016a73:	51                   	push   ecx
c0016a74:	e8 c3 60 ff ff       	call   c000cb3c <LogicalDisk::read(unsigned long long, int, void*)>
c0016a79:	83 c4 20             	add    esp,0x20
c0016a7c:	83 c4 18             	add    esp,0x18
c0016a7f:	5b                   	pop    ebx
c0016a80:	c3                   	ret    
c0016a81:	8d 76 00             	lea    esi,[esi+0x0]

c0016a84 <fatWrapperWriteDisk>:
c0016a84:	53                   	push   ebx
c0016a85:	83 ec 18             	sub    esp,0x18
c0016a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016a90:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016a94:	25 ff 00 00 00       	and    eax,0xff
c0016a99:	8b 0c 85 80 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd680]
c0016aa0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016aa4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016aa8:	ba 00 00 00 00       	mov    edx,0x0
c0016aad:	83 ec 0c             	sub    esp,0xc
c0016ab0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ab4:	53                   	push   ebx
c0016ab5:	52                   	push   edx
c0016ab6:	50                   	push   eax
c0016ab7:	51                   	push   ecx
c0016ab8:	e8 eb 60 ff ff       	call   c000cba8 <LogicalDisk::write(unsigned long long, int, void*)>
c0016abd:	83 c4 20             	add    esp,0x20
c0016ac0:	83 c4 18             	add    esp,0x18
c0016ac3:	5b                   	pop    ebx
c0016ac4:	c3                   	ret    
c0016ac5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ac8 <fatWrapperIoctl>:
c0016ac8:	53                   	push   ebx
c0016ac9:	83 ec 28             	sub    esp,0x28
c0016acc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ad0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ad4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016ad8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016adc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016ae1:	75 35                	jne    c0016b18 <fatWrapperIoctl+0x50>
c0016ae3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ae7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016aeb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016aef:	25 ff 00 00 00       	and    eax,0xff
c0016af4:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c0016afb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b01:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b07:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b0b:	66 89 02             	mov    WORD PTR [edx],ax
c0016b0e:	b8 00 00 00 00       	mov    eax,0x0
c0016b13:	e9 c4 00 00 00       	jmp    c0016bdc <fatWrapperIoctl+0x114>
c0016b18:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016b1d:	75 75                	jne    c0016b94 <fatWrapperIoctl+0xcc>
c0016b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b27:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b2b:	25 ff 00 00 00       	and    eax,0xff
c0016b30:	8b 04 85 80 29 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd680]
c0016b37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016b3d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016b43:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016b49:	89 c8                	mov    eax,ecx
c0016b4b:	89 da                	mov    edx,ebx
c0016b4d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b51:	c1 e0 0a             	shl    eax,0xa
c0016b54:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016b58:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016b5e:	8b 0c 8d 80 29 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd680]
c0016b65:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016b6b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016b71:	89 cb                	mov    ebx,ecx
c0016b73:	c1 fb 1f             	sar    ebx,0x1f
c0016b76:	53                   	push   ebx
c0016b77:	51                   	push   ecx
c0016b78:	52                   	push   edx
c0016b79:	50                   	push   eax
c0016b7a:	e8 41 50 00 00       	call   c001bbc0 <__udivdi3>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	89 c2                	mov    edx,eax
c0016b84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b88:	89 10                	mov    DWORD PTR [eax],edx
c0016b8a:	b8 00 00 00 00       	mov    eax,0x0
c0016b8f:	eb 4b                	jmp    c0016bdc <fatWrapperIoctl+0x114>
c0016b91:	8d 76 00             	lea    esi,[esi+0x0]
c0016b94:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016b99:	75 09                	jne    c0016ba4 <fatWrapperIoctl+0xdc>
c0016b9b:	b8 00 00 00 00       	mov    eax,0x0
c0016ba0:	eb 3a                	jmp    c0016bdc <fatWrapperIoctl+0x114>
c0016ba2:	66 90                	xchg   ax,ax
c0016ba4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016ba9:	75 19                	jne    c0016bc4 <fatWrapperIoctl+0xfc>
c0016bab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016baf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bb3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bb7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016bbd:	b8 00 00 00 00       	mov    eax,0x0
c0016bc2:	eb 18                	jmp    c0016bdc <fatWrapperIoctl+0x114>
c0016bc4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016bc9:	75 09                	jne    c0016bd4 <fatWrapperIoctl+0x10c>
c0016bcb:	b8 00 00 00 00       	mov    eax,0x0
c0016bd0:	eb 0a                	jmp    c0016bdc <fatWrapperIoctl+0x114>
c0016bd2:	66 90                	xchg   ax,ax
c0016bd4:	b8 04 00 00 00       	mov    eax,0x4
c0016bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bdc:	83 c4 28             	add    esp,0x28
c0016bdf:	5b                   	pop    ebx
c0016be0:	c3                   	ret    
c0016be1:	90                   	nop
c0016be2:	66 90                	xchg   ax,ax

c0016be4 <FAT::FAT()>:
c0016be4:	83 ec 1c             	sub    esp,0x1c
c0016be7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016beb:	83 ec 0c             	sub    esp,0xc
c0016bee:	50                   	push   eax
c0016bef:	e8 82 3b ff ff       	call   c000a776 <Filesystem::Filesystem()>
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	ba 8c e9 01 c0       	mov    edx,0xc001e98c
c0016bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c00:	89 10                	mov    DWORD PTR [eax],edx
c0016c02:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0016c0c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016c14:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016c19:	7f 15                	jg     c0016c30 <FAT::FAT()+0x4c>
c0016c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c1f:	c7 04 85 a0 37 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc860],0xffffffff
c0016c2a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016c2e:	eb e4                	jmp    c0016c14 <FAT::FAT()+0x30>
c0016c30:	90                   	nop
c0016c31:	83 c4 1c             	add    esp,0x1c
c0016c34:	c3                   	ret    
c0016c35:	90                   	nop
c0016c36:	66 90                	xchg   ax,ax

c0016c38 <FAT::fixFilepath(char*)>:
c0016c38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c3c:	8a 00                	mov    al,BYTE PTR [eax]
c0016c3e:	3c 40                	cmp    al,0x40
c0016c40:	7e 2e                	jle    c0016c70 <FAT::fixFilepath(char*)+0x38>
c0016c42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c46:	8a 00                	mov    al,BYTE PTR [eax]
c0016c48:	83 e8 41             	sub    eax,0x41
c0016c4b:	88 c2                	mov    dl,al
c0016c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c51:	88 10                	mov    BYTE PTR [eax],dl
c0016c53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c57:	8a 00                	mov    al,BYTE PTR [eax]
c0016c59:	0f be c0             	movsx  eax,al
c0016c5c:	8b 04 85 a0 37 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc860]
c0016c63:	83 c0 30             	add    eax,0x30
c0016c66:	88 c2                	mov    dl,al
c0016c68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c6c:	88 10                	mov    BYTE PTR [eax],dl
c0016c6e:	66 90                	xchg   ax,ax
c0016c70:	90                   	nop
c0016c71:	c3                   	ret    
c0016c72:	66 90                	xchg   ax,ax

c0016c74 <FAT::open(char const*, void**, FileOpenMode)>:
c0016c74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016c7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016c82:	74 0c                	je     c0016c90 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016c84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016c8c:	75 0e                	jne    c0016c9c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016c8e:	66 90                	xchg   ax,ax
c0016c90:	b8 04 00 00 00       	mov    eax,0x4
c0016c95:	e9 0a 01 00 00       	jmp    c0016da4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016c9a:	66 90                	xchg   ax,ax
c0016c9c:	83 ec 08             	sub    esp,0x8
c0016c9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ca6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016caa:	50                   	push   eax
c0016cab:	e8 50 99 fe ff       	call   c0000600 <strcpy>
c0016cb0:	83 c4 10             	add    esp,0x10
c0016cb3:	83 ec 08             	sub    esp,0x8
c0016cb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016cba:	50                   	push   eax
c0016cbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016cc2:	e8 71 ff ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016cd2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016cd9:	83 e0 01             	and    eax,0x1
c0016cdc:	74 0a                	je     c0016ce8 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016cde:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016ce6:	66 90                	xchg   ax,ax
c0016ce8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016cef:	83 e0 04             	and    eax,0x4
c0016cf2:	74 10                	je     c0016d04 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016cf4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016cfc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d04:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d0b:	83 e0 02             	and    eax,0x2
c0016d0e:	74 08                	je     c0016d18 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016d10:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016d18:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d1f:	83 e0 08             	and    eax,0x8
c0016d22:	74 08                	je     c0016d2c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016d24:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016d2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d33:	83 e0 10             	and    eax,0x10
c0016d36:	74 08                	je     c0016d40 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016d38:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	68 28 02 00 00       	push   0x228
c0016d48:	e8 6c 0a ff ff       	call   c00077b9 <malloc>
c0016d4d:	83 c4 10             	add    esp,0x10
c0016d50:	89 c2                	mov    edx,eax
c0016d52:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016d59:	89 10                	mov    DWORD PTR [eax],edx
c0016d5b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016d62:	31 d2                	xor    edx,edx
c0016d64:	88 c2                	mov    dl,al
c0016d66:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d6f:	83 ec 04             	sub    esp,0x4
c0016d72:	52                   	push   edx
c0016d73:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016d77:	52                   	push   edx
c0016d78:	50                   	push   eax
c0016d79:	e8 9f cd fe ff       	call   c0003b1d <f_open>
c0016d7e:	83 c4 10             	add    esp,0x10
c0016d81:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016d88:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016d90:	74 0a                	je     c0016d9c <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016d92:	b8 01 00 00 00       	mov    eax,0x1
c0016d97:	eb 0b                	jmp    c0016da4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d99:	8d 76 00             	lea    esi,[esi+0x0]
c0016d9c:	b8 00 00 00 00       	mov    eax,0x0
c0016da1:	8d 76 00             	lea    esi,[esi+0x0]
c0016da4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016daa:	c3                   	ret    
c0016dab:	90                   	nop

c0016dac <FAT::openDir(char const*, void**)>:
c0016dac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016db2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016dba:	74 0c                	je     c0016dc8 <FAT::openDir(char const*, void**)+0x1c>
c0016dbc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016dc4:	75 0e                	jne    c0016dd4 <FAT::openDir(char const*, void**)+0x28>
c0016dc6:	66 90                	xchg   ax,ax
c0016dc8:	b8 04 00 00 00       	mov    eax,0x4
c0016dcd:	e9 82 00 00 00       	jmp    c0016e54 <FAT::openDir(char const*, void**)+0xa8>
c0016dd2:	66 90                	xchg   ax,ax
c0016dd4:	83 ec 08             	sub    esp,0x8
c0016dd7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016dde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016de2:	50                   	push   eax
c0016de3:	e8 18 98 fe ff       	call   c0000600 <strcpy>
c0016de8:	83 c4 10             	add    esp,0x10
c0016deb:	83 ec 08             	sub    esp,0x8
c0016dee:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016df2:	50                   	push   eax
c0016df3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016dfa:	e8 39 fe ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	83 ec 0c             	sub    esp,0xc
c0016e05:	6a 30                	push   0x30
c0016e07:	e8 ad 09 ff ff       	call   c00077b9 <malloc>
c0016e0c:	83 c4 10             	add    esp,0x10
c0016e0f:	89 c2                	mov    edx,eax
c0016e11:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e18:	89 10                	mov    DWORD PTR [eax],edx
c0016e1a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e21:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e23:	83 ec 08             	sub    esp,0x8
c0016e26:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016e2a:	52                   	push   edx
c0016e2b:	50                   	push   eax
c0016e2c:	e8 75 d6 fe ff       	call   c00044a6 <f_opendir>
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016e3b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016e43:	74 07                	je     c0016e4c <FAT::openDir(char const*, void**)+0xa0>
c0016e45:	b8 01 00 00 00       	mov    eax,0x1
c0016e4a:	eb 08                	jmp    c0016e54 <FAT::openDir(char const*, void**)+0xa8>
c0016e4c:	b8 00 00 00 00       	mov    eax,0x0
c0016e51:	8d 76 00             	lea    esi,[esi+0x0]
c0016e54:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e5a:	c3                   	ret    
c0016e5b:	90                   	nop

c0016e5c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016e5c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016e62:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016e6a:	75 0c                	jne    c0016e78 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016e6c:	b8 04 00 00 00       	mov    eax,0x4
c0016e71:	e9 d6 00 00 00       	jmp    c0016f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016e76:	66 90                	xchg   ax,ax
c0016e78:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016e80:	75 0a                	jne    c0016e8c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016e82:	b8 04 00 00 00       	mov    eax,0x4
c0016e87:	e9 c0 00 00 00       	jmp    c0016f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016e8c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016e94:	75 0a                	jne    c0016ea0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016e96:	b8 04 00 00 00       	mov    eax,0x4
c0016e9b:	e9 ac 00 00 00       	jmp    c0016f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ea0:	83 ec 08             	sub    esp,0x8
c0016ea3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016eaa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016eb1:	50                   	push   eax
c0016eb2:	e8 49 97 fe ff       	call   c0000600 <strcpy>
c0016eb7:	83 c4 10             	add    esp,0x10
c0016eba:	83 ec 08             	sub    esp,0x8
c0016ebd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016ec4:	50                   	push   eax
c0016ec5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016ecc:	e8 67 fd ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c0016ed1:	83 c4 10             	add    esp,0x10
c0016ed4:	83 ec 08             	sub    esp,0x8
c0016ed7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016edb:	50                   	push   eax
c0016edc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016ee3:	50                   	push   eax
c0016ee4:	e8 3c d7 fe ff       	call   c0004625 <f_stat>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016ef3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016efa:	85 c0                	test   eax,eax
c0016efc:	74 0a                	je     c0016f08 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016efe:	83 f8 04             	cmp    eax,0x4
c0016f01:	74 39                	je     c0016f3c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016f03:	eb 3f                	jmp    c0016f44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016f05:	8d 76 00             	lea    esi,[esi+0x0]
c0016f08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f0c:	25 ff 00 00 00       	and    eax,0xff
c0016f11:	83 e0 10             	and    eax,0x10
c0016f14:	0f 95 c2             	setne  dl
c0016f17:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016f1e:	88 10                	mov    BYTE PTR [eax],dl
c0016f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f24:	ba 00 00 00 00       	mov    edx,0x0
c0016f29:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016f30:	89 01                	mov    DWORD PTR [ecx],eax
c0016f32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f35:	b8 00 00 00 00       	mov    eax,0x0
c0016f3a:	eb 10                	jmp    c0016f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f3c:	b8 02 00 00 00       	mov    eax,0x2
c0016f41:	eb 09                	jmp    c0016f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f43:	90                   	nop
c0016f44:	b8 01 00 00 00       	mov    eax,0x1
c0016f49:	8d 76 00             	lea    esi,[esi+0x0]
c0016f4c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0016f52:	c3                   	ret    
c0016f53:	90                   	nop

c0016f54 <FAT::unlink(char const*)>:
c0016f54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016f62:	75 08                	jne    c0016f6c <FAT::unlink(char const*)+0x18>
c0016f64:	b8 04 00 00 00       	mov    eax,0x4
c0016f69:	eb 61                	jmp    c0016fcc <FAT::unlink(char const*)+0x78>
c0016f6b:	90                   	nop
c0016f6c:	83 ec 08             	sub    esp,0x8
c0016f6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016f76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f7a:	50                   	push   eax
c0016f7b:	e8 80 96 fe ff       	call   c0000600 <strcpy>
c0016f80:	83 c4 10             	add    esp,0x10
c0016f83:	83 ec 08             	sub    esp,0x8
c0016f86:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016f8a:	50                   	push   eax
c0016f8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016f92:	e8 a1 fc ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c0016f97:	83 c4 10             	add    esp,0x10
c0016f9a:	83 ec 0c             	sub    esp,0xc
c0016f9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016fa1:	50                   	push   eax
c0016fa2:	e8 e3 d8 fe ff       	call   c000488a <f_unlink>
c0016fa7:	83 c4 10             	add    esp,0x10
c0016faa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016fb1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0016fb8:	85 c0                	test   eax,eax
c0016fba:	75 08                	jne    c0016fc4 <FAT::unlink(char const*)+0x70>
c0016fbc:	b8 00 00 00 00       	mov    eax,0x0
c0016fc1:	eb 09                	jmp    c0016fcc <FAT::unlink(char const*)+0x78>
c0016fc3:	90                   	nop
c0016fc4:	b8 01 00 00 00       	mov    eax,0x1
c0016fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fcc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0016fd4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0016fda:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0016fe1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0016fe8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016ff0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0016ff8:	75 0a                	jne    c0017004 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0016ffa:	b8 04 00 00 00       	mov    eax,0x4
c0016fff:	e9 54 01 00 00       	jmp    c0017158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017004:	83 ec 08             	sub    esp,0x8
c0017007:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001700e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017012:	50                   	push   eax
c0017013:	e8 e8 95 fe ff       	call   c0000600 <strcpy>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	83 ec 08             	sub    esp,0x8
c001701e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017022:	50                   	push   eax
c0017023:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001702a:	e8 09 fc ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001703a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017042:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017046:	25 ff 00 00 00       	and    eax,0xff
c001704b:	83 e0 01             	and    eax,0x1
c001704e:	74 08                	je     c0017058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017050:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017058:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001705c:	25 ff 00 00 00       	and    eax,0xff
c0017061:	83 e0 02             	and    eax,0x2
c0017064:	74 0a                	je     c0017070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017066:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001706e:	66 90                	xchg   ax,ax
c0017070:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017074:	25 ff 00 00 00       	and    eax,0xff
c0017079:	83 e0 04             	and    eax,0x4
c001707c:	74 0a                	je     c0017088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001707e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017086:	66 90                	xchg   ax,ax
c0017088:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001708c:	25 ff 00 00 00       	and    eax,0xff
c0017091:	83 e0 08             	and    eax,0x8
c0017094:	74 0a                	je     c00170a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017096:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001709e:	66 90                	xchg   ax,ax
c00170a0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a4:	25 ff 00 00 00       	and    eax,0xff
c00170a9:	83 e0 01             	and    eax,0x1
c00170ac:	74 0a                	je     c00170b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00170ae:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00170b6:	66 90                	xchg   ax,ax
c00170b8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170bc:	25 ff 00 00 00       	and    eax,0xff
c00170c1:	83 e0 02             	and    eax,0x2
c00170c4:	74 0a                	je     c00170d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00170c6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00170ce:	66 90                	xchg   ax,ax
c00170d0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170d4:	25 ff 00 00 00       	and    eax,0xff
c00170d9:	83 e0 04             	and    eax,0x4
c00170dc:	74 0a                	je     c00170e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00170de:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00170e6:	66 90                	xchg   ax,ax
c00170e8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170ec:	25 ff 00 00 00       	and    eax,0xff
c00170f1:	83 e0 08             	and    eax,0x8
c00170f4:	74 0a                	je     c0017100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00170f6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00170fe:	66 90                	xchg   ax,ax
c0017100:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017107:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001710e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017115:	31 d2                	xor    edx,edx
c0017117:	88 c2                	mov    dl,al
c0017119:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017120:	25 ff 00 00 00       	and    eax,0xff
c0017125:	83 ec 04             	sub    esp,0x4
c0017128:	52                   	push   edx
c0017129:	50                   	push   eax
c001712a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001712e:	50                   	push   eax
c001712f:	e8 c9 db fe ff       	call   c0004cfd <f_chmod>
c0017134:	83 c4 10             	add    esp,0x10
c0017137:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001713e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017145:	85 c0                	test   eax,eax
c0017147:	75 07                	jne    c0017150 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017149:	b8 00 00 00 00       	mov    eax,0x0
c001714e:	eb 08                	jmp    c0017158 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017150:	b8 01 00 00 00       	mov    eax,0x1
c0017155:	8d 76 00             	lea    esi,[esi+0x0]
c0017158:	81 c4 2c 01 00 00    	add    esp,0x12c
c001715e:	c3                   	ret    
c001715f:	90                   	nop

c0017160 <FAT::rename(char const*, char const*)>:
c0017160:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017166:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001716e:	74 0c                	je     c001717c <FAT::rename(char const*, char const*)+0x1c>
c0017170:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017178:	75 0e                	jne    c0017188 <FAT::rename(char const*, char const*)+0x28>
c001717a:	66 90                	xchg   ax,ax
c001717c:	b8 04 00 00 00       	mov    eax,0x4
c0017181:	e9 9e 00 00 00       	jmp    c0017224 <FAT::rename(char const*, char const*)+0xc4>
c0017186:	66 90                	xchg   ax,ax
c0017188:	83 ec 08             	sub    esp,0x8
c001718b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017192:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017199:	50                   	push   eax
c001719a:	e8 61 94 fe ff       	call   c0000600 <strcpy>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	83 ec 08             	sub    esp,0x8
c00171a5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00171ac:	50                   	push   eax
c00171ad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171b4:	e8 7f fa ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c00171b9:	83 c4 10             	add    esp,0x10
c00171bc:	83 ec 08             	sub    esp,0x8
c00171bf:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00171c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00171ca:	50                   	push   eax
c00171cb:	e8 30 94 fe ff       	call   c0000600 <strcpy>
c00171d0:	83 c4 10             	add    esp,0x10
c00171d3:	83 ec 08             	sub    esp,0x8
c00171d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171da:	50                   	push   eax
c00171db:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00171e2:	e8 51 fa ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c00171e7:	83 c4 10             	add    esp,0x10
c00171ea:	83 ec 08             	sub    esp,0x8
c00171ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00171f1:	50                   	push   eax
c00171f2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00171f9:	50                   	push   eax
c00171fa:	e8 48 d9 fe ff       	call   c0004b47 <f_rename>
c00171ff:	83 c4 10             	add    esp,0x10
c0017202:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0017209:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017210:	85 c0                	test   eax,eax
c0017212:	75 08                	jne    c001721c <FAT::rename(char const*, char const*)+0xbc>
c0017214:	b8 00 00 00 00       	mov    eax,0x0
c0017219:	eb 09                	jmp    c0017224 <FAT::rename(char const*, char const*)+0xc4>
c001721b:	90                   	nop
c001721c:	b8 01 00 00 00       	mov    eax,0x1
c0017221:	8d 76 00             	lea    esi,[esi+0x0]
c0017224:	81 c4 1c 02 00 00    	add    esp,0x21c
c001722a:	c3                   	ret    
c001722b:	90                   	nop

c001722c <FAT::mkdir(char const*)>:
c001722c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017232:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001723a:	75 08                	jne    c0017244 <FAT::mkdir(char const*)+0x18>
c001723c:	b8 04 00 00 00       	mov    eax,0x4
c0017241:	eb 61                	jmp    c00172a4 <FAT::mkdir(char const*)+0x78>
c0017243:	90                   	nop
c0017244:	83 ec 08             	sub    esp,0x8
c0017247:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001724e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017252:	50                   	push   eax
c0017253:	e8 a8 93 fe ff       	call   c0000600 <strcpy>
c0017258:	83 c4 10             	add    esp,0x10
c001725b:	83 ec 08             	sub    esp,0x8
c001725e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017262:	50                   	push   eax
c0017263:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001726a:	e8 c9 f9 ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c001726f:	83 c4 10             	add    esp,0x10
c0017272:	83 ec 0c             	sub    esp,0xc
c0017275:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017279:	50                   	push   eax
c001727a:	e8 2d d7 fe ff       	call   c00049ac <f_mkdir>
c001727f:	83 c4 10             	add    esp,0x10
c0017282:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017289:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017290:	85 c0                	test   eax,eax
c0017292:	75 08                	jne    c001729c <FAT::mkdir(char const*)+0x70>
c0017294:	b8 00 00 00 00       	mov    eax,0x0
c0017299:	eb 09                	jmp    c00172a4 <FAT::mkdir(char const*)+0x78>
c001729b:	90                   	nop
c001729c:	b8 01 00 00 00       	mov    eax,0x1
c00172a1:	8d 76 00             	lea    esi,[esi+0x0]
c00172a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00172aa:	c3                   	ret    
c00172ab:	90                   	nop

c00172ac <FAT::exists(char const*)>:
c00172ac:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00172b2:	83 ec 08             	sub    esp,0x8
c00172b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00172bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172c0:	50                   	push   eax
c00172c1:	e8 3a 93 fe ff       	call   c0000600 <strcpy>
c00172c6:	83 c4 10             	add    esp,0x10
c00172c9:	83 ec 08             	sub    esp,0x8
c00172cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00172d0:	50                   	push   eax
c00172d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00172d8:	e8 5b f9 ff ff       	call   c0016c38 <FAT::fixFilepath(char*)>
c00172dd:	83 c4 10             	add    esp,0x10
c00172e0:	83 ec 08             	sub    esp,0x8
c00172e3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00172ea:	50                   	push   eax
c00172eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00172ef:	50                   	push   eax
c00172f0:	e8 30 d3 fe ff       	call   c0004625 <f_stat>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00172ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017306:	85 c0                	test   eax,eax
c0017308:	75 06                	jne    c0017310 <FAT::exists(char const*)+0x64>
c001730a:	b0 01                	mov    al,0x1
c001730c:	eb 06                	jmp    c0017314 <FAT::exists(char const*)+0x68>
c001730e:	66 90                	xchg   ax,ax
c0017310:	b0 00                	mov    al,0x0
c0017312:	66 90                	xchg   ax,ax
c0017314:	81 c4 2c 02 00 00    	add    esp,0x22c
c001731a:	c3                   	ret    
c001731b:	90                   	nop

c001731c <isoReadDiscSectorHelper>:
c001731c:	83 ec 2c             	sub    esp,0x2c
c001731f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017323:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017327:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001732c:	83 e8 41             	sub    eax,0x41
c001732f:	8b 0c 85 80 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd680]
c0017336:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001733a:	ba 00 00 00 00       	mov    edx,0x0
c001733f:	83 ec 0c             	sub    esp,0xc
c0017342:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017346:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001734a:	52                   	push   edx
c001734b:	50                   	push   eax
c001734c:	51                   	push   ecx
c001734d:	e8 ea 57 ff ff       	call   c000cb3c <LogicalDisk::read(unsigned long long, int, void*)>
c0017352:	83 c4 20             	add    esp,0x20
c0017355:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017359:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001735e:	74 0c                	je     c001736c <isoReadDiscSectorHelper+0x50>
c0017360:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017364:	c1 e0 0b             	shl    eax,0xb
c0017367:	eb 0b                	jmp    c0017374 <isoReadDiscSectorHelper+0x58>
c0017369:	8d 76 00             	lea    esi,[esi+0x0]
c001736c:	b8 00 00 00 00       	mov    eax,0x0
c0017371:	8d 76 00             	lea    esi,[esi+0x0]
c0017374:	83 c4 2c             	add    esp,0x2c
c0017377:	c3                   	ret    

c0017378 <iso_kprintf>:
c0017378:	83 ec 0c             	sub    esp,0xc
c001737b:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c0017380:	83 ec 08             	sub    esp,0x8
c0017383:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017387:	50                   	push   eax
c0017388:	e8 a9 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	90                   	nop
c0017391:	83 c4 0c             	add    esp,0xc
c0017394:	c3                   	ret    
c0017395:	8d 76 00             	lea    esi,[esi+0x0]

c0017398 <iso_kprintfd>:
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c00173a0:	83 ec 08             	sub    esp,0x8
c00173a3:	68 ec e9 01 c0       	push   0xc001e9ec
c00173a8:	50                   	push   eax
c00173a9:	e8 88 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173ae:	83 c4 10             	add    esp,0x10
c00173b1:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c00173b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173ba:	83 ec 08             	sub    esp,0x8
c00173bd:	52                   	push   edx
c00173be:	50                   	push   eax
c00173bf:	e8 2c 13 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00173c4:	83 c4 10             	add    esp,0x10
c00173c7:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c00173cc:	83 ec 08             	sub    esp,0x8
c00173cf:	68 6d e8 01 c0       	push   0xc001e86d
c00173d4:	50                   	push   eax
c00173d5:	e8 5c 13 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	90                   	nop
c00173de:	83 c4 0c             	add    esp,0xc
c00173e1:	c3                   	ret    

c00173e2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00173e2:	b8 08 00 00 00       	mov    eax,0x8
c00173e7:	c3                   	ret    

c00173e8 <ISO9660::getName()>:
c00173e8:	b8 ef e9 01 c0       	mov    eax,0xc001e9ef
c00173ed:	c3                   	ret    

c00173ee <ISO9660::closeDir(void*)>:
c00173ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00173f4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00173f7:	90                   	nop

c00173f8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00173f8:	b8 01 00 00 00       	mov    eax,0x1
c00173fd:	c3                   	ret    

c00173fe <ISO9660::unlink(char const*)>:
c00173fe:	b8 01 00 00 00       	mov    eax,0x1
c0017403:	c3                   	ret    

c0017404 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017404:	b8 03 00 00 00       	mov    eax,0x3
c0017409:	c3                   	ret    

c001740a <ISO9660::rename(char const*, char const*)>:
c001740a:	b8 01 00 00 00       	mov    eax,0x1
c001740f:	c3                   	ret    

c0017410 <ISO9660::mkdir(char const*)>:
c0017410:	b8 01 00 00 00       	mov    eax,0x1
c0017415:	c3                   	ret    

c0017416 <ISO9660::~ISO9660()>:
c0017416:	83 ec 0c             	sub    esp,0xc
c0017419:	ba 40 ea 01 c0       	mov    edx,0xc001ea40
c001741e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017422:	89 10                	mov    DWORD PTR [eax],edx
c0017424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017428:	83 ec 0c             	sub    esp,0xc
c001742b:	50                   	push   eax
c001742c:	e8 69 33 ff ff       	call   c000a79a <Filesystem::~Filesystem()>
c0017431:	83 c4 10             	add    esp,0x10
c0017434:	90                   	nop
c0017435:	83 c4 0c             	add    esp,0xc
c0017438:	c3                   	ret    
c0017439:	90                   	nop

c001743a <ISO9660::~ISO9660()>:
c001743a:	83 ec 0c             	sub    esp,0xc
c001743d:	83 ec 0c             	sub    esp,0xc
c0017440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017444:	e8 cd ff ff ff       	call   c0017416 <ISO9660::~ISO9660()>
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	83 ec 08             	sub    esp,0x8
c001744f:	6a 08                	push   0x8
c0017451:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017455:	e8 04 2f ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001745a:	83 c4 10             	add    esp,0x10
c001745d:	83 c4 0c             	add    esp,0xc
c0017460:	c3                   	ret    
c0017461:	90                   	nop

c0017462 <ISO9660::exists(char const*)>:
c0017462:	83 ec 18             	sub    esp,0x18
c0017465:	68 0a ea 01 c0       	push   0xc001ea0a
c001746a:	e8 48 8c ff ff       	call   c00100b7 <KePanic(char const*)>
c001746f:	31 c0                	xor    eax,eax
c0017471:	83 c4 1c             	add    esp,0x1c
c0017474:	c3                   	ret    
c0017475:	90                   	nop

c0017476 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017476:	56                   	push   esi
c0017477:	53                   	push   ebx
c0017478:	50                   	push   eax
c0017479:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001747d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017481:	85 db                	test   ebx,ebx
c0017483:	0f 84 82 00 00 00    	je     c001750b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017489:	85 f6                	test   esi,esi
c001748b:	74 7e                	je     c001750b <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001748d:	ba 03 00 00 00       	mov    edx,0x3
c0017492:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017497:	75 77                	jne    c0017510 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017499:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001749c:	3a 05 80 38 02 c0    	cmp    al,BYTE PTR ds:0xc0023880
c00174a2:	74 34                	je     c00174d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c00174a4:	83 ec 0c             	sub    esp,0xc
c00174a7:	50                   	push   eax
c00174a8:	e8 12 f3 fe ff       	call   c00067bf <init_percd>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	ba 0b 00 00 00       	mov    edx,0xb
c00174b5:	40                   	inc    eax
c00174b6:	74 58                	je     c0017510 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00174b8:	80 3d 80 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023880,0x0
c00174bf:	74 10                	je     c00174d1 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00174c1:	83 ec 0c             	sub    esp,0xc
c00174c4:	68 28 ea 01 c0       	push   0xc001ea28
c00174c9:	e8 e9 8b ff ff       	call   c00100b7 <KePanic(char const*)>
c00174ce:	83 c4 10             	add    esp,0x10
c00174d1:	8a 03                	mov    al,BYTE PTR [ebx]
c00174d3:	a2 80 38 02 c0       	mov    ds:0xc0023880,al
c00174d8:	83 ec 0c             	sub    esp,0xc
c00174db:	0f be 05 80 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023880
c00174e2:	83 c3 03             	add    ebx,0x3
c00174e5:	50                   	push   eax
c00174e6:	e8 d4 f2 fe ff       	call   c00067bf <init_percd>
c00174eb:	59                   	pop    ecx
c00174ec:	58                   	pop    eax
c00174ed:	6a 00                	push   0x0
c00174ef:	53                   	push   ebx
c00174f0:	e8 08 ee fe ff       	call   c00062fd <iso_open>
c00174f5:	83 c4 10             	add    esp,0x10
c00174f8:	ba 01 00 00 00       	mov    edx,0x1
c00174fd:	83 f8 ff             	cmp    eax,0xffffffff
c0017500:	74 0e                	je     c0017510 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017502:	83 c0 64             	add    eax,0x64
c0017505:	31 d2                	xor    edx,edx
c0017507:	89 06                	mov    DWORD PTR [esi],eax
c0017509:	eb 05                	jmp    c0017510 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001750b:	ba 04 00 00 00       	mov    edx,0x4
c0017510:	89 d0                	mov    eax,edx
c0017512:	5a                   	pop    edx
c0017513:	5b                   	pop    ebx
c0017514:	5e                   	pop    esi
c0017515:	c3                   	ret    

c0017516 <ISO9660::openDir(char const*, void**)>:
c0017516:	56                   	push   esi
c0017517:	53                   	push   ebx
c0017518:	50                   	push   eax
c0017519:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001751d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017521:	85 db                	test   ebx,ebx
c0017523:	74 76                	je     c001759b <ISO9660::openDir(char const*, void**)+0x85>
c0017525:	85 f6                	test   esi,esi
c0017527:	74 72                	je     c001759b <ISO9660::openDir(char const*, void**)+0x85>
c0017529:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001752c:	3a 05 80 38 02 c0    	cmp    al,BYTE PTR ds:0xc0023880
c0017532:	74 34                	je     c0017568 <ISO9660::openDir(char const*, void**)+0x52>
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	50                   	push   eax
c0017538:	e8 82 f2 fe ff       	call   c00067bf <init_percd>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	ba 0b 00 00 00       	mov    edx,0xb
c0017545:	40                   	inc    eax
c0017546:	74 58                	je     c00175a0 <ISO9660::openDir(char const*, void**)+0x8a>
c0017548:	80 3d 80 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023880,0x0
c001754f:	74 10                	je     c0017561 <ISO9660::openDir(char const*, void**)+0x4b>
c0017551:	83 ec 0c             	sub    esp,0xc
c0017554:	68 28 ea 01 c0       	push   0xc001ea28
c0017559:	e8 59 8b ff ff       	call   c00100b7 <KePanic(char const*)>
c001755e:	83 c4 10             	add    esp,0x10
c0017561:	8a 03                	mov    al,BYTE PTR [ebx]
c0017563:	a2 80 38 02 c0       	mov    ds:0xc0023880,al
c0017568:	83 ec 0c             	sub    esp,0xc
c001756b:	0f be 05 80 38 02 c0 	movsx  eax,BYTE PTR ds:0xc0023880
c0017572:	83 c3 03             	add    ebx,0x3
c0017575:	50                   	push   eax
c0017576:	e8 44 f2 fe ff       	call   c00067bf <init_percd>
c001757b:	59                   	pop    ecx
c001757c:	58                   	pop    eax
c001757d:	6a 01                	push   0x1
c001757f:	53                   	push   ebx
c0017580:	e8 78 ed fe ff       	call   c00062fd <iso_open>
c0017585:	83 c4 10             	add    esp,0x10
c0017588:	ba 01 00 00 00       	mov    edx,0x1
c001758d:	83 f8 ff             	cmp    eax,0xffffffff
c0017590:	74 0e                	je     c00175a0 <ISO9660::openDir(char const*, void**)+0x8a>
c0017592:	83 c0 64             	add    eax,0x64
c0017595:	31 d2                	xor    edx,edx
c0017597:	89 06                	mov    DWORD PTR [esi],eax
c0017599:	eb 05                	jmp    c00175a0 <ISO9660::openDir(char const*, void**)+0x8a>
c001759b:	ba 04 00 00 00       	mov    edx,0x4
c00175a0:	89 d0                	mov    eax,edx
c00175a2:	5a                   	pop    edx
c00175a3:	5b                   	pop    ebx
c00175a4:	5e                   	pop    esi
c00175a5:	c3                   	ret    

c00175a6 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00175a6:	53                   	push   ebx
c00175a7:	83 ec 08             	sub    esp,0x8
c00175aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175ae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175b2:	85 c0                	test   eax,eax
c00175b4:	74 25                	je     c00175db <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175b6:	85 db                	test   ebx,ebx
c00175b8:	74 21                	je     c00175db <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c00175ba:	83 e8 64             	sub    eax,0x64
c00175bd:	52                   	push   edx
c00175be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00175c6:	50                   	push   eax
c00175c7:	e8 d9 ed fe ff       	call   c00063a5 <iso_read>
c00175cc:	83 c4 10             	add    esp,0x10
c00175cf:	89 03                	mov    DWORD PTR [ebx],eax
c00175d1:	09 d0                	or     eax,edx
c00175d3:	0f 94 c0             	sete   al
c00175d6:	0f b6 c0             	movzx  eax,al
c00175d9:	eb 05                	jmp    c00175e0 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00175db:	b8 04 00 00 00       	mov    eax,0x4
c00175e0:	83 c4 08             	add    esp,0x8
c00175e3:	5b                   	pop    ebx
c00175e4:	c3                   	ret    
c00175e5:	90                   	nop

c00175e6 <ISO9660::seek(void*, unsigned long long)>:
c00175e6:	57                   	push   edi
c00175e7:	56                   	push   esi
c00175e8:	b8 04 00 00 00       	mov    eax,0x4
c00175ed:	51                   	push   ecx
c00175ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00175f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175f6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00175fa:	85 d2                	test   edx,edx
c00175fc:	74 1c                	je     c001761a <ISO9660::seek(void*, unsigned long long)+0x34>
c00175fe:	6a 00                	push   0x0
c0017600:	83 ea 64             	sub    edx,0x64
c0017603:	57                   	push   edi
c0017604:	56                   	push   esi
c0017605:	52                   	push   edx
c0017606:	e8 b0 ee fe ff       	call   c00064bb <iso_seek>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	31 f0                	xor    eax,esi
c0017610:	31 fa                	xor    edx,edi
c0017612:	09 d0                	or     eax,edx
c0017614:	0f 95 c0             	setne  al
c0017617:	0f b6 c0             	movzx  eax,al
c001761a:	5a                   	pop    edx
c001761b:	5e                   	pop    esi
c001761c:	5f                   	pop    edi
c001761d:	c3                   	ret    

c001761e <ISO9660::tell(void*, unsigned long long*)>:
c001761e:	53                   	push   ebx
c001761f:	83 ec 08             	sub    esp,0x8
c0017622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017626:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001762a:	85 c0                	test   eax,eax
c001762c:	74 1c                	je     c001764a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c001762e:	85 db                	test   ebx,ebx
c0017630:	74 18                	je     c001764a <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017632:	83 ec 0c             	sub    esp,0xc
c0017635:	83 e8 64             	sub    eax,0x64
c0017638:	50                   	push   eax
c0017639:	e8 01 ef fe ff       	call   c000653f <iso_tell>
c001763e:	83 c4 10             	add    esp,0x10
c0017641:	89 03                	mov    DWORD PTR [ebx],eax
c0017643:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017646:	31 c0                	xor    eax,eax
c0017648:	eb 05                	jmp    c001764f <ISO9660::tell(void*, unsigned long long*)+0x31>
c001764a:	b8 04 00 00 00       	mov    eax,0x4
c001764f:	83 c4 08             	add    esp,0x8
c0017652:	5b                   	pop    ebx
c0017653:	c3                   	ret    

c0017654 <ISO9660::stat(void*, unsigned long long*)>:
c0017654:	53                   	push   ebx
c0017655:	83 ec 08             	sub    esp,0x8
c0017658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001765c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017660:	85 c0                	test   eax,eax
c0017662:	74 20                	je     c0017684 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017664:	85 db                	test   ebx,ebx
c0017666:	74 1c                	je     c0017684 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017668:	83 ec 0c             	sub    esp,0xc
c001766b:	83 e8 64             	sub    eax,0x64
c001766e:	50                   	push   eax
c001766f:	e8 fc ee fe ff       	call   c0006570 <iso_total>
c0017674:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001767b:	89 03                	mov    DWORD PTR [ebx],eax
c001767d:	83 c4 10             	add    esp,0x10
c0017680:	31 c0                	xor    eax,eax
c0017682:	eb 05                	jmp    c0017689 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017684:	b8 04 00 00 00       	mov    eax,0x4
c0017689:	83 c4 08             	add    esp,0x8
c001768c:	5b                   	pop    ebx
c001768d:	c3                   	ret    

c001768e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001768e:	55                   	push   ebp
c001768f:	57                   	push   edi
c0017690:	56                   	push   esi
c0017691:	53                   	push   ebx
c0017692:	83 ec 0c             	sub    esp,0xc
c0017695:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017699:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001769d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00176a1:	85 ff                	test   edi,edi
c00176a3:	0f 94 c2             	sete   dl
c00176a6:	85 f6                	test   esi,esi
c00176a8:	0f 94 c0             	sete   al
c00176ab:	08 c2                	or     dl,al
c00176ad:	0f 85 9e 00 00 00    	jne    c0017751 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00176b3:	85 db                	test   ebx,ebx
c00176b5:	0f 84 96 00 00 00    	je     c0017751 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c00176bb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00176be:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00176c4:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00176cb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00176ce:	3a 05 80 38 02 c0    	cmp    al,BYTE PTR ds:0xc0023880
c00176d4:	74 34                	je     c001770a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	50                   	push   eax
c00176da:	e8 e0 f0 fe ff       	call   c00067bf <init_percd>
c00176df:	83 c4 10             	add    esp,0x10
c00176e2:	ba 0b 00 00 00       	mov    edx,0xb
c00176e7:	40                   	inc    eax
c00176e8:	74 6c                	je     c0017756 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00176ea:	80 3d 80 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023880,0x0
c00176f1:	74 10                	je     c0017703 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c00176f3:	83 ec 0c             	sub    esp,0xc
c00176f6:	68 28 ea 01 c0       	push   0xc001ea28
c00176fb:	e8 b7 89 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017700:	83 c4 10             	add    esp,0x10
c0017703:	8a 03                	mov    al,BYTE PTR [ebx]
c0017705:	a2 80 38 02 c0       	mov    ds:0xc0023880,al
c001770a:	83 c3 03             	add    ebx,0x3
c001770d:	52                   	push   edx
c001770e:	52                   	push   edx
c001770f:	6a 00                	push   0x0
c0017711:	53                   	push   ebx
c0017712:	e8 e6 eb fe ff       	call   c00062fd <iso_open>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	89 c5                	mov    ebp,eax
c001771c:	83 f8 ff             	cmp    eax,0xffffffff
c001771f:	75 0f                	jne    c0017730 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017721:	50                   	push   eax
c0017722:	50                   	push   eax
c0017723:	6a 01                	push   0x1
c0017725:	53                   	push   ebx
c0017726:	e8 d2 eb fe ff       	call   c00062fd <iso_open>
c001772b:	c6 07 01             	mov    BYTE PTR [edi],0x1
c001772e:	eb 1a                	jmp    c001774a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017730:	83 ec 0c             	sub    esp,0xc
c0017733:	50                   	push   eax
c0017734:	e8 37 ee fe ff       	call   c0006570 <iso_total>
c0017739:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017740:	89 06                	mov    DWORD PTR [esi],eax
c0017742:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017745:	e8 3d ec fe ff       	call   c0006387 <iso_close>
c001774a:	83 c4 10             	add    esp,0x10
c001774d:	31 d2                	xor    edx,edx
c001774f:	eb 05                	jmp    c0017756 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017751:	ba 04 00 00 00       	mov    edx,0x4
c0017756:	83 c4 0c             	add    esp,0xc
c0017759:	89 d0                	mov    eax,edx
c001775b:	5b                   	pop    ebx
c001775c:	5e                   	pop    esi
c001775d:	5f                   	pop    edi
c001775e:	5d                   	pop    ebp
c001775f:	c3                   	ret    

c0017760 <ISO9660::close(void*)>:
c0017760:	83 ec 0c             	sub    esp,0xc
c0017763:	b8 04 00 00 00       	mov    eax,0x4
c0017768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001776c:	85 d2                	test   edx,edx
c001776e:	74 11                	je     c0017781 <ISO9660::close(void*)+0x21>
c0017770:	83 ec 0c             	sub    esp,0xc
c0017773:	83 ea 64             	sub    edx,0x64
c0017776:	52                   	push   edx
c0017777:	e8 0b ec fe ff       	call   c0006387 <iso_close>
c001777c:	83 c4 10             	add    esp,0x10
c001777f:	31 c0                	xor    eax,eax
c0017781:	83 c4 0c             	add    esp,0xc
c0017784:	c3                   	ret    
c0017785:	90                   	nop

c0017786 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017786:	55                   	push   ebp
c0017787:	57                   	push   edi
c0017788:	56                   	push   esi
c0017789:	53                   	push   ebx
c001778a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017790:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017797:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001779e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00177a5:	85 c0                	test   eax,eax
c00177a7:	0f 84 96 00 00 00    	je     c0017843 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177ad:	85 db                	test   ebx,ebx
c00177af:	0f 84 8e 00 00 00    	je     c0017843 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c00177b5:	83 ec 0c             	sub    esp,0xc
c00177b8:	83 e8 64             	sub    eax,0x64
c00177bb:	50                   	push   eax
c00177bc:	e8 00 ee fe ff       	call   c00065c1 <iso_readdir>
c00177c1:	83 c4 10             	add    esp,0x10
c00177c4:	89 c6                	mov    esi,eax
c00177c6:	85 c0                	test   eax,eax
c00177c8:	75 18                	jne    c00177e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c00177ca:	52                   	push   edx
c00177cb:	68 10 01 00 00       	push   0x110
c00177d0:	6a 00                	push   0x0
c00177d2:	57                   	push   edi
c00177d3:	e8 f8 8c fe ff       	call   c00004d0 <memset>
c00177d8:	83 c4 10             	add    esp,0x10
c00177db:	b8 01 00 00 00       	mov    eax,0x1
c00177e0:	eb 66                	jmp    c0017848 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00177e2:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00177e8:	8d 68 08             	lea    ebp,[eax+0x8]
c00177eb:	83 ec 0c             	sub    esp,0xc
c00177ee:	55                   	push   ebp
c00177ef:	e8 4c 8d fe ff       	call   c0000540 <strlen>
c00177f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017800:	83 c4 10             	add    esp,0x10
c0017803:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017807:	75 0a                	jne    c0017813 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017809:	b8 02 00 00 00       	mov    eax,0x2
c001780e:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017811:	74 05                	je     c0017818 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017813:	b8 01 00 00 00       	mov    eax,0x1
c0017818:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001781c:	50                   	push   eax
c001781d:	50                   	push   eax
c001781e:	55                   	push   ebp
c001781f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017823:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017827:	50                   	push   eax
c0017828:	e8 d3 8d fe ff       	call   c0000600 <strcpy>
c001782d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017834:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017836:	31 c0                	xor    eax,eax
c0017838:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001783e:	83 c4 10             	add    esp,0x10
c0017841:	eb 05                	jmp    c0017848 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017843:	b8 04 00 00 00       	mov    eax,0x4
c0017848:	81 c4 1c 01 00 00    	add    esp,0x11c
c001784e:	5b                   	pop    ebx
c001784f:	5e                   	pop    esi
c0017850:	5f                   	pop    edi
c0017851:	5d                   	pop    ebp
c0017852:	c3                   	ret    

c0017853 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017853:	57                   	push   edi
c0017854:	56                   	push   esi
c0017855:	53                   	push   ebx
c0017856:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001785a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001785e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017862:	39 35 84 38 02 c0    	cmp    DWORD PTR ds:0xc0023884,esi
c0017868:	75 08                	jne    c0017872 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001786a:	38 1d ec f3 01 c0    	cmp    BYTE PTR ds:0xc001f3ec,bl
c0017870:	74 4a                	je     c00178bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017872:	83 ec 0c             	sub    esp,0xc
c0017875:	31 d2                	xor    edx,edx
c0017877:	68 a0 38 02 c0       	push   0xc00238a0
c001787c:	0f be c3             	movsx  eax,bl
c001787f:	6a 01                	push   0x1
c0017881:	52                   	push   edx
c0017882:	56                   	push   esi
c0017883:	ff 34 85 7c 28 02 c0 	push   DWORD PTR [eax*4-0x3ffdd784]
c001788a:	e8 ad 52 ff ff       	call   c000cb3c <LogicalDisk::read(unsigned long long, int, void*)>
c001788f:	83 c4 20             	add    esp,0x20
c0017892:	85 c0                	test   eax,eax
c0017894:	75 0e                	jne    c00178a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017896:	89 35 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,esi
c001789c:	88 1d ec f3 01 c0    	mov    BYTE PTR ds:0xc001f3ec,bl
c00178a2:	eb 18                	jmp    c00178bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00178a4:	50                   	push   eax
c00178a5:	68 00 08 00 00       	push   0x800
c00178aa:	6a 00                	push   0x0
c00178ac:	57                   	push   edi
c00178ad:	e8 1e 8c fe ff       	call   c00004d0 <memset>
c00178b2:	83 c4 10             	add    esp,0x10
c00178b5:	b8 01 00 00 00       	mov    eax,0x1
c00178ba:	eb 0e                	jmp    c00178ca <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00178bc:	be a0 38 02 c0       	mov    esi,0xc00238a0
c00178c1:	b9 00 08 00 00       	mov    ecx,0x800
c00178c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178c8:	31 c0                	xor    eax,eax
c00178ca:	5b                   	pop    ebx
c00178cb:	5e                   	pop    esi
c00178cc:	5f                   	pop    edi
c00178cd:	c3                   	ret    

c00178ce <ISO9660::tryMount(LogicalDisk*, int)>:
c00178ce:	53                   	push   ebx
c00178cf:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00178d5:	c7 05 84 38 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023884,0xdeadbeef
c00178df:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00178e6:	8d 58 41             	lea    ebx,[eax+0x41]
c00178e9:	0f be db             	movsx  ebx,bl
c00178ec:	53                   	push   ebx
c00178ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c00178f1:	50                   	push   eax
c00178f2:	6a 10                	push   0x10
c00178f4:	e8 5a ff ff ff       	call   c0017853 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	31 d2                	xor    edx,edx
c00178fe:	85 c0                	test   eax,eax
c0017900:	75 33                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017902:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017907:	75 2c                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017909:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001790e:	75 25                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017910:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017915:	75 1e                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017917:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001791c:	75 17                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001791e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017923:	75 10                	jne    c0017935 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017925:	83 ec 0c             	sub    esp,0xc
c0017928:	53                   	push   ebx
c0017929:	e8 91 ee fe ff       	call   c00067bf <init_percd>
c001792e:	83 c4 10             	add    esp,0x10
c0017931:	40                   	inc    eax
c0017932:	0f 95 c2             	setne  dl
c0017935:	88 d0                	mov    al,dl
c0017937:	81 c4 08 08 00 00    	add    esp,0x808
c001793d:	5b                   	pop    ebx
c001793e:	c3                   	ret    
c001793f:	90                   	nop

c0017940 <ISO9660::ISO9660()>:
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017947:	83 ec 0c             	sub    esp,0xc
c001794a:	50                   	push   eax
c001794b:	e8 26 2e ff ff       	call   c000a776 <Filesystem::Filesystem()>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	ba 40 ea 01 c0       	mov    edx,0xc001ea40
c0017958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001795c:	89 10                	mov    DWORD PTR [eax],edx
c001795e:	e8 5e ef fe ff       	call   c00068c1 <fs_iso9660_init>
c0017963:	90                   	nop
c0017964:	83 c4 0c             	add    esp,0xc
c0017967:	c3                   	ret    

c0017968 <SoundCard::beginPlayback()>:
c0017968:	c7 44 24 04 a0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eaa0
c0017970:	e9 42 87 ff ff       	jmp    c00100b7 <KePanic(char const*)>
c0017975:	90                   	nop

c0017976 <SoundCard::stopPlayback()>:
c0017976:	c7 44 24 04 a0 ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eaa0
c001797e:	e9 34 87 ff ff       	jmp    c00100b7 <KePanic(char const*)>
c0017983:	90                   	nop

c0017984 <SoundCard::SoundCard(char const*)>:
c0017984:	83 ec 1c             	sub    esp,0x1c
c0017987:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001798b:	83 ec 08             	sub    esp,0x8
c001798e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017992:	50                   	push   eax
c0017993:	e8 94 40 ff ff       	call   c000ba2c <Device::Device(char const*)>
c0017998:	83 c4 10             	add    esp,0x10
c001799b:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c00179a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a4:	89 10                	mov    DWORD PTR [eax],edx
c00179a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179aa:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00179b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179b5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00179bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00179cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179d1:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00179db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179df:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00179e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00179f1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00179f6:	7f 19                	jg     c0017a11 <SoundCard::SoundCard(char const*)+0x8d>
c00179f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017a00:	83 c2 54             	add    edx,0x54
c0017a03:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017a0b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017a0f:	eb e0                	jmp    c00179f1 <SoundCard::SoundCard(char const*)+0x6d>
c0017a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a15:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a1c:	90                   	nop
c0017a1d:	83 c4 1c             	add    esp,0x1c
c0017a20:	c3                   	ret    
c0017a21:	90                   	nop

c0017a22 <SoundCard::~SoundCard()>:
c0017a22:	83 ec 0c             	sub    esp,0xc
c0017a25:	ba ec ea 01 c0       	mov    edx,0xc001eaec
c0017a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2e:	89 10                	mov    DWORD PTR [eax],edx
c0017a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a34:	83 ec 0c             	sub    esp,0xc
c0017a37:	50                   	push   eax
c0017a38:	e8 59 3d ff ff       	call   c000b796 <Device::~Device()>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	90                   	nop
c0017a41:	83 c4 0c             	add    esp,0xc
c0017a44:	c3                   	ret    
c0017a45:	90                   	nop

c0017a46 <SoundCard::~SoundCard()>:
c0017a46:	83 ec 0c             	sub    esp,0xc
c0017a49:	83 ec 0c             	sub    esp,0xc
c0017a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a50:	e8 cd ff ff ff       	call   c0017a22 <SoundCard::~SoundCard()>
c0017a55:	83 c4 10             	add    esp,0x10
c0017a58:	83 ec 08             	sub    esp,0x8
c0017a5b:	68 e8 01 00 00       	push   0x1e8
c0017a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a64:	e8 f5 28 ff ff       	call   c000a35e <operator delete(void*, unsigned long)>
c0017a69:	83 c4 10             	add    esp,0x10
c0017a6c:	83 c4 0c             	add    esp,0xc
c0017a6f:	c3                   	ret    

c0017a70 <SoundCard::configureRates(int, int, int)>:
c0017a70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a74:	31 c0                	xor    eax,eax
c0017a76:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017a7d:	75 20                	jne    c0017a9f <SoundCard::configureRates(int, int, int)+0x2f>
c0017a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a83:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017a89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a8d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a97:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017a9d:	b0 01                	mov    al,0x1
c0017a9f:	c3                   	ret    

c0017aa0 <SoundCard::getSamples16(int, short*)>:
c0017aa0:	55                   	push   ebp
c0017aa1:	57                   	push   edi
c0017aa2:	31 ff                	xor    edi,edi
c0017aa4:	56                   	push   esi
c0017aa5:	53                   	push   ebx
c0017aa6:	31 db                	xor    ebx,ebx
c0017aa8:	83 ec 10             	sub    esp,0x10
c0017aab:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017aaf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017ab3:	8d 04 36             	lea    eax,[esi+esi*1]
c0017ab6:	50                   	push   eax
c0017ab7:	6a 00                	push   0x0
c0017ab9:	55                   	push   ebp
c0017aba:	e8 11 8a fe ff       	call   c00004d0 <memset>
c0017abf:	83 c4 10             	add    esp,0x10
c0017ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017acd:	85 c0                	test   eax,eax
c0017acf:	74 1b                	je     c0017aec <SoundCard::getSamples16(int, short*)+0x4c>
c0017ad1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017ad5:	75 15                	jne    c0017aec <SoundCard::getSamples16(int, short*)+0x4c>
c0017ad7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017adb:	55                   	push   ebp
c0017adc:	56                   	push   esi
c0017add:	50                   	push   eax
c0017ade:	e8 ed 02 00 00       	call   c0017dd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	39 c7                	cmp    edi,eax
c0017ae8:	7d 02                	jge    c0017aec <SoundCard::getSamples16(int, short*)+0x4c>
c0017aea:	89 c7                	mov    edi,eax
c0017aec:	43                   	inc    ebx
c0017aed:	83 fb 20             	cmp    ebx,0x20
c0017af0:	75 d0                	jne    c0017ac2 <SoundCard::getSamples16(int, short*)+0x22>
c0017af2:	83 c4 0c             	add    esp,0xc
c0017af5:	89 f8                	mov    eax,edi
c0017af7:	5b                   	pop    ebx
c0017af8:	5e                   	pop    esi
c0017af9:	5f                   	pop    edi
c0017afa:	5d                   	pop    ebp
c0017afb:	c3                   	ret    

c0017afc <SoundCard::getSamples32(int, int*)>:
c0017afc:	55                   	push   ebp
c0017afd:	57                   	push   edi
c0017afe:	31 ff                	xor    edi,edi
c0017b00:	56                   	push   esi
c0017b01:	31 f6                	xor    esi,esi
c0017b03:	53                   	push   ebx
c0017b04:	83 ec 10             	sub    esp,0x10
c0017b07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b0b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b0f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b13:	c1 e0 02             	shl    eax,0x2
c0017b16:	50                   	push   eax
c0017b17:	6a 00                	push   0x0
c0017b19:	55                   	push   ebp
c0017b1a:	e8 b1 89 fe ff       	call   c00004d0 <memset>
c0017b1f:	83 c4 10             	add    esp,0x10
c0017b22:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017b29:	85 c0                	test   eax,eax
c0017b2b:	74 1b                	je     c0017b48 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b2d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b31:	75 15                	jne    c0017b48 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b33:	53                   	push   ebx
c0017b34:	55                   	push   ebp
c0017b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b39:	50                   	push   eax
c0017b3a:	e8 55 03 00 00       	call   c0017e94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017b3f:	83 c4 10             	add    esp,0x10
c0017b42:	39 c6                	cmp    esi,eax
c0017b44:	7d 02                	jge    c0017b48 <SoundCard::getSamples32(int, int*)+0x4c>
c0017b46:	89 c6                	mov    esi,eax
c0017b48:	47                   	inc    edi
c0017b49:	83 ff 20             	cmp    edi,0x20
c0017b4c:	75 d4                	jne    c0017b22 <SoundCard::getSamples32(int, int*)+0x26>
c0017b4e:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017b54:	85 f6                	test   esi,esi
c0017b56:	75 0f                	jne    c0017b67 <SoundCard::getSamples32(int, int*)+0x6b>
c0017b58:	84 c0                	test   al,al
c0017b5a:	74 1b                	je     c0017b77 <SoundCard::getSamples32(int, int*)+0x7b>
c0017b5c:	83 ec 0c             	sub    esp,0xc
c0017b5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b61:	53                   	push   ebx
c0017b62:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017b65:	eb 0d                	jmp    c0017b74 <SoundCard::getSamples32(int, int*)+0x78>
c0017b67:	84 c0                	test   al,al
c0017b69:	75 0c                	jne    c0017b77 <SoundCard::getSamples32(int, int*)+0x7b>
c0017b6b:	83 ec 0c             	sub    esp,0xc
c0017b6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b70:	53                   	push   ebx
c0017b71:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	83 c4 0c             	add    esp,0xc
c0017b7a:	89 f0                	mov    eax,esi
c0017b7c:	5b                   	pop    ebx
c0017b7d:	5e                   	pop    esi
c0017b7e:	5f                   	pop    edi
c0017b7f:	5d                   	pop    ebp
c0017b80:	c3                   	ret    
c0017b81:	90                   	nop

c0017b82 <SoundCard::addChannel(SoundPort*)>:
c0017b82:	83 ec 0c             	sub    esp,0xc
c0017b85:	31 c0                	xor    eax,eax
c0017b87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b8b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017b93:	74 1b                	je     c0017bb0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017b95:	40                   	inc    eax
c0017b96:	83 f8 20             	cmp    eax,0x20
c0017b99:	75 f0                	jne    c0017b8b <SoundCard::addChannel(SoundPort*)+0x9>
c0017b9b:	83 ec 0c             	sub    esp,0xc
c0017b9e:	68 c5 ea 01 c0       	push   0xc001eac5
c0017ba3:	e8 0f 85 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	83 c8 ff             	or     eax,0xffffffff
c0017bae:	eb 0b                	jmp    c0017bbb <SoundCard::addChannel(SoundPort*)+0x39>
c0017bb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bb4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017bbb:	83 c4 0c             	add    esp,0xc
c0017bbe:	c3                   	ret    
c0017bbf:	90                   	nop

c0017bc0 <SoundCard::removeChannel(int)>:
c0017bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017bc8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017bd3:	c3                   	ret    

c0017bd4 <SoundPort::SoundPort(int, int, int, int)>:
c0017bd4:	83 ec 0c             	sub    esp,0xc
c0017bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be6:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bf2:	89 10                	mov    DWORD PTR [eax],edx
c0017bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bfc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c03:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017c0a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017c0f:	75 13                	jne    c0017c24 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c17:	05 a0 0f 00 00       	add    eax,0xfa0
c0017c1c:	01 c0                	add    eax,eax
c0017c1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c22:	66 90                	xchg   ax,ax
c0017c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c2c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c33:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c3e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c41:	c1 e0 02             	shl    eax,0x2
c0017c44:	83 ec 0c             	sub    esp,0xc
c0017c47:	50                   	push   eax
c0017c48:	e8 6c fb fe ff       	call   c00077b9 <malloc>
c0017c4d:	83 c4 10             	add    esp,0x10
c0017c50:	89 c2                	mov    edx,eax
c0017c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017c59:	90                   	nop
c0017c5a:	83 c4 0c             	add    esp,0xc
c0017c5d:	c3                   	ret    
c0017c5e:	66 90                	xchg   ax,ax

c0017c60 <SoundPort::~SoundPort()>:
c0017c60:	83 ec 0c             	sub    esp,0xc
c0017c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c6a:	85 c0                	test   eax,eax
c0017c6c:	74 1e                	je     c0017c8c <SoundPort::~SoundPort()+0x2c>
c0017c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c75:	83 ec 0c             	sub    esp,0xc
c0017c78:	50                   	push   eax
c0017c79:	e8 4b fb fe ff       	call   c00077c9 <free>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c85:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c8c:	90                   	nop
c0017c8d:	83 c4 0c             	add    esp,0xc
c0017c90:	c3                   	ret    
c0017c91:	90                   	nop
c0017c92:	66 90                	xchg   ax,ax

c0017c94 <SoundPort::unpause()>:
c0017c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c98:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017c9c:	c3                   	ret    
c0017c9d:	90                   	nop
c0017c9e:	66 90                	xchg   ax,ax

c0017ca0 <SoundPort::pause()>:
c0017ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017ca8:	c3                   	ret    
c0017ca9:	90                   	nop
c0017caa:	66 90                	xchg   ax,ax

c0017cac <SoundPort::getBufferUsed()>:
c0017cac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017cb3:	c3                   	ret    

c0017cb4 <SoundPort::getBufferSize()>:
c0017cb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cb8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017cbb:	c3                   	ret    

c0017cbc <SoundPort::buffer16(short*, int)>:
c0017cbc:	55                   	push   ebp
c0017cbd:	57                   	push   edi
c0017cbe:	56                   	push   esi
c0017cbf:	53                   	push   ebx
c0017cc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cc4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017cc8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017ccb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017cce:	74 68                	je     c0017d38 <SoundPort::buffer16(short*, int)+0x7c>
c0017cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017cd4:	85 c9                	test   ecx,ecx
c0017cd6:	7e 60                	jle    c0017d38 <SoundPort::buffer16(short*, int)+0x7c>
c0017cd8:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017cdc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017cdf:	c1 e1 0f             	shl    ecx,0xf
c0017ce2:	8d 70 01             	lea    esi,[eax+0x1]
c0017ce5:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017ce8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017ceb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017cee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017cf1:	74 4d                	je     c0017d40 <SoundPort::buffer16(short*, int)+0x84>
c0017cf3:	31 f6                	xor    esi,esi
c0017cf5:	eb 21                	jmp    c0017d18 <SoundPort::buffer16(short*, int)+0x5c>
c0017cf7:	90                   	nop
c0017cf8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017cfd:	8d 79 01             	lea    edi,[ecx+0x1]
c0017d00:	c1 e3 0f             	shl    ebx,0xf
c0017d03:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017d09:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017d0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d12:	74 1c                	je     c0017d30 <SoundPort::buffer16(short*, int)+0x74>
c0017d14:	89 c6                	mov    esi,eax
c0017d16:	66 90                	xchg   ax,ax
c0017d18:	8d 46 01             	lea    eax,[esi+0x1]
c0017d1b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017d1f:	75 d7                	jne    c0017cf8 <SoundPort::buffer16(short*, int)+0x3c>
c0017d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d25:	8d 76 00             	lea    esi,[esi+0x0]
c0017d28:	5b                   	pop    ebx
c0017d29:	5e                   	pop    esi
c0017d2a:	5f                   	pop    edi
c0017d2b:	5d                   	pop    ebp
c0017d2c:	c3                   	ret    
c0017d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0017d30:	5b                   	pop    ebx
c0017d31:	8d 46 02             	lea    eax,[esi+0x2]
c0017d34:	5e                   	pop    esi
c0017d35:	5f                   	pop    edi
c0017d36:	5d                   	pop    ebp
c0017d37:	c3                   	ret    
c0017d38:	5b                   	pop    ebx
c0017d39:	31 c0                	xor    eax,eax
c0017d3b:	5e                   	pop    esi
c0017d3c:	5f                   	pop    edi
c0017d3d:	5d                   	pop    ebp
c0017d3e:	c3                   	ret    
c0017d3f:	90                   	nop
c0017d40:	b8 01 00 00 00       	mov    eax,0x1
c0017d45:	eb e1                	jmp    c0017d28 <SoundPort::buffer16(short*, int)+0x6c>
c0017d47:	90                   	nop

c0017d48 <SoundPort::buffer32(int*, int)>:
c0017d48:	55                   	push   ebp
c0017d49:	57                   	push   edi
c0017d4a:	56                   	push   esi
c0017d4b:	53                   	push   ebx
c0017d4c:	51                   	push   ecx
c0017d4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d55:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d58:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017d5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d5f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d62:	74 5c                	je     c0017dc0 <SoundPort::buffer32(int*, int)+0x78>
c0017d64:	85 c0                	test   eax,eax
c0017d66:	7e 58                	jle    c0017dc0 <SoundPort::buffer32(int*, int)+0x78>
c0017d68:	8d 71 01             	lea    esi,[ecx+0x1]
c0017d6b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d6e:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d71:	8b 37                	mov    esi,DWORD PTR [edi]
c0017d73:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017d76:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d79:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d7c:	74 4a                	je     c0017dc8 <SoundPort::buffer32(int*, int)+0x80>
c0017d7e:	31 f6                	xor    esi,esi
c0017d80:	eb 1e                	jmp    c0017da0 <SoundPort::buffer32(int*, int)+0x58>
c0017d82:	66 90                	xchg   ax,ax
c0017d84:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017d87:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017d8a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017d8d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017d90:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017d94:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d97:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d9a:	74 18                	je     c0017db4 <SoundPort::buffer32(int*, int)+0x6c>
c0017d9c:	89 de                	mov    esi,ebx
c0017d9e:	66 90                	xchg   ax,ax
c0017da0:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017da3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017da6:	75 dc                	jne    c0017d84 <SoundPort::buffer32(int*, int)+0x3c>
c0017da8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017dab:	90                   	nop
c0017dac:	5a                   	pop    edx
c0017dad:	5b                   	pop    ebx
c0017dae:	5e                   	pop    esi
c0017daf:	5f                   	pop    edi
c0017db0:	5d                   	pop    ebp
c0017db1:	c3                   	ret    
c0017db2:	66 90                	xchg   ax,ax
c0017db4:	5a                   	pop    edx
c0017db5:	8d 46 02             	lea    eax,[esi+0x2]
c0017db8:	5b                   	pop    ebx
c0017db9:	5e                   	pop    esi
c0017dba:	5f                   	pop    edi
c0017dbb:	5d                   	pop    ebp
c0017dbc:	c3                   	ret    
c0017dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc0:	5a                   	pop    edx
c0017dc1:	31 c0                	xor    eax,eax
c0017dc3:	5b                   	pop    ebx
c0017dc4:	5e                   	pop    esi
c0017dc5:	5f                   	pop    edi
c0017dc6:	5d                   	pop    ebp
c0017dc7:	c3                   	ret    
c0017dc8:	b8 01 00 00 00       	mov    eax,0x1
c0017dcd:	eb dd                	jmp    c0017dac <SoundPort::buffer32(int*, int)+0x64>
c0017dcf:	90                   	nop

c0017dd0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017dd0:	57                   	push   edi
c0017dd1:	56                   	push   esi
c0017dd2:	53                   	push   ebx
c0017dd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017dd7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017ddb:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017de1:	39 03                	cmp    DWORD PTR [ebx],eax
c0017de3:	74 13                	je     c0017df8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017de5:	83 ec 0c             	sub    esp,0xc
c0017de8:	68 18 eb 01 c0       	push   0xc001eb18
c0017ded:	e8 c5 82 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017df2:	83 c4 10             	add    esp,0x10
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017dfe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017e01:	74 11                	je     c0017e14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	68 57 eb 01 c0       	push   0xc001eb57
c0017e0b:	e8 a7 82 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017e10:	83 c4 10             	add    esp,0x10
c0017e13:	90                   	nop
c0017e14:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017e1a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017e1d:	74 11                	je     c0017e30 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	68 57 eb 01 c0       	push   0xc001eb57
c0017e27:	e8 8b 82 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017e2c:	83 c4 10             	add    esp,0x10
c0017e2f:	90                   	nop
c0017e30:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017e33:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017e37:	7e 07                	jle    c0017e40 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017e39:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e3d:	8d 76 00             	lea    esi,[esi+0x0]
c0017e40:	85 f6                	test   esi,esi
c0017e42:	7e 2c                	jle    c0017e70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017e44:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e48:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017e4b:	31 c9                	xor    ecx,ecx
c0017e4d:	01 d7                	add    edi,edx
c0017e4f:	90                   	nop
c0017e50:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017e53:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017e56:	85 c0                	test   eax,eax
c0017e58:	79 06                	jns    c0017e60 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017e5a:	05 ff 7f 00 00       	add    eax,0x7fff
c0017e5f:	90                   	nop
c0017e60:	c1 f8 0f             	sar    eax,0xf
c0017e63:	83 c1 04             	add    ecx,0x4
c0017e66:	66 01 02             	add    WORD PTR [edx],ax
c0017e69:	83 c2 02             	add    edx,0x2
c0017e6c:	39 d7                	cmp    edi,edx
c0017e6e:	75 e0                	jne    c0017e50 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017e70:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017e73:	50                   	push   eax
c0017e74:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017e77:	29 f0                	sub    eax,esi
c0017e79:	c1 e0 02             	shl    eax,0x2
c0017e7c:	50                   	push   eax
c0017e7d:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017e80:	50                   	push   eax
c0017e81:	52                   	push   edx
c0017e82:	e8 59 85 fe ff       	call   c00003e0 <memmove>
c0017e87:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	89 f0                	mov    eax,esi
c0017e8f:	5b                   	pop    ebx
c0017e90:	5e                   	pop    esi
c0017e91:	5f                   	pop    edi
c0017e92:	c3                   	ret    
c0017e93:	90                   	nop

c0017e94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017e94:	57                   	push   edi
c0017e95:	56                   	push   esi
c0017e96:	53                   	push   ebx
c0017e97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e9f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ea3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017ea9:	39 06                	cmp    DWORD PTR [esi],eax
c0017eab:	74 13                	je     c0017ec0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017ead:	83 ec 0c             	sub    esp,0xc
c0017eb0:	68 38 eb 01 c0       	push   0xc001eb38
c0017eb5:	e8 fd 81 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017eba:	83 c4 10             	add    esp,0x10
c0017ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017ec6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017ec9:	74 11                	je     c0017edc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017ecb:	83 ec 0c             	sub    esp,0xc
c0017ece:	68 73 eb 01 c0       	push   0xc001eb73
c0017ed3:	e8 df 81 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017ed8:	83 c4 10             	add    esp,0x10
c0017edb:	90                   	nop
c0017edc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017ee2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017ee5:	74 11                	je     c0017ef8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017ee7:	83 ec 0c             	sub    esp,0xc
c0017eea:	68 73 eb 01 c0       	push   0xc001eb73
c0017eef:	e8 c3 81 ff ff       	call   c00100b7 <KePanic(char const*)>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	90                   	nop
c0017ef8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017efb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017eff:	7e 07                	jle    c0017f08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017f01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f05:	8d 76 00             	lea    esi,[esi+0x0]
c0017f08:	85 ff                	test   edi,edi
c0017f0a:	7e 1c                	jle    c0017f28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017f0c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017f13:	31 c0                	xor    eax,eax
c0017f15:	8d 76 00             	lea    esi,[esi+0x0]
c0017f18:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f1b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017f1e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017f21:	83 c0 04             	add    eax,0x4
c0017f24:	39 c1                	cmp    ecx,eax
c0017f26:	75 f0                	jne    c0017f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017f28:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017f2b:	50                   	push   eax
c0017f2c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017f2f:	29 f8                	sub    eax,edi
c0017f31:	c1 e0 02             	shl    eax,0x2
c0017f34:	50                   	push   eax
c0017f35:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017f38:	50                   	push   eax
c0017f39:	52                   	push   edx
c0017f3a:	e8 a1 84 fe ff       	call   c00003e0 <memmove>
c0017f3f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017f42:	83 c4 10             	add    esp,0x10
c0017f45:	89 f8                	mov    eax,edi
c0017f47:	5b                   	pop    ebx
c0017f48:	5e                   	pop    esi
c0017f49:	5f                   	pop    edi
c0017f4a:	c3                   	ret    
c0017f4b:	90                   	nop

c0017f4c <PCI::open(int, int, void*)>:
c0017f4c:	83 ec 18             	sub    esp,0x18
c0017f4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f57:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017f5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017f5f:	50                   	push   eax
c0017f60:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017f63:	31 c0                	xor    eax,eax
c0017f65:	83 c4 1c             	add    esp,0x1c
c0017f68:	c3                   	ret    
c0017f69:	90                   	nop

c0017f6a <PCI::close(int, int, void*)>:
c0017f6a:	31 c0                	xor    eax,eax
c0017f6c:	c3                   	ret    
c0017f6d:	90                   	nop

c0017f6e <PCI::PCI()>:
c0017f6e:	83 ec 0c             	sub    esp,0xc
c0017f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f75:	83 ec 08             	sub    esp,0x8
c0017f78:	68 8f eb 01 c0       	push   0xc001eb8f
c0017f7d:	50                   	push   eax
c0017f7e:	e8 65 32 ff ff       	call   c000b1e8 <Bus::Bus(char const*)>
c0017f83:	83 c4 10             	add    esp,0x10
c0017f86:	ba 38 ec 01 c0       	mov    edx,0xc001ec38
c0017f8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8f:	89 10                	mov    DWORD PTR [eax],edx
c0017f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f95:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa3:	a3 a0 40 02 c0       	mov    ds:0xc00240a0,eax
c0017fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017fb2:	31 d2                	xor    edx,edx
c0017fb4:	88 c2                	mov    dl,al
c0017fb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fba:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017fcb:	31 d2                	xor    edx,edx
c0017fcd:	88 c2                	mov    dl,al
c0017fcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd3:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017fe2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fe9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017fef:	31 d2                	xor    edx,edx
c0017ff1:	88 c2                	mov    dl,al
c0017ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017ffb:	83 c9 c0             	or     ecx,0xffffffc0
c0017ffe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0018002:	90                   	nop
c0018003:	83 c4 0c             	add    esp,0xc
c0018006:	c3                   	ret    
c0018007:	90                   	nop

c0018008 <PCI::readBAR8(unsigned int, int)>:
c0018008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001800c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018010:	f6 c2 01             	test   dl,0x1
c0018013:	74 07                	je     c001801c <PCI::readBAR8(unsigned int, int)+0x14>
c0018015:	83 e2 fc             	and    edx,0xfffffffc
c0018018:	01 c2                	add    edx,eax
c001801a:	ec                   	in     al,dx
c001801b:	c3                   	ret    
c001801c:	83 e2 f0             	and    edx,0xfffffff0
c001801f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018022:	c3                   	ret    
c0018023:	90                   	nop

c0018024 <PCI::readBAR16(unsigned int, int)>:
c0018024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001802c:	f6 c2 01             	test   dl,0x1
c001802f:	74 08                	je     c0018039 <PCI::readBAR16(unsigned int, int)+0x15>
c0018031:	83 e2 fc             	and    edx,0xfffffffc
c0018034:	01 c2                	add    edx,eax
c0018036:	66 ed                	in     ax,dx
c0018038:	c3                   	ret    
c0018039:	83 e2 f0             	and    edx,0xfffffff0
c001803c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018040:	c3                   	ret    
c0018041:	90                   	nop

c0018042 <PCI::readBAR32(unsigned int, int)>:
c0018042:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001804a:	f6 c2 01             	test   dl,0x1
c001804d:	74 07                	je     c0018056 <PCI::readBAR32(unsigned int, int)+0x14>
c001804f:	83 e2 fc             	and    edx,0xfffffffc
c0018052:	01 c2                	add    edx,eax
c0018054:	ed                   	in     eax,dx
c0018055:	c3                   	ret    
c0018056:	83 e2 f0             	and    edx,0xfffffff0
c0018059:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001805c:	c3                   	ret    
c001805d:	90                   	nop

c001805e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001805e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018062:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018066:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001806a:	f6 c2 01             	test   dl,0x1
c001806d:	74 07                	je     c0018076 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001806f:	83 e2 fc             	and    edx,0xfffffffc
c0018072:	01 ca                	add    edx,ecx
c0018074:	ee                   	out    dx,al
c0018075:	c3                   	ret    
c0018076:	83 e2 f0             	and    edx,0xfffffff0
c0018079:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001807c:	c3                   	ret    
c001807d:	90                   	nop

c001807e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001807e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018086:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001808a:	f6 c2 01             	test   dl,0x1
c001808d:	74 08                	je     c0018097 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001808f:	83 e2 fc             	and    edx,0xfffffffc
c0018092:	01 ca                	add    edx,ecx
c0018094:	66 ef                	out    dx,ax
c0018096:	c3                   	ret    
c0018097:	83 e2 f0             	and    edx,0xfffffff0
c001809a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001809e:	c3                   	ret    
c001809f:	90                   	nop

c00180a0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00180a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180ac:	f6 c2 01             	test   dl,0x1
c00180af:	74 07                	je     c00180b8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00180b1:	83 e2 fc             	and    edx,0xfffffffc
c00180b4:	01 ca                	add    edx,ecx
c00180b6:	ef                   	out    dx,eax
c00180b7:	c3                   	ret    
c00180b8:	83 e2 f0             	and    edx,0xfffffff0
c00180bb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00180be:	c3                   	ret    
c00180bf:	90                   	nop

c00180c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00180c0:	55                   	push   ebp
c00180c1:	57                   	push   edi
c00180c2:	56                   	push   esi
c00180c3:	53                   	push   ebx
c00180c4:	83 ec 0c             	sub    esp,0xc
c00180c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00180cb:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00180cf:	89 f0                	mov    eax,esi
c00180d1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00180d5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00180d9:	3c 07                	cmp    al,0x7
c00180db:	76 10                	jbe    c00180ed <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00180dd:	83 ec 0c             	sub    esp,0xc
c00180e0:	68 97 eb 01 c0       	push   0xc001eb97
c00180e5:	e8 cd 7f ff ff       	call   c00100b7 <KePanic(char const*)>
c00180ea:	83 c4 10             	add    esp,0x10
c00180ed:	80 fb 0f             	cmp    bl,0xf
c00180f0:	76 10                	jbe    c0018102 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00180f2:	83 ec 0c             	sub    esp,0xc
c00180f5:	68 c7 eb 01 c0       	push   0xc001ebc7
c00180fa:	e8 b8 7f ff ff       	call   c00100b7 <KePanic(char const*)>
c00180ff:	83 c4 10             	add    esp,0x10
c0018102:	8d 04 36             	lea    eax,[esi+esi*1]
c0018105:	ba f8 0c 00 00       	mov    edx,0xcf8
c001810a:	83 c8 f0             	or     eax,0xfffffff0
c001810d:	ee                   	out    dx,al
c001810e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018113:	89 e8                	mov    eax,ebp
c0018115:	ee                   	out    dx,al
c0018116:	83 c4 0c             	add    esp,0xc
c0018119:	89 d8                	mov    eax,ebx
c001811b:	66 81 e7 fc 00       	and    di,0xfc
c0018120:	5b                   	pop    ebx
c0018121:	c1 e0 08             	shl    eax,0x8
c0018124:	5e                   	pop    esi
c0018125:	09 f8                	or     eax,edi
c0018127:	5f                   	pop    edi
c0018128:	66 0d 00 c0          	or     ax,0xc000
c001812c:	5d                   	pop    ebp
c001812d:	c3                   	ret    

c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001812e:	57                   	push   edi
c001812f:	56                   	push   esi
c0018130:	53                   	push   ebx
c0018131:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018139:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001813f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018143:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018147:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001814b:	83 ff 01             	cmp    edi,0x1
c001814e:	75 3e                	jne    c001818e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018150:	89 de                	mov    esi,ebx
c0018152:	0f b6 c0             	movzx  eax,al
c0018155:	81 e6 fc 00 00 00    	and    esi,0xfc
c001815b:	c1 e0 10             	shl    eax,0x10
c001815e:	0f b6 c9             	movzx  ecx,cl
c0018161:	09 f0                	or     eax,esi
c0018163:	c1 e1 08             	shl    ecx,0x8
c0018166:	0f b6 d2             	movzx  edx,dl
c0018169:	09 c8                	or     eax,ecx
c001816b:	c1 e2 0b             	shl    edx,0xb
c001816e:	09 d0                	or     eax,edx
c0018170:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018175:	0d 00 00 00 80       	or     eax,0x80000000
c001817a:	ef                   	out    dx,eax
c001817b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018180:	ed                   	in     eax,dx
c0018181:	83 e3 02             	and    ebx,0x2
c0018184:	0f b6 cb             	movzx  ecx,bl
c0018187:	c1 e1 03             	shl    ecx,0x3
c001818a:	d3 e8                	shr    eax,cl
c001818c:	eb 43                	jmp    c00181d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001818e:	83 ff 02             	cmp    edi,0x2
c0018191:	75 2c                	jne    c00181bf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018193:	83 ec 0c             	sub    esp,0xc
c0018196:	0f b6 c9             	movzx  ecx,cl
c0018199:	0f b6 d2             	movzx  edx,dl
c001819c:	0f b6 fb             	movzx  edi,bl
c001819f:	0f b6 c0             	movzx  eax,al
c00181a2:	57                   	push   edi
c00181a3:	51                   	push   ecx
c00181a4:	52                   	push   edx
c00181a5:	50                   	push   eax
c00181a6:	56                   	push   esi
c00181a7:	e8 14 ff ff ff       	call   c00180c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181ac:	89 c2                	mov    edx,eax
c00181ae:	ed                   	in     eax,dx
c00181af:	83 e3 02             	and    ebx,0x2
c00181b2:	83 c4 20             	add    esp,0x20
c00181b5:	0f b6 cb             	movzx  ecx,bl
c00181b8:	c1 e1 03             	shl    ecx,0x3
c00181bb:	d3 e8                	shr    eax,cl
c00181bd:	eb 12                	jmp    c00181d1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00181bf:	83 ec 0c             	sub    esp,0xc
c00181c2:	68 f7 eb 01 c0       	push   0xc001ebf7
c00181c7:	e8 eb 7e ff ff       	call   c00100b7 <KePanic(char const*)>
c00181cc:	83 c4 10             	add    esp,0x10
c00181cf:	31 c0                	xor    eax,eax
c00181d1:	5b                   	pop    ebx
c00181d2:	5e                   	pop    esi
c00181d3:	5f                   	pop    edi
c00181d4:	c3                   	ret    
c00181d5:	90                   	nop

c00181d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00181d6:	83 ec 18             	sub    esp,0x18
c00181d9:	6a 00                	push   0x0
c00181db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181e0:	50                   	push   eax
c00181e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181e6:	50                   	push   eax
c00181e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181ec:	50                   	push   eax
c00181ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181f1:	e8 38 ff ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181f6:	83 c4 2c             	add    esp,0x2c
c00181f9:	c3                   	ret    

c00181fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00181fa:	83 ec 18             	sub    esp,0x18
c00181fd:	6a 0e                	push   0xe
c00181ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018204:	50                   	push   eax
c0018205:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001820a:	50                   	push   eax
c001820b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018210:	50                   	push   eax
c0018211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018215:	e8 14 ff ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001821a:	83 c4 2c             	add    esp,0x2c
c001821d:	0f b6 c0             	movzx  eax,al
c0018220:	c3                   	ret    
c0018221:	90                   	nop

c0018222 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018222:	55                   	push   ebp
c0018223:	57                   	push   edi
c0018224:	56                   	push   esi
c0018225:	53                   	push   ebx
c0018226:	83 ec 18             	sub    esp,0x18
c0018229:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001822e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018233:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018238:	6a 0a                	push   0xa
c001823a:	56                   	push   esi
c001823b:	55                   	push   ebp
c001823c:	57                   	push   edi
c001823d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018241:	e8 e8 fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018246:	83 c4 14             	add    esp,0x14
c0018249:	89 c3                	mov    ebx,eax
c001824b:	6a 0a                	push   0xa
c001824d:	0f b6 db             	movzx  ebx,bl
c0018250:	56                   	push   esi
c0018251:	55                   	push   ebp
c0018252:	57                   	push   edi
c0018253:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018257:	e8 d2 fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001825c:	83 c4 2c             	add    esp,0x2c
c001825f:	25 00 ff 00 00       	and    eax,0xff00
c0018264:	09 d8                	or     eax,ebx
c0018266:	5b                   	pop    ebx
c0018267:	5e                   	pop    esi
c0018268:	5f                   	pop    edi
c0018269:	5d                   	pop    ebp
c001826a:	c3                   	ret    
c001826b:	90                   	nop

c001826c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001826c:	83 ec 18             	sub    esp,0x18
c001826f:	6a 08                	push   0x8
c0018271:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018276:	50                   	push   eax
c0018277:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001827c:	50                   	push   eax
c001827d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018282:	50                   	push   eax
c0018283:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018287:	e8 a2 fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001828c:	83 c4 2c             	add    esp,0x2c
c001828f:	0f b6 c4             	movzx  eax,ah
c0018292:	c3                   	ret    
c0018293:	90                   	nop

c0018294 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018294:	83 ec 18             	sub    esp,0x18
c0018297:	6a 08                	push   0x8
c0018299:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001829e:	50                   	push   eax
c001829f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182a4:	50                   	push   eax
c00182a5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182aa:	50                   	push   eax
c00182ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182af:	e8 7a fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182b4:	83 c4 2c             	add    esp,0x2c
c00182b7:	c3                   	ret    

c00182b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00182b8:	83 ec 18             	sub    esp,0x18
c00182bb:	6a 3c                	push   0x3c
c00182bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c2:	50                   	push   eax
c00182c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c8:	50                   	push   eax
c00182c9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ce:	50                   	push   eax
c00182cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182d3:	e8 56 fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182d8:	83 c4 2c             	add    esp,0x2c
c00182db:	c3                   	ret    

c00182dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00182dc:	83 ec 18             	sub    esp,0x18
c00182df:	6a 18                	push   0x18
c00182e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182e6:	50                   	push   eax
c00182e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ec:	50                   	push   eax
c00182ed:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182f2:	50                   	push   eax
c00182f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182f7:	e8 32 fe ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182fc:	83 c4 2c             	add    esp,0x2c
c00182ff:	0f b6 c4             	movzx  eax,ah
c0018302:	c3                   	ret    
c0018303:	90                   	nop

c0018304 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018304:	55                   	push   ebp
c0018305:	57                   	push   edi
c0018306:	56                   	push   esi
c0018307:	53                   	push   ebx
c0018308:	83 ec 28             	sub    esp,0x28
c001830b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001830f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018314:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0018319:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001831e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018325:	8d 43 12             	lea    eax,[ebx+0x12]
c0018328:	83 c3 10             	add    ebx,0x10
c001832b:	0f b6 c0             	movzx  eax,al
c001832e:	0f b6 db             	movzx  ebx,bl
c0018331:	50                   	push   eax
c0018332:	51                   	push   ecx
c0018333:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0018337:	57                   	push   edi
c0018338:	55                   	push   ebp
c0018339:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001833d:	e8 ec fd ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018342:	83 c4 14             	add    esp,0x14
c0018345:	89 c6                	mov    esi,eax
c0018347:	53                   	push   ebx
c0018348:	c1 e6 10             	shl    esi,0x10
c001834b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001834f:	51                   	push   ecx
c0018350:	57                   	push   edi
c0018351:	55                   	push   ebp
c0018352:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018356:	e8 d3 fd ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001835b:	83 c4 3c             	add    esp,0x3c
c001835e:	0f b7 c0             	movzx  eax,ax
c0018361:	5b                   	pop    ebx
c0018362:	09 f0                	or     eax,esi
c0018364:	5e                   	pop    esi
c0018365:	5f                   	pop    edi
c0018366:	5d                   	pop    ebp
c0018367:	c3                   	ret    

c0018368 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018368:	55                   	push   ebp
c0018369:	57                   	push   edi
c001836a:	56                   	push   esi
c001836b:	53                   	push   ebx
c001836c:	83 ec 0c             	sub    esp,0xc
c001836f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018373:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018377:	89 f5                	mov    ebp,esi
c0018379:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001837f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018383:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018387:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001838b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001838f:	83 f9 01             	cmp    ecx,0x1
c0018392:	75 5d                	jne    c00183f1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018394:	0f b6 c8             	movzx  ecx,al
c0018397:	0f b6 d2             	movzx  edx,dl
c001839a:	c1 e1 10             	shl    ecx,0x10
c001839d:	c1 e2 0b             	shl    edx,0xb
c00183a0:	89 f0                	mov    eax,esi
c00183a2:	25 fc 00 00 00       	and    eax,0xfc
c00183a7:	09 c1                	or     ecx,eax
c00183a9:	89 e8                	mov    eax,ebp
c00183ab:	0f b6 c0             	movzx  eax,al
c00183ae:	c1 e0 08             	shl    eax,0x8
c00183b1:	09 c1                	or     ecx,eax
c00183b3:	09 d1                	or     ecx,edx
c00183b5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183ba:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00183c0:	89 c8                	mov    eax,ecx
c00183c2:	ef                   	out    dx,eax
c00183c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00183c8:	ed                   	in     eax,dx
c00183c9:	0f b7 db             	movzx  ebx,bx
c00183cc:	83 e6 02             	and    esi,0x2
c00183cf:	74 0a                	je     c00183db <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00183d1:	0f b7 d0             	movzx  edx,ax
c00183d4:	c1 e3 10             	shl    ebx,0x10
c00183d7:	09 d3                	or     ebx,edx
c00183d9:	eb 05                	jmp    c00183e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00183db:	66 31 c0             	xor    ax,ax
c00183de:	09 c3                	or     ebx,eax
c00183e0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183e5:	89 c8                	mov    eax,ecx
c00183e7:	ef                   	out    dx,eax
c00183e8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00183ed:	89 d8                	mov    eax,ebx
c00183ef:	eb 41                	jmp    c0018432 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00183f1:	83 f9 02             	cmp    ecx,0x2
c00183f4:	75 45                	jne    c001843b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00183f6:	83 ec 0c             	sub    esp,0xc
c00183f9:	0f b6 d2             	movzx  edx,dl
c00183fc:	89 f1                	mov    ecx,esi
c00183fe:	0f b6 c0             	movzx  eax,al
c0018401:	0f b6 f1             	movzx  esi,cl
c0018404:	89 e9                	mov    ecx,ebp
c0018406:	56                   	push   esi
c0018407:	0f b6 c9             	movzx  ecx,cl
c001840a:	51                   	push   ecx
c001840b:	52                   	push   edx
c001840c:	50                   	push   eax
c001840d:	57                   	push   edi
c001840e:	e8 ad fc ff ff       	call   c00180c0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018413:	89 c2                	mov    edx,eax
c0018415:	ed                   	in     eax,dx
c0018416:	83 c4 20             	add    esp,0x20
c0018419:	0f b7 db             	movzx  ebx,bx
c001841c:	f6 c2 02             	test   dl,0x2
c001841f:	74 0c                	je     c001842d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018421:	0f b7 c8             	movzx  ecx,ax
c0018424:	89 d8                	mov    eax,ebx
c0018426:	c1 e0 10             	shl    eax,0x10
c0018429:	09 c8                	or     eax,ecx
c001842b:	eb 05                	jmp    c0018432 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001842d:	66 31 c0             	xor    ax,ax
c0018430:	09 d8                	or     eax,ebx
c0018432:	ef                   	out    dx,eax
c0018433:	83 c4 0c             	add    esp,0xc
c0018436:	5b                   	pop    ebx
c0018437:	5e                   	pop    esi
c0018438:	5f                   	pop    edi
c0018439:	5d                   	pop    ebp
c001843a:	c3                   	ret    
c001843b:	c7 44 24 20 f7 eb 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ebf7
c0018443:	83 c4 0c             	add    esp,0xc
c0018446:	5b                   	pop    ebx
c0018447:	5e                   	pop    esi
c0018448:	5f                   	pop    edi
c0018449:	5d                   	pop    ebp
c001844a:	e9 68 7c ff ff       	jmp    c00100b7 <KePanic(char const*)>
c001844f:	90                   	nop

c0018450 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018450:	55                   	push   ebp
c0018451:	57                   	push   edi
c0018452:	56                   	push   esi
c0018453:	53                   	push   ebx
c0018454:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001845a:	80 3d ac 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240ac,0x0
c0018461:	0f 85 84 00 00 00    	jne    c00184eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018467:	83 ec 0c             	sub    esp,0xc
c001846a:	68 14 01 00 00       	push   0x114
c001846f:	e8 45 f3 fe ff       	call   c00077b9 <malloc>
c0018474:	83 c4 0c             	add    esp,0xc
c0018477:	89 c3                	mov    ebx,eax
c0018479:	ff 35 f0 36 02 c0    	push   DWORD PTR ds:0xc00236f0
c001847f:	68 fd eb 01 c0       	push   0xc001ebfd
c0018484:	50                   	push   eax
c0018485:	e8 40 25 ff ff       	call   c000a9ca <File::File(char const*, Process*)>
c001848a:	5a                   	pop    edx
c001848b:	59                   	pop    ecx
c001848c:	6a 01                	push   0x1
c001848e:	53                   	push   ebx
c001848f:	e8 f6 25 ff ff       	call   c000aa8a <File::open(FileOpenMode)>
c0018494:	83 c4 0c             	add    esp,0xc
c0018497:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001849b:	50                   	push   eax
c001849c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00184a0:	50                   	push   eax
c00184a1:	53                   	push   ebx
c00184a2:	e8 8f 28 ff ff       	call   c000ad36 <File::stat(unsigned long long*, bool*)>
c00184a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ab:	40                   	inc    eax
c00184ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00184af:	e8 05 f3 fe ff       	call   c00077b9 <malloc>
c00184b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00184b8:	a3 a8 40 02 c0       	mov    ds:0xc00240a8,eax
c00184bd:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00184c1:	5e                   	pop    esi
c00184c2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184c4:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00184c8:	51                   	push   ecx
c00184c9:	50                   	push   eax
c00184ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00184ce:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00184d2:	53                   	push   ebx
c00184d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184d6:	83 c4 14             	add    esp,0x14
c00184d9:	53                   	push   ebx
c00184da:	e8 09 26 ff ff       	call   c000aae8 <File::close()>
c00184df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	a3 a4 40 02 c0       	mov    ds:0xc00240a4,eax
c00184eb:	a1 a4 40 02 c0       	mov    eax,ds:0xc00240a4
c00184f0:	8b 15 a8 40 02 c0    	mov    edx,DWORD PTR ds:0xc00240a8
c00184f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00184f9:	31 ff                	xor    edi,edi
c00184fb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018503:	31 f6                	xor    esi,esi
c0018505:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001850a:	31 db                	xor    ebx,ebx
c001850c:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018514:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018519:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018520:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018524:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001852b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001852f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018532:	0f 8e 6b 01 00 00    	jle    c00186a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018538:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001853b:	d4 40                	aam    0x40
c001853d:	d5 39                	aad    0x39
c001853f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018543:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018547:	d4 40                	aam    0x40
c0018549:	d5 39                	aad    0x39
c001854b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001854f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018553:	d4 40                	aam    0x40
c0018555:	d5 39                	aad    0x39
c0018557:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001855b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001855f:	d4 40                	aam    0x40
c0018561:	d5 39                	aad    0x39
c0018563:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018567:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001856b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001856f:	3c 56                	cmp    al,0x56
c0018571:	74 45                	je     c00185b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018573:	d4 40                	aam    0x40
c0018575:	d5 39                	aad    0x39
c0018577:	8d 48 d0             	lea    ecx,[eax-0x30]
c001857a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001857e:	0f b6 c9             	movzx  ecx,cl
c0018581:	c1 e1 04             	shl    ecx,0x4
c0018584:	d4 40                	aam    0x40
c0018586:	d5 39                	aad    0x39
c0018588:	8d 58 d0             	lea    ebx,[eax-0x30]
c001858b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001858f:	0f b6 db             	movzx  ebx,bl
c0018592:	09 cb                	or     ebx,ecx
c0018594:	c1 e3 04             	shl    ebx,0x4
c0018597:	d4 40                	aam    0x40
c0018599:	d5 39                	aad    0x39
c001859b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001859e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00185a2:	0f b6 c9             	movzx  ecx,cl
c00185a5:	09 cb                	or     ebx,ecx
c00185a7:	c1 e3 04             	shl    ebx,0x4
c00185aa:	89 d9                	mov    ecx,ebx
c00185ac:	d4 40                	aam    0x40
c00185ae:	d5 39                	aad    0x39
c00185b0:	8d 58 d0             	lea    ebx,[eax-0x30]
c00185b3:	0f b6 db             	movzx  ebx,bl
c00185b6:	09 cb                	or     ebx,ecx
c00185b8:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00185bc:	80 f9 44             	cmp    cl,0x44
c00185bf:	74 47                	je     c0018608 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00185c1:	88 c8                	mov    al,cl
c00185c3:	d4 40                	aam    0x40
c00185c5:	d5 39                	aad    0x39
c00185c7:	83 e8 30             	sub    eax,0x30
c00185ca:	0f b6 e8             	movzx  ebp,al
c00185cd:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00185d1:	c1 e5 04             	shl    ebp,0x4
c00185d4:	d4 40                	aam    0x40
c00185d6:	d5 39                	aad    0x39
c00185d8:	83 e8 30             	sub    eax,0x30
c00185db:	0f b6 f0             	movzx  esi,al
c00185de:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00185e2:	09 ee                	or     esi,ebp
c00185e4:	c1 e6 04             	shl    esi,0x4
c00185e7:	d4 40                	aam    0x40
c00185e9:	d5 39                	aad    0x39
c00185eb:	83 e8 30             	sub    eax,0x30
c00185ee:	0f b6 e8             	movzx  ebp,al
c00185f1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00185f5:	09 ee                	or     esi,ebp
c00185f7:	c1 e6 04             	shl    esi,0x4
c00185fa:	89 f5                	mov    ebp,esi
c00185fc:	d4 40                	aam    0x40
c00185fe:	d5 39                	aad    0x39
c0018600:	83 e8 30             	sub    eax,0x30
c0018603:	0f b6 f0             	movzx  esi,al
c0018606:	09 ee                	or     esi,ebp
c0018608:	83 c7 10             	add    edi,0x10
c001860b:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001860f:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018612:	3c 0a                	cmp    al,0xa
c0018614:	74 09                	je     c001861f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018616:	45                   	inc    ebp
c0018617:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001861a:	75 16                	jne    c0018632 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001861c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001861f:	3c 0a                	cmp    al,0xa
c0018621:	0f 94 c0             	sete   al
c0018624:	0f b6 c0             	movzx  eax,al
c0018627:	01 c7                	add    edi,eax
c0018629:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001862e:	75 0c                	jne    c001863c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018630:	eb 15                	jmp    c0018647 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018632:	47                   	inc    edi
c0018633:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018636:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001863a:	eb d3                	jmp    c001860f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001863c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018641:	0f 85 e8 fe ff ff    	jne    c001852f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018647:	80 f9 44             	cmp    cl,0x44
c001864a:	74 0b                	je     c0018657 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001864c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018651:	0f 85 d8 fe ff ff    	jne    c001852f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018657:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001865b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001865f:	c1 e1 04             	shl    ecx,0x4
c0018662:	83 e8 30             	sub    eax,0x30
c0018665:	09 c8                	or     eax,ecx
c0018667:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001866b:	0f 85 be fe ff ff    	jne    c001852f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018671:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018675:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018679:	c1 e1 04             	shl    ecx,0x4
c001867c:	83 e8 30             	sub    eax,0x30
c001867f:	09 c8                	or     eax,ecx
c0018681:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018685:	0f 85 a4 fe ff ff    	jne    c001852f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001868b:	50                   	push   eax
c001868c:	50                   	push   eax
c001868d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018691:	50                   	push   eax
c0018692:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018699:	e8 62 7f fe ff       	call   c0000600 <strcpy>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	eb 15                	jmp    c00186b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00186a3:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186aa:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00186b5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00186b8:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00186bf:	81 c4 2c 01 00 00    	add    esp,0x12c
c00186c5:	5b                   	pop    ebx
c00186c6:	5e                   	pop    esi
c00186c7:	5f                   	pop    edi
c00186c8:	5d                   	pop    ebp
c00186c9:	c3                   	ret    

c00186ca <PCI::checkBus(unsigned char)>:
c00186ca:	56                   	push   esi
c00186cb:	53                   	push   ebx
c00186cc:	31 f6                	xor    esi,esi
c00186ce:	51                   	push   ecx
c00186cf:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00186d3:	0f b6 c3             	movzx  eax,bl
c00186d6:	52                   	push   edx
c00186d7:	56                   	push   esi
c00186d8:	46                   	inc    esi
c00186d9:	50                   	push   eax
c00186da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186de:	e8 f3 02 00 00       	call   c00189d6 <PCI::checkDevice(unsigned char, unsigned char)>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	83 fe 20             	cmp    esi,0x20
c00186e9:	75 e8                	jne    c00186d3 <PCI::checkBus(unsigned char)+0x9>
c00186eb:	58                   	pop    eax
c00186ec:	5b                   	pop    ebx
c00186ed:	5e                   	pop    esi
c00186ee:	c3                   	ret    
c00186ef:	90                   	nop

c00186f0 <PCI::foundDevice(PCIDeviceInfo)>:
c00186f0:	55                   	push   ebp
c00186f1:	57                   	push   edi
c00186f2:	56                   	push   esi
c00186f3:	53                   	push   ebx
c00186f4:	83 ec 1c             	sub    esp,0x1c
c00186f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00186fb:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018701:	0f 84 52 01 00 00    	je     c0018859 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018707:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001870b:	66 81 f9 06 04       	cmp    cx,0x406
c0018710:	75 2c                	jne    c001873e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018712:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018717:	50                   	push   eax
c0018718:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001871d:	50                   	push   eax
c001871e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018723:	50                   	push   eax
c0018724:	56                   	push   esi
c0018725:	e8 b2 fb ff ff       	call   c00182dc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001872a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001872e:	0f b6 c0             	movzx  eax,al
c0018731:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018735:	83 c4 2c             	add    esp,0x2c
c0018738:	5b                   	pop    ebx
c0018739:	5e                   	pop    esi
c001873a:	5f                   	pop    edi
c001873b:	5d                   	pop    ebp
c001873c:	eb 8c                	jmp    c00186ca <PCI::checkBus(unsigned char)>
c001873e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018742:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018748:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001874c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018750:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018754:	88 d3                	mov    bl,dl
c0018756:	85 c0                	test   eax,eax
c0018758:	74 33                	je     c001878d <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001875a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001875d:	85 d2                	test   edx,edx
c001875f:	74 28                	je     c0018789 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018761:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018767:	31 ef                	xor    edi,ebp
c0018769:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001876f:	75 18                	jne    c0018789 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018771:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018775:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001877b:	75 0c                	jne    c0018789 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001877d:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018783:	0f 84 d0 00 00 00    	je     c0018859 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018789:	8b 00                	mov    eax,DWORD PTR [eax]
c001878b:	eb c9                	jmp    c0018756 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001878d:	66 81 f9 01 06       	cmp    cx,0x601
c0018792:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018796:	75 19                	jne    c00187b1 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018798:	83 ec 0c             	sub    esp,0xc
c001879b:	68 64 01 00 00       	push   0x164
c00187a0:	e8 14 f0 fe ff       	call   c00077b9 <malloc>
c00187a5:	89 c5                	mov    ebp,eax
c00187a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00187aa:	e8 47 0e 00 00       	call   c00195f6 <SATABus::SATABus()>
c00187af:	eb 1e                	jmp    c00187cf <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00187b1:	66 81 f9 01 01       	cmp    cx,0x101
c00187b6:	75 60                	jne    c0018818 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00187b8:	83 ec 0c             	sub    esp,0xc
c00187bb:	68 70 02 00 00       	push   0x270
c00187c0:	e8 f4 ef fe ff       	call   c00077b9 <malloc>
c00187c5:	89 c5                	mov    ebp,eax
c00187c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00187ca:	e8 cb 02 00 00       	call   c0018a9a <IDE::IDE()>
c00187cf:	58                   	pop    eax
c00187d0:	5a                   	pop    edx
c00187d1:	55                   	push   ebp
c00187d2:	56                   	push   esi
c00187d3:	e8 bc 30 ff ff       	call   c000b894 <Device::addChild(Device*)>
c00187d8:	83 ec 1c             	sub    esp,0x1c
c00187db:	b9 09 00 00 00       	mov    ecx,0x9
c00187e0:	fc                   	cld    
c00187e1:	89 e7                	mov    edi,esp
c00187e3:	89 de                	mov    esi,ebx
c00187e5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187e7:	55                   	push   ebp
c00187e8:	e8 ed 2f ff ff       	call   c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c00187ed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187f0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00187f4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00187fc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018804:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001880c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001880f:	83 c4 4c             	add    esp,0x4c
c0018812:	5b                   	pop    ebx
c0018813:	5e                   	pop    esi
c0018814:	5f                   	pop    edi
c0018815:	5d                   	pop    ebp
c0018816:	ff e0                	jmp    eax
c0018818:	83 ec 0c             	sub    esp,0xc
c001881b:	68 58 01 00 00       	push   0x158
c0018820:	e8 94 ef fe ff       	call   c00077b9 <malloc>
c0018825:	89 c5                	mov    ebp,eax
c0018827:	58                   	pop    eax
c0018828:	5a                   	pop    edx
c0018829:	68 16 ec 01 c0       	push   0xc001ec16
c001882e:	55                   	push   ebp
c001882f:	e8 fe 32 ff ff       	call   c000bb32 <DriverlessDevice::DriverlessDevice(char const*)>
c0018834:	59                   	pop    ecx
c0018835:	5f                   	pop    edi
c0018836:	55                   	push   ebp
c0018837:	56                   	push   esi
c0018838:	e8 57 30 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001883d:	b9 09 00 00 00       	mov    ecx,0x9
c0018842:	fc                   	cld    
c0018843:	89 df                	mov    edi,ebx
c0018845:	89 de                	mov    esi,ebx
c0018847:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018849:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001884d:	83 c4 2c             	add    esp,0x2c
c0018850:	5b                   	pop    ebx
c0018851:	5e                   	pop    esi
c0018852:	5f                   	pop    edi
c0018853:	5d                   	pop    ebp
c0018854:	e9 81 2f ff ff       	jmp    c000b7da <Device::preOpenPCI(PCIDeviceInfo)>
c0018859:	83 c4 1c             	add    esp,0x1c
c001885c:	5b                   	pop    ebx
c001885d:	5e                   	pop    esi
c001885e:	5f                   	pop    edi
c001885f:	5d                   	pop    ebp
c0018860:	c3                   	ret    
c0018861:	90                   	nop

c0018862 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018862:	55                   	push   ebp
c0018863:	57                   	push   edi
c0018864:	56                   	push   esi
c0018865:	53                   	push   ebx
c0018866:	83 ec 68             	sub    esp,0x68
c0018869:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001886d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018874:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018878:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001887f:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018884:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018888:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001888f:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018894:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018898:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001889d:	6a 0c                	push   0xc
c001889f:	57                   	push   edi
c00188a0:	53                   	push   ebx
c00188a1:	56                   	push   esi
c00188a2:	55                   	push   ebp
c00188a3:	e8 86 f8 ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a8:	83 c4 20             	add    esp,0x20
c00188ab:	57                   	push   edi
c00188ac:	53                   	push   ebx
c00188ad:	56                   	push   esi
c00188ae:	55                   	push   ebp
c00188af:	e8 6e f9 ff ff       	call   c0018222 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00188b4:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c00188b9:	57                   	push   edi
c00188ba:	53                   	push   ebx
c00188bb:	56                   	push   esi
c00188bc:	55                   	push   ebp
c00188bd:	e8 f6 f9 ff ff       	call   c00182b8 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00188c2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00188c6:	83 c4 14             	add    esp,0x14
c00188c9:	6a 3c                	push   0x3c
c00188cb:	57                   	push   edi
c00188cc:	53                   	push   ebx
c00188cd:	56                   	push   esi
c00188ce:	55                   	push   ebp
c00188cf:	e8 5a f8 ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188d4:	0f b6 c4             	movzx  eax,ah
c00188d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188db:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00188df:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00188e3:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c00188e8:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00188ee:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00188f4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188f8:	83 c4 20             	add    esp,0x20
c00188fb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018900:	74 30                	je     c0018932 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018902:	31 c0                	xor    eax,eax
c0018904:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018908:	7e 28                	jle    c0018932 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001890a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018912:	39 cb                	cmp    ebx,ecx
c0018914:	75 19                	jne    c001892f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018916:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001891e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018922:	75 0b                	jne    c001892f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018924:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001892b:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001892f:	40                   	inc    eax
c0018930:	eb d2                	jmp    c0018904 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018932:	31 d2                	xor    edx,edx
c0018934:	83 ec 0c             	sub    esp,0xc
c0018937:	57                   	push   edi
c0018938:	53                   	push   ebx
c0018939:	56                   	push   esi
c001893a:	52                   	push   edx
c001893b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001893f:	55                   	push   ebp
c0018940:	e8 bf f9 ff ff       	call   c0018304 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018945:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018949:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001894d:	42                   	inc    edx
c001894e:	83 c4 20             	add    esp,0x20
c0018951:	83 fa 06             	cmp    edx,0x6
c0018954:	75 de                	jne    c0018934 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018956:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001895b:	83 ec 0c             	sub    esp,0xc
c001895e:	86 e0                	xchg   al,ah
c0018960:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018965:	6a 02                	push   0x2
c0018967:	57                   	push   edi
c0018968:	53                   	push   ebx
c0018969:	56                   	push   esi
c001896a:	55                   	push   ebp
c001896b:	e8 be f7 ff ff       	call   c001812e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018970:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018975:	83 c4 20             	add    esp,0x20
c0018978:	57                   	push   edi
c0018979:	53                   	push   ebx
c001897a:	56                   	push   esi
c001897b:	55                   	push   ebp
c001897c:	e8 eb f8 ff ff       	call   c001826c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018981:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018985:	57                   	push   edi
c0018986:	53                   	push   ebx
c0018987:	56                   	push   esi
c0018988:	55                   	push   ebp
c0018989:	e8 48 f8 ff ff       	call   c00181d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001898e:	b9 09 00 00 00       	mov    ecx,0x9
c0018993:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018998:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001899c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00189a0:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00189a4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00189a8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c00189ac:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c00189b0:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c00189b4:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c00189b8:	83 ec 0c             	sub    esp,0xc
c00189bb:	fc                   	cld    
c00189bc:	89 e7                	mov    edi,esp
c00189be:	8d 74 24 58          	lea    esi,[esp+0x58]
c00189c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00189c4:	55                   	push   ebp
c00189c5:	e8 26 fd ff ff       	call   c00186f0 <PCI::foundDevice(PCIDeviceInfo)>
c00189ca:	81 c4 8c 00 00 00    	add    esp,0x8c
c00189d0:	5b                   	pop    ebx
c00189d1:	5e                   	pop    esi
c00189d2:	5f                   	pop    edi
c00189d3:	5d                   	pop    ebp
c00189d4:	c3                   	ret    
c00189d5:	90                   	nop

c00189d6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00189d6:	55                   	push   ebp
c00189d7:	57                   	push   edi
c00189d8:	56                   	push   esi
c00189d9:	53                   	push   ebx
c00189da:	83 ec 0c             	sub    esp,0xc
c00189dd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189e1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00189e6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00189eb:	6a 00                	push   0x0
c00189ed:	56                   	push   esi
c00189ee:	57                   	push   edi
c00189ef:	55                   	push   ebp
c00189f0:	e8 e1 f7 ff ff       	call   c00181d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189f5:	6a 00                	push   0x0
c00189f7:	56                   	push   esi
c00189f8:	57                   	push   edi
c00189f9:	55                   	push   ebp
c00189fa:	e8 63 fe ff ff       	call   c0018862 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00189ff:	83 c4 20             	add    esp,0x20
c0018a02:	6a 00                	push   0x0
c0018a04:	56                   	push   esi
c0018a05:	57                   	push   edi
c0018a06:	55                   	push   ebp
c0018a07:	e8 ee f7 ff ff       	call   c00181fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a0c:	83 c4 10             	add    esp,0x10
c0018a0f:	84 c0                	test   al,al
c0018a11:	79 27                	jns    c0018a3a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018a13:	bb 01 00 00 00       	mov    ebx,0x1
c0018a18:	53                   	push   ebx
c0018a19:	56                   	push   esi
c0018a1a:	57                   	push   edi
c0018a1b:	55                   	push   ebp
c0018a1c:	e8 b5 f7 ff ff       	call   c00181d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a21:	83 c4 10             	add    esp,0x10
c0018a24:	66 40                	inc    ax
c0018a26:	74 0c                	je     c0018a34 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018a28:	53                   	push   ebx
c0018a29:	56                   	push   esi
c0018a2a:	57                   	push   edi
c0018a2b:	55                   	push   ebp
c0018a2c:	e8 31 fe ff ff       	call   c0018862 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	43                   	inc    ebx
c0018a35:	83 fb 08             	cmp    ebx,0x8
c0018a38:	75 de                	jne    c0018a18 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018a3a:	83 c4 0c             	add    esp,0xc
c0018a3d:	5b                   	pop    ebx
c0018a3e:	5e                   	pop    esi
c0018a3f:	5f                   	pop    edi
c0018a40:	5d                   	pop    ebp
c0018a41:	c3                   	ret    

c0018a42 <PCI::detect()>:
c0018a42:	56                   	push   esi
c0018a43:	53                   	push   ebx
c0018a44:	53                   	push   ebx
c0018a45:	31 db                	xor    ebx,ebx
c0018a47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a4b:	6a 00                	push   0x0
c0018a4d:	6a 00                	push   0x0
c0018a4f:	6a 00                	push   0x0
c0018a51:	56                   	push   esi
c0018a52:	e8 a3 f7 ff ff       	call   c00181fa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a57:	83 c4 10             	add    esp,0x10
c0018a5a:	a8 80                	test   al,0x80
c0018a5c:	75 21                	jne    c0018a7f <PCI::detect()+0x3d>
c0018a5e:	51                   	push   ecx
c0018a5f:	51                   	push   ecx
c0018a60:	6a 00                	push   0x0
c0018a62:	56                   	push   esi
c0018a63:	e8 62 fc ff ff       	call   c00186ca <PCI::checkBus(unsigned char)>
c0018a68:	83 c4 10             	add    esp,0x10
c0018a6b:	eb 24                	jmp    c0018a91 <PCI::detect()+0x4f>
c0018a6d:	52                   	push   edx
c0018a6e:	52                   	push   edx
c0018a6f:	53                   	push   ebx
c0018a70:	43                   	inc    ebx
c0018a71:	56                   	push   esi
c0018a72:	e8 53 fc ff ff       	call   c00186ca <PCI::checkBus(unsigned char)>
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	83 fb 08             	cmp    ebx,0x8
c0018a7d:	74 12                	je     c0018a91 <PCI::detect()+0x4f>
c0018a7f:	53                   	push   ebx
c0018a80:	6a 00                	push   0x0
c0018a82:	6a 00                	push   0x0
c0018a84:	56                   	push   esi
c0018a85:	e8 4c f7 ff ff       	call   c00181d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a8a:	83 c4 10             	add    esp,0x10
c0018a8d:	66 40                	inc    ax
c0018a8f:	74 dc                	je     c0018a6d <PCI::detect()+0x2b>
c0018a91:	58                   	pop    eax
c0018a92:	5b                   	pop    ebx
c0018a93:	5e                   	pop    esi
c0018a94:	c3                   	ret    
c0018a95:	90                   	nop

c0018a96 <IDE::close(int, int, void*)>:
c0018a96:	83 c8 ff             	or     eax,0xffffffff
c0018a99:	c3                   	ret    

c0018a9a <IDE::IDE()>:
c0018a9a:	83 ec 0c             	sub    esp,0xc
c0018a9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aa1:	83 ec 08             	sub    esp,0x8
c0018aa4:	68 5c ec 01 c0       	push   0xc001ec5c
c0018aa9:	50                   	push   eax
c0018aaa:	e8 29 31 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c0018aaf:	83 c4 10             	add    esp,0x10
c0018ab2:	ba ec ec 01 c0       	mov    edx,0xc001ecec
c0018ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018abb:	89 10                	mov    DWORD PTR [eax],edx
c0018abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018ac8:	90                   	nop
c0018ac9:	83 c4 0c             	add    esp,0xc
c0018acc:	c3                   	ret    
c0018acd:	90                   	nop

c0018ace <IDE::prepareInterrupt(unsigned char)>:
c0018ace:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018ad3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018ad7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018adf:	c3                   	ret    

c0018ae0 <selectDrive(unsigned char, unsigned char)>:
c0018ae0:	c3                   	ret    
c0018ae1:	90                   	nop

c0018ae2 <IDE::getBase(unsigned char)>:
c0018ae2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018ae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018aeb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018af3:	c3                   	ret    

c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018af4:	55                   	push   ebp
c0018af5:	57                   	push   edi
c0018af6:	56                   	push   esi
c0018af7:	53                   	push   ebx
c0018af8:	83 ec 1c             	sub    esp,0x1c
c0018afb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018aff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b03:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018b06:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b0e:	80 f9 03             	cmp    cl,0x3
c0018b11:	77 51                	ja     c0018b64 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018b13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b17:	0f b6 f2             	movzx  esi,dl
c0018b1a:	0f b6 db             	movzx  ebx,bl
c0018b1d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018b20:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018b24:	83 ca 80             	or     edx,0xffffff80
c0018b27:	0f b6 d2             	movzx  edx,dl
c0018b2a:	52                   	push   edx
c0018b2b:	6a 0c                	push   0xc
c0018b2d:	56                   	push   esi
c0018b2e:	57                   	push   edi
c0018b2f:	e8 c0 ff ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b34:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018b39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b3d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018b41:	ee                   	out    dx,al
c0018b42:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018b47:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018b4b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018b4f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b53:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018b5b:	83 c4 2c             	add    esp,0x2c
c0018b5e:	5b                   	pop    ebx
c0018b5f:	5e                   	pop    esi
c0018b60:	5f                   	pop    edi
c0018b61:	5d                   	pop    ebp
c0018b62:	eb 90                	jmp    c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b64:	80 fb 07             	cmp    bl,0x7
c0018b67:	77 12                	ja     c0018b7b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018b69:	0f b6 d2             	movzx  edx,dl
c0018b6c:	0f b6 db             	movzx  ebx,bl
c0018b6f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018b77:	89 da                	mov    edx,ebx
c0018b79:	eb 2f                	jmp    c0018baa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018b7b:	80 fb 0d             	cmp    bl,0xd
c0018b7e:	77 13                	ja     c0018b93 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018b80:	0f b6 d2             	movzx  edx,dl
c0018b83:	0f b6 db             	movzx  ebx,bl
c0018b86:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018b8d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018b91:	eb 17                	jmp    c0018baa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018b93:	80 fb 15             	cmp    bl,0x15
c0018b96:	77 13                	ja     c0018bab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018b98:	0f b6 d2             	movzx  edx,dl
c0018b9b:	0f b6 db             	movzx  ebx,bl
c0018b9e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018ba6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018baa:	ee                   	out    dx,al
c0018bab:	83 c4 1c             	add    esp,0x1c
c0018bae:	5b                   	pop    ebx
c0018baf:	5e                   	pop    esi
c0018bb0:	5f                   	pop    edi
c0018bb1:	5d                   	pop    ebp
c0018bb2:	c3                   	ret    
c0018bb3:	90                   	nop

c0018bb4 <IDE::read(unsigned char, unsigned char)>:
c0018bb4:	55                   	push   ebp
c0018bb5:	57                   	push   edi
c0018bb6:	56                   	push   esi
c0018bb7:	53                   	push   ebx
c0018bb8:	83 ec 1c             	sub    esp,0x1c
c0018bbb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018bbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018bc3:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018bc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bca:	3c 03                	cmp    al,0x3
c0018bcc:	77 43                	ja     c0018c11 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018bce:	0f b6 f2             	movzx  esi,dl
c0018bd1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018bd4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018bd8:	83 c8 80             	or     eax,0xffffff80
c0018bdb:	0f b6 c0             	movzx  eax,al
c0018bde:	50                   	push   eax
c0018bdf:	6a 0c                	push   0xc
c0018be1:	56                   	push   esi
c0018be2:	57                   	push   edi
c0018be3:	e8 0c ff ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018be8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018bed:	0f b6 c3             	movzx  eax,bl
c0018bf0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018bf4:	ec                   	in     al,dx
c0018bf5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018bf9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018bfe:	52                   	push   edx
c0018bff:	6a 0c                	push   0xc
c0018c01:	56                   	push   esi
c0018c02:	57                   	push   edi
c0018c03:	e8 ec fe ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c08:	83 c4 20             	add    esp,0x20
c0018c0b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c0f:	eb 49                	jmp    c0018c5a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c11:	80 fb 07             	cmp    bl,0x7
c0018c14:	77 12                	ja     c0018c28 <IDE::read(unsigned char, unsigned char)+0x74>
c0018c16:	0f b6 d2             	movzx  edx,dl
c0018c19:	0f b6 c3             	movzx  eax,bl
c0018c1c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018c24:	89 c2                	mov    edx,eax
c0018c26:	eb 31                	jmp    c0018c59 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c28:	80 fb 0d             	cmp    bl,0xd
c0018c2b:	77 13                	ja     c0018c40 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018c2d:	0f b6 d2             	movzx  edx,dl
c0018c30:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018c37:	0f b6 d3             	movzx  edx,bl
c0018c3a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018c3e:	eb 19                	jmp    c0018c59 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c40:	31 c0                	xor    eax,eax
c0018c42:	80 fb 15             	cmp    bl,0x15
c0018c45:	77 13                	ja     c0018c5a <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c47:	0f b6 d2             	movzx  edx,dl
c0018c4a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018c52:	0f b6 d3             	movzx  edx,bl
c0018c55:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018c59:	ec                   	in     al,dx
c0018c5a:	83 c4 1c             	add    esp,0x1c
c0018c5d:	5b                   	pop    ebx
c0018c5e:	5e                   	pop    esi
c0018c5f:	5f                   	pop    edi
c0018c60:	5d                   	pop    ebp
c0018c61:	c3                   	ret    

c0018c62 <IDE::waitInterrupt(unsigned char)>:
c0018c62:	57                   	push   edi
c0018c63:	56                   	push   esi
c0018c64:	31 f6                	xor    esi,esi
c0018c66:	53                   	push   ebx
c0018c67:	83 ec 10             	sub    esp,0x10
c0018c6a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018c6e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c72:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c76:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018c7b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018c82:	84 db                	test   bl,bl
c0018c84:	75 33                	jne    c0018cb9 <IDE::waitInterrupt(unsigned char)+0x57>
c0018c86:	52                   	push   edx
c0018c87:	6a 0c                	push   0xc
c0018c89:	50                   	push   eax
c0018c8a:	57                   	push   edi
c0018c8b:	e8 24 ff ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0018c90:	83 c4 10             	add    esp,0x10
c0018c93:	a8 01                	test   al,0x1
c0018c95:	75 2a                	jne    c0018cc1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018c97:	f7 c6 04 00 00 00    	test   esi,0x4
c0018c9d:	75 12                	jne    c0018cb1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018c9f:	83 fe 32             	cmp    esi,0x32
c0018ca2:	7e 0d                	jle    c0018cb1 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	6a 64                	push   0x64
c0018ca9:	e8 1a a9 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	83 fe 3c             	cmp    esi,0x3c
c0018cb4:	74 0b                	je     c0018cc1 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018cb6:	46                   	inc    esi
c0018cb7:	eb bd                	jmp    c0018c76 <IDE::waitInterrupt(unsigned char)+0x14>
c0018cb9:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	88 d8                	mov    al,bl
c0018cc6:	5b                   	pop    ebx
c0018cc7:	5e                   	pop    esi
c0018cc8:	5f                   	pop    edi
c0018cc9:	c3                   	ret    

c0018cca <ideChannel0IRQHandler(regs*, void*)>:
c0018cca:	83 ec 10             	sub    esp,0x10
c0018ccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cd1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018cd8:	6a 07                	push   0x7
c0018cda:	6a 00                	push   0x0
c0018cdc:	50                   	push   eax
c0018cdd:	e8 d2 fe ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0018ce2:	83 c4 1c             	add    esp,0x1c
c0018ce5:	c3                   	ret    

c0018ce6 <ideChannel1IRQHandler(regs*, void*)>:
c0018ce6:	83 ec 10             	sub    esp,0x10
c0018ce9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ced:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018cf4:	6a 07                	push   0x7
c0018cf6:	6a 01                	push   0x1
c0018cf8:	50                   	push   eax
c0018cf9:	e8 b6 fe ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0018cfe:	83 c4 1c             	add    esp,0x1c
c0018d01:	c3                   	ret    

c0018d02 <IDE::enableIRQs(unsigned char, bool)>:
c0018d02:	57                   	push   edi
c0018d03:	56                   	push   esi
c0018d04:	be 04 00 00 00       	mov    esi,0x4
c0018d09:	53                   	push   ebx
c0018d0a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018d0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d13:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018d18:	0f 94 c0             	sete   al
c0018d1b:	01 c0                	add    eax,eax
c0018d1d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018d24:	0f b6 c0             	movzx  eax,al
c0018d27:	50                   	push   eax
c0018d28:	6a 0c                	push   0xc
c0018d2a:	57                   	push   edi
c0018d2b:	53                   	push   ebx
c0018d2c:	e8 c3 fd ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	50                   	push   eax
c0018d35:	6a 0c                	push   0xc
c0018d37:	57                   	push   edi
c0018d38:	53                   	push   ebx
c0018d39:	e8 76 fe ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0018d3e:	83 c4 10             	add    esp,0x10
c0018d41:	4e                   	dec    esi
c0018d42:	75 f0                	jne    c0018d34 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018d44:	5b                   	pop    ebx
c0018d45:	5e                   	pop    esi
c0018d46:	5f                   	pop    edi
c0018d47:	c3                   	ret    

c0018d48 <IDE::open(int, int, void*)>:
c0018d48:	55                   	push   ebp
c0018d49:	57                   	push   edi
c0018d4a:	56                   	push   esi
c0018d4b:	53                   	push   ebx
c0018d4c:	83 ec 1c             	sub    esp,0x1c
c0018d4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d53:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018d5c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018d65:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018d6c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018d73:	0f 85 b0 02 00 00    	jne    c0019029 <IDE::open(int, int, void*)+0x2e1>
c0018d79:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018d7f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018d83:	83 e0 7f             	and    eax,0x7f
c0018d86:	3c 05                	cmp    al,0x5
c0018d88:	74 04                	je     c0018d8e <IDE::open(int, int, void*)+0x46>
c0018d8a:	3c 0f                	cmp    al,0xf
c0018d8c:	75 32                	jne    c0018dc0 <IDE::open(int, int, void*)+0x78>
c0018d8e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018d94:	83 e0 fc             	and    eax,0xfffffffc
c0018d97:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018d9e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018da4:	83 e0 fc             	and    eax,0xfffffffc
c0018da7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018dae:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018db4:	83 e0 fc             	and    eax,0xfffffffc
c0018db7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018dbe:	eb 14                	jmp    c0018dd4 <IDE::open(int, int, void*)+0x8c>
c0018dc0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018dca:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018dd4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018ddb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018de2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018de6:	89 c6                	mov    esi,eax
c0018de8:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ded:	c1 e6 10             	shl    esi,0x10
c0018df0:	89 e8                	mov    eax,ebp
c0018df2:	89 fa                	mov    edx,edi
c0018df4:	c1 e0 0b             	shl    eax,0xb
c0018df7:	09 f0                	or     eax,esi
c0018df9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018e00:	c1 e6 08             	shl    esi,0x8
c0018e03:	09 c6                	or     esi,eax
c0018e05:	89 f0                	mov    eax,esi
c0018e07:	0d 08 00 00 80       	or     eax,0x80000008
c0018e0c:	ef                   	out    dx,eax
c0018e0d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018e12:	89 ca                	mov    edx,ecx
c0018e14:	ed                   	in     eax,dx
c0018e15:	c1 e8 10             	shr    eax,0x10
c0018e18:	3d ff ff 00 00       	cmp    eax,0xffff
c0018e1d:	0f 84 f5 00 00 00    	je     c0018f18 <IDE::open(int, int, void*)+0x1d0>
c0018e23:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018e29:	89 fa                	mov    edx,edi
c0018e2b:	89 f0                	mov    eax,esi
c0018e2d:	ef                   	out    dx,eax
c0018e2e:	b0 fe                	mov    al,0xfe
c0018e30:	89 ca                	mov    edx,ecx
c0018e32:	ee                   	out    dx,al
c0018e33:	89 f0                	mov    eax,esi
c0018e35:	89 fa                	mov    edx,edi
c0018e37:	ef                   	out    dx,eax
c0018e38:	89 ca                	mov    edx,ecx
c0018e3a:	ed                   	in     eax,dx
c0018e3b:	3c fe                	cmp    al,0xfe
c0018e3d:	0f 85 a9 00 00 00    	jne    c0018eec <IDE::open(int, int, void*)+0x1a4>
c0018e43:	8b 15 18 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020418
c0018e49:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018e50:	74 33                	je     c0018e85 <IDE::open(int, int, void*)+0x13d>
c0018e52:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018e58:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018e5c:	40                   	inc    eax
c0018e5d:	83 ec 0c             	sub    esp,0xc
c0018e60:	0f b6 c0             	movzx  eax,al
c0018e63:	50                   	push   eax
c0018e64:	55                   	push   ebp
c0018e65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018e69:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018e6f:	51                   	push   ecx
c0018e70:	e8 5b 57 ff ff       	call   c000e5d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018e75:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018e7a:	83 c4 1c             	add    esp,0x1c
c0018e7d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018e83:	eb 0a                	jmp    c0018e8f <IDE::open(int, int, void*)+0x147>
c0018e85:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018e8f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018e96:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018e9d:	c1 e1 10             	shl    ecx,0x10
c0018ea0:	c1 e0 08             	shl    eax,0x8
c0018ea3:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ea8:	09 c1                	or     ecx,eax
c0018eaa:	89 fa                	mov    edx,edi
c0018eac:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018eb3:	c1 e0 0b             	shl    eax,0xb
c0018eb6:	09 c1                	or     ecx,eax
c0018eb8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018ebe:	89 c8                	mov    eax,ecx
c0018ec0:	ef                   	out    dx,eax
c0018ec1:	be fc 0c 00 00       	mov    esi,0xcfc
c0018ec6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018ecc:	89 f2                	mov    edx,esi
c0018ece:	ee                   	out    dx,al
c0018ecf:	89 c8                	mov    eax,ecx
c0018ed1:	89 fa                	mov    edx,edi
c0018ed3:	ef                   	out    dx,eax
c0018ed4:	89 f2                	mov    edx,esi
c0018ed6:	ed                   	in     eax,dx
c0018ed7:	0f b6 c0             	movzx  eax,al
c0018eda:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018ee0:	74 46                	je     c0018f28 <IDE::open(int, int, void*)+0x1e0>
c0018ee2:	83 ec 0c             	sub    esp,0xc
c0018ee5:	68 74 ec 01 c0       	push   0xc001ec74
c0018eea:	eb 34                	jmp    c0018f20 <IDE::open(int, int, void*)+0x1d8>
c0018eec:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018ef5:	75 17                	jne    c0018f0e <IDE::open(int, int, void*)+0x1c6>
c0018ef7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018efc:	74 07                	je     c0018f05 <IDE::open(int, int, void*)+0x1bd>
c0018efe:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018f03:	75 09                	jne    c0018f0e <IDE::open(int, int, void*)+0x1c6>
c0018f05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018f0c:	eb 1a                	jmp    c0018f28 <IDE::open(int, int, void*)+0x1e0>
c0018f0e:	83 ec 0c             	sub    esp,0xc
c0018f11:	68 7c ec 01 c0       	push   0xc001ec7c
c0018f16:	eb 08                	jmp    c0018f20 <IDE::open(int, int, void*)+0x1d8>
c0018f18:	83 ec 0c             	sub    esp,0xc
c0018f1b:	68 ad ec 01 c0       	push   0xc001ecad
c0018f20:	e8 92 71 ff ff       	call   c00100b7 <KePanic(char const*)>
c0018f25:	83 c4 10             	add    esp,0x10
c0018f28:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018f2f:	79 1a                	jns    c0018f4b <IDE::open(int, int, void*)+0x203>
c0018f31:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018f37:	83 e0 fc             	and    eax,0xfffffffc
c0018f3a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018f41:	83 c0 08             	add    eax,0x8
c0018f44:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018f4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f51:	89 c2                	mov    edx,eax
c0018f53:	83 e2 0f             	and    edx,0xf
c0018f56:	66 83 fa 08          	cmp    dx,0x8
c0018f5a:	75 0a                	jne    c0018f66 <IDE::open(int, int, void*)+0x21e>
c0018f5c:	83 e8 02             	sub    eax,0x2
c0018f5f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f66:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018f6c:	89 c2                	mov    edx,eax
c0018f6e:	83 e2 0f             	and    edx,0xf
c0018f71:	66 83 fa 08          	cmp    dx,0x8
c0018f75:	75 0a                	jne    c0018f81 <IDE::open(int, int, void*)+0x239>
c0018f77:	83 e8 02             	sub    eax,0x2
c0018f7a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018f81:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018f88:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018f8f:	89 d0                	mov    eax,edx
c0018f91:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018f94:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018f98:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018f9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018f9f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fa4:	0f b6 c9             	movzx  ecx,cl
c0018fa7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018fae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018fb1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018fb5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018fb9:	8d 50 02             	lea    edx,[eax+0x2]
c0018fbc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018fc1:	0f b6 d2             	movzx  edx,dl
c0018fc4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018fca:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fcd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fd1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018fd5:	8d 48 03             	lea    ecx,[eax+0x3]
c0018fd8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fdd:	0f b6 c9             	movzx  ecx,cl
c0018fe0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018fe6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018fe9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018fed:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018ff1:	8d 50 04             	lea    edx,[eax+0x4]
c0018ff4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018ffa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018fff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0019006:	66 85 f6             	test   si,si
c0019009:	74 5b                	je     c0019066 <IDE::open(int, int, void*)+0x31e>
c001900b:	0f b6 d2             	movzx  edx,dl
c001900e:	83 c0 05             	add    eax,0x5
c0019011:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019014:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019018:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001901c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019022:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019027:	eb 3d                	jmp    c0019066 <IDE::open(int, int, void*)+0x31e>
c0019029:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001902f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019036:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001903d:	66 05 06 02          	add    ax,0x206
c0019041:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019048:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001904f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019056:	66 05 06 02          	add    ax,0x206
c001905a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019061:	e9 e5 fe ff ff       	jmp    c0018f4b <IDE::open(int, int, void*)+0x203>
c0019066:	50                   	push   eax
c0019067:	50                   	push   eax
c0019068:	6a 00                	push   0x0
c001906a:	53                   	push   ebx
c001906b:	e8 5e fa ff ff       	call   c0018ace <IDE::prepareInterrupt(unsigned char)>
c0019070:	5a                   	pop    edx
c0019071:	59                   	pop    ecx
c0019072:	6a 01                	push   0x1
c0019074:	53                   	push   ebx
c0019075:	e8 54 fa ff ff       	call   c0018ace <IDE::prepareInterrupt(unsigned char)>
c001907a:	83 c4 0c             	add    esp,0xc
c001907d:	6a 00                	push   0x0
c001907f:	6a 00                	push   0x0
c0019081:	53                   	push   ebx
c0019082:	e8 7b fc ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c0019087:	83 c4 0c             	add    esp,0xc
c001908a:	6a 00                	push   0x0
c001908c:	6a 01                	push   0x1
c001908e:	53                   	push   ebx
c001908f:	e8 6e fc ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001909e:	74 34                	je     c00190d4 <IDE::open(int, int, void*)+0x38c>
c00190a0:	83 ec 0c             	sub    esp,0xc
c00190a3:	53                   	push   ebx
c00190a4:	6a 01                	push   0x1
c00190a6:	68 ca 8c 01 c0       	push   0xc0018cca
c00190ab:	6a 0e                	push   0xe
c00190ad:	53                   	push   ebx
c00190ae:	e8 8d 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190b3:	83 c4 14             	add    esp,0x14
c00190b6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00190bc:	53                   	push   ebx
c00190bd:	6a 01                	push   0x1
c00190bf:	68 e6 8c 01 c0       	push   0xc0018ce6
c00190c4:	6a 0f                	push   0xf
c00190c6:	53                   	push   ebx
c00190c7:	e8 74 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190cc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00190d2:	eb 38                	jmp    c001910c <IDE::open(int, int, void*)+0x3c4>
c00190d4:	83 ec 0c             	sub    esp,0xc
c00190d7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00190e1:	53                   	push   ebx
c00190e2:	6a 00                	push   0x0
c00190e4:	68 ca 8c 01 c0       	push   0xc0018cca
c00190e9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00190ef:	53                   	push   ebx
c00190f0:	e8 4b 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190f5:	83 c4 14             	add    esp,0x14
c00190f8:	53                   	push   ebx
c00190f9:	6a 00                	push   0x0
c00190fb:	68 e6 8c 01 c0       	push   0xc0018ce6
c0019100:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0019106:	53                   	push   ebx
c0019107:	e8 34 27 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001910c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001910e:	83 c4 20             	add    esp,0x20
c0019111:	83 ec 0c             	sub    esp,0xc
c0019114:	53                   	push   ebx
c0019115:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0019118:	83 c4 0c             	add    esp,0xc
c001911b:	6a 07                	push   0x7
c001911d:	6a 00                	push   0x0
c001911f:	53                   	push   ebx
c0019120:	e8 8f fa ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019125:	83 c4 0c             	add    esp,0xc
c0019128:	6a 07                	push   0x7
c001912a:	6a 01                	push   0x1
c001912c:	53                   	push   ebx
c001912d:	e8 82 fa ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019132:	83 c4 0c             	add    esp,0xc
c0019135:	6a 01                	push   0x1
c0019137:	6a 00                	push   0x0
c0019139:	53                   	push   ebx
c001913a:	e8 c3 fb ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c001913f:	83 c4 0c             	add    esp,0xc
c0019142:	6a 01                	push   0x1
c0019144:	6a 01                	push   0x1
c0019146:	53                   	push   ebx
c0019147:	e8 b6 fb ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c001914c:	83 c4 2c             	add    esp,0x2c
c001914f:	31 c0                	xor    eax,eax
c0019151:	5b                   	pop    ebx
c0019152:	5e                   	pop    esi
c0019153:	5f                   	pop    edi
c0019154:	5d                   	pop    ebp
c0019155:	c3                   	ret    

c0019156 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019156:	55                   	push   ebp
c0019157:	57                   	push   edi
c0019158:	56                   	push   esi
c0019159:	53                   	push   ebx
c001915a:	83 ec 1c             	sub    esp,0x1c
c001915d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019161:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019165:	8d 50 f8             	lea    edx,[eax-0x8]
c0019168:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001916c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019170:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019174:	80 fa 03             	cmp    dl,0x3
c0019177:	77 5d                	ja     c00191d6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019179:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001917d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019181:	0f b6 db             	movzx  ebx,bl
c0019184:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019187:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001918b:	83 ca 80             	or     edx,0xffffff80
c001918e:	0f b6 d2             	movzx  edx,dl
c0019191:	52                   	push   edx
c0019192:	6a 0c                	push   0xc
c0019194:	53                   	push   ebx
c0019195:	56                   	push   esi
c0019196:	e8 59 f9 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001919b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00191a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191a4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00191a8:	0f b6 c0             	movzx  eax,al
c00191ab:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00191af:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00191b1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00191b6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00191ba:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00191be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00191c2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00191ca:	83 c4 2c             	add    esp,0x2c
c00191cd:	5b                   	pop    ebx
c00191ce:	5e                   	pop    esi
c00191cf:	5f                   	pop    edi
c00191d0:	5d                   	pop    ebp
c00191d1:	e9 1e f9 ff ff       	jmp    c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191d6:	3c 07                	cmp    al,0x7
c00191d8:	77 10                	ja     c00191ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00191da:	0f b6 db             	movzx  ebx,bl
c00191dd:	0f b6 d0             	movzx  edx,al
c00191e0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00191e8:	eb 2d                	jmp    c0019217 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00191ea:	3c 0d                	cmp    al,0xd
c00191ec:	77 13                	ja     c0019201 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00191ee:	0f b6 db             	movzx  ebx,bl
c00191f1:	0f b6 c0             	movzx  eax,al
c00191f4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00191fb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00191ff:	eb 16                	jmp    c0019217 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0019201:	3c 15                	cmp    al,0x15
c0019203:	77 14                	ja     c0019219 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0019205:	0f b6 db             	movzx  ebx,bl
c0019208:	0f b6 c0             	movzx  eax,al
c001920b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019213:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0019217:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019219:	83 c4 1c             	add    esp,0x1c
c001921c:	5b                   	pop    ebx
c001921d:	5e                   	pop    esi
c001921e:	5f                   	pop    edi
c001921f:	5d                   	pop    ebp
c0019220:	c3                   	ret    
c0019221:	90                   	nop

c0019222 <IDE::detect()>:
c0019222:	55                   	push   ebp
c0019223:	57                   	push   edi
c0019224:	56                   	push   esi
c0019225:	53                   	push   ebx
c0019226:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001922c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019233:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001923a:	0f 85 97 02 00 00    	jne    c00194d7 <IDE::detect()+0x2b5>
c0019240:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019247:	31 f6                	xor    esi,esi
c0019249:	31 ed                	xor    ebp,ebp
c001924b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019253:	89 e8                	mov    eax,ebp
c0019255:	c1 e0 06             	shl    eax,0x6
c0019258:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019260:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019264:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019268:	c1 e0 04             	shl    eax,0x4
c001926b:	83 c8 a0             	or     eax,0xffffffa0
c001926e:	0f b6 c0             	movzx  eax,al
c0019271:	50                   	push   eax
c0019272:	6a 06                	push   0x6
c0019274:	56                   	push   esi
c0019275:	53                   	push   ebx
c0019276:	e8 79 f8 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001927b:	83 c4 0c             	add    esp,0xc
c001927e:	6a 0c                	push   0xc
c0019280:	56                   	push   esi
c0019281:	53                   	push   ebx
c0019282:	e8 2d f9 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019287:	83 c4 0c             	add    esp,0xc
c001928a:	6a 0c                	push   0xc
c001928c:	56                   	push   esi
c001928d:	53                   	push   ebx
c001928e:	e8 21 f9 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019293:	83 c4 0c             	add    esp,0xc
c0019296:	6a 0c                	push   0xc
c0019298:	56                   	push   esi
c0019299:	53                   	push   ebx
c001929a:	e8 15 f9 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001929f:	83 c4 0c             	add    esp,0xc
c00192a2:	6a 0c                	push   0xc
c00192a4:	56                   	push   esi
c00192a5:	53                   	push   ebx
c00192a6:	e8 09 f9 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192ab:	68 ec 00 00 00       	push   0xec
c00192b0:	6a 07                	push   0x7
c00192b2:	56                   	push   esi
c00192b3:	53                   	push   ebx
c00192b4:	e8 3b f8 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192b9:	83 c4 1c             	add    esp,0x1c
c00192bc:	6a 0c                	push   0xc
c00192be:	56                   	push   esi
c00192bf:	53                   	push   ebx
c00192c0:	e8 ef f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192c5:	83 c4 0c             	add    esp,0xc
c00192c8:	6a 0c                	push   0xc
c00192ca:	56                   	push   esi
c00192cb:	53                   	push   ebx
c00192cc:	e8 e3 f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192d1:	83 c4 0c             	add    esp,0xc
c00192d4:	6a 0c                	push   0xc
c00192d6:	56                   	push   esi
c00192d7:	53                   	push   ebx
c00192d8:	e8 d7 f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192dd:	83 c4 0c             	add    esp,0xc
c00192e0:	6a 0c                	push   0xc
c00192e2:	56                   	push   esi
c00192e3:	53                   	push   ebx
c00192e4:	e8 cb f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192e9:	83 c4 0c             	add    esp,0xc
c00192ec:	6a 0c                	push   0xc
c00192ee:	56                   	push   esi
c00192ef:	53                   	push   ebx
c00192f0:	e8 bf f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00192f5:	83 c4 10             	add    esp,0x10
c00192f8:	84 c0                	test   al,al
c00192fa:	0f 84 5f 01 00 00    	je     c001945f <IDE::detect()+0x23d>
c0019300:	31 ff                	xor    edi,edi
c0019302:	50                   	push   eax
c0019303:	6a 0c                	push   0xc
c0019305:	56                   	push   esi
c0019306:	53                   	push   ebx
c0019307:	e8 a8 f8 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	a8 01                	test   al,0x1
c0019311:	0f 85 69 01 00 00    	jne    c0019480 <IDE::detect()+0x25e>
c0019317:	84 c0                	test   al,al
c0019319:	78 04                	js     c001931f <IDE::detect()+0xfd>
c001931b:	a8 08                	test   al,0x8
c001931d:	75 23                	jne    c0019342 <IDE::detect()+0x120>
c001931f:	47                   	inc    edi
c0019320:	81 ff 17 01 00 00    	cmp    edi,0x117
c0019326:	7e da                	jle    c0019302 <IDE::detect()+0xe0>
c0019328:	83 ec 0c             	sub    esp,0xc
c001932b:	6a 32                	push   0x32
c001932d:	e8 96 a2 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c0019332:	83 c4 10             	add    esp,0x10
c0019335:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001933b:	75 c5                	jne    c0019302 <IDE::detect()+0xe0>
c001933d:	e9 3e 01 00 00       	jmp    c0019480 <IDE::detect()+0x25e>
c0019342:	31 c9                	xor    ecx,ecx
c0019344:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019348:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001934c:	83 ec 0c             	sub    esp,0xc
c001934f:	68 80 00 00 00       	push   0x80
c0019354:	57                   	push   edi
c0019355:	6a 00                	push   0x0
c0019357:	56                   	push   esi
c0019358:	53                   	push   ebx
c0019359:	e8 f8 fd ff ff       	call   c0019156 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001935e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019363:	89 e8                	mov    eax,ebp
c0019365:	89 d1                	mov    ecx,edx
c0019367:	c1 e0 06             	shl    eax,0x6
c001936a:	01 d8                	add    eax,ebx
c001936c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019373:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001937a:	89 f2                	mov    edx,esi
c001937c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019382:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019386:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001938c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019390:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019397:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001939f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00193a6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00193ae:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00193b4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00193bb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00193c1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00193c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00193c9:	83 c4 20             	add    esp,0x20
c00193cc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00193cf:	83 c0 02             	add    eax,0x2
c00193d2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00193d8:	83 c7 02             	add    edi,0x2
c00193db:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00193de:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00193e4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00193e8:	75 e2                	jne    c00193cc <IDE::detect()+0x1aa>
c00193ea:	89 e8                	mov    eax,ebp
c00193ec:	c1 e0 06             	shl    eax,0x6
c00193ef:	01 d8                	add    eax,ebx
c00193f1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00193f7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00193fe:	66 c1 ea 09          	shr    dx,0x9
c0019402:	83 e2 01             	and    edx,0x1
c0019405:	84 c9                	test   cl,cl
c0019407:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001940d:	75 22                	jne    c0019431 <IDE::detect()+0x20f>
c001940f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c0019416:	74 46                	je     c001945e <IDE::detect()+0x23c>
c0019418:	83 ec 0c             	sub    esp,0xc
c001941b:	68 7c 01 00 00       	push   0x17c
c0019420:	e8 94 e3 fe ff       	call   c00077b9 <malloc>
c0019425:	89 c7                	mov    edi,eax
c0019427:	89 04 24             	mov    DWORD PTR [esp],eax
c001942a:	e8 11 05 00 00       	call   c0019940 <ATA::ATA()>
c001942f:	eb 17                	jmp    c0019448 <IDE::detect()+0x226>
c0019431:	83 ec 0c             	sub    esp,0xc
c0019434:	68 84 01 00 00       	push   0x184
c0019439:	e8 7b e3 fe ff       	call   c00077b9 <malloc>
c001943e:	89 c7                	mov    edi,eax
c0019440:	89 04 24             	mov    DWORD PTR [esp],eax
c0019443:	e8 f0 0a 00 00       	call   c0019f38 <ATAPI::ATAPI()>
c0019448:	5a                   	pop    edx
c0019449:	59                   	pop    ecx
c001944a:	57                   	push   edi
c001944b:	53                   	push   ebx
c001944c:	e8 43 24 ff ff       	call   c000b894 <Device::addChild(Device*)>
c0019451:	8b 07                	mov    eax,DWORD PTR [edi]
c0019453:	53                   	push   ebx
c0019454:	55                   	push   ebp
c0019455:	6a 00                	push   0x0
c0019457:	57                   	push   edi
c0019458:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001945b:	83 c4 20             	add    esp,0x20
c001945e:	45                   	inc    ebp
c001945f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019464:	74 0d                	je     c0019473 <IDE::detect()+0x251>
c0019466:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001946e:	e9 e0 fd ff ff       	jmp    c0019253 <IDE::detect()+0x31>
c0019473:	4e                   	dec    esi
c0019474:	74 61                	je     c00194d7 <IDE::detect()+0x2b5>
c0019476:	be 01 00 00 00       	mov    esi,0x1
c001947b:	e9 cb fd ff ff       	jmp    c001924b <IDE::detect()+0x29>
c0019480:	50                   	push   eax
c0019481:	6a 04                	push   0x4
c0019483:	56                   	push   esi
c0019484:	53                   	push   ebx
c0019485:	e8 2a f7 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001948a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001948e:	83 c4 0c             	add    esp,0xc
c0019491:	6a 05                	push   0x5
c0019493:	56                   	push   esi
c0019494:	53                   	push   ebx
c0019495:	e8 1a f7 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001949a:	83 c4 10             	add    esp,0x10
c001949d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194a1:	80 fa 14             	cmp    dl,0x14
c00194a4:	75 04                	jne    c00194aa <IDE::detect()+0x288>
c00194a6:	3c eb                	cmp    al,0xeb
c00194a8:	eb 07                	jmp    c00194b1 <IDE::detect()+0x28f>
c00194aa:	3c 96                	cmp    al,0x96
c00194ac:	75 b1                	jne    c001945f <IDE::detect()+0x23d>
c00194ae:	80 fa 69             	cmp    dl,0x69
c00194b1:	75 ac                	jne    c001945f <IDE::detect()+0x23d>
c00194b3:	68 a1 00 00 00       	push   0xa1
c00194b8:	6a 07                	push   0x7
c00194ba:	56                   	push   esi
c00194bb:	53                   	push   ebx
c00194bc:	e8 33 f6 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00194c1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00194c8:	e8 fb a0 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c00194cd:	83 c4 10             	add    esp,0x10
c00194d0:	b1 01                	mov    cl,0x1
c00194d2:	e9 6d fe ff ff       	jmp    c0019344 <IDE::detect()+0x122>
c00194d7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00194dd:	5b                   	pop    ebx
c00194de:	5e                   	pop    esi
c00194df:	5f                   	pop    edi
c00194e0:	5d                   	pop    ebp
c00194e1:	c3                   	ret    

c00194e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00194e2:	55                   	push   ebp
c00194e3:	57                   	push   edi
c00194e4:	56                   	push   esi
c00194e5:	53                   	push   ebx
c00194e6:	83 ec 1c             	sub    esp,0x1c
c00194e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00194f1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00194f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00194f9:	88 c3                	mov    bl,al
c00194fb:	84 c0                	test   al,al
c00194fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019501:	0f 84 81 00 00 00    	je     c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	68 d7 ec 01 c0       	push   0xc001ecd7
c001950f:	e8 40 0f ff ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001951b:	3c 01                	cmp    al,0x1
c001951d:	74 63                	je     c0019582 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001951f:	3c 02                	cmp    al,0x2
c0019521:	75 53                	jne    c0019576 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019523:	01 f6                	add    esi,esi
c0019525:	09 ee                	or     esi,ebp
c0019527:	50                   	push   eax
c0019528:	89 f0                	mov    eax,esi
c001952a:	6a 01                	push   0x1
c001952c:	0f b6 f0             	movzx  esi,al
c001952f:	c1 e6 06             	shl    esi,0x6
c0019532:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001953a:	50                   	push   eax
c001953b:	57                   	push   edi
c001953c:	e8 73 f6 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019541:	83 c4 10             	add    esp,0x10
c0019544:	a8 01                	test   al,0x1
c0019546:	74 02                	je     c001954a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019548:	b3 07                	mov    bl,0x7
c001954a:	a8 02                	test   al,0x2
c001954c:	74 02                	je     c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001954e:	b3 03                	mov    bl,0x3
c0019550:	a8 04                	test   al,0x4
c0019552:	74 02                	je     c0019556 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019554:	b3 14                	mov    bl,0x14
c0019556:	a8 08                	test   al,0x8
c0019558:	74 02                	je     c001955c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001955a:	b3 03                	mov    bl,0x3
c001955c:	a8 10                	test   al,0x10
c001955e:	74 02                	je     c0019562 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019560:	b3 15                	mov    bl,0x15
c0019562:	a8 20                	test   al,0x20
c0019564:	74 02                	je     c0019568 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019566:	b3 03                	mov    bl,0x3
c0019568:	a8 40                	test   al,0x40
c001956a:	74 02                	je     c001956e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001956c:	b3 16                	mov    bl,0x16
c001956e:	84 c0                	test   al,al
c0019570:	79 16                	jns    c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019572:	b3 0d                	mov    bl,0xd
c0019574:	eb 12                	jmp    c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019576:	3c 03                	cmp    al,0x3
c0019578:	74 0c                	je     c0019586 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001957a:	3c 04                	cmp    al,0x4
c001957c:	75 0a                	jne    c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001957e:	b3 08                	mov    bl,0x8
c0019580:	eb 06                	jmp    c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019582:	b3 13                	mov    bl,0x13
c0019584:	eb 02                	jmp    c0019588 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019586:	b3 17                	mov    bl,0x17
c0019588:	83 c4 1c             	add    esp,0x1c
c001958b:	88 d8                	mov    al,bl
c001958d:	5b                   	pop    ebx
c001958e:	5e                   	pop    esi
c001958f:	5f                   	pop    edi
c0019590:	5d                   	pop    ebp
c0019591:	c3                   	ret    

c0019592 <IDE::polling(unsigned char, unsigned int)>:
c0019592:	55                   	push   ebp
c0019593:	bd 04 00 00 00       	mov    ebp,0x4
c0019598:	57                   	push   edi
c0019599:	56                   	push   esi
c001959a:	53                   	push   ebx
c001959b:	83 ec 0c             	sub    esp,0xc
c001959e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00195a2:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c00195a6:	0f b6 f3             	movzx  esi,bl
c00195a9:	52                   	push   edx
c00195aa:	6a 0c                	push   0xc
c00195ac:	56                   	push   esi
c00195ad:	57                   	push   edi
c00195ae:	e8 01 f6 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00195b3:	83 c4 10             	add    esp,0x10
c00195b6:	4d                   	dec    ebp
c00195b7:	75 ed                	jne    c00195a6 <IDE::polling(unsigned char, unsigned int)+0x14>
c00195b9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00195be:	50                   	push   eax
c00195bf:	6a 0c                	push   0xc
c00195c1:	56                   	push   esi
c00195c2:	57                   	push   edi
c00195c3:	e8 ec f5 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00195c8:	83 c4 10             	add    esp,0x10
c00195cb:	a8 01                	test   al,0x1
c00195cd:	75 17                	jne    c00195e6 <IDE::polling(unsigned char, unsigned int)+0x54>
c00195cf:	a8 20                	test   al,0x20
c00195d1:	75 0f                	jne    c00195e2 <IDE::polling(unsigned char, unsigned int)+0x50>
c00195d3:	4b                   	dec    ebx
c00195d4:	74 10                	je     c00195e6 <IDE::polling(unsigned char, unsigned int)+0x54>
c00195d6:	84 c0                	test   al,al
c00195d8:	78 e4                	js     c00195be <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195da:	a8 08                	test   al,0x8
c00195dc:	74 e0                	je     c00195be <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195de:	31 c0                	xor    eax,eax
c00195e0:	eb 06                	jmp    c00195e8 <IDE::polling(unsigned char, unsigned int)+0x56>
c00195e2:	b0 01                	mov    al,0x1
c00195e4:	eb 02                	jmp    c00195e8 <IDE::polling(unsigned char, unsigned int)+0x56>
c00195e6:	b0 02                	mov    al,0x2
c00195e8:	83 c4 0c             	add    esp,0xc
c00195eb:	5b                   	pop    ebx
c00195ec:	5e                   	pop    esi
c00195ed:	5f                   	pop    edi
c00195ee:	5d                   	pop    ebp
c00195ef:	c3                   	ret    

c00195f0 <SATABus::close(int, int, void*)>:
c00195f0:	31 c0                	xor    eax,eax
c00195f2:	c3                   	ret    
c00195f3:	90                   	nop

c00195f4 <SATABus::detect()>:
c00195f4:	c3                   	ret    
c00195f5:	90                   	nop

c00195f6 <SATABus::SATABus()>:
c00195f6:	83 ec 0c             	sub    esp,0xc
c00195f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fd:	83 ec 08             	sub    esp,0x8
c0019600:	68 10 ed 01 c0       	push   0xc001ed10
c0019605:	50                   	push   eax
c0019606:	e8 cd 25 ff ff       	call   c000bbd8 <HardDiskController::HardDiskController(char const*)>
c001960b:	83 c4 10             	add    esp,0x10
c001960e:	ba 3c ed 01 c0       	mov    edx,0xc001ed3c
c0019613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019617:	89 10                	mov    DWORD PTR [eax],edx
c0019619:	83 ec 0c             	sub    esp,0xc
c001961c:	6a 50                	push   0x50
c001961e:	e8 30 e5 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019623:	83 c4 10             	add    esp,0x10
c0019626:	89 c2                	mov    edx,eax
c0019628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001962c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019632:	83 ec 0c             	sub    esp,0xc
c0019635:	6a 50                	push   0x50
c0019637:	e8 c5 fb fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001963c:	83 c4 10             	add    esp,0x10
c001963f:	89 c2                	mov    edx,eax
c0019641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019645:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001964b:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c0019650:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019654:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001965a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001965e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019664:	83 ec 0c             	sub    esp,0xc
c0019667:	6a 03                	push   0x3
c0019669:	6a 50                	push   0x50
c001966b:	51                   	push   ecx
c001966c:	52                   	push   edx
c001966d:	50                   	push   eax
c001966e:	e8 1d 05 ff ff       	call   c0009b90 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019673:	83 c4 20             	add    esp,0x20
c0019676:	90                   	nop
c0019677:	83 c4 0c             	add    esp,0xc
c001967a:	c3                   	ret    
c001967b:	90                   	nop

c001967c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001967c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019680:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019683:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019686:	09 c2                	or     edx,eax
c0019688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001968c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019692:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019694:	31 c0                	xor    eax,eax
c0019696:	c1 e9 08             	shr    ecx,0x8
c0019699:	83 e1 0f             	and    ecx,0xf
c001969c:	39 c8                	cmp    eax,ecx
c001969e:	74 0a                	je     c00196aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c00196a0:	f6 c2 01             	test   dl,0x1
c00196a3:	74 08                	je     c00196ad <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00196a5:	d1 ea                	shr    edx,1
c00196a7:	40                   	inc    eax
c00196a8:	eb f2                	jmp    c001969c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c00196aa:	83 c8 ff             	or     eax,0xffffffff
c00196ad:	c3                   	ret    

c00196ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00196ae:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00196b2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00196b5:	89 c2                	mov    edx,eax
c00196b7:	c1 ea 08             	shr    edx,0x8
c00196ba:	83 e2 0f             	and    edx,0xf
c00196bd:	fe ca                	dec    dl
c00196bf:	75 31                	jne    c00196f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00196c1:	83 e0 0f             	and    eax,0xf
c00196c4:	3c 03                	cmp    al,0x3
c00196c6:	75 2a                	jne    c00196f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00196c8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00196cb:	b8 02 00 00 00       	mov    eax,0x2
c00196d0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00196d6:	74 1c                	je     c00196f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196d8:	b8 04 00 00 00       	mov    eax,0x4
c00196dd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00196e3:	74 0f                	je     c00196f4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196e5:	31 c0                	xor    eax,eax
c00196e7:	83 fa 03             	cmp    edx,0x3
c00196ea:	0f 94 c0             	sete   al
c00196ed:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00196f1:	c3                   	ret    
c00196f2:	31 c0                	xor    eax,eax
c00196f4:	c3                   	ret    
c00196f5:	90                   	nop

c00196f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00196f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196fd:	0f ba e2 0f          	bt     edx,0xf
c0019701:	72 f7                	jb     c00196fa <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019703:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019706:	83 ca 10             	or     edx,0x10
c0019709:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001970c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001970f:	83 ca 01             	or     edx,0x1
c0019712:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019715:	c3                   	ret    

c0019716 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019716:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001971a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001971d:	83 e2 fe             	and    edx,0xfffffffe
c0019720:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019723:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019726:	83 e2 ef             	and    edx,0xffffffef
c0019729:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001972c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001972f:	0f ba e2 0e          	bt     edx,0xe
c0019733:	72 f7                	jb     c001972c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019735:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019738:	0f ba e2 0f          	bt     edx,0xf
c001973c:	72 ee                	jb     c001972c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001973e:	c3                   	ret    
c001973f:	90                   	nop

c0019740 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019740:	55                   	push   ebp
c0019741:	57                   	push   edi
c0019742:	56                   	push   esi
c0019743:	53                   	push   ebx
c0019744:	83 ec 1c             	sub    esp,0x1c
c0019747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001974b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001974f:	53                   	push   ebx
c0019750:	56                   	push   esi
c0019751:	e8 c0 ff ff ff       	call   c0019716 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019756:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001975a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	c1 e5 0a             	shl    ebp,0xa
c0019766:	01 e8                	add    eax,ebp
c0019768:	89 03                	mov    DWORD PTR [ebx],eax
c001976a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001976c:	68 00 04 00 00       	push   0x400
c0019771:	6a 00                	push   0x0
c0019773:	50                   	push   eax
c0019774:	e8 57 6d fe ff       	call   c00004d0 <memset>
c0019779:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001977f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019783:	01 e8                	add    eax,ebp
c0019785:	83 c4 1c             	add    esp,0x1c
c0019788:	89 03                	mov    DWORD PTR [ebx],eax
c001978a:	c1 e2 08             	shl    edx,0x8
c001978d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019794:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001979a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00197a0:	01 f8                	add    eax,edi
c00197a2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00197a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00197a8:	68 00 01 00 00       	push   0x100
c00197ad:	6a 00                	push   0x0
c00197af:	50                   	push   eax
c00197b0:	e8 1b 6d fe ff       	call   c00004d0 <memset>
c00197b5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c00197bb:	01 fa                	add    edx,edi
c00197bd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00197c1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00197c4:	c1 e7 0d             	shl    edi,0xd
c00197c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00197ce:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00197d4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00197da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197de:	31 ff                	xor    edi,edi
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00197e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197ed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00197f3:	83 c5 20             	add    ebp,0x20
c00197f6:	01 f8                	add    eax,edi
c00197f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00197fb:	52                   	push   edx
c00197fc:	68 00 01 00 00       	push   0x100
c0019801:	6a 00                	push   0x0
c0019803:	50                   	push   eax
c0019804:	e8 c7 6c fe ff       	call   c00004d0 <memset>
c0019809:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019816:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001981d:	01 f8                	add    eax,edi
c001981f:	81 c7 00 01 00 00    	add    edi,0x100
c0019825:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019828:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001982e:	75 b3                	jne    c00197e3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019830:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019837:	50                   	push   eax
c0019838:	50                   	push   eax
c0019839:	53                   	push   ebx
c001983a:	56                   	push   esi
c001983b:	e8 b6 fe ff ff       	call   c00196f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019840:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019847:	83 c4 2c             	add    esp,0x2c
c001984a:	5b                   	pop    ebx
c001984b:	5e                   	pop    esi
c001984c:	5f                   	pop    edi
c001984d:	5d                   	pop    ebp
c001984e:	c3                   	ret    
c001984f:	90                   	nop

c0019850 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019850:	55                   	push   ebp
c0019851:	57                   	push   edi
c0019852:	56                   	push   esi
c0019853:	53                   	push   ebx
c0019854:	31 db                	xor    ebx,ebx
c0019856:	83 ec 0c             	sub    esp,0xc
c0019859:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001985d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019861:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019864:	f7 c7 01 00 00 00    	test   edi,0x1
c001986a:	74 7a                	je     c00198e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001986c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019870:	89 d8                	mov    eax,ebx
c0019872:	c1 e0 07             	shl    eax,0x7
c0019875:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001987c:	55                   	push   ebp
c001987d:	56                   	push   esi
c001987e:	e8 2b fe ff ff       	call   c00196ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019883:	5a                   	pop    edx
c0019884:	83 f8 01             	cmp    eax,0x1
c0019887:	59                   	pop    ecx
c0019888:	75 21                	jne    c00198ab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001988a:	50                   	push   eax
c001988b:	53                   	push   ebx
c001988c:	55                   	push   ebp
c001988d:	56                   	push   esi
c001988e:	e8 ad fe ff ff       	call   c0019740 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019893:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001989a:	e8 1a df fe ff       	call   c00077b9 <malloc>
c001989f:	89 c5                	mov    ebp,eax
c00198a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00198a4:	e8 43 0d 00 00       	call   c001a5ec <SATA::SATA()>
c00198a9:	eb 24                	jmp    c00198cf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c00198ab:	83 f8 04             	cmp    eax,0x4
c00198ae:	75 36                	jne    c00198e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c00198b0:	51                   	push   ecx
c00198b1:	53                   	push   ebx
c00198b2:	55                   	push   ebp
c00198b3:	56                   	push   esi
c00198b4:	e8 87 fe ff ff       	call   c0019740 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00198b9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00198c0:	e8 f4 de fe ff       	call   c00077b9 <malloc>
c00198c5:	89 c5                	mov    ebp,eax
c00198c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00198ca:	e8 79 10 00 00       	call   c001a948 <SATAPI::SATAPI()>
c00198cf:	58                   	pop    eax
c00198d0:	5a                   	pop    edx
c00198d1:	55                   	push   ebp
c00198d2:	56                   	push   esi
c00198d3:	e8 bc 1f ff ff       	call   c000b894 <Device::addChild(Device*)>
c00198d8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00198db:	56                   	push   esi
c00198dc:	6a 00                	push   0x0
c00198de:	53                   	push   ebx
c00198df:	55                   	push   ebp
c00198e0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00198e3:	83 c4 20             	add    esp,0x20
c00198e6:	d1 ef                	shr    edi,1
c00198e8:	43                   	inc    ebx
c00198e9:	83 fb 20             	cmp    ebx,0x20
c00198ec:	0f 85 72 ff ff ff    	jne    c0019864 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00198f2:	83 c4 0c             	add    esp,0xc
c00198f5:	5b                   	pop    ebx
c00198f6:	5e                   	pop    esi
c00198f7:	5f                   	pop    edi
c00198f8:	5d                   	pop    ebp
c00198f9:	c3                   	ret    

c00198fa <SATABus::open(int, int, void*)>:
c00198fa:	83 ec 14             	sub    esp,0x14
c00198fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019901:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019907:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001990d:	52                   	push   edx
c001990e:	50                   	push   eax
c001990f:	e8 3c ff ff ff       	call   c0019850 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019914:	31 c0                	xor    eax,eax
c0019916:	83 c4 1c             	add    esp,0x1c
c0019919:	c3                   	ret    

c001991a <ATA::close(int, int, void*)>:
c001991a:	83 ec 0c             	sub    esp,0xc
c001991d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019921:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019927:	85 c0                	test   eax,eax
c0019929:	74 0c                	je     c0019937 <ATA::close(int, int, void*)+0x1d>
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019930:	50                   	push   eax
c0019931:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019934:	83 c4 10             	add    esp,0x10
c0019937:	31 c0                	xor    eax,eax
c0019939:	83 c4 0c             	add    esp,0xc
c001993c:	c3                   	ret    
c001993d:	90                   	nop

c001993e <ATA::powerSaving(PowerSavingLevel)>:
c001993e:	c3                   	ret    
c001993f:	90                   	nop

c0019940 <ATA::ATA()>:
c0019940:	83 ec 0c             	sub    esp,0xc
c0019943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019947:	83 ec 04             	sub    esp,0x4
c001994a:	68 00 02 00 00       	push   0x200
c001994f:	68 09 ee 01 c0       	push   0xc001ee09
c0019954:	50                   	push   eax
c0019955:	e8 08 23 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001995a:	83 c4 10             	add    esp,0x10
c001995d:	ba 7c ed 01 c0       	mov    edx,0xc001ed7c
c0019962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019966:	89 10                	mov    DWORD PTR [eax],edx
c0019968:	90                   	nop
c0019969:	83 c4 0c             	add    esp,0xc
c001996c:	c3                   	ret    
c001996d:	90                   	nop

c001996e <ATA::flush(bool)>:
c001996e:	53                   	push   ebx
c001996f:	83 ec 08             	sub    esp,0x8
c0019972:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019977:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001997b:	19 c0                	sbb    eax,eax
c001997d:	83 e0 fd             	and    eax,0xfffffffd
c0019980:	05 ea 00 00 00       	add    eax,0xea
c0019985:	50                   	push   eax
c0019986:	6a 07                	push   0x7
c0019988:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001998f:	50                   	push   eax
c0019990:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019996:	e8 59 f1 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001999b:	83 c4 0c             	add    esp,0xc
c001999e:	6a 00                	push   0x0
c00199a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00199a7:	50                   	push   eax
c00199a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199ae:	e8 df fb ff ff       	call   c0019592 <IDE::polling(unsigned char, unsigned int)>
c00199b3:	83 c4 18             	add    esp,0x18
c00199b6:	5b                   	pop    ebx
c00199b7:	c3                   	ret    

c00199b8 <ATA::readyForCommand()>:
c00199b8:	56                   	push   esi
c00199b9:	53                   	push   ebx
c00199ba:	53                   	push   ebx
c00199bb:	31 db                	xor    ebx,ebx
c00199bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00199c1:	51                   	push   ecx
c00199c2:	6a 0c                	push   0xc
c00199c4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00199cb:	50                   	push   eax
c00199cc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00199d2:	e8 dd f1 ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	a8 88                	test   al,0x88
c00199dc:	74 1f                	je     c00199fd <ATA::readyForCommand()+0x45>
c00199de:	43                   	inc    ebx
c00199df:	83 fb 63             	cmp    ebx,0x63
c00199e2:	7e dd                	jle    c00199c1 <ATA::readyForCommand()+0x9>
c00199e4:	83 ec 0c             	sub    esp,0xc
c00199e7:	6a 0a                	push   0xa
c00199e9:	e8 da 9b ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c00199ee:	83 c4 10             	add    esp,0x10
c00199f1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00199f7:	75 c8                	jne    c00199c1 <ATA::readyForCommand()+0x9>
c00199f9:	31 c0                	xor    eax,eax
c00199fb:	eb 02                	jmp    c00199ff <ATA::readyForCommand()+0x47>
c00199fd:	b0 01                	mov    al,0x1
c00199ff:	5a                   	pop    edx
c0019a00:	5b                   	pop    ebx
c0019a01:	5e                   	pop    esi
c0019a02:	c3                   	ret    
c0019a03:	90                   	nop

c0019a04 <ATA::access(unsigned long long, int, void*, bool)>:
c0019a04:	55                   	push   ebp
c0019a05:	57                   	push   edi
c0019a06:	56                   	push   esi
c0019a07:	53                   	push   ebx
c0019a08:	83 ec 2c             	sub    esp,0x2c
c0019a0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019a0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019a13:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019a17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a1b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019a1f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019a23:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019a27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a31:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019a37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a3b:	c1 e0 06             	shl    eax,0x6
c0019a3e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019a46:	74 5d                	je     c0019aa5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019a48:	89 fa                	mov    edx,edi
c0019a4a:	89 f0                	mov    eax,esi
c0019a4c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019a50:	c1 ea 1c             	shr    edx,0x1c
c0019a53:	89 d1                	mov    ecx,edx
c0019a55:	09 c1                	or     ecx,eax
c0019a57:	74 25                	je     c0019a7e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019a59:	31 ed                	xor    ebp,ebp
c0019a5b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019a62:	89 fa                	mov    edx,edi
c0019a64:	89 f0                	mov    eax,esi
c0019a66:	0f ad d0             	shrd   eax,edx,cl
c0019a69:	d3 ea                	shr    edx,cl
c0019a6b:	f6 c1 20             	test   cl,0x20
c0019a6e:	74 02                	je     c0019a72 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019a70:	89 d0                	mov    eax,edx
c0019a72:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019a76:	45                   	inc    ebp
c0019a77:	83 fd 06             	cmp    ebp,0x6
c0019a7a:	75 df                	jne    c0019a5b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019a7c:	eb 76                	jmp    c0019af4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019a7e:	89 f0                	mov    eax,esi
c0019a80:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019a85:	89 fa                	mov    edx,edi
c0019a87:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019a8e:	0f ac d0 10          	shrd   eax,edx,0x10
c0019a92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019a97:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019a9b:	c1 ee 18             	shr    esi,0x18
c0019a9e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019aa3:	eb 56                	jmp    c0019afb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019aa5:	6a 00                	push   0x0
c0019aa7:	6a 3f                	push   0x3f
c0019aa9:	57                   	push   edi
c0019aaa:	56                   	push   esi
c0019aab:	e8 10 22 00 00       	call   c001bcc0 <__umoddi3>
c0019ab0:	83 c4 10             	add    esp,0x10
c0019ab3:	40                   	inc    eax
c0019ab4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019ab8:	6a 00                	push   0x0
c0019aba:	68 f0 03 00 00       	push   0x3f0
c0019abf:	57                   	push   edi
c0019ac0:	56                   	push   esi
c0019ac1:	e8 fa 20 00 00       	call   c001bbc0 <__udivdi3>
c0019ac6:	83 c4 10             	add    esp,0x10
c0019ac9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019ace:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019ad5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019ada:	6a 00                	push   0x0
c0019adc:	6a 3f                	push   0x3f
c0019ade:	57                   	push   edi
c0019adf:	56                   	push   esi
c0019ae0:	e8 db 20 00 00       	call   c001bbc0 <__udivdi3>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	89 c6                	mov    esi,eax
c0019aea:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019aef:	83 e6 0f             	and    esi,0xf
c0019af2:	eb 07                	jmp    c0019afb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019af4:	31 f6                	xor    esi,esi
c0019af6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019afb:	bf 01 00 00 00       	mov    edi,0x1
c0019b00:	50                   	push   eax
c0019b01:	6a 00                	push   0x0
c0019b03:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b0a:	50                   	push   eax
c0019b0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b0f:	e8 ee f1 ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c0019b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b17:	e8 9c fe ff ff       	call   c00199b8 <ATA::readyForCommand()>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	84 c0                	test   al,al
c0019b21:	0f 84 4e 02 00 00    	je     c0019d75 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019b27:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019b2d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019b33:	c1 e0 04             	shl    eax,0x4
c0019b36:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019b3d:	09 c6                	or     esi,eax
c0019b3f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019b44:	75 05                	jne    c0019b4b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019b46:	83 ce a0             	or     esi,0xffffffa0
c0019b49:	eb 03                	jmp    c0019b4e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019b4b:	83 ce e0             	or     esi,0xffffffe0
c0019b4e:	89 f0                	mov    eax,esi
c0019b50:	0f b6 f0             	movzx  esi,al
c0019b53:	56                   	push   esi
c0019b54:	6a 06                	push   0x6
c0019b56:	51                   	push   ecx
c0019b57:	52                   	push   edx
c0019b58:	e8 97 ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	6a 00                	push   0x0
c0019b62:	6a 01                	push   0x1
c0019b64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b6b:	50                   	push   eax
c0019b6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b72:	e8 7d ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019b7f:	75 6e                	jne    c0019bef <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019b81:	6a 00                	push   0x0
c0019b83:	6a 08                	push   0x8
c0019b85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b8c:	50                   	push   eax
c0019b8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b93:	e8 5c ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b98:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019b9d:	50                   	push   eax
c0019b9e:	6a 09                	push   0x9
c0019ba0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ba7:	50                   	push   eax
c0019ba8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bae:	e8 41 ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bb3:	83 c4 20             	add    esp,0x20
c0019bb6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019bbb:	50                   	push   eax
c0019bbc:	6a 0a                	push   0xa
c0019bbe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bc5:	50                   	push   eax
c0019bc6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bcc:	e8 23 ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bd1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019bd6:	50                   	push   eax
c0019bd7:	6a 0b                	push   0xb
c0019bd9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019be0:	50                   	push   eax
c0019be1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019be7:	e8 08 ef ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bec:	83 c4 20             	add    esp,0x20
c0019bef:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019bf4:	50                   	push   eax
c0019bf5:	6a 02                	push   0x2
c0019bf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bfe:	50                   	push   eax
c0019bff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c05:	e8 ea ee ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c0a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019c0f:	50                   	push   eax
c0019c10:	6a 03                	push   0x3
c0019c12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c19:	50                   	push   eax
c0019c1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c20:	e8 cf ee ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c25:	83 c4 20             	add    esp,0x20
c0019c28:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019c2d:	50                   	push   eax
c0019c2e:	6a 04                	push   0x4
c0019c30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c37:	50                   	push   eax
c0019c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c3e:	e8 b1 ee ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c48:	50                   	push   eax
c0019c49:	6a 05                	push   0x5
c0019c4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c52:	50                   	push   eax
c0019c53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c59:	e8 96 ee ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c5e:	83 c4 20             	add    esp,0x20
c0019c61:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c66:	0f 94 c0             	sete   al
c0019c69:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019c6e:	74 09                	je     c0019c79 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019c70:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019c77:	eb 07                	jmp    c0019c80 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019c79:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019c80:	0f b6 c0             	movzx  eax,al
c0019c83:	50                   	push   eax
c0019c84:	6a 07                	push   0x7
c0019c86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c8d:	50                   	push   eax
c0019c8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c94:	e8 5b ee ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c99:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019c9d:	83 c4 10             	add    esp,0x10
c0019ca0:	85 f6                	test   esi,esi
c0019ca2:	0f 84 ae 00 00 00    	je     c0019d56 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019ca8:	50                   	push   eax
c0019ca9:	6a 01                	push   0x1
c0019cab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cb2:	50                   	push   eax
c0019cb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cb9:	e8 d4 f8 ff ff       	call   c0019592 <IDE::polling(unsigned char, unsigned int)>
c0019cbe:	83 c4 10             	add    esp,0x10
c0019cc1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019cc7:	84 c0                	test   al,al
c0019cc9:	74 20                	je     c0019ceb <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019ccb:	0f b6 f8             	movzx  edi,al
c0019cce:	0f b6 d2             	movzx  edx,dl
c0019cd1:	57                   	push   edi
c0019cd2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019cd9:	50                   	push   eax
c0019cda:	52                   	push   edx
c0019cdb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ce1:	e8 fc f7 ff ff       	call   c00194e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019ce6:	e9 87 00 00 00       	jmp    c0019d72 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019ceb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019cf0:	74 33                	je     c0019d25 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019cf2:	31 ed                	xor    ebp,ebp
c0019cf4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019cf8:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019cfc:	50                   	push   eax
c0019cfd:	50                   	push   eax
c0019cfe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d05:	50                   	push   eax
c0019d06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d0c:	e8 d1 ed ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c0019d11:	89 c2                	mov    edx,eax
c0019d13:	89 f8                	mov    eax,edi
c0019d15:	66 ef                	out    dx,ax
c0019d17:	45                   	inc    ebp
c0019d18:	83 c4 10             	add    esp,0x10
c0019d1b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019d21:	75 d1                	jne    c0019cf4 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019d23:	eb 23                	jmp    c0019d48 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019d25:	0f b6 d2             	movzx  edx,dl
c0019d28:	51                   	push   ecx
c0019d29:	51                   	push   ecx
c0019d2a:	52                   	push   edx
c0019d2b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d31:	e8 ac ed ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c0019d36:	b9 00 01 00 00       	mov    ecx,0x100
c0019d3b:	89 c2                	mov    edx,eax
c0019d3d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019d41:	fc                   	cld    
c0019d42:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019d45:	83 c4 10             	add    esp,0x10
c0019d48:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019d50:	4e                   	dec    esi
c0019d51:	e9 4a ff ff ff       	jmp    c0019ca0 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019d56:	31 ff                	xor    edi,edi
c0019d58:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d5d:	74 16                	je     c0019d75 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019d5f:	50                   	push   eax
c0019d60:	50                   	push   eax
c0019d61:	31 c0                	xor    eax,eax
c0019d63:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019d68:	0f 94 c0             	sete   al
c0019d6b:	50                   	push   eax
c0019d6c:	53                   	push   ebx
c0019d6d:	e8 fc fb ff ff       	call   c001996e <ATA::flush(bool)>
c0019d72:	83 c4 10             	add    esp,0x10
c0019d75:	83 c4 2c             	add    esp,0x2c
c0019d78:	89 f8                	mov    eax,edi
c0019d7a:	5b                   	pop    ebx
c0019d7b:	5e                   	pop    esi
c0019d7c:	5f                   	pop    edi
c0019d7d:	5d                   	pop    ebp
c0019d7e:	c3                   	ret    
c0019d7f:	90                   	nop

c0019d80 <ATA::read(unsigned long long, int, void*)>:
c0019d80:	57                   	push   edi
c0019d81:	b8 04 00 00 00       	mov    eax,0x4
c0019d86:	56                   	push   esi
c0019d87:	53                   	push   ebx
c0019d88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019d90:	8d 7a ff             	lea    edi,[edx-0x1]
c0019d93:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d97:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d9b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019da1:	77 25                	ja     c0019dc8 <ATA::read(unsigned long long, int, void*)+0x48>
c0019da3:	b8 06 00 00 00       	mov    eax,0x6
c0019da8:	85 f6                	test   esi,esi
c0019daa:	74 1c                	je     c0019dc8 <ATA::read(unsigned long long, int, void*)+0x48>
c0019dac:	50                   	push   eax
c0019dad:	50                   	push   eax
c0019dae:	6a 00                	push   0x0
c0019db0:	56                   	push   esi
c0019db1:	52                   	push   edx
c0019db2:	53                   	push   ebx
c0019db3:	51                   	push   ecx
c0019db4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019db8:	e8 47 fc ff ff       	call   c0019a04 <ATA::access(unsigned long long, int, void*, bool)>
c0019dbd:	83 c4 20             	add    esp,0x20
c0019dc0:	85 c0                	test   eax,eax
c0019dc2:	0f 95 c0             	setne  al
c0019dc5:	0f b6 c0             	movzx  eax,al
c0019dc8:	5b                   	pop    ebx
c0019dc9:	5e                   	pop    esi
c0019dca:	5f                   	pop    edi
c0019dcb:	c3                   	ret    

c0019dcc <ATA::write(unsigned long long, int, void*)>:
c0019dcc:	57                   	push   edi
c0019dcd:	b8 04 00 00 00       	mov    eax,0x4
c0019dd2:	56                   	push   esi
c0019dd3:	53                   	push   ebx
c0019dd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019dd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ddc:	8d 7a ff             	lea    edi,[edx-0x1]
c0019ddf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019de3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019de7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019ded:	77 25                	ja     c0019e14 <ATA::write(unsigned long long, int, void*)+0x48>
c0019def:	b8 06 00 00 00       	mov    eax,0x6
c0019df4:	85 f6                	test   esi,esi
c0019df6:	74 1c                	je     c0019e14 <ATA::write(unsigned long long, int, void*)+0x48>
c0019df8:	50                   	push   eax
c0019df9:	50                   	push   eax
c0019dfa:	6a 01                	push   0x1
c0019dfc:	56                   	push   esi
c0019dfd:	52                   	push   edx
c0019dfe:	53                   	push   ebx
c0019dff:	51                   	push   ecx
c0019e00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e04:	e8 fb fb ff ff       	call   c0019a04 <ATA::access(unsigned long long, int, void*, bool)>
c0019e09:	83 c4 20             	add    esp,0x20
c0019e0c:	85 c0                	test   eax,eax
c0019e0e:	0f 95 c0             	setne  al
c0019e11:	0f b6 c0             	movzx  eax,al
c0019e14:	5b                   	pop    ebx
c0019e15:	5e                   	pop    esi
c0019e16:	5f                   	pop    edi
c0019e17:	c3                   	ret    

c0019e18 <ATA::detectCHS()>:
c0019e18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e1c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019e22:	c1 e0 06             	shl    eax,0x6
c0019e25:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019e2b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019e35:	c7 44 24 04 60 ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ed60
c0019e3d:	e9 75 62 ff ff       	jmp    c00100b7 <KePanic(char const*)>

c0019e42 <ATA::open(int, int, void*)>:
c0019e42:	53                   	push   ebx
c0019e43:	83 ec 08             	sub    esp,0x8
c0019e46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e4a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e52:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019e58:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019e5e:	c1 e0 06             	shl    eax,0x6
c0019e61:	01 d0                	add    eax,edx
c0019e63:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019e6a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019e70:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019e77:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019e81:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019e87:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019e8e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019e95:	75 0c                	jne    c0019ea3 <ATA::open(int, int, void*)+0x61>
c0019e97:	83 ec 0c             	sub    esp,0xc
c0019e9a:	53                   	push   ebx
c0019e9b:	e8 78 ff ff ff       	call   c0019e18 <ATA::detectCHS()>
c0019ea0:	83 c4 10             	add    esp,0x10
c0019ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019ea9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019eaf:	c1 e0 06             	shl    eax,0x6
c0019eb2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019eb9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019ec3:	d1 e8                	shr    eax,1
c0019ec5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019ecb:	6a 04                	push   0x4
c0019ecd:	6a 0c                	push   0xc
c0019ecf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ed6:	50                   	push   eax
c0019ed7:	52                   	push   edx
c0019ed8:	e8 17 ec ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019edd:	90                   	nop
c0019ede:	90                   	nop
c0019edf:	6a 00                	push   0x0
c0019ee1:	6a 0c                	push   0xc
c0019ee3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019eea:	50                   	push   eax
c0019eeb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ef1:	e8 fe eb ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ef6:	83 c4 14             	add    esp,0x14
c0019ef9:	53                   	push   ebx
c0019efa:	e8 cb 1d ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c0019eff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f02:	e8 3b 2e ff ff       	call   c000cd42 <createPartitionsForDisk(PhysicalDisk*)>
c0019f07:	31 c0                	xor    eax,eax
c0019f09:	83 c4 18             	add    esp,0x18
c0019f0c:	5b                   	pop    ebx
c0019f0d:	c3                   	ret    

c0019f0e <ATAPI::write(unsigned long long, int, void*)>:
c0019f0e:	b8 03 00 00 00       	mov    eax,0x3
c0019f13:	c3                   	ret    

c0019f14 <ATAPI::close(int, int, void*)>:
c0019f14:	83 ec 0c             	sub    esp,0xc
c0019f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f1b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019f21:	85 c0                	test   eax,eax
c0019f23:	74 0c                	je     c0019f31 <ATAPI::close(int, int, void*)+0x1d>
c0019f25:	83 ec 0c             	sub    esp,0xc
c0019f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0019f2a:	50                   	push   eax
c0019f2b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019f2e:	83 c4 10             	add    esp,0x10
c0019f31:	31 c0                	xor    eax,eax
c0019f33:	83 c4 0c             	add    esp,0xc
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <ATAPI::ATAPI()>:
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f3f:	83 ec 04             	sub    esp,0x4
c0019f42:	68 00 08 00 00       	push   0x800
c0019f47:	68 a9 ee 01 c0       	push   0xc001eea9
c0019f4c:	50                   	push   eax
c0019f4d:	e8 10 1d ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f52:	83 c4 10             	add    esp,0x10
c0019f55:	ba c4 ed 01 c0       	mov    edx,0xc001edc4
c0019f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f5e:	89 10                	mov    DWORD PTR [eax],edx
c0019f60:	90                   	nop
c0019f61:	83 c4 0c             	add    esp,0xc
c0019f64:	c3                   	ret    
c0019f65:	90                   	nop

c0019f66 <ATAPI::readyForCommand()>:
c0019f66:	56                   	push   esi
c0019f67:	53                   	push   ebx
c0019f68:	53                   	push   ebx
c0019f69:	31 db                	xor    ebx,ebx
c0019f6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f6f:	51                   	push   ecx
c0019f70:	6a 0c                	push   0xc
c0019f72:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f79:	50                   	push   eax
c0019f7a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f80:	e8 2f ec ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c0019f85:	83 c4 10             	add    esp,0x10
c0019f88:	a8 88                	test   al,0x88
c0019f8a:	74 25                	je     c0019fb1 <ATAPI::readyForCommand()+0x4b>
c0019f8c:	43                   	inc    ebx
c0019f8d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019f93:	7e da                	jle    c0019f6f <ATAPI::readyForCommand()+0x9>
c0019f95:	83 ec 0c             	sub    esp,0xc
c0019f98:	68 5e 01 00 00       	push   0x15e
c0019f9d:	e8 26 96 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c0019fa2:	83 c4 10             	add    esp,0x10
c0019fa5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019fab:	75 c2                	jne    c0019f6f <ATAPI::readyForCommand()+0x9>
c0019fad:	31 c0                	xor    eax,eax
c0019faf:	eb 02                	jmp    c0019fb3 <ATAPI::readyForCommand()+0x4d>
c0019fb1:	b0 01                	mov    al,0x1
c0019fb3:	5a                   	pop    edx
c0019fb4:	5b                   	pop    ebx
c0019fb5:	5e                   	pop    esi
c0019fb6:	c3                   	ret    
c0019fb7:	90                   	nop

c0019fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019fb8:	55                   	push   ebp
c0019fb9:	57                   	push   edi
c0019fba:	56                   	push   esi
c0019fbb:	53                   	push   ebx
c0019fbc:	83 ec 20             	sub    esp,0x20
c0019fbf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019fc3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019fc7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019fcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fcf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019fd3:	6a 01                	push   0x1
c0019fd5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019fdc:	50                   	push   eax
c0019fdd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019fe3:	e8 1a ed ff ff       	call   c0018d02 <IDE::enableIRQs(unsigned char, bool)>
c0019fe8:	5e                   	pop    esi
c0019fe9:	58                   	pop    eax
c0019fea:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ff1:	50                   	push   eax
c0019ff2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ff8:	e8 d1 ea ff ff       	call   c0018ace <IDE::prepareInterrupt(unsigned char)>
c0019ffd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a000:	e8 61 ff ff ff       	call   c0019f66 <ATAPI::readyForCommand()>
c001a005:	83 c4 10             	add    esp,0x10
c001a008:	84 c0                	test   al,al
c001a00a:	75 0a                	jne    c001a016 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a00c:	bb 01 00 00 00       	mov    ebx,0x1
c001a011:	e9 57 02 00 00       	jmp    c001a26d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a016:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a01c:	c1 e0 04             	shl    eax,0x4
c001a01f:	0f b6 c0             	movzx  eax,al
c001a022:	50                   	push   eax
c001a023:	6a 06                	push   0x6
c001a025:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a02c:	50                   	push   eax
c001a02d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a033:	e8 bc ea ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a038:	6a 00                	push   0x0
c001a03a:	6a 01                	push   0x1
c001a03c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a043:	50                   	push   eax
c001a044:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a04a:	e8 a5 ea ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a04f:	83 c4 20             	add    esp,0x20
c001a052:	0f b6 c3             	movzx  eax,bl
c001a055:	0f b6 df             	movzx  ebx,bh
c001a058:	50                   	push   eax
c001a059:	6a 04                	push   0x4
c001a05b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a062:	50                   	push   eax
c001a063:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a069:	e8 86 ea ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a06e:	53                   	push   ebx
c001a06f:	6a 05                	push   0x5
c001a071:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a078:	50                   	push   eax
c001a079:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a07f:	e8 70 ea ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a084:	83 c4 20             	add    esp,0x20
c001a087:	68 a0 00 00 00       	push   0xa0
c001a08c:	6a 07                	push   0x7
c001a08e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a095:	50                   	push   eax
c001a096:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a09c:	e8 53 ea ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a1:	83 c4 0c             	add    esp,0xc
c001a0a4:	6a 01                	push   0x1
c001a0a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ad:	50                   	push   eax
c001a0ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b4:	e8 d9 f4 ff ff       	call   c0019592 <IDE::polling(unsigned char, unsigned int)>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a0c2:	84 c0                	test   al,al
c001a0c4:	74 23                	je     c001a0e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a0c6:	0f b6 d8             	movzx  ebx,al
c001a0c9:	0f b6 d2             	movzx  edx,dl
c001a0cc:	53                   	push   ebx
c001a0cd:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a0d4:	50                   	push   eax
c001a0d5:	52                   	push   edx
c001a0d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0dc:	e8 01 f4 ff ff       	call   c00194e2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a0e1:	83 c4 10             	add    esp,0x10
c001a0e4:	e9 84 01 00 00       	jmp    c001a26d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0e9:	0f b6 d2             	movzx  edx,dl
c001a0ec:	53                   	push   ebx
c001a0ed:	53                   	push   ebx
c001a0ee:	52                   	push   edx
c001a0ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0f5:	e8 e8 e9 ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c001a0fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a0fe:	b9 06 00 00 00       	mov    ecx,0x6
c001a103:	89 c2                	mov    edx,eax
c001a105:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a108:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a115:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a11c:	85 db                	test   ebx,ebx
c001a11e:	0f 84 ec 00 00 00    	je     c001a210 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a124:	51                   	push   ecx
c001a125:	51                   	push   ecx
c001a126:	52                   	push   edx
c001a127:	50                   	push   eax
c001a128:	e8 35 eb ff ff       	call   c0018c62 <IDE::waitInterrupt(unsigned char)>
c001a12d:	83 c4 10             	add    esp,0x10
c001a130:	84 c0                	test   al,al
c001a132:	0f 84 d4 fe ff ff    	je     c001a00c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a138:	56                   	push   esi
c001a139:	56                   	push   esi
c001a13a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a141:	50                   	push   eax
c001a142:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a148:	e8 81 e9 ff ff       	call   c0018ace <IDE::prepareInterrupt(unsigned char)>
c001a14d:	83 c4 0c             	add    esp,0xc
c001a150:	6a 04                	push   0x4
c001a152:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a159:	50                   	push   eax
c001a15a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a160:	e8 4f ea ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001a165:	83 c4 0c             	add    esp,0xc
c001a168:	89 c6                	mov    esi,eax
c001a16a:	6a 05                	push   0x5
c001a16c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a173:	50                   	push   eax
c001a174:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a17a:	e8 35 ea ff ff       	call   c0018bb4 <IDE::read(unsigned char, unsigned char)>
c001a17f:	89 f1                	mov    ecx,esi
c001a181:	0f b6 c0             	movzx  eax,al
c001a184:	0f b6 f1             	movzx  esi,cl
c001a187:	c1 e0 08             	shl    eax,0x8
c001a18a:	09 c6                	or     esi,eax
c001a18c:	d1 fe                	sar    esi,1
c001a18e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a192:	83 c4 10             	add    esp,0x10
c001a195:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a19a:	74 41                	je     c001a1dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a19c:	31 c9                	xor    ecx,ecx
c001a19e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1a4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1ab:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a1af:	75 0a                	jne    c001a1bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a1b1:	01 c9                	add    ecx,ecx
c001a1b3:	01 cd                	add    ebp,ecx
c001a1b5:	4b                   	dec    ebx
c001a1b6:	e9 54 ff ff ff       	jmp    c001a10f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a1bb:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a1c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a1c4:	51                   	push   ecx
c001a1c5:	51                   	push   ecx
c001a1c6:	52                   	push   edx
c001a1c7:	50                   	push   eax
c001a1c8:	e8 15 e9 ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c001a1cd:	89 c2                	mov    edx,eax
c001a1cf:	89 f0                	mov    eax,esi
c001a1d1:	66 ef                	out    dx,ax
c001a1d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	41                   	inc    ecx
c001a1db:	eb c1                	jmp    c001a19e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a1dd:	31 f6                	xor    esi,esi
c001a1df:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1e5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1ec:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a1f0:	75 06                	jne    c001a1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a1f2:	01 f6                	add    esi,esi
c001a1f4:	01 f5                	add    ebp,esi
c001a1f6:	eb bd                	jmp    c001a1b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a1f8:	51                   	push   ecx
c001a1f9:	51                   	push   ecx
c001a1fa:	52                   	push   edx
c001a1fb:	50                   	push   eax
c001a1fc:	e8 e1 e8 ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c001a201:	89 c2                	mov    edx,eax
c001a203:	66 ed                	in     ax,dx
c001a205:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a20a:	83 c4 10             	add    esp,0x10
c001a20d:	46                   	inc    esi
c001a20e:	eb cf                	jmp    c001a1df <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a210:	51                   	push   ecx
c001a211:	51                   	push   ecx
c001a212:	52                   	push   edx
c001a213:	50                   	push   eax
c001a214:	e8 49 ea ff ff       	call   c0018c62 <IDE::waitInterrupt(unsigned char)>
c001a219:	83 c4 10             	add    esp,0x10
c001a21c:	84 c0                	test   al,al
c001a21e:	0f 84 e8 fd ff ff    	je     c001a00c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a224:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a229:	52                   	push   edx
c001a22a:	52                   	push   edx
c001a22b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a232:	50                   	push   eax
c001a233:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a239:	e8 90 e8 ff ff       	call   c0018ace <IDE::prepareInterrupt(unsigned char)>
c001a23e:	83 c4 10             	add    esp,0x10
c001a241:	50                   	push   eax
c001a242:	50                   	push   eax
c001a243:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a24a:	50                   	push   eax
c001a24b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a251:	e8 8c e8 ff ff       	call   c0018ae2 <IDE::getBase(unsigned char)>
c001a256:	8d 50 07             	lea    edx,[eax+0x7]
c001a259:	ec                   	in     al,dx
c001a25a:	83 c4 10             	add    esp,0x10
c001a25d:	a8 88                	test   al,0x88
c001a25f:	74 0a                	je     c001a26b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a261:	4b                   	dec    ebx
c001a262:	75 dd                	jne    c001a241 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a264:	bb 02 00 00 00       	mov    ebx,0x2
c001a269:	eb 02                	jmp    c001a26d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a26b:	31 db                	xor    ebx,ebx
c001a26d:	83 c4 1c             	add    esp,0x1c
c001a270:	89 d8                	mov    eax,ebx
c001a272:	5b                   	pop    ebx
c001a273:	5e                   	pop    esi
c001a274:	5f                   	pop    edi
c001a275:	5d                   	pop    ebp
c001a276:	c3                   	ret    
c001a277:	90                   	nop

c001a278 <ATAPI::diskRemoved()>:
c001a278:	53                   	push   ebx
c001a279:	83 ec 14             	sub    esp,0x14
c001a27c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a280:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a287:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a28d:	e8 30 28 ff ff       	call   c000cac2 <LogicalDisk::unmount()>
c001a292:	58                   	pop    eax
c001a293:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a299:	e8 6a 31 ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c001a29e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a2a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a2a8:	83 c4 18             	add    esp,0x18
c001a2ab:	5b                   	pop    ebx
c001a2ac:	e9 47 31 ff ff       	jmp    c000d3f8 <VCache::invalidateReadBuffer()>
c001a2b1:	90                   	nop

c001a2b2 <ATAPI::eject()>:
c001a2b2:	57                   	push   edi
c001a2b3:	b9 03 00 00 00       	mov    ecx,0x3
c001a2b8:	53                   	push   ebx
c001a2b9:	83 ec 14             	sub    esp,0x14
c001a2bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a2c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a2c4:	fc                   	cld    
c001a2c5:	31 c0                	xor    eax,eax
c001a2c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a2c9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a2ce:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a2d3:	50                   	push   eax
c001a2d4:	50                   	push   eax
c001a2d5:	6a 00                	push   0x0
c001a2d7:	6a 00                	push   0x0
c001a2d9:	6a 00                	push   0x0
c001a2db:	6a 02                	push   0x2
c001a2dd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a2e1:	50                   	push   eax
c001a2e2:	53                   	push   ebx
c001a2e3:	e8 d0 fc ff ff       	call   c0019fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a2e8:	83 c4 14             	add    esp,0x14
c001a2eb:	53                   	push   ebx
c001a2ec:	e8 87 ff ff ff       	call   c001a278 <ATAPI::diskRemoved()>
c001a2f1:	83 c4 24             	add    esp,0x24
c001a2f4:	31 c0                	xor    eax,eax
c001a2f6:	5b                   	pop    ebx
c001a2f7:	5f                   	pop    edi
c001a2f8:	c3                   	ret    
c001a2f9:	90                   	nop

c001a2fa <ATAPI::diskInserted()>:
c001a2fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2fe:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a305:	c3                   	ret    

c001a306 <ATAPI::detectMedia()>:
c001a306:	56                   	push   esi
c001a307:	53                   	push   ebx
c001a308:	83 ec 28             	sub    esp,0x28
c001a30b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a30f:	6a 0c                	push   0xc
c001a311:	6a 00                	push   0x0
c001a313:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a317:	56                   	push   esi
c001a318:	e8 b3 61 fe ff       	call   c00004d0 <memset>
c001a31d:	58                   	pop    eax
c001a31e:	5a                   	pop    edx
c001a31f:	6a 00                	push   0x0
c001a321:	6a 00                	push   0x0
c001a323:	6a 00                	push   0x0
c001a325:	6a 00                	push   0x0
c001a327:	56                   	push   esi
c001a328:	53                   	push   ebx
c001a329:	e8 8a fc ff ff       	call   c0019fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a32e:	83 c4 1c             	add    esp,0x1c
c001a331:	6a 0c                	push   0xc
c001a333:	6a 00                	push   0x0
c001a335:	56                   	push   esi
c001a336:	e8 95 61 fe ff       	call   c00004d0 <memset>
c001a33b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a340:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a345:	59                   	pop    ecx
c001a346:	58                   	pop    eax
c001a347:	6a 01                	push   0x1
c001a349:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a34d:	50                   	push   eax
c001a34e:	6a 00                	push   0x0
c001a350:	6a 12                	push   0x12
c001a352:	56                   	push   esi
c001a353:	53                   	push   ebx
c001a354:	e8 5f fc ff ff       	call   c0019fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a359:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a35d:	83 c4 20             	add    esp,0x20
c001a360:	83 e0 7f             	and    eax,0x7f
c001a363:	3c 70                	cmp    al,0x70
c001a365:	74 15                	je     c001a37c <ATAPI::detectMedia()+0x76>
c001a367:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a36e:	75 0c                	jne    c001a37c <ATAPI::detectMedia()+0x76>
c001a370:	83 ec 0c             	sub    esp,0xc
c001a373:	53                   	push   ebx
c001a374:	e8 81 ff ff ff       	call   c001a2fa <ATAPI::diskInserted()>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a380:	83 e0 0f             	and    eax,0xf
c001a383:	3c 02                	cmp    al,0x2
c001a385:	75 1b                	jne    c001a3a2 <ATAPI::detectMedia()+0x9c>
c001a387:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a38c:	75 2d                	jne    c001a3bb <ATAPI::detectMedia()+0xb5>
c001a38e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a395:	74 24                	je     c001a3bb <ATAPI::detectMedia()+0xb5>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	53                   	push   ebx
c001a39b:	e8 d8 fe ff ff       	call   c001a278 <ATAPI::diskRemoved()>
c001a3a0:	eb 16                	jmp    c001a3b8 <ATAPI::detectMedia()+0xb2>
c001a3a2:	84 c0                	test   al,al
c001a3a4:	75 15                	jne    c001a3bb <ATAPI::detectMedia()+0xb5>
c001a3a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a3ad:	75 0c                	jne    c001a3bb <ATAPI::detectMedia()+0xb5>
c001a3af:	83 ec 0c             	sub    esp,0xc
c001a3b2:	53                   	push   ebx
c001a3b3:	e8 42 ff ff ff       	call   c001a2fa <ATAPI::diskInserted()>
c001a3b8:	83 c4 10             	add    esp,0x10
c001a3bb:	83 c4 24             	add    esp,0x24
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	c3                   	ret    
c001a3c1:	90                   	nop

c001a3c2 <ATAPI::open(int, int, void*)>:
c001a3c2:	56                   	push   esi
c001a3c3:	53                   	push   ebx
c001a3c4:	50                   	push   eax
c001a3c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a3d7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3dd:	c1 e0 06             	shl    eax,0x6
c001a3e0:	01 d0                	add    eax,edx
c001a3e2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a3e9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a3ef:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a3f6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a400:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a406:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a40d:	6a 04                	push   0x4
c001a40f:	6a 0c                	push   0xc
c001a411:	51                   	push   ecx
c001a412:	52                   	push   edx
c001a413:	e8 dc e6 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a418:	90                   	nop
c001a419:	90                   	nop
c001a41a:	6a 00                	push   0x0
c001a41c:	6a 0c                	push   0xc
c001a41e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a425:	50                   	push   eax
c001a426:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a42c:	e8 c3 e6 ff ff       	call   c0018af4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a431:	83 c4 14             	add    esp,0x14
c001a434:	68 74 01 00 00       	push   0x174
c001a439:	e8 7b d3 fe ff       	call   c00077b9 <malloc>
c001a43e:	83 c4 0c             	add    esp,0xc
c001a441:	89 c6                	mov    esi,eax
c001a443:	6a 00                	push   0x0
c001a445:	68 ff ff ff 7f       	push   0x7fffffff
c001a44a:	6a 00                	push   0x0
c001a44c:	6a 00                	push   0x0
c001a44e:	53                   	push   ebx
c001a44f:	68 60 ef 01 c0       	push   0xc001ef60
c001a454:	50                   	push   eax
c001a455:	e8 b4 24 ff ff       	call   c000c90e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a45a:	83 c4 14             	add    esp,0x14
c001a45d:	56                   	push   esi
c001a45e:	e8 61 25 ff ff       	call   c000c9c4 <LogicalDisk::assignDriveLetter()>
c001a463:	5a                   	pop    edx
c001a464:	0f be c0             	movsx  eax,al
c001a467:	59                   	pop    ecx
c001a468:	50                   	push   eax
c001a469:	68 ac ed 01 c0       	push   0xc001edac
c001a46e:	e8 e1 ff fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a473:	58                   	pop    eax
c001a474:	5a                   	pop    edx
c001a475:	56                   	push   esi
c001a476:	53                   	push   ebx
c001a477:	e8 18 14 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001a47c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a482:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a485:	e8 40 18 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a48a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a491:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a494:	e8 6d fe ff ff       	call   c001a306 <ATAPI::detectMedia()>
c001a499:	83 c4 14             	add    esp,0x14
c001a49c:	31 c0                	xor    eax,eax
c001a49e:	5b                   	pop    ebx
c001a49f:	5e                   	pop    esi
c001a4a0:	c3                   	ret    
c001a4a1:	90                   	nop

c001a4a2 <ATAPI::read(unsigned long long, int, void*)>:
c001a4a2:	55                   	push   ebp
c001a4a3:	57                   	push   edi
c001a4a4:	56                   	push   esi
c001a4a5:	53                   	push   ebx
c001a4a6:	83 ec 1c             	sub    esp,0x1c
c001a4a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a4ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a4b1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a4b5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a4bc:	74 3c                	je     c001a4fa <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a4be:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a4c2:	b9 03 00 00 00       	mov    ecx,0x3
c001a4c7:	fc                   	cld    
c001a4c8:	31 c0                	xor    eax,eax
c001a4ca:	0f ce                	bswap  esi
c001a4cc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a4ce:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a4d3:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a4d7:	89 e8                	mov    eax,ebp
c001a4d9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a4dd:	50                   	push   eax
c001a4de:	50                   	push   eax
c001a4df:	55                   	push   ebp
c001a4e0:	c1 e5 0b             	shl    ebp,0xb
c001a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4e7:	6a 00                	push   0x0
c001a4e9:	55                   	push   ebp
c001a4ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a4ee:	50                   	push   eax
c001a4ef:	53                   	push   ebx
c001a4f0:	e8 c3 fa ff ff       	call   c0019fb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a4f5:	83 c4 20             	add    esp,0x20
c001a4f8:	eb 1a                	jmp    c001a514 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a4fa:	83 ec 0c             	sub    esp,0xc
c001a4fd:	53                   	push   ebx
c001a4fe:	e8 03 fe ff ff       	call   c001a306 <ATAPI::detectMedia()>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a50d:	75 af                	jne    c001a4be <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a50f:	b8 02 00 00 00       	mov    eax,0x2
c001a514:	83 c4 1c             	add    esp,0x1c
c001a517:	5b                   	pop    ebx
c001a518:	5e                   	pop    esi
c001a519:	5f                   	pop    edi
c001a51a:	5d                   	pop    ebp
c001a51b:	c3                   	ret    

c001a51c <SATA::close(int, int, void*)>:
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a523:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a529:	85 c0                	test   eax,eax
c001a52b:	74 0c                	je     c001a539 <SATA::close(int, int, void*)+0x1d>
c001a52d:	83 ec 0c             	sub    esp,0xc
c001a530:	8b 10                	mov    edx,DWORD PTR [eax]
c001a532:	50                   	push   eax
c001a533:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a536:	83 c4 10             	add    esp,0x10
c001a539:	31 c0                	xor    eax,eax
c001a53b:	83 c4 0c             	add    esp,0xc
c001a53e:	c3                   	ret    
c001a53f:	90                   	nop

c001a540 <SATA::powerSaving(PowerSavingLevel)>:
c001a540:	c3                   	ret    
c001a541:	90                   	nop

c001a542 <SATA::open(int, int, void*)>:
c001a542:	56                   	push   esi
c001a543:	53                   	push   ebx
c001a544:	50                   	push   eax
c001a545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a54d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a557:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a55d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a56b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a575:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a57b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a582:	e8 0e d5 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a587:	89 c6                	mov    esi,eax
c001a589:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a58f:	81 c6 00 10 00 00    	add    esi,0x1000
c001a595:	e8 fb d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a59a:	39 c6                	cmp    esi,eax
c001a59c:	74 10                	je     c001a5ae <SATA::open(int, int, void*)+0x6c>
c001a59e:	83 ec 0c             	sub    esp,0xc
c001a5a1:	68 f4 ed 01 c0       	push   0xc001edf4
c001a5a6:	e8 0c 5b ff ff       	call   c00100b7 <KePanic(char const*)>
c001a5ab:	83 c4 10             	add    esp,0x10
c001a5ae:	83 ec 0c             	sub    esp,0xc
c001a5b1:	6a 02                	push   0x2
c001a5b3:	e8 49 ec fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001a5b8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a5be:	6a 03                	push   0x3
c001a5c0:	50                   	push   eax
c001a5c1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a5c7:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c001a5cd:	e8 c4 f2 fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5d2:	83 c4 14             	add    esp,0x14
c001a5d5:	53                   	push   ebx
c001a5d6:	e8 ef 16 ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001a5db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5de:	e8 5f 27 ff ff       	call   c000cd42 <createPartitionsForDisk(PhysicalDisk*)>
c001a5e3:	83 c4 14             	add    esp,0x14
c001a5e6:	31 c0                	xor    eax,eax
c001a5e8:	5b                   	pop    ebx
c001a5e9:	5e                   	pop    esi
c001a5ea:	c3                   	ret    
c001a5eb:	90                   	nop

c001a5ec <SATA::SATA()>:
c001a5ec:	83 ec 0c             	sub    esp,0xc
c001a5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f3:	83 ec 04             	sub    esp,0x4
c001a5f6:	68 00 02 00 00       	push   0x200
c001a5fb:	68 08 ee 01 c0       	push   0xc001ee08
c001a600:	50                   	push   eax
c001a601:	e8 5c 16 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a606:	83 c4 10             	add    esp,0x10
c001a609:	ba 78 ee 01 c0       	mov    edx,0xc001ee78
c001a60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a612:	89 10                	mov    DWORD PTR [eax],edx
c001a614:	90                   	nop
c001a615:	83 c4 0c             	add    esp,0xc
c001a618:	c3                   	ret    
c001a619:	90                   	nop

c001a61a <SATA::access(unsigned long long, int, void*, bool)>:
c001a61a:	55                   	push   ebp
c001a61b:	57                   	push   edi
c001a61c:	56                   	push   esi
c001a61d:	53                   	push   ebx
c001a61e:	83 ec 2c             	sub    esp,0x2c
c001a621:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a625:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a629:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a62d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a631:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a635:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a63a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a63e:	7e 10                	jle    c001a650 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a640:	83 ec 0c             	sub    esp,0xc
c001a643:	68 18 ee 01 c0       	push   0xc001ee18
c001a648:	e8 6a 5a ff ff       	call   c00100b7 <KePanic(char const*)>
c001a64d:	83 c4 10             	add    esp,0x10
c001a650:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a656:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a65c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a662:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a666:	89 d0                	mov    eax,edx
c001a668:	c1 e0 07             	shl    eax,0x7
c001a66b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a66f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a679:	51                   	push   ecx
c001a67a:	8d 42 02             	lea    eax,[edx+0x2]
c001a67d:	51                   	push   ecx
c001a67e:	c1 e0 07             	shl    eax,0x7
c001a681:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a685:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a689:	50                   	push   eax
c001a68a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a690:	e8 e7 ef ff ff       	call   c001967c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a695:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a699:	83 c4 10             	add    esp,0x10
c001a69c:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a6a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6a5:	0f 84 4f 01 00 00    	je     c001a7fa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a6ab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a6af:	c1 e0 09             	shl    eax,0x9
c001a6b2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a6b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6bb:	74 0e                	je     c001a6cb <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a6bd:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a6c3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a6c7:	89 c1                	mov    ecx,eax
c001a6c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a6cf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a6d5:	8d 42 02             	lea    eax,[edx+0x2]
c001a6d8:	c1 e0 07             	shl    eax,0x7
c001a6db:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6df:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6e1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a6e7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a6ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6f1:	c1 e1 05             	shl    ecx,0x5
c001a6f4:	01 c8                	add    eax,ecx
c001a6f6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a6fa:	83 e1 01             	and    ecx,0x1
c001a6fd:	89 ce                	mov    esi,ecx
c001a6ff:	8a 08                	mov    cl,BYTE PTR [eax]
c001a701:	c1 e6 06             	shl    esi,0x6
c001a704:	83 e1 bf             	and    ecx,0xffffffbf
c001a707:	09 f1                	or     ecx,esi
c001a709:	88 08                	mov    BYTE PTR [eax],cl
c001a70b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a70d:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a713:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a719:	89 08                	mov    DWORD PTR [eax],ecx
c001a71b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a721:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a727:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a72d:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a730:	50                   	push   eax
c001a731:	68 90 00 00 00       	push   0x90
c001a736:	6a 00                	push   0x0
c001a738:	56                   	push   esi
c001a739:	e8 92 5d fe ff       	call   c00004d0 <memset>
c001a73e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a744:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a748:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a74e:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a752:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a756:	83 c4 10             	add    esp,0x10
c001a759:	48                   	dec    eax
c001a75a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a75f:	89 c1                	mov    ecx,eax
c001a761:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a767:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a76c:	09 c8                	or     eax,ecx
c001a76e:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a774:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a777:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a77e:	66 25 00 7f          	and    ax,0x7f00
c001a782:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a786:	66 0d 27 80          	or     ax,0x8027
c001a78a:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a78f:	66 89 06             	mov    WORD PTR [esi],ax
c001a792:	19 c0                	sbb    eax,eax
c001a794:	83 e0 f0             	and    eax,0xfffffff0
c001a797:	83 c0 35             	add    eax,0x35
c001a79a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a79d:	89 e8                	mov    eax,ebp
c001a79f:	c1 e8 10             	shr    eax,0x10
c001a7a2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a7a5:	89 e8                	mov    eax,ebp
c001a7a7:	c1 e8 18             	shr    eax,0x18
c001a7aa:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a7ad:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a7b1:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a7b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7b8:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a7bb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a7bf:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a7c3:	89 d6                	mov    esi,edx
c001a7c5:	31 c0                	xor    eax,eax
c001a7c7:	c1 e6 07             	shl    esi,0x7
c001a7ca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a7ce:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a7d4:	80 e1 88             	and    cl,0x88
c001a7d7:	74 0a                	je     c001a7e3 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a7d9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7de:	74 0a                	je     c001a7ea <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a7e0:	40                   	inc    eax
c001a7e1:	eb eb                	jmp    c001a7ce <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a7e3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7e8:	75 17                	jne    c001a801 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a7ea:	83 ec 0c             	sub    esp,0xc
c001a7ed:	68 51 ee 01 c0       	push   0xc001ee51
c001a7f2:	e8 5d fc fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a7f7:	83 c4 10             	add    esp,0x10
c001a7fa:	b8 01 00 00 00       	mov    eax,0x1
c001a7ff:	eb 5d                	jmp    c001a85e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a801:	b8 01 00 00 00       	mov    eax,0x1
c001a806:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a80a:	c1 e2 07             	shl    edx,0x7
c001a80d:	d3 e0                	shl    eax,cl
c001a80f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a813:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a819:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a81f:	85 c8                	test   eax,ecx
c001a821:	74 16                	je     c001a839 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a823:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a829:	0f ba e1 1e          	bt     ecx,0x1e
c001a82d:	73 ea                	jae    c001a819 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a82f:	83 ec 0c             	sub    esp,0xc
c001a832:	68 5f ee 01 c0       	push   0xc001ee5f
c001a837:	eb b9                	jmp    c001a7f2 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a839:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a83f:	0f ba e0 1e          	bt     eax,0x1e
c001a843:	72 b5                	jb     c001a7fa <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a845:	31 c0                	xor    eax,eax
c001a847:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a84c:	75 10                	jne    c001a85e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a84e:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a854:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a858:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a85c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a85e:	83 c4 2c             	add    esp,0x2c
c001a861:	5b                   	pop    ebx
c001a862:	5e                   	pop    esi
c001a863:	5f                   	pop    edi
c001a864:	5d                   	pop    ebp
c001a865:	c3                   	ret    

c001a866 <SATA::read(unsigned long long, int, void*)>:
c001a866:	57                   	push   edi
c001a867:	b8 04 00 00 00       	mov    eax,0x4
c001a86c:	56                   	push   esi
c001a86d:	53                   	push   ebx
c001a86e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a872:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a876:	8d 7a ff             	lea    edi,[edx-0x1]
c001a879:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a87d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a881:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a887:	77 25                	ja     c001a8ae <SATA::read(unsigned long long, int, void*)+0x48>
c001a889:	b8 06 00 00 00       	mov    eax,0x6
c001a88e:	85 f6                	test   esi,esi
c001a890:	74 1c                	je     c001a8ae <SATA::read(unsigned long long, int, void*)+0x48>
c001a892:	50                   	push   eax
c001a893:	50                   	push   eax
c001a894:	6a 00                	push   0x0
c001a896:	56                   	push   esi
c001a897:	52                   	push   edx
c001a898:	53                   	push   ebx
c001a899:	51                   	push   ecx
c001a89a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a89e:	e8 77 fd ff ff       	call   c001a61a <SATA::access(unsigned long long, int, void*, bool)>
c001a8a3:	83 c4 20             	add    esp,0x20
c001a8a6:	85 c0                	test   eax,eax
c001a8a8:	0f 95 c0             	setne  al
c001a8ab:	0f b6 c0             	movzx  eax,al
c001a8ae:	5b                   	pop    ebx
c001a8af:	5e                   	pop    esi
c001a8b0:	5f                   	pop    edi
c001a8b1:	c3                   	ret    

c001a8b2 <SATA::write(unsigned long long, int, void*)>:
c001a8b2:	55                   	push   ebp
c001a8b3:	b8 04 00 00 00       	mov    eax,0x4
c001a8b8:	57                   	push   edi
c001a8b9:	56                   	push   esi
c001a8ba:	53                   	push   ebx
c001a8bb:	83 ec 0c             	sub    esp,0xc
c001a8be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a8c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a8c6:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a8c9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a8cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a8d1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a8d7:	77 3d                	ja     c001a916 <SATA::write(unsigned long long, int, void*)+0x64>
c001a8d9:	b8 06 00 00 00       	mov    eax,0x6
c001a8de:	85 ed                	test   ebp,ebp
c001a8e0:	74 34                	je     c001a916 <SATA::write(unsigned long long, int, void*)+0x64>
c001a8e2:	c1 e3 09             	shl    ebx,0x9
c001a8e5:	01 eb                	add    ebx,ebp
c001a8e7:	89 d6                	mov    esi,edx
c001a8e9:	89 cf                	mov    edi,ecx
c001a8eb:	83 c6 01             	add    esi,0x1
c001a8ee:	83 d7 00             	adc    edi,0x0
c001a8f1:	50                   	push   eax
c001a8f2:	50                   	push   eax
c001a8f3:	6a 01                	push   0x1
c001a8f5:	55                   	push   ebp
c001a8f6:	81 c5 00 02 00 00    	add    ebp,0x200
c001a8fc:	6a 01                	push   0x1
c001a8fe:	51                   	push   ecx
c001a8ff:	52                   	push   edx
c001a900:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a904:	e8 11 fd ff ff       	call   c001a61a <SATA::access(unsigned long long, int, void*, bool)>
c001a909:	83 c4 20             	add    esp,0x20
c001a90c:	89 f2                	mov    edx,esi
c001a90e:	89 f9                	mov    ecx,edi
c001a910:	39 dd                	cmp    ebp,ebx
c001a912:	75 d3                	jne    c001a8e7 <SATA::write(unsigned long long, int, void*)+0x35>
c001a914:	31 c0                	xor    eax,eax
c001a916:	83 c4 0c             	add    esp,0xc
c001a919:	5b                   	pop    ebx
c001a91a:	5e                   	pop    esi
c001a91b:	5f                   	pop    edi
c001a91c:	5d                   	pop    ebp
c001a91d:	c3                   	ret    

c001a91e <SATAPI::write(unsigned long long, int, void*)>:
c001a91e:	b8 03 00 00 00       	mov    eax,0x3
c001a923:	c3                   	ret    

c001a924 <SATAPI::close(int, int, void*)>:
c001a924:	83 ec 0c             	sub    esp,0xc
c001a927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a92b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a931:	85 c0                	test   eax,eax
c001a933:	74 0c                	je     c001a941 <SATAPI::close(int, int, void*)+0x1d>
c001a935:	83 ec 0c             	sub    esp,0xc
c001a938:	8b 10                	mov    edx,DWORD PTR [eax]
c001a93a:	50                   	push   eax
c001a93b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a93e:	83 c4 10             	add    esp,0x10
c001a941:	31 c0                	xor    eax,eax
c001a943:	83 c4 0c             	add    esp,0xc
c001a946:	c3                   	ret    
c001a947:	90                   	nop

c001a948 <SATAPI::SATAPI()>:
c001a948:	83 ec 0c             	sub    esp,0xc
c001a94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a94f:	83 ec 04             	sub    esp,0x4
c001a952:	68 00 08 00 00       	push   0x800
c001a957:	68 a8 ee 01 c0       	push   0xc001eea8
c001a95c:	50                   	push   eax
c001a95d:	e8 00 13 ff ff       	call   c000bc62 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a962:	83 c4 10             	add    esp,0x10
c001a965:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c001a96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96e:	89 10                	mov    DWORD PTR [eax],edx
c001a970:	90                   	nop
c001a971:	83 c4 0c             	add    esp,0xc
c001a974:	c3                   	ret    
c001a975:	90                   	nop

c001a976 <SATAPI::diskRemoved()>:
c001a976:	c3                   	ret    
c001a977:	90                   	nop

c001a978 <SATAPI::diskInserted()>:
c001a978:	83 ec 18             	sub    esp,0x18
c001a97b:	68 b4 ee 01 c0       	push   0xc001eeb4
c001a980:	e8 cf fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a989:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001a990:	83 c4 1c             	add    esp,0x1c
c001a993:	c3                   	ret    

c001a994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001a994:	55                   	push   ebp
c001a995:	57                   	push   edi
c001a996:	56                   	push   esi
c001a997:	53                   	push   ebx
c001a998:	83 ec 38             	sub    esp,0x38
c001a99b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001a99f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a9a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001a9a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a9af:	68 cc ee 01 c0       	push   0xc001eecc
c001a9b4:	e8 9b fa fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001a9b9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001a9bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a9c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a9c9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001a9cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9d3:	83 c0 02             	add    eax,0x2
c001a9d6:	c1 e0 07             	shl    eax,0x7
c001a9d9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a9dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9e5:	c1 e0 07             	shl    eax,0x7
c001a9e8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001a9ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9f0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a9fa:	58                   	pop    eax
c001a9fb:	5a                   	pop    edx
c001a9fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aa00:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aa06:	e8 71 ec ff ff       	call   c001967c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aa0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	b8 01 00 00 00       	mov    eax,0x1
c001aa17:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aa1c:	0f 84 49 02 00 00    	je     c001ac6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aa22:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa2e:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aa34:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aa3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aa3e:	c1 e1 05             	shl    ecx,0x5
c001aa41:	01 c8                	add    eax,ecx
c001aa43:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa45:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001aa4b:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aa51:	89 08                	mov    DWORD PTR [eax],ecx
c001aa53:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aa59:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001aa5f:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001aa65:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001aa68:	8d 7b 40             	lea    edi,[ebx+0x40]
c001aa6b:	50                   	push   eax
c001aa6c:	68 90 00 00 00       	push   0x90
c001aa71:	6a 00                	push   0x0
c001aa73:	53                   	push   ebx
c001aa74:	e8 57 5a fe ff       	call   c00004d0 <memset>
c001aa79:	b9 0c 00 00 00       	mov    ecx,0xc
c001aa7e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001aa82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa84:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001aa8a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001aa8e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001aa94:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001aa98:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aa9c:	48                   	dec    eax
c001aa9d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001aaa2:	89 c1                	mov    ecx,eax
c001aaa4:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001aaaa:	25 00 00 c0 ff       	and    eax,0xffc00000
c001aaaf:	09 c8                	or     eax,ecx
c001aab1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001aab7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001aaba:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aac1:	66 25 00 7f          	and    ax,0x7f00
c001aac5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aac9:	66 0d 27 80          	or     ax,0x8027
c001aacd:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001aad1:	66 89 03             	mov    WORD PTR [ebx],ax
c001aad4:	89 d0                	mov    eax,edx
c001aad6:	c1 ea 18             	shr    edx,0x18
c001aad9:	c1 e8 10             	shr    eax,0x10
c001aadc:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001aadf:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001aae2:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001aae6:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001aae9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aaed:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001aaf0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aaf4:	83 c4 10             	add    esp,0x10
c001aaf7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001aafb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aaff:	31 c0                	xor    eax,eax
c001ab01:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ab07:	80 e1 88             	and    cl,0x88
c001ab0a:	74 0a                	je     c001ab16 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001ab0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab11:	74 0a                	je     c001ab1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001ab13:	40                   	inc    eax
c001ab14:	eb eb                	jmp    c001ab01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001ab16:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ab1b:	75 43                	jne    c001ab60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ab1d:	83 ec 0c             	sub    esp,0xc
c001ab20:	68 e6 ee 01 c0       	push   0xc001eee6
c001ab25:	e8 2a f9 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ab2a:	58                   	pop    eax
c001ab2b:	5a                   	pop    edx
c001ab2c:	68 fb ee 01 c0       	push   0xc001eefb
c001ab31:	ff 35 64 04 02 c0    	push   DWORD PTR ds:0xc0020464
c001ab37:	e8 fa db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001ab3c:	59                   	pop    ecx
c001ab3d:	5b                   	pop    ebx
c001ab3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab42:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ab48:	e8 c9 eb ff ff       	call   c0019716 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ab4d:	5e                   	pop    esi
c001ab4e:	5f                   	pop    edi
c001ab4f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ab53:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ab59:	e8 98 eb ff ff       	call   c00196f6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ab5e:	eb 48                	jmp    c001aba8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001ab60:	be 01 00 00 00       	mov    esi,0x1
c001ab65:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ab69:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ab6d:	d3 e6                	shl    esi,cl
c001ab6f:	c1 e7 07             	shl    edi,0x7
c001ab72:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ab78:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ab7d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ab81:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ab87:	85 c6                	test   esi,eax
c001ab89:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ab8f:	0f 84 a3 00 00 00    	je     c001ac38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ab95:	0f ba e0 1e          	bt     eax,0x1e
c001ab99:	73 1a                	jae    c001abb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ab9b:	83 ec 0c             	sub    esp,0xc
c001ab9e:	68 0d ef 01 c0       	push   0xc001ef0d
c001aba3:	e8 ac f8 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001aba8:	83 c4 10             	add    esp,0x10
c001abab:	b8 01 00 00 00       	mov    eax,0x1
c001abb0:	e9 b6 00 00 00       	jmp    c001ac6b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001abb5:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001abbb:	83 f8 0d             	cmp    eax,0xd
c001abbe:	77 0a                	ja     c001abca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001abc0:	83 ec 0c             	sub    esp,0xc
c001abc3:	68 c8 00 00 00       	push   0xc8
c001abc8:	eb 28                	jmp    c001abf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001abca:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001abd0:	83 f8 0d             	cmp    eax,0xd
c001abd3:	77 0a                	ja     c001abdf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001abd5:	83 ec 0c             	sub    esp,0xc
c001abd8:	68 58 02 00 00       	push   0x258
c001abdd:	eb 13                	jmp    c001abf2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001abdf:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001abe5:	83 f8 06             	cmp    eax,0x6
c001abe8:	77 10                	ja     c001abfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001abea:	83 ec 0c             	sub    esp,0xc
c001abed:	68 dc 05 00 00       	push   0x5dc
c001abf2:	e8 d1 89 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c001abf7:	83 c4 10             	add    esp,0x10
c001abfa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001abfe:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac01:	75 06                	jne    c001ac09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ac03:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001ac07:	74 15                	je     c001ac1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac09:	83 fb 06             	cmp    ebx,0x6
c001ac0c:	77 10                	ja     c001ac1e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001ac0e:	83 ec 0c             	sub    esp,0xc
c001ac11:	68 c4 09 00 00       	push   0x9c4
c001ac16:	e8 ad 89 ff ff       	call   c00135c8 <milliTenthSleep(unsigned int)>
c001ac1b:	83 c4 10             	add    esp,0x10
c001ac1e:	43                   	inc    ebx
c001ac1f:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ac25:	0f 85 56 ff ff ff    	jne    c001ab81 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001ac2b:	83 ec 0c             	sub    esp,0xc
c001ac2e:	68 20 ef 01 c0       	push   0xc001ef20
c001ac33:	e9 6b ff ff ff       	jmp    c001aba3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac38:	0f ba e0 1e          	bt     eax,0x1e
c001ac3c:	73 0d                	jae    c001ac4b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	68 34 ef 01 c0       	push   0xc001ef34
c001ac46:	e9 58 ff ff ff       	jmp    c001aba3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ac4b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ac50:	74 17                	je     c001ac69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ac52:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ac57:	74 10                	je     c001ac69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ac59:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ac5f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ac63:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ac67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac69:	31 c0                	xor    eax,eax
c001ac6b:	83 c4 2c             	add    esp,0x2c
c001ac6e:	5b                   	pop    ebx
c001ac6f:	5e                   	pop    esi
c001ac70:	5f                   	pop    edi
c001ac71:	5d                   	pop    ebp
c001ac72:	c3                   	ret    
c001ac73:	90                   	nop

c001ac74 <SATAPI::eject()>:
c001ac74:	57                   	push   edi
c001ac75:	b9 03 00 00 00       	mov    ecx,0x3
c001ac7a:	83 ec 18             	sub    esp,0x18
c001ac7d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ac81:	fc                   	cld    
c001ac82:	31 c0                	xor    eax,eax
c001ac84:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ac86:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ac8b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ac90:	50                   	push   eax
c001ac91:	6a 00                	push   0x0
c001ac93:	6a 00                	push   0x0
c001ac95:	6a 00                	push   0x0
c001ac97:	6a 00                	push   0x0
c001ac99:	6a 02                	push   0x2
c001ac9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ac9f:	50                   	push   eax
c001aca0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aca4:	e8 eb fc ff ff       	call   c001a994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aca9:	31 c0                	xor    eax,eax
c001acab:	83 c4 38             	add    esp,0x38
c001acae:	5f                   	pop    edi
c001acaf:	c3                   	ret    

c001acb0 <SATAPI::detectMedia()>:
c001acb0:	53                   	push   ebx
c001acb1:	83 ec 14             	sub    esp,0x14
c001acb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001acb8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001acbe:	e8 45 27 ff ff       	call   c000d408 <VCache::writeWriteBuffer()>
c001acc3:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001acc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001accd:	83 c4 18             	add    esp,0x18
c001acd0:	5b                   	pop    ebx
c001acd1:	e9 22 27 ff ff       	jmp    c000d3f8 <VCache::invalidateReadBuffer()>

c001acd6 <SATAPI::open(int, int, void*)>:
c001acd6:	56                   	push   esi
c001acd7:	53                   	push   ebx
c001acd8:	51                   	push   ecx
c001acd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001acdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ace1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aceb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001acf1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001acfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acff:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ad09:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ad0f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ad16:	e8 7a cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad1b:	89 c6                	mov    esi,eax
c001ad1d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ad23:	81 c6 00 10 00 00    	add    esi,0x1000
c001ad29:	e8 67 cd fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ad2e:	39 c6                	cmp    esi,eax
c001ad30:	74 10                	je     c001ad42 <SATAPI::open(int, int, void*)+0x6c>
c001ad32:	83 ec 0c             	sub    esp,0xc
c001ad35:	68 49 ef 01 c0       	push   0xc001ef49
c001ad3a:	e8 78 53 ff ff       	call   c00100b7 <KePanic(char const*)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	83 ec 0c             	sub    esp,0xc
c001ad45:	6a 02                	push   0x2
c001ad47:	e8 b5 e4 fe ff       	call   c0009201 <Virt::allocateKernelVirtualPages(int)>
c001ad4c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ad52:	6a 03                	push   0x3
c001ad54:	50                   	push   eax
c001ad55:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ad5b:	ff 35 10 05 02 c0    	push   DWORD PTR ds:0xc0020510
c001ad61:	e8 30 eb fe ff       	call   c0009896 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ad66:	83 c4 14             	add    esp,0x14
c001ad69:	68 74 01 00 00       	push   0x174
c001ad6e:	e8 46 ca fe ff       	call   c00077b9 <malloc>
c001ad73:	83 c4 0c             	add    esp,0xc
c001ad76:	89 c6                	mov    esi,eax
c001ad78:	6a 00                	push   0x0
c001ad7a:	68 ff ff ff 7f       	push   0x7fffffff
c001ad7f:	6a 00                	push   0x0
c001ad81:	6a 00                	push   0x0
c001ad83:	53                   	push   ebx
c001ad84:	68 5f ef 01 c0       	push   0xc001ef5f
c001ad89:	50                   	push   eax
c001ad8a:	e8 7f 1b ff ff       	call   c000c90e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ad8f:	83 c4 14             	add    esp,0x14
c001ad92:	56                   	push   esi
c001ad93:	e8 2c 1c ff ff       	call   c000c9c4 <LogicalDisk::assignDriveLetter()>
c001ad98:	5a                   	pop    edx
c001ad99:	0f be c0             	movsx  eax,al
c001ad9c:	59                   	pop    ecx
c001ad9d:	50                   	push   eax
c001ad9e:	68 ac ed 01 c0       	push   0xc001edac
c001ada3:	e8 ac f6 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001ada8:	58                   	pop    eax
c001ada9:	5a                   	pop    edx
c001adaa:	56                   	push   esi
c001adab:	53                   	push   ebx
c001adac:	e8 e3 0a ff ff       	call   c000b894 <Device::addChild(Device*)>
c001adb1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001adb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adba:	e8 0b 0f ff ff       	call   c000bcca <PhysicalDisk::startCache()>
c001adbf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001adc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adc9:	e8 e2 fe ff ff       	call   c001acb0 <SATAPI::detectMedia()>
c001adce:	83 c4 14             	add    esp,0x14
c001add1:	31 c0                	xor    eax,eax
c001add3:	5b                   	pop    ebx
c001add4:	5e                   	pop    esi
c001add5:	c3                   	ret    

c001add6 <SATAPI::read(unsigned long long, int, void*)>:
c001add6:	57                   	push   edi
c001add7:	56                   	push   esi
c001add8:	53                   	push   ebx
c001add9:	83 ec 3c             	sub    esp,0x3c
c001addc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ade0:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ade4:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ade8:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001adec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adf0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001adf4:	68 6d ef 01 c0       	push   0xc001ef6d
c001adf9:	e8 56 f6 fe ff       	call   c000a454 <Dbg::kprintf(char const*, ...)>
c001adfe:	83 c4 10             	add    esp,0x10
c001ae01:	83 fe 04             	cmp    esi,0x4
c001ae04:	7e 10                	jle    c001ae16 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	68 7e ef 01 c0       	push   0xc001ef7e
c001ae0e:	e8 a4 52 ff ff       	call   c00100b7 <KePanic(char const*)>
c001ae13:	83 c4 10             	add    esp,0x10
c001ae16:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ae1c:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ae22:	51                   	push   ecx
c001ae23:	50                   	push   eax
c001ae24:	83 c0 02             	add    eax,0x2
c001ae27:	c1 e0 07             	shl    eax,0x7
c001ae2a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ae30:	50                   	push   eax
c001ae31:	52                   	push   edx
c001ae32:	e8 09 e9 ff ff       	call   c0019740 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ae37:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ae3b:	b9 03 00 00 00       	mov    ecx,0x3
c001ae40:	fc                   	cld    
c001ae41:	31 c0                	xor    eax,eax
c001ae43:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae45:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ae4a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ae4f:	83 c4 0c             	add    esp,0xc
c001ae52:	6a 00                	push   0x0
c001ae54:	6a 00                	push   0x0
c001ae56:	6a 00                	push   0x0
c001ae58:	6a 00                	push   0x0
c001ae5a:	6a 02                	push   0x2
c001ae5c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ae60:	50                   	push   eax
c001ae61:	53                   	push   ebx
c001ae62:	e8 2d fb ff ff       	call   c001a994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ae67:	83 c4 20             	add    esp,0x20
c001ae6a:	85 c0                	test   eax,eax
c001ae6c:	75 44                	jne    c001aeb2 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001ae6e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ae72:	b9 03 00 00 00       	mov    ecx,0x3
c001ae77:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae7d:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ae82:	0f c8                	bswap  eax
c001ae84:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ae88:	89 f0                	mov    eax,esi
c001ae8a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ae8e:	50                   	push   eax
c001ae8f:	56                   	push   esi
c001ae90:	c1 e6 0b             	shl    esi,0xb
c001ae93:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ae97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae9f:	56                   	push   esi
c001aea0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aea4:	50                   	push   eax
c001aea5:	53                   	push   ebx
c001aea6:	e8 e9 fa ff ff       	call   c001a994 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001aeab:	83 c4 20             	add    esp,0x20
c001aeae:	85 c0                	test   eax,eax
c001aeb0:	74 14                	je     c001aec6 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001aeb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aeb6:	83 ec 0c             	sub    esp,0xc
c001aeb9:	53                   	push   ebx
c001aeba:	e8 f1 fd ff ff       	call   c001acb0 <SATAPI::detectMedia()>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aec6:	83 c4 30             	add    esp,0x30
c001aec9:	5b                   	pop    ebx
c001aeca:	5e                   	pop    esi
c001aecb:	5f                   	pop    edi
c001aecc:	c3                   	ret    
c001aecd:	90                   	nop

c001aece <IOAPIC::close(int, int, void*)>:
c001aece:	b8 00 00 00 00       	mov    eax,0x0
c001aed3:	c3                   	ret    

c001aed4 <apicGetBase()>:
c001aed4:	55                   	push   ebp
c001aed5:	89 e5                	mov    ebp,esp
c001aed7:	83 ec 18             	sub    esp,0x18
c001aeda:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c001aedf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001aee5:	83 e0 08             	and    eax,0x8
c001aee8:	84 c0                	test   al,al
c001aeea:	75 07                	jne    c001aef3 <apicGetBase()+0x1f>
c001aeec:	b8 00 00 00 00       	mov    eax,0x0
c001aef1:	eb 21                	jmp    c001af14 <apicGetBase()+0x40>
c001aef3:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c001aef8:	83 ec 08             	sub    esp,0x8
c001aefb:	6a 1b                	push   0x1b
c001aefd:	50                   	push   eax
c001aefe:	e8 ef be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001af09:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001af0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001af0f:	25 00 00 ff ff       	and    eax,0xffff0000
c001af14:	c9                   	leave  
c001af15:	c3                   	ret    

c001af16 <IOAPIC::IOAPIC()>:
c001af16:	83 ec 0c             	sub    esp,0xc
c001af19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af1d:	83 ec 08             	sub    esp,0x8
c001af20:	68 e0 ef 01 c0       	push   0xc001efe0
c001af25:	50                   	push   eax
c001af26:	e8 01 0b ff ff       	call   c000ba2c <Device::Device(char const*)>
c001af2b:	83 c4 10             	add    esp,0x10
c001af2e:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c001af33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af37:	89 10                	mov    DWORD PTR [eax],edx
c001af39:	90                   	nop
c001af3a:	83 c4 0c             	add    esp,0xc
c001af3d:	c3                   	ret    

c001af3e <apicOpen()>:
c001af3e:	55                   	push   ebp
c001af3f:	89 e5                	mov    ebp,esp
c001af41:	53                   	push   ebx
c001af42:	83 ec 34             	sub    esp,0x34
c001af45:	a0 00 41 02 c0       	mov    al,ds:0xc0024100
c001af4a:	83 f0 01             	xor    eax,0x1
c001af4d:	84 c0                	test   al,al
c001af4f:	0f 84 9d 00 00 00    	je     c001aff2 <apicOpen()+0xb4>
c001af55:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001af59:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c001af5e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001af61:	0f 83 84 00 00 00    	jae    c001afeb <apicOpen()+0xad>
c001af67:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001af6e:	83 ec 0c             	sub    esp,0xc
c001af71:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001af74:	e8 40 c8 fe ff       	call   c00077b9 <malloc>
c001af79:	83 c4 10             	add    esp,0x10
c001af7c:	89 c3                	mov    ebx,eax
c001af7e:	83 ec 0c             	sub    esp,0xc
c001af81:	53                   	push   ebx
c001af82:	e8 8f ff ff ff       	call   c001af16 <IOAPIC::IOAPIC()>
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001af8d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001af90:	25 ff 00 00 00       	and    eax,0xff
c001af95:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001af98:	89 14 85 e0 40 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbf20],edx
c001af9f:	a1 c0 40 02 c0       	mov    eax,ds:0xc00240c0
c001afa4:	40                   	inc    eax
c001afa5:	a3 c0 40 02 c0       	mov    ds:0xc00240c0,eax
c001afaa:	a1 18 04 02 c0       	mov    eax,ds:0xc0020418
c001afaf:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001afb5:	83 ec 08             	sub    esp,0x8
c001afb8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001afbb:	50                   	push   eax
c001afbc:	e8 d3 08 ff ff       	call   c000b894 <Device::addChild(Device*)>
c001afc1:	83 c4 10             	add    esp,0x10
c001afc4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001afc7:	8b 00                	mov    eax,DWORD PTR [eax]
c001afc9:	83 c0 08             	add    eax,0x8
c001afcc:	8b 10                	mov    edx,DWORD PTR [eax]
c001afce:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001afd1:	25 ff 00 00 00       	and    eax,0xff
c001afd6:	6a 00                	push   0x0
c001afd8:	6a 00                	push   0x0
c001afda:	50                   	push   eax
c001afdb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001afde:	ff d2                	call   edx
c001afe0:	83 c4 10             	add    esp,0x10
c001afe3:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001afe6:	e9 6e ff ff ff       	jmp    c001af59 <apicOpen()+0x1b>
c001afeb:	c6 05 00 41 02 c0 01 	mov    BYTE PTR ds:0xc0024100,0x1
c001aff2:	e8 dd fe ff ff       	call   c001aed4 <apicGetBase()>
c001aff7:	05 f0 00 00 00       	add    eax,0xf0
c001affc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001afff:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b002:	8b 00                	mov    eax,DWORD PTR [eax]
c001b004:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b007:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b00e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b015:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b018:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b01b:	89 10                	mov    DWORD PTR [eax],edx
c001b01d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b024:	a1 30 2c 02 c0       	mov    eax,ds:0xc0022c30
c001b029:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b02c:	7d 70                	jge    c001b09e <apicOpen()+0x160>
c001b02e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b031:	8b 04 85 40 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3c0]
c001b038:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b03b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b03e:	8b 04 85 40 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3c0]
c001b045:	c1 e8 08             	shr    eax,0x8
c001b048:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b04c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b04f:	8b 04 85 40 2c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd3c0]
c001b056:	c1 e8 18             	shr    eax,0x18
c001b059:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b05c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b060:	75 37                	jne    c001b099 <apicOpen()+0x15b>
c001b062:	e8 6d fe ff ff       	call   c001aed4 <apicGetBase()>
c001b067:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b06b:	75 07                	jne    c001b074 <apicOpen()+0x136>
c001b06d:	ba 60 03 00 00       	mov    edx,0x360
c001b072:	eb 05                	jmp    c001b079 <apicOpen()+0x13b>
c001b074:	ba 50 03 00 00       	mov    edx,0x350
c001b079:	01 d0                	add    eax,edx
c001b07b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b07e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b081:	8b 00                	mov    eax,DWORD PTR [eax]
c001b083:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b086:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b08d:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b091:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b094:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b097:	89 10                	mov    DWORD PTR [eax],edx
c001b099:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b09c:	eb 86                	jmp    c001b024 <apicOpen()+0xe6>
c001b09e:	90                   	nop
c001b09f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b0a2:	c9                   	leave  
c001b0a3:	c3                   	ret    

c001b0a4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b0a4:	55                   	push   ebp
c001b0a5:	89 e5                	mov    ebp,esp
c001b0a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b0b0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b0b3:	72 1d                	jb     c001b0d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0b8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b0be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0c1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b0c7:	01 d0                	add    eax,edx
c001b0c9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b0cc:	73 04                	jae    c001b0d2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b0ce:	b0 01                	mov    al,0x1
c001b0d0:	eb 02                	jmp    c001b0d4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b0d2:	b0 00                	mov    al,0x0
c001b0d4:	5d                   	pop    ebp
c001b0d5:	c3                   	ret    

c001b0d6 <IOAPIC::read(int)>:
c001b0d6:	55                   	push   ebp
c001b0d7:	89 e5                	mov    ebp,esp
c001b0d9:	83 ec 10             	sub    esp,0x10
c001b0dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b0e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b0eb:	31 d2                	xor    edx,edx
c001b0ed:	88 c2                	mov    dl,al
c001b0ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b0f2:	89 10                	mov    DWORD PTR [eax],edx
c001b0f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b0f7:	83 c0 10             	add    eax,0x10
c001b0fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0fc:	c9                   	leave  
c001b0fd:	c3                   	ret    

c001b0fe <IOAPIC::open(int, int, void*)>:
c001b0fe:	55                   	push   ebp
c001b0ff:	89 e5                	mov    ebp,esp
c001b101:	57                   	push   edi
c001b102:	56                   	push   esi
c001b103:	53                   	push   ebx
c001b104:	83 ec 04             	sub    esp,0x4
c001b107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b10a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b10d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b116:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b11c:	8b 14 85 20 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd2e0]
c001b123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b126:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b12c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b12f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b135:	8b 14 85 a0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd260]
c001b13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b13f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b148:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b14e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b151:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b157:	89 c6                	mov    esi,eax
c001b159:	81 e6 ff 00 00 00    	and    esi,0xff
c001b15f:	89 d0                	mov    eax,edx
c001b161:	ba 00 00 00 00       	mov    edx,0x0
c001b166:	89 c7                	mov    edi,eax
c001b168:	83 e7 ff             	and    edi,0xffffffff
c001b16b:	89 f9                	mov    ecx,edi
c001b16d:	89 d0                	mov    eax,edx
c001b16f:	25 ff 00 00 00       	and    eax,0xff
c001b174:	89 c3                	mov    ebx,eax
c001b176:	89 c8                	mov    eax,ecx
c001b178:	89 da                	mov    edx,ebx
c001b17a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b17d:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b180:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b184:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b188:	83 e0 00             	and    eax,0x0
c001b18b:	09 d0                	or     eax,edx
c001b18d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b194:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b19a:	8d 50 01             	lea    edx,[eax+0x1]
c001b19d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b1a0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b1a6:	31 d2                	xor    edx,edx
c001b1a8:	88 c2                	mov    dl,al
c001b1aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1ad:	83 c2 08             	add    edx,0x8
c001b1b0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b1b4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b1ba:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b1c0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b1c4:	6a 01                	push   0x1
c001b1c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b1c9:	e8 08 ff ff ff       	call   c001b0d6 <IOAPIC::read(int)>
c001b1ce:	83 c4 08             	add    esp,0x8
c001b1d1:	c1 f8 10             	sar    eax,0x10
c001b1d4:	25 ff 00 00 00       	and    eax,0xff
c001b1d9:	8d 50 01             	lea    edx,[eax+0x1]
c001b1dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1df:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b1e5:	b8 00 00 00 00       	mov    eax,0x0
c001b1ea:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b1ed:	5b                   	pop    ebx
c001b1ee:	5e                   	pop    esi
c001b1ef:	5f                   	pop    edi
c001b1f0:	5d                   	pop    ebp
c001b1f1:	c3                   	ret    

c001b1f2 <IOAPIC::write(int, int)>:
c001b1f2:	55                   	push   ebp
c001b1f3:	89 e5                	mov    ebp,esp
c001b1f5:	83 ec 10             	sub    esp,0x10
c001b1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1fb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b201:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b204:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b207:	31 d2                	xor    edx,edx
c001b209:	88 c2                	mov    dl,al
c001b20b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b20e:	89 10                	mov    DWORD PTR [eax],edx
c001b210:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b213:	8d 50 10             	lea    edx,[eax+0x10]
c001b216:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b219:	89 02                	mov    DWORD PTR [edx],eax
c001b21b:	90                   	nop
c001b21c:	c9                   	leave  
c001b21d:	c3                   	ret    

c001b21e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b21e:	55                   	push   ebp
c001b21f:	89 e5                	mov    ebp,esp
c001b221:	53                   	push   ebx
c001b222:	83 ec 2c             	sub    esp,0x2c
c001b225:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b228:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b22b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b22e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b231:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b234:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b237:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b23a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b23d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b240:	88 d8                	mov    al,bl
c001b242:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b245:	88 c8                	mov    al,cl
c001b247:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b24a:	88 d0                	mov    al,dl
c001b24c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b24f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b252:	25 ff 00 00 00       	and    eax,0xff
c001b257:	83 c0 08             	add    eax,0x8
c001b25a:	01 c0                	add    eax,eax
c001b25c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b25f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b262:	25 ff 00 00 00       	and    eax,0xff
c001b267:	83 c0 08             	add    eax,0x8
c001b26a:	01 c0                	add    eax,eax
c001b26c:	40                   	inc    eax
c001b26d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b270:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b273:	50                   	push   eax
c001b274:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b277:	e8 5a fe ff ff       	call   c001b0d6 <IOAPIC::read(int)>
c001b27c:	83 c4 08             	add    esp,0x8
c001b27f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b282:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b289:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b28c:	c1 e0 18             	shl    eax,0x18
c001b28f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b292:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b295:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b298:	52                   	push   edx
c001b299:	50                   	push   eax
c001b29a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b29d:	e8 50 ff ff ff       	call   c001b1f2 <IOAPIC::write(int, int)>
c001b2a2:	83 c4 0c             	add    esp,0xc
c001b2a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2a8:	50                   	push   eax
c001b2a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2ac:	e8 25 fe ff ff       	call   c001b0d6 <IOAPIC::read(int)>
c001b2b1:	83 c4 08             	add    esp,0x8
c001b2b4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b2b7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b2be:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b2c5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b2cc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b2d0:	74 09                	je     c001b2db <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b2d2:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b2d9:	eb 07                	jmp    c001b2e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b2db:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b2e2:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b2e6:	74 09                	je     c001b2f1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b2e8:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b2ef:	eb 07                	jmp    c001b2f8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b2f1:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b2f8:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b2ff:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b302:	25 ff 00 00 00       	and    eax,0xff
c001b307:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b30a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b30d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b310:	52                   	push   edx
c001b311:	50                   	push   eax
c001b312:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b315:	e8 d8 fe ff ff       	call   c001b1f2 <IOAPIC::write(int, int)>
c001b31a:	83 c4 0c             	add    esp,0xc
c001b31d:	90                   	nop
c001b31e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b321:	c9                   	leave  
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <APICTimer::close(int, int, void*)>:
c001b324:	b8 00 00 00 00       	mov    eax,0x0
c001b329:	c3                   	ret    
c001b32a:	66 90                	xchg   ax,ax

c001b32c <apicTimerHandler(regs*, void*)>:
c001b32c:	83 ec 0c             	sub    esp,0xc
c001b32f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b333:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b335:	b8 10 27 00 00       	mov    eax,0x2710
c001b33a:	ba 00 00 00 00       	mov    edx,0x0
c001b33f:	f7 f1                	div    ecx
c001b341:	83 ec 0c             	sub    esp,0xc
c001b344:	50                   	push   eax
c001b345:	e8 de 1d ff ff       	call   c000d128 <timerHandler(unsigned int)>
c001b34a:	83 c4 10             	add    esp,0x10
c001b34d:	90                   	nop
c001b34e:	83 c4 0c             	add    esp,0xc
c001b351:	c3                   	ret    
c001b352:	66 90                	xchg   ax,ax

c001b354 <APICTimer::open(int, int, void*)>:
c001b354:	83 ec 0c             	sub    esp,0xc
c001b357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b35b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b35d:	83 c0 24             	add    eax,0x24
c001b360:	8b 00                	mov    eax,DWORD PTR [eax]
c001b362:	83 ec 08             	sub    esp,0x8
c001b365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b36d:	ff d0                	call   eax
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b376:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b37a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b388:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b38e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b392:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b398:	83 ec 0c             	sub    esp,0xc
c001b39b:	51                   	push   ecx
c001b39c:	6a 01                	push   0x1
c001b39e:	68 2c b3 01 c0       	push   0xc001b32c
c001b3a3:	52                   	push   edx
c001b3a4:	50                   	push   eax
c001b3a5:	e8 96 04 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b3aa:	83 c4 20             	add    esp,0x20
c001b3ad:	89 c2                	mov    edx,eax
c001b3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b3b9:	b8 00 00 00 00       	mov    eax,0x0
c001b3be:	83 c4 0c             	add    esp,0xc
c001b3c1:	c3                   	ret    
c001b3c2:	66 90                	xchg   ax,ax

c001b3c4 <APICTimer::write(int)>:
c001b3c4:	83 ec 0c             	sub    esp,0xc
c001b3c7:	83 ec 0c             	sub    esp,0xc
c001b3ca:	68 14 f0 01 c0       	push   0xc001f014
c001b3cf:	e8 e3 4c ff ff       	call   c00100b7 <KePanic(char const*)>
c001b3d4:	83 c4 10             	add    esp,0x10
c001b3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b3e5:	90                   	nop
c001b3e6:	83 c4 0c             	add    esp,0xc
c001b3e9:	c3                   	ret    
c001b3ea:	66 90                	xchg   ax,ax

c001b3ec <APICTimer::APICTimer()>:
c001b3ec:	83 ec 0c             	sub    esp,0xc
c001b3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f3:	83 ec 08             	sub    esp,0x8
c001b3f6:	68 24 f0 01 c0       	push   0xc001f024
c001b3fb:	50                   	push   eax
c001b3fc:	e8 5b 1c ff ff       	call   c000d05c <Timer::Timer(char const*)>
c001b401:	83 c4 10             	add    esp,0x10
c001b404:	ba 38 f0 01 c0       	mov    edx,0xc001f038
c001b409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b40d:	89 10                	mov    DWORD PTR [eax],edx
c001b40f:	90                   	nop
c001b410:	83 c4 0c             	add    esp,0xc
c001b413:	c3                   	ret    

c001b414 <PIT::write(int)>:
c001b414:	83 ec 10             	sub    esp,0x10
c001b417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b41b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b41f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b425:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b429:	a3 04 41 02 c0       	mov    ds:0xc0024104,eax
c001b42e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b433:	99                   	cdq    
c001b434:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b43c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b443:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b448:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b44c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b451:	ee                   	out    dx,al
c001b452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b456:	25 ff 00 00 00       	and    eax,0xff
c001b45b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b462:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b466:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b46a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b46f:	ee                   	out    dx,al
c001b470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b474:	c1 f8 08             	sar    eax,0x8
c001b477:	25 ff 00 00 00       	and    eax,0xff
c001b47c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b483:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b487:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b48b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b490:	ee                   	out    dx,al
c001b491:	90                   	nop
c001b492:	83 c4 10             	add    esp,0x10
c001b495:	c3                   	ret    
c001b496:	66 90                	xchg   ax,ax

c001b498 <pitHandler(regs*, void*)>:
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	8b 0d 04 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024104
c001b4a1:	b8 10 27 00 00       	mov    eax,0x2710
c001b4a6:	99                   	cdq    
c001b4a7:	f7 f9                	idiv   ecx
c001b4a9:	83 ec 0c             	sub    esp,0xc
c001b4ac:	50                   	push   eax
c001b4ad:	e8 76 1c ff ff       	call   c000d128 <timerHandler(unsigned int)>
c001b4b2:	83 c4 10             	add    esp,0x10
c001b4b5:	90                   	nop
c001b4b6:	83 c4 0c             	add    esp,0xc
c001b4b9:	c3                   	ret    
c001b4ba:	66 90                	xchg   ax,ax

c001b4bc <PIT::open(int, int, void*)>:
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4c5:	83 c0 24             	add    eax,0x24
c001b4c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4ca:	83 ec 08             	sub    esp,0x8
c001b4cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4d5:	ff d0                	call   eax
c001b4d7:	83 c4 10             	add    esp,0x10
c001b4da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4de:	83 ec 0c             	sub    esp,0xc
c001b4e1:	6a 00                	push   0x0
c001b4e3:	6a 01                	push   0x1
c001b4e5:	68 98 b4 01 c0       	push   0xc001b498
c001b4ea:	6a 00                	push   0x0
c001b4ec:	50                   	push   eax
c001b4ed:	e8 4e 03 ff ff       	call   c000b840 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b4f2:	83 c4 20             	add    esp,0x20
c001b4f5:	89 c2                	mov    edx,eax
c001b4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b501:	b8 00 00 00 00       	mov    eax,0x0
c001b506:	83 c4 0c             	add    esp,0xc
c001b509:	c3                   	ret    
c001b50a:	66 90                	xchg   ax,ax

c001b50c <PIT::close(int, int, void*)>:
c001b50c:	83 ec 0c             	sub    esp,0xc
c001b50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b513:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b521:	6a 01                	push   0x1
c001b523:	68 98 b4 01 c0       	push   0xc001b498
c001b528:	6a 00                	push   0x0
c001b52a:	50                   	push   eax
c001b52b:	e8 46 03 ff ff       	call   c000b876 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	b8 00 00 00 00       	mov    eax,0x0
c001b538:	83 c4 0c             	add    esp,0xc
c001b53b:	c3                   	ret    

c001b53c <PIT::PIT()>:
c001b53c:	83 ec 0c             	sub    esp,0xc
c001b53f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b543:	83 ec 08             	sub    esp,0x8
c001b546:	68 60 f0 01 c0       	push   0xc001f060
c001b54b:	50                   	push   eax
c001b54c:	e8 0b 1b ff ff       	call   c000d05c <Timer::Timer(char const*)>
c001b551:	83 c4 10             	add    esp,0x10
c001b554:	ba 88 f0 01 c0       	mov    edx,0xc001f088
c001b559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55d:	89 10                	mov    DWORD PTR [eax],edx
c001b55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b563:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b569:	31 d2                	xor    edx,edx
c001b56b:	88 c2                	mov    dl,al
c001b56d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b571:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b582:	31 d2                	xor    edx,edx
c001b584:	88 c2                	mov    dl,al
c001b586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b593:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b599:	8d 50 01             	lea    edx,[eax+0x1]
c001b59c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b5a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b5a6:	31 d2                	xor    edx,edx
c001b5a8:	88 c2                	mov    dl,al
c001b5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ae:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b5b2:	83 e1 3f             	and    ecx,0x3f
c001b5b5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b5b9:	90                   	nop
c001b5ba:	83 c4 0c             	add    esp,0xc
c001b5bd:	c3                   	ret    
c001b5be:	66 90                	xchg   ax,ax

c001b5c0 <avxDetect>:
c001b5c0:	b8 01 00 00 00       	mov    eax,0x1
c001b5c5:	0f a2                	cpuid  
c001b5c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b5cd:	74 15                	je     c001b5e4 <avxDetect.noAVX>
c001b5cf:	b8 01 00 00 00       	mov    eax,0x1
c001b5d4:	0f a2                	cpuid  
c001b5d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b5dc:	74 06                	je     c001b5e4 <avxDetect.noAVX>
c001b5de:	b8 01 00 00 00       	mov    eax,0x1
c001b5e3:	c3                   	ret    

c001b5e4 <avxDetect.noAVX>:
c001b5e4:	b8 00 00 00 00       	mov    eax,0x0
c001b5e9:	c3                   	ret    

c001b5ea <avxSave>:
c001b5ea:	53                   	push   ebx
c001b5eb:	52                   	push   edx
c001b5ec:	31 c0                	xor    eax,eax
c001b5ee:	48                   	dec    eax
c001b5ef:	89 c2                	mov    edx,eax
c001b5f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b5f5:	0f ae 23             	xsave  [ebx]
c001b5f8:	5a                   	pop    edx
c001b5f9:	5b                   	pop    ebx
c001b5fa:	c3                   	ret    

c001b5fb <avxLoad>:
c001b5fb:	53                   	push   ebx
c001b5fc:	52                   	push   edx
c001b5fd:	31 c0                	xor    eax,eax
c001b5ff:	48                   	dec    eax
c001b600:	89 c2                	mov    edx,eax
c001b602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b606:	0f ae 2b             	xrstor [ebx]
c001b609:	5a                   	pop    edx
c001b60a:	5b                   	pop    ebx
c001b60b:	c3                   	ret    

c001b60c <avxInit>:
c001b60c:	e8 57 02 00 00       	call   c001b868 <sseInit>
c001b611:	50                   	push   eax
c001b612:	51                   	push   ecx
c001b613:	0f 20 e0             	mov    eax,cr4
c001b616:	0d 00 00 04 00       	or     eax,0x40000
c001b61b:	0f 22 e0             	mov    cr4,eax
c001b61e:	31 c9                	xor    ecx,ecx
c001b620:	0f 01 d0             	xgetbv 
c001b623:	0d 07 00 00 00       	or     eax,0x7
c001b628:	0f 01 d1             	xsetbv 
c001b62b:	59                   	pop    ecx
c001b62c:	58                   	pop    eax
c001b62d:	c3                   	ret    

c001b62e <avxClose>:
c001b62e:	c3                   	ret    

c001b62f <wouldSheSayYes>:
c001b62f:	c3                   	ret    
c001b630:	49                   	dec    ecx
c001b631:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b635:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b639:	75 20                	jne    c001b65b <isr0+0xb>
c001b63b:	4e                   	dec    esi
c001b63c:	79 61                	jns    c001b69f <isr7+0x3>
c001b63e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b643:	66 90                	xchg   ax,ax
c001b645:	66 90                	xchg   ax,ax
c001b647:	66 90                	xchg   ax,ax
c001b649:	66 90                	xchg   ax,ax
c001b64b:	66 90                	xchg   ax,ax
c001b64d:	66 90                	xchg   ax,ax
c001b64f:	90                   	nop

c001b650 <isr0>:
c001b650:	fa                   	cli    
c001b651:	68 00 00 00 00       	push   0x0
c001b656:	68 00 00 00 00       	push   0x0
c001b65b:	e9 44 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b660 <isr1>:
c001b660:	fa                   	cli    
c001b661:	6a 00                	push   0x0
c001b663:	6a 01                	push   0x1
c001b665:	e9 3a 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b66a <isr2>:
c001b66a:	fa                   	cli    
c001b66b:	6a 00                	push   0x0
c001b66d:	6a 02                	push   0x2
c001b66f:	e9 30 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b674 <isr3>:
c001b674:	fa                   	cli    
c001b675:	6a 00                	push   0x0
c001b677:	6a 03                	push   0x3
c001b679:	e9 26 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b67e <isr4>:
c001b67e:	fa                   	cli    
c001b67f:	6a 00                	push   0x0
c001b681:	6a 04                	push   0x4
c001b683:	e9 1c 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b688 <isr5>:
c001b688:	fa                   	cli    
c001b689:	6a 00                	push   0x0
c001b68b:	6a 05                	push   0x5
c001b68d:	e9 12 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b692 <isr6>:
c001b692:	fa                   	cli    
c001b693:	6a 00                	push   0x0
c001b695:	6a 06                	push   0x6
c001b697:	e9 08 01 00 00       	jmp    c001b7a4 <int_common_stub>

c001b69c <isr7>:
c001b69c:	fa                   	cli    
c001b69d:	6a 00                	push   0x0
c001b69f:	6a 07                	push   0x7
c001b6a1:	e9 fe 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6a6 <isr8>:
c001b6a6:	fa                   	cli    
c001b6a7:	6a 08                	push   0x8
c001b6a9:	e9 f6 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6ae <isr9>:
c001b6ae:	fa                   	cli    
c001b6af:	6a 00                	push   0x0
c001b6b1:	6a 09                	push   0x9
c001b6b3:	e9 ec 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6b8 <isr10>:
c001b6b8:	fa                   	cli    
c001b6b9:	6a 0a                	push   0xa
c001b6bb:	e9 e4 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6c0 <isr11>:
c001b6c0:	fa                   	cli    
c001b6c1:	6a 0b                	push   0xb
c001b6c3:	e9 dc 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6c8 <isr12>:
c001b6c8:	fa                   	cli    
c001b6c9:	6a 0c                	push   0xc
c001b6cb:	e9 d4 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6d0 <isr13>:
c001b6d0:	fa                   	cli    
c001b6d1:	6a 0d                	push   0xd
c001b6d3:	e9 cc 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6d8 <isr14>:
c001b6d8:	fa                   	cli    
c001b6d9:	6a 0e                	push   0xe
c001b6db:	e9 c4 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6e0 <isr15>:
c001b6e0:	fa                   	cli    
c001b6e1:	6a 00                	push   0x0
c001b6e3:	6a 0f                	push   0xf
c001b6e5:	e9 ba 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6ea <isr16>:
c001b6ea:	fa                   	cli    
c001b6eb:	6a 00                	push   0x0
c001b6ed:	6a 10                	push   0x10
c001b6ef:	e9 b0 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6f4 <isr17>:
c001b6f4:	fa                   	cli    
c001b6f5:	6a 00                	push   0x0
c001b6f7:	6a 11                	push   0x11
c001b6f9:	e9 a6 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b6fe <isr18>:
c001b6fe:	fa                   	cli    
c001b6ff:	6a 00                	push   0x0
c001b701:	6a 12                	push   0x12
c001b703:	e9 9c 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b708 <irq3>:
c001b708:	fa                   	cli    
c001b709:	6a 00                	push   0x0
c001b70b:	6a 23                	push   0x23
c001b70d:	e9 92 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b712 <irq4>:
c001b712:	fa                   	cli    
c001b713:	6a 00                	push   0x0
c001b715:	6a 24                	push   0x24
c001b717:	e9 88 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b71c <irq5>:
c001b71c:	fa                   	cli    
c001b71d:	6a 00                	push   0x0
c001b71f:	6a 25                	push   0x25
c001b721:	e9 7e 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b726 <irq6>:
c001b726:	fa                   	cli    
c001b727:	6a 00                	push   0x0
c001b729:	6a 26                	push   0x26
c001b72b:	e9 74 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b730 <irq7>:
c001b730:	fa                   	cli    
c001b731:	6a 00                	push   0x0
c001b733:	6a 27                	push   0x27
c001b735:	e9 6a 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b73a <irq8>:
c001b73a:	fa                   	cli    
c001b73b:	6a 00                	push   0x0
c001b73d:	6a 28                	push   0x28
c001b73f:	e9 60 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b744 <irq9>:
c001b744:	fa                   	cli    
c001b745:	6a 00                	push   0x0
c001b747:	6a 29                	push   0x29
c001b749:	e9 56 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b74e <irq10>:
c001b74e:	fa                   	cli    
c001b74f:	6a 00                	push   0x0
c001b751:	6a 2a                	push   0x2a
c001b753:	e9 4c 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b758 <irq11>:
c001b758:	fa                   	cli    
c001b759:	6a 00                	push   0x0
c001b75b:	6a 2b                	push   0x2b
c001b75d:	e9 42 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b762 <irq12>:
c001b762:	fa                   	cli    
c001b763:	6a 00                	push   0x0
c001b765:	6a 2c                	push   0x2c
c001b767:	e9 38 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b76c <irq13>:
c001b76c:	fa                   	cli    
c001b76d:	6a 00                	push   0x0
c001b76f:	6a 2d                	push   0x2d
c001b771:	e9 2e 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b776 <irq14>:
c001b776:	fa                   	cli    
c001b777:	6a 00                	push   0x0
c001b779:	6a 2e                	push   0x2e
c001b77b:	e9 24 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b780 <irq15>:
c001b780:	fa                   	cli    
c001b781:	6a 00                	push   0x0
c001b783:	6a 2f                	push   0x2f
c001b785:	e9 1a 00 00 00       	jmp    c001b7a4 <int_common_stub>

c001b78a <irq1>:
c001b78a:	fa                   	cli    
c001b78b:	6a 00                	push   0x0
c001b78d:	6a 21                	push   0x21
c001b78f:	eb 13                	jmp    c001b7a4 <int_common_stub>

c001b791 <irq2>:
c001b791:	fa                   	cli    
c001b792:	6a 00                	push   0x0
c001b794:	6a 22                	push   0x22
c001b796:	eb 0c                	jmp    c001b7a4 <int_common_stub>

c001b798 <isr96>:
c001b798:	6a 00                	push   0x0
c001b79a:	6a 60                	push   0x60
c001b79c:	fb                   	sti    
c001b79d:	eb 05                	jmp    c001b7a4 <int_common_stub>

c001b79f <irq0>:
c001b79f:	fa                   	cli    
c001b7a0:	6a 00                	push   0x0
c001b7a2:	6a 20                	push   0x20

c001b7a4 <int_common_stub>:
c001b7a4:	60                   	pusha  
c001b7a5:	1e                   	push   ds
c001b7a6:	06                   	push   es
c001b7a7:	0f a0                	push   fs
c001b7a9:	0f a8                	push   gs
c001b7ab:	66 b8 10 00          	mov    ax,0x10
c001b7af:	66 8e d8             	mov    ds,ax
c001b7b2:	66 8e c0             	mov    es,ax
c001b7b5:	66 8e e0             	mov    fs,ax
c001b7b8:	66 8e e8             	mov    gs,ax
c001b7bb:	54                   	push   esp
c001b7bc:	fc                   	cld    
c001b7bd:	e8 7e 05 ff ff       	call   c000bd40 <int_handler>
c001b7c2:	81 c4 04 00 00 00    	add    esp,0x4
c001b7c8:	0f a9                	pop    gs
c001b7ca:	0f a1                	pop    fs
c001b7cc:	07                   	pop    es
c001b7cd:	1f                   	pop    ds
c001b7ce:	61                   	popa   
c001b7cf:	81 c4 08 00 00 00    	add    esp,0x8
c001b7d5:	cf                   	iret   

c001b7d6 <irq16>:
c001b7d6:	fa                   	cli    
c001b7d7:	6a 00                	push   0x0
c001b7d9:	6a 30                	push   0x30
c001b7db:	e9 c4 ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b7e0 <irq17>:
c001b7e0:	fa                   	cli    
c001b7e1:	6a 00                	push   0x0
c001b7e3:	6a 31                	push   0x31
c001b7e5:	e9 ba ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b7ea <irq18>:
c001b7ea:	fa                   	cli    
c001b7eb:	6a 00                	push   0x0
c001b7ed:	6a 32                	push   0x32
c001b7ef:	e9 b0 ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b7f4 <irq19>:
c001b7f4:	fa                   	cli    
c001b7f5:	6a 00                	push   0x0
c001b7f7:	6a 33                	push   0x33
c001b7f9:	e9 a6 ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b7fe <irq20>:
c001b7fe:	fa                   	cli    
c001b7ff:	6a 00                	push   0x0
c001b801:	6a 34                	push   0x34
c001b803:	e9 9c ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b808 <irq21>:
c001b808:	fa                   	cli    
c001b809:	6a 00                	push   0x0
c001b80b:	6a 35                	push   0x35
c001b80d:	e9 92 ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b812 <irq22>:
c001b812:	fa                   	cli    
c001b813:	6a 00                	push   0x0
c001b815:	6a 36                	push   0x36
c001b817:	e9 88 ff ff ff       	jmp    c001b7a4 <int_common_stub>

c001b81c <irq23>:
c001b81c:	fa                   	cli    
c001b81d:	6a 00                	push   0x0
c001b81f:	6a 37                	push   0x37
c001b821:	e9 7e ff ff ff       	jmp    c001b7a4 <int_common_stub>
c001b826:	66 90                	xchg   ax,ax
c001b828:	66 90                	xchg   ax,ax
c001b82a:	66 90                	xchg   ax,ax
c001b82c:	66 90                	xchg   ax,ax
c001b82e:	66 90                	xchg   ax,ax

c001b830 <i386GetRDRAND>:
c001b830:	b9 64 00 00 00       	mov    ecx,0x64

c001b835 <retry>:
c001b835:	0f c7 f0             	rdrand eax
c001b838:	72 05                	jb     c001b83f <retry.done>
c001b83a:	e2 f9                	loop   c001b835 <retry>

c001b83c <retry.fail>:
c001b83c:	31 c0                	xor    eax,eax
c001b83e:	c3                   	ret    

c001b83f <retry.done>:
c001b83f:	c3                   	ret    

c001b840 <absolutelyNoChanceInHell>:
c001b840:	b8 01 00 00 00       	mov    eax,0x1
c001b845:	0f a2                	cpuid  
c001b847:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b84d:	74 06                	je     c001b855 <sseDetect.noSSE>
c001b84f:	b8 01 00 00 00       	mov    eax,0x1
c001b854:	c3                   	ret    

c001b855 <sseDetect.noSSE>:
c001b855:	31 c0                	xor    eax,eax
c001b857:	c3                   	ret    

c001b858 <sseSave>:
c001b858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b85c:	0f ae 00             	fxsave [eax]
c001b85f:	c3                   	ret    

c001b860 <sseLoad>:
c001b860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b864:	0f ae 08             	fxrstor [eax]
c001b867:	c3                   	ret    

c001b868 <sseInit>:
c001b868:	e8 42 00 00 00       	call   c001b8af <x87Init>
c001b86d:	0f 20 e0             	mov    eax,cr4
c001b870:	66 0d 00 06          	or     ax,0x600
c001b874:	0f 22 e0             	mov    cr4,eax
c001b877:	c3                   	ret    

c001b878 <sseClose>:
c001b878:	c3                   	ret    
c001b879:	66 90                	xchg   ax,ax
c001b87b:	66 90                	xchg   ax,ax
c001b87d:	66 90                	xchg   ax,ax
c001b87f:	90                   	nop

c001b880 <value_37F>:
c001b880:	7f 03                	jg     c001b885 <value_37A+0x1>

c001b882 <value_37E>:
c001b882:	7e 03                	jle    c001b887 <x87Detect+0x1>

c001b884 <value_37A>:
c001b884:	7a 03                	jp     c001b889 <x87Detect+0x3>

c001b886 <x87Detect>:
c001b886:	b8 01 00 00 00       	mov    eax,0x1
c001b88b:	0f a2                	cpuid  
c001b88d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b893:	74 06                	je     c001b89b <x87Detect.nox87>
c001b895:	b8 01 00 00 00       	mov    eax,0x1
c001b89a:	c3                   	ret    

c001b89b <x87Detect.nox87>:
c001b89b:	b8 00 00 00 00       	mov    eax,0x0
c001b8a0:	c3                   	ret    

c001b8a1 <x87Save>:
c001b8a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8a5:	dd 30                	fnsave [eax]
c001b8a7:	c3                   	ret    

c001b8a8 <x87Load>:
c001b8a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8ac:	dd 20                	frstor [eax]
c001b8ae:	c3                   	ret    

c001b8af <x87Init>:
c001b8af:	0f 20 c0             	mov    eax,cr0
c001b8b2:	66 25 fb ff          	and    ax,0xfffb
c001b8b6:	66 0d 22 00          	or     ax,0x22
c001b8ba:	0f 22 c0             	mov    cr0,eax
c001b8bd:	db e3                	fninit 
c001b8bf:	0f 06                	clts   
c001b8c1:	d9 2d 84 b8 01 c0    	fldcw  WORD PTR ds:0xc001b884
c001b8c7:	c3                   	ret    

c001b8c8 <x87Close>:
c001b8c8:	c3                   	ret    
c001b8c9:	66 90                	xchg   ax,ax
c001b8cb:	90                   	nop

c001b8cc <__do_global_ctors_aux>:
c001b8cc:	a1 7c c8 01 c0       	mov    eax,ds:0xc001c87c
c001b8d1:	83 f8 ff             	cmp    eax,0xffffffff
c001b8d4:	74 1a                	je     c001b8f0 <__do_global_ctors_aux+0x24>
c001b8d6:	55                   	push   ebp
c001b8d7:	89 e5                	mov    ebp,esp
c001b8d9:	53                   	push   ebx
c001b8da:	52                   	push   edx
c001b8db:	bb 7c c8 01 c0       	mov    ebx,0xc001c87c
c001b8e0:	ff d0                	call   eax
c001b8e2:	83 eb 04             	sub    ebx,0x4
c001b8e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8e7:	83 f8 ff             	cmp    eax,0xffffffff
c001b8ea:	75 f4                	jne    c001b8e0 <__do_global_ctors_aux+0x14>
c001b8ec:	58                   	pop    eax
c001b8ed:	5b                   	pop    ebx
c001b8ee:	5d                   	pop    ebp
c001b8ef:	c3                   	ret    
c001b8f0:	c3                   	ret    
c001b8f1:	66 90                	xchg   ax,ax
c001b8f3:	90                   	nop

c001b8f4 <__divdi3>:
c001b8f4:	55                   	push   ebp
c001b8f5:	57                   	push   edi
c001b8f6:	56                   	push   esi
c001b8f7:	53                   	push   ebx
c001b8f8:	83 ec 1c             	sub    esp,0x1c
c001b8fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b8ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b903:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b906:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b90a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b90e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b912:	85 db                	test   ebx,ebx
c001b914:	0f 88 8e 00 00 00    	js     c001b9a8 <__divdi3+0xb4>
c001b91a:	89 dd                	mov    ebp,ebx
c001b91c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b924:	89 d3                	mov    ebx,edx
c001b926:	85 d2                	test   edx,edx
c001b928:	79 0d                	jns    c001b937 <__divdi3+0x43>
c001b92a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b92e:	f7 d8                	neg    eax
c001b930:	83 d2 00             	adc    edx,0x0
c001b933:	f7 da                	neg    edx
c001b935:	89 d3                	mov    ebx,edx
c001b937:	89 c7                	mov    edi,eax
c001b939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b93c:	85 db                	test   ebx,ebx
c001b93e:	75 48                	jne    c001b988 <__divdi3+0x94>
c001b940:	39 ef                	cmp    edi,ebp
c001b942:	76 24                	jbe    c001b968 <__divdi3+0x74>
c001b944:	89 ea                	mov    edx,ebp
c001b946:	f7 f7                	div    edi
c001b948:	89 c1                	mov    ecx,eax
c001b94a:	31 f6                	xor    esi,esi
c001b94c:	89 c8                	mov    eax,ecx
c001b94e:	89 f2                	mov    edx,esi
c001b950:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b954:	85 c9                	test   ecx,ecx
c001b956:	74 07                	je     c001b95f <__divdi3+0x6b>
c001b958:	f7 d8                	neg    eax
c001b95a:	83 d2 00             	adc    edx,0x0
c001b95d:	f7 da                	neg    edx
c001b95f:	83 c4 1c             	add    esp,0x1c
c001b962:	5b                   	pop    ebx
c001b963:	5e                   	pop    esi
c001b964:	5f                   	pop    edi
c001b965:	5d                   	pop    ebp
c001b966:	c3                   	ret    
c001b967:	90                   	nop
c001b968:	85 ff                	test   edi,edi
c001b96a:	75 0b                	jne    c001b977 <__divdi3+0x83>
c001b96c:	b8 01 00 00 00       	mov    eax,0x1
c001b971:	31 d2                	xor    edx,edx
c001b973:	f7 f3                	div    ebx
c001b975:	89 c7                	mov    edi,eax
c001b977:	31 d2                	xor    edx,edx
c001b979:	89 e8                	mov    eax,ebp
c001b97b:	f7 f7                	div    edi
c001b97d:	89 c6                	mov    esi,eax
c001b97f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b982:	f7 f7                	div    edi
c001b984:	89 c1                	mov    ecx,eax
c001b986:	eb c4                	jmp    c001b94c <__divdi3+0x58>
c001b988:	39 eb                	cmp    ebx,ebp
c001b98a:	77 3c                	ja     c001b9c8 <__divdi3+0xd4>
c001b98c:	0f bd f3             	bsr    esi,ebx
c001b98f:	83 f6 1f             	xor    esi,0x1f
c001b992:	75 40                	jne    c001b9d4 <__divdi3+0xe0>
c001b994:	39 eb                	cmp    ebx,ebp
c001b996:	72 09                	jb     c001b9a1 <__divdi3+0xad>
c001b998:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b99b:	0f 87 97 00 00 00    	ja     c001ba38 <__divdi3+0x144>
c001b9a1:	b9 01 00 00 00       	mov    ecx,0x1
c001b9a6:	eb a4                	jmp    c001b94c <__divdi3+0x58>
c001b9a8:	f7 d9                	neg    ecx
c001b9aa:	83 d3 00             	adc    ebx,0x0
c001b9ad:	f7 db                	neg    ebx
c001b9af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b9b6:	89 dd                	mov    ebp,ebx
c001b9b8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b9c0:	e9 5f ff ff ff       	jmp    c001b924 <__divdi3+0x30>
c001b9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c8:	31 f6                	xor    esi,esi
c001b9ca:	31 c9                	xor    ecx,ecx
c001b9cc:	e9 7b ff ff ff       	jmp    c001b94c <__divdi3+0x58>
c001b9d1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9d4:	b8 20 00 00 00       	mov    eax,0x20
c001b9d9:	29 f0                	sub    eax,esi
c001b9db:	89 f1                	mov    ecx,esi
c001b9dd:	d3 e3                	shl    ebx,cl
c001b9df:	89 fa                	mov    edx,edi
c001b9e1:	88 c1                	mov    cl,al
c001b9e3:	d3 ea                	shr    edx,cl
c001b9e5:	09 da                	or     edx,ebx
c001b9e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9eb:	89 f1                	mov    ecx,esi
c001b9ed:	d3 e7                	shl    edi,cl
c001b9ef:	89 eb                	mov    ebx,ebp
c001b9f1:	88 c1                	mov    cl,al
c001b9f3:	d3 eb                	shr    ebx,cl
c001b9f5:	89 f1                	mov    ecx,esi
c001b9f7:	d3 e5                	shl    ebp,cl
c001b9f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b9fc:	88 c1                	mov    cl,al
c001b9fe:	d3 ea                	shr    edx,cl
c001ba00:	09 d5                	or     ebp,edx
c001ba02:	89 e8                	mov    eax,ebp
c001ba04:	89 da                	mov    edx,ebx
c001ba06:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ba0a:	89 d3                	mov    ebx,edx
c001ba0c:	89 c5                	mov    ebp,eax
c001ba0e:	f7 e7                	mul    edi
c001ba10:	39 d3                	cmp    ebx,edx
c001ba12:	72 18                	jb     c001ba2c <__divdi3+0x138>
c001ba14:	74 0a                	je     c001ba20 <__divdi3+0x12c>
c001ba16:	89 e9                	mov    ecx,ebp
c001ba18:	31 f6                	xor    esi,esi
c001ba1a:	e9 2d ff ff ff       	jmp    c001b94c <__divdi3+0x58>
c001ba1f:	90                   	nop
c001ba20:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ba23:	89 f1                	mov    ecx,esi
c001ba25:	d3 e7                	shl    edi,cl
c001ba27:	39 c7                	cmp    edi,eax
c001ba29:	73 eb                	jae    c001ba16 <__divdi3+0x122>
c001ba2b:	90                   	nop
c001ba2c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ba2f:	31 f6                	xor    esi,esi
c001ba31:	e9 16 ff ff ff       	jmp    c001b94c <__divdi3+0x58>
c001ba36:	66 90                	xchg   ax,ax
c001ba38:	31 c9                	xor    ecx,ecx
c001ba3a:	e9 0d ff ff ff       	jmp    c001b94c <__divdi3+0x58>
c001ba3f:	90                   	nop

c001ba40 <__moddi3>:
c001ba40:	55                   	push   ebp
c001ba41:	57                   	push   edi
c001ba42:	56                   	push   esi
c001ba43:	53                   	push   ebx
c001ba44:	83 ec 2c             	sub    esp,0x2c
c001ba47:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ba4b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ba4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ba53:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ba57:	85 db                	test   ebx,ebx
c001ba59:	0f 88 85 00 00 00    	js     c001bae4 <__moddi3+0xa4>
c001ba5f:	89 de                	mov    esi,ebx
c001ba61:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ba69:	89 d7                	mov    edi,edx
c001ba6b:	85 d2                	test   edx,edx
c001ba6d:	79 09                	jns    c001ba78 <__moddi3+0x38>
c001ba6f:	f7 d8                	neg    eax
c001ba71:	83 d2 00             	adc    edx,0x0
c001ba74:	f7 da                	neg    edx
c001ba76:	89 d7                	mov    edi,edx
c001ba78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba7c:	89 cd                	mov    ebp,ecx
c001ba7e:	85 ff                	test   edi,edi
c001ba80:	75 52                	jne    c001bad4 <__moddi3+0x94>
c001ba82:	89 c3                	mov    ebx,eax
c001ba84:	39 f0                	cmp    eax,esi
c001ba86:	76 24                	jbe    c001baac <__moddi3+0x6c>
c001ba88:	89 c8                	mov    eax,ecx
c001ba8a:	89 f2                	mov    edx,esi
c001ba8c:	f7 f3                	div    ebx
c001ba8e:	89 d6                	mov    esi,edx
c001ba90:	89 f0                	mov    eax,esi
c001ba92:	31 d2                	xor    edx,edx
c001ba94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba98:	85 c9                	test   ecx,ecx
c001ba9a:	74 07                	je     c001baa3 <__moddi3+0x63>
c001ba9c:	f7 d8                	neg    eax
c001ba9e:	83 d2 00             	adc    edx,0x0
c001baa1:	f7 da                	neg    edx
c001baa3:	83 c4 2c             	add    esp,0x2c
c001baa6:	5b                   	pop    ebx
c001baa7:	5e                   	pop    esi
c001baa8:	5f                   	pop    edi
c001baa9:	5d                   	pop    ebp
c001baaa:	c3                   	ret    
c001baab:	90                   	nop
c001baac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bab0:	85 db                	test   ebx,ebx
c001bab2:	75 0d                	jne    c001bac1 <__moddi3+0x81>
c001bab4:	b8 01 00 00 00       	mov    eax,0x1
c001bab9:	31 d2                	xor    edx,edx
c001babb:	f7 f7                	div    edi
c001babd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bac1:	89 f0                	mov    eax,esi
c001bac3:	31 d2                	xor    edx,edx
c001bac5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bac9:	f7 f7                	div    edi
c001bacb:	89 e8                	mov    eax,ebp
c001bacd:	f7 f7                	div    edi
c001bacf:	89 d6                	mov    esi,edx
c001bad1:	eb bd                	jmp    c001ba90 <__moddi3+0x50>
c001bad3:	90                   	nop
c001bad4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bad8:	39 f7                	cmp    edi,esi
c001bada:	76 20                	jbe    c001bafc <__moddi3+0xbc>
c001badc:	89 c8                	mov    eax,ecx
c001bade:	89 f2                	mov    edx,esi
c001bae0:	eb b2                	jmp    c001ba94 <__moddi3+0x54>
c001bae2:	66 90                	xchg   ax,ax
c001bae4:	f7 d9                	neg    ecx
c001bae6:	83 d3 00             	adc    ebx,0x0
c001bae9:	f7 db                	neg    ebx
c001baeb:	89 de                	mov    esi,ebx
c001baed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001baf5:	e9 6f ff ff ff       	jmp    c001ba69 <__moddi3+0x29>
c001bafa:	66 90                	xchg   ax,ax
c001bafc:	0f bd c7             	bsr    eax,edi
c001baff:	83 f0 1f             	xor    eax,0x1f
c001bb02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb06:	75 24                	jne    c001bb2c <__moddi3+0xec>
c001bb08:	39 f7                	cmp    edi,esi
c001bb0a:	72 06                	jb     c001bb12 <__moddi3+0xd2>
c001bb0c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bb10:	77 0c                	ja     c001bb1e <__moddi3+0xde>
c001bb12:	89 e9                	mov    ecx,ebp
c001bb14:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bb18:	19 fe                	sbb    esi,edi
c001bb1a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb22:	89 f2                	mov    edx,esi
c001bb24:	e9 6b ff ff ff       	jmp    c001ba94 <__moddi3+0x54>
c001bb29:	8d 76 00             	lea    esi,[esi+0x0]
c001bb2c:	b8 20 00 00 00       	mov    eax,0x20
c001bb31:	89 c2                	mov    edx,eax
c001bb33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bb37:	29 da                	sub    edx,ebx
c001bb39:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bb3d:	88 d9                	mov    cl,bl
c001bb3f:	d3 e7                	shl    edi,cl
c001bb41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb45:	88 d1                	mov    cl,dl
c001bb47:	d3 e8                	shr    eax,cl
c001bb49:	09 c7                	or     edi,eax
c001bb4b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bb4f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb53:	89 d8                	mov    eax,ebx
c001bb55:	88 d9                	mov    cl,bl
c001bb57:	d3 e7                	shl    edi,cl
c001bb59:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb5d:	89 f3                	mov    ebx,esi
c001bb5f:	88 d1                	mov    cl,dl
c001bb61:	d3 eb                	shr    ebx,cl
c001bb63:	89 c7                	mov    edi,eax
c001bb65:	88 c1                	mov    cl,al
c001bb67:	d3 e6                	shl    esi,cl
c001bb69:	89 e8                	mov    eax,ebp
c001bb6b:	88 d1                	mov    cl,dl
c001bb6d:	d3 e8                	shr    eax,cl
c001bb6f:	09 f0                	or     eax,esi
c001bb71:	89 f9                	mov    ecx,edi
c001bb73:	d3 e5                	shl    ebp,cl
c001bb75:	89 da                	mov    edx,ebx
c001bb77:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bb7b:	89 d3                	mov    ebx,edx
c001bb7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bb81:	89 c6                	mov    esi,eax
c001bb83:	89 d1                	mov    ecx,edx
c001bb85:	39 d3                	cmp    ebx,edx
c001bb87:	72 27                	jb     c001bbb0 <__moddi3+0x170>
c001bb89:	74 21                	je     c001bbac <__moddi3+0x16c>
c001bb8b:	29 f5                	sub    ebp,esi
c001bb8d:	19 cb                	sbb    ebx,ecx
c001bb8f:	89 de                	mov    esi,ebx
c001bb91:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bb95:	d3 e6                	shl    esi,cl
c001bb97:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb9b:	89 f9                	mov    ecx,edi
c001bb9d:	d3 ed                	shr    ebp,cl
c001bb9f:	09 ee                	or     esi,ebp
c001bba1:	89 f0                	mov    eax,esi
c001bba3:	d3 eb                	shr    ebx,cl
c001bba5:	89 da                	mov    edx,ebx
c001bba7:	e9 e8 fe ff ff       	jmp    c001ba94 <__moddi3+0x54>
c001bbac:	39 c5                	cmp    ebp,eax
c001bbae:	73 db                	jae    c001bb8b <__moddi3+0x14b>
c001bbb0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bbb4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bbb8:	89 d1                	mov    ecx,edx
c001bbba:	89 c6                	mov    esi,eax
c001bbbc:	eb cd                	jmp    c001bb8b <__moddi3+0x14b>
c001bbbe:	66 90                	xchg   ax,ax

c001bbc0 <__udivdi3>:
c001bbc0:	55                   	push   ebp
c001bbc1:	57                   	push   edi
c001bbc2:	56                   	push   esi
c001bbc3:	53                   	push   ebx
c001bbc4:	83 ec 1c             	sub    esp,0x1c
c001bbc7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bbcb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bbcf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bbd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bbd7:	85 d2                	test   edx,edx
c001bbd9:	75 41                	jne    c001bc1c <__udivdi3+0x5c>
c001bbdb:	39 f7                	cmp    edi,esi
c001bbdd:	76 15                	jbe    c001bbf4 <__udivdi3+0x34>
c001bbdf:	89 e8                	mov    eax,ebp
c001bbe1:	89 f2                	mov    edx,esi
c001bbe3:	f7 f7                	div    edi
c001bbe5:	31 db                	xor    ebx,ebx
c001bbe7:	89 da                	mov    edx,ebx
c001bbe9:	83 c4 1c             	add    esp,0x1c
c001bbec:	5b                   	pop    ebx
c001bbed:	5e                   	pop    esi
c001bbee:	5f                   	pop    edi
c001bbef:	5d                   	pop    ebp
c001bbf0:	c3                   	ret    
c001bbf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbf4:	89 f9                	mov    ecx,edi
c001bbf6:	85 ff                	test   edi,edi
c001bbf8:	75 0b                	jne    c001bc05 <__udivdi3+0x45>
c001bbfa:	b8 01 00 00 00       	mov    eax,0x1
c001bbff:	31 d2                	xor    edx,edx
c001bc01:	f7 f7                	div    edi
c001bc03:	89 c1                	mov    ecx,eax
c001bc05:	31 d2                	xor    edx,edx
c001bc07:	89 f0                	mov    eax,esi
c001bc09:	f7 f1                	div    ecx
c001bc0b:	89 c3                	mov    ebx,eax
c001bc0d:	89 e8                	mov    eax,ebp
c001bc0f:	f7 f1                	div    ecx
c001bc11:	89 da                	mov    edx,ebx
c001bc13:	83 c4 1c             	add    esp,0x1c
c001bc16:	5b                   	pop    ebx
c001bc17:	5e                   	pop    esi
c001bc18:	5f                   	pop    edi
c001bc19:	5d                   	pop    ebp
c001bc1a:	c3                   	ret    
c001bc1b:	90                   	nop
c001bc1c:	39 f2                	cmp    edx,esi
c001bc1e:	77 1c                	ja     c001bc3c <__udivdi3+0x7c>
c001bc20:	0f bd da             	bsr    ebx,edx
c001bc23:	83 f3 1f             	xor    ebx,0x1f
c001bc26:	75 24                	jne    c001bc4c <__udivdi3+0x8c>
c001bc28:	39 f2                	cmp    edx,esi
c001bc2a:	72 08                	jb     c001bc34 <__udivdi3+0x74>
c001bc2c:	39 ef                	cmp    edi,ebp
c001bc2e:	0f 87 84 00 00 00    	ja     c001bcb8 <__udivdi3+0xf8>
c001bc34:	b8 01 00 00 00       	mov    eax,0x1
c001bc39:	eb ac                	jmp    c001bbe7 <__udivdi3+0x27>
c001bc3b:	90                   	nop
c001bc3c:	31 db                	xor    ebx,ebx
c001bc3e:	31 c0                	xor    eax,eax
c001bc40:	89 da                	mov    edx,ebx
c001bc42:	83 c4 1c             	add    esp,0x1c
c001bc45:	5b                   	pop    ebx
c001bc46:	5e                   	pop    esi
c001bc47:	5f                   	pop    edi
c001bc48:	5d                   	pop    ebp
c001bc49:	c3                   	ret    
c001bc4a:	66 90                	xchg   ax,ax
c001bc4c:	b8 20 00 00 00       	mov    eax,0x20
c001bc51:	29 d8                	sub    eax,ebx
c001bc53:	88 d9                	mov    cl,bl
c001bc55:	d3 e2                	shl    edx,cl
c001bc57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bc5b:	89 fa                	mov    edx,edi
c001bc5d:	88 c1                	mov    cl,al
c001bc5f:	d3 ea                	shr    edx,cl
c001bc61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc65:	09 d1                	or     ecx,edx
c001bc67:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bc6b:	88 d9                	mov    cl,bl
c001bc6d:	d3 e7                	shl    edi,cl
c001bc6f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc73:	89 f7                	mov    edi,esi
c001bc75:	88 c1                	mov    cl,al
c001bc77:	d3 ef                	shr    edi,cl
c001bc79:	88 d9                	mov    cl,bl
c001bc7b:	d3 e6                	shl    esi,cl
c001bc7d:	89 ea                	mov    edx,ebp
c001bc7f:	88 c1                	mov    cl,al
c001bc81:	d3 ea                	shr    edx,cl
c001bc83:	09 d6                	or     esi,edx
c001bc85:	89 f0                	mov    eax,esi
c001bc87:	89 fa                	mov    edx,edi
c001bc89:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bc8d:	89 d7                	mov    edi,edx
c001bc8f:	89 c6                	mov    esi,eax
c001bc91:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc95:	39 d7                	cmp    edi,edx
c001bc97:	72 13                	jb     c001bcac <__udivdi3+0xec>
c001bc99:	74 09                	je     c001bca4 <__udivdi3+0xe4>
c001bc9b:	89 f0                	mov    eax,esi
c001bc9d:	31 db                	xor    ebx,ebx
c001bc9f:	e9 43 ff ff ff       	jmp    c001bbe7 <__udivdi3+0x27>
c001bca4:	88 d9                	mov    cl,bl
c001bca6:	d3 e5                	shl    ebp,cl
c001bca8:	39 c5                	cmp    ebp,eax
c001bcaa:	73 ef                	jae    c001bc9b <__udivdi3+0xdb>
c001bcac:	8d 46 ff             	lea    eax,[esi-0x1]
c001bcaf:	31 db                	xor    ebx,ebx
c001bcb1:	e9 31 ff ff ff       	jmp    c001bbe7 <__udivdi3+0x27>
c001bcb6:	66 90                	xchg   ax,ax
c001bcb8:	31 c0                	xor    eax,eax
c001bcba:	e9 28 ff ff ff       	jmp    c001bbe7 <__udivdi3+0x27>
c001bcbf:	90                   	nop

c001bcc0 <__umoddi3>:
c001bcc0:	55                   	push   ebp
c001bcc1:	57                   	push   edi
c001bcc2:	56                   	push   esi
c001bcc3:	53                   	push   ebx
c001bcc4:	83 ec 1c             	sub    esp,0x1c
c001bcc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bccb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bccf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bcd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bcd7:	89 da                	mov    edx,ebx
c001bcd9:	85 c0                	test   eax,eax
c001bcdb:	75 37                	jne    c001bd14 <__umoddi3+0x54>
c001bcdd:	39 df                	cmp    edi,ebx
c001bcdf:	76 13                	jbe    c001bcf4 <__umoddi3+0x34>
c001bce1:	89 f0                	mov    eax,esi
c001bce3:	f7 f7                	div    edi
c001bce5:	89 d0                	mov    eax,edx
c001bce7:	31 d2                	xor    edx,edx
c001bce9:	83 c4 1c             	add    esp,0x1c
c001bcec:	5b                   	pop    ebx
c001bced:	5e                   	pop    esi
c001bcee:	5f                   	pop    edi
c001bcef:	5d                   	pop    ebp
c001bcf0:	c3                   	ret    
c001bcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcf4:	89 fd                	mov    ebp,edi
c001bcf6:	85 ff                	test   edi,edi
c001bcf8:	75 0b                	jne    c001bd05 <__umoddi3+0x45>
c001bcfa:	b8 01 00 00 00       	mov    eax,0x1
c001bcff:	31 d2                	xor    edx,edx
c001bd01:	f7 f7                	div    edi
c001bd03:	89 c5                	mov    ebp,eax
c001bd05:	89 d8                	mov    eax,ebx
c001bd07:	31 d2                	xor    edx,edx
c001bd09:	f7 f5                	div    ebp
c001bd0b:	89 f0                	mov    eax,esi
c001bd0d:	f7 f5                	div    ebp
c001bd0f:	89 d0                	mov    eax,edx
c001bd11:	eb d4                	jmp    c001bce7 <__umoddi3+0x27>
c001bd13:	90                   	nop
c001bd14:	89 f1                	mov    ecx,esi
c001bd16:	39 d8                	cmp    eax,ebx
c001bd18:	76 0a                	jbe    c001bd24 <__umoddi3+0x64>
c001bd1a:	89 f0                	mov    eax,esi
c001bd1c:	83 c4 1c             	add    esp,0x1c
c001bd1f:	5b                   	pop    ebx
c001bd20:	5e                   	pop    esi
c001bd21:	5f                   	pop    edi
c001bd22:	5d                   	pop    ebp
c001bd23:	c3                   	ret    
c001bd24:	0f bd e8             	bsr    ebp,eax
c001bd27:	83 f5 1f             	xor    ebp,0x1f
c001bd2a:	75 1c                	jne    c001bd48 <__umoddi3+0x88>
c001bd2c:	39 d8                	cmp    eax,ebx
c001bd2e:	72 04                	jb     c001bd34 <__umoddi3+0x74>
c001bd30:	39 f7                	cmp    edi,esi
c001bd32:	77 08                	ja     c001bd3c <__umoddi3+0x7c>
c001bd34:	89 da                	mov    edx,ebx
c001bd36:	29 fe                	sub    esi,edi
c001bd38:	19 c2                	sbb    edx,eax
c001bd3a:	89 f1                	mov    ecx,esi
c001bd3c:	89 c8                	mov    eax,ecx
c001bd3e:	83 c4 1c             	add    esp,0x1c
c001bd41:	5b                   	pop    ebx
c001bd42:	5e                   	pop    esi
c001bd43:	5f                   	pop    edi
c001bd44:	5d                   	pop    ebp
c001bd45:	c3                   	ret    
c001bd46:	66 90                	xchg   ax,ax
c001bd48:	ba 20 00 00 00       	mov    edx,0x20
c001bd4d:	29 ea                	sub    edx,ebp
c001bd4f:	89 e9                	mov    ecx,ebp
c001bd51:	d3 e0                	shl    eax,cl
c001bd53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd57:	89 f8                	mov    eax,edi
c001bd59:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd5d:	88 d1                	mov    cl,dl
c001bd5f:	d3 e8                	shr    eax,cl
c001bd61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd65:	09 c1                	or     ecx,eax
c001bd67:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd6b:	89 e9                	mov    ecx,ebp
c001bd6d:	d3 e7                	shl    edi,cl
c001bd6f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd73:	89 d8                	mov    eax,ebx
c001bd75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd79:	88 d1                	mov    cl,dl
c001bd7b:	d3 e8                	shr    eax,cl
c001bd7d:	89 c7                	mov    edi,eax
c001bd7f:	89 e9                	mov    ecx,ebp
c001bd81:	d3 e3                	shl    ebx,cl
c001bd83:	89 f0                	mov    eax,esi
c001bd85:	88 d1                	mov    cl,dl
c001bd87:	d3 e8                	shr    eax,cl
c001bd89:	09 d8                	or     eax,ebx
c001bd8b:	89 e9                	mov    ecx,ebp
c001bd8d:	d3 e6                	shl    esi,cl
c001bd8f:	89 f3                	mov    ebx,esi
c001bd91:	89 fa                	mov    edx,edi
c001bd93:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd97:	89 d1                	mov    ecx,edx
c001bd99:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd9d:	89 c6                	mov    esi,eax
c001bd9f:	89 d7                	mov    edi,edx
c001bda1:	39 d1                	cmp    ecx,edx
c001bda3:	72 27                	jb     c001bdcc <__umoddi3+0x10c>
c001bda5:	74 21                	je     c001bdc8 <__umoddi3+0x108>
c001bda7:	89 ca                	mov    edx,ecx
c001bda9:	29 f3                	sub    ebx,esi
c001bdab:	19 fa                	sbb    edx,edi
c001bdad:	89 d0                	mov    eax,edx
c001bdaf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001bdb3:	d3 e0                	shl    eax,cl
c001bdb5:	89 e9                	mov    ecx,ebp
c001bdb7:	d3 eb                	shr    ebx,cl
c001bdb9:	09 d8                	or     eax,ebx
c001bdbb:	d3 ea                	shr    edx,cl
c001bdbd:	83 c4 1c             	add    esp,0x1c
c001bdc0:	5b                   	pop    ebx
c001bdc1:	5e                   	pop    esi
c001bdc2:	5f                   	pop    edi
c001bdc3:	5d                   	pop    ebp
c001bdc4:	c3                   	ret    
c001bdc5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdc8:	39 c3                	cmp    ebx,eax
c001bdca:	73 db                	jae    c001bda7 <__umoddi3+0xe7>
c001bdcc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bdd0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001bdd4:	89 d7                	mov    edi,edx
c001bdd6:	89 c6                	mov    esi,eax
c001bdd8:	eb cd                	jmp    c001bda7 <__umoddi3+0xe7>

Disassembly of section .init:

c001bdda <_init>:
c001bdda:	55                   	push   ebp
c001bddb:	89 e5                	mov    ebp,esp
c001bddd:	e8 12 43 fe ff       	call   c00000f4 <frame_dummy>
c001bde2:	e8 e5 fa ff ff       	call   c001b8cc <__do_global_ctors_aux>
c001bde7:	5d                   	pop    ebp
c001bde8:	c3                   	ret    

Disassembly of section .fini:

c001bde9 <_fini>:
c001bde9:	55                   	push   ebp
c001bdea:	89 e5                	mov    ebp,esp
c001bdec:	e8 93 42 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001bdf1:	5d                   	pop    ebp
c001bdf2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001bdf4 <Computer::~Computer()>:
c001bdf4:	83 ec 0c             	sub    esp,0xc
c001bdf7:	ba b8 d0 01 c0       	mov    edx,0xc001d0b8
c001bdfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be00:	89 10                	mov    DWORD PTR [eax],edx
c001be02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be06:	83 ec 0c             	sub    esp,0xc
c001be09:	50                   	push   eax
c001be0a:	e8 87 f9 fe ff       	call   c000b796 <Device::~Device()>
c001be0f:	83 c4 10             	add    esp,0x10
c001be12:	90                   	nop
c001be13:	83 c4 0c             	add    esp,0xc
c001be16:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001be18 <Computer::~Computer()>:
c001be18:	83 ec 0c             	sub    esp,0xc
c001be1b:	83 ec 0c             	sub    esp,0xc
c001be1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be22:	e8 cd ff ff ff       	call   c001bdf4 <Computer::~Computer()>
c001be27:	83 c4 10             	add    esp,0x10
c001be2a:	83 ec 08             	sub    esp,0x8
c001be2d:	68 70 01 00 00       	push   0x170
c001be32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be36:	e8 23 e5 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	83 c4 0c             	add    esp,0xc
c001be41:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001be42 <idleCommon()>:
c001be42:	83 ec 0c             	sub    esp,0xc
c001be45:	fa                   	cli    
c001be46:	ff 05 c8 36 02 c0    	inc    DWORD PTR ds:0xc00236c8
c001be4c:	e8 77 74 ff ff       	call   c00132c8 <schedule()>
c001be51:	a1 c8 36 02 c0       	mov    eax,ds:0xc00236c8
c001be56:	48                   	dec    eax
c001be57:	a3 c8 36 02 c0       	mov    ds:0xc00236c8,eax
c001be5c:	75 01                	jne    c001be5f <idleCommon()+0x1d>
c001be5e:	fb                   	sti    
c001be5f:	83 c4 0c             	add    esp,0xc
c001be62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001be64 <LinkedList<UnixFile>::~LinkedList()>:
c001be64:	90                   	nop
c001be65:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001be66 <LinkedList<UnixFile>::LinkedList()>:
c001be66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001be86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be94:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be9f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bea6:	90                   	nop
c001bea7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bea8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bea8:	83 ec 0c             	sub    esp,0xc
c001beab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001beb0:	75 10                	jne    c001bec2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001beb2:	83 ec 0c             	sub    esp,0xc
c001beb5:	68 0c d3 01 c0       	push   0xc001d30c
c001beba:	e8 f8 41 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bec8:	85 c0                	test   eax,eax
c001beca:	74 34                	je     c001bf00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001becc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bed3:	85 c0                	test   eax,eax
c001bed5:	74 29                	je     c001bf00 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bedb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bede:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bee2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001beed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bef7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001befe:	eb 65                	jmp    c001bf65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf04:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf06:	85 c0                	test   eax,eax
c001bf08:	75 4b                	jne    c001bf55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf11:	85 c0                	test   eax,eax
c001bf13:	75 40                	jne    c001bf55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bf15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf1d:	89 10                	mov    DWORD PTR [eax],edx
c001bf1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf3f:	85 c0                	test   eax,eax
c001bf41:	74 22                	je     c001bf65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf43:	83 ec 0c             	sub    esp,0xc
c001bf46:	68 2e d3 01 c0       	push   0xc001d32e
c001bf4b:	e8 67 41 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	eb 10                	jmp    c001bf65 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf55:	83 ec 0c             	sub    esp,0xc
c001bf58:	68 38 d3 01 c0       	push   0xc001d338
c001bf5d:	e8 55 41 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bf62:	83 c4 10             	add    esp,0x10
c001bf65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf6c:	8d 50 01             	lea    edx,[eax+0x1]
c001bf6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf73:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf76:	90                   	nop
c001bf77:	83 c4 0c             	add    esp,0xc
c001bf7a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bf7c <LinkedList<UnixFile>::getFirstElement()>:
c001bf7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf80:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bf84 <LinkedList<UnixFile>::removeFirst()>:
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	75 12                	jne    c001bfa3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bf91:	83 ec 0c             	sub    esp,0xc
c001bf94:	68 44 d3 01 c0       	push   0xc001d344
c001bf99:	e8 19 41 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bf9e:	83 c4 10             	add    esp,0x10
c001bfa1:	eb 7e                	jmp    c001c021 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bfa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfaa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfad:	85 c0                	test   eax,eax
c001bfaf:	74 10                	je     c001bfc1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bfb1:	83 ec 0c             	sub    esp,0xc
c001bfb4:	68 8f d3 01 c0       	push   0xc001d38f
c001bfb9:	e8 f9 40 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bfbe:	83 c4 10             	add    esp,0x10
c001bfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfca:	85 c0                	test   eax,eax
c001bfcc:	75 33                	jne    c001c001 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfea:	83 f8 01             	cmp    eax,0x1
c001bfed:	74 21                	je     c001c010 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bfef:	83 ec 0c             	sub    esp,0xc
c001bff2:	68 68 d3 01 c0       	push   0xc001d368
c001bff7:	e8 bb 40 ff ff       	call   c00100b7 <KePanic(char const*)>
c001bffc:	83 c4 10             	add    esp,0x10
c001bfff:	eb 0f                	jmp    c001c010 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c005:	8b 00                	mov    eax,DWORD PTR [eax]
c001c007:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00e:	89 10                	mov    DWORD PTR [eax],edx
c001c010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c014:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c017:	8d 50 ff             	lea    edx,[eax-0x1]
c001c01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c021:	83 c4 0c             	add    esp,0xc
c001c024:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c026 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c02a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c02d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c02e <DriverlessDevice::~DriverlessDevice()>:
c001c02e:	ba dc d9 01 c0       	mov    edx,0xc001d9dc
c001c033:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c037:	89 10                	mov    DWORD PTR [eax],edx
c001c039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c03d:	50                   	push   eax
c001c03e:	e8 53 f7 fe ff       	call   c000b796 <Device::~Device()>
c001c043:	83 c4 04             	add    esp,0x4
c001c046:	90                   	nop
c001c047:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c048 <DriverlessDevice::~DriverlessDevice()>:
c001c048:	83 ec 0c             	sub    esp,0xc
c001c04b:	83 ec 0c             	sub    esp,0xc
c001c04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c052:	e8 d7 ff ff ff       	call   c001c02e <DriverlessDevice::~DriverlessDevice()>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	83 ec 08             	sub    esp,0x8
c001c05d:	68 58 01 00 00       	push   0x158
c001c062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c066:	e8 f3 e2 fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	83 c4 0c             	add    esp,0xc
c001c071:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c072 <LinkedList<Device>::addElement(Device*)>:
c001c072:	83 ec 0c             	sub    esp,0xc
c001c075:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c07a:	75 10                	jne    c001c08c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c07c:	83 ec 0c             	sub    esp,0xc
c001c07f:	68 0c d3 01 c0       	push   0xc001d30c
c001c084:	e8 2e 40 ff ff       	call   c00100b7 <KePanic(char const*)>
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c090:	8b 00                	mov    eax,DWORD PTR [eax]
c001c092:	85 c0                	test   eax,eax
c001c094:	74 3a                	je     c001c0d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c09d:	85 c0                	test   eax,eax
c001c09f:	74 2f                	je     c001c0d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c0ce:	eb 68                	jmp    c001c138 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0d6:	85 c0                	test   eax,eax
c001c0d8:	75 4e                	jne    c001c128 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0e1:	85 c0                	test   eax,eax
c001c0e3:	75 43                	jne    c001c128 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0ed:	89 10                	mov    DWORD PTR [eax],edx
c001c0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c101:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c112:	85 c0                	test   eax,eax
c001c114:	74 22                	je     c001c138 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c116:	83 ec 0c             	sub    esp,0xc
c001c119:	68 2e d3 01 c0       	push   0xc001d32e
c001c11e:	e8 94 3f ff ff       	call   c00100b7 <KePanic(char const*)>
c001c123:	83 c4 10             	add    esp,0x10
c001c126:	eb 10                	jmp    c001c138 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c128:	83 ec 0c             	sub    esp,0xc
c001c12b:	68 38 d3 01 c0       	push   0xc001d338
c001c130:	e8 82 3f ff ff       	call   c00100b7 <KePanic(char const*)>
c001c135:	83 c4 10             	add    esp,0x10
c001c138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c13c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c13f:	8d 50 01             	lea    edx,[eax+0x1]
c001c142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c146:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c149:	90                   	nop
c001c14a:	83 c4 0c             	add    esp,0xc
c001c14d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c14e <LinkedList<Device>::LinkedList()>:
c001c14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c152:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c167:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c16e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c172:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c17c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c183:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c187:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c18e:	90                   	nop
c001c18f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c190 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c194:	8b 00                	mov    eax,DWORD PTR [eax]
c001c196:	85 c0                	test   eax,eax
c001c198:	75 0e                	jne    c001c1a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c19e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	75 03                	jne    c001c1a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c1a5:	b0 01                	mov    al,0x1
c001c1a7:	c3                   	ret    
c001c1a8:	b0 00                	mov    al,0x0
c001c1aa:	90                   	nop
c001c1ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c1ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c1ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c1b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c1b4:	83 ec 0c             	sub    esp,0xc
c001c1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1bd:	85 c0                	test   eax,eax
c001c1bf:	75 17                	jne    c001c1d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c1c1:	83 ec 0c             	sub    esp,0xc
c001c1c4:	68 44 d3 01 c0       	push   0xc001d344
c001c1c9:	e8 e9 3e ff ff       	call   c00100b7 <KePanic(char const*)>
c001c1ce:	83 c4 10             	add    esp,0x10
c001c1d1:	e9 92 00 00 00       	jmp    c001c268 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c1d6:	66 90                	xchg   ax,ax
c001c1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1e2:	85 c0                	test   eax,eax
c001c1e4:	0f 95 c0             	setne  al
c001c1e7:	84 c0                	test   al,al
c001c1e9:	74 11                	je     c001c1fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c1eb:	83 ec 0c             	sub    esp,0xc
c001c1ee:	68 8f d3 01 c0       	push   0xc001d38f
c001c1f3:	e8 bf 3e ff ff       	call   c00100b7 <KePanic(char const*)>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	90                   	nop
c001c1fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c200:	8b 00                	mov    eax,DWORD PTR [eax]
c001c202:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c205:	85 c0                	test   eax,eax
c001c207:	0f 94 c0             	sete   al
c001c20a:	84 c0                	test   al,al
c001c20c:	74 36                	je     c001c244 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c212:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c21c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c227:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c22a:	83 f8 01             	cmp    eax,0x1
c001c22d:	74 25                	je     c001c254 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c22f:	83 ec 0c             	sub    esp,0xc
c001c232:	68 68 d3 01 c0       	push   0xc001d368
c001c237:	e8 7b 3e ff ff       	call   c00100b7 <KePanic(char const*)>
c001c23c:	83 c4 10             	add    esp,0x10
c001c23f:	eb 13                	jmp    c001c254 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c241:	8d 76 00             	lea    esi,[esi+0x0]
c001c244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c248:	8b 00                	mov    eax,DWORD PTR [eax]
c001c24a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c251:	89 10                	mov    DWORD PTR [eax],edx
c001c253:	90                   	nop
c001c254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c258:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c25b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c262:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c265:	8d 76 00             	lea    esi,[esi+0x0]
c001c268:	83 c4 0c             	add    esp,0xc
c001c26b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c26c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c26c:	83 ec 0c             	sub    esp,0xc
c001c26f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c274:	75 12                	jne    c001c288 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c276:	83 ec 0c             	sub    esp,0xc
c001c279:	68 0c d3 01 c0       	push   0xc001d30c
c001c27e:	e8 34 3e ff ff       	call   c00100b7 <KePanic(char const*)>
c001c283:	83 c4 10             	add    esp,0x10
c001c286:	66 90                	xchg   ax,ax
c001c288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c28e:	85 c0                	test   eax,eax
c001c290:	74 36                	je     c001c2c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c299:	85 c0                	test   eax,eax
c001c29b:	74 2b                	je     c001c2c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c2c4:	eb 6a                	jmp    c001c330 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c2c6:	66 90                	xchg   ax,ax
c001c2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ce:	85 c0                	test   eax,eax
c001c2d0:	75 4e                	jne    c001c320 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2d9:	85 c0                	test   eax,eax
c001c2db:	75 43                	jne    c001c320 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2e5:	89 10                	mov    DWORD PTR [eax],edx
c001c2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c304:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c307:	85 c0                	test   eax,eax
c001c309:	74 25                	je     c001c330 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c30b:	83 ec 0c             	sub    esp,0xc
c001c30e:	68 2e d3 01 c0       	push   0xc001d32e
c001c313:	e8 9f 3d ff ff       	call   c00100b7 <KePanic(char const*)>
c001c318:	83 c4 10             	add    esp,0x10
c001c31b:	eb 13                	jmp    c001c330 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c31d:	8d 76 00             	lea    esi,[esi+0x0]
c001c320:	83 ec 0c             	sub    esp,0xc
c001c323:	68 38 d3 01 c0       	push   0xc001d338
c001c328:	e8 8a 3d ff ff       	call   c00100b7 <KePanic(char const*)>
c001c32d:	83 c4 10             	add    esp,0x10
c001c330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c334:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c337:	8d 50 01             	lea    edx,[eax+0x1]
c001c33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c341:	90                   	nop
c001c342:	83 c4 0c             	add    esp,0xc
c001c345:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c348 <ACPI::~ACPI()>:
c001c348:	83 ec 0c             	sub    esp,0xc
c001c34b:	ba 44 df 01 c0       	mov    edx,0xc001df44
c001c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c354:	89 10                	mov    DWORD PTR [eax],edx
c001c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	50                   	push   eax
c001c35e:	e8 33 f4 fe ff       	call   c000b796 <Device::~Device()>
c001c363:	83 c4 10             	add    esp,0x10
c001c366:	90                   	nop
c001c367:	83 c4 0c             	add    esp,0xc
c001c36a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c36c <ACPI::~ACPI()>:
c001c36c:	83 ec 0c             	sub    esp,0xc
c001c36f:	83 ec 0c             	sub    esp,0xc
c001c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c376:	e8 cd ff ff ff       	call   c001c348 <ACPI::~ACPI()>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	83 ec 08             	sub    esp,0x8
c001c381:	68 64 12 00 00       	push   0x1264
c001c386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c38a:	e8 cf df fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	83 c4 0c             	add    esp,0xc
c001c395:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c398 <LinkedList<Device>::~LinkedList()>:
c001c398:	90                   	nop
c001c399:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c39c <LinkedList<Device>::isEmpty()>:
c001c39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3a2:	85 c0                	test   eax,eax
c001c3a4:	75 0e                	jne    c001c3b4 <LinkedList<Device>::isEmpty()+0x18>
c001c3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3ad:	85 c0                	test   eax,eax
c001c3af:	75 03                	jne    c001c3b4 <LinkedList<Device>::isEmpty()+0x18>
c001c3b1:	b0 01                	mov    al,0x1
c001c3b3:	c3                   	ret    
c001c3b4:	b0 00                	mov    al,0x0
c001c3b6:	90                   	nop
c001c3b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c3b8 <LinkedList<Device>::getFirstElement()>:
c001c3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c3c0 <LinkedList<Device>::removeFirst()>:
c001c3c0:	83 ec 0c             	sub    esp,0xc
c001c3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3c9:	85 c0                	test   eax,eax
c001c3cb:	75 17                	jne    c001c3e4 <LinkedList<Device>::removeFirst()+0x24>
c001c3cd:	83 ec 0c             	sub    esp,0xc
c001c3d0:	68 44 d3 01 c0       	push   0xc001d344
c001c3d5:	e8 dd 3c ff ff       	call   c00100b7 <KePanic(char const*)>
c001c3da:	83 c4 10             	add    esp,0x10
c001c3dd:	e9 92 00 00 00       	jmp    c001c474 <LinkedList<Device>::removeFirst()+0xb4>
c001c3e2:	66 90                	xchg   ax,ax
c001c3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3eb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c3f1:	85 c0                	test   eax,eax
c001c3f3:	74 13                	je     c001c408 <LinkedList<Device>::removeFirst()+0x48>
c001c3f5:	83 ec 0c             	sub    esp,0xc
c001c3f8:	68 8f d3 01 c0       	push   0xc001d38f
c001c3fd:	e8 b5 3c ff ff       	call   c00100b7 <KePanic(char const*)>
c001c402:	83 c4 10             	add    esp,0x10
c001c405:	8d 76 00             	lea    esi,[esi+0x0]
c001c408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c40e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c414:	85 c0                	test   eax,eax
c001c416:	75 34                	jne    c001c44c <LinkedList<Device>::removeFirst()+0x8c>
c001c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c426:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c431:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c434:	83 f8 01             	cmp    eax,0x1
c001c437:	74 27                	je     c001c460 <LinkedList<Device>::removeFirst()+0xa0>
c001c439:	83 ec 0c             	sub    esp,0xc
c001c43c:	68 68 d3 01 c0       	push   0xc001d368
c001c441:	e8 71 3c ff ff       	call   c00100b7 <KePanic(char const*)>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	eb 15                	jmp    c001c460 <LinkedList<Device>::removeFirst()+0xa0>
c001c44b:	90                   	nop
c001c44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c450:	8b 00                	mov    eax,DWORD PTR [eax]
c001c452:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45c:	89 10                	mov    DWORD PTR [eax],edx
c001c45e:	66 90                	xchg   ax,ax
c001c460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c464:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c467:	8d 50 ff             	lea    edx,[eax-0x1]
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	83 c4 0c             	add    esp,0xc
c001c477:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c478 <CPU::~CPU()>:
c001c478:	83 ec 0c             	sub    esp,0xc
c001c47b:	ba e0 e0 01 c0       	mov    edx,0xc001e0e0
c001c480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c484:	89 10                	mov    DWORD PTR [eax],edx
c001c486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48a:	83 ec 0c             	sub    esp,0xc
c001c48d:	50                   	push   eax
c001c48e:	e8 03 f3 fe ff       	call   c000b796 <Device::~Device()>
c001c493:	83 c4 10             	add    esp,0x10
c001c496:	90                   	nop
c001c497:	83 c4 0c             	add    esp,0xc
c001c49a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c49c <CPU::~CPU()>:
c001c49c:	83 ec 0c             	sub    esp,0xc
c001c49f:	83 ec 0c             	sub    esp,0xc
c001c4a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4a6:	e8 cd ff ff ff       	call   c001c478 <CPU::~CPU()>
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	83 ec 08             	sub    esp,0x8
c001c4b1:	68 94 11 00 00       	push   0x1194
c001c4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4ba:	e8 9f de fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c4bf:	83 c4 10             	add    esp,0x10
c001c4c2:	83 c4 0c             	add    esp,0xc
c001c4c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c4c8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c4c8:	90                   	nop
c001c4c9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c4cc <ThreadControlBlock::ThreadControlBlock()>:
c001c4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4db:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c4e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c4ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c4f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c507:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c50b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c50f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c513:	90                   	nop
c001c514:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c518 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c51c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c526:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c52d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c531:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c53c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c546:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c54d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c551:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c558:	90                   	nop
c001c559:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c55c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c55c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c560:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c563:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c564 <PCI::~PCI()>:
c001c564:	83 ec 0c             	sub    esp,0xc
c001c567:	ba 38 ec 01 c0       	mov    edx,0xc001ec38
c001c56c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c570:	89 10                	mov    DWORD PTR [eax],edx
c001c572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c576:	83 ec 0c             	sub    esp,0xc
c001c579:	50                   	push   eax
c001c57a:	e8 a1 ec fe ff       	call   c000b220 <Bus::~Bus()>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	90                   	nop
c001c583:	83 c4 0c             	add    esp,0xc
c001c586:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c588 <PCI::~PCI()>:
c001c588:	83 ec 0c             	sub    esp,0xc
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c592:	e8 cd ff ff ff       	call   c001c564 <PCI::~PCI()>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	83 ec 08             	sub    esp,0x8
c001c59d:	68 5c 01 00 00       	push   0x15c
c001c5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a6:	e8 b3 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	83 c4 0c             	add    esp,0xc
c001c5b1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c5b2 <IDE::~IDE()>:
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	ba ec ec 01 c0       	mov    edx,0xc001ecec
c001c5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5be:	89 10                	mov    DWORD PTR [eax],edx
c001c5c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c4:	83 ec 0c             	sub    esp,0xc
c001c5c7:	50                   	push   eax
c001c5c8:	e8 43 f6 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c5cd:	83 c4 10             	add    esp,0x10
c001c5d0:	90                   	nop
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c5d6 <IDE::~IDE()>:
c001c5d6:	83 ec 0c             	sub    esp,0xc
c001c5d9:	83 ec 0c             	sub    esp,0xc
c001c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5e0:	e8 cd ff ff ff       	call   c001c5b2 <IDE::~IDE()>
c001c5e5:	83 c4 10             	add    esp,0x10
c001c5e8:	83 ec 08             	sub    esp,0x8
c001c5eb:	68 70 02 00 00       	push   0x270
c001c5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f4:	e8 65 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	83 c4 0c             	add    esp,0xc
c001c5ff:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c600 <SATABus::~SATABus()>:
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	ba 3c ed 01 c0       	mov    edx,0xc001ed3c
c001c608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60c:	89 10                	mov    DWORD PTR [eax],edx
c001c60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	50                   	push   eax
c001c616:	e8 f5 f5 fe ff       	call   c000bc10 <HardDiskController::~HardDiskController()>
c001c61b:	83 c4 10             	add    esp,0x10
c001c61e:	90                   	nop
c001c61f:	83 c4 0c             	add    esp,0xc
c001c622:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c624 <SATABus::~SATABus()>:
c001c624:	83 ec 0c             	sub    esp,0xc
c001c627:	83 ec 0c             	sub    esp,0xc
c001c62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c62e:	e8 cd ff ff ff       	call   c001c600 <SATABus::~SATABus()>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	83 ec 08             	sub    esp,0x8
c001c639:	68 64 01 00 00       	push   0x164
c001c63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c642:	e8 17 dd fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c647:	83 c4 10             	add    esp,0x10
c001c64a:	83 c4 0c             	add    esp,0xc
c001c64d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c64e <ATA::~ATA()>:
c001c64e:	83 ec 0c             	sub    esp,0xc
c001c651:	ba 7c ed 01 c0       	mov    edx,0xc001ed7c
c001c656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c65a:	89 10                	mov    DWORD PTR [eax],edx
c001c65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c660:	83 ec 0c             	sub    esp,0xc
c001c663:	50                   	push   eax
c001c664:	e8 89 f6 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c669:	83 c4 10             	add    esp,0x10
c001c66c:	90                   	nop
c001c66d:	83 c4 0c             	add    esp,0xc
c001c670:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c672 <ATA::~ATA()>:
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	83 ec 0c             	sub    esp,0xc
c001c678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c67c:	e8 cd ff ff ff       	call   c001c64e <ATA::~ATA()>
c001c681:	83 c4 10             	add    esp,0x10
c001c684:	83 ec 08             	sub    esp,0x8
c001c687:	68 7c 01 00 00       	push   0x17c
c001c68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c690:	e8 c9 dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c695:	83 c4 10             	add    esp,0x10
c001c698:	83 c4 0c             	add    esp,0xc
c001c69b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c69c <ATAPI::~ATAPI()>:
c001c69c:	83 ec 0c             	sub    esp,0xc
c001c69f:	ba c4 ed 01 c0       	mov    edx,0xc001edc4
c001c6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a8:	89 10                	mov    DWORD PTR [eax],edx
c001c6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ae:	83 ec 0c             	sub    esp,0xc
c001c6b1:	50                   	push   eax
c001c6b2:	e8 3b f6 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c6b7:	83 c4 10             	add    esp,0x10
c001c6ba:	90                   	nop
c001c6bb:	83 c4 0c             	add    esp,0xc
c001c6be:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c6c0 <ATAPI::~ATAPI()>:
c001c6c0:	83 ec 0c             	sub    esp,0xc
c001c6c3:	83 ec 0c             	sub    esp,0xc
c001c6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ca:	e8 cd ff ff ff       	call   c001c69c <ATAPI::~ATAPI()>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	83 ec 08             	sub    esp,0x8
c001c6d5:	68 84 01 00 00       	push   0x184
c001c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6de:	e8 7b dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c6e3:	83 c4 10             	add    esp,0x10
c001c6e6:	83 c4 0c             	add    esp,0xc
c001c6e9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c6ea <SATA::~SATA()>:
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	ba 78 ee 01 c0       	mov    edx,0xc001ee78
c001c6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f6:	89 10                	mov    DWORD PTR [eax],edx
c001c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fc:	83 ec 0c             	sub    esp,0xc
c001c6ff:	50                   	push   eax
c001c700:	e8 ed f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c705:	83 c4 10             	add    esp,0x10
c001c708:	90                   	nop
c001c709:	83 c4 0c             	add    esp,0xc
c001c70c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c70e <SATA::~SATA()>:
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	83 ec 0c             	sub    esp,0xc
c001c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c718:	e8 cd ff ff ff       	call   c001c6ea <SATA::~SATA()>
c001c71d:	83 c4 10             	add    esp,0x10
c001c720:	83 ec 08             	sub    esp,0x8
c001c723:	68 7c 01 00 00       	push   0x17c
c001c728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c72c:	e8 2d dc fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	83 c4 0c             	add    esp,0xc
c001c737:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c738 <SATAPI::~SATAPI()>:
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	ba b0 ef 01 c0       	mov    edx,0xc001efb0
c001c740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c744:	89 10                	mov    DWORD PTR [eax],edx
c001c746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74a:	83 ec 0c             	sub    esp,0xc
c001c74d:	50                   	push   eax
c001c74e:	e8 9f f5 fe ff       	call   c000bcf2 <PhysicalDisk::~PhysicalDisk()>
c001c753:	83 c4 10             	add    esp,0x10
c001c756:	90                   	nop
c001c757:	83 c4 0c             	add    esp,0xc
c001c75a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c75c <SATAPI::~SATAPI()>:
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	83 ec 0c             	sub    esp,0xc
c001c762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c766:	e8 cd ff ff ff       	call   c001c738 <SATAPI::~SATAPI()>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	83 ec 08             	sub    esp,0x8
c001c771:	68 84 01 00 00       	push   0x184
c001c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c77a:	e8 df db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c77f:	83 c4 10             	add    esp,0x10
c001c782:	83 c4 0c             	add    esp,0xc
c001c785:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c786 <IOAPIC::~IOAPIC()>:
c001c786:	83 ec 0c             	sub    esp,0xc
c001c789:	ba f0 ef 01 c0       	mov    edx,0xc001eff0
c001c78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c792:	89 10                	mov    DWORD PTR [eax],edx
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	50                   	push   eax
c001c79c:	e8 f5 ef fe ff       	call   c000b796 <Device::~Device()>
c001c7a1:	83 c4 10             	add    esp,0x10
c001c7a4:	90                   	nop
c001c7a5:	83 c4 0c             	add    esp,0xc
c001c7a8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c7aa <IOAPIC::~IOAPIC()>:
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	83 ec 0c             	sub    esp,0xc
c001c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7b4:	e8 cd ff ff ff       	call   c001c786 <IOAPIC::~IOAPIC()>
c001c7b9:	83 c4 10             	add    esp,0x10
c001c7bc:	83 ec 08             	sub    esp,0x8
c001c7bf:	68 68 01 00 00       	push   0x168
c001c7c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7c8:	e8 91 db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c7cd:	83 c4 10             	add    esp,0x10
c001c7d0:	83 c4 0c             	add    esp,0xc
c001c7d3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c7d4 <APICTimer::~APICTimer()>:
c001c7d4:	83 ec 0c             	sub    esp,0xc
c001c7d7:	ba 38 f0 01 c0       	mov    edx,0xc001f038
c001c7dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e0:	89 10                	mov    DWORD PTR [eax],edx
c001c7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e6:	83 ec 0c             	sub    esp,0xc
c001c7e9:	50                   	push   eax
c001c7ea:	e8 a5 08 ff ff       	call   c000d094 <Timer::~Timer()>
c001c7ef:	83 c4 10             	add    esp,0x10
c001c7f2:	90                   	nop
c001c7f3:	83 c4 0c             	add    esp,0xc
c001c7f6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c7f8 <APICTimer::~APICTimer()>:
c001c7f8:	83 ec 0c             	sub    esp,0xc
c001c7fb:	83 ec 0c             	sub    esp,0xc
c001c7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c802:	e8 cd ff ff ff       	call   c001c7d4 <APICTimer::~APICTimer()>
c001c807:	83 c4 10             	add    esp,0x10
c001c80a:	83 ec 08             	sub    esp,0x8
c001c80d:	68 60 01 00 00       	push   0x160
c001c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c816:	e8 43 db fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	83 c4 0c             	add    esp,0xc
c001c821:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c824 <PIT::~PIT()>:
c001c824:	83 ec 0c             	sub    esp,0xc
c001c827:	ba 88 f0 01 c0       	mov    edx,0xc001f088
c001c82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c830:	89 10                	mov    DWORD PTR [eax],edx
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	83 ec 0c             	sub    esp,0xc
c001c839:	50                   	push   eax
c001c83a:	e8 55 08 ff ff       	call   c000d094 <Timer::~Timer()>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	90                   	nop
c001c843:	83 c4 0c             	add    esp,0xc
c001c846:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c848 <PIT::~PIT()>:
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c852:	e8 cd ff ff ff       	call   c001c824 <PIT::~PIT()>
c001c857:	83 c4 10             	add    esp,0x10
c001c85a:	83 ec 08             	sub    esp,0x8
c001c85d:	68 5c 01 00 00       	push   0x15c
c001c862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c866:	e8 f3 da fe ff       	call   c000a35e <operator delete(void*, unsigned long)>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	83 c4 0c             	add    esp,0xc
c001c871:	c3                   	ret    
